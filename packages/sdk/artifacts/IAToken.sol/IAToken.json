{"abi":[{"type":"function","name":"POOL","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ILendingPool"}],"stateMutability":"view"},{"type":"function","name":"UNDERLYING_ASSET_ADDRESS","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"burn","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"receiverOfUnderlying","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getPreviousIndex","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"handleRepayment","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"onBehalfOf","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"mint","inputs":[{"name":"caller","type":"address","internalType":"address"},{"name":"onBehalfOf","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"mintToTreasury","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOnLiquidation","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferUnderlyingTo","inputs":[{"name":"target","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"POOL()":"7535d246","UNDERLYING_ASSET_ADDRESS()":"b16a19de","burn(address,address,uint256,uint256)":"d7020d0a","getPreviousIndex(address)":"e0753986","handleRepayment(address,address,uint256)":"6fd97676","mint(address,address,uint256,uint256)":"b3f1c93d","mintToTreasury(uint256,uint256)":"7df5bd3b","transferOnLiquidation(address,address,uint256)":"f866c319","transferUnderlyingTo(address,uint256)":"4efecaa5"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverOfUnderlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPreviousIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"handleRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"mintToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferOnLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUnderlyingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"kind\":\"dev\",\"methods\":{\"UNDERLYING_ASSET_ADDRESS()\":{\"returns\":{\"_0\":\"The address of the underlying asset\"}},\"burn(address,address,uint256,uint256)\":{\"details\":\"In some instances, the mint event could be emitted from a burn transaction if the amount to burn is less than the interest that the user accrued\",\"params\":{\"amount\":\"The amount being burned\",\"from\":\"The address from which the aTokens will be burned\",\"index\":\"The next liquidity index of the reserve\",\"receiverOfUnderlying\":\"The address that will receive the underlying\"}},\"handleRepayment(address,address,uint256)\":{\"details\":\"The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\",\"params\":{\"amount\":\"The amount getting repaid\",\"onBehalfOf\":\"The address of the user who will get his debt reduced/removed\",\"user\":\"The user executing the repayment\"}},\"mint(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens getting minted\",\"caller\":\"The address performing the mint\",\"index\":\"The next liquidity index of the reserve\",\"onBehalfOf\":\"The address of the user that will receive the minted aTokens\"},\"returns\":{\"_0\":\"`true` if the the previous balance of the user was 0\"}},\"mintToTreasury(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens getting minted\",\"index\":\"The next liquidity index of the reserve\"}},\"transferOnLiquidation(address,address,uint256)\":{\"params\":{\"from\":\"The address getting liquidated, current owner of the aTokens\",\"to\":\"The recipient\",\"value\":\"The amount of tokens getting transferred\"}},\"transferUnderlyingTo(address,uint256)\":{\"details\":\"Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\",\"params\":{\"amount\":\"The amount getting transferred\",\"target\":\"The recipient of the underlying\"}}},\"title\":\"IAToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"UNDERLYING_ASSET_ADDRESS()\":{\"notice\":\"Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\"},\"burn(address,address,uint256,uint256)\":{\"notice\":\"Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\"},\"handleRepayment(address,address,uint256)\":{\"notice\":\"Handles the underlying received by the aToken after the transfer has been completed.\"},\"mint(address,address,uint256,uint256)\":{\"notice\":\"Mints `amount` aTokens to `user`\"},\"mintToTreasury(uint256,uint256)\":{\"notice\":\"Mints aTokens to the reserve treasury\"},\"transferOnLiquidation(address,address,uint256)\":{\"notice\":\"Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\"},\"transferUnderlyingTo(address,uint256)\":{\"notice\":\"Transfers the underlying asset to `target`.\"}},\"notice\":\"Defines the basic interface for an AToken.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/aave/IAToken.sol\":\"IAToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":flywheel-v2/=lib/flywheel-v2/src/\",\":flywheel/=lib/flywheel-v2/src/\",\":forge-std/=lib/forge-std/src/\",\":fuse-flywheel/=lib/fuse-flywheel/src/\",\":libcompound/=lib/fuse-flywheel/lib/libcompound/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":ops/=lib/ops/contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/\",\":solmate/=lib/solmate/src/\",\":weird-erc20/=lib/fuse-flywheel/lib/libcompound/lib/solmate/lib/weird-erc20/src/\"]},\"sources\":{\"contracts/external/aave/IAToken.sol\":{\"keccak256\":\"0xbbd7ad200680fa3b01877bc94ffab1aec9aa01e5f6eba2eb4be4559a46b9642f\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://660e9f7ebf34c8e6424e2dd7faf2ff14b3d8a742ae3ee9e08cbbb347510c6336\",\"dweb:/ipfs/QmeLjV2RbwqJbMxoD5hYJQ1SYfWVvCLtGiVHQ43deguwSN\"]},\"contracts/external/aave/ILendingPool.sol\":{\"keccak256\":\"0xd10977e4e3372132ea19db28e3bd939b2d09182793ad5207b6d5b71bebba06ad\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://4980301213f8100a84e1dd879398bf012d6b5850f274c936885d8dea96bb15ab\",\"dweb:/ipfs/QmUeScrMx2wb1zkKDme4po5q38vtEbTnCCUgXFC9dievs2\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.10+commit.fc410830"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"POOL","outputs":[{"internalType":"contract ILendingPool","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"UNDERLYING_ASSET_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"receiverOfUnderlying","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"burn"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"stateMutability":"view","type":"function","name":"getPreviousIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"onBehalfOf","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"handleRepayment"},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"onBehalfOf","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"mintToTreasury"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferOnLiquidation"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferUnderlyingTo"}],"devdoc":{"kind":"dev","methods":{"UNDERLYING_ASSET_ADDRESS()":{"returns":{"_0":"The address of the underlying asset"}},"burn(address,address,uint256,uint256)":{"details":"In some instances, the mint event could be emitted from a burn transaction if the amount to burn is less than the interest that the user accrued","params":{"amount":"The amount being burned","from":"The address from which the aTokens will be burned","index":"The next liquidity index of the reserve","receiverOfUnderlying":"The address that will receive the underlying"}},"handleRepayment(address,address,uint256)":{"details":"The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.","params":{"amount":"The amount getting repaid","onBehalfOf":"The address of the user who will get his debt reduced/removed","user":"The user executing the repayment"}},"mint(address,address,uint256,uint256)":{"params":{"amount":"The amount of tokens getting minted","caller":"The address performing the mint","index":"The next liquidity index of the reserve","onBehalfOf":"The address of the user that will receive the minted aTokens"},"returns":{"_0":"`true` if the the previous balance of the user was 0"}},"mintToTreasury(uint256,uint256)":{"params":{"amount":"The amount of tokens getting minted","index":"The next liquidity index of the reserve"}},"transferOnLiquidation(address,address,uint256)":{"params":{"from":"The address getting liquidated, current owner of the aTokens","to":"The recipient","value":"The amount of tokens getting transferred"}},"transferUnderlyingTo(address,uint256)":{"details":"Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()","params":{"amount":"The amount getting transferred","target":"The recipient of the underlying"}}},"version":1},"userdoc":{"kind":"user","methods":{"UNDERLYING_ASSET_ADDRESS()":{"notice":"Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)"},"burn(address,address,uint256,uint256)":{"notice":"Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`"},"handleRepayment(address,address,uint256)":{"notice":"Handles the underlying received by the aToken after the transfer has been completed."},"mint(address,address,uint256,uint256)":{"notice":"Mints `amount` aTokens to `user`"},"mintToTreasury(uint256,uint256)":{"notice":"Mints aTokens to the reserve treasury"},"transferOnLiquidation(address,address,uint256)":{"notice":"Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken"},"transferUnderlyingTo(address,uint256)":{"notice":"Transfers the underlying asset to `target`."}},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/","@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/","ds-test/=lib/forge-std/lib/ds-test/src/","flywheel-v2/=lib/flywheel-v2/src/","flywheel/=lib/flywheel-v2/src/","forge-std/=lib/forge-std/src/","fuse-flywheel/=lib/fuse-flywheel/src/","libcompound/=lib/fuse-flywheel/lib/libcompound/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","ops/=lib/ops/contracts/","pyth-sdk-solidity/=lib/pyth-sdk-solidity/","solidity-bytes-utils/=lib/solidity-bytes-utils/","solmate/=lib/solmate/src/","weird-erc20/=lib/fuse-flywheel/lib/libcompound/lib/solmate/lib/weird-erc20/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"contracts/external/aave/IAToken.sol":"IAToken"},"evmVersion":"london","libraries":{}},"sources":{"contracts/external/aave/IAToken.sol":{"keccak256":"0xbbd7ad200680fa3b01877bc94ffab1aec9aa01e5f6eba2eb4be4559a46b9642f","urls":["bzz-raw://660e9f7ebf34c8e6424e2dd7faf2ff14b3d8a742ae3ee9e08cbbb347510c6336","dweb:/ipfs/QmeLjV2RbwqJbMxoD5hYJQ1SYfWVvCLtGiVHQ43deguwSN"],"license":"AGPL-3.0"},"contracts/external/aave/ILendingPool.sol":{"keccak256":"0xd10977e4e3372132ea19db28e3bd939b2d09182793ad5207b6d5b71bebba06ad","urls":["bzz-raw://4980301213f8100a84e1dd879398bf012d6b5850f274c936885d8dea96bb15ab","dweb:/ipfs/QmUeScrMx2wb1zkKDme4po5q38vtEbTnCCUgXFC9dievs2"],"license":"AGPL-3.0"}},"version":1},"id":34}