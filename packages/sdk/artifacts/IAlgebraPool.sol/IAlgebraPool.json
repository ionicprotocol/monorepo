{"abi":[{"type":"function","name":"activeIncentive","inputs":[],"outputs":[{"name":"virtualPool","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"burn","inputs":[{"name":"bottomTick","type":"int24","internalType":"int24"},{"name":"topTick","type":"int24","internalType":"int24"},{"name":"amount","type":"uint128","internalType":"uint128"}],"outputs":[{"name":"amount0","type":"uint256","internalType":"uint256"},{"name":"amount1","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"collect","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"bottomTick","type":"int24","internalType":"int24"},{"name":"topTick","type":"int24","internalType":"int24"},{"name":"amount0Requested","type":"uint128","internalType":"uint128"},{"name":"amount1Requested","type":"uint128","internalType":"uint128"}],"outputs":[{"name":"amount0","type":"uint128","internalType":"uint128"},{"name":"amount1","type":"uint128","internalType":"uint128"}],"stateMutability":"nonpayable"},{"type":"function","name":"factory","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"flash","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"amount0","type":"uint256","internalType":"uint256"},{"name":"amount1","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getTimepoints","inputs":[{"name":"secondsAgos","type":"uint32[]","internalType":"uint32[]"}],"outputs":[{"name":"tickCumulatives","type":"int56[]","internalType":"int56[]"},{"name":"secondsPerLiquidityCumulatives","type":"uint160[]","internalType":"uint160[]"},{"name":"volatilityCumulatives","type":"uint112[]","internalType":"uint112[]"},{"name":"volumePerAvgLiquiditys","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"globalState","inputs":[],"outputs":[{"name":"price","type":"uint160","internalType":"uint160"},{"name":"tick","type":"int24","internalType":"int24"},{"name":"fee","type":"uint16","internalType":"uint16"},{"name":"timepointIndex","type":"uint16","internalType":"uint16"},{"name":"communityFeeToken0","type":"uint8","internalType":"uint8"},{"name":"communityFeeToken1","type":"uint8","internalType":"uint8"},{"name":"unlocked","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"price","type":"uint160","internalType":"uint160"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"liquidity","inputs":[],"outputs":[{"name":"","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"liquidityCooldown","inputs":[],"outputs":[{"name":"cooldownInSeconds","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"mint","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"},{"name":"bottomTick","type":"int24","internalType":"int24"},{"name":"topTick","type":"int24","internalType":"int24"},{"name":"amount","type":"uint128","internalType":"uint128"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"amount0","type":"uint256","internalType":"uint256"},{"name":"amount1","type":"uint256","internalType":"uint256"},{"name":"liquidityActual","type":"uint128","internalType":"uint128"}],"stateMutability":"nonpayable"},{"type":"function","name":"positions","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"liquidityAmount","type":"uint128","internalType":"uint128"},{"name":"lastLiquidityAddTimestamp","type":"uint32","internalType":"uint32"},{"name":"innerFeeGrowth0Token","type":"uint256","internalType":"uint256"},{"name":"innerFeeGrowth1Token","type":"uint256","internalType":"uint256"},{"name":"fees0","type":"uint128","internalType":"uint128"},{"name":"fees1","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"swap","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"zeroToOne","type":"bool","internalType":"bool"},{"name":"amountSpecified","type":"int256","internalType":"int256"},{"name":"limitSqrtPrice","type":"uint160","internalType":"uint160"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"amount0","type":"int256","internalType":"int256"},{"name":"amount1","type":"int256","internalType":"int256"}],"stateMutability":"nonpayable"},{"type":"function","name":"swapSupportingFeeOnInputTokens","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"},{"name":"zeroToOne","type":"bool","internalType":"bool"},{"name":"amountSpecified","type":"int256","internalType":"int256"},{"name":"limitSqrtPrice","type":"uint160","internalType":"uint160"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"amount0","type":"int256","internalType":"int256"},{"name":"amount1","type":"int256","internalType":"int256"}],"stateMutability":"nonpayable"},{"type":"function","name":"tickSpacing","inputs":[],"outputs":[{"name":"","type":"int24","internalType":"int24"}],"stateMutability":"view"},{"type":"function","name":"tickTable","inputs":[{"name":"wordPosition","type":"int16","internalType":"int16"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"ticks","inputs":[{"name":"tick","type":"int24","internalType":"int24"}],"outputs":[{"name":"liquidityTotal","type":"uint128","internalType":"uint128"},{"name":"liquidityDelta","type":"int128","internalType":"int128"},{"name":"outerFeeGrowth0Token","type":"uint256","internalType":"uint256"},{"name":"outerFeeGrowth1Token","type":"uint256","internalType":"uint256"},{"name":"outerTickCumulative","type":"int56","internalType":"int56"},{"name":"outerSecondsPerLiquidity","type":"uint160","internalType":"uint160"},{"name":"outerSecondsSpent","type":"uint32","internalType":"uint32"},{"name":"initialized","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"timepoints","inputs":[{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"initialized","type":"bool","internalType":"bool"},{"name":"blockTimestamp","type":"uint32","internalType":"uint32"},{"name":"tickCumulative","type":"int56","internalType":"int56"},{"name":"secondsPerLiquidityCumulative","type":"uint160","internalType":"uint160"},{"name":"volatilityCumulative","type":"uint88","internalType":"uint88"},{"name":"averageTick","type":"int24","internalType":"int24"},{"name":"volumePerLiquidityCumulative","type":"uint144","internalType":"uint144"}],"stateMutability":"view"},{"type":"function","name":"token0","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"token1","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"totalFeeGrowth0Token","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalFeeGrowth1Token","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"activeIncentive()":"facb0eb1","burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","factory()":"c45a0155","flash(address,uint256,uint256,bytes)":"490e6cbc","getTimepoints(uint32[])":"9d3a5241","globalState()":"e76c01e4","initialize(uint160)":"f637731d","liquidity()":"1a686502","liquidityCooldown()":"17e25b3c","mint(address,address,int24,int24,uint128,bytes)":"aafe29c0","positions(bytes32)":"514ea4bf","swap(address,bool,int256,uint160,bytes)":"128acb08","swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)":"71334694","tickSpacing()":"d0c93a7c","tickTable(int16)":"c677e3e0","ticks(int24)":"f30dba93","timepoints(uint256)":"74eceae6","token0()":"0dfe1681","token1()":"d21220a7","totalFeeGrowth0Token()":"6378ae44","totalFeeGrowth1Token()":"ecdecf42"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"activeIncentive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"virtualPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"getTimepoints\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulatives\",\"type\":\"uint160[]\"},{\"internalType\":\"uint112[]\",\"name\":\"volatilityCumulatives\",\"type\":\"uint112[]\"},{\"internalType\":\"uint256[]\",\"name\":\"volumePerAvgLiquiditys\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalState\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"timepointIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"communityFeeToken0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"communityFeeToken1\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityCooldown\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"cooldownInSeconds\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"bottomTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"topTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidityActual\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lastLiquidityAddTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"innerFeeGrowth0Token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"innerFeeGrowth1Token\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"fees0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"fees1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroToOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroToOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapSupportingFeeOnInputTokens\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickTable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityTotal\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"outerFeeGrowth0Token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outerFeeGrowth1Token\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"outerTickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"outerSecondsPerLiquidity\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"outerSecondsSpent\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"timepoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulative\",\"type\":\"uint160\"},{\"internalType\":\"uint88\",\"name\":\"volatilityCumulative\",\"type\":\"uint88\"},{\"internalType\":\"int24\",\"name\":\"averageTick\",\"type\":\"int24\"},{\"internalType\":\"uint144\",\"name\":\"volumePerLiquidityCumulative\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeGrowth0Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeGrowth1Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Credit to Uniswap Labs under GPL-2.0-or-later license: https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\",\"kind\":\"dev\",\"methods\":{\"activeIncentive()\":{\"details\":\"if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\",\"returns\":{\"virtualPool\":\"The address of a virtual pool associated with the current active incentive\"}},\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"bottomTick\":\"The lower tick of the position for which to burn liquidity\",\"topTick\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"bottomTick\":\"The lower tick of the position for which to collect fees\",\"recipient\":\"The address which should receive the fees collected\",\"topTick\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallbackAll excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"getTimepoints(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulatives\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\",\"volatilityCumulatives\":\"Cumulative standard deviation as of each `secondsAgos`\",\"volumePerAvgLiquiditys\":\"Cumulative swap volume per liquidity as of each `secondsAgos`\"}},\"globalState()\":{\"returns\":{\"price\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value; Returns tick The current tick of the pool, i.e. according to the last tick transition that was run; Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary; Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6; Returns timepointIndex The index of the last written timepoint; Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0; Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1; Returns unlocked Whether the pool is currently locked to reentrancy;\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"price\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks. Returned value cannot exceed type(uint128).max\"},\"mint(address,address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on bottomTick, topTick, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The desired amount of liquidity to mint\",\"bottomTick\":\"The lower tick of the position in which to add liquidity\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"sender\":\"The address which will receive potential surplus of paid tokens\",\"topTick\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"liquidityActual\":\"The actual minted amount of liquidity\"}},\"positions(bytes32)\":{\"details\":\"This is a public mapping of structures, so the `return` natspec tags are omitted.\",\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\"},\"returns\":{\"liquidityAmount\":\"The amount of liquidity in the position; Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity; Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke; Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke; Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke; Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\",\"limitSqrtPrice\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"recipient\":\"The address to receive the output of the swap\",\"zeroToOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\",\"limitSqrtPrice\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"recipient\":\"The address to receive the output of the swap\",\"sender\":\"The address called this function (Comes from the Router)\",\"zeroToOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"ticks(int24)\":{\"details\":\"This is a public structure, so the `return` natspec tags are omitted.\",\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityTotal\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper; Returns liquidityDelta how much liquidity changes when the pool price crosses the tick; Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0; Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1; Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick; Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick; Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick; Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0 otherwise equal to false. Outside values can only be used if the tick is initialized. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"timepoints(uint256)\":{\"details\":\"You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time ago, rather than at a specific index in the array. This is a public mapping of structures, so the `return` natspec tags are omitted.\",\"params\":{\"index\":\"The element of the timepoints array to fetch\"},\"returns\":{\"initialized\":\"whether the timepoint has been initialized and the values are safe to use; Returns blockTimestamp The timestamp of the timepoint; Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp; Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp; Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp; Returns averageTick Time-weighted average tick; Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\"}},\"totalFeeGrowth0Token()\":{\"details\":\"This value can overflow the uint256\"},\"totalFeeGrowth1Token()\":{\"details\":\"This value can overflow the uint256\"}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activeIncentive()\":{\"notice\":\"Returns the information about active incentive\"},\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"getTimepoints(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"globalState()\":{\"notice\":\"The globalState structure in the pool stores many values but requires only one slot and is exposed as a single method to save gas when accessed externally.\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"liquidityCooldown()\":{\"notice\":\"Returns the lock time for added liquidity\"},\"mint(address,address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/bottomTick/topTick position\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\"},\"tickTable(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickTable for more information \"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"timepoints(uint256)\":{\"notice\":\"Returns data about a specific timepoint index\"},\"totalFeeGrowth0Token()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"totalFeeGrowth1Token()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/algebra/IAlgebraPool.sol\":\"IAlgebraPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":flywheel-v2/=lib/flywheel-v2/src/\",\":flywheel/=lib/flywheel-v2/src/\",\":forge-std/=lib/forge-std/src/\",\":fuse-flywheel/=lib/fuse-flywheel/src/\",\":libcompound/=lib/fuse-flywheel/lib/libcompound/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":ops/=lib/ops/contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/\",\":solmate/=lib/solmate/src/\",\":weird-erc20/=lib/fuse-flywheel/lib/libcompound/lib/solmate/lib/weird-erc20/src/\"]},\"sources\":{\"contracts/external/algebra/IAlgebraPool.sol\":{\"keccak256\":\"0x69b1935c084b04e7e29d04e2f46481f8759e86a1466b91c54dd37762511c634f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://7e1899056671fdc6c2878d405334e6ae836ba20c3ddd96a67ab57aec52602cdf\",\"dweb:/ipfs/QmeT8N9ak33KqRP6pLmLXLDT4WLSbCUkaj7KWbqSwK7Nzi\"]},\"contracts/external/algebra/IAlgebraPoolActions.sol\":{\"keccak256\":\"0xa38ee5ec72b60c95adc0802f59c6eba7b5f2c0b6b79a64668d4b8952f7708972\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://06901b58f7e648f2dbbfbae9a4cbc9028e052570d3204f8ac91f73874b3a94ec\",\"dweb:/ipfs/Qmb6rwATNd9q6Qn7qUs2vbEVb9asVaTYwWnHVEdR7BxpWc\"]},\"contracts/external/algebra/IAlgebraPoolState.sol\":{\"keccak256\":\"0x6ee1f25983fa820a4847109f6ef01f6a7c0dddbd334299f2373cfc299124d66f\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://ab03afadc89cd6c67cd78b79cfb8a09dbbb8e8c000cb31fae45c41291dc3ab38\",\"dweb:/ipfs/QmaUV96TZFJoPwgUB6JKQHKYw6Vz8vY7fR9ZR7mw7h1Z9G\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.10+commit.fc410830"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"activeIncentive","outputs":[{"internalType":"address","name":"virtualPool","type":"address"}]},{"inputs":[{"internalType":"int24","name":"bottomTick","type":"int24"},{"internalType":"int24","name":"topTick","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"stateMutability":"nonpayable","type":"function","name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"bottomTick","type":"int24"},{"internalType":"int24","name":"topTick","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"stateMutability":"nonpayable","type":"function","name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"flash"},{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"stateMutability":"view","type":"function","name":"getTimepoints","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulatives","type":"uint160[]"},{"internalType":"uint112[]","name":"volatilityCumulatives","type":"uint112[]"},{"internalType":"uint256[]","name":"volumePerAvgLiquiditys","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"globalState","outputs":[{"internalType":"uint160","name":"price","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"fee","type":"uint16"},{"internalType":"uint16","name":"timepointIndex","type":"uint16"},{"internalType":"uint8","name":"communityFeeToken0","type":"uint8"},{"internalType":"uint8","name":"communityFeeToken1","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}]},{"inputs":[{"internalType":"uint160","name":"price","type":"uint160"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"view","type":"function","name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"liquidityCooldown","outputs":[{"internalType":"uint32","name":"cooldownInSeconds","type":"uint32"}]},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"bottomTick","type":"int24"},{"internalType":"int24","name":"topTick","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"uint128","name":"liquidityActual","type":"uint128"}]},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"positions","outputs":[{"internalType":"uint128","name":"liquidityAmount","type":"uint128"},{"internalType":"uint32","name":"lastLiquidityAddTimestamp","type":"uint32"},{"internalType":"uint256","name":"innerFeeGrowth0Token","type":"uint256"},{"internalType":"uint256","name":"innerFeeGrowth1Token","type":"uint256"},{"internalType":"uint128","name":"fees0","type":"uint128"},{"internalType":"uint128","name":"fees1","type":"uint128"}]},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroToOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"limitSqrtPrice","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}]},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroToOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"limitSqrtPrice","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"swapSupportingFeeOnInputTokens","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}]},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"stateMutability":"view","type":"function","name":"tickTable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"stateMutability":"view","type":"function","name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityTotal","type":"uint128"},{"internalType":"int128","name":"liquidityDelta","type":"int128"},{"internalType":"uint256","name":"outerFeeGrowth0Token","type":"uint256"},{"internalType":"uint256","name":"outerFeeGrowth1Token","type":"uint256"},{"internalType":"int56","name":"outerTickCumulative","type":"int56"},{"internalType":"uint160","name":"outerSecondsPerLiquidity","type":"uint160"},{"internalType":"uint32","name":"outerSecondsSpent","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"timepoints","outputs":[{"internalType":"bool","name":"initialized","type":"bool"},{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulative","type":"uint160"},{"internalType":"uint88","name":"volatilityCumulative","type":"uint88"},{"internalType":"int24","name":"averageTick","type":"int24"},{"internalType":"uint144","name":"volumePerLiquidityCumulative","type":"uint144"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalFeeGrowth0Token","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalFeeGrowth1Token","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"activeIncentive()":{"details":"if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0","returns":{"virtualPool":"The address of a virtual pool associated with the current active incentive"}},"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","bottomTick":"The lower tick of the position for which to burn liquidity","topTick":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","bottomTick":"The lower tick of the position for which to collect fees","recipient":"The address which should receive the fees collected","topTick":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallbackAll excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"getTimepoints(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulatives":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp","volatilityCumulatives":"Cumulative standard deviation as of each `secondsAgos`","volumePerAvgLiquiditys":"Cumulative swap volume per liquidity as of each `secondsAgos`"}},"globalState()":{"returns":{"price":"The current price of the pool as a sqrt(token1/token0) Q64.96 value; Returns tick The current tick of the pool, i.e. according to the last tick transition that was run; Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary; Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6; Returns timepointIndex The index of the last written timepoint; Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0; Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1; Returns unlocked Whether the pool is currently locked to reentrancy;"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"price":"the initial sqrt price of the pool as a Q64.96"}},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks. Returned value cannot exceed type(uint128).max"},"mint(address,address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on bottomTick, topTick, the amount of liquidity, and the current price.","params":{"amount":"The desired amount of liquidity to mint","bottomTick":"The lower tick of the position in which to add liquidity","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","sender":"The address which will receive potential surplus of paid tokens","topTick":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback","liquidityActual":"The actual minted amount of liquidity"}},"positions(bytes32)":{"details":"This is a public mapping of structures, so the `return` natspec tags are omitted.","params":{"key":"The position's key is a hash of a preimage composed by the owner, bottomTick and topTick"},"returns":{"liquidityAmount":"The amount of liquidity in the position; Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity; Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke; Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke; Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke; Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData","limitSqrtPrice":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","recipient":"The address to receive the output of the swap","zeroToOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}},"swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData","limitSqrtPrice":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","recipient":"The address to receive the output of the swap","sender":"The address called this function (Comes from the Router)","zeroToOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}},"ticks(int24)":{"details":"This is a public structure, so the `return` natspec tags are omitted.","params":{"tick":"The tick to look up"},"returns":{"liquidityTotal":"the total amount of position liquidity that uses the pool either as tick lower or tick upper; Returns liquidityDelta how much liquidity changes when the pool price crosses the tick; Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0; Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1; Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick; Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick; Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick; Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0 otherwise equal to false. Outside values can only be used if the tick is initialized. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}},"timepoints(uint256)":{"details":"You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time ago, rather than at a specific index in the array. This is a public mapping of structures, so the `return` natspec tags are omitted.","params":{"index":"The element of the timepoints array to fetch"},"returns":{"initialized":"whether the timepoint has been initialized and the values are safe to use; Returns blockTimestamp The timestamp of the timepoint; Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp; Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp; Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp; Returns averageTick Time-weighted average tick; Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;"}},"totalFeeGrowth0Token()":{"details":"This value can overflow the uint256"},"totalFeeGrowth1Token()":{"details":"This value can overflow the uint256"}},"version":1},"userdoc":{"kind":"user","methods":{"activeIncentive()":{"notice":"Returns the information about active incentive"},"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"getTimepoints(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"globalState()":{"notice":"The globalState structure in the pool stores many values but requires only one slot and is exposed as a single method to save gas when accessed externally."},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"liquidityCooldown()":{"notice":"Returns the lock time for added liquidity"},"mint(address,address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/bottomTick/topTick position"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"},"swapSupportingFeeOnInputTokens(address,address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)"},"tickTable(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickTable for more information "},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"},"timepoints(uint256)":{"notice":"Returns data about a specific timepoint index"},"totalFeeGrowth0Token()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"totalFeeGrowth1Token()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"}},"version":1}},"settings":{"remappings":["@openzeppelin/=lib/openzeppelin-contracts/","@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/","ds-test/=lib/forge-std/lib/ds-test/src/","flywheel-v2/=lib/flywheel-v2/src/","flywheel/=lib/flywheel-v2/src/","forge-std/=lib/forge-std/src/","fuse-flywheel/=lib/fuse-flywheel/src/","libcompound/=lib/fuse-flywheel/lib/libcompound/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","ops/=lib/ops/contracts/","pyth-sdk-solidity/=lib/pyth-sdk-solidity/","solidity-bytes-utils/=lib/solidity-bytes-utils/","solmate/=lib/solmate/src/","weird-erc20/=lib/fuse-flywheel/lib/libcompound/lib/solmate/lib/weird-erc20/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"contracts/external/algebra/IAlgebraPool.sol":"IAlgebraPool"},"evmVersion":"london","libraries":{}},"sources":{"contracts/external/algebra/IAlgebraPool.sol":{"keccak256":"0x69b1935c084b04e7e29d04e2f46481f8759e86a1466b91c54dd37762511c634f","urls":["bzz-raw://7e1899056671fdc6c2878d405334e6ae836ba20c3ddd96a67ab57aec52602cdf","dweb:/ipfs/QmeT8N9ak33KqRP6pLmLXLDT4WLSbCUkaj7KWbqSwK7Nzi"],"license":"GPL-2.0-or-later"},"contracts/external/algebra/IAlgebraPoolActions.sol":{"keccak256":"0xa38ee5ec72b60c95adc0802f59c6eba7b5f2c0b6b79a64668d4b8952f7708972","urls":["bzz-raw://06901b58f7e648f2dbbfbae9a4cbc9028e052570d3204f8ac91f73874b3a94ec","dweb:/ipfs/Qmb6rwATNd9q6Qn7qUs2vbEVb9asVaTYwWnHVEdR7BxpWc"],"license":"GPL-2.0-or-later"},"contracts/external/algebra/IAlgebraPoolState.sol":{"keccak256":"0x6ee1f25983fa820a4847109f6ef01f6a7c0dddbd334299f2373cfc299124d66f","urls":["bzz-raw://ab03afadc89cd6c67cd78b79cfb8a09dbbb8e8c000cb31fae45c41291dc3ab38","dweb:/ipfs/QmaUV96TZFJoPwgUB6JKQHKYw6Vz8vY7fR9ZR7mw7h1Z9G"],"license":"GPL-2.0-or-later"}},"version":1},"id":37}