/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ISynthereumLiquidityPool {
  export type MintParamsStruct = {
    minNumTokens: BigNumberish;
    collateralAmount: BigNumberish;
    expiration: BigNumberish;
    recipient: string;
  };

  export type MintParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    minNumTokens: BigNumber;
    collateralAmount: BigNumber;
    expiration: BigNumber;
    recipient: string;
  };

  export type RedeemParamsStruct = {
    numTokens: BigNumberish;
    minCollateral: BigNumberish;
    expiration: BigNumberish;
    recipient: string;
  };

  export type RedeemParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    numTokens: BigNumber;
    minCollateral: BigNumber;
    expiration: BigNumber;
    recipient: string;
  };
}

export interface ISynthereumLiquidityPoolInterface extends utils.Interface {
  functions: {
    "claimFee()": FunctionFragment;
    "collateralCoverage()": FunctionFragment;
    "collateralRequirement()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "decreaseCollateral(uint256,uint256)": FunctionFragment;
    "emergencyShutdown()": FunctionFragment;
    "emergencyShutdownPrice()": FunctionFragment;
    "emergencyShutdownTimestamp()": FunctionFragment;
    "feePercentage()": FunctionFragment;
    "feeRecipientsInfo()": FunctionFragment;
    "getMintTradeInfo(uint256)": FunctionFragment;
    "getRedeemTradeInfo(uint256)": FunctionFragment;
    "increaseCollateral(uint256,uint256)": FunctionFragment;
    "liquidate(uint256)": FunctionFragment;
    "liquidationReward()": FunctionFragment;
    "mint((uint256,uint256,uint256,address))": FunctionFragment;
    "redeem((uint256,uint256,uint256,address))": FunctionFragment;
    "setFeePercentage(uint256)": FunctionFragment;
    "setFeeRecipients(address[],uint32[])": FunctionFragment;
    "setLiquidationReward(uint256)": FunctionFragment;
    "setOverCollateralization(uint256)": FunctionFragment;
    "settleEmergencyShutdown()": FunctionFragment;
    "synthereumFinder()": FunctionFragment;
    "syntheticToken()": FunctionFragment;
    "syntheticTokenSymbol()": FunctionFragment;
    "totalCollateralAmount()": FunctionFragment;
    "totalFeeAmount()": FunctionFragment;
    "totalSyntheticTokens()": FunctionFragment;
    "userFee(address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawLiquidity(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimFee"
      | "collateralCoverage"
      | "collateralRequirement"
      | "collateralToken"
      | "decreaseCollateral"
      | "emergencyShutdown"
      | "emergencyShutdownPrice"
      | "emergencyShutdownTimestamp"
      | "feePercentage"
      | "feeRecipientsInfo"
      | "getMintTradeInfo"
      | "getRedeemTradeInfo"
      | "increaseCollateral"
      | "liquidate"
      | "liquidationReward"
      | "mint"
      | "redeem"
      | "setFeePercentage"
      | "setFeeRecipients"
      | "setLiquidationReward"
      | "setOverCollateralization"
      | "settleEmergencyShutdown"
      | "synthereumFinder"
      | "syntheticToken"
      | "syntheticTokenSymbol"
      | "totalCollateralAmount"
      | "totalFeeAmount"
      | "totalSyntheticTokens"
      | "userFee"
      | "version"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claimFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralCoverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdownPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdownTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipientsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintTradeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemTradeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [ISynthereumLiquidityPool.MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [ISynthereumLiquidityPool.RedeemParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipients",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOverCollateralization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleEmergencyShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "synthereumFinder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syntheticToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syntheticTokenSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSyntheticTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userFee", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralCoverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdownPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdownTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipientsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintTradeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemTradeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOverCollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleEmergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "synthereumFinder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syntheticToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syntheticTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSyntheticTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISynthereumLiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISynthereumLiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimFee(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collateralCoverage(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collateralRequirement(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralToken(
      overrides?: CallOverrides
    ): Promise<[string] & { collateralCurrency: string }>;

    decreaseCollateral(
      collateralToDecrease: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyShutdownPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyShutdownTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipientsInfo(
      overrides?: CallOverrides
    ): Promise<[string[], number[], BigNumber]>;

    getMintTradeInfo(
      inputCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        synthTokensReceived: BigNumber;
        feePaid: BigNumber;
      }
    >;

    getRedeemTradeInfo(
      syntheticTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmountReceived: BigNumber;
        feePaid: BigNumber;
      }
    >;

    increaseCollateral(
      collateralToTransfer: BigNumberish,
      collateralToIncrease: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidate(
      numSynthTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidationReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      mintParams: ISynthereumLiquidityPool.MintParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeem(
      redeemParams: ISynthereumLiquidityPool.RedeemParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeRecipients(
      feeRecipients: string[],
      feeProportions: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLiquidationReward(
      _liquidationReward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOverCollateralization(
      _overCollateralization: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settleEmergencyShutdown(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    synthereumFinder(
      overrides?: CallOverrides
    ): Promise<[string] & { finder: string }>;

    syntheticToken(
      overrides?: CallOverrides
    ): Promise<[string] & { syntheticCurrency: string }>;

    syntheticTokenSymbol(
      overrides?: CallOverrides
    ): Promise<[string] & { symbol: string }>;

    totalCollateralAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFeeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSyntheticTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    userFee(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    version(
      overrides?: CallOverrides
    ): Promise<[number] & { poolVersion: number }>;

    withdrawLiquidity(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  claimFee(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collateralCoverage(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  decreaseCollateral(
    collateralToDecrease: BigNumberish,
    collateralToWithdraw: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyShutdown(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyShutdownPrice(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyShutdownTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipientsInfo(
    overrides?: CallOverrides
  ): Promise<[string[], number[], BigNumber]>;

  getMintTradeInfo(
    inputCollateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      synthTokensReceived: BigNumber;
      feePaid: BigNumber;
    }
  >;

  getRedeemTradeInfo(
    syntheticTokens: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralAmountReceived: BigNumber;
      feePaid: BigNumber;
    }
  >;

  increaseCollateral(
    collateralToTransfer: BigNumberish,
    collateralToIncrease: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidate(
    numSynthTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    mintParams: ISynthereumLiquidityPool.MintParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeem(
    redeemParams: ISynthereumLiquidityPool.RedeemParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeePercentage(
    _feePercentage: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeRecipients(
    feeRecipients: string[],
    feeProportions: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLiquidationReward(
    _liquidationReward: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOverCollateralization(
    _overCollateralization: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settleEmergencyShutdown(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  synthereumFinder(overrides?: CallOverrides): Promise<string>;

  syntheticToken(overrides?: CallOverrides): Promise<string>;

  syntheticTokenSymbol(overrides?: CallOverrides): Promise<string>;

  totalCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalSyntheticTokens(overrides?: CallOverrides): Promise<BigNumber>;

  userFee(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<number>;

  withdrawLiquidity(
    collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimFee(overrides?: CallOverrides): Promise<BigNumber>;

    collateralCoverage(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    decreaseCollateral(
      collateralToDecrease: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyShutdown(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { timestamp: BigNumber; price: BigNumber }
    >;

    emergencyShutdownPrice(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdownTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipientsInfo(
      overrides?: CallOverrides
    ): Promise<[string[], number[], BigNumber]>;

    getMintTradeInfo(
      inputCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        synthTokensReceived: BigNumber;
        feePaid: BigNumber;
      }
    >;

    getRedeemTradeInfo(
      syntheticTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralAmountReceived: BigNumber;
        feePaid: BigNumber;
      }
    >;

    increaseCollateral(
      collateralToTransfer: BigNumberish,
      collateralToIncrease: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      numSynthTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        synthTokensLiquidated: BigNumber;
        collateralReceived: BigNumber;
        rewardAmount: BigNumber;
      }
    >;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintParams: ISynthereumLiquidityPool.MintParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        syntheticTokensMinted: BigNumber;
        feePaid: BigNumber;
      }
    >;

    redeem(
      redeemParams: ISynthereumLiquidityPool.RedeemParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralRedeemed: BigNumber;
        feePaid: BigNumber;
      }
    >;

    setFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipients(
      feeRecipients: string[],
      feeProportions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationReward(
      _liquidationReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOverCollateralization(
      _overCollateralization: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleEmergencyShutdown(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        synthTokensSettled: BigNumber;
        collateralSettled: BigNumber;
      }
    >;

    synthereumFinder(overrides?: CallOverrides): Promise<string>;

    syntheticToken(overrides?: CallOverrides): Promise<string>;

    syntheticTokenSymbol(overrides?: CallOverrides): Promise<string>;

    totalCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSyntheticTokens(overrides?: CallOverrides): Promise<BigNumber>;

    userFee(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<number>;

    withdrawLiquidity(
      collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    claimFee(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    collateralCoverage(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collateralRequirement(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseCollateral(
      collateralToDecrease: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyShutdownPrice(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyShutdownTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    feePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipientsInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getMintTradeInfo(
      inputCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemTradeInfo(
      syntheticTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseCollateral(
      collateralToTransfer: BigNumberish,
      collateralToIncrease: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidate(
      numSynthTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidationReward(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      mintParams: ISynthereumLiquidityPool.MintParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeem(
      redeemParams: ISynthereumLiquidityPool.RedeemParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeRecipients(
      feeRecipients: string[],
      feeProportions: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLiquidationReward(
      _liquidationReward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOverCollateralization(
      _overCollateralization: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settleEmergencyShutdown(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    synthereumFinder(overrides?: CallOverrides): Promise<BigNumber>;

    syntheticToken(overrides?: CallOverrides): Promise<BigNumber>;

    syntheticTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSyntheticTokens(overrides?: CallOverrides): Promise<BigNumber>;

    userFee(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLiquidity(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFee(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collateralCoverage(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collateralRequirement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseCollateral(
      collateralToDecrease: BigNumberish,
      collateralToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyShutdown(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyShutdownPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdownTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipientsInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintTradeInfo(
      inputCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemTradeInfo(
      syntheticTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseCollateral(
      collateralToTransfer: BigNumberish,
      collateralToIncrease: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidate(
      numSynthTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidationReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      mintParams: ISynthereumLiquidityPool.MintParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeem(
      redeemParams: ISynthereumLiquidityPool.RedeemParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeRecipients(
      feeRecipients: string[],
      feeProportions: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLiquidationReward(
      _liquidationReward: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOverCollateralization(
      _overCollateralization: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settleEmergencyShutdown(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    synthereumFinder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syntheticToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syntheticTokenSymbol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCollateralAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFeeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSyntheticTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userFee(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
