/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface XBombSwapInterface extends utils.Interface {
  functions: {
    "enter(uint256)": FunctionFragment;
    "getExchangeRate()": FunctionFragment;
    "leave(uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "testingBomb()": FunctionFragment;
    "testingStable()": FunctionFragment;
    "toREWARD(uint256)": FunctionFragment;
    "toSTAKED(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "enter"
      | "getExchangeRate"
      | "leave"
      | "oracle"
      | "testingBomb"
      | "testingStable"
      | "toREWARD"
      | "toSTAKED"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "enter", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leave", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testingBomb",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testingStable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toREWARD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toSTAKED",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testingBomb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testingStable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toREWARD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toSTAKED", data: BytesLike): Result;

  events: {};
}

export interface XBombSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XBombSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    testingBomb(overrides?: CallOverrides): Promise<[string]>;

    testingStable(overrides?: CallOverrides): Promise<[string]>;

    toREWARD(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toSTAKED(
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  enter(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  leave(
    _share: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  testingBomb(overrides?: CallOverrides): Promise<string>;

  testingStable(overrides?: CallOverrides): Promise<string>;

  toREWARD(
    stakedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toSTAKED(
    rewardAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    enter(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    leave(_share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    testingBomb(overrides?: CallOverrides): Promise<string>;

    testingStable(overrides?: CallOverrides): Promise<string>;

    toREWARD(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toSTAKED(
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    testingBomb(overrides?: CallOverrides): Promise<BigNumber>;

    testingStable(overrides?: CallOverrides): Promise<BigNumber>;

    toREWARD(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toSTAKED(
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enter(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getExchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testingBomb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testingStable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toREWARD(
      stakedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toSTAKED(
      rewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
