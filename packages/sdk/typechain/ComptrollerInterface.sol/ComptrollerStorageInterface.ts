/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ComptrollerStorageInterfaceInterface extends utils.Interface {
  functions: {
    "accountAssets(address,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "adminHasRights()": FunctionFragment;
    "borrowCapForCollateral(address,address)": FunctionFragment;
    "borrowCaps(address)": FunctionFragment;
    "borrowGuardianPaused(address)": FunctionFragment;
    "borrowingAgainstCollateralBlacklist(address,address)": FunctionFragment;
    "cTokensByUnderlying(address)": FunctionFragment;
    "closeFactorMantissa()": FunctionFragment;
    "enforceWhitelist()": FunctionFragment;
    "ionicAdmin()": FunctionFragment;
    "ionicAdminHasRights()": FunctionFragment;
    "isUserOfPool(address)": FunctionFragment;
    "liquidationIncentiveMantissa()": FunctionFragment;
    "markets(address)": FunctionFragment;
    "mintGuardianPaused(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pauseGuardian()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "rewardsDistributors(uint256)": FunctionFragment;
    "suppliers(address)": FunctionFragment;
    "supplyCaps(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountAssets"
      | "admin"
      | "adminHasRights"
      | "borrowCapForCollateral"
      | "borrowCaps"
      | "borrowGuardianPaused"
      | "borrowingAgainstCollateralBlacklist"
      | "cTokensByUnderlying"
      | "closeFactorMantissa"
      | "enforceWhitelist"
      | "ionicAdmin"
      | "ionicAdminHasRights"
      | "isUserOfPool"
      | "liquidationIncentiveMantissa"
      | "markets"
      | "mintGuardianPaused"
      | "oracle"
      | "pauseGuardian"
      | "pendingAdmin"
      | "rewardsDistributors"
      | "suppliers"
      | "supplyCaps"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountAssets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminHasRights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCapForCollateral",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "borrowCaps", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowGuardianPaused",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowingAgainstCollateralBlacklist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cTokensByUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enforceWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ionicAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ionicAdminHasRights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUserOfPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "markets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintGuardianPaused",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDistributors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "suppliers", values: [string]): string;
  encodeFunctionData(functionFragment: "supplyCaps", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "accountAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminHasRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowCapForCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowingAgainstCollateralBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cTokensByUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforceWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ionicAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ionicAdminHasRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "suppliers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyCaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {};
}

export interface ComptrollerStorageInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ComptrollerStorageInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    adminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    borrowCapForCollateral(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowCaps(cToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    borrowingAgainstCollateralBlacklist(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cTokensByUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    enforceWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    ionicAdmin(overrides?: CallOverrides): Promise<[string]>;

    ionicAdminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    isUserOfPool(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    markets(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    mintGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    rewardsDistributors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    suppliers(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    supplyCaps(cToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelist(account: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  accountAssets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  adminHasRights(overrides?: CallOverrides): Promise<boolean>;

  borrowCapForCollateral(
    borrowed: string,
    collateral: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowGuardianPaused(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  borrowingAgainstCollateralBlacklist(
    borrowed: string,
    collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cTokensByUnderlying(arg0: string, overrides?: CallOverrides): Promise<string>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  enforceWhitelist(overrides?: CallOverrides): Promise<boolean>;

  ionicAdmin(overrides?: CallOverrides): Promise<string>;

  ionicAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

  isUserOfPool(user: string, overrides?: CallOverrides): Promise<boolean>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  mintGuardianPaused(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  rewardsDistributors(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  suppliers(account: string, overrides?: CallOverrides): Promise<boolean>;

  supplyCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  whitelist(account: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    adminHasRights(overrides?: CallOverrides): Promise<boolean>;

    borrowCapForCollateral(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    borrowingAgainstCollateralBlacklist(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cTokensByUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    enforceWhitelist(overrides?: CallOverrides): Promise<boolean>;

    ionicAdmin(overrides?: CallOverrides): Promise<string>;

    ionicAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

    isUserOfPool(user: string, overrides?: CallOverrides): Promise<boolean>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    mintGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    rewardsDistributors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    suppliers(account: string, overrides?: CallOverrides): Promise<boolean>;

    supplyCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(account: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    borrowCapForCollateral(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowingAgainstCollateralBlacklist(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cTokensByUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    enforceWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    ionicAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    ionicAdminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    isUserOfPool(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDistributors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    suppliers(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    supplyCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(account: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminHasRights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowCapForCollateral(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowCaps(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowingAgainstCollateralBlacklist(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cTokensByUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforceWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ionicAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ionicAdminHasRights(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserOfPool(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDistributors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    suppliers(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplyCaps(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
