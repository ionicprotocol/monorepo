/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace UniswapTwapPriceOracleV2Resolver {
  export type PairConfigStruct = {
    pair: string;
    baseToken: string;
    minPeriod: BigNumberish;
    deviationThreshold: BigNumberish;
  };

  export type PairConfigStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    pair: string;
    baseToken: string;
    minPeriod: BigNumber;
    deviationThreshold: BigNumber;
  };
}

export interface UniswapTwapPriceOracleV2ResolverInterface
  extends utils.Interface {
  functions: {
    "addPair((address,address,uint256,uint256))": FunctionFragment;
    "changeRoot(address)": FunctionFragment;
    "checker()": FunctionFragment;
    "getPairs()": FunctionFragment;
    "getWorkablePairs()": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFromPairs(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "root()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePairs(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPair"
      | "changeRoot"
      | "checker"
      | "getPairs"
      | "getWorkablePairs"
      | "lastUpdate"
      | "owner"
      | "removeFromPairs"
      | "renounceOwnership"
      | "root"
      | "transferOwnership"
      | "updatePairs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPair",
    values: [UniswapTwapPriceOracleV2Resolver.PairConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "changeRoot", values: [string]): string;
  encodeFunctionData(functionFragment: "checker", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPairs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWorkablePairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePairs",
    values: [string[]]
  ): string;

  decodeFunctionResult(functionFragment: "addPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorkablePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePairs",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UniswapTwapPriceOracleV2Resolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapTwapPriceOracleV2ResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPair(
      pair: UniswapTwapPriceOracleV2Resolver.PairConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeRoot(
      _root: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checker(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    getPairs(
      overrides?: CallOverrides
    ): Promise<[UniswapTwapPriceOracleV2Resolver.PairConfigStructOutput[]]>;

    getWorkablePairs(overrides?: CallOverrides): Promise<[string[]]>;

    lastUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFromPairs(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePairs(
      workablePairs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addPair(
    pair: UniswapTwapPriceOracleV2Resolver.PairConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeRoot(
    _root: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checker(
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  getPairs(
    overrides?: CallOverrides
  ): Promise<UniswapTwapPriceOracleV2Resolver.PairConfigStructOutput[]>;

  getWorkablePairs(overrides?: CallOverrides): Promise<string[]>;

  lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFromPairs(
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePairs(
    workablePairs: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPair(
      pair: UniswapTwapPriceOracleV2Resolver.PairConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRoot(_root: string, overrides?: CallOverrides): Promise<void>;

    checker(
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    getPairs(
      overrides?: CallOverrides
    ): Promise<UniswapTwapPriceOracleV2Resolver.PairConfigStructOutput[]>;

    getWorkablePairs(overrides?: CallOverrides): Promise<string[]>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFromPairs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    root(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePairs(
      workablePairs: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addPair(
      pair: UniswapTwapPriceOracleV2Resolver.PairConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeRoot(
      _root: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checker(overrides?: CallOverrides): Promise<BigNumber>;

    getPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getWorkablePairs(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromPairs(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePairs(
      workablePairs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPair(
      pair: UniswapTwapPriceOracleV2Resolver.PairConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeRoot(
      _root: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWorkablePairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromPairs(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePairs(
      workablePairs: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
