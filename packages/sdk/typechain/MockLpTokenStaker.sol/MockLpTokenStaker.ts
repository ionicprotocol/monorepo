/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MockLpTokenStakerInterface extends utils.Interface {
  functions: {
    "addPool(address)": FunctionFragment;
    "blockThirdPartyActions(address)": FunctionFragment;
    "claim(address,address[])": FunctionFragment;
    "claimReceiver(address)": FunctionFragment;
    "claimableReward(address,address[])": FunctionFragment;
    "deposit(address,uint256,bool)": FunctionFragment;
    "emergencyWithdraw(address)": FunctionFragment;
    "lastFeeClaim(address)": FunctionFragment;
    "maxMintableTokens()": FunctionFragment;
    "mintedTokens()": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "registeredTokens(uint256)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setBlockThirdPartyActions(bool)": FunctionFragment;
    "setClaimReceiver(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "updateUserBoosts(address,address[])": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "withdraw(address,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPool"
      | "blockThirdPartyActions"
      | "claim"
      | "claimReceiver"
      | "claimableReward"
      | "deposit"
      | "emergencyWithdraw"
      | "lastFeeClaim"
      | "maxMintableTokens"
      | "mintedTokens"
      | "poolInfo"
      | "poolLength"
      | "registeredTokens"
      | "rewardToken"
      | "setBlockThirdPartyActions"
      | "setClaimReceiver"
      | "startTime"
      | "updateUserBoosts"
      | "userInfo"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blockThirdPartyActions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableReward",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFeeClaim",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockThirdPartyActions",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimReceiver",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateUserBoosts",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockThirdPartyActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFeeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMintableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockThirdPartyActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateUserBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ClaimedReward(address,address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "EmergencyWithdraw(address,address,uint256)": EventFragment;
    "FeeClaimRevert(address)": EventFragment;
    "FeeClaimSuccess(address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeClaimRevert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeClaimSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ClaimedRewardEventObject {
  caller: string;
  claimer: string;
  receiver: string;
  amount: BigNumber;
}
export type ClaimedRewardEvent = TypedEvent<
  [string, string, string, BigNumber],
  ClaimedRewardEventObject
>;

export type ClaimedRewardEventFilter = TypedEventFilter<ClaimedRewardEvent>;

export interface DepositEventObject {
  user: string;
  token: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyWithdrawEventObject {
  token: string;
  user: string;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface FeeClaimRevertEventObject {
  pool: string;
}
export type FeeClaimRevertEvent = TypedEvent<
  [string],
  FeeClaimRevertEventObject
>;

export type FeeClaimRevertEventFilter = TypedEventFilter<FeeClaimRevertEvent>;

export interface FeeClaimSuccessEventObject {
  pool: string;
}
export type FeeClaimSuccessEvent = TypedEvent<
  [string],
  FeeClaimSuccessEventObject
>;

export type FeeClaimSuccessEventFilter = TypedEventFilter<FeeClaimSuccessEvent>;

export interface WithdrawEventObject {
  user: string;
  token: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MockLpTokenStaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLpTokenStakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPool(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    blockThirdPartyActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimReceiver(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    claimableReward(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lastFeeClaim(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMintableTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        adjustedSupply: BigNumber;
        rewardsPerSecond: BigNumber;
        lastRewardTime: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    registeredTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setBlockThirdPartyActions(
      _block: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setClaimReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateUserBoosts(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositAmount: BigNumber;
        adjustedAmount: BigNumber;
        rewardDebt: BigNumber;
        claimable: BigNumber;
      }
    >;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addPool(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  blockThirdPartyActions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claim(
    _user: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimReceiver(arg0: string, overrides?: CallOverrides): Promise<string>;

  claimableReward(
    _user: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    _claimRewards: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lastFeeClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

  mintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      adjustedSupply: BigNumber;
      rewardsPerSecond: BigNumber;
      lastRewardTime: BigNumber;
      accRewardPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  registeredTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setBlockThirdPartyActions(
    _block: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setClaimReceiver(
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  updateUserBoosts(
    _user: string,
    _tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      depositAmount: BigNumber;
      adjustedAmount: BigNumber;
      rewardDebt: BigNumber;
      claimable: BigNumber;
    }
  >;

  withdraw(
    _token: string,
    _amount: BigNumberish,
    _claimRewards: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(_token: string, overrides?: CallOverrides): Promise<boolean>;

    blockThirdPartyActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReceiver(arg0: string, overrides?: CallOverrides): Promise<string>;

    claimableReward(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(_token: string, overrides?: CallOverrides): Promise<void>;

    lastFeeClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    mintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        adjustedSupply: BigNumber;
        rewardsPerSecond: BigNumber;
        lastRewardTime: BigNumber;
        accRewardPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    registeredTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setBlockThirdPartyActions(
      _block: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimReceiver(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserBoosts(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositAmount: BigNumber;
        adjustedAmount: BigNumber;
        rewardDebt: BigNumber;
        claimable: BigNumber;
      }
    >;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ClaimedReward(address,address,address,uint256)"(
      caller?: string | null,
      claimer?: string | null,
      receiver?: string | null,
      amount?: null
    ): ClaimedRewardEventFilter;
    ClaimedReward(
      caller?: string | null,
      claimer?: string | null,
      receiver?: string | null,
      amount?: null
    ): ClaimedRewardEventFilter;

    "Deposit(address,address,uint256)"(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,address,uint256)"(
      token?: string | null,
      user?: string | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      token?: string | null,
      user?: string | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "FeeClaimRevert(address)"(pool?: null): FeeClaimRevertEventFilter;
    FeeClaimRevert(pool?: null): FeeClaimRevertEventFilter;

    "FeeClaimSuccess(address)"(pool?: null): FeeClaimSuccessEventFilter;
    FeeClaimSuccess(pool?: null): FeeClaimSuccessEventFilter;

    "Withdraw(address,address,uint256)"(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    addPool(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    blockThirdPartyActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimReceiver(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimableReward(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lastFeeClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    mintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    registeredTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setBlockThirdPartyActions(
      _block: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setClaimReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserBoosts(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    blockThirdPartyActions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimReceiver(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableReward(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lastFeeClaim(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMintableTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registeredTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBlockThirdPartyActions(
      _block: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setClaimReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUserBoosts(
      _user: string,
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
