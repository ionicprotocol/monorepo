/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export type VaultFeesStruct = {
  deposit: BigNumberish;
  withdrawal: BigNumberish;
  management: BigNumberish;
  performance: BigNumberish;
};

export type VaultFeesStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  deposit: BigNumber;
  withdrawal: BigNumber;
  management: BigNumber;
  performance: BigNumber;
};

export interface IVaultInterface extends utils.Interface {
  functions: {
    "accruedManagementFee()": FunctionFragment;
    "accruedPerformanceFee()": FunctionFragment;
    "adapter()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "assetsCheckpoint()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeAdapter()": FunctionFragment;
    "changeFees()": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToShares(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositLimit()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "fees()": FunctionFragment;
    "feesUpdatedAt()": FunctionFragment;
    "highWaterMark()": FunctionFragment;
    "initialize(address,address,(uint64,uint64,uint64,uint64),address,uint256,address)": FunctionFragment;
    "maxDeposit(address)": FunctionFragment;
    "maxMint(address)": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewMint(uint256)": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "proposeAdapter(address)": FunctionFragment;
    "proposeFees((uint64,uint64,uint64,uint64))": FunctionFragment;
    "proposedAdapter()": FunctionFragment;
    "proposedAdapterTime()": FunctionFragment;
    "proposedFeeTime()": FunctionFragment;
    "proposedFees()": FunctionFragment;
    "quitPeriod()": FunctionFragment;
    "redeem(uint256,address,address)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "setDepositLimit(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setQuitPeriod(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "takeManagementAndPerformanceFees()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accruedManagementFee"
      | "accruedPerformanceFee"
      | "adapter"
      | "allowance"
      | "approve"
      | "asset"
      | "assetsCheckpoint"
      | "balanceOf"
      | "changeAdapter"
      | "changeFees"
      | "convertToAssets"
      | "convertToShares"
      | "decimals"
      | "deposit(uint256,address)"
      | "deposit(uint256)"
      | "depositLimit"
      | "feeRecipient"
      | "fees"
      | "feesUpdatedAt"
      | "highWaterMark"
      | "initialize"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "mint(uint256,address)"
      | "mint(uint256)"
      | "name"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "proposeAdapter"
      | "proposeFees"
      | "proposedAdapter"
      | "proposedAdapterTime"
      | "proposedFeeTime"
      | "proposedFees"
      | "quitPeriod"
      | "redeem(uint256,address,address)"
      | "redeem(uint256)"
      | "setDepositLimit"
      | "setFeeRecipient"
      | "setQuitPeriod"
      | "symbol"
      | "takeManagementAndPerformanceFees"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "withdraw(uint256)"
      | "withdraw(uint256,address,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accruedManagementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedPerformanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "adapter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetsCheckpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feesUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highWaterMark",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, VaultFeesStruct, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "maxDeposit", values: [string]): string;
  encodeFunctionData(functionFragment: "maxMint", values: [string]): string;
  encodeFunctionData(functionFragment: "maxRedeem", values: [string]): string;
  encodeFunctionData(functionFragment: "maxWithdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAdapter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeFees",
    values: [VaultFeesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdapter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdapterTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedFeeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quitPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuitPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeManagementAndPerformanceFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adapter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetsCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feesUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highWaterMark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdapter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdapterTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedFeeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quitPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeManagementAndPerformanceFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,address,address)",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  sender: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedManagementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    accruedPerformanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    adapter(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    asset(
      overrides?: CallOverrides
    ): Promise<[string] & { assetTokenAddress: string }>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeAdapter(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    fees(overrides?: CallOverrides): Promise<[VaultFeesStructOutput]>;

    feesUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    highWaterMark(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      asset_: string,
      adapter_: string,
      fees_: VaultFeesStruct,
      feeRecipient_: string,
      depositLimit_: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    maxDeposit(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxAssets: BigNumber }>;

    maxMint(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxShares: BigNumber }>;

    maxRedeem(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxShares: BigNumber }>;

    maxWithdraw(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxAssets: BigNumber }>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    proposeAdapter(
      newAdapter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proposeFees(
      arg0: VaultFeesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proposedAdapter(overrides?: CallOverrides): Promise<[string]>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposedFeeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposedFees(overrides?: CallOverrides): Promise<[VaultFeesStructOutput]>;

    quitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDepositLimit(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setQuitPeriod(
      _quitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    takeManagementAndPerformanceFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalManagedAssets: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  accruedManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

  accruedPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  adapter(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeAdapter(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  convertToAssets(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "deposit(uint256,address)"(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    assets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  fees(overrides?: CallOverrides): Promise<VaultFeesStructOutput>;

  feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    asset_: string,
    adapter_: string,
    fees_: VaultFeesStruct,
    feeRecipient_: string,
    depositLimit_: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  maxDeposit(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "mint(uint256,address)"(
    shares: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  previewDeposit(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposeAdapter(
    newAdapter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proposeFees(
    arg0: VaultFeesStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proposedAdapter(overrides?: CallOverrides): Promise<string>;

  proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

  proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

  proposedFees(overrides?: CallOverrides): Promise<VaultFeesStructOutput>;

  quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "redeem(uint256,address,address)"(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDepositLimit(
    _depositLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    feeRecipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setQuitPeriod(
    _quitPeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  takeManagementAndPerformanceFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    assets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,address)"(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    accruedManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    accruedPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    adapter(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeAdapter(overrides?: CallOverrides): Promise<void>;

    changeFees(overrides?: CallOverrides): Promise<void>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    fees(overrides?: CallOverrides): Promise<VaultFeesStructOutput>;

    feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      asset_: string,
      adapter_: string,
      fees_: VaultFeesStruct,
      feeRecipient_: string,
      depositLimit_: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxDeposit(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeAdapter(
      newAdapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeFees(
      arg0: VaultFeesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedAdapter(overrides?: CallOverrides): Promise<string>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFees(overrides?: CallOverrides): Promise<VaultFeesStructOutput>;

    quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositLimit(
      _depositLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuitPeriod(
      _quitPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    takeManagementAndPerformanceFees(overrides?: CallOverrides): Promise<void>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "withdraw(uint256)"(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,address,address,uint256,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    accruedManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    accruedPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    adapter(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeAdapter(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeFees(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    fees(overrides?: CallOverrides): Promise<BigNumber>;

    feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      asset_: string,
      adapter_: string,
      fees_: VaultFeesStruct,
      feeRecipient_: string,
      depositLimit_: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    maxDeposit(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "mint(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeAdapter(
      newAdapter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proposeFees(
      arg0: VaultFeesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proposedAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFees(overrides?: CallOverrides): Promise<BigNumber>;

    quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDepositLimit(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setQuitPeriod(
      _quitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    takeManagementAndPerformanceFees(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedManagementFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accruedPerformanceFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeAdapter(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesUpdatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highWaterMark(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      asset_: string,
      adapter_: string,
      fees_: VaultFeesStruct,
      feeRecipient_: string,
      depositLimit_: BigNumberish,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      receiver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeAdapter(
      newAdapter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proposeFees(
      arg0: VaultFeesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proposedAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedAdapterTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedFeeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      feeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setQuitPeriod(
      _quitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeManagementAndPerformanceFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
