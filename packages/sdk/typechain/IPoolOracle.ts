/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IPoolOracleInterface extends utils.Interface {
  functions: {
    "getObservationAt(address,uint256)": FunctionFragment;
    "getPoolObservation(address)": FunctionFragment;
    "increaseObservationCardinalityNext(address,uint16)": FunctionFragment;
    "initializeOracle(uint32)": FunctionFragment;
    "observeFromPool(address,uint32[])": FunctionFragment;
    "observeSingleFromPool(address,uint32)": FunctionFragment;
    "write(uint32,int24,uint128)": FunctionFragment;
    "writeNewEntry(uint16,uint32,int24,uint128,uint16,uint16)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getObservationAt"
      | "getPoolObservation"
      | "increaseObservationCardinalityNext"
      | "initializeOracle"
      | "observeFromPool"
      | "observeSingleFromPool"
      | "write"
      | "writeNewEntry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getObservationAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolObservation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseObservationCardinalityNext",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeOracle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "observeFromPool",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "observeSingleFromPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "write",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writeNewEntry",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getObservationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolObservation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseObservationCardinalityNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "observeFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "observeSingleFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "write", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeNewEntry",
    data: BytesLike
  ): Result;

  events: {
    "IncreaseObservationCardinalityNext(address,uint16,uint16)": EventFragment;
    "OwnerWithdrew(address,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "IncreaseObservationCardinalityNext"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerWithdrew"): EventFragment;
}

export interface IncreaseObservationCardinalityNextEventObject {
  pool: string;
  observationCardinalityNextOld: number;
  observationCardinalityNextNew: number;
}
export type IncreaseObservationCardinalityNextEvent = TypedEvent<
  [string, number, number],
  IncreaseObservationCardinalityNextEventObject
>;

export type IncreaseObservationCardinalityNextEventFilter =
  TypedEventFilter<IncreaseObservationCardinalityNextEvent>;

export interface OwnerWithdrewEventObject {
  owner: string;
  token: string;
  amount: BigNumber;
}
export type OwnerWithdrewEvent = TypedEvent<
  [string, string, BigNumber],
  OwnerWithdrewEventObject
>;

export type OwnerWithdrewEventFilter = TypedEventFilter<OwnerWithdrewEvent>;

export interface IPoolOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getObservationAt(
      pool: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        blockTimestamp: number;
        tickCumulative: BigNumber;
        initialized: boolean;
      }
    >;

    getPoolObservation(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number] & {
        initialized: boolean;
        index: number;
        cardinality: number;
        cardinalityNext: number;
      }
    >;

    increaseObservationCardinalityNext(
      pool: string,
      observationCardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeOracle(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    observeFromPool(
      pool: string,
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tickCumulatives: BigNumber[] }>;

    observeSingleFromPool(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tickCumulative: BigNumber }>;

    write(
      blockTimestamp: BigNumberish,
      tick: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    writeNewEntry(
      index: BigNumberish,
      blockTimestamp: BigNumberish,
      tick: BigNumberish,
      liquidity: BigNumberish,
      cardinality: BigNumberish,
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getObservationAt(
    pool: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      blockTimestamp: number;
      tickCumulative: BigNumber;
      initialized: boolean;
    }
  >;

  getPoolObservation(
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, number, number] & {
      initialized: boolean;
      index: number;
      cardinality: number;
      cardinalityNext: number;
    }
  >;

  increaseObservationCardinalityNext(
    pool: string,
    observationCardinalityNext: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeOracle(
    time: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  observeFromPool(
    pool: string,
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  observeSingleFromPool(
    pool: string,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  write(
    blockTimestamp: BigNumberish,
    tick: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  writeNewEntry(
    index: BigNumberish,
    blockTimestamp: BigNumberish,
    tick: BigNumberish,
    liquidity: BigNumberish,
    cardinality: BigNumberish,
    cardinalityNext: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getObservationAt(
      pool: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        blockTimestamp: number;
        tickCumulative: BigNumber;
        initialized: boolean;
      }
    >;

    getPoolObservation(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, number] & {
        initialized: boolean;
        index: number;
        cardinality: number;
        cardinalityNext: number;
      }
    >;

    increaseObservationCardinalityNext(
      pool: string,
      observationCardinalityNext: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeOracle(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { cardinality: number; cardinalityNext: number }
    >;

    observeFromPool(
      pool: string,
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    observeSingleFromPool(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    write(
      blockTimestamp: BigNumberish,
      tick: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { indexUpdated: number; cardinalityUpdated: number }
    >;

    writeNewEntry(
      index: BigNumberish,
      blockTimestamp: BigNumberish,
      tick: BigNumberish,
      liquidity: BigNumberish,
      cardinality: BigNumberish,
      cardinalityNext: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { indexUpdated: number; cardinalityUpdated: number }
    >;
  };

  filters: {
    "IncreaseObservationCardinalityNext(address,uint16,uint16)"(
      pool?: null,
      observationCardinalityNextOld?: null,
      observationCardinalityNextNew?: null
    ): IncreaseObservationCardinalityNextEventFilter;
    IncreaseObservationCardinalityNext(
      pool?: null,
      observationCardinalityNextOld?: null,
      observationCardinalityNextNew?: null
    ): IncreaseObservationCardinalityNextEventFilter;

    "OwnerWithdrew(address,address,uint256)"(
      owner?: string | null,
      token?: string | null,
      amount?: BigNumberish | null
    ): OwnerWithdrewEventFilter;
    OwnerWithdrew(
      owner?: string | null,
      token?: string | null,
      amount?: BigNumberish | null
    ): OwnerWithdrewEventFilter;
  };

  estimateGas: {
    getObservationAt(
      pool: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolObservation(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseObservationCardinalityNext(
      pool: string,
      observationCardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeOracle(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    observeFromPool(
      pool: string,
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    observeSingleFromPool(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    write(
      blockTimestamp: BigNumberish,
      tick: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    writeNewEntry(
      index: BigNumberish,
      blockTimestamp: BigNumberish,
      tick: BigNumberish,
      liquidity: BigNumberish,
      cardinality: BigNumberish,
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getObservationAt(
      pool: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolObservation(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseObservationCardinalityNext(
      pool: string,
      observationCardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeOracle(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    observeFromPool(
      pool: string,
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    observeSingleFromPool(
      pool: string,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    write(
      blockTimestamp: BigNumberish,
      tick: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    writeNewEntry(
      index: BigNumberish,
      blockTimestamp: BigNumberish,
      tick: BigNumberish,
      liquidity: BigNumberish,
      cardinality: BigNumberish,
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
