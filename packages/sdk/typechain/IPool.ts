/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IPoolInterface extends utils.Interface {
  functions: {
    "factory()": FunctionFragment;
    "getFeeGrowthGlobal()": FunctionFragment;
    "getLiquidityState()": FunctionFragment;
    "getPoolState()": FunctionFragment;
    "getPositions(address,int24,int24)": FunctionFragment;
    "getSecondsPerLiquidityData()": FunctionFragment;
    "getSecondsPerLiquidityInside(int24,int24)": FunctionFragment;
    "initializedTicks(int24)": FunctionFragment;
    "maxTickLiquidity()": FunctionFragment;
    "poolOracle()": FunctionFragment;
    "swapFeeUnits()": FunctionFragment;
    "tickDistance()": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "factory"
      | "getFeeGrowthGlobal"
      | "getLiquidityState"
      | "getPoolState"
      | "getPositions"
      | "getSecondsPerLiquidityData"
      | "getSecondsPerLiquidityInside"
      | "initializedTicks"
      | "maxTickLiquidity"
      | "poolOracle"
      | "swapFeeUnits"
      | "tickDistance"
      | "ticks"
      | "token0"
      | "token1"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeeGrowthGlobal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondsPerLiquidityData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondsPerLiquidityInside",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializedTicks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTickLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeUnits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickDistance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeGrowthGlobal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsPerLiquidityData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondsPerLiquidityInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializedTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTickLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickDistance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;

  events: {};
}

export interface IPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    factory(overrides?: CallOverrides): Promise<[string]>;

    getFeeGrowthGlobal(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLiquidityState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseL: BigNumber;
        reinvestL: BigNumber;
        reinvestLLast: BigNumber;
      }
    >;

    getPoolState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, boolean] & {
        sqrtP: BigNumber;
        currentTick: number;
        nearestCurrentTick: number;
        locked: boolean;
      }
    >;

    getPositions(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInsideLast: BigNumber;
      }
    >;

    getSecondsPerLiquidityData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        secondsPerLiquidityGlobal: BigNumber;
        lastUpdateTime: number;
      }
    >;

    getSecondsPerLiquidityInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { secondsPerLiquidityInside: BigNumber }>;

    initializedTicks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { previous: number; next: number }>;

    maxTickLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolOracle(overrides?: CallOverrides): Promise<[string]>;

    swapFeeUnits(overrides?: CallOverrides): Promise<[number]>;

    tickDistance(overrides?: CallOverrides): Promise<[number]>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutside: BigNumber;
        secondsPerLiquidityOutside: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;
  };

  factory(overrides?: CallOverrides): Promise<string>;

  getFeeGrowthGlobal(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      baseL: BigNumber;
      reinvestL: BigNumber;
      reinvestLLast: BigNumber;
    }
  >;

  getPoolState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, boolean] & {
      sqrtP: BigNumber;
      currentTick: number;
      nearestCurrentTick: number;
      locked: boolean;
    }
  >;

  getPositions(
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      liquidity: BigNumber;
      feeGrowthInsideLast: BigNumber;
    }
  >;

  getSecondsPerLiquidityData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      secondsPerLiquidityGlobal: BigNumber;
      lastUpdateTime: number;
    }
  >;

  getSecondsPerLiquidityInside(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initializedTicks(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number] & { previous: number; next: number }>;

  maxTickLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  poolOracle(overrides?: CallOverrides): Promise<string>;

  swapFeeUnits(overrides?: CallOverrides): Promise<number>;

  tickDistance(overrides?: CallOverrides): Promise<number>;

  ticks(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutside: BigNumber;
      secondsPerLiquidityOutside: BigNumber;
    }
  >;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    factory(overrides?: CallOverrides): Promise<string>;

    getFeeGrowthGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseL: BigNumber;
        reinvestL: BigNumber;
        reinvestLLast: BigNumber;
      }
    >;

    getPoolState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, boolean] & {
        sqrtP: BigNumber;
        currentTick: number;
        nearestCurrentTick: number;
        locked: boolean;
      }
    >;

    getPositions(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInsideLast: BigNumber;
      }
    >;

    getSecondsPerLiquidityData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        secondsPerLiquidityGlobal: BigNumber;
        lastUpdateTime: number;
      }
    >;

    getSecondsPerLiquidityInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializedTicks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { previous: number; next: number }>;

    maxTickLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    poolOracle(overrides?: CallOverrides): Promise<string>;

    swapFeeUnits(overrides?: CallOverrides): Promise<number>;

    tickDistance(overrides?: CallOverrides): Promise<number>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutside: BigNumber;
        secondsPerLiquidityOutside: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeGrowthGlobal(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityState(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolState(overrides?: CallOverrides): Promise<BigNumber>;

    getPositions(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecondsPerLiquidityData(overrides?: CallOverrides): Promise<BigNumber>;

    getSecondsPerLiquidityInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializedTicks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTickLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    poolOracle(overrides?: CallOverrides): Promise<BigNumber>;

    swapFeeUnits(overrides?: CallOverrides): Promise<BigNumber>;

    tickDistance(overrides?: CallOverrides): Promise<BigNumber>;

    ticks(tick: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeGrowthGlobal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositions(
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondsPerLiquidityData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondsPerLiquidityInside(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializedTicks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTickLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapFeeUnits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickDistance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
