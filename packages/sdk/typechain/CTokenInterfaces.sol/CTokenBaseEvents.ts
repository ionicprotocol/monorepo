/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CTokenBaseEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "AccrueInterest(uint256,uint256,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "NewAdminFee(uint256,uint256)": EventFragment;
    "NewIonicFee(uint256,uint256)": EventFragment;
    "NewMarketInterestRateModel(address,address)": EventFragment;
    "NewReserveFactor(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdminFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewIonicFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMarketInterestRateModel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AccrueInterestEventObject {
  cashPrior: BigNumber;
  interestAccumulated: BigNumber;
  borrowIndex: BigNumber;
  totalBorrows: BigNumber;
}
export type AccrueInterestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AccrueInterestEventObject
>;

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface NewAdminFeeEventObject {
  oldAdminFeeMantissa: BigNumber;
  newAdminFeeMantissa: BigNumber;
}
export type NewAdminFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewAdminFeeEventObject
>;

export type NewAdminFeeEventFilter = TypedEventFilter<NewAdminFeeEvent>;

export interface NewIonicFeeEventObject {
  oldIonicFeeMantissa: BigNumber;
  newIonicFeeMantissa: BigNumber;
}
export type NewIonicFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewIonicFeeEventObject
>;

export type NewIonicFeeEventFilter = TypedEventFilter<NewIonicFeeEvent>;

export interface NewMarketInterestRateModelEventObject {
  oldInterestRateModel: string;
  newInterestRateModel: string;
}
export type NewMarketInterestRateModelEvent = TypedEvent<
  [string, string],
  NewMarketInterestRateModelEventObject
>;

export type NewMarketInterestRateModelEventFilter =
  TypedEventFilter<NewMarketInterestRateModelEvent>;

export interface NewReserveFactorEventObject {
  oldReserveFactorMantissa: BigNumber;
  newReserveFactorMantissa: BigNumber;
}
export type NewReserveFactorEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewReserveFactorEventObject
>;

export type NewReserveFactorEventFilter =
  TypedEventFilter<NewReserveFactorEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface CTokenBaseEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CTokenBaseEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AccrueInterest(uint256,uint256,uint256,uint256)"(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null
    ): AccrueInterestEventFilter;
    AccrueInterest(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null
    ): AccrueInterestEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;

    "NewAdminFee(uint256,uint256)"(
      oldAdminFeeMantissa?: null,
      newAdminFeeMantissa?: null
    ): NewAdminFeeEventFilter;
    NewAdminFee(
      oldAdminFeeMantissa?: null,
      newAdminFeeMantissa?: null
    ): NewAdminFeeEventFilter;

    "NewIonicFee(uint256,uint256)"(
      oldIonicFeeMantissa?: null,
      newIonicFeeMantissa?: null
    ): NewIonicFeeEventFilter;
    NewIonicFee(
      oldIonicFeeMantissa?: null,
      newIonicFeeMantissa?: null
    ): NewIonicFeeEventFilter;

    "NewMarketInterestRateModel(address,address)"(
      oldInterestRateModel?: null,
      newInterestRateModel?: null
    ): NewMarketInterestRateModelEventFilter;
    NewMarketInterestRateModel(
      oldInterestRateModel?: null,
      newInterestRateModel?: null
    ): NewMarketInterestRateModelEventFilter;

    "NewReserveFactor(uint256,uint256)"(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null
    ): NewReserveFactorEventFilter;
    NewReserveFactor(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null
    ): NewReserveFactorEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
