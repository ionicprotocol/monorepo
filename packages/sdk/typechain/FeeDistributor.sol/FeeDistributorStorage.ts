/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface FeeDistributorStorageInterface extends utils.Interface {
  functions: {
    "authoritiesRegistry()": FunctionFragment;
    "cErc20DelegateExtensions(address,uint256)": FunctionFragment;
    "comptrollerExtensions(address,uint256)": FunctionFragment;
    "customInterestFeeRates(address)": FunctionFragment;
    "defaultInterestFeeRate()": FunctionFragment;
    "marketsCounter()": FunctionFragment;
    "maxUtilizationRate()": FunctionFragment;
    "minBorrowEth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authoritiesRegistry"
      | "cErc20DelegateExtensions"
      | "comptrollerExtensions"
      | "customInterestFeeRates"
      | "defaultInterestFeeRate"
      | "marketsCounter"
      | "maxUtilizationRate"
      | "minBorrowEth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authoritiesRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cErc20DelegateExtensions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "comptrollerExtensions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customInterestFeeRates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultInterestFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxUtilizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBorrowEth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authoritiesRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cErc20DelegateExtensions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptrollerExtensions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customInterestFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultInterestFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxUtilizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBorrowEth",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FeeDistributorStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeDistributorStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authoritiesRegistry(overrides?: CallOverrides): Promise<[string]>;

    cErc20DelegateExtensions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    comptrollerExtensions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    customInterestFeeRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultInterestFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketsCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxUtilizationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBorrowEth(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  authoritiesRegistry(overrides?: CallOverrides): Promise<string>;

  cErc20DelegateExtensions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  comptrollerExtensions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  customInterestFeeRates(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defaultInterestFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  marketsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  maxUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  minBorrowEth(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    authoritiesRegistry(overrides?: CallOverrides): Promise<string>;

    cErc20DelegateExtensions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    comptrollerExtensions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    customInterestFeeRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultInterestFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    marketsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    maxUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowEth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    authoritiesRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    cErc20DelegateExtensions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comptrollerExtensions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customInterestFeeRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultInterestFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    marketsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    maxUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    minBorrowEth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authoritiesRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cErc20DelegateExtensions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comptrollerExtensions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customInterestFeeRates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultInterestFeeRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketsCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxUtilizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBorrowEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
