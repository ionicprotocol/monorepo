/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface OptimizedAPRVaultBaseInterface extends utils.Interface {
  functions: {
    "DECIMAL_OFFSET()": FunctionFragment;
    "_listExtensions()": FunctionFragment;
    "_registerExtension(address,address)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "adapters(uint256)": FunctionFragment;
    "adaptersCount()": FunctionFragment;
    "asFirstExtension()": FunctionFragment;
    "asSecondExtension()": FunctionFragment;
    "assetsCheckpoint()": FunctionFragment;
    "depositLimit()": FunctionFragment;
    "emergencyExit()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "fees()": FunctionFragment;
    "feesUpdatedAt()": FunctionFragment;
    "flywheelForRewardToken(address)": FunctionFragment;
    "flywheelLogic()": FunctionFragment;
    "highWaterMark()": FunctionFragment;
    "initialize(address[],bytes)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "proposedAdapterTime()": FunctionFragment;
    "proposedAdapters(uint256)": FunctionFragment;
    "proposedAdaptersCount()": FunctionFragment;
    "proposedFeeTime()": FunctionFragment;
    "proposedFees()": FunctionFragment;
    "quitPeriod()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeVault()": FunctionFragment;
    "withdrawalThreshold()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DECIMAL_OFFSET"
      | "_listExtensions"
      | "_registerExtension"
      | "acceptOwnership"
      | "adapters"
      | "adaptersCount"
      | "asFirstExtension"
      | "asSecondExtension"
      | "assetsCheckpoint"
      | "depositLimit"
      | "emergencyExit"
      | "feeRecipient"
      | "fees"
      | "feesUpdatedAt"
      | "flywheelForRewardToken"
      | "flywheelLogic"
      | "highWaterMark"
      | "initialize"
      | "nonces"
      | "owner"
      | "pendingOwner"
      | "proposedAdapterTime"
      | "proposedAdapters"
      | "proposedAdaptersCount"
      | "proposedFeeTime"
      | "proposedFees"
      | "quitPeriod"
      | "registry"
      | "renounceOwnership"
      | "rewardTokens"
      | "transferOwnership"
      | "upgradeVault"
      | "withdrawalThreshold"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DECIMAL_OFFSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_listExtensions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_registerExtension",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adapters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adaptersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "asFirstExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "asSecondExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetsCheckpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feesUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flywheelForRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "flywheelLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highWaterMark",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdapterTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdapters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdaptersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedFeeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quitPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMAL_OFFSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_listExtensions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_registerExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adapters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adaptersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asFirstExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asSecondExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetsCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feesUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flywheelForRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flywheelLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highWaterMark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdapterTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdaptersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedFeeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quitPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalThreshold",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OptimizedAPRVaultBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimizedAPRVaultBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMAL_OFFSET(overrides?: CallOverrides): Promise<[number]>;

    _listExtensions(overrides?: CallOverrides): Promise<[string[]]>;

    _registerExtension(
      extensionToAdd: string,
      extensionToReplace: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapter: string; allocation: BigNumber }
    >;

    adaptersCount(overrides?: CallOverrides): Promise<[number]>;

    asFirstExtension(overrides?: CallOverrides): Promise<[string]>;

    asSecondExtension(overrides?: CallOverrides): Promise<[string]>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyExit(overrides?: CallOverrides): Promise<[boolean]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    fees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawal: BigNumber;
        management: BigNumber;
        performance: BigNumber;
      }
    >;

    feesUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    flywheelForRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    flywheelLogic(overrides?: CallOverrides): Promise<[string]>;

    highWaterMark(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      extensions: string[],
      initData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposedAdapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapter: string; allocation: BigNumber }
    >;

    proposedAdaptersCount(overrides?: CallOverrides): Promise<[number]>;

    proposedFeeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposedFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawal: BigNumber;
        management: BigNumber;
        performance: BigNumber;
      }
    >;

    quitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeVault(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawalThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DECIMAL_OFFSET(overrides?: CallOverrides): Promise<number>;

  _listExtensions(overrides?: CallOverrides): Promise<string[]>;

  _registerExtension(
    extensionToAdd: string,
    extensionToReplace: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adapters(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { adapter: string; allocation: BigNumber }>;

  adaptersCount(overrides?: CallOverrides): Promise<number>;

  asFirstExtension(overrides?: CallOverrides): Promise<string>;

  asSecondExtension(overrides?: CallOverrides): Promise<string>;

  assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyExit(overrides?: CallOverrides): Promise<boolean>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  fees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      deposit: BigNumber;
      withdrawal: BigNumber;
      management: BigNumber;
      performance: BigNumber;
    }
  >;

  feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  flywheelForRewardToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  flywheelLogic(overrides?: CallOverrides): Promise<string>;

  highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    extensions: string[],
    initData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

  proposedAdapters(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { adapter: string; allocation: BigNumber }>;

  proposedAdaptersCount(overrides?: CallOverrides): Promise<number>;

  proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

  proposedFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      deposit: BigNumber;
      withdrawal: BigNumber;
      management: BigNumber;
      performance: BigNumber;
    }
  >;

  quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeVault(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DECIMAL_OFFSET(overrides?: CallOverrides): Promise<number>;

    _listExtensions(overrides?: CallOverrides): Promise<string[]>;

    _registerExtension(
      extensionToAdd: string,
      extensionToReplace: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    adapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapter: string; allocation: BigNumber }
    >;

    adaptersCount(overrides?: CallOverrides): Promise<number>;

    asFirstExtension(overrides?: CallOverrides): Promise<string>;

    asSecondExtension(overrides?: CallOverrides): Promise<string>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(overrides?: CallOverrides): Promise<boolean>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    fees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawal: BigNumber;
        management: BigNumber;
        performance: BigNumber;
      }
    >;

    feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    flywheelForRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    flywheelLogic(overrides?: CallOverrides): Promise<string>;

    highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      extensions: string[],
      initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedAdapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapter: string; allocation: BigNumber }
    >;

    proposedAdaptersCount(overrides?: CallOverrides): Promise<number>;

    proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawal: BigNumber;
        management: BigNumber;
        performance: BigNumber;
      }
    >;

    quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeVault(overrides?: CallOverrides): Promise<void>;

    withdrawalThreshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    DECIMAL_OFFSET(overrides?: CallOverrides): Promise<BigNumber>;

    _listExtensions(overrides?: CallOverrides): Promise<BigNumber>;

    _registerExtension(
      extensionToAdd: string,
      extensionToReplace: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adapters(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    adaptersCount(overrides?: CallOverrides): Promise<BigNumber>;

    asFirstExtension(overrides?: CallOverrides): Promise<BigNumber>;

    asSecondExtension(overrides?: CallOverrides): Promise<BigNumber>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    fees(overrides?: CallOverrides): Promise<BigNumber>;

    feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    flywheelForRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flywheelLogic(overrides?: CallOverrides): Promise<BigNumber>;

    highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      extensions: string[],
      initData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedAdapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedAdaptersCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFees(overrides?: CallOverrides): Promise<BigNumber>;

    quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeVault(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    withdrawalThreshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_OFFSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _listExtensions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _registerExtension(
      extensionToAdd: string,
      extensionToReplace: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adaptersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    asFirstExtension(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    asSecondExtension(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyExit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesUpdatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flywheelForRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flywheelLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highWaterMark(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      extensions: string[],
      initData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedAdapterTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedAdapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedAdaptersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedFeeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeVault(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawalThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
