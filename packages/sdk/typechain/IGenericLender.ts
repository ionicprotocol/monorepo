/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IGenericLenderInterface extends utils.Interface {
  functions: {
    "apr()": FunctionFragment;
    "aprAfterDeposit(uint256)": FunctionFragment;
    "aprAfterWithdraw(uint256)": FunctionFragment;
    "lenderName()": FunctionFragment;
    "sweep(address,address)": FunctionFragment;
    "weightedApr()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "apr"
      | "aprAfterDeposit"
      | "aprAfterWithdraw"
      | "lenderName"
      | "sweep"
      | "weightedApr"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "apr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aprAfterDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "aprAfterWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "weightedApr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "apr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aprAfterDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aprAfterWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lenderName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weightedApr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGenericLender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGenericLenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    apr(overrides?: CallOverrides): Promise<[BigNumber]>;

    aprAfterDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    aprAfterWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lenderName(overrides?: CallOverrides): Promise<[string]>;

    sweep(
      _token: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    weightedApr(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  apr(overrides?: CallOverrides): Promise<BigNumber>;

  aprAfterDeposit(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  aprAfterWithdraw(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lenderName(overrides?: CallOverrides): Promise<string>;

  sweep(
    _token: string,
    to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  weightedApr(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    apr(overrides?: CallOverrides): Promise<BigNumber>;

    aprAfterDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aprAfterWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderName(overrides?: CallOverrides): Promise<string>;

    sweep(_token: string, to: string, overrides?: CallOverrides): Promise<void>;

    weightedApr(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    apr(overrides?: CallOverrides): Promise<BigNumber>;

    aprAfterDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aprAfterWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderName(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      _token: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    weightedApr(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAll(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    apr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aprAfterDeposit(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aprAfterWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      _token: string,
      to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    weightedApr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
