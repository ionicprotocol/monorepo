/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface DiaPriceOracleInterface extends utils.Interface {
  functions: {
    "CAN_ADMIN_OVERWRITE()": FunctionFragment;
    "MASTER_PRICE_ORACLE()": FunctionFragment;
    "NATIVE_TOKEN_USD_KEY()": FunctionFragment;
    "NATIVE_TOKEN_USD_PRICE_FEED()": FunctionFragment;
    "USD_TOKEN()": FunctionFragment;
    "WTOKEN()": FunctionFragment;
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "price(address)": FunctionFragment;
    "priceFeeds(address)": FunctionFragment;
    "setPriceFeeds(address[],address[],string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CAN_ADMIN_OVERWRITE"
      | "MASTER_PRICE_ORACLE"
      | "NATIVE_TOKEN_USD_KEY"
      | "NATIVE_TOKEN_USD_PRICE_FEED"
      | "USD_TOKEN"
      | "WTOKEN"
      | "admin"
      | "changeAdmin"
      | "getUnderlyingPrice"
      | "price"
      | "priceFeeds"
      | "setPriceFeeds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CAN_ADMIN_OVERWRITE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MASTER_PRICE_ORACLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN_USD_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN_USD_PRICE_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USD_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "WTOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "price", values: [string]): string;
  encodeFunctionData(functionFragment: "priceFeeds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPriceFeeds",
    values: [string[], string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "CAN_ADMIN_OVERWRITE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MASTER_PRICE_ORACLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN_USD_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN_USD_PRICE_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USD_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WTOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeeds",
    data: BytesLike
  ): Result;

  events: {
    "NewAdmin(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
}

export interface NewAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface DiaPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiaPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CAN_ADMIN_OVERWRITE(overrides?: CallOverrides): Promise<[boolean]>;

    MASTER_PRICE_ORACLE(overrides?: CallOverrides): Promise<[string]>;

    NATIVE_TOKEN_USD_KEY(overrides?: CallOverrides): Promise<[string]>;

    NATIVE_TOKEN_USD_PRICE_FEED(overrides?: CallOverrides): Promise<[string]>;

    USD_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    WTOKEN(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    price(underlying: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    priceFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { feed: string; key: string }>;

    setPriceFeeds(
      underlyings: string[],
      feeds: string[],
      keys: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CAN_ADMIN_OVERWRITE(overrides?: CallOverrides): Promise<boolean>;

  MASTER_PRICE_ORACLE(overrides?: CallOverrides): Promise<string>;

  NATIVE_TOKEN_USD_KEY(overrides?: CallOverrides): Promise<string>;

  NATIVE_TOKEN_USD_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

  USD_TOKEN(overrides?: CallOverrides): Promise<string>;

  WTOKEN(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getUnderlyingPrice(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  price(underlying: string, overrides?: CallOverrides): Promise<BigNumber>;

  priceFeeds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { feed: string; key: string }>;

  setPriceFeeds(
    underlyings: string[],
    feeds: string[],
    keys: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAN_ADMIN_OVERWRITE(overrides?: CallOverrides): Promise<boolean>;

    MASTER_PRICE_ORACLE(overrides?: CallOverrides): Promise<string>;

    NATIVE_TOKEN_USD_KEY(overrides?: CallOverrides): Promise<string>;

    NATIVE_TOKEN_USD_PRICE_FEED(overrides?: CallOverrides): Promise<string>;

    USD_TOKEN(overrides?: CallOverrides): Promise<string>;

    WTOKEN(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(underlying: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { feed: string; key: string }>;

    setPriceFeeds(
      underlyings: string[],
      feeds: string[],
      keys: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewAdmin(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): NewAdminEventFilter;
    NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;
  };

  estimateGas: {
    CAN_ADMIN_OVERWRITE(overrides?: CallOverrides): Promise<BigNumber>;

    MASTER_PRICE_ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_TOKEN_USD_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_TOKEN_USD_PRICE_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    USD_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    WTOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(underlying: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setPriceFeeds(
      underlyings: string[],
      feeds: string[],
      keys: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAN_ADMIN_OVERWRITE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MASTER_PRICE_ORACLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NATIVE_TOKEN_USD_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NATIVE_TOKEN_USD_PRICE_FEED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USD_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WTOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceFeeds(
      underlyings: string[],
      feeds: string[],
      keys: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
