/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IUmbrellaFeeds {
  export type PriceDataStruct = {
    data: BigNumberish;
    heartbeat: BigNumberish;
    timestamp: BigNumberish;
    price: BigNumberish;
  };

  export type PriceDataStructOutput = [number, number, number, BigNumber] & {
    data: number;
    heartbeat: number;
    timestamp: number;
    price: BigNumber;
  };
}

export interface IUmbrellaFeedsInterface extends utils.Interface {
  functions: {
    "DECIMALS()": FunctionFragment;
    "getPrice(bytes32)": FunctionFragment;
    "getPriceData(bytes32)": FunctionFragment;
    "getPriceDataByName(string)": FunctionFragment;
    "getPriceDataRaw(bytes32)": FunctionFragment;
    "getPriceTimestamp(bytes32)": FunctionFragment;
    "getPriceTimestampHeartbeat(bytes32)": FunctionFragment;
    "priceData(string)": FunctionFragment;
    "prices(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DECIMALS"
      | "getPrice"
      | "getPriceData"
      | "getPriceDataByName"
      | "getPriceDataRaw"
      | "getPriceTimestamp"
      | "getPriceTimestampHeartbeat"
      | "priceData"
      | "prices"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPrice", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getPriceData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceDataByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceDataRaw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceTimestamp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceTimestampHeartbeat",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "priceData", values: [string]): string;
  encodeFunctionData(functionFragment: "prices", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceDataByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceDataRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceTimestampHeartbeat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;

  events: {};
}

export interface IUmbrellaFeeds extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUmbrellaFeedsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    getPrice(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getPriceData(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IUmbrellaFeeds.PriceDataStructOutput] & {
        data: IUmbrellaFeeds.PriceDataStructOutput;
      }
    >;

    getPriceDataByName(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [IUmbrellaFeeds.PriceDataStructOutput] & {
        data: IUmbrellaFeeds.PriceDataStructOutput;
      }
    >;

    getPriceDataRaw(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IUmbrellaFeeds.PriceDataStructOutput] & {
        data: IUmbrellaFeeds.PriceDataStructOutput;
      }
    >;

    getPriceTimestamp(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { price: BigNumber; timestamp: number }>;

    getPriceTimestampHeartbeat(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        price: BigNumber;
        timestamp: number;
        heartbeat: number;
      }
    >;

    priceData(
      _key: string,
      overrides?: CallOverrides
    ): Promise<[IUmbrellaFeeds.PriceDataStructOutput]>;

    prices(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [IUmbrellaFeeds.PriceDataStructOutput] & {
        data: IUmbrellaFeeds.PriceDataStructOutput;
      }
    >;
  };

  DECIMALS(overrides?: CallOverrides): Promise<number>;

  getPrice(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getPriceData(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

  getPriceDataByName(
    _name: string,
    overrides?: CallOverrides
  ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

  getPriceDataRaw(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

  getPriceTimestamp(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { price: BigNumber; timestamp: number }>;

  getPriceTimestampHeartbeat(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number] & {
      price: BigNumber;
      timestamp: number;
      heartbeat: number;
    }
  >;

  priceData(
    _key: string,
    overrides?: CallOverrides
  ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

  prices(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

  callStatic: {
    DECIMALS(overrides?: CallOverrides): Promise<number>;

    getPrice(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceData(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

    getPriceDataByName(
      _name: string,
      overrides?: CallOverrides
    ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

    getPriceDataRaw(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

    getPriceTimestamp(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { price: BigNumber; timestamp: number }>;

    getPriceTimestampHeartbeat(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        price: BigNumber;
        timestamp: number;
        heartbeat: number;
      }
    >;

    priceData(
      _key: string,
      overrides?: CallOverrides
    ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;

    prices(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<IUmbrellaFeeds.PriceDataStructOutput>;
  };

  filters: {};

  estimateGas: {
    DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getPriceData(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceDataByName(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceDataRaw(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceTimestamp(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceTimestampHeartbeat(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceData(_key: string, overrides?: CallOverrides): Promise<BigNumber>;

    prices(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceData(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceDataByName(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceDataRaw(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceTimestamp(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceTimestampHeartbeat(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceData(
      _key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
