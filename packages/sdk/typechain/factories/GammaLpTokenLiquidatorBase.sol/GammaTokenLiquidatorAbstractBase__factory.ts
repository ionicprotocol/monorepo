/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  GammaTokenLiquidatorAbstractBase,
  GammaTokenLiquidatorAbstractBaseInterface,
} from "../../GammaLpTokenLiquidatorBase.sol/GammaTokenLiquidatorAbstractBase";

const _abi = [
  {
    type: "function",
    name: "exactInputSingle",
    inputs: [
      {
        name: "swapRouter",
        type: "address",
        internalType: "address",
      },
      {
        name: "inputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "outputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "vault",
        type: "address",
        internalType: "contract IHypervisor",
      },
      {
        name: "swapAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getSqrtX96Price",
    inputs: [
      {
        name: "pool",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "sqrtPriceX96",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    stateMutability: "view",
  },
] as const;

export class GammaTokenLiquidatorAbstractBase__factory {
  static readonly abi = _abi;
  static createInterface(): GammaTokenLiquidatorAbstractBaseInterface {
    return new utils.Interface(
      _abi
    ) as GammaTokenLiquidatorAbstractBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GammaTokenLiquidatorAbstractBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GammaTokenLiquidatorAbstractBase;
  }
}
