/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GammaUniswapV3LpTokenLiquidatorBase,
  GammaUniswapV3LpTokenLiquidatorBaseInterface,
} from "../../GammaLpTokenLiquidatorBase.sol/GammaUniswapV3LpTokenLiquidatorBase";

const _abi = [
  {
    type: "function",
    name: "exactInputSingle",
    inputs: [
      {
        name: "swapRouter",
        type: "address",
        internalType: "address",
      },
      {
        name: "inputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "outputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "vault",
        type: "address",
        internalType: "contract IHypervisor",
      },
      {
        name: "swapAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getSqrtX96Price",
    inputs: [
      {
        name: "pool",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "sqrtPriceX96",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061061e806100206000396000f3fe6080604052600436106100295760003560e01c806302a74dd21461002e578063bddf8a7914610054575b600080fd5b61004161003c366004610473565b61008c565b6040519081526020015b60405180910390f35b34801561006057600080fd5b5061007461006f3660046104d7565b6103ea565b6040516001600160a01b03909116815260200161004b565b600080836001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f191906104fb565b90506001600160a01b03851661024757836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561013f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016391906104fb565b6001600160a01b0316866001600160a01b0316146101e257836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906104fb565b610244565b836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610220573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024491906104fb565b94505b866001600160a01b031663414bf389604051806101000160405280896001600160a01b03168152602001886001600160a01b03168152602001846001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e29190610518565b62ffffff168152602001306001600160a01b031681526020014281526020018681526020016000815260200160006001600160a01b03168152506040518263ffffffff1660e01b815260040161039c919081516001600160a01b03908116825260208084015182169083015260408084015162ffffff16908301526060808401518216908301526080808401519083015260a0838101519083015260c0808401519083015260e09283015116918101919091526101000190565b6020604051808303816000875af11580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df919061053d565b979650505050505050565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e919061056d565b5094979650505050505050565b6001600160a01b038116811461047057600080fd5b50565b600080600080600060a0868803121561048b57600080fd5b85356104968161045b565b945060208601356104a68161045b565b935060408601356104b68161045b565b925060608601356104c68161045b565b949793965091946080013592915050565b6000602082840312156104e957600080fd5b81356104f48161045b565b9392505050565b60006020828403121561050d57600080fd5b81516104f48161045b565b60006020828403121561052a57600080fd5b815162ffffff811681146104f457600080fd5b60006020828403121561054f57600080fd5b5051919050565b805161ffff8116811461056857600080fd5b919050565b600080600080600080600060e0888a03121561058857600080fd5b87516105938161045b565b8097505060208801518060020b81146105ab57600080fd5b95506105b960408901610556565b94506105c760608901610556565b93506105d560808901610556565b925060a088015160ff811681146105eb57600080fd5b60c0890151909250801515811461060157600080fd5b809150509295989194975092955056fea164736f6c634300080a000a";

type GammaUniswapV3LpTokenLiquidatorBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GammaUniswapV3LpTokenLiquidatorBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GammaUniswapV3LpTokenLiquidatorBase__factory extends ContractFactory {
  constructor(...args: GammaUniswapV3LpTokenLiquidatorBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<GammaUniswapV3LpTokenLiquidatorBase> {
    return super.deploy(
      overrides || {}
    ) as Promise<GammaUniswapV3LpTokenLiquidatorBase>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GammaUniswapV3LpTokenLiquidatorBase {
    return super.attach(address) as GammaUniswapV3LpTokenLiquidatorBase;
  }
  override connect(
    signer: Signer
  ): GammaUniswapV3LpTokenLiquidatorBase__factory {
    return super.connect(
      signer
    ) as GammaUniswapV3LpTokenLiquidatorBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GammaUniswapV3LpTokenLiquidatorBaseInterface {
    return new utils.Interface(
      _abi
    ) as GammaUniswapV3LpTokenLiquidatorBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GammaUniswapV3LpTokenLiquidatorBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GammaUniswapV3LpTokenLiquidatorBase;
  }
}
