/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GammaAlgebraLpTokenLiquidatorBase,
  GammaAlgebraLpTokenLiquidatorBaseInterface,
} from "../../GammaLpTokenLiquidatorBase.sol/GammaAlgebraLpTokenLiquidatorBase";

const _abi = [
  {
    type: "function",
    name: "exactInputSingle",
    inputs: [
      {
        name: "swapRouter",
        type: "address",
        internalType: "address",
      },
      {
        name: "inputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "outputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "vault",
        type: "address",
        internalType: "contract IHypervisor",
      },
      {
        name: "swapAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getSqrtX96Price",
    inputs: [
      {
        name: "pool",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "sqrtPriceX96",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506104dd806100206000396000f3fe6080604052600436106100295760003560e01c806302a74dd21461002e578063bddf8a7914610054575b600080fd5b61004161003c36600461034f565b61008c565b6040519081526020015b60405180910390f35b34801561006057600080fd5b5061007461006f3660046103b3565b6102c6565b6040516001600160a01b03909116815260200161004b565b60006001600160a01b0384166101e257826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fe91906103d7565b6001600160a01b0316856001600160a01b03161461017d57826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017891906103d7565b6101df565b826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101df91906103d7565b93505b6040805160e0810182526001600160a01b0387811682528681166020830190815230838501908152426060850190815260808501888152600060a0870181815260c08801918252975163178ca23160e31b8152965186166004880152935185166024870152915184166044860152516064850152516084840152925160a48301529151821660c48201529087169063bc6511889060e4016020604051808303816000875af1158015610298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bc91906103f4565b9695505050505050565b6000816001600160a01b031663e76c01e46040518163ffffffff1660e01b815260040160e060405180830381865afa158015610306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032a9190610435565b5094979650505050505050565b6001600160a01b038116811461034c57600080fd5b50565b600080600080600060a0868803121561036757600080fd5b853561037281610337565b9450602086013561038281610337565b9350604086013561039281610337565b925060608601356103a281610337565b949793965091946080013592915050565b6000602082840312156103c557600080fd5b81356103d081610337565b9392505050565b6000602082840312156103e957600080fd5b81516103d081610337565b60006020828403121561040657600080fd5b5051919050565b805161ffff8116811461041f57600080fd5b919050565b805160ff8116811461041f57600080fd5b600080600080600080600060e0888a03121561045057600080fd5b875161045b81610337565b8097505060208801518060020b811461047357600080fd5b95506104816040890161040d565b945061048f6060890161040d565b935061049d60808901610424565b92506104ab60a08901610424565b915060c088015180151581146104c057600080fd5b809150509295989194975092955056fea164736f6c634300080a000a";

type GammaAlgebraLpTokenLiquidatorBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GammaAlgebraLpTokenLiquidatorBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GammaAlgebraLpTokenLiquidatorBase__factory extends ContractFactory {
  constructor(...args: GammaAlgebraLpTokenLiquidatorBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<GammaAlgebraLpTokenLiquidatorBase> {
    return super.deploy(
      overrides || {}
    ) as Promise<GammaAlgebraLpTokenLiquidatorBase>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GammaAlgebraLpTokenLiquidatorBase {
    return super.attach(address) as GammaAlgebraLpTokenLiquidatorBase;
  }
  override connect(signer: Signer): GammaAlgebraLpTokenLiquidatorBase__factory {
    return super.connect(signer) as GammaAlgebraLpTokenLiquidatorBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GammaAlgebraLpTokenLiquidatorBaseInterface {
    return new utils.Interface(
      _abi
    ) as GammaAlgebraLpTokenLiquidatorBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GammaAlgebraLpTokenLiquidatorBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GammaAlgebraLpTokenLiquidatorBase;
  }
}
