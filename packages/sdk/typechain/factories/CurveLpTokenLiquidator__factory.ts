/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveLpTokenLiquidator,
  CurveLpTokenLiquidatorInterface,
} from "../CurveLpTokenLiquidator";

const _abi = [
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506104ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007c575b600080fd5b604080518082018252601681527521bab93b32a6382a37b5b2b72634b8bab4b230ba37b960511b602082015290516100739190610313565b60405180910390f35b61008f61008a366004610396565b6100ae565b604080516001600160a01b039093168352602083019190915201610073565b60405163bdf475c360e01b81526001600160a01b038416600482015260009081908190737d86446ddb609ed0f5f8684acf30380a356b2b4c9063bdf475c390602401602060405180830381865afa15801561010d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101319190610463565b90506000808580602001905181019061014a9190610487565b604051630d2680e960e11b8152600481018a9052600083900b60248201526001604482015291935091506001600160a01b03841690631a4d01d290606401600060405180830381600087803b1580156101a257600080fd5b505af11580156101b6573d6000803e3d6000fd5b50505050806001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0316146101ed57806101f0565b60005b94506001600160a01b0385161561026e576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa158015610245573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026991906104c7565b610270565b475b93506001600160a01b0385166103075773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156102cf57600080fd5b505af11580156102e3573d6000803e3d6000fd5b505050505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2945050505061030b565b5050505b935093915050565b600060208083528351808285015260005b8181101561034057858101830151858201604001528201610324565b81811115610352576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461037d57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156103ab57600080fd5b83356103b681610368565b925060208401359150604084013567ffffffffffffffff808211156103da57600080fd5b818601915086601f8301126103ee57600080fd5b81358181111561040057610400610380565b604051601f8201601f19908116603f0116810190838211818310171561042857610428610380565b8160405282815289602084870101111561044157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561047557600080fd5b815161048081610368565b9392505050565b6000806040838503121561049a57600080fd5b825160ff811681146104ab57600080fd5b60208401519092506104bc81610368565b809150509250929050565b6000602082840312156104d957600080fd5b505191905056fea164736f6c634300080a000a";

type CurveLpTokenLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveLpTokenLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveLpTokenLiquidator__factory extends ContractFactory {
  constructor(...args: CurveLpTokenLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<CurveLpTokenLiquidator> {
    return super.deploy(overrides || {}) as Promise<CurveLpTokenLiquidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveLpTokenLiquidator {
    return super.attach(address) as CurveLpTokenLiquidator;
  }
  override connect(signer: Signer): CurveLpTokenLiquidator__factory {
    return super.connect(signer) as CurveLpTokenLiquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveLpTokenLiquidatorInterface {
    return new utils.Interface(_abi) as CurveLpTokenLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveLpTokenLiquidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CurveLpTokenLiquidator;
  }
}
