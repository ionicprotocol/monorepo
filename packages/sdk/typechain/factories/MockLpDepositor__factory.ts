/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockLpDepositor,
  MockLpDepositorInterface,
} from "../MockLpDepositor";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_EPX",
        type: "address",
        internalType: "contract MockERC20",
      },
      {
        name: "_DDD",
        type: "address",
        internalType: "contract MockERC20",
      },
      {
        name: "_lpToken",
        type: "address",
        internalType: "contract MockERC20",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "DDD",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract MockERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "EPX",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract MockERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "claim",
    inputs: [
      {
        name: "_receiver",
        type: "address",
        internalType: "address",
      },
      {
        name: "_tokens",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "_maxBondAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
      {
        name: "_token",
        type: "address",
        internalType: "address",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "lpToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract MockERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "totalBalances",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "userBalances",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "_receiver",
        type: "address",
        internalType: "address",
      },
      {
        name: "_token",
        type: "address",
        internalType: "address",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Claimed",
    inputs: [
      {
        name: "caller",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokens",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
      {
        name: "epxAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "dddAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Deposit",
    inputs: [
      {
        name: "caller",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "token",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Withdraw",
    inputs: [
      {
        name: "caller",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "token",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610dd6380380610dd683398101604081905261002f916100e6565b6100383361007a565b600180546001600160a01b039485166001600160a01b031991821617909155600280549385169382169390931790925560038054919093169116179055610129565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100e157600080fd5b919050565b6000806000606084860312156100fb57600080fd5b610104846100ca565b9250610112602085016100ca565b9150610120604085016100ca565b90509250925092565b610c9e806101386000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b14610121578063adb5198014610132578063aee9c8721461016b578063d9caed121461018b578063dd96440e1461019e578063f2fde38b146101b157600080fd5b80632686b6a7146100ae5780633601ae05146100de5780635fcbd285146100f3578063715018a6146101065780638340f5491461010e575b600080fd5b6001546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec366004610a3c565b6101c4565b005b6003546100c1906001600160a01b031681565b6100f16102fd565b6100f161011c366004610ac8565b610311565b6000546001600160a01b03166100c1565b61015d610140366004610b04565b600460209081526000928352604080842090915290825290205481565b6040519081526020016100d5565b61015d610179366004610b37565b60056020526000908152604090205481565b6100f1610199366004610ac8565b61046a565b6002546100c1906001600160a01b031681565b6100f16101bf366004610b37565b6105f8565b6001546040516340c10f1960e01b81526001600160a01b038681166004830152670de0b6b3a76400006024830152909116906340c10f1990604401600060405180830381600087803b15801561021957600080fd5b505af115801561022d573d6000803e3d6000fd5b50506002546040516340c10f1960e01b81526001600160a01b038881166004830152670de0b6b3a7640000602483015290911692506340c10f199150604401600060405180830381600087803b15801561028657600080fd5b505af115801561029a573d6000803e3d6000fd5b50505050836001600160a01b0316336001600160a01b03167fbddff4e37a2b55d32a94300600702a6de099384334948dc1a5e0974f5f7088ed8585670de0b6b3a7640000806040516102ef9493929190610b59565b60405180910390a350505050565b610305610671565b61030f60006106cb565b565b6103266001600160a01b03831633308461071b565b6001600160a01b0380841660009081526004602090815260408083209386168352928152828220546005909152919020546103618383610bc5565b6001600160a01b038087166000908152600460209081526040808320938916835292905220556103918382610bc5565b6001600160a01b03858116600090815260056020526040908190209290925560035491516340c10f1960e01b81528782166004820152602481018690529116906340c10f1990604401600060405180830381600087803b1580156103f457600080fd5b505af1158015610408573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b0316336001600160a01b03167f7cfff908a4b583f36430b25d75964c458d8ede8a99bd61be750e97ee1b2f3a968660405161045b91815260200190565b60405180910390a45050505050565b3360009081526004602090815260408083206001600160a01b0386168452825280832054600590925290912054828210156104e35760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b60448201526064015b60405180910390fd5b6104ed8383610bdd565b3360009081526004602090815260408083206001600160a01b038916845290915290205561051b8382610bdd565b6001600160a01b0385811660009081526005602052604090819020929092556003549151632770a7eb60e21b815233600482015260248101869052911690639dc29fac90604401600060405180830381600087803b15801561057c57600080fd5b505af1158015610590573d6000803e3d6000fd5b506105a9925050506001600160a01b038516338561078c565b836001600160a01b0316856001600160a01b0316336001600160a01b03167f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f78660405161045b91815260200190565b610600610671565b6001600160a01b0381166106655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104da565b61066e816106cb565b50565b6000546001600160a01b0316331461030f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104da565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526107869085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526107c1565b50505050565b6040516001600160a01b0383166024820152604481018290526107bc90849063a9059cbb60e01b9060640161074f565b505050565b6000610816826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108939092919063ffffffff16565b8051909150156107bc57808060200190518101906108349190610bf4565b6107bc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104da565b60606108a284846000856108aa565b949350505050565b60608247101561090b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104da565b600080866001600160a01b031685876040516109279190610c42565b60006040518083038185875af1925050503d8060008114610964576040519150601f19603f3d011682016040523d82523d6000602084013e610969565b606091505b509150915061097a87838387610985565b979650505050505050565b606083156109f15782516109ea576001600160a01b0385163b6109ea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104da565b50816108a2565b6108a28383815115610a065781518083602001fd5b8060405162461bcd60e51b81526004016104da9190610c5e565b80356001600160a01b0381168114610a3757600080fd5b919050565b60008060008060608587031215610a5257600080fd5b610a5b85610a20565b9350602085013567ffffffffffffffff80821115610a7857600080fd5b818701915087601f830112610a8c57600080fd5b813581811115610a9b57600080fd5b8860208260051b8501011115610ab057600080fd5b95986020929092019750949560400135945092505050565b600080600060608486031215610add57600080fd5b610ae684610a20565b9250610af460208501610a20565b9150604084013590509250925092565b60008060408385031215610b1757600080fd5b610b2083610a20565b9150610b2e60208401610a20565b90509250929050565b600060208284031215610b4957600080fd5b610b5282610a20565b9392505050565b6060808252810184905260008560808301825b87811015610b9a576001600160a01b03610b8584610a20565b16825260209283019290910190600101610b6c565b50602084019590955250506040015292915050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bd857610bd8610baf565b500190565b600082821015610bef57610bef610baf565b500390565b600060208284031215610c0657600080fd5b81518015158114610b5257600080fd5b60005b83811015610c31578181015183820152602001610c19565b838111156107865750506000910152565b60008251610c54818460208701610c16565b9190910192915050565b6020815260008251806020840152610c7d816040850160208701610c16565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a";

type MockLpDepositorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLpDepositorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLpDepositor__factory extends ContractFactory {
  constructor(...args: MockLpDepositorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _EPX: string,
    _DDD: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockLpDepositor> {
    return super.deploy(
      _EPX,
      _DDD,
      _lpToken,
      overrides || {}
    ) as Promise<MockLpDepositor>;
  }
  override getDeployTransaction(
    _EPX: string,
    _DDD: string,
    _lpToken: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_EPX, _DDD, _lpToken, overrides || {});
  }
  override attach(address: string): MockLpDepositor {
    return super.attach(address) as MockLpDepositor;
  }
  override connect(signer: Signer): MockLpDepositor__factory {
    return super.connect(signer) as MockLpDepositor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLpDepositorInterface {
    return new utils.Interface(_abi) as MockLpDepositorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLpDepositor {
    return new Contract(address, _abi, signerOrProvider) as MockLpDepositor;
  }
}
