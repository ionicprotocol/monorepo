/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GammaAlgebraLpTokenWrapper,
  GammaAlgebraLpTokenWrapperInterface,
} from "../../GammaAlgebraLpTokenLiquidator.sol/GammaAlgebraLpTokenWrapper";

const _abi = [
  {
    type: "function",
    name: "exactInputSingle",
    inputs: [
      {
        name: "swapRouter",
        type: "address",
        internalType: "address",
      },
      {
        name: "inputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "outputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "vault",
        type: "address",
        internalType: "contract IHypervisor",
      },
      {
        name: "swapAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getSqrtX96Price",
    inputs: [
      {
        name: "pool",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "sqrtPriceX96",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "";

type GammaAlgebraLpTokenWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GammaAlgebraLpTokenWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GammaAlgebraLpTokenWrapper__factory extends ContractFactory {
  constructor(...args: GammaAlgebraLpTokenWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<GammaAlgebraLpTokenWrapper> {
    return super.deploy(overrides || {}) as Promise<GammaAlgebraLpTokenWrapper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GammaAlgebraLpTokenWrapper {
    return super.attach(address) as GammaAlgebraLpTokenWrapper;
  }
  override connect(signer: Signer): GammaAlgebraLpTokenWrapper__factory {
    return super.connect(signer) as GammaAlgebraLpTokenWrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GammaAlgebraLpTokenWrapperInterface {
    return new utils.Interface(_abi) as GammaAlgebraLpTokenWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GammaAlgebraLpTokenWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GammaAlgebraLpTokenWrapper;
  }
}
