/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GammaAlgebraLpTokenLiquidator,
  GammaAlgebraLpTokenLiquidatorInterface,
} from "../../GammaAlgebraLpTokenLiquidator.sol/GammaAlgebraLpTokenLiquidator";

const _abi = [
  {
    type: "function",
    name: "exactInputSingle",
    inputs: [
      {
        name: "swapRouter",
        type: "address",
        internalType: "address",
      },
      {
        name: "inputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "outputToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "vault",
        type: "address",
        internalType: "contract IHypervisor",
      },
      {
        name: "swapAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getSqrtX96Price",
    inputs: [
      {
        name: "pool",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "sqrtPriceX96",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b2b806100206000396000f3fe60806040526004361061003f5760003560e01c806302a74dd21461004457806306fdde031461006a57806310badf4e146100b6578063bddf8a79146100f5575b600080fd5b61005761005236600461078f565b61012d565b6040519081526020015b60405180910390f35b34801561007657600080fd5b50604080518082018252601d81527f47616d6d61416c67656272614c70546f6b656e4c697175696461746f720000006020820152905161006191906107f3565b3480156100c257600080fd5b506100d66100d136600461085e565b610367565b604080516001600160a01b039093168352602083019190915201610061565b34801561010157600080fd5b5061011561011036600461092b565b610381565b6040516001600160a01b039091168152602001610061565b60006001600160a01b03841661028357826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019f919061094f565b6001600160a01b0316856001600160a01b03161461021e57826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610219919061094f565b610280565b826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610280919061094f565b93505b6040805160e0810182526001600160a01b0387811682528681166020830190815230838501908152426060850190815260808501888152600060a0870181815260c08801918252975163178ca23160e31b8152965186166004880152935185166024870152915184166044860152516064850152516084840152925160a48301529151821660c48201529087169063bc6511889060e4016020604051808303816000875af1158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d919061096c565b9695505050505050565b6000806103758585856103f2565b91509150935093915050565b6000816001600160a01b031663e76c01e46040518163ffffffff1660e01b815260040160e060405180830381865afa1580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e591906109bd565b5094979650505050505050565b600080846103fe610759565b60405163542acc3960e11b81526001600160a01b0383169063a855987290610430908990309081908790600401610a4f565b60408051808303816000875af115801561044e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104729190610aa5565b50506000826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d8919061094f565b90506000836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e919061094f565b9050600080888060200190518101906105579190610ac9565b91509150600080846001600160a01b0316846001600160a01b031614156105ea576040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e0919061096c565b9150859050610658565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa15801561062e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610652919061096c565b91508490505b60405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905282169063095ea7b3906044016020604051808303816000875af11580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb9190610b03565b506106d98382868b8661012d565b506040516370a0823160e01b815230600482015293995089936001600160a01b038516906370a0823190602401602060405180830381865afa158015610723573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610747919061096c565b98505050505050505050935093915050565b60405180608001604052806004906020820280368337509192915050565b6001600160a01b038116811461078c57600080fd5b50565b600080600080600060a086880312156107a757600080fd5b85356107b281610777565b945060208601356107c281610777565b935060408601356107d281610777565b925060608601356107e281610777565b949793965091946080013592915050565b600060208083528351808285015260005b8181101561082057858101830151858201604001528201610804565b81811115610832576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561087357600080fd5b833561087e81610777565b925060208401359150604084013567ffffffffffffffff808211156108a257600080fd5b818601915086601f8301126108b657600080fd5b8135818111156108c8576108c8610848565b604051601f8201601f19908116603f011681019083821181831017156108f0576108f0610848565b8160405282815289602084870101111561090957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561093d57600080fd5b813561094881610777565b9392505050565b60006020828403121561096157600080fd5b815161094881610777565b60006020828403121561097e57600080fd5b5051919050565b805161ffff8116811461099757600080fd5b919050565b805160ff8116811461099757600080fd5b8051801515811461099757600080fd5b600080600080600080600060e0888a0312156109d857600080fd5b87516109e381610777565b8097505060208801518060020b81146109fb57600080fd5b9550610a0960408901610985565b9450610a1760608901610985565b9350610a256080890161099c565b9250610a3360a0890161099c565b9150610a4160c089016109ad565b905092959891949750929550565b8481526001600160a01b03848116602080840191909152908416604083015260e0820190606083018460005b6004811015610a9857815183529183019190830190600101610a7b565b5050505095945050505050565b60008060408385031215610ab857600080fd5b505080516020909101519092909150565b60008060408385031215610adc57600080fd5b8251610ae781610777565b6020840151909250610af881610777565b809150509250929050565b600060208284031215610b1557600080fd5b610948826109ad56fea164736f6c634300080a000a";

type GammaAlgebraLpTokenLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GammaAlgebraLpTokenLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GammaAlgebraLpTokenLiquidator__factory extends ContractFactory {
  constructor(...args: GammaAlgebraLpTokenLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<GammaAlgebraLpTokenLiquidator> {
    return super.deploy(
      overrides || {}
    ) as Promise<GammaAlgebraLpTokenLiquidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GammaAlgebraLpTokenLiquidator {
    return super.attach(address) as GammaAlgebraLpTokenLiquidator;
  }
  override connect(signer: Signer): GammaAlgebraLpTokenLiquidator__factory {
    return super.connect(signer) as GammaAlgebraLpTokenLiquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GammaAlgebraLpTokenLiquidatorInterface {
    return new utils.Interface(_abi) as GammaAlgebraLpTokenLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GammaAlgebraLpTokenLiquidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GammaAlgebraLpTokenLiquidator;
  }
}
