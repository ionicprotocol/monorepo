/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveMetaPoolLpTokenLiquidator,
  CurveMetaPoolLpTokenLiquidatorInterface,
} from "../../CurveMetapoolLpTokenLiquidator.sol/CurveMetaPoolLpTokenLiquidator";

const _abi = [
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610453806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e14610083575b600080fd5b604080518082018252601e81527f43757276654d657461506f6f6c4c70546f6b656e4c697175696461746f7200006020820152905161007a919061029d565b60405180910390f35b610096610091366004610320565b6100b5565b604080516001600160a01b03909316835260208301919091520161007a565b6000806000859050600080858060200190518101906100d491906103ed565b604051630d2680e960e11b8152600481018a9052600083900b60248201526001604482015291935091506001600160a01b03841690631a4d01d290606401600060405180830381600087803b15801561012c57600080fd5b505af1158015610140573d6000803e3d6000fd5b50505050806001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031614610177578061017a565b60005b94506001600160a01b038516156101f8576040516370a0823160e01b81523060048201526001600160a01b038616906370a0823190602401602060405180830381865afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f3919061042d565b6101fa565b475b93506001600160a01b0385166102915773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561025957600080fd5b505af115801561026d573d6000803e3d6000fd5b505050505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29450505050610295565b5050505b935093915050565b600060208083528351808285015260005b818110156102ca578581018301518582016040015282016102ae565b818111156102dc576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461030757600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561033557600080fd5b8335610340816102f2565b925060208401359150604084013567ffffffffffffffff8082111561036457600080fd5b818601915086601f83011261037857600080fd5b81358181111561038a5761038a61030a565b604051601f8201601f19908116603f011681019083821181831017156103b2576103b261030a565b816040528281528960208487010111156103cb57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000806040838503121561040057600080fd5b825160ff8116811461041157600080fd5b6020840151909250610422816102f2565b809150509250929050565b60006020828403121561043f57600080fd5b505191905056fea164736f6c634300080a000a";

type CurveMetaPoolLpTokenLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveMetaPoolLpTokenLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveMetaPoolLpTokenLiquidator__factory extends ContractFactory {
  constructor(...args: CurveMetaPoolLpTokenLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<CurveMetaPoolLpTokenLiquidator> {
    return super.deploy(
      overrides || {}
    ) as Promise<CurveMetaPoolLpTokenLiquidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveMetaPoolLpTokenLiquidator {
    return super.attach(address) as CurveMetaPoolLpTokenLiquidator;
  }
  override connect(signer: Signer): CurveMetaPoolLpTokenLiquidator__factory {
    return super.connect(signer) as CurveMetaPoolLpTokenLiquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveMetaPoolLpTokenLiquidatorInterface {
    return new utils.Interface(_abi) as CurveMetaPoolLpTokenLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveMetaPoolLpTokenLiquidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CurveMetaPoolLpTokenLiquidator;
  }
}
