/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ILiquidatorsRegistrySecondExtension,
  ILiquidatorsRegistrySecondExtensionInterface,
} from "../../ILiquidatorsRegistry.sol/ILiquidatorsRegistrySecondExtension";

const _abi = [
  {
    type: "function",
    name: "_removeRedemptionStrategy",
    inputs: [
      {
        name: "strategyToRemove",
        type: "address",
        internalType: "contract IRedemptionStrategy",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_resetRedemptionStrategies",
    inputs: [
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IRedemptionStrategy[]",
      },
      {
        name: "inputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "outputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_setDefaultOutputToken",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_setRedemptionStrategies",
    inputs: [
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IRedemptionStrategy[]",
      },
      {
        name: "inputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "outputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_setRedemptionStrategy",
    inputs: [
      {
        name: "strategy",
        type: "address",
        internalType: "contract IRedemptionStrategy",
      },
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_setSlippages",
    inputs: [
      {
        name: "inputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "outputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "slippages",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_setUniswapV3Fees",
    inputs: [
      {
        name: "inputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "outputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "fees",
        type: "uint24[]",
        internalType: "uint24[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_setUniswapV3Routers",
    inputs: [
      {
        name: "inputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "outputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "routers",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAllPairsStrategies",
    inputs: [],
    outputs: [
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IRedemptionStrategy[]",
      },
      {
        name: "inputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "outputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pairsStrategiesMatch",
    inputs: [
      {
        name: "configStrategies",
        type: "address[]",
        internalType: "contract IRedemptionStrategy[]",
      },
      {
        name: "configInputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "configOutputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "uniswapPairsFeesMatch",
    inputs: [
      {
        name: "configInputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "configOutputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "configFees",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "uniswapPairsRoutersMatch",
    inputs: [
      {
        name: "configInputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "configOutputTokens",
        type: "address[]",
        internalType: "contract IERC20Upgradeable[]",
      },
      {
        name: "configRouters",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
] as const;

export class ILiquidatorsRegistrySecondExtension__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidatorsRegistrySecondExtensionInterface {
    return new utils.Interface(
      _abi
    ) as ILiquidatorsRegistrySecondExtensionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILiquidatorsRegistrySecondExtension {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ILiquidatorsRegistrySecondExtension;
  }
}
