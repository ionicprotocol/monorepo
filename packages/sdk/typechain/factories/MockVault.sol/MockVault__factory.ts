/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockVault,
  MockVaultInterface,
} from "../../MockVault.sol/MockVault";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_token",
        type: "address",
        internalType: "address",
      },
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
      {
        name: "_symbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "_decimals",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "DOMAIN_SEPARATOR",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "config",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVaultConfig",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [
      {
        name: "amountToken",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "lastAccrueTime",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nonces",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingInterest",
    inputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "permit",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "v",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "reservePool",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "token",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "vaultDebtShare",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "vaultDebtVal",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "share",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Approval",
    inputs: [
      {
        name: "owner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "spender",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "Transfer",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b50604051620014c6380380620014c68339810160408190526200003491620002bb565b82828282600090805190602001906200004f92919062000148565b5081516200006590600190602085019062000148565b5060ff81166080524660a0526200007b620000ac565b60c0525050600680546001600160a01b0319166001600160a01b039690961695909517909455506200044092505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620000e091906200039c565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b82805462000156906200035f565b90600052602060002090601f0160209004810192826200017a5760008555620001c5565b82601f106200019557805160ff1916838001178555620001c5565b82800160010185558215620001c5579182015b82811115620001c5578251825591602001919060010190620001a8565b50620001d3929150620001d7565b5090565b5b80821115620001d35760008155600101620001d8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021657600080fd5b81516001600160401b0380821115620002335762000233620001ee565b604051601f8301601f19908116603f011681019082821181831017156200025e576200025e620001ee565b816040528381526020925086838588010111156200027b57600080fd5b600091505b838210156200029f578582018301518183018401529082019062000280565b83821115620002b15760008385830101525b9695505050505050565b60008060008060808587031215620002d257600080fd5b84516001600160a01b0381168114620002ea57600080fd5b60208601519094506001600160401b03808211156200030857600080fd5b620003168883890162000204565b945060408701519150808211156200032d57600080fd5b506200033c8782880162000204565b925050606085015160ff811681146200035457600080fd5b939692955090935050565b600181811c908216806200037457607f821691505b602082108114156200039657634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c915080831680620003b957607f831692505b6020808410821415620003da57634e487b7160e01b86526022600452602486fd5b818015620003f15760018114620004035762000432565b60ff1986168952848901965062000432565b60008a81526020902060005b868110156200042a5781548b8201529085019083016200040f565b505084890196505b509498975050505050505050565b60805160a05160c0516110566200047060003960006106d10152600061069c0152600061025601526110566000f3fe6080604052600436106101355760003560e01c806370a08231116100ab5780639ffe79731161006f5780639ffe797314610371578063a9059cbb14610387578063b6b55f25146103a7578063d505accf146103ba578063dd62ed3e146103da578063fc0c546a1461041257600080fd5b806370a08231146102b457806376c46b7b146102e157806379502c55146102f75780637ecebe001461032f57806395d89b411461035c57600080fd5b806323b872dd116100fd57806323b872dd146101e15780632e1a7d4d146102015780632fc11c0f14610223578063313ce567146102445780633644e5151461028a578063626be5671461029f57600080fd5b80630266f0441461013a57806306fdde0314610163578063095ea7b3146101855780630a355d7d146101b557806318160ddd146101cb575b600080fd5b34801561014657600080fd5b50610150600a5481565b6040519081526020015b60405180910390f35b34801561016f57600080fd5b50610178610432565b60405161015a9190610cd9565b34801561019157600080fd5b506101a56101a0366004610d4a565b6104c0565b604051901515815260200161015a565b3480156101c157600080fd5b5061015060085481565b3480156101d757600080fd5b5061015060025481565b3480156101ed57600080fd5b506101a56101fc366004610d74565b61052c565b34801561020d57600080fd5b5061022161021c366004610db0565b61060c565b005b34801561022f57600080fd5b5061015061023e366004610db0565b50600090565b34801561025057600080fd5b506102787f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161015a565b34801561029657600080fd5b50610150610698565b3480156102ab57600080fd5b506101506106f3565b3480156102c057600080fd5b506101506102cf366004610dc9565b60036020526000908152604090205481565b3480156102ed57600080fd5b5061015060075481565b34801561030357600080fd5b50600b54610317906001600160a01b031681565b6040516001600160a01b03909116815260200161015a565b34801561033b57600080fd5b5061015061034a366004610dc9565b60056020526000908152604090205481565b34801561036857600080fd5b5061017861077c565b34801561037d57600080fd5b5061015060095481565b34801561039357600080fd5b506101a56103a2366004610d4a565b610789565b6102216103b5366004610db0565b6107ef565b3480156103c657600080fd5b506102216103d5366004610deb565b610882565b3480156103e657600080fd5b506101506103f5366004610e5e565b600460209081526000928352604080842090915290825290205481565b34801561041e57600080fd5b50600654610317906001600160a01b031681565b6000805461043f90610e91565b80601f016020809104026020016040519081016040528092919081815260200182805461046b90610e91565b80156104b85780601f1061048d576101008083540402835291602001916104b8565b820191906000526020600020905b81548152906001019060200180831161049b57829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061051b9086815260200190565b60405180910390a350600192915050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610588576105638382610ee2565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906105b0908490610ee2565b90915550506001600160a01b038085166000818152600360205260409081902080548701905551909187169060008051602061102a833981519152906105f99087815260200190565b60405180910390a3506001949350505050565b60008060025461061a6106f3565b6106249085610ef9565b61062e9190610f18565b905061063a3384610ac6565b6106443382610b30565b67016345785d8a0000600254116106935760405162461bcd60e51b815260206004820152600e60248201526d6e6f2074696e792073686172657360901b60448201526064015b60405180910390fd5b505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146106ce576106c9610ba7565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b600a546008546006546040516370a0823160e01b815230600482015260009392916001600160a01b0316906370a0823190602401602060405180830381865afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190610f3a565b6107729190610f53565b6106c99190610ee2565b6001805461043f90610e91565b336000908152600360205260408120805483919083906107aa908490610ee2565b90915550506001600160a01b0383166000818152600360205260409081902080548501905551339060008051602061102a8339815191529061051b9086815260200190565b8034156107fb57610878565b6006546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190610f6b565b505b8161069383610c41565b428410156108d25760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161068a565b600060016108de610698565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156109ea573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590610a205750876001600160a01b0316816001600160a01b0316145b610a5d5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161068a565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6001600160a01b03821660009081526003602052604081208054839290610aee908490610ee2565b90915550506002805482900390556040518181526000906001600160a01b0384169060008051602061102a833981519152906020015b60405180910390a35050565b60065460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af1158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190610f6b565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051610bd99190610f8d565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600081610c4c6106f3565b610c569190610ee2565b905060008115610c7e578160025484610c6f9190610ef9565b610c799190610f18565b610c80565b825b905061064433828060026000828254610c999190610f53565b90915550506001600160a01b03821660008181526003602090815260408083208054860190555184815260008051602061102a8339815191529101610b24565b600060208083528351808285015260005b81811015610d0657858101830151858201604001528201610cea565b81811115610d18576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610d4557600080fd5b919050565b60008060408385031215610d5d57600080fd5b610d6683610d2e565b946020939093013593505050565b600080600060608486031215610d8957600080fd5b610d9284610d2e565b9250610da060208501610d2e565b9150604084013590509250925092565b600060208284031215610dc257600080fd5b5035919050565b600060208284031215610ddb57600080fd5b610de482610d2e565b9392505050565b600080600080600080600060e0888a031215610e0657600080fd5b610e0f88610d2e565b9650610e1d60208901610d2e565b95506040880135945060608801359350608088013560ff81168114610e4157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610e7157600080fd5b610e7a83610d2e565b9150610e8860208401610d2e565b90509250929050565b600181811c90821680610ea557607f821691505b60208210811415610ec657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610ef457610ef4610ecc565b500390565b6000816000190483118215151615610f1357610f13610ecc565b500290565b600082610f3557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610f4c57600080fd5b5051919050565b60008219821115610f6657610f66610ecc565b500190565b600060208284031215610f7d57600080fd5b81518015158114610de457600080fd5b600080835481600182811c915080831680610fa957607f831692505b6020808410821415610fc957634e487b7160e01b86526022600452602486fd5b818015610fdd5760018114610fee5761101b565b60ff1986168952848901965061101b565b60008a81526020902060005b868110156110135781548b820152908501908301610ffa565b505084890196505b50949897505050505050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa164736f6c634300080a000a";

type MockVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVault__factory extends ContractFactory {
  constructor(...args: MockVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<MockVault> {
    return super.deploy(
      _token,
      _name,
      _symbol,
      _decimals,
      overrides || {}
    ) as Promise<MockVault>;
  }
  override getDeployTransaction(
    _token: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token,
      _name,
      _symbol,
      _decimals,
      overrides || {}
    );
  }
  override attach(address: string): MockVault {
    return super.attach(address) as MockVault;
  }
  override connect(signer: Signer): MockVault__factory {
    return super.connect(signer) as MockVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultInterface {
    return new utils.Interface(_abi) as MockVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVault {
    return new Contract(address, _abi, signerOrProvider) as MockVault;
  }
}
