/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  WombatLpTokenPriceOracle,
  WombatLpTokenPriceOracleInterface,
} from "../../WombatLpTokenPriceOracle.sol/WombatLpTokenPriceOracle";

const _abi = [
  {
    type: "function",
    name: "getUnderlyingPrice",
    inputs: [
      {
        name: "cToken",
        type: "address",
        internalType: "contract ICErc20",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "price",
    inputs: [
      {
        name: "asset",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610586806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063aea910781461003b578063fc57d4df14610060575b600080fd5b61004e61004936600461039e565b610073565b60405190815260200160405180910390f35b61004e61006e36600461039e565b610084565b600061007e826101b8565b92915050565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e991906103c2565b905060006100f6826101b8565b90506000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c91906103df565b60ff169050601281111561018f57610175601282610418565b61018090600a610513565b61018a908361051f565b6101af565b61019a816012610418565b6101a590600a610513565b6101af9083610541565b95945050505050565b600080826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021d9190610560565b90508061022d5750600092915050565b6000836001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561026d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029191906103c2565b90506000846001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f79190610560565b6040516315d5220f60e31b81526001600160a01b0384166004820152909150600090339063aea9107890602401602060405180830381865afa158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190610560565b9050836103728383610541565b61037c919061051f565b9695505050505050565b6001600160a01b038116811461039b57600080fd5b50565b6000602082840312156103b057600080fd5b81356103bb81610386565b9392505050565b6000602082840312156103d457600080fd5b81516103bb81610386565b6000602082840312156103f157600080fd5b815160ff811681146103bb57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561042a5761042a610402565b500390565b600181815b8085111561046a57816000190482111561045057610450610402565b8085161561045d57918102915b93841c9390800290610434565b509250929050565b6000826104815750600161007e565b8161048e5750600061007e565b81600181146104a457600281146104ae576104ca565b600191505061007e565b60ff8411156104bf576104bf610402565b50506001821b61007e565b5060208310610133831016604e8410600b84101617156104ed575081810a61007e565b6104f7838361042f565b806000190482111561050b5761050b610402565b029392505050565b60006103bb8383610472565b60008261053c57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561055b5761055b610402565b500290565b60006020828403121561057257600080fd5b505191905056fea164736f6c634300080a000a";

type WombatLpTokenPriceOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WombatLpTokenPriceOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WombatLpTokenPriceOracle__factory extends ContractFactory {
  constructor(...args: WombatLpTokenPriceOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<WombatLpTokenPriceOracle> {
    return super.deploy(overrides || {}) as Promise<WombatLpTokenPriceOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WombatLpTokenPriceOracle {
    return super.attach(address) as WombatLpTokenPriceOracle;
  }
  override connect(signer: Signer): WombatLpTokenPriceOracle__factory {
    return super.connect(signer) as WombatLpTokenPriceOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WombatLpTokenPriceOracleInterface {
    return new utils.Interface(_abi) as WombatLpTokenPriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WombatLpTokenPriceOracle {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as WombatLpTokenPriceOracle;
  }
}
