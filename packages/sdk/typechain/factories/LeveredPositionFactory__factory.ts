/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LeveredPositionFactory,
  LeveredPositionFactoryInterface,
} from "../LeveredPositionFactory";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_feeDistributor",
        type: "address",
        internalType: "contract IFeeDistributor",
      },
      {
        name: "_registry",
        type: "address",
        internalType: "contract ILiquidatorsRegistry",
      },
      {
        name: "_blocksPerYear",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "fallback",
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_listExtensions",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "_registerExtension",
    inputs: [
      {
        name: "extensionToAdd",
        type: "address",
        internalType: "contract DiamondExtension",
      },
      {
        name: "extensionToReplace",
        type: "address",
        internalType: "contract DiamondExtension",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_setLiquidatorsRegistry",
    inputs: [
      {
        name: "_liquidatorsRegistry",
        type: "address",
        internalType: "contract ILiquidatorsRegistry",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_setPairWhitelisted",
    inputs: [
      {
        name: "_collateralMarket",
        type: "address",
        internalType: "contract ICErc20",
      },
      {
        name: "_stableMarket",
        type: "address",
        internalType: "contract ICErc20",
      },
      {
        name: "_whitelisted",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "blocksPerYear",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "feeDistributor",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IFeeDistributor",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "liquidatorsRegistry",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ILiquidatorsRegistry",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingOwner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "renounceOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "OwnershipTransferStarted",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "FunctionAlreadyAdded",
    inputs: [
      {
        name: "_functionSelector",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "_currentImpl",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "FunctionNotFound",
    inputs: [
      {
        name: "_functionSelector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
  },
] as const;

const _bytecode =
  "";

type LeveredPositionFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LeveredPositionFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LeveredPositionFactory__factory extends ContractFactory {
  constructor(...args: LeveredPositionFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _feeDistributor: string,
    _registry: string,
    _blocksPerYear: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<LeveredPositionFactory> {
    return super.deploy(
      _feeDistributor,
      _registry,
      _blocksPerYear,
      overrides || {}
    ) as Promise<LeveredPositionFactory>;
  }
  override getDeployTransaction(
    _feeDistributor: string,
    _registry: string,
    _blocksPerYear: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _feeDistributor,
      _registry,
      _blocksPerYear,
      overrides || {}
    );
  }
  override attach(address: string): LeveredPositionFactory {
    return super.attach(address) as LeveredPositionFactory;
  }
  override connect(signer: Signer): LeveredPositionFactory__factory {
    return super.connect(signer) as LeveredPositionFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LeveredPositionFactoryInterface {
    return new utils.Interface(_abi) as LeveredPositionFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LeveredPositionFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LeveredPositionFactory;
  }
}
