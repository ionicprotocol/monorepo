/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAutofarmV2,
  MockAutofarmV2Interface,
} from "../MockAutofarmV2";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_AUTO",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "AUTO",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "AUTOMaxSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "AUTOPerBlock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "add",
    inputs: [
      {
        name: "_want",
        type: "address",
        internalType: "contract ERC20",
      },
      {
        name: "_allocPoint",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_strat",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [
      {
        name: "_pid",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_wantAmt",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getMultiplier",
    inputs: [
      {
        name: "_from",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_to",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "poolInfo",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "want",
        type: "address",
        internalType: "contract ERC20",
      },
      {
        name: "allocPoint",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "lastRewardBlock",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "accAUTOPerShare",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strat",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "poolLength",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "stakedWantTokens",
    inputs: [
      {
        name: "_pid",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "startBlock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalAllocPoint",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "updatePool",
    inputs: [
      {
        name: "_pid",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "userInfo",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "shares",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "rewardDebt",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "_pid",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_wantAmt",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "Test",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60806040526910f0cf064dd592000000600355661c6bf526340000600455623b56f860055534801561003057600080fd5b506040516111b73803806111b783398101604081905261004f91610074565b600680546001600160a01b0319166001600160a01b03929092169190911790556100a4565b60006020828403121561008657600080fd5b81516001600160a01b038116811461009d57600080fd5b9392505050565b611104806100b36000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806369f94adf1161008c57806393f1a40b1161006657806393f1a40b14610311578063a96fe44314610355578063e2bbb1581461035e578063e7fa1e861461037157600080fd5b806369f94adf146102c05780637b84daec146102eb5780638dbb1e3a146102fe57600080fd5b806328f40b24116100c857806328f40b2414610156578063441a3e701461029157806348cd4cb1146102a457806351eb05a6146102ad57600080fd5b8063081e3eda146100ef5780631526fe271461010657806317caf6f11461014d575b600080fd5b6000545b6040519081526020015b60405180910390f35b610119610114366004610f5b565b61037a565b604080516001600160a01b03968716815260208101959095528401929092526060830152909116608082015260a0016100fd565b6100f360025481565b61028f610164366004610f8c565b60028290556040805160a0810182526001600160a01b0394851681526020810193845243918101918252600060608201818152938616608083019081528154600181018355918052915160059091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180549288166001600160a01b031993841617905594517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56486015591517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56585015591517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56684015590517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5679092018054929093169116179055565b005b61028f61029f366004610fce565b6103c8565b6100f360055481565b61028f6102bb366004610f5b565b61089c565b6006546102d3906001600160a01b031681565b6040516001600160a01b0390911681526020016100fd565b6100f36102f9366004610ff0565b610a4d565b6100f361030c366004610fce565b610bd3565b61034061031f366004610ff0565b60016020818152600093845260408085209091529183529120805491015482565b604080519283526020830191909152016100fd565b6100f360035481565b61028f61036c366004610fce565b610c63565b6100f360045481565b6000818154811061038a57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0393841695509193909290911685565b6103d18261089c565b60008083815481106103e5576103e5611020565b60009182526020808320868452600182526040808520338652909252908320835460059093029091019350919081908690811061042457610424611020565b906000526020600020906005020160040160009054906101000a90046001600160a01b03166001600160a01b03166342da4eb36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611036565b905060008086815481106104c0576104c0611020565b906000526020600020906005020160040160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190611036565b835490915061058f5760405162461bcd60e51b815260206004820152601060248201526f0757365722e73686172657320697320360841b60448201526064015b60405180910390fd5b600081116105d25760405162461bcd60e51b815260206004820152601060248201526f0736861726573546f74616c20697320360841b6044820152606401610586565b6000836001015464e8d4a51000866003015486600001546105f39190611065565b6105fd9190611084565b61060791906110a6565b905080156106865760065460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068491906110bd565b505b6000828486600001546106999190611065565b6106a39190611084565b9050808711156106b1578096505b86156108695760008089815481106106cb576106cb611020565b60009182526020909120600460059092020181015460405163f3fef3a360e01b81523392810192909252602482018a90526001600160a01b03169063f3fef3a3906044016020604051808303816000875af115801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190611036565b86549091508111156107675760008655610777565b85546107749082906110a6565b86555b86546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190611036565b9050888110156107f1578098505b875460405163a9059cbb60e01b8152336004820152602481018b90526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086591906110bd565b5050505b6003860154855464e8d4a510009161088091611065565b61088a9190611084565b85600101819055505050505050505050565b60008082815481106108b0576108b0611020565b90600052602060002090600502019050806002015443116108cf575050565b60008160040160009054906101000a90046001600160a01b03166001600160a01b03166344a3955e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190611036565b90508061095c57504360029091015550565b600061096c836002015443610bd3565b90506000811161097c5750505050565b60006002548460010154600454846109949190611065565b61099e9190611065565b6109a89190611084565b6006546040516340c10f1960e01b8152306004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b50505050828164e8d4a51000610a1f9190611065565b610a299190611084565b8460030154610a3891906110df565b60038501555050436002909201919091555050565b60008060008481548110610a6357610a63611020565b600091825260208083208784526001825260408085206001600160a01b03808a16875290845281862060046005909602909301858101548351632251caaf60e11b8152935191985093969593909116936344a3955e93838101939192918290030181865afa158015610ad9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afd9190611036565b90506000808781548110610b1357610b13611020565b906000526020600020906005020160040160009054906101000a90046001600160a01b03166001600160a01b03166342da4eb36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b999190611036565b905081610bad576000945050505050610bcd565b82548290610bbc908390611065565b610bc69190611084565b9450505050505b92915050565b600354600654604080516318160ddd60e01b81529051600093926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190611036565b10610c5257506000610bcd565b610c5c83836110a6565b9392505050565b610c6c8261089c565b6000808381548110610c8057610c80611020565b60009182526020808320868452600182526040808520338652909252922080546005909202909201925015610d9e576000816001015464e8d4a5100084600301548460000154610cd09190611065565b610cda9190611084565b610ce491906110a6565b90507f63a242a632efe33c0e210e04e4173612a17efa4f16aa4890bc7e46caece80de081604051610d1791815260200190565b60405180910390a18015610d9c5760065460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a91906110bd565b505b505b8215610f2f5781546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1e91906110bd565b50815460048084015460405163095ea7b360e01b81526001600160a01b0391821692810192909252602482018690529091169063095ea7b3906044016020604051808303816000875af1158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d91906110bd565b506004828101546040516311f9fbc960e21b81523392810192909252602482018590526000916001600160a01b03909116906347e7ef24906044016020604051808303816000875af1158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b9190611036565b8254909150610f2b9082906110df565b8255505b6003820154815464e8d4a5100091610f4691611065565b610f509190611084565b600190910155505050565b600060208284031215610f6d57600080fd5b5035919050565b6001600160a01b0381168114610f8957600080fd5b50565b600080600060608486031215610fa157600080fd5b8335610fac81610f74565b9250602084013591506040840135610fc381610f74565b809150509250925092565b60008060408385031215610fe157600080fd5b50508035926020909101359150565b6000806040838503121561100357600080fd5b82359150602083013561101581610f74565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561104857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561107f5761107f61104f565b500290565b6000826110a157634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156110b8576110b861104f565b500390565b6000602082840312156110cf57600080fd5b81518015158114610c5c57600080fd5b600082198211156110f2576110f261104f565b50019056fea164736f6c634300080a000a";

type MockAutofarmV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAutofarmV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAutofarmV2__factory extends ContractFactory {
  constructor(...args: MockAutofarmV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _AUTO: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockAutofarmV2> {
    return super.deploy(_AUTO, overrides || {}) as Promise<MockAutofarmV2>;
  }
  override getDeployTransaction(
    _AUTO: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_AUTO, overrides || {});
  }
  override attach(address: string): MockAutofarmV2 {
    return super.attach(address) as MockAutofarmV2;
  }
  override connect(signer: Signer): MockAutofarmV2__factory {
    return super.connect(signer) as MockAutofarmV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAutofarmV2Interface {
    return new utils.Interface(_abi) as MockAutofarmV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAutofarmV2 {
    return new Contract(address, _abi, signerOrProvider) as MockAutofarmV2;
  }
}
