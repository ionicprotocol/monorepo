/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ILpDepositor,
  ILpDepositorInterface,
} from "../../DotDotLpERC4626.sol/ILpDepositor";

const _abi = [
  {
    type: "function",
    name: "claim",
    inputs: [
      {
        name: "_receiver",
        type: "address",
        internalType: "address",
      },
      {
        name: "_tokens",
        type: "address[]",
        internalType: "contract ERC20Upgradeable[]",
      },
      {
        name: "_maxBondAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
      {
        name: "_token",
        type: "address",
        internalType: "contract ERC20Upgradeable",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "depositTokens",
    inputs: [
      {
        name: "lpToken",
        type: "address",
        internalType: "contract ERC20Upgradeable",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ERC20Upgradeable",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "userBalances",
    inputs: [
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
      {
        name: "_token",
        type: "address",
        internalType: "contract ERC20Upgradeable",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "_receiver",
        type: "address",
        internalType: "address",
      },
      {
        name: "_token",
        type: "address",
        internalType: "contract ERC20Upgradeable",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

export class ILpDepositor__factory {
  static readonly abi = _abi;
  static createInterface(): ILpDepositorInterface {
    return new utils.Interface(_abi) as ILpDepositorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILpDepositor {
    return new Contract(address, _abi, signerOrProvider) as ILpDepositor;
  }
}
