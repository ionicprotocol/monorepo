/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockVault, MockVaultInterface } from "../../beam/MockVault";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_beam",
        type: "address",
        internalType: "contract IBoringERC20",
      },
      {
        name: "_beamPerSec",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_beamShareAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "_beamSharePercent",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_feeAddress",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "MAXIMUM_DEPOSIT_FEE_RATE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MAXIMUM_HARVEST_INTERVAL",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "add",
    inputs: [
      {
        name: "_allocPoint",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_lpToken",
        type: "address",
        internalType: "contract IBoringERC20",
      },
      {
        name: "_depositFeeBP",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "_harvestInterval",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_rewarders",
        type: "address[]",
        internalType: "contract IMultipleRewards[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "beam",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IBoringERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "beamPerSec",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "beamShareAddress",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "beamSharePercent",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "canHarvest",
    inputs: [
      {
        name: "_pid",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [
      {
        name: "_pid",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "feeAddress",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "poolInfo",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "lpToken",
        type: "address",
        internalType: "contract IBoringERC20",
      },
      {
        name: "allocPoint",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "lastRewardTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "accBeamPerShare",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "depositFeeBP",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "harvestInterval",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "totalLp",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "startTimestamp",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalAllocPoint",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalBeamInPools",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "totalLockedUpRewards",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "userInfo",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "rewardDebt",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "rewardLockedUp",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "nextHarvestUntil",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "_pid",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200166e3803806200166e8339810160408190526200003491620000ac565b62000044426301e1338062000114565b600355600880546001600160a01b03199081166001600160a01b03938416179091556001949094556000805485169582169590951790945560078054909316919093161790556002556200013b565b6001600160a01b0381168114620000a957600080fd5b50565b600080600080600060a08688031215620000c557600080fd5b8551620000d28162000093565b602087015160408801519196509450620000ec8162000093565b606087015160808801519194509250620001068162000093565b809150509295509295909350565b600082198211156200013657634e487b7160e01b600052601160045260246000fd5b500190565b611523806200014b6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806360e772e1116100a257806393f1a40b1161007157806393f1a40b14610255578063bc4a9f28146102b5578063de73149d146102be578063e2bbb158146102c8578063e6fd48bc146102db57600080fd5b806360e772e114610214578063812c64f11461021d578063838f66a114610239578063913653231461024c57600080fd5b806341275358116100de57806341275358146101d0578063441a3e70146101e3578063474fa630146101f8578063508593ab1461020157600080fd5b80630867bacf146101105780631526fe271461014057806317caf6f1146101965780632e6c998d146101ad575b600080fd5b600054610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e3660046112cc565b6102e4565b604080516001600160a01b039098168852602088019690965294860193909352606085019190915261ffff16608084015260a083015260c082015260e001610137565b61019f60055481565b604051908152602001610137565b6101c06101bb3660046112fa565b610341565b6040519015158152602001610137565b600854610123906001600160a01b031681565b6101f66101f136600461132a565b610381565b005b61019f60065481565b6101f661020f36600461134c565b610638565b61019f60015481565b6102266103e881565b60405161ffff9091168152602001610137565b600754610123906001600160a01b031681565b61019f60045481565b6102956102633660046112fa565b600a60209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610137565b61019f60025481565b61019f6212750081565b6101f66102d636600461132a565b610937565b61019f60035481565b600981815481106102f457600080fd5b600091825260209091206008909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b03909516965092949193909261ffff16919087565b6000828152600a602090815260408083206001600160a01b038516845290915281206003544210801590610379575080600301544210155b949350505050565b60006009838154811061039657610396611400565b60009182526020808320868452600a8252604080852033865290925292208054600890920290920192508311156104145760405162461bcd60e51b815260206004820181905260248201527f77697468647261773a207573657220616d6f756e74206e6f7420656e6f75676860448201526064015b60405180910390fd5b82826006015410156104685760405162461bcd60e51b815260206004820152601f60248201527f77697468647261773a20706f6f6c20746f74616c206e6f7420656e6f75676800604482015260640161040b565b61047184610945565b61047a84610b70565b821561053f5782816000016000828254610494919061142c565b909155505060005482546001600160a01b03908116911614156104c95782600460008282546104c3919061142c565b90915550505b815460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190611443565b505b6003820154815464e8d4a51000916105569161146c565b610560919061148b565b600182015560005b60078301548110156106115782600701818154811061058957610589611400565b600091825260209091200154825460405163075bbb7f60e41b81526004810188905233602482015260448101919091526001600160a01b03909116906375bbb7f090606401600060405180830381600087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b505050508061060a906114ad565b9050610568565b508215610632578282600601600082825461062c919061142c565b90915550505b50505050565b600a8111156106895760405162461bcd60e51b815260206004820152601760248201527f6164643a20746f6f206d616e7920726577617264657273000000000000000000604482015260640161040b565b6103e861ffff851611156106df5760405162461bcd60e51b815260206004820152601960248201527f6164643a206465706f7369742066656520746f6f206869676800000000000000604482015260640161040b565b621275008311156107325760405162461bcd60e51b815260206004820152601d60248201527f6164643a20696e76616c6964206861727665737420696e74657276616c000000604482015260640161040b565b60005b818110156107d25761077683838381811061075257610752611400565b905060200201602081019061076791906114c8565b6001600160a01b03163b151590565b6107c25760405162461bcd60e51b815260206004820152601e60248201527f6164643a207265776172646572206d75737420626520636f6e74726163740000604482015260640161040b565b6107cb816114ad565b9050610735565b506107db610cc7565b600060035442116107ee576003546107f0565b425b9050866005600082825461080491906114e5565b925050819055506009604051806101000160405280886001600160a01b03168152602001898152602001838152602001600081526020018761ffff168152602001868152602001600081526020018585808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050835460018082018655948252602091829020845160089092020180546001600160a01b0319166001600160a01b0390921691909117815583820151948101949094556040830151600285015560608301516003850155608083015160048501805461ffff191661ffff90921691909117905560a0830151600585015560c0830151600685015560e0830151805193949361092b935060078501929190910190611252565b50505050505050505050565b6109418282610cf0565b5050565b60006009828154811061095a5761095a611400565b9060005260206000209060080201905080600201544211610979575050565b600681015480158061098d57506001820154155b1561099d57504260029091015550565b60008260020154426109af919061142c565b905060006005548460010154600154846109c9919061146c565b6109d3919061146c565b6109dd919061148b565b6002549091506103e8906000906109f4908361142c565b6000546007546002549293506001600160a01b03918216926340c10f1992909116908590610a22908861146c565b610a2c919061148b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610a7257600080fd5b505af1158015610a86573d6000803e3d6000fd5b50506000546001600160a01b031691506340c10f1990503084610aa9858861146c565b610ab3919061148b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050600687015483915082610b2864e8d4a510008761146c565b610b32919061146c565b610b3c919061148b565b610b46919061148b565b866003016000828254610b5991906114e5565b909155505042600290960195909555505050505050565b600060098281548110610b8557610b85611400565b60009182526020808320858452600a825260408085203386529092529220600381015460089092029092019250158015610bc157506003544210155b15610bdb576005820154610bd590426114e5565b60038201555b6000816001015464e8d4a5100084600301548460000154610bfc919061146c565b610c06919061148b565b610c10919061142c565b9050610c1c8433610341565b15610c94576000811180610c34575060008260020154115b15610c8f576000826002015482610c4b91906114e5565b9050826002015460066000828254610c63919061142c565b9091555050600060028401556005840154610c7e90426114e5565b6003840155610c8d338261108c565b505b610632565b8015610632578060066000828254610cac91906114e5565b925050819055508082600201600082825461062c91906114e5565b60005b600954811015610ced57610cdd81610945565b610ce6816114ad565b9050610cca565b50565b600060098381548110610d0557610d05611400565b60009182526020808320868452600a82526040808520338652909252922060089091029091019150610d3684610945565b610d3f84610b70565b8215610f9f5781546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db191906114fd565b83546040516323b872dd60e01b8152336004820152306024820152604481018790529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c9190611443565b5082546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9991906114fd565b9050610ea5828261142c565b600485015490955061ffff1615610f5357600484015460009061271090610ed09061ffff168861146c565b610eda919061148b565b855460085460405163423f6cef60e01b81526001600160a01b03918216600482015260248101849052929350169063423f6cef90604401600060405180830381600087803b158015610f2b57600080fd5b505af1158015610f3f573d6000803e3d6000fd5b505050508086610f4f919061142c565b9550505b84836000016000828254610f6791906114e5565b909155505060005484546001600160a01b0390811691161415610f9c578460046000828254610f9691906114e5565b90915550505b50505b6003820154815464e8d4a5100091610fb69161146c565b610fc0919061148b565b600182015560005b600783015481101561107157826007018181548110610fe957610fe9611400565b600091825260209091200154825460405163075bbb7f60e41b81526004810188905233602482015260448101919091526001600160a01b03909116906375bbb7f090606401600060405180830381600087803b15801561104857600080fd5b505af115801561105c573d6000803e3d6000fd5b505050508061106a906114ad565b9050610fc8565b508215610632578282600601600082825461062c91906114e5565b600480546000546040516370a0823160e01b8152309381019390935290916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156110dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110091906114fd565b11156109415760048054600080546040516370a0823160e01b8152309481019490945290926001600160a01b03909116906370a0823190602401602060405180830381865afa158015611157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117b91906114fd565b611185919061142c565b90508082106111f95760005460405163423f6cef60e01b81526001600160a01b038581166004830152602482018490529091169063423f6cef90604401600060405180830381600087803b1580156111dc57600080fd5b505af11580156111f0573d6000803e3d6000fd5b50505050505050565b811561124d5760005460405163423f6cef60e01b81526001600160a01b038581166004830152602482018590529091169063423f6cef90604401600060405180830381600087803b1580156111dc57600080fd5b505050565b8280548282559060005260206000209081019282156112a7579160200282015b828111156112a757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611272565b506112b39291506112b7565b5090565b5b808211156112b357600081556001016112b8565b6000602082840312156112de57600080fd5b5035919050565b6001600160a01b0381168114610ced57600080fd5b6000806040838503121561130d57600080fd5b82359150602083013561131f816112e5565b809150509250929050565b6000806040838503121561133d57600080fd5b50508035926020909101359150565b60008060008060008060a0878903121561136557600080fd5b863595506020870135611377816112e5565b9450604087013561ffff8116811461138e57600080fd5b935060608701359250608087013567ffffffffffffffff808211156113b257600080fd5b818901915089601f8301126113c657600080fd5b8135818111156113d557600080fd5b8a60208260051b85010111156113ea57600080fd5b6020830194508093505050509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561143e5761143e611416565b500390565b60006020828403121561145557600080fd5b8151801515811461146557600080fd5b9392505050565b600081600019048311821515161561148657611486611416565b500290565b6000826114a857634e487b7160e01b600052601260045260246000fd5b500490565b60006000198214156114c1576114c1611416565b5060010190565b6000602082840312156114da57600080fd5b8135611465816112e5565b600082198211156114f8576114f8611416565b500190565b60006020828403121561150f57600080fd5b505191905056fea164736f6c634300080a000a";

type MockVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVault__factory extends ContractFactory {
  constructor(...args: MockVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _beam: string,
    _beamPerSec: BigNumberish,
    _beamShareAddress: string,
    _beamSharePercent: BigNumberish,
    _feeAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockVault> {
    return super.deploy(
      _beam,
      _beamPerSec,
      _beamShareAddress,
      _beamSharePercent,
      _feeAddress,
      overrides || {}
    ) as Promise<MockVault>;
  }
  override getDeployTransaction(
    _beam: string,
    _beamPerSec: BigNumberish,
    _beamShareAddress: string,
    _beamSharePercent: BigNumberish,
    _feeAddress: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _beam,
      _beamPerSec,
      _beamShareAddress,
      _beamSharePercent,
      _feeAddress,
      overrides || {}
    );
  }
  override attach(address: string): MockVault {
    return super.attach(address) as MockVault;
  }
  override connect(signer: Signer): MockVault__factory {
    return super.connect(signer) as MockVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultInterface {
    return new utils.Interface(_abi) as MockVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVault {
    return new Contract(address, _abi, signerOrProvider) as MockVault;
  }
}
