/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PythErrors, PythErrorsInterface } from "../PythErrors";

const _abi = [
  {
    type: "error",
    name: "InsufficientFee",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidArgument",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidGovernanceDataSource",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidGovernanceMessage",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidGovernanceTarget",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidUpdateData",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidUpdateDataSource",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidWormholeVaa",
    inputs: [],
  },
  {
    type: "error",
    name: "NoFreshUpdate",
    inputs: [],
  },
  {
    type: "error",
    name: "OldGovernanceMessage",
    inputs: [],
  },
  {
    type: "error",
    name: "PriceFeedNotFound",
    inputs: [],
  },
  {
    type: "error",
    name: "PriceFeedNotFoundWithinRange",
    inputs: [],
  },
  {
    type: "error",
    name: "StalePrice",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c634300080a000a";

type PythErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PythErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PythErrors__factory extends ContractFactory {
  constructor(...args: PythErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<PythErrors> {
    return super.deploy(overrides || {}) as Promise<PythErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PythErrors {
    return super.attach(address) as PythErrors;
  }
  override connect(signer: Signer): PythErrors__factory {
    return super.connect(signer) as PythErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PythErrorsInterface {
    return new utils.Interface(_abi) as PythErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PythErrors {
    return new Contract(address, _abi, signerOrProvider) as PythErrors;
  }
}
