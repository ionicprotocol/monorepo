/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockStrategy,
  MockStrategyInterface,
} from "../../beefy/MockStrategy";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_want",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "balanceOfWant",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "want",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102a43803806102a483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610211806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f1fcd51146100515780632e1a7d4d14610081578063722713f714610096578063c1a3d44c146100ac575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f3660046101a9565b6100b4565b005b61009e61012d565b604051908152602001610078565b61009e61013c565b60005460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012991906101c2565b5050565b600061013761013c565b905090565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610185573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013791906101eb565b6000602082840312156101bb57600080fd5b5035919050565b6000602082840312156101d457600080fd5b815180151581146101e457600080fd5b9392505050565b6000602082840312156101fd57600080fd5b505191905056fea164736f6c634300080a000a";

type MockStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStrategy__factory extends ContractFactory {
  constructor(...args: MockStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _want: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockStrategy> {
    return super.deploy(_want, overrides || {}) as Promise<MockStrategy>;
  }
  override getDeployTransaction(
    _want: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_want, overrides || {});
  }
  override attach(address: string): MockStrategy {
    return super.attach(address) as MockStrategy;
  }
  override connect(signer: Signer): MockStrategy__factory {
    return super.connect(signer) as MockStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStrategyInterface {
    return new utils.Interface(_abi) as MockStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStrategy {
    return new Contract(address, _abi, signerOrProvider) as MockStrategy;
  }
}
