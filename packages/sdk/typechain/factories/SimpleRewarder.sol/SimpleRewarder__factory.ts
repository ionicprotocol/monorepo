/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SimpleRewarder,
  SimpleRewarderInterface,
} from "../../SimpleRewarder.sol/SimpleRewarder";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_MINICHEF",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "MINICHEF",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "claimOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "init",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "masterLpToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "onSaddleReward",
    inputs: [
      {
        name: "_pid",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "lpTokenAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingOwner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingToken",
    inputs: [
      {
        name: "_user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "pending",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingTokens",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "rewardTokens",
        type: "address[]",
        internalType: "contract IERC20[]",
      },
      {
        name: "rewardAmounts",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pid",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "poolInfo",
    inputs: [],
    outputs: [
      {
        name: "accToken1PerShare",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "lastRewardTime",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rewardPerSecond",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "rewardToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IERC20",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "setRewardPerSecond",
    inputs: [
      {
        name: "_rewardPerSecond",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "direct",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "renounce",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updatePool",
    inputs: [],
    outputs: [
      {
        name: "pool",
        type: "tuple",
        internalType: "struct SimpleRewarder.PoolInfo",
        components: [
          {
            name: "accToken1PerShare",
            type: "uint128",
            internalType: "uint128",
          },
          {
            name: "lastRewardTime",
            type: "uint64",
            internalType: "uint64",
          },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "userInfo",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "rewardDebt",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "LogInit",
    inputs: [
      {
        name: "rewardToken",
        type: "address",
        indexed: true,
        internalType: "contract IERC20",
      },
      {
        name: "owner",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "rewardPerSecond",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "masterLpToken",
        type: "address",
        indexed: true,
        internalType: "contract IERC20",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LogOnReward",
    inputs: [
      {
        name: "user",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "pid",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LogRewardPerSecond",
    inputs: [
      {
        name: "rewardPerSecond",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LogUpdatePool",
    inputs: [
      {
        name: "pid",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "lastRewardTime",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
      {
        name: "lpSupply",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "accToken1PerShare",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516114b23803806114b283398101604081905261002f9161007f565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160a01b03166080526100af565b60006020828403121561009157600080fd5b81516001600160a01b03811681146100a857600080fd5b9392505050565b6080516113be6100f460003960008181610185015281816106250152818161091a0152818161099c01528181610add01528181610e0c0152610e9b01526113be6000f3fe6080604052600436106100fe5760003560e01c80638f10369a11610095578063d63b3c4911610064578063d63b3c4914610306578063e30c397814610334578063e3161ddd14610354578063f106845414610397578063f7c618c1146103ad57600080fd5b80638f10369a14610282578063a8594dab146102a6578063cde10ca0146102c6578063cde63d9b146102e657600080fd5b80634e71e0c8116100d15780634e71e0c8146101d25780635a2f3d09146101e757806366da5815146102425780638da5cb5b1461026257600080fd5b8063078dfbe7146101035780631959a002146101255780633cf98a1c146101735780634ddf47d4146101bf575b600080fd5b34801561010f57600080fd5b5061012361011e366004611066565b6103cd565b005b34801561013157600080fd5b506101596101403660046110b1565b6004602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b34801561017f57600080fd5b506101a77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016a565b6101236101cd3660046110ce565b610511565b3480156101de57600080fd5b50610123610759565b3480156101f357600080fd5b5060035461021a906001600160801b03811690600160801b900467ffffffffffffffff1682565b604080516001600160801b03909316835267ffffffffffffffff90911660208301520161016a565b34801561024e57600080fd5b5061012361025d366004611140565b610816565b34801561026e57600080fd5b506000546101a7906001600160a01b031681565b34801561028e57600080fd5b5061029860055481565b60405190815260200161016a565b3480156102b257600080fd5b506006546101a7906001600160a01b031681565b3480156102d257600080fd5b506102986102e13660046110b1565b6108ab565b3480156102f257600080fd5b50610123610301366004611159565b610ad2565b34801561031257600080fd5b506103266103213660046111ab565b610cef565b60405161016a9291906111e3565b34801561034057600080fd5b506001546101a7906001600160a01b031681565b34801561036057600080fd5b50610369610da6565b6040805182516001600160801b0316815260209283015167ffffffffffffffff16928101929092520161016a565b3480156103a357600080fd5b5061029860075481565b3480156103b957600080fd5b506002546101a7906001600160a01b031681565b6000546001600160a01b0316331461042c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b81156104ef576001600160a01b0383161515806104465750805b61048a5760405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152606401610423565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055505050565b600180546001600160a01b0385166001600160a01b0319909116179055505050565b6002546001600160a01b03161561056a5760405162461bcd60e51b815260206004820152601d60248201527f52657761726465723a20616c726561647920696e697469616c697a65640000006044820152606401610423565b600061057882840184611267565b600755600680546001600160a01b03199081166001600160a01b0393841617909155600592909255600280549092169316928317905591506105fc5760405162461bcd60e51b815260206004820152601960248201527f52657761726465723a2062616420726577617264546f6b656e000000000000006044820152606401610423565b6006546007546040516378ed5d1f60e01b815260048101919091526001600160a01b03918216917f000000000000000000000000000000000000000000000000000000000000000016906378ed5d1f90602401602060405180830381865afa15801561066c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069091906112c2565b6001600160a01b0316146106f15760405162461bcd60e51b815260206004820152602260248201527f52657761726465723a2062616420706964206f72206d61737465724c70546f6b60448201526132b760f11b6064820152608401610423565b6106fe81600160006103cd565b600654600254600554604080516001600160a01b03868116825260208201939093529382169391909216917f4df6005d9c1e62d1d95592850d1c3256ee902631dd819a342f1756ab83489439910160405180910390a3505050565b6001546001600160a01b03163381146107b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606401610423565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b031633146108705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610423565b60058190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b6040805180820182526003546001600160801b038082168352600160801b90910467ffffffffffffffff166020808401919091526001600160a01b038581166000908152600492839052858120855160075497516378ed5d1f60e01b81529485019790975290959093169185917f000000000000000000000000000000000000000000000000000000000000000016906378ed5d1f90602401602060405180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098591906112c2565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291909116906370a0823190602401602060405180830381865afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1191906112df565b9050836020015167ffffffffffffffff1642118015610a2f57508015155b15610a9b576000610a57856020015167ffffffffffffffff164261101590919063ffffffff16565b90506000610a706005548361102890919063ffffffff16565b9050610a9683610a858364e8d4a51000611028565b610a8f919061130e565b8590611034565b935050505b60018301548354610ac8919064e8d4a5100090610ab89086611028565b610ac2919061130e565b90611015565b9695505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b4a5760405162461bcd60e51b815260206004820181905260248201527f52657761726465723a2063616c6c6572206973206e6f74204d696e69436865666044820152606401610423565b8460075414610b945760405162461bcd60e51b815260206004820152601660248201527514995dd85c99195c8e88189859081c1a59081a5b9a5d60521b6044820152606401610423565b6000610b9e610da6565b6001600160a01b038616600090815260046020526040812080549293509115610c6357600182015483518354610be8929164e8d4a5100091610ab8916001600160801b0316611028565b60025460405163a9059cbb60e01b81526001600160a01b0389811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c619190611330565b505b838255825164e8d4a5100090610c839086906001600160801b0316611028565b610c8d919061130e565b8260010181905550856001600160a01b0316600754886001600160a01b03167f2ece88ca2bc08dd018db50e1d25a20bf1241e5fab1c396caa51f01a54bd2f75b84604051610cdd91815260200190565b60405180910390a45050505050505050565b604080516001808252818301909252606091829160009160208083019080368337505060025482519293506001600160a01b031691839150600090610d3657610d3661134d565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050610d7c866108ab565b81600081518110610d8f57610d8f61134d565b602090810291909101015290969095509350505050565b604080518082018252600080825260209182015281518083019092526003546001600160801b0381168352600160801b900467ffffffffffffffff16908201819052421115611012576007546040516378ed5d1f60e01b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916378ed5d1f91610e439160040190815260200190565b602060405180830381865afa158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8491906112c2565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291909116906370a0823190602401602060405180830381865afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906112df565b90508015610f92576000610f3b836020015167ffffffffffffffff164261101590919063ffffffff16565b90506000610f546005548361102890919063ffffffff16565b9050610f8483610f698364e8d4a51000611028565b610f73919061130e565b85516001600160801b031690611034565b6001600160801b0316845250505b4267ffffffffffffffff1660208381018290528351600380546001600160801b039092166001600160c01b03199092168217600160801b85021790556007546040805194855292840185905291830152907f0fc9545022a542541ad085d091fb09a2ab36fee366a4576ab63714ea907ad3539060600160405180910390a2505b90565b60006110218284611363565b9392505050565b6000611021828461137a565b60006110218284611399565b6001600160a01b038116811461105557600080fd5b50565b801515811461105557600080fd5b60008060006060848603121561107b57600080fd5b833561108681611040565b9250602084013561109681611058565b915060408401356110a681611058565b809150509250925092565b6000602082840312156110c357600080fd5b813561102181611040565b600080602083850312156110e157600080fd5b823567ffffffffffffffff808211156110f957600080fd5b818501915085601f83011261110d57600080fd5b81358181111561111c57600080fd5b86602082850101111561112e57600080fd5b60209290920196919550909350505050565b60006020828403121561115257600080fd5b5035919050565b600080600080600060a0868803121561117157600080fd5b85359450602086013561118381611040565b9350604086013561119381611040565b94979396509394606081013594506080013592915050565b6000806000606084860312156111c057600080fd5b8335925060208401356111d281611040565b929592945050506040919091013590565b604080825283519082018190526000906020906060840190828701845b828110156112255781516001600160a01b031684529284019290840190600101611200565b5050508381038285015284518082528583019183019060005b8181101561125a5783518352928401929184019160010161123e565b5090979650505050505050565b600080600080600060a0868803121561127f57600080fd5b853561128a81611040565b9450602086013561129a81611040565b93506040860135925060608601356112b181611040565b949793965091946080013592915050565b6000602082840312156112d457600080fd5b815161102181611040565b6000602082840312156112f157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008261132b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561134257600080fd5b815161102181611058565b634e487b7160e01b600052603260045260246000fd5b600082821015611375576113756112f8565b500390565b6000816000190483118215151615611394576113946112f8565b500290565b600082198211156113ac576113ac6112f8565b50019056fea164736f6c634300080a000a";

type SimpleRewarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleRewarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleRewarder__factory extends ContractFactory {
  constructor(...args: SimpleRewarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _MINICHEF: string,
    overrides?: Overrides & { from?: string }
  ): Promise<SimpleRewarder> {
    return super.deploy(_MINICHEF, overrides || {}) as Promise<SimpleRewarder>;
  }
  override getDeployTransaction(
    _MINICHEF: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_MINICHEF, overrides || {});
  }
  override attach(address: string): SimpleRewarder {
    return super.attach(address) as SimpleRewarder;
  }
  override connect(signer: Signer): SimpleRewarder__factory {
    return super.connect(signer) as SimpleRewarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleRewarderInterface {
    return new utils.Interface(_abi) as SimpleRewarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleRewarder {
    return new Contract(address, _abi, signerOrProvider) as SimpleRewarder;
  }
}
