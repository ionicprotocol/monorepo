/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AnkrBNBInterestRateModel,
  AnkrBNBInterestRateModelInterface,
} from "../../AnkrBNBInterestRateModel.sol/AnkrBNBInterestRateModel";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_blocksPerYear",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_baseRateMultiplier",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_jumpMultiplierPerYear",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "kink_",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_day",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "_rate_provider",
        type: "address",
        internalType: "address",
      },
      {
        name: "_abond",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "ANKR_BOND",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ANKR_RATE_PROVIDER",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "baseRateMultiplier",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "blocksPerYear",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "day",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getAnkrRate",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getBaseRatePerBlock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getBorrowRate",
    inputs: [
      {
        name: "cash",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "borrows",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "reserves",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getBorrowRatePostKink",
    inputs: [
      {
        name: "cash",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "borrows",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "reserves",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMultiplierPerBlock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSupplyRate",
    inputs: [
      {
        name: "cash",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "borrows",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "reserves",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "reserveFactorMantissa",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isInterestRateModel",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "jumpMultiplierPerBlock",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "kink",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "utilizationRate",
    inputs: [
      {
        name: "cash",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "borrows",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "reserves",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "event",
    name: "NewInterestParams",
    inputs: [
      {
        name: "blocksPerYear",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "baseRateMultiplier",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "kink",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107b03803806107b083398101604081905261002f91610173565b86868686868660008260ff1611801561004b575060088260ff16105b61009b5760405162461bcd60e51b815260206004820152601a60248201527f5f6461792073686f756c642062652066726f6d203120746f2037000000000000604482015260640160405180910390fd5b600086905560018590556100af86856101e5565b60025560038390556004805460ff84166001600160a81b0319909116176101006001600160a01b0384160217905560005460015460408051928352602083019190915281018490527f865bfff1eb39dc370f97b2eb5990d963c50228429828ad935a4470166c711fc19060600160405180910390a15050600580546001600160a01b0319166001600160a01b0396909616959095179094555061020798505050505050505050565b80516001600160a01b038116811461016e57600080fd5b919050565b600080600080600080600060e0888a03121561018e57600080fd5b87519650602088015195506040880151945060608801519350608088015160ff811681146101bb57600080fd5b92506101c960a08901610157565b91506101d760c08901610157565b905092959891949750929550565b60008261020257634e487b7160e01b600052601260045260246000fd5b500490565b61059a806102166000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806399e2386511610097578063cbf408c111610066578063cbf408c1146101d8578063d88e7afe146101e0578063f53cc402146101f3578063fd2da3391461020657600080fd5b806399e23865146101ab578063a385fb96146101b3578063b8168816146101bc578063b9f9850a146101cf57600080fd5b80632486f362116100d35780632486f362146101405780636e71e2d8146101705780637b76ac91146101835780638a8dacd8146101a257600080fd5b806315f24053146100fa5780631fcdf96b146101205780632191f92a14610128575b600080fd5b61010d610108366004610490565b61020f565b6040519081526020015b60405180910390f35b61010d61029f565b610130600181565b6040519015158152602001610117565b6004546101589061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610117565b61010d61017e366004610490565b6102cd565b6004546101909060ff1681565b60405160ff9091168152602001610117565b61010d60015481565b61010d610315565b61010d60005481565b61010d6101ca3660046104bc565b610335565b61010d60025481565b61010d6103b1565b61010d6101ee366004610490565b610443565b600554610158906001600160a01b031681565b61010d60035481565b60008061021d8585856102cd565b90506000610229610315565b9050600061023561029f565b9050600082670de0b6b3a764000061024d8487610504565b6102579190610523565b6102619190610545565b9050600354841161027757935061029892505050565b6000610284898989610443565b90506102908282610545565b955050505050505b9392505050565b60006003546102ac6103b1565b6102be90670de0b6b3a7640000610504565b6102c89190610523565b905090565b6000826102dc57506000610298565b816102e78486610545565b6102f1919061055d565b61030384670de0b6b3a7640000610504565b61030d9190610523565b949350505050565b6000670de0b6b3a764000060015461032b6103b1565b6102be9190610504565b60008061034a83670de0b6b3a764000061055d565b9050600061035987878761020f565b90506000670de0b6b3a76400006103708484610504565b61037a9190610523565b9050670de0b6b3a7640000816103918a8a8a6102cd565b61039b9190610504565b6103a59190610523565b98975050505050505050565b6000805460048054600554604051630ab2abfd60e21b81526001600160a01b039182169381019390935260ff821660248401526064926101009092041690632acaaff490604401602060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190610574565b6102be9190610523565b6000806104518585856102cd565b9050600060035482610463919061055d565b9050670de0b6b3a76400006002548261047c9190610504565b6104869190610523565b9695505050505050565b6000806000606084860312156104a557600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156104d257600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561051e5761051e6104ee565b500290565b60008261054057634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610558576105586104ee565b500190565b60008282101561056f5761056f6104ee565b500390565b60006020828403121561058657600080fd5b505191905056fea164736f6c634300080a000a";

type AnkrBNBInterestRateModelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AnkrBNBInterestRateModelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AnkrBNBInterestRateModel__factory extends ContractFactory {
  constructor(...args: AnkrBNBInterestRateModelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _blocksPerYear: BigNumberish,
    _baseRateMultiplier: BigNumberish,
    _jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    _day: BigNumberish,
    _rate_provider: string,
    _abond: string,
    overrides?: Overrides & { from?: string }
  ): Promise<AnkrBNBInterestRateModel> {
    return super.deploy(
      _blocksPerYear,
      _baseRateMultiplier,
      _jumpMultiplierPerYear,
      kink_,
      _day,
      _rate_provider,
      _abond,
      overrides || {}
    ) as Promise<AnkrBNBInterestRateModel>;
  }
  override getDeployTransaction(
    _blocksPerYear: BigNumberish,
    _baseRateMultiplier: BigNumberish,
    _jumpMultiplierPerYear: BigNumberish,
    kink_: BigNumberish,
    _day: BigNumberish,
    _rate_provider: string,
    _abond: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _blocksPerYear,
      _baseRateMultiplier,
      _jumpMultiplierPerYear,
      kink_,
      _day,
      _rate_provider,
      _abond,
      overrides || {}
    );
  }
  override attach(address: string): AnkrBNBInterestRateModel {
    return super.attach(address) as AnkrBNBInterestRateModel;
  }
  override connect(signer: Signer): AnkrBNBInterestRateModel__factory {
    return super.connect(signer) as AnkrBNBInterestRateModel__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AnkrBNBInterestRateModelInterface {
    return new utils.Interface(_abi) as AnkrBNBInterestRateModelInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AnkrBNBInterestRateModel {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AnkrBNBInterestRateModel;
  }
}
