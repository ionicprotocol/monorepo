/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockStrategy, MockStrategyInterface } from "../MockStrategy";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_wantAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "_autoFarmAddress",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "autoFarmAddress",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [
      {
        name: "_userAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "_wantAmt",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "entranceFeeFactor",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "entranceFeeFactorMax",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isAutoComp",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "sharesTotal",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "wantAddress",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "wantLockedTotal",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "_userAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "_wantAmt",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "withdrawFeeFactor",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "withdrawFeeFactorMax",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x6080604052600160025560016003556001600455600160055534801561002457600080fd5b506040516106403803806106408339810160408190526100439161009a565b60068054610100600160a81b0319166101006001600160a01b0394851602179055600780546001600160a01b031916919092161790556100cd565b80516001600160a01b038116811461009557600080fd5b919050565b600080604083850312156100ad57600080fd5b6100b68361007e565b91506100c46020840161007e565b90509250929050565b610564806100dc6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806368f541621161007157806368f54162146100f8578063e5dd455a14610101578063e7a036791461011e578063ee50dc341461014e578063f3fef3a314610157578063fa9748411461016a57600080fd5b80631334903f146100ae57806342da4eb3146100ca57806344a3955e146100d357806347e7ef24146100dc57806367057b6c146100ef575b600080fd5b6100b760025481565b6040519081526020015b60405180910390f35b6100b760005481565b6100b760015481565b6100b76100ea36600461045e565b61017d565b6100b760055481565b6100b760045481565b60065461010e9060ff1681565b60405190151581526020016100c1565b6006546101369061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016100c1565b6100b760035481565b6100b761016536600461045e565b61028a565b600754610136906001600160a01b031681565b6006546040516323b872dd60e01b81523360048201523060248201526044810183905260009161010090046001600160a01b0316906323b872dd906064016020604051808303816000875af11580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610496565b5060005482901580159061021457506000600154115b156102505760035460005460025460015461022f90876104ce565b61023991906104ce565b61024391906104ed565b61024d91906104ed565b90505b8060015461025e919061050f565b60015560065460ff161561027157610283565b8260005461027f919061050f565b6000555b9392505050565b60008082116102cf5760405162461bcd60e51b815260206004820152600d60248201526c05f77616e74416d74203c3d203609c1b604482015260640160405180910390fd5b600080546001546102e090856104ce565b6102ea91906104ed565b90506001548111156102fb57506001545b806001546103099190610527565b60015560055460045410156103355760055460045461032890856104ce565b61033291906104ed565b92505b6006546040516370a0823160e01b815230600482015260009161010090046001600160a01b0316906370a0823190602401602060405180830381865afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a7919061053e565b9050808411156103b5578093505b8360005410156103c55760005493505b836000546103d39190610527565b60005560065460075460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101879052610100909204169063a9059cbb906044016020604051808303816000875af1158015610430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104549190610496565b5090949350505050565b6000806040838503121561047157600080fd5b82356001600160a01b038116811461048857600080fd5b946020939093013593505050565b6000602082840312156104a857600080fd5b8151801515811461028357600080fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156104e8576104e86104b8565b500290565b60008261050a57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610522576105226104b8565b500190565b600082821015610539576105396104b8565b500390565b60006020828403121561055057600080fd5b505191905056fea164736f6c634300080a000a";

type MockStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStrategy__factory extends ContractFactory {
  constructor(...args: MockStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wantAddress: string,
    _autoFarmAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockStrategy> {
    return super.deploy(
      _wantAddress,
      _autoFarmAddress,
      overrides || {}
    ) as Promise<MockStrategy>;
  }
  override getDeployTransaction(
    _wantAddress: string,
    _autoFarmAddress: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _wantAddress,
      _autoFarmAddress,
      overrides || {}
    );
  }
  override attach(address: string): MockStrategy {
    return super.attach(address) as MockStrategy;
  }
  override connect(signer: Signer): MockStrategy__factory {
    return super.connect(signer) as MockStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStrategyInterface {
    return new utils.Interface(_abi) as MockStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStrategy {
    return new Contract(address, _abi, signerOrProvider) as MockStrategy;
  }
}
