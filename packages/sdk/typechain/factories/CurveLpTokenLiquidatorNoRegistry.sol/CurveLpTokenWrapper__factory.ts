/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveLpTokenWrapper,
  CurveLpTokenWrapperInterface,
} from "../../CurveLpTokenLiquidatorNoRegistry.sol/CurveLpTokenWrapper";

const _abi = [
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061058a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e14610079575b600080fd5b604080518082018252601381527221bab93b32a6382a37b5b2b72bb930b83832b960691b602082015290516100709190610318565b60405180910390f35b61008c61008736600461039b565b6100ab565b604080516001600160a01b039093168352602083019190915201610070565b600080600080848060200190518101906100c59190610468565b9450915083905060ff60005b60ff82811614156101795760405163c661065760e01b815260ff821660048201526001600160a01b0385169063c661065790602401602060405180830381865afa92505050801561013f575060408051601f3d908101601f1916820190925261013c918101906104a2565b60015b61014857610179565b896001600160a01b0316816001600160a01b03161415610166578192505b5080610171816104c6565b9150506100d1565b60405163095ea7b360e01b81526001600160a01b038581166004830152602482018a90528a169063095ea7b3906044016020604051808303816000875af11580156101c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ec91906104f4565b506101f56102fa565b88818460ff166002811061020b5761020b610516565b6020020152604051630b4c7e4d60e01b81526001600160a01b03861690630b4c7e4d9061023f90849060019060040161052c565b6020604051808303816000875af115801561025e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102829190610564565b506040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa1580156102c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb9190610564565b95505050505050935093915050565b60405180604001604052806002906020820280368337509192915050565b600060208083528351808285015260005b8181101561034557858101830151858201604001528201610329565b81811115610357576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461038257600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156103b057600080fd5b83356103bb8161036d565b925060208401359150604084013567ffffffffffffffff808211156103df57600080fd5b818601915086601f8301126103f357600080fd5b81358181111561040557610405610385565b604051601f8201601f19908116603f0116810190838211818310171561042d5761042d610385565b8160405282815289602084870101111561044657600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000806040838503121561047b57600080fd5b82516104868161036d565b60208401519092506104978161036d565b809150509250929050565b6000602082840312156104b457600080fd5b81516104bf8161036d565b9392505050565b600060ff821660ff8114156104eb57634e487b7160e01b600052601160045260246000fd5b60010192915050565b60006020828403121561050657600080fd5b815180151581146104bf57600080fd5b634e487b7160e01b600052603260045260246000fd5b60608101818460005b6002811015610554578151835260209283019290910190600101610535565b5050508260408301529392505050565b60006020828403121561057657600080fd5b505191905056fea164736f6c634300080a000a";

type CurveLpTokenWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveLpTokenWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveLpTokenWrapper__factory extends ContractFactory {
  constructor(...args: CurveLpTokenWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<CurveLpTokenWrapper> {
    return super.deploy(overrides || {}) as Promise<CurveLpTokenWrapper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveLpTokenWrapper {
    return super.attach(address) as CurveLpTokenWrapper;
  }
  override connect(signer: Signer): CurveLpTokenWrapper__factory {
    return super.connect(signer) as CurveLpTokenWrapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveLpTokenWrapperInterface {
    return new utils.Interface(_abi) as CurveLpTokenWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveLpTokenWrapper {
    return new Contract(address, _abi, signerOrProvider) as CurveLpTokenWrapper;
  }
}
