/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveSwapLiquidator,
  CurveSwapLiquidatorInterface,
} from "../CurveSwapLiquidator";

const _abi = [
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106c8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e14610079575b600080fd5b604080518082018252601381527221bab93b32a9bbb0b82634b8bab4b230ba37b960691b602082015290516100709190610458565b60405180910390f35b61008c6100873660046104db565b6100ab565b604080516001600160a01b039093168352602083019190915201610070565b6000806100b98585856100c5565b91509150935093915050565b600080600080600080868060200190518101906100e291906105a8565b939750919550909350909150899050600080806001600160a01b0387161561017e576040516324e2f63b60e21b81526001600160a01b038581166004830152878116602483015288169063938bd8ec90604401606060405180830381865afa158015610152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101769190610634565b919450925090505b6001600160a01b038316610206576040516324e2f63b60e21b81526001600160a01b038581166004830152878116602483015289169063938bd8ec90604401606060405180830381865afa1580156101da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fe9190610634565b919450925090505b6001600160a01b03831661024e5760405162461bcd60e51b815260206004820152600b60248201526a0858dd5c9d99481c1bdbdb60aa1b604482015260640160405180910390fd5b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018e90528e169063095ea7b3906044016020604051808303816000875af115801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c19190610679565b50604051630f7c084960e21b8152600f83810b600483015282900b6024820152604481018d9052600060648201526001600160a01b03841690633df02124906084016020604051808303816000875af1158015610322573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034691906106a2565b506001600160a01b0386161580610379575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b038716145b156103da57846001600160a01b031663d0e30db08a6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103b957600080fd5b505af11580156103cd573d6000803e3d6000fd5b50505050508499506103de565b8599505b6040516370a0823160e01b81523060048201526001600160a01b038b16906370a0823190602401602060405180830381865afa158015610422573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044691906106a2565b98505050505050505050935093915050565b600060208083528351808285015260005b8181101561048557858101830151858201604001528201610469565b81811115610497576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146104c257600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156104f057600080fd5b83356104fb816104ad565b925060208401359150604084013567ffffffffffffffff8082111561051f57600080fd5b818601915086601f83011261053357600080fd5b813581811115610545576105456104c5565b604051601f8201601f19908116603f0116810190838211818310171561056d5761056d6104c5565b8160405282815289602084870101111561058657600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080600080600060a086880312156105c057600080fd5b85516105cb816104ad565b60208701519095506105dc816104ad565b60408701519094506105ed816104ad565b60608701519093506105fe816104ad565b608087015190925061060f816104ad565b809150509295509295909350565b8051600f81900b811461062f57600080fd5b919050565b60008060006060848603121561064957600080fd5b8351610654816104ad565b92506106626020850161061d565b91506106706040850161061d565b90509250925092565b60006020828403121561068b57600080fd5b8151801515811461069b57600080fd5b9392505050565b6000602082840312156106b457600080fd5b505191905056fea164736f6c634300080a000a";

type CurveSwapLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveSwapLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveSwapLiquidator__factory extends ContractFactory {
  constructor(...args: CurveSwapLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<CurveSwapLiquidator> {
    return super.deploy(overrides || {}) as Promise<CurveSwapLiquidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveSwapLiquidator {
    return super.attach(address) as CurveSwapLiquidator;
  }
  override connect(signer: Signer): CurveSwapLiquidator__factory {
    return super.connect(signer) as CurveSwapLiquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveSwapLiquidatorInterface {
    return new utils.Interface(_abi) as CurveSwapLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveSwapLiquidator {
    return new Contract(address, _abi, signerOrProvider) as CurveSwapLiquidator;
  }
}
