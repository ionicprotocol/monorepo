/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IAlgebraPoolActions,
  IAlgebraPoolActionsInterface,
} from "../IAlgebraPoolActions";

const _abi = [
  {
    type: "function",
    name: "burn",
    inputs: [
      {
        name: "bottomTick",
        type: "int24",
        internalType: "int24",
      },
      {
        name: "topTick",
        type: "int24",
        internalType: "int24",
      },
      {
        name: "amount",
        type: "uint128",
        internalType: "uint128",
      },
    ],
    outputs: [
      {
        name: "amount0",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "amount1",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "collect",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "bottomTick",
        type: "int24",
        internalType: "int24",
      },
      {
        name: "topTick",
        type: "int24",
        internalType: "int24",
      },
      {
        name: "amount0Requested",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "amount1Requested",
        type: "uint128",
        internalType: "uint128",
      },
    ],
    outputs: [
      {
        name: "amount0",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "amount1",
        type: "uint128",
        internalType: "uint128",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "flash",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount0",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "amount1",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "price",
        type: "uint160",
        internalType: "uint160",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "bottomTick",
        type: "int24",
        internalType: "int24",
      },
      {
        name: "topTick",
        type: "int24",
        internalType: "int24",
      },
      {
        name: "amount",
        type: "uint128",
        internalType: "uint128",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "amount0",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "amount1",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "liquidityActual",
        type: "uint128",
        internalType: "uint128",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swap",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "zeroToOne",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "amountSpecified",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "limitSqrtPrice",
        type: "uint160",
        internalType: "uint160",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "amount0",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "amount1",
        type: "int256",
        internalType: "int256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swapSupportingFeeOnInputTokens",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "zeroToOne",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "amountSpecified",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "limitSqrtPrice",
        type: "uint160",
        internalType: "uint160",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "amount0",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "amount1",
        type: "int256",
        internalType: "int256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

export class IAlgebraPoolActions__factory {
  static readonly abi = _abi;
  static createInterface(): IAlgebraPoolActionsInterface {
    return new utils.Interface(_abi) as IAlgebraPoolActionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAlgebraPoolActions {
    return new Contract(address, _abi, signerOrProvider) as IAlgebraPoolActions;
  }
}
