/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapV2Liquidator,
  UniswapV2LiquidatorInterface,
} from "../UniswapV2Liquidator";

const _abi = [
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106e9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e14610079575b600080fd5b60408051808201825260138152722ab734b9bbb0b82b192634b8bab4b230ba37b960691b60208201529051610070919061031e565b60405180910390f35b61008c6100873660046103d2565b6100ab565b604080516001600160a01b039093168352602083019190915201610070565b6000806100b98585856100c5565b91509150935093915050565b600080600080848060200190518101906100df91906104a7565b9150915060028151101580156101205750866001600160a01b03168160008151811061010d5761010d61055d565b60200260200101516001600160a01b0316145b61017c5760405162461bcd60e51b8152602060048201526024808201527f496e76616c696420556e69737761704c697175696461746f722073776170207060448201526330ba341760e11b606482015260840160405180910390fd5b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156101cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef9190610573565b506101fb82878361029c565b806001825161020a919061059c565b8151811061021a5761021a61055d565b60209081029190910101516040516370a0823160e01b81523060048201529094506001600160a01b038516906370a0823190602401602060405180830381865afa15801561026c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029091906105c1565b92505050935093915050565b6040516338ed173960e01b81526001600160a01b038416906338ed1739906102d19085906000908690309042906004016105da565b6000604051808303816000875af11580156102f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610318919081019061064b565b50505050565b600060208083528351808285015260005b8181101561034b5785810183015185820160400152820161032f565b8181111561035d576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461038857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156103ca576103ca61038b565b604052919050565b6000806000606084860312156103e757600080fd5b83356103f281610373565b92506020848101359250604085013567ffffffffffffffff8082111561041757600080fd5b818701915087601f83011261042b57600080fd5b81358181111561043d5761043d61038b565b61044f601f8201601f191685016103a1565b9150808252888482850101111561046557600080fd5b80848401858401376000848284010152508093505050509250925092565b600067ffffffffffffffff82111561049d5761049d61038b565b5060051b60200190565b600080604083850312156104ba57600080fd5b82516104c581610373565b8092505060208084015167ffffffffffffffff8111156104e457600080fd5b8401601f810186136104f557600080fd5b805161050861050382610483565b6103a1565b81815260059190911b8201830190838101908883111561052757600080fd5b928401925b8284101561054e57835161053f81610373565b8252928401929084019061052c565b80955050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561058557600080fd5b8151801515811461059557600080fd5b9392505050565b6000828210156105bc57634e487b7160e01b600052601160045260246000fd5b500390565b6000602082840312156105d357600080fd5b5051919050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561062a5784516001600160a01b031683529383019391830191600101610605565b50506001600160a01b03969096166060850152505050608001529392505050565b6000602080838503121561065e57600080fd5b825167ffffffffffffffff81111561067557600080fd5b8301601f8101851361068657600080fd5b805161069461050382610483565b81815260059190911b820183019083810190878311156106b357600080fd5b928401925b828410156106d1578351825292840192908401906106b8565b97965050505050505056fea164736f6c634300080a000a";

type UniswapV2LiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV2LiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV2Liquidator__factory extends ContractFactory {
  constructor(...args: UniswapV2LiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<UniswapV2Liquidator> {
    return super.deploy(overrides || {}) as Promise<UniswapV2Liquidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniswapV2Liquidator {
    return super.attach(address) as UniswapV2Liquidator;
  }
  override connect(signer: Signer): UniswapV2Liquidator__factory {
    return super.connect(signer) as UniswapV2Liquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2LiquidatorInterface {
    return new utils.Interface(_abi) as UniswapV2LiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2Liquidator {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2Liquidator;
  }
}
