/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapLpTokenLiquidator,
  UniswapLpTokenLiquidatorInterface,
} from "../UniswapLpTokenLiquidator";

const _abi = [
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e9d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e14610083575b600080fd5b604080518082018252601881527f556e69737761704c70546f6b656e4c697175696461746f7200000000000000006020820152905161007a9190610a6d565b60405180910390f35b610096610091366004610aff565b6100b5565b604080516001600160a01b03909316835260208301919091520161007a565b60008060008590506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101219190610bb0565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101879190610bb0565b60405163a9059cbb60e01b81526001600160a01b03851660048201819052602482018a905291925063a9059cbb906044016020604051808303816000875af11580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb9190610bd4565b5060405163226bf2d160e21b815230600482015260009081906001600160a01b038616906389afcb449060240160408051808303816000875af1158015610246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a9190610bf6565b9150915060008060008a8060200190518101906102879190610cb2565b925092509250600081511161029c57856102c4565b80600182516102ab9190610d29565b815181106102bb576102bb610d4e565b60200260200101515b6001600160a01b031660008351116102dc5787610304565b82600184516102eb9190610d29565b815181106102fb576102fb610d4e565b60200260200101515b6001600160a01b03161461038f5760405162461bcd60e51b815260206004820152604160248201527f4f7574707574206f6620746f6b656e3020737761702070617468206d7573742060448201527f657175616c206f7574707574206f6620746f6b656e31207377617020706174686064820152601760f91b608482015260a4015b60405180910390fd5b600082511180156103d85750866001600160a01b031682600184516103b49190610d29565b815181106103c4576103c4610d4e565b60200260200101516001600160a01b031614155b15610466576103e88784876105f1565b6040516338ed173960e01b81526001600160a01b038416906338ed17399061041d908890600090879030904290600401610d64565b6000604051808303816000875af115801561043c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104649190810190610dd5565b505b600081511180156104af5750856001600160a01b0316816001835161048b9190610d29565b8151811061049b5761049b610d4e565b60200260200101516001600160a01b031614155b1561053d576104bf8684866105f1565b6040516338ed173960e01b81526001600160a01b038416906338ed1739906104f4908790600090869030904290600401610d64565b6000604051808303816000875af1158015610513573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261053b9190810190610dd5565b505b600082511161054c5786610574565b816001835161055b9190610d29565b8151811061056b5761056b610d4e565b60200260200101515b6040516370a0823160e01b8152306004820152909a506001600160a01b038b16906370a0823190602401602060405180830381865afa1580156105bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105df9190610e5b565b98505050505050505050935093915050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610e5b565b9050818110156106a057801561068a5761068a6001600160a01b0385168460006106a6565b6106a06001600160a01b038516846000196106a6565b50505050565b8015806107205750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190610e5b565b155b61078b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610386565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526107dd9084906107e2565b505050565b6000610837826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108b49092919063ffffffff16565b8051909150156107dd57808060200190518101906108559190610bd4565b6107dd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610386565b60606108c384846000856108cb565b949350505050565b60608247101561092c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610386565b600080866001600160a01b031685876040516109489190610e74565b60006040518083038185875af1925050503d8060008114610985576040519150601f19603f3d011682016040523d82523d6000602084013e61098a565b606091505b509150915061099b878383876109a6565b979650505050505050565b60608315610a12578251610a0b576001600160a01b0385163b610a0b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610386565b50816108c3565b6108c38383815115610a275781518083602001fd5b8060405162461bcd60e51b81526004016103869190610a6d565b60005b83811015610a5c578181015183820152602001610a44565b838111156106a05750506000910152565b6020815260008251806020840152610a8c816040850160208701610a41565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610ab557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610af757610af7610ab8565b604052919050565b600080600060608486031215610b1457600080fd5b8335610b1f81610aa0565b92506020848101359250604085013567ffffffffffffffff80821115610b4457600080fd5b818701915087601f830112610b5857600080fd5b813581811115610b6a57610b6a610ab8565b610b7c601f8201601f19168501610ace565b91508082528884828501011115610b9257600080fd5b80848401858401376000848284010152508093505050509250925092565b600060208284031215610bc257600080fd5b8151610bcd81610aa0565b9392505050565b600060208284031215610be657600080fd5b81518015158114610bcd57600080fd5b60008060408385031215610c0957600080fd5b505080516020909101519092909150565b600067ffffffffffffffff821115610c3457610c34610ab8565b5060051b60200190565b600082601f830112610c4f57600080fd5b81516020610c64610c5f83610c1a565b610ace565b82815260059290921b84018101918181019086841115610c8357600080fd5b8286015b84811015610ca7578051610c9a81610aa0565b8352918301918301610c87565b509695505050505050565b600080600060608486031215610cc757600080fd5b8351610cd281610aa0565b602085015190935067ffffffffffffffff80821115610cf057600080fd5b610cfc87838801610c3e565b93506040860151915080821115610d1257600080fd5b50610d1f86828701610c3e565b9150509250925092565b600082821015610d4957634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015610db45784516001600160a01b031683529383019391830191600101610d8f565b50506001600160a01b03969096166060850152505050608001529392505050565b60006020808385031215610de857600080fd5b825167ffffffffffffffff811115610dff57600080fd5b8301601f81018513610e1057600080fd5b8051610e1e610c5f82610c1a565b81815260059190911b82018301908381019087831115610e3d57600080fd5b928401925b8284101561099b57835182529284019290840190610e42565b600060208284031215610e6d57600080fd5b5051919050565b60008251610e86818460208701610a41565b919091019291505056fea164736f6c634300080a000a";

type UniswapLpTokenLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapLpTokenLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapLpTokenLiquidator__factory extends ContractFactory {
  constructor(...args: UniswapLpTokenLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<UniswapLpTokenLiquidator> {
    return super.deploy(overrides || {}) as Promise<UniswapLpTokenLiquidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniswapLpTokenLiquidator {
    return super.attach(address) as UniswapLpTokenLiquidator;
  }
  override connect(signer: Signer): UniswapLpTokenLiquidator__factory {
    return super.connect(signer) as UniswapLpTokenLiquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapLpTokenLiquidatorInterface {
    return new utils.Interface(_abi) as UniswapLpTokenLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapLpTokenLiquidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as UniswapLpTokenLiquidator;
  }
}
