/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapV2LiquidatorFunder,
  UniswapV2LiquidatorFunderInterface,
} from "../UniswapV2LiquidatorFunder";

const _abi = [
  {
    type: "function",
    name: "convert",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "estimateInputAmount",
    inputs: [
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506108b4806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde031461005157806310badf4e1461009957806330132996146100cb57806389eabf0214610099575b600080fd5b604080518082018252601981527f556e697377617056324c697175696461746f7246756e64657200000000000000602082015290516100909190610416565b60405180910390f35b6100ac6100a736600461053a565b6100de565b604080516001600160a01b039093168352602083019190915201610090565b6100ac6100d9366004610593565b6100f8565b6000806100ec8585856101fd565b91509150935093915050565b6000806000808480602001905181019061011291906105fe565b915091506002815110156101415760405162461bcd60e51b8152600401610138906106b4565b60405180910390fd5b6040516307c0329d60e21b81526000906001600160a01b03841690631f00ca7490610172908a90869060040161073c565b600060405180830381865afa15801561018f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b7919081019061075d565b9050806000815181106101cc576101cc6107ee565b60200260200101519350816000815181106101e9576101e96107ee565b602002602001015194505050509250929050565b6000806000808480602001905181019061021791906105fe565b9150915060028151101580156102585750866001600160a01b031681600081518110610245576102456107ee565b60200260200101516001600160a01b0316145b6102745760405162461bcd60e51b8152600401610138906106b4565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156102c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e79190610804565b506102f3828783610394565b8060018251610302919061082d565b81518110610312576103126107ee565b60209081029190910101516040516370a0823160e01b81523060048201529094506001600160a01b038516906370a0823190602401602060405180830381865afa158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190610852565b92505050935093915050565b6040516338ed173960e01b81526001600160a01b038416906338ed1739906103c990859060009086903090429060040161086b565b6000604051808303816000875af11580156103e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610410919081019061075d565b50505050565b600060208083528351808285015260005b8181101561044357858101830151858201604001528201610427565b81811115610455576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461048057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156104c2576104c2610483565b604052919050565b600082601f8301126104db57600080fd5b813567ffffffffffffffff8111156104f5576104f5610483565b610508601f8201601f1916602001610499565b81815284602083860101111561051d57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561054f57600080fd5b833561055a8161046b565b925060208401359150604084013567ffffffffffffffff81111561057d57600080fd5b610589868287016104ca565b9150509250925092565b600080604083850312156105a657600080fd5b82359150602083013567ffffffffffffffff8111156105c457600080fd5b6105d0858286016104ca565b9150509250929050565b600067ffffffffffffffff8211156105f4576105f4610483565b5060051b60200190565b6000806040838503121561061157600080fd5b825161061c8161046b565b8092505060208084015167ffffffffffffffff81111561063b57600080fd5b8401601f8101861361064c57600080fd5b805161065f61065a826105da565b610499565b81815260059190911b8201830190838101908883111561067e57600080fd5b928401925b828410156106a55783516106968161046b565b82529284019290840190610683565b80955050505050509250929050565b60208082526024908201527f496e76616c696420556e69737761704c697175696461746f722073776170207060408201526330ba341760e11b606082015260800190565b600081518084526020808501945080840160005b838110156107315781516001600160a01b03168752958201959082019060010161070c565b509495945050505050565b82815260406020820152600061075560408301846106f8565b949350505050565b6000602080838503121561077057600080fd5b825167ffffffffffffffff81111561078757600080fd5b8301601f8101851361079857600080fd5b80516107a661065a826105da565b81815260059190911b820183019083810190878311156107c557600080fd5b928401925b828410156107e3578351825292840192908401906107ca565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561081657600080fd5b8151801515811461082657600080fd5b9392505050565b60008282101561084d57634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561086457600080fd5b5051919050565b85815284602082015260a06040820152600061088a60a08301866106f8565b6001600160a01b039490941660608301525060800152939250505056fea164736f6c634300080a000a";

type UniswapV2LiquidatorFunderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV2LiquidatorFunderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV2LiquidatorFunder__factory extends ContractFactory {
  constructor(...args: UniswapV2LiquidatorFunderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<UniswapV2LiquidatorFunder> {
    return super.deploy(overrides || {}) as Promise<UniswapV2LiquidatorFunder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniswapV2LiquidatorFunder {
    return super.attach(address) as UniswapV2LiquidatorFunder;
  }
  override connect(signer: Signer): UniswapV2LiquidatorFunder__factory {
    return super.connect(signer) as UniswapV2LiquidatorFunder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2LiquidatorFunderInterface {
    return new utils.Interface(_abi) as UniswapV2LiquidatorFunderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2LiquidatorFunder {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as UniswapV2LiquidatorFunder;
  }
}
