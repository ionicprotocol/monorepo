/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ILiquidator, ILiquidatorInterface } from "../ILiquidator";

const _abi = [
  {
    type: "function",
    name: "_whitelistRedemptionStrategies",
    inputs: [
      {
        name: "strategies",
        type: "address[]",
        internalType: "contract IRedemptionStrategy[]",
      },
      {
        name: "whitelisted",
        type: "bool[]",
        internalType: "bool[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "_whitelistRedemptionStrategy",
    inputs: [
      {
        name: "strategy",
        type: "address",
        internalType: "contract IRedemptionStrategy",
      },
      {
        name: "whitelisted",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "redemptionStrategiesWhitelist",
    inputs: [
      {
        name: "strategy",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "safeLiquidate",
    inputs: [
      {
        name: "borrower",
        type: "address",
        internalType: "address",
      },
      {
        name: "repayAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "cErc20",
        type: "address",
        internalType: "contract ICErc20",
      },
      {
        name: "cTokenCollateral",
        type: "address",
        internalType: "contract ICErc20",
      },
      {
        name: "minOutputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "safeLiquidateToTokensWithFlashLoan",
    inputs: [
      {
        name: "vars",
        type: "tuple",
        internalType: "struct ILiquidator.LiquidateToTokensWithFlashSwapVars",
        components: [
          {
            name: "borrower",
            type: "address",
            internalType: "address",
          },
          {
            name: "repayAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "cErc20",
            type: "address",
            internalType: "contract ICErc20",
          },
          {
            name: "cTokenCollateral",
            type: "address",
            internalType: "contract ICErc20",
          },
          {
            name: "flashSwapContract",
            type: "address",
            internalType: "address",
          },
          {
            name: "minProfitAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "redemptionStrategies",
            type: "address[]",
            internalType: "contract IRedemptionStrategy[]",
          },
          {
            name: "strategyData",
            type: "bytes[]",
            internalType: "bytes[]",
          },
          {
            name: "debtFundingStrategies",
            type: "address[]",
            internalType: "contract IFundsConversionStrategy[]",
          },
          {
            name: "debtFundingStrategiesData",
            type: "bytes[]",
            internalType: "bytes[]",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

export class ILiquidator__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidatorInterface {
    return new utils.Interface(_abi) as ILiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILiquidator {
    return new Contract(address, _abi, signerOrProvider) as ILiquidator;
  }
}
