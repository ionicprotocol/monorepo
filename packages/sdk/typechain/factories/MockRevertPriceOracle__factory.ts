/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockRevertPriceOracle,
  MockRevertPriceOracleInterface,
} from "../MockRevertPriceOracle";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getUnderlyingPrice",
    inputs: [
      {
        name: "cToken",
        type: "address",
        internalType: "contract ICErc20",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "price",
    inputs: [
      {
        name: "underlying",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610191806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063aea910781461003b578063fc57d4df14610060575b600080fd5b61004e610049366004610160565b610073565b60405190815260200160405180910390f35b61004e61006e366004610160565b6100d7565b60405162461bcd60e51b815260206004820152602b60248201527f4d6f636b50726963654f7261636c653a2070726963652066756e6374696f6e2060448201526a34b9903330b4b634b7339760a91b60648201526000906084015b60405180910390fd5b60405162461bcd60e51b815260206004820152603860248201527f4d6f636b50726963654f7261636c653a20676574556e6465726c79696e67507260448201527f6963652066756e6374696f6e206973206661696c696e672e000000000000000060648201526000906084016100ce565b6001600160a01b038116811461015d57600080fd5b50565b60006020828403121561017257600080fd5b813561017d81610148565b939250505056fea164736f6c634300080a000a";

type MockRevertPriceOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRevertPriceOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRevertPriceOracle__factory extends ContractFactory {
  constructor(...args: MockRevertPriceOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockRevertPriceOracle> {
    return super.deploy(overrides || {}) as Promise<MockRevertPriceOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRevertPriceOracle {
    return super.attach(address) as MockRevertPriceOracle;
  }
  override connect(signer: Signer): MockRevertPriceOracle__factory {
    return super.connect(signer) as MockRevertPriceOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRevertPriceOracleInterface {
    return new utils.Interface(_abi) as MockRevertPriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRevertPriceOracle {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockRevertPriceOracle;
  }
}
