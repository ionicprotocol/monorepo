/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  XBombLiquidatorFunder,
  XBombLiquidatorFunderInterface,
} from "../../XBombLiquidatorFunder.sol/XBombLiquidatorFunder";

const _abi = [
  {
    type: "function",
    name: "convert",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "estimateInputAmount",
    inputs: [
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "redeem",
    inputs: [
      {
        name: "inputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "inputAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "strategyData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "outputToken",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "outputAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106de806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde031461005157806310badf4e1461009157806330132996146100c357806389eabf0214610091575b600080fd5b60408051808201825260158152742c2137b6b12634b8bab4b230ba37b9233ab73232b960591b602082015290516100889190610480565b60405180910390f35b6100a461009f366004610590565b6100d6565b604080516001600160a01b039093168352602083019190915201610088565b6100a46100d13660046105e9565b6100f0565b6000806100e4858585610237565b91509150935093915050565b60008060008060008580602001905181019061010c9190610630565b50925092509250816001600160a01b0316836001600160a01b031614156101a557604051636be2be9560e01b81526004810188905283906001600160a01b03841690636be2be95906024015b602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610199919061068f565b94509450505050610230565b806001600160a01b0316836001600160a01b031614156101ee5760405163033f25cf60e11b81526004810188905283906001600160a01b0384169063067e4b9e90602401610158565b60405162461bcd60e51b81526020600482015260136024820152723ab735b737bbb71034b7383aba103a37b5b2b760691b604482015260640160405180910390fd5b9250929050565b600080600080600080868060200190518101906102549190610630565b9350935093509350826001600160a01b0316846001600160a01b031614156103b95760405163095ea7b360e01b81526001600160a01b038481166004830152602482018a90528a169063095ea7b3906044016020604051808303816000875af11580156102c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e991906106a8565b506040516367dfd4c960e01b8152600481018990526001600160a01b038416906367dfd4c9906024015b600060405180830381600087803b15801561032d57600080fd5b505af1158015610341573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015292975087926001600160a01b03841692506370a082319150602401602060405180830381865afa15801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b2919061068f565b9450610474565b816001600160a01b0316846001600160a01b031614156101ee5760405163095ea7b360e01b81526001600160a01b038481166004830152602482018a90528a169063095ea7b3906044016020604051808303816000875af1158015610422573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044691906106a8565b50604051632967cf8360e21b8152600481018990526001600160a01b0384169063a59f3e0c90602401610313565b50505050935093915050565b600060208083528351808285015260005b818110156104ad57858101830151858201604001528201610491565b818111156104bf576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146104ea57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261051457600080fd5b813567ffffffffffffffff8082111561052f5761052f6104ed565b604051601f8301601f19908116603f01168101908282118183101715610557576105576104ed565b8160405283815286602085880101111561057057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156105a557600080fd5b83356105b0816104d5565b925060208401359150604084013567ffffffffffffffff8111156105d357600080fd5b6105df86828701610503565b9150509250925092565b600080604083850312156105fc57600080fd5b82359150602083013567ffffffffffffffff81111561061a57600080fd5b61062685828601610503565b9150509250929050565b6000806000806080858703121561064657600080fd5b8451610651816104d5565b6020860151909450610662816104d5565b6040860151909350610673816104d5565b6060860151909250610684816104d5565b939692955090935050565b6000602082840312156106a157600080fd5b5051919050565b6000602082840312156106ba57600080fd5b815180151581146106ca57600080fd5b939250505056fea164736f6c634300080a000a";

type XBombLiquidatorFunderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XBombLiquidatorFunderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XBombLiquidatorFunder__factory extends ContractFactory {
  constructor(...args: XBombLiquidatorFunderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<XBombLiquidatorFunder> {
    return super.deploy(overrides || {}) as Promise<XBombLiquidatorFunder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): XBombLiquidatorFunder {
    return super.attach(address) as XBombLiquidatorFunder;
  }
  override connect(signer: Signer): XBombLiquidatorFunder__factory {
    return super.connect(signer) as XBombLiquidatorFunder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XBombLiquidatorFunderInterface {
    return new utils.Interface(_abi) as XBombLiquidatorFunderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XBombLiquidatorFunder {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as XBombLiquidatorFunder;
  }
}
