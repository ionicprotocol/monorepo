/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  XBombSwap,
  XBombSwapInterface,
} from "../../XBombLiquidatorFunder.sol/XBombSwap";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_testingBomb",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "_testingStable",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
      {
        name: "_oracle",
        type: "address",
        internalType: "contract MasterPriceOracle",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "enter",
    inputs: [
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getExchangeRate",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "leave",
    inputs: [
      {
        name: "_share",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "oracle",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract MasterPriceOracle",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "testingBomb",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "testingStable",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IERC20Upgradeable",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "toREWARD",
    inputs: [
      {
        name: "stakedAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "toSTAKED",
    inputs: [
      {
        name: "rewardAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161068c38038061068c83398101604081905261002f91610089565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100d6565b6001600160a01b038116811461008657600080fd5b50565b60008060006060848603121561009e57600080fd5b83516100a981610071565b60208501519093506100ba81610071565b60408501519092506100cb81610071565b809150509250925092565b6105a7806100e56000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637dc0d1d01161005b5780637dc0d1d014610106578063a59f3e0c14610119578063e6aa216c1461012c578063e80fbdd71461013a57600080fd5b8063067e4b9e1461008d5780630a003d5c146100b357806367dfd4c9146100de5780636be2be95146100f3575b600080fd5b6100a061009b3660046104f0565b61014d565b6040519081526020015b60405180910390f35b6001546100c6906001600160a01b031681565b6040516001600160a01b0390911681526020016100aa565b6100f16100ec3660046104f0565b610257565b005b6100a06101013660046104f0565b610361565b6002546100c6906001600160a01b031681565b6100f16101273660046104f0565b610459565b670de0b6b3a76400006100a0565b6000546100c6906001600160a01b031681565b600254600080546040516315d5220f60e31b81526001600160a01b0391821660048201529192839291169063aea9107890602401602060405180830381865afa15801561019e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c29190610509565b6002546001546040516315d5220f60e31b81526001600160a01b03918216600482015292935060009291169063aea9107890602401602060405180830381865afa158015610214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102389190610509565b9050806102458386610522565b61024f919061054f565b949350505050565b6000546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d29190610571565b506001546001600160a01b031663a9059cbb336102ee8461014d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610571565b5050565b600254600080546040516315d5220f60e31b81526001600160a01b0391821660048201529192839291169063aea9107890602401602060405180830381865afa1580156103b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d69190610509565b6002546001546040516315d5220f60e31b81526001600160a01b03918216600482015292935060009291169063aea9107890602401602060405180830381865afa158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c9190610509565b9050816102458286610522565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156104b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d49190610571565b506000546001600160a01b031663a9059cbb336102ee84610361565b60006020828403121561050257600080fd5b5035919050565b60006020828403121561051b57600080fd5b5051919050565b600081600019048311821515161561054a57634e487b7160e01b600052601160045260246000fd5b500290565b60008261056c57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561058357600080fd5b8151801515811461059357600080fd5b939250505056fea164736f6c634300080a000a";

type XBombSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: XBombSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class XBombSwap__factory extends ContractFactory {
  constructor(...args: XBombSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _testingBomb: string,
    _testingStable: string,
    _oracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<XBombSwap> {
    return super.deploy(
      _testingBomb,
      _testingStable,
      _oracle,
      overrides || {}
    ) as Promise<XBombSwap>;
  }
  override getDeployTransaction(
    _testingBomb: string,
    _testingStable: string,
    _oracle: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _testingBomb,
      _testingStable,
      _oracle,
      overrides || {}
    );
  }
  override attach(address: string): XBombSwap {
    return super.attach(address) as XBombSwap;
  }
  override connect(signer: Signer): XBombSwap__factory {
    return super.connect(signer) as XBombSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): XBombSwapInterface {
    return new utils.Interface(_abi) as XBombSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XBombSwap {
    return new Contract(address, _abi, signerOrProvider) as XBombSwap;
  }
}
