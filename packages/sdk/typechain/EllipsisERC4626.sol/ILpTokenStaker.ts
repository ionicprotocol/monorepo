/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ILpTokenStakerInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "claimableReward(address,address[])": FunctionFragment;
    "deposit(address,uint256,bool)": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "withdraw(address,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "claimableReward"
      | "deposit"
      | "poolInfo"
      | "rewardToken"
      | "userInfo"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimableReward",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface ILpTokenStaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILpTokenStakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimableReward(
      arg0: string,
      arg1: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    userInfo(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    arg0: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimableReward(
    arg0: string,
    arg1: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    _claimRewards: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  userInfo(
    _token: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  withdraw(
    _token: string,
    _amount: BigNumberish,
    _claimRewards: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimableReward(
      arg0: string,
      arg1: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    userInfo(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimableReward(
      arg0: string,
      arg1: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimableReward(
      arg0: string,
      arg1: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
