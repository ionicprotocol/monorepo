/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IRegistryInterface extends utils.Interface {
  functions: {
    "atomicUpdate(address)": FunctionFragment;
    "getAddress(bytes32)": FunctionFragment;
    "getAddressByString(string)": FunctionFragment;
    "importAddresses(bytes32[],address[])": FunctionFragment;
    "importContracts(address[])": FunctionFragment;
    "requireAndGetAddress(bytes32)": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "atomicUpdate"
      | "getAddress"
      | "getAddressByString"
      | "importAddresses"
      | "importContracts"
      | "requireAndGetAddress"
      | "stringToBytes32"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "atomicUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressByString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "importAddresses",
    values: [BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "importContracts",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requireAndGetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "atomicUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressByString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "importAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "importContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireAndGetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;

  events: {
    "LogRegistered(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogRegistered"): EventFragment;
}

export interface LogRegisteredEventObject {
  destination: string;
  name: string;
}
export type LogRegisteredEvent = TypedEvent<
  [string, string],
  LogRegisteredEventObject
>;

export type LogRegisteredEventFilter = TypedEventFilter<LogRegisteredEvent>;

export interface IRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    atomicUpdate(
      _newContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getAddressByString(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    importAddresses(
      _names: BytesLike[],
      _destinations: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    importContracts(
      _destinations: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    requireAndGetAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;
  };

  atomicUpdate(
    _newContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

  getAddressByString(_name: string, overrides?: CallOverrides): Promise<string>;

  importAddresses(
    _names: BytesLike[],
    _destinations: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  importContracts(
    _destinations: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  requireAndGetAddress(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  stringToBytes32(_string: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    atomicUpdate(
      _newContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

    getAddressByString(
      _name: string,
      overrides?: CallOverrides
    ): Promise<string>;

    importAddresses(
      _names: BytesLike[],
      _destinations: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    importContracts(
      _destinations: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    requireAndGetAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "LogRegistered(address,bytes32)"(
      destination?: string | null,
      name?: null
    ): LogRegisteredEventFilter;
    LogRegistered(
      destination?: string | null,
      name?: null
    ): LogRegisteredEventFilter;
  };

  estimateGas: {
    atomicUpdate(
      _newContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getAddressByString(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    importAddresses(
      _names: BytesLike[],
      _destinations: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    importContracts(
      _destinations: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    requireAndGetAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    atomicUpdate(
      _newContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressByString(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    importAddresses(
      _names: BytesLike[],
      _destinations: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    importContracts(
      _destinations: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    requireAndGetAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
