/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface UniswapTwapPriceOracleV2Interface extends utils.Interface {
  functions: {
    "baseToken()": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "price(address)": FunctionFragment;
    "rootOracle()": FunctionFragment;
    "uniswapV2Factory()": FunctionFragment;
    "wtoken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseToken"
      | "getUnderlyingPrice"
      | "initialize"
      | "price"
      | "rootOracle"
      | "uniswapV2Factory"
      | "wtoken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "price", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rootOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wtoken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wtoken", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UniswapTwapPriceOracleV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapTwapPriceOracleV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseToken(overrides?: CallOverrides): Promise<[string]>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _rootOracle: string,
      _uniswapV2Factory: string,
      _baseToken: string,
      _wtoken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    price(underlying: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rootOracle(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<[string]>;

    wtoken(overrides?: CallOverrides): Promise<[string]>;
  };

  baseToken(overrides?: CallOverrides): Promise<string>;

  getUnderlyingPrice(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _rootOracle: string,
    _uniswapV2Factory: string,
    _baseToken: string,
    _wtoken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  price(underlying: string, overrides?: CallOverrides): Promise<BigNumber>;

  rootOracle(overrides?: CallOverrides): Promise<string>;

  uniswapV2Factory(overrides?: CallOverrides): Promise<string>;

  wtoken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    baseToken(overrides?: CallOverrides): Promise<string>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _rootOracle: string,
      _uniswapV2Factory: string,
      _baseToken: string,
      _wtoken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    price(underlying: string, overrides?: CallOverrides): Promise<BigNumber>;

    rootOracle(overrides?: CallOverrides): Promise<string>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<string>;

    wtoken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _rootOracle: string,
      _uniswapV2Factory: string,
      _baseToken: string,
      _wtoken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    price(underlying: string, overrides?: CallOverrides): Promise<BigNumber>;

    rootOracle(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    wtoken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rootOracle: string,
      _uniswapV2Factory: string,
      _baseToken: string,
      _wtoken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    price(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wtoken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
