/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LeveredPositionFactoryFirstExtensionInterface
  extends utils.Interface {
  functions: {
    "_getExtensionFunctions()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "blocksPerYear()": FunctionFragment;
    "closeAndRemoveUserPosition(address)": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "getAccountsWithOpenPositions()": FunctionFragment;
    "getBorrowableMarketsByCollateral(address)": FunctionFragment;
    "getMinBorrowNative()": FunctionFragment;
    "getPositionsByAccount(address)": FunctionFragment;
    "getPositionsExtension(bytes4)": FunctionFragment;
    "getRedemptionStrategies(address,address)": FunctionFragment;
    "getWhitelistedCollateralMarkets()": FunctionFragment;
    "liquidatorsRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "removeClosedPosition(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_getExtensionFunctions"
      | "acceptOwnership"
      | "blocksPerYear"
      | "closeAndRemoveUserPosition"
      | "feeDistributor"
      | "getAccountsWithOpenPositions"
      | "getBorrowableMarketsByCollateral"
      | "getMinBorrowNative"
      | "getPositionsByAccount"
      | "getPositionsExtension"
      | "getRedemptionStrategies"
      | "getWhitelistedCollateralMarkets"
      | "liquidatorsRegistry"
      | "owner"
      | "pendingOwner"
      | "removeClosedPosition"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_getExtensionFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blocksPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeAndRemoveUserPosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountsWithOpenPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowableMarketsByCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBorrowNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionsExtension",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionStrategies",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedCollateralMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatorsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeClosedPosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getExtensionFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blocksPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAndRemoveUserPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountsWithOpenPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowableMarketsByCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBorrowNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionsExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedCollateralMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeClosedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LeveredPositionFactoryFirstExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeveredPositionFactoryFirstExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getExtensionFunctions(overrides?: CallOverrides): Promise<[string[]]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    blocksPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    closeAndRemoveUserPosition(
      position: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    getAccountsWithOpenPositions(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBorrowableMarketsByCollateral(
      _collateralMarket: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMinBorrowNative(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPositionsByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], boolean[]] & { positions: string[]; closed: boolean[] }
    >;

    getPositionsExtension(
      msgSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRedemptionStrategies(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { strategies: string[]; strategiesData: string[] }
    >;

    getWhitelistedCollateralMarkets(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    liquidatorsRegistry(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    removeClosedPosition(
      closedPosition: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  _getExtensionFunctions(overrides?: CallOverrides): Promise<string[]>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  closeAndRemoveUserPosition(
    position: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  getAccountsWithOpenPositions(overrides?: CallOverrides): Promise<string[]>;

  getBorrowableMarketsByCollateral(
    _collateralMarket: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMinBorrowNative(overrides?: CallOverrides): Promise<BigNumber>;

  getPositionsByAccount(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], boolean[]] & { positions: string[]; closed: boolean[] }
  >;

  getPositionsExtension(
    msgSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRedemptionStrategies(
    inputToken: string,
    outputToken: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & { strategies: string[]; strategiesData: string[] }
  >;

  getWhitelistedCollateralMarkets(overrides?: CallOverrides): Promise<string[]>;

  liquidatorsRegistry(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  removeClosedPosition(
    closedPosition: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    _getExtensionFunctions(overrides?: CallOverrides): Promise<string[]>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    closeAndRemoveUserPosition(
      position: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    getAccountsWithOpenPositions(overrides?: CallOverrides): Promise<string[]>;

    getBorrowableMarketsByCollateral(
      _collateralMarket: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMinBorrowNative(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionsByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], boolean[]] & { positions: string[]; closed: boolean[] }
    >;

    getPositionsExtension(
      msgSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRedemptionStrategies(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { strategies: string[]; strategiesData: string[] }
    >;

    getWhitelistedCollateralMarkets(
      overrides?: CallOverrides
    ): Promise<string[]>;

    liquidatorsRegistry(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    removeClosedPosition(
      closedPosition: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _getExtensionFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    blocksPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    closeAndRemoveUserPosition(
      position: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountsWithOpenPositions(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowableMarketsByCollateral(
      _collateralMarket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinBorrowNative(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionsByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionsExtension(
      msgSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionStrategies(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedCollateralMarkets(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatorsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    removeClosedPosition(
      closedPosition: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getExtensionFunctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    blocksPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeAndRemoveUserPosition(
      position: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountsWithOpenPositions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowableMarketsByCollateral(
      _collateralMarket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinBorrowNative(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionsByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionsExtension(
      msgSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionStrategies(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedCollateralMarkets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatorsRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeClosedPosition(
      closedPosition: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
