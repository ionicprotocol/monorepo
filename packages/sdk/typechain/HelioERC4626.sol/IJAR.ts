/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IJARInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "exitDelay()": FunctionFragment;
    "join(uint256)": FunctionFragment;
    "replenish(uint256,bool)": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "setExitDelay(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balanceOf"
      | "earned"
      | "exit"
      | "exitDelay"
      | "join"
      | "replenish"
      | "rewards"
      | "setExitDelay"
      | "totalSupply"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "exitDelay", values?: undefined): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "replenish",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setExitDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "replenish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IJAR extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IJARInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    exit(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exitDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    join(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    replenish(
      wad: BigNumberish,
      newSpread: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setExitDelay(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  exit(
    wad: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exitDelay(overrides?: CallOverrides): Promise<BigNumber>;

  join(
    wad: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  replenish(
    wad: BigNumberish,
    newSpread: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setExitDelay(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    exit(wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    exitDelay(overrides?: CallOverrides): Promise<BigNumber>;

    join(wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    replenish(
      wad: BigNumberish,
      newSpread: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setExitDelay(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    earned(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exitDelay(overrides?: CallOverrides): Promise<BigNumber>;

    join(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    replenish(
      wad: BigNumberish,
      newSpread: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setExitDelay(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exitDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    replenish(
      wad: BigNumberish,
      newSpread: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExitDelay(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
