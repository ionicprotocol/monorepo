/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace PoolDirectory {
  export type PoolStruct = {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumberish;
    timestampPosted: BigNumberish;
  };

  export type PoolStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    creator: string;
    comptroller: string;
    blockPosted: BigNumber;
    timestampPosted: BigNumber;
  };
}

export interface PoolDirectoryInterface extends utils.Interface {
  functions: {
    "_acceptOwner()": FunctionFragment;
    "_deprecatePool(address)": FunctionFragment;
    "_deprecatePool(uint256)": FunctionFragment;
    "_editAdminWhitelist(address[],bool)": FunctionFragment;
    "_editDeployerWhitelist(address[],bool)": FunctionFragment;
    "_setDeployerWhitelistEnforcement(bool)": FunctionFragment;
    "_setPendingOwner(address)": FunctionFragment;
    "adminWhitelist(address)": FunctionFragment;
    "deployPool(string,address,bytes,bool,uint256,uint256,address)": FunctionFragment;
    "deployerWhitelist(address)": FunctionFragment;
    "enforceDeployerWhitelist()": FunctionFragment;
    "getActivePools()": FunctionFragment;
    "getAllPools()": FunctionFragment;
    "getPoolsByAccount(address)": FunctionFragment;
    "getPoolsOfUser(address)": FunctionFragment;
    "getPublicPools()": FunctionFragment;
    "getPublicPoolsByVerification(bool)": FunctionFragment;
    "getVerifiedPoolsOfWhitelistedAccount(address)": FunctionFragment;
    "initialize(bool,address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "poolExists(address)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "poolsCounter()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPoolName(uint256,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_acceptOwner"
      | "_deprecatePool(address)"
      | "_deprecatePool(uint256)"
      | "_editAdminWhitelist"
      | "_editDeployerWhitelist"
      | "_setDeployerWhitelistEnforcement"
      | "_setPendingOwner"
      | "adminWhitelist"
      | "deployPool"
      | "deployerWhitelist"
      | "enforceDeployerWhitelist"
      | "getActivePools"
      | "getAllPools"
      | "getPoolsByAccount"
      | "getPoolsOfUser"
      | "getPublicPools"
      | "getPublicPoolsByVerification"
      | "getVerifiedPoolsOfWhitelistedAccount"
      | "initialize"
      | "owner"
      | "pendingOwner"
      | "poolExists"
      | "pools"
      | "poolsCounter"
      | "renounceOwnership"
      | "setPoolName"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_acceptOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_deprecatePool(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_deprecatePool(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_editAdminWhitelist",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_editDeployerWhitelist",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setDeployerWhitelistEnforcement",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPendingOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [
      string,
      string,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployerWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enforceDeployerWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsOfUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicPoolsByVerification",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedPoolsOfWhitelistedAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [boolean, string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolExists", values: [string]): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "poolsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_acceptOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_deprecatePool(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_deprecatePool(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_editAdminWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_editDeployerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setDeployerWhitelistEnforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforceDeployerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicPoolsByVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedPoolsOfWhitelistedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AdminWhitelistUpdated(address[],bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewOwner(address,address)": EventFragment;
    "NewPendingOwner(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolRegistered(uint256,(string,address,address,uint256,uint256))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminWhitelistUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRegistered"): EventFragment;
}

export interface AdminWhitelistUpdatedEventObject {
  admins: string[];
  status: boolean;
}
export type AdminWhitelistUpdatedEvent = TypedEvent<
  [string[], boolean],
  AdminWhitelistUpdatedEventObject
>;

export type AdminWhitelistUpdatedEventFilter =
  TypedEventFilter<AdminWhitelistUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewOwnerEventObject {
  oldOwner: string;
  newOwner: string;
}
export type NewOwnerEvent = TypedEvent<[string, string], NewOwnerEventObject>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export interface NewPendingOwnerEventObject {
  oldPendingOwner: string;
  newPendingOwner: string;
}
export type NewPendingOwnerEvent = TypedEvent<
  [string, string],
  NewPendingOwnerEventObject
>;

export type NewPendingOwnerEventFilter = TypedEventFilter<NewPendingOwnerEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolRegisteredEventObject {
  index: BigNumber;
  pool: PoolDirectory.PoolStructOutput;
}
export type PoolRegisteredEvent = TypedEvent<
  [BigNumber, PoolDirectory.PoolStructOutput],
  PoolRegisteredEventObject
>;

export type PoolRegisteredEventFilter = TypedEventFilter<PoolRegisteredEvent>;

export interface PoolDirectory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolDirectoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _acceptOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "_deprecatePool(address)"(
      comptroller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "_deprecatePool(uint256)"(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _editAdminWhitelist(
      admins: string[],
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _editDeployerWhitelist(
      deployers: string[],
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setDeployerWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setPendingOwner(
      newPendingOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deployPool(
      name: string,
      implementation: string,
      constructorData: BytesLike,
      enforceWhitelist: boolean,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployerWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    enforceDeployerWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    getActivePools(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getAllPools(
      overrides?: CallOverrides
    ): Promise<[PoolDirectory.PoolStructOutput[]]>;

    getPoolsByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getPoolsOfUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getPublicPools(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getPublicPoolsByVerification(
      whitelistedAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getVerifiedPoolsOfWhitelistedAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        name: string;
        creator: string;
        comptroller: string;
        blockPosted: BigNumber;
        timestampPosted: BigNumber;
      }
    >;

    poolsCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPoolName(
      index: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  _acceptOwner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "_deprecatePool(address)"(
    comptroller: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "_deprecatePool(uint256)"(
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _editAdminWhitelist(
    admins: string[],
    status: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _editDeployerWhitelist(
    deployers: string[],
    status: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setDeployerWhitelistEnforcement(
    enforce: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setPendingOwner(
    newPendingOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deployPool(
    name: string,
    implementation: string,
    constructorData: BytesLike,
    enforceWhitelist: boolean,
    closeFactor: BigNumberish,
    liquidationIncentive: BigNumberish,
    priceOracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployerWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  enforceDeployerWhitelist(overrides?: CallOverrides): Promise<boolean>;

  getActivePools(
    overrides?: CallOverrides
  ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

  getAllPools(
    overrides?: CallOverrides
  ): Promise<PoolDirectory.PoolStructOutput[]>;

  getPoolsByAccount(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

  getPoolsOfUser(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

  getPublicPools(
    overrides?: CallOverrides
  ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

  getPublicPoolsByVerification(
    whitelistedAdmin: boolean,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

  getVerifiedPoolsOfWhitelistedAccount(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

  initialize(
    _enforceDeployerWhitelist: boolean,
    _deployerWhitelist: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  poolExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      name: string;
      creator: string;
      comptroller: string;
      blockPosted: BigNumber;
      timestampPosted: BigNumber;
    }
  >;

  poolsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPoolName(
    index: BigNumberish,
    name: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    _acceptOwner(overrides?: CallOverrides): Promise<void>;

    "_deprecatePool(address)"(
      comptroller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "_deprecatePool(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _editAdminWhitelist(
      admins: string[],
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    _editDeployerWhitelist(
      deployers: string[],
      status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    _setDeployerWhitelistEnforcement(
      enforce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    _setPendingOwner(
      newPendingOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deployPool(
      name: string,
      implementation: string,
      constructorData: BytesLike,
      enforceWhitelist: boolean,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      priceOracle: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    deployerWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enforceDeployerWhitelist(overrides?: CallOverrides): Promise<boolean>;

    getActivePools(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getAllPools(
      overrides?: CallOverrides
    ): Promise<PoolDirectory.PoolStructOutput[]>;

    getPoolsByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getPoolsOfUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getPublicPools(
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getPublicPoolsByVerification(
      whitelistedAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    getVerifiedPoolsOfWhitelistedAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], PoolDirectory.PoolStructOutput[]]>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        name: string;
        creator: string;
        comptroller: string;
        blockPosted: BigNumber;
        timestampPosted: BigNumber;
      }
    >;

    poolsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPoolName(
      index: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminWhitelistUpdated(address[],bool)"(
      admins?: null,
      status?: null
    ): AdminWhitelistUpdatedEventFilter;
    AdminWhitelistUpdated(
      admins?: null,
      status?: null
    ): AdminWhitelistUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewOwner(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): NewOwnerEventFilter;
    NewOwner(oldOwner?: null, newOwner?: null): NewOwnerEventFilter;

    "NewPendingOwner(address,address)"(
      oldPendingOwner?: null,
      newPendingOwner?: null
    ): NewPendingOwnerEventFilter;
    NewPendingOwner(
      oldPendingOwner?: null,
      newPendingOwner?: null
    ): NewPendingOwnerEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PoolRegistered(uint256,(string,address,address,uint256,uint256))"(
      index?: null,
      pool?: null
    ): PoolRegisteredEventFilter;
    PoolRegistered(index?: null, pool?: null): PoolRegisteredEventFilter;
  };

  estimateGas: {
    _acceptOwner(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "_deprecatePool(address)"(
      comptroller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "_deprecatePool(uint256)"(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _editAdminWhitelist(
      admins: string[],
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _editDeployerWhitelist(
      deployers: string[],
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setDeployerWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setPendingOwner(
      newPendingOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adminWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployPool(
      name: string,
      implementation: string,
      constructorData: BytesLike,
      enforceWhitelist: boolean,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployerWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforceDeployerWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    getActivePools(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolsByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolsOfUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPublicPools(overrides?: CallOverrides): Promise<BigNumber>;

    getPublicPoolsByVerification(
      whitelistedAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifiedPoolsOfWhitelistedAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    poolExists(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPoolName(
      index: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _acceptOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "_deprecatePool(address)"(
      comptroller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "_deprecatePool(uint256)"(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _editAdminWhitelist(
      admins: string[],
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _editDeployerWhitelist(
      deployers: string[],
      status: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setDeployerWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setPendingOwner(
      newPendingOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adminWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployPool(
      name: string,
      implementation: string,
      constructorData: BytesLike,
      enforceWhitelist: boolean,
      closeFactor: BigNumberish,
      liquidationIncentive: BigNumberish,
      priceOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployerWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforceDeployerWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivePools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolsByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolsOfUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPublicPoolsByVerification(
      whitelistedAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifiedPoolsOfWhitelistedAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _enforceDeployerWhitelist: boolean,
      _deployerWhitelist: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolExists(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolsCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPoolName(
      index: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
