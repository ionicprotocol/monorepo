/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ILiquidatorsRegistryExtensionInterface
  extends utils.Interface {
  functions: {
    "amountOutAndSlippageOfSwap(address,uint256,address)": FunctionFragment;
    "getAllRedemptionStrategies()": FunctionFragment;
    "getInputTokensByOutputToken(address)": FunctionFragment;
    "getRedemptionStrategies(address,address)": FunctionFragment;
    "getRedemptionStrategy(address,address)": FunctionFragment;
    "getSlippage(address,address)": FunctionFragment;
    "swap(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amountOutAndSlippageOfSwap"
      | "getAllRedemptionStrategies"
      | "getInputTokensByOutputToken"
      | "getRedemptionStrategies"
      | "getRedemptionStrategy"
      | "getSlippage"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountOutAndSlippageOfSwap",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRedemptionStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInputTokensByOutputToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionStrategies",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionStrategy",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSlippage",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "amountOutAndSlippageOfSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRedemptionStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputTokensByOutputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface ILiquidatorsRegistryExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidatorsRegistryExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountOutAndSlippageOfSwap(
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllRedemptionStrategies(overrides?: CallOverrides): Promise<[string[]]>;

    getInputTokensByOutputToken(
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRedemptionStrategies(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { strategies: string[]; strategiesData: string[] }
    >;

    getRedemptionStrategy(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { strategy: string; strategyData: string }>;

    getSlippage(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { slippage: BigNumber }>;

    swap(
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  amountOutAndSlippageOfSwap(
    inputToken: string,
    inputAmount: BigNumberish,
    outputToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllRedemptionStrategies(overrides?: CallOverrides): Promise<string[]>;

  getInputTokensByOutputToken(
    outputToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRedemptionStrategies(
    inputToken: string,
    outputToken: string,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[]] & { strategies: string[]; strategiesData: string[] }
  >;

  getRedemptionStrategy(
    inputToken: string,
    outputToken: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { strategy: string; strategyData: string }>;

  getSlippage(
    inputToken: string,
    outputToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swap(
    inputToken: string,
    inputAmount: BigNumberish,
    outputToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    amountOutAndSlippageOfSwap(
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { outputAmount: BigNumber; slippage: BigNumber }
    >;

    getAllRedemptionStrategies(overrides?: CallOverrides): Promise<string[]>;

    getInputTokensByOutputToken(
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRedemptionStrategies(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[]] & { strategies: string[]; strategiesData: string[] }
    >;

    getRedemptionStrategy(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { strategy: string; strategyData: string }>;

    getSlippage(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    amountOutAndSlippageOfSwap(
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllRedemptionStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    getInputTokensByOutputToken(
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionStrategies(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionStrategy(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlippage(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountOutAndSlippageOfSwap(
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllRedemptionStrategies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInputTokensByOutputToken(
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionStrategies(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionStrategy(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlippage(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      inputToken: string,
      inputAmount: BigNumberish,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
