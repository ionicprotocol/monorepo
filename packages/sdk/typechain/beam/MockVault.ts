/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MockVaultInterface extends utils.Interface {
  functions: {
    "MAXIMUM_DEPOSIT_FEE_RATE()": FunctionFragment;
    "MAXIMUM_HARVEST_INTERVAL()": FunctionFragment;
    "add(uint256,address,uint16,uint256,address[])": FunctionFragment;
    "beam()": FunctionFragment;
    "beamPerSec()": FunctionFragment;
    "beamShareAddress()": FunctionFragment;
    "beamSharePercent()": FunctionFragment;
    "canHarvest(uint256,address)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "totalBeamInPools()": FunctionFragment;
    "totalLockedUpRewards()": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAXIMUM_DEPOSIT_FEE_RATE"
      | "MAXIMUM_HARVEST_INTERVAL"
      | "add"
      | "beam"
      | "beamPerSec"
      | "beamShareAddress"
      | "beamSharePercent"
      | "canHarvest"
      | "deposit"
      | "feeAddress"
      | "poolInfo"
      | "startTimestamp"
      | "totalAllocPoint"
      | "totalBeamInPools"
      | "totalLockedUpRewards"
      | "userInfo"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAXIMUM_DEPOSIT_FEE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_HARVEST_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "beam", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beamPerSec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beamShareAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beamSharePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canHarvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBeamInPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedUpRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAXIMUM_DEPOSIT_FEE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_HARVEST_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beamPerSec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beamShareAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beamSharePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canHarvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBeamInPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedUpRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface MockVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<[number]>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    beam(overrides?: CallOverrides): Promise<[string]>;

    beamPerSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    beamShareAddress(overrides?: CallOverrides): Promise<[string]>;

    beamSharePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    canHarvest(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accBeamPerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        totalLp: BigNumber;
      }
    >;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBeamInPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<number>;

  MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _depositFeeBP: BigNumberish,
    _harvestInterval: BigNumberish,
    _rewarders: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  beam(overrides?: CallOverrides): Promise<string>;

  beamPerSec(overrides?: CallOverrides): Promise<BigNumber>;

  beamShareAddress(overrides?: CallOverrides): Promise<string>;

  beamSharePercent(overrides?: CallOverrides): Promise<BigNumber>;

  canHarvest(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardTimestamp: BigNumber;
      accBeamPerShare: BigNumber;
      depositFeeBP: number;
      harvestInterval: BigNumber;
      totalLp: BigNumber;
    }
  >;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  totalBeamInPools(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardLockedUp: BigNumber;
      nextHarvestUntil: BigNumber;
    }
  >;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<number>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    beam(overrides?: CallOverrides): Promise<string>;

    beamPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    beamShareAddress(overrides?: CallOverrides): Promise<string>;

    beamSharePercent(overrides?: CallOverrides): Promise<BigNumber>;

    canHarvest(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardTimestamp: BigNumber;
        accBeamPerShare: BigNumber;
        depositFeeBP: number;
        harvestInterval: BigNumber;
        totalLp: BigNumber;
      }
    >;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalBeamInPools(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardLockedUp: BigNumber;
        nextHarvestUntil: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    MAXIMUM_DEPOSIT_FEE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_HARVEST_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    beam(overrides?: CallOverrides): Promise<BigNumber>;

    beamPerSec(overrides?: CallOverrides): Promise<BigNumber>;

    beamShareAddress(overrides?: CallOverrides): Promise<BigNumber>;

    beamSharePercent(overrides?: CallOverrides): Promise<BigNumber>;

    canHarvest(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    totalBeamInPools(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedUpRewards(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAXIMUM_DEPOSIT_FEE_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAXIMUM_HARVEST_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _depositFeeBP: BigNumberish,
      _harvestInterval: BigNumberish,
      _rewarders: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    beam(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beamPerSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beamShareAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beamSharePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canHarvest(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBeamInPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedUpRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
