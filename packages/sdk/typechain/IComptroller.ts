/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IComptrollerInterface extends utils.Interface {
  functions: {
    "_become(address)": FunctionFragment;
    "_deployMarket(bool,bytes,bytes,uint256)": FunctionFragment;
    "_setCloseFactor(uint256)": FunctionFragment;
    "_setCollateralFactor(address,uint256)": FunctionFragment;
    "_setLiquidationIncentive(uint256)": FunctionFragment;
    "_setPriceOracle(address)": FunctionFragment;
    "_setWhitelistEnforcement(bool)": FunctionFragment;
    "_setWhitelistStatuses(address[],bool[])": FunctionFragment;
    "_toggleAutoImplementations(bool)": FunctionFragment;
    "admin()": FunctionFragment;
    "adminHasRights()": FunctionFragment;
    "autoImplementation()": FunctionFragment;
    "borrowCapForCollateral(address,address)": FunctionFragment;
    "borrowCaps(address)": FunctionFragment;
    "borrowGuardianPaused(address)": FunctionFragment;
    "borrowingAgainstCollateralBlacklist(address,address)": FunctionFragment;
    "checkMembership(address,address)": FunctionFragment;
    "closeFactorMantissa()": FunctionFragment;
    "enforceWhitelist()": FunctionFragment;
    "enterMarkets(address[])": FunctionFragment;
    "exitMarket(address)": FunctionFragment;
    "getAccountLiquidity(address)": FunctionFragment;
    "getAllBorrowers()": FunctionFragment;
    "getAllMarkets()": FunctionFragment;
    "getAssetsIn(address)": FunctionFragment;
    "getHypotheticalAccountLiquidity(address,address,uint256,uint256,uint256)": FunctionFragment;
    "getMaxRedeemOrBorrow(address,address,bool)": FunctionFragment;
    "getRewardsDistributors()": FunctionFragment;
    "getWhitelistedBorrowersBorrows(address)": FunctionFragment;
    "getWhitelistedSuppliersSupply(address)": FunctionFragment;
    "ionicAdminHasRights()": FunctionFragment;
    "isDeprecated(address)": FunctionFragment;
    "isUserOfPool(address)": FunctionFragment;
    "liquidationIncentiveMantissa()": FunctionFragment;
    "markets(address)": FunctionFragment;
    "mintGuardianPaused(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pauseGuardian()": FunctionFragment;
    "suppliers(address)": FunctionFragment;
    "supplyCaps(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_become"
      | "_deployMarket"
      | "_setCloseFactor"
      | "_setCollateralFactor"
      | "_setLiquidationIncentive"
      | "_setPriceOracle"
      | "_setWhitelistEnforcement"
      | "_setWhitelistStatuses"
      | "_toggleAutoImplementations"
      | "admin"
      | "adminHasRights"
      | "autoImplementation"
      | "borrowCapForCollateral"
      | "borrowCaps"
      | "borrowGuardianPaused"
      | "borrowingAgainstCollateralBlacklist"
      | "checkMembership"
      | "closeFactorMantissa"
      | "enforceWhitelist"
      | "enterMarkets"
      | "exitMarket"
      | "getAccountLiquidity"
      | "getAllBorrowers"
      | "getAllMarkets"
      | "getAssetsIn"
      | "getHypotheticalAccountLiquidity"
      | "getMaxRedeemOrBorrow"
      | "getRewardsDistributors"
      | "getWhitelistedBorrowersBorrows"
      | "getWhitelistedSuppliersSupply"
      | "ionicAdminHasRights"
      | "isDeprecated"
      | "isUserOfPool"
      | "liquidationIncentiveMantissa"
      | "markets"
      | "mintGuardianPaused"
      | "oracle"
      | "pauseGuardian"
      | "suppliers"
      | "supplyCaps"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_become", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_deployMarket",
    values: [boolean, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCloseFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCollateralFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setLiquidationIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setWhitelistEnforcement",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setWhitelistStatuses",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_toggleAutoImplementations",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminHasRights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCapForCollateral",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "borrowCaps", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowGuardianPaused",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowingAgainstCollateralBlacklist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMembership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enforceWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "exitMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAccountLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBorrowers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAssetsIn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxRedeemOrBorrow",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsDistributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedBorrowersBorrows",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedSuppliersSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ionicAdminHasRights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeprecated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserOfPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "markets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintGuardianPaused",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "suppliers", values: [string]): string;
  encodeFunctionData(functionFragment: "supplyCaps", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(functionFragment: "_become", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_deployMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCloseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setWhitelistEnforcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setWhitelistStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_toggleAutoImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminHasRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowCapForCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowingAgainstCollateralBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforceWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxRedeemOrBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedBorrowersBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedSuppliersSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ionicAdminHasRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "suppliers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyCaps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {};
}

export interface IComptroller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IComptrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _deployMarket(
      isCEther: boolean,
      constructorData: BytesLike,
      becomeImplData: BytesLike,
      collateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setCollateralFactor(
      market: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setWhitelistStatuses(
      _suppliers: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _toggleAutoImplementations(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    adminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    autoImplementation(overrides?: CallOverrides): Promise<[boolean]>;

    borrowCapForCollateral(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowCaps(cToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    borrowingAgainstCollateralBlacklist(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkMembership(
      account: string,
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    enforceWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    enterMarkets(
      cTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exitMarket(
      cTokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllBorrowers(overrides?: CallOverrides): Promise<[string[]]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetsIn(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxRedeemOrBorrow(
      account: string,
      cTokenModify: string,
      isBorrow: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<[string[]]>;

    getWhitelistedBorrowersBorrows(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { borrowed: BigNumber }>;

    getWhitelistedSuppliersSupply(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supplied: BigNumber }>;

    ionicAdminHasRights(overrides?: CallOverrides): Promise<[boolean]>;

    isDeprecated(cToken: string, overrides?: CallOverrides): Promise<[boolean]>;

    isUserOfPool(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    markets(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    mintGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    suppliers(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    supplyCaps(cToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelist(account: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  _become(
    unitroller: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _deployMarket(
    isCEther: boolean,
    constructorData: BytesLike,
    becomeImplData: BytesLike,
    collateralFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setCloseFactor(
    newCloseFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setCollateralFactor(
    market: string,
    newCollateralFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentiveMantissa: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    newOracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setWhitelistEnforcement(
    enforce: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setWhitelistStatuses(
    _suppliers: string[],
    statuses: boolean[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _toggleAutoImplementations(
    enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  adminHasRights(overrides?: CallOverrides): Promise<boolean>;

  autoImplementation(overrides?: CallOverrides): Promise<boolean>;

  borrowCapForCollateral(
    borrowed: string,
    collateral: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowGuardianPaused(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  borrowingAgainstCollateralBlacklist(
    borrowed: string,
    collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkMembership(
    account: string,
    cToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  enforceWhitelist(overrides?: CallOverrides): Promise<boolean>;

  enterMarkets(
    cTokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exitMarket(
    cTokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getAllBorrowers(overrides?: CallOverrides): Promise<string[]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAssetsIn(account: string, overrides?: CallOverrides): Promise<string[]>;

  getHypotheticalAccountLiquidity(
    account: string,
    cTokenModify: string,
    redeemTokens: BigNumberish,
    borrowAmount: BigNumberish,
    repayAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMaxRedeemOrBorrow(
    account: string,
    cTokenModify: string,
    isBorrow: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsDistributors(overrides?: CallOverrides): Promise<string[]>;

  getWhitelistedBorrowersBorrows(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWhitelistedSuppliersSupply(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ionicAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

  isDeprecated(cToken: string, overrides?: CallOverrides): Promise<boolean>;

  isUserOfPool(user: string, overrides?: CallOverrides): Promise<boolean>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  mintGuardianPaused(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  suppliers(account: string, overrides?: CallOverrides): Promise<boolean>;

  supplyCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  whitelist(account: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    _become(unitroller: string, overrides?: CallOverrides): Promise<void>;

    _deployMarket(
      isCEther: boolean,
      constructorData: BytesLike,
      becomeImplData: BytesLike,
      collateralFactorMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setCollateralFactor(
      market: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setWhitelistEnforcement(
      enforce: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setWhitelistStatuses(
      _suppliers: string[],
      statuses: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _toggleAutoImplementations(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    adminHasRights(overrides?: CallOverrides): Promise<boolean>;

    autoImplementation(overrides?: CallOverrides): Promise<boolean>;

    borrowCapForCollateral(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    borrowingAgainstCollateralBlacklist(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkMembership(
      account: string,
      cToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    enforceWhitelist(overrides?: CallOverrides): Promise<boolean>;

    enterMarkets(
      cTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    exitMarket(
      cTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllBorrowers(overrides?: CallOverrides): Promise<string[]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAssetsIn(account: string, overrides?: CallOverrides): Promise<string[]>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxRedeemOrBorrow(
      account: string,
      cTokenModify: string,
      isBorrow: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<string[]>;

    getWhitelistedBorrowersBorrows(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedSuppliersSupply(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ionicAdminHasRights(overrides?: CallOverrides): Promise<boolean>;

    isDeprecated(cToken: string, overrides?: CallOverrides): Promise<boolean>;

    isUserOfPool(user: string, overrides?: CallOverrides): Promise<boolean>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    mintGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    suppliers(account: string, overrides?: CallOverrides): Promise<boolean>;

    supplyCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(account: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _deployMarket(
      isCEther: boolean,
      constructorData: BytesLike,
      becomeImplData: BytesLike,
      collateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setCollateralFactor(
      market: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setWhitelistStatuses(
      _suppliers: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _toggleAutoImplementations(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    adminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    autoImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    borrowCapForCollateral(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowingAgainstCollateralBlacklist(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMembership(
      account: string,
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    enforceWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      cTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exitMarket(
      cTokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllBorrowers(overrides?: CallOverrides): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsIn(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxRedeemOrBorrow(
      account: string,
      cTokenModify: string,
      isBorrow: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistedBorrowersBorrows(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedSuppliersSupply(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ionicAdminHasRights(overrides?: CallOverrides): Promise<BigNumber>;

    isDeprecated(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    isUserOfPool(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    suppliers(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    supplyCaps(cToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(account: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _deployMarket(
      isCEther: boolean,
      constructorData: BytesLike,
      becomeImplData: BytesLike,
      collateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setCollateralFactor(
      market: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setWhitelistEnforcement(
      enforce: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setWhitelistStatuses(
      _suppliers: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _toggleAutoImplementations(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminHasRights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autoImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowCapForCollateral(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowCaps(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowingAgainstCollateralBlacklist(
      borrowed: string,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMembership(
      account: string,
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforceWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      cTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exitMarket(
      cTokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllBorrowers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsIn(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: string,
      cTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxRedeemOrBorrow(
      account: string,
      cTokenModify: string,
      isBorrow: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsDistributors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedBorrowersBorrows(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedSuppliersSupply(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ionicAdminHasRights(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeprecated(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserOfPool(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintGuardianPaused(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    suppliers(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplyCaps(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
