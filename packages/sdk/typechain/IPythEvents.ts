/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IPythEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "BatchPriceFeedUpdate(uint16,uint64)": EventFragment;
    "PriceFeedUpdate(bytes32,uint64,int64,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchPriceFeedUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdate"): EventFragment;
}

export interface BatchPriceFeedUpdateEventObject {
  chainId: number;
  sequenceNumber: BigNumber;
}
export type BatchPriceFeedUpdateEvent = TypedEvent<
  [number, BigNumber],
  BatchPriceFeedUpdateEventObject
>;

export type BatchPriceFeedUpdateEventFilter =
  TypedEventFilter<BatchPriceFeedUpdateEvent>;

export interface PriceFeedUpdateEventObject {
  id: string;
  publishTime: BigNumber;
  price: BigNumber;
  conf: BigNumber;
}
export type PriceFeedUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PriceFeedUpdateEventObject
>;

export type PriceFeedUpdateEventFilter = TypedEventFilter<PriceFeedUpdateEvent>;

export interface IPythEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPythEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BatchPriceFeedUpdate(uint16,uint64)"(
      chainId?: null,
      sequenceNumber?: null
    ): BatchPriceFeedUpdateEventFilter;
    BatchPriceFeedUpdate(
      chainId?: null,
      sequenceNumber?: null
    ): BatchPriceFeedUpdateEventFilter;

    "PriceFeedUpdate(bytes32,uint64,int64,uint64)"(
      id?: BytesLike | null,
      publishTime?: null,
      price?: null,
      conf?: null
    ): PriceFeedUpdateEventFilter;
    PriceFeedUpdate(
      id?: BytesLike | null,
      publishTime?: null,
      price?: null,
      conf?: null
    ): PriceFeedUpdateEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
