/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ILiquidator {
  export type LiquidateToTokensWithFlashSwapVarsStruct = {
    borrower: string;
    repayAmount: BigNumberish;
    cErc20: string;
    cTokenCollateral: string;
    flashSwapContract: string;
    minProfitAmount: BigNumberish;
    redemptionStrategies: string[];
    strategyData: BytesLike[];
    debtFundingStrategies: string[];
    debtFundingStrategiesData: BytesLike[];
  };

  export type LiquidateToTokensWithFlashSwapVarsStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    string[],
    string[],
    string[],
    string[]
  ] & {
    borrower: string;
    repayAmount: BigNumber;
    cErc20: string;
    cTokenCollateral: string;
    flashSwapContract: string;
    minProfitAmount: BigNumber;
    redemptionStrategies: string[];
    strategyData: string[];
    debtFundingStrategies: string[];
    debtFundingStrategiesData: string[];
  };
}

export interface ILiquidatorInterface extends utils.Interface {
  functions: {
    "_whitelistRedemptionStrategies(address[],bool[])": FunctionFragment;
    "_whitelistRedemptionStrategy(address,bool)": FunctionFragment;
    "redemptionStrategiesWhitelist(address)": FunctionFragment;
    "safeLiquidate(address,uint256,address,address,uint256)": FunctionFragment;
    "safeLiquidateToTokensWithFlashLoan((address,uint256,address,address,address,uint256,address[],bytes[],address[],bytes[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_whitelistRedemptionStrategies"
      | "_whitelistRedemptionStrategy"
      | "redemptionStrategiesWhitelist"
      | "safeLiquidate"
      | "safeLiquidateToTokensWithFlashLoan"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_whitelistRedemptionStrategies",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistRedemptionStrategy",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionStrategiesWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeLiquidate",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeLiquidateToTokensWithFlashLoan",
    values: [ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "_whitelistRedemptionStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistRedemptionStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionStrategiesWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLiquidateToTokensWithFlashLoan",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILiquidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _whitelistRedemptionStrategies(
      strategies: string[],
      whitelisted: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _whitelistRedemptionStrategy(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redemptionStrategiesWhitelist(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    safeLiquidate(
      borrower: string,
      repayAmount: BigNumberish,
      cErc20: string,
      cTokenCollateral: string,
      minOutputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeLiquidateToTokensWithFlashLoan(
      vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  _whitelistRedemptionStrategies(
    strategies: string[],
    whitelisted: boolean[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _whitelistRedemptionStrategy(
    strategy: string,
    whitelisted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redemptionStrategiesWhitelist(
    strategy: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  safeLiquidate(
    borrower: string,
    repayAmount: BigNumberish,
    cErc20: string,
    cTokenCollateral: string,
    minOutputAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeLiquidateToTokensWithFlashLoan(
    vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    _whitelistRedemptionStrategies(
      strategies: string[],
      whitelisted: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    _whitelistRedemptionStrategy(
      strategy: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionStrategiesWhitelist(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    safeLiquidate(
      borrower: string,
      repayAmount: BigNumberish,
      cErc20: string,
      cTokenCollateral: string,
      minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeLiquidateToTokensWithFlashLoan(
      vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _whitelistRedemptionStrategies(
      strategies: string[],
      whitelisted: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _whitelistRedemptionStrategy(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redemptionStrategiesWhitelist(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeLiquidate(
      borrower: string,
      repayAmount: BigNumberish,
      cErc20: string,
      cTokenCollateral: string,
      minOutputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeLiquidateToTokensWithFlashLoan(
      vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _whitelistRedemptionStrategies(
      strategies: string[],
      whitelisted: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _whitelistRedemptionStrategy(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redemptionStrategiesWhitelist(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeLiquidate(
      borrower: string,
      repayAmount: BigNumberish,
      cErc20: string,
      cTokenCollateral: string,
      minOutputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeLiquidateToTokensWithFlashLoan(
      vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
