/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IBalancerStablePoolInterface extends utils.Interface {
  functions: {
    "getActualSupply()": FunctionFragment;
    "getBptIndex()": FunctionFragment;
    "getPoolId()": FunctionFragment;
    "getRate()": FunctionFragment;
    "getRateProviders()": FunctionFragment;
    "getScalingFactros()": FunctionFragment;
    "getTokenRate(address)": FunctionFragment;
    "getVault()": FunctionFragment;
    "updateTokenRateCache(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getActualSupply"
      | "getBptIndex"
      | "getPoolId"
      | "getRate"
      | "getRateProviders"
      | "getScalingFactros"
      | "getTokenRate"
      | "getVault"
      | "updateTokenRateCache"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActualSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBptIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRateProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScalingFactros",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTokenRateCache",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getActualSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBptIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRateProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScalingFactros",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenRateCache",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBalancerStablePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBalancerStablePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getActualSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBptIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolId(overrides?: CallOverrides): Promise<[string]>;

    getRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRateProviders(overrides?: CallOverrides): Promise<[string[]]>;

    getScalingFactros(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTokenRate(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    updateTokenRateCache(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolId(overrides?: CallOverrides): Promise<string>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  getRateProviders(overrides?: CallOverrides): Promise<string[]>;

  getScalingFactros(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTokenRate(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  updateTokenRateCache(
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<string>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    getRateProviders(overrides?: CallOverrides): Promise<string[]>;

    getScalingFactros(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTokenRate(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    updateTokenRateCache(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getActualSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getBptIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    getRateProviders(overrides?: CallOverrides): Promise<BigNumber>;

    getScalingFactros(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRate(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    updateTokenRateCache(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getActualSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBptIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRateProviders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScalingFactros(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenRate(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTokenRateCache(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
