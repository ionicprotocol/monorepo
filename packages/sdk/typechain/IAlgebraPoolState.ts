/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IAlgebraPoolStateInterface extends utils.Interface {
  functions: {
    "activeIncentive()": FunctionFragment;
    "globalState()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "liquidityCooldown()": FunctionFragment;
    "positions(bytes32)": FunctionFragment;
    "tickTable(int16)": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "timepoints(uint256)": FunctionFragment;
    "totalFeeGrowth0Token()": FunctionFragment;
    "totalFeeGrowth1Token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeIncentive"
      | "globalState"
      | "liquidity"
      | "liquidityCooldown"
      | "positions"
      | "tickTable"
      | "ticks"
      | "timepoints"
      | "totalFeeGrowth0Token"
      | "totalFeeGrowth1Token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tickTable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "timepoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth0Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeeGrowth1Token",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tickTable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timepoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth0Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeeGrowth1Token",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAlgebraPoolState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAlgebraPoolStateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeIncentive(
      overrides?: CallOverrides
    ): Promise<[string] & { virtualPool: string }>;

    globalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        fee: number;
        timepointIndex: number;
        communityFeeToken0: number;
        communityFeeToken1: number;
        unlocked: boolean;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityCooldown(
      overrides?: CallOverrides
    ): Promise<[number] & { cooldownInSeconds: number }>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityAmount: BigNumber;
        lastLiquidityAddTimestamp: number;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    tickTable(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  activeIncentive(overrides?: CallOverrides): Promise<string>;

  globalState(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, boolean] & {
      price: BigNumber;
      tick: number;
      fee: number;
      timepointIndex: number;
      communityFeeToken0: number;
      communityFeeToken1: number;
      unlocked: boolean;
    }
  >;

  liquidity(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityCooldown(overrides?: CallOverrides): Promise<number>;

  positions(
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidityAmount: BigNumber;
      lastLiquidityAddTimestamp: number;
      innerFeeGrowth0Token: BigNumber;
      innerFeeGrowth1Token: BigNumber;
      fees0: BigNumber;
      fees1: BigNumber;
    }
  >;

  tickTable(
    wordPosition: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ticks(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      boolean
    ] & {
      liquidityTotal: BigNumber;
      liquidityDelta: BigNumber;
      outerFeeGrowth0Token: BigNumber;
      outerFeeGrowth1Token: BigNumber;
      outerTickCumulative: BigNumber;
      outerSecondsPerLiquidity: BigNumber;
      outerSecondsSpent: number;
      initialized: boolean;
    }
  >;

  timepoints(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      initialized: boolean;
      blockTimestamp: number;
      tickCumulative: BigNumber;
      secondsPerLiquidityCumulative: BigNumber;
      volatilityCumulative: BigNumber;
      averageTick: number;
      volumePerLiquidityCumulative: BigNumber;
    }
  >;

  totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

  totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    activeIncentive(overrides?: CallOverrides): Promise<string>;

    globalState(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, boolean] & {
        price: BigNumber;
        tick: number;
        fee: number;
        timepointIndex: number;
        communityFeeToken0: number;
        communityFeeToken1: number;
        unlocked: boolean;
      }
    >;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCooldown(overrides?: CallOverrides): Promise<number>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityAmount: BigNumber;
        lastLiquidityAddTimestamp: number;
        innerFeeGrowth0Token: BigNumber;
        innerFeeGrowth1Token: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
      }
    >;

    tickTable(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        boolean
      ] & {
        liquidityTotal: BigNumber;
        liquidityDelta: BigNumber;
        outerFeeGrowth0Token: BigNumber;
        outerFeeGrowth1Token: BigNumber;
        outerTickCumulative: BigNumber;
        outerSecondsPerLiquidity: BigNumber;
        outerSecondsSpent: number;
        initialized: boolean;
      }
    >;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        initialized: boolean;
        blockTimestamp: number;
        tickCumulative: BigNumber;
        secondsPerLiquidityCumulative: BigNumber;
        volatilityCumulative: BigNumber;
        averageTick: number;
        volumePerLiquidityCumulative: BigNumber;
      }
    >;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    activeIncentive(overrides?: CallOverrides): Promise<BigNumber>;

    globalState(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    positions(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tickTable(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticks(tick: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFeeGrowth0Token(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeeGrowth1Token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeIncentive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tickTable(
      wordPosition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticks(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timepoints(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFeeGrowth0Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFeeGrowth1Token(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
