/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ILiquidator {
  export type LiquidateToTokensWithFlashSwapVarsStruct = {
    borrower: string;
    repayAmount: BigNumberish;
    cErc20: string;
    cTokenCollateral: string;
    flashSwapContract: string;
    minProfitAmount: BigNumberish;
    redemptionStrategies: string[];
    strategyData: BytesLike[];
    debtFundingStrategies: string[];
    debtFundingStrategiesData: BytesLike[];
  };

  export type LiquidateToTokensWithFlashSwapVarsStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    string[],
    string[],
    string[],
    string[]
  ] & {
    borrower: string;
    repayAmount: BigNumber;
    cErc20: string;
    cTokenCollateral: string;
    flashSwapContract: string;
    minProfitAmount: BigNumber;
    redemptionStrategies: string[];
    strategyData: string[];
    debtFundingStrategies: string[];
    debtFundingStrategiesData: string[];
  };
}

export interface IonicLiquidatorInterface extends utils.Interface {
  functions: {
    "UNISWAP_V2_ROUTER_02()": FunctionFragment;
    "W_NATIVE_ADDRESS()": FunctionFragment;
    "_becomeImplementation(bytes)": FunctionFragment;
    "_whitelistRedemptionStrategies(address[],bool[])": FunctionFragment;
    "_whitelistRedemptionStrategy(address,bool)": FunctionFragment;
    "flashSwapFee()": FunctionFragment;
    "initialize(address,address,uint8)": FunctionFragment;
    "moraswapCall(address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeCall(address,uint256,uint256,bytes)": FunctionFragment;
    "redemptionStrategiesWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeLiquidate(address,uint256,address,address,uint256)": FunctionFragment;
    "safeLiquidateToTokensWithFlashLoan((address,uint256,address,address,address,uint256,address[],bytes[],address[],bytes[]))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Call(address,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UNISWAP_V2_ROUTER_02"
      | "W_NATIVE_ADDRESS"
      | "_becomeImplementation"
      | "_whitelistRedemptionStrategies"
      | "_whitelistRedemptionStrategy"
      | "flashSwapFee"
      | "initialize"
      | "moraswapCall"
      | "owner"
      | "pancakeCall"
      | "redemptionStrategiesWhitelist"
      | "renounceOwnership"
      | "safeLiquidate"
      | "safeLiquidateToTokensWithFlashLoan"
      | "transferOwnership"
      | "uniswapV2Call"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UNISWAP_V2_ROUTER_02",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "W_NATIVE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_becomeImplementation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistRedemptionStrategies",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistRedemptionStrategy",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "flashSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moraswapCall",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeCall",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionStrategiesWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeLiquidate",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeLiquidateToTokensWithFlashLoan",
    values: [ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Call",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UNISWAP_V2_ROUTER_02",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "W_NATIVE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_becomeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistRedemptionStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistRedemptionStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moraswapCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionStrategiesWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeLiquidateToTokensWithFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Call",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface IonicLiquidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IonicLiquidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UNISWAP_V2_ROUTER_02(overrides?: CallOverrides): Promise<[string]>;

    W_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    _becomeImplementation(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _whitelistRedemptionStrategies(
      strategies: string[],
      whitelisted: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _whitelistRedemptionStrategy(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    flashSwapFee(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      _wtoken: string,
      _uniswapV2router: string,
      _flashSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    moraswapCall(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeCall(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redemptionStrategiesWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeLiquidate(
      borrower: string,
      repayAmount: BigNumberish,
      cErc20: string,
      cTokenCollateral: string,
      minOutputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeLiquidateToTokensWithFlashLoan(
      vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uniswapV2Call(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  UNISWAP_V2_ROUTER_02(overrides?: CallOverrides): Promise<string>;

  W_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  _becomeImplementation(
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _whitelistRedemptionStrategies(
    strategies: string[],
    whitelisted: boolean[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _whitelistRedemptionStrategy(
    strategy: string,
    whitelisted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  flashSwapFee(overrides?: CallOverrides): Promise<number>;

  initialize(
    _wtoken: string,
    _uniswapV2router: string,
    _flashSwapFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  moraswapCall(
    sender: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeCall(
    sender: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redemptionStrategiesWhitelist(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeLiquidate(
    borrower: string,
    repayAmount: BigNumberish,
    cErc20: string,
    cTokenCollateral: string,
    minOutputAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeLiquidateToTokensWithFlashLoan(
    vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uniswapV2Call(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    UNISWAP_V2_ROUTER_02(overrides?: CallOverrides): Promise<string>;

    W_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    _becomeImplementation(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    _whitelistRedemptionStrategies(
      strategies: string[],
      whitelisted: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    _whitelistRedemptionStrategy(
      strategy: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    flashSwapFee(overrides?: CallOverrides): Promise<number>;

    initialize(
      _wtoken: string,
      _uniswapV2router: string,
      _flashSwapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    moraswapCall(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeCall(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionStrategiesWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeLiquidate(
      borrower: string,
      repayAmount: BigNumberish,
      cErc20: string,
      cTokenCollateral: string,
      minOutputAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeLiquidateToTokensWithFlashLoan(
      vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Call(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    UNISWAP_V2_ROUTER_02(overrides?: CallOverrides): Promise<BigNumber>;

    W_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    _becomeImplementation(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _whitelistRedemptionStrategies(
      strategies: string[],
      whitelisted: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _whitelistRedemptionStrategy(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    flashSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _wtoken: string,
      _uniswapV2router: string,
      _flashSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    moraswapCall(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeCall(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redemptionStrategiesWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeLiquidate(
      borrower: string,
      repayAmount: BigNumberish,
      cErc20: string,
      cTokenCollateral: string,
      minOutputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeLiquidateToTokensWithFlashLoan(
      vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uniswapV2Call(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    UNISWAP_V2_ROUTER_02(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    W_NATIVE_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _becomeImplementation(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _whitelistRedemptionStrategies(
      strategies: string[],
      whitelisted: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _whitelistRedemptionStrategy(
      strategy: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    flashSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _wtoken: string,
      _uniswapV2router: string,
      _flashSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    moraswapCall(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeCall(
      sender: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redemptionStrategiesWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeLiquidate(
      borrower: string,
      repayAmount: BigNumberish,
      cErc20: string,
      cTokenCollateral: string,
      minOutputAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeLiquidateToTokensWithFlashLoan(
      vars: ILiquidator.LiquidateToTokensWithFlashSwapVarsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uniswapV2Call(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
