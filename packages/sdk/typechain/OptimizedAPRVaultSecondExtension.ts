/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type VaultFeesStruct = {
  deposit: BigNumberish;
  withdrawal: BigNumberish;
  management: BigNumberish;
  performance: BigNumberish;
};

export type VaultFeesStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  deposit: BigNumber;
  withdrawal: BigNumber;
  management: BigNumber;
  performance: BigNumber;
};

export type AdapterConfigStruct = { adapter: string; allocation: BigNumberish };

export type AdapterConfigStructOutput = [string, BigNumber] & {
  adapter: string;
  allocation: BigNumber;
};

export interface OptimizedAPRVaultSecondExtensionInterface
  extends utils.Interface {
  functions: {
    "DECIMAL_OFFSET()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "_getExtensionFunctions()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "accruedManagementFee()": FunctionFragment;
    "accruedPerformanceFee()": FunctionFragment;
    "adapters(uint256)": FunctionFragment;
    "adaptersCount()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "assetsCheckpoint()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeAdapters()": FunctionFragment;
    "changeFees()": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToShares(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositLimit()": FunctionFragment;
    "emergencyExit()": FunctionFragment;
    "estimatedAPR()": FunctionFragment;
    "estimatedAPR(uint64[])": FunctionFragment;
    "estimatedTotalAssets()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "fees()": FunctionFragment;
    "feesUpdatedAt()": FunctionFragment;
    "flywheelForRewardToken(address)": FunctionFragment;
    "flywheelLogic()": FunctionFragment;
    "harvest(uint64[])": FunctionFragment;
    "highWaterMark()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lentTotalAssets()": FunctionFragment;
    "maxDeposit(address)": FunctionFragment;
    "maxMint(address)": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewMint(uint256)": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "proposeFees((uint64,uint64,uint64,uint64))": FunctionFragment;
    "proposedAdapterTime()": FunctionFragment;
    "proposedAdapters(uint256)": FunctionFragment;
    "proposedAdaptersCount()": FunctionFragment;
    "proposedFeeTime()": FunctionFragment;
    "proposedFees()": FunctionFragment;
    "pullAccruedVaultRewards()": FunctionFragment;
    "quitPeriod()": FunctionFragment;
    "redeem(uint256,address,address)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "setDepositLimit(uint256)": FunctionFragment;
    "setEmergencyExit()": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setQuitPeriod(uint256)": FunctionFragment;
    "supplyAPY(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "takeManagementAndPerformanceFees()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
    "withdrawalThreshold()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DECIMAL_OFFSET"
      | "DOMAIN_SEPARATOR"
      | "_getExtensionFunctions"
      | "acceptOwnership"
      | "accruedManagementFee"
      | "accruedPerformanceFee"
      | "adapters"
      | "adaptersCount"
      | "allowance"
      | "approve"
      | "asset"
      | "assetsCheckpoint"
      | "balanceOf"
      | "changeAdapters"
      | "changeFees"
      | "convertToAssets"
      | "convertToShares"
      | "decimals"
      | "decreaseAllowance"
      | "deposit(uint256,address)"
      | "deposit(uint256)"
      | "depositLimit"
      | "emergencyExit"
      | "estimatedAPR()"
      | "estimatedAPR(uint64[])"
      | "estimatedTotalAssets"
      | "feeRecipient"
      | "fees"
      | "feesUpdatedAt"
      | "flywheelForRewardToken"
      | "flywheelLogic"
      | "harvest"
      | "highWaterMark"
      | "increaseAllowance"
      | "lentTotalAssets"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "mint(uint256,address)"
      | "mint(uint256)"
      | "name"
      | "nonces"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "permit"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "proposeFees"
      | "proposedAdapterTime"
      | "proposedAdapters"
      | "proposedAdaptersCount"
      | "proposedFeeTime"
      | "proposedFees"
      | "pullAccruedVaultRewards"
      | "quitPeriod"
      | "redeem(uint256,address,address)"
      | "redeem(uint256)"
      | "registry"
      | "renounceOwnership"
      | "rewardTokens"
      | "setDepositLimit"
      | "setEmergencyExit"
      | "setFeeRecipient"
      | "setQuitPeriod"
      | "supplyAPY"
      | "symbol"
      | "takeManagementAndPerformanceFees"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "withdraw(uint256)"
      | "withdraw(uint256,address,address)"
      | "withdrawalThreshold"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DECIMAL_OFFSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getExtensionFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedManagementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedPerformanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adapters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adaptersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetsCheckpoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeAdapters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedAPR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedAPR(uint64[])",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feesUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flywheelForRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "flywheelLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "highWaterMark",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lentTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxDeposit", values: [string]): string;
  encodeFunctionData(functionFragment: "maxMint", values: [string]): string;
  encodeFunctionData(functionFragment: "maxRedeem", values: [string]): string;
  encodeFunctionData(functionFragment: "maxWithdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeFees",
    values: [VaultFeesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdapterTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdapters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAdaptersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedFeeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullAccruedVaultRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quitPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuitPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyAPY",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeManagementAndPerformanceFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,address,address)",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMAL_OFFSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getExtensionFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adapters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adaptersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetsCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedAPR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedAPR(uint64[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feesUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flywheelForRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flywheelLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highWaterMark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lentTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdapterTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdapters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAdaptersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedFeeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullAccruedVaultRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quitPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuitPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyAPY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeManagementAndPerformanceFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalThreshold",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ChangedAdapters((address,uint64)[10],uint8,(address,uint64)[10],uint8)": EventFragment;
    "ChangedFees((uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64))": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "DepositLimitSet(uint256)": EventFragment;
    "EmergencyExitActivated()": EventFragment;
    "FeeRecipientUpdated(address,address)": EventFragment;
    "Harvested(uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NewFeesProposed((uint64,uint64,uint64,uint64),uint256)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "QuitPeriodSet(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedAdapters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositLimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExitActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFeesProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuitPeriodSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ChangedAdaptersEventObject {
  oldAdapter: AdapterConfigStructOutput[];
  oldAdaptersCount: number;
  newAdapter: AdapterConfigStructOutput[];
  newAdaptersCount: number;
}
export type ChangedAdaptersEvent = TypedEvent<
  [AdapterConfigStructOutput[], number, AdapterConfigStructOutput[], number],
  ChangedAdaptersEventObject
>;

export type ChangedAdaptersEventFilter = TypedEventFilter<ChangedAdaptersEvent>;

export interface ChangedFeesEventObject {
  oldFees: VaultFeesStructOutput;
  newFees: VaultFeesStructOutput;
}
export type ChangedFeesEvent = TypedEvent<
  [VaultFeesStructOutput, VaultFeesStructOutput],
  ChangedFeesEventObject
>;

export type ChangedFeesEventFilter = TypedEventFilter<ChangedFeesEvent>;

export interface DepositEventObject {
  sender: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositLimitSetEventObject {
  depositLimit: BigNumber;
}
export type DepositLimitSetEvent = TypedEvent<
  [BigNumber],
  DepositLimitSetEventObject
>;

export type DepositLimitSetEventFilter = TypedEventFilter<DepositLimitSetEvent>;

export interface EmergencyExitActivatedEventObject {}
export type EmergencyExitActivatedEvent = TypedEvent<
  [],
  EmergencyExitActivatedEventObject
>;

export type EmergencyExitActivatedEventFilter =
  TypedEventFilter<EmergencyExitActivatedEvent>;

export interface FeeRecipientUpdatedEventObject {
  oldFeeRecipient: string;
  newFeeRecipient: string;
}
export type FeeRecipientUpdatedEvent = TypedEvent<
  [string, string],
  FeeRecipientUpdatedEventObject
>;

export type FeeRecipientUpdatedEventFilter =
  TypedEventFilter<FeeRecipientUpdatedEvent>;

export interface HarvestedEventObject {
  totalAssets: BigNumber;
  aprBefore: BigNumber;
  aprAfter: BigNumber;
}
export type HarvestedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  HarvestedEventObject
>;

export type HarvestedEventFilter = TypedEventFilter<HarvestedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NewFeesProposedEventObject {
  newFees: VaultFeesStructOutput;
  timestamp: BigNumber;
}
export type NewFeesProposedEvent = TypedEvent<
  [VaultFeesStructOutput, BigNumber],
  NewFeesProposedEventObject
>;

export type NewFeesProposedEventFilter = TypedEventFilter<NewFeesProposedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface QuitPeriodSetEventObject {
  quitPeriod: BigNumber;
}
export type QuitPeriodSetEvent = TypedEvent<
  [BigNumber],
  QuitPeriodSetEventObject
>;

export type QuitPeriodSetEventFilter = TypedEventFilter<QuitPeriodSetEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  sender: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface OptimizedAPRVaultSecondExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimizedAPRVaultSecondExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMAL_OFFSET(overrides?: CallOverrides): Promise<[number]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    _getExtensionFunctions(overrides?: CallOverrides): Promise<[string[]]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    accruedManagementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    accruedPerformanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    adapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapter: string; allocation: BigNumber }
    >;

    adaptersCount(overrides?: CallOverrides): Promise<[number]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeAdapters(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyExit(overrides?: CallOverrides): Promise<[boolean]>;

    "estimatedAPR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "estimatedAPR(uint64[])"(
      allocations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    fees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawal: BigNumber;
        management: BigNumber;
        performance: BigNumber;
      }
    >;

    feesUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    flywheelForRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    flywheelLogic(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      adapterAllocationsHint: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    highWaterMark(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lentTotalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRedeem(caller: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWithdraw(
      caller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    proposeFees(
      newFees: VaultFeesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposedAdapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapter: string; allocation: BigNumber }
    >;

    proposedAdaptersCount(overrides?: CallOverrides): Promise<[number]>;

    proposedFeeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposedFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawal: BigNumber;
        management: BigNumber;
        performance: BigNumber;
      }
    >;

    pullAccruedVaultRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    quitPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setDepositLimit(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEmergencyExit(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setQuitPeriod(
      _quitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supplyAPY(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    takeManagementAndPerformanceFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawalThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DECIMAL_OFFSET(overrides?: CallOverrides): Promise<number>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  _getExtensionFunctions(overrides?: CallOverrides): Promise<string[]>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  accruedManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

  accruedPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  adapters(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { adapter: string; allocation: BigNumber }>;

  adaptersCount(overrides?: CallOverrides): Promise<number>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeAdapters(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  convertToAssets(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256,address)"(
    assets: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    assets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyExit(overrides?: CallOverrides): Promise<boolean>;

  "estimatedAPR()"(overrides?: CallOverrides): Promise<BigNumber>;

  "estimatedAPR(uint64[])"(
    allocations: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[]]>;

  estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  fees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      deposit: BigNumber;
      withdrawal: BigNumber;
      management: BigNumber;
      performance: BigNumber;
    }
  >;

  feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  flywheelForRewardToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  flywheelLogic(overrides?: CallOverrides): Promise<string>;

  harvest(
    adapterAllocationsHint: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lentTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(caller: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(caller: string, overrides?: CallOverrides): Promise<BigNumber>;

  "mint(uint256,address)"(
    shares: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  previewDeposit(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposeFees(
    newFees: VaultFeesStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

  proposedAdapters(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { adapter: string; allocation: BigNumber }>;

  proposedAdaptersCount(overrides?: CallOverrides): Promise<number>;

  proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

  proposedFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      deposit: BigNumber;
      withdrawal: BigNumber;
      management: BigNumber;
      performance: BigNumber;
    }
  >;

  pullAccruedVaultRewards(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "redeem(uint256,address,address)"(
    shares: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  setDepositLimit(
    _depositLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEmergencyExit(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _feeRecipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setQuitPeriod(
    _quitPeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supplyAPY(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  takeManagementAndPerformanceFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    assets: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,address)"(
    assets: BigNumberish,
    receiver: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DECIMAL_OFFSET(overrides?: CallOverrides): Promise<number>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    _getExtensionFunctions(overrides?: CallOverrides): Promise<string[]>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accruedManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    accruedPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    adapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapter: string; allocation: BigNumber }
    >;

    adaptersCount(overrides?: CallOverrides): Promise<number>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeAdapters(overrides?: CallOverrides): Promise<void>;

    changeFees(overrides?: CallOverrides): Promise<void>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(overrides?: CallOverrides): Promise<boolean>;

    "estimatedAPR()"(overrides?: CallOverrides): Promise<BigNumber>;

    "estimatedAPR(uint64[])"(
      allocations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    fees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawal: BigNumber;
        management: BigNumber;
        performance: BigNumber;
      }
    >;

    feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    flywheelForRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    flywheelLogic(overrides?: CallOverrides): Promise<string>;

    harvest(
      adapterAllocationsHint: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lentTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mint(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeFees(
      newFees: VaultFeesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedAdapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { adapter: string; allocation: BigNumber }
    >;

    proposedAdaptersCount(overrides?: CallOverrides): Promise<number>;

    proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        deposit: BigNumber;
        withdrawal: BigNumber;
        management: BigNumber;
        performance: BigNumber;
      }
    >;

    pullAccruedVaultRewards(overrides?: CallOverrides): Promise<void>;

    quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setDepositLimit(
      _depositLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyExit(overrides?: CallOverrides): Promise<void>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuitPeriod(
      _quitPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyAPY(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    takeManagementAndPerformanceFees(overrides?: CallOverrides): Promise<void>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalThreshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ChangedAdapters((address,uint64)[10],uint8,(address,uint64)[10],uint8)"(
      oldAdapter?: null,
      oldAdaptersCount?: null,
      newAdapter?: null,
      newAdaptersCount?: null
    ): ChangedAdaptersEventFilter;
    ChangedAdapters(
      oldAdapter?: null,
      oldAdaptersCount?: null,
      newAdapter?: null,
      newAdaptersCount?: null
    ): ChangedAdaptersEventFilter;

    "ChangedFees((uint64,uint64,uint64,uint64),(uint64,uint64,uint64,uint64))"(
      oldFees?: null,
      newFees?: null
    ): ChangedFeesEventFilter;
    ChangedFees(oldFees?: null, newFees?: null): ChangedFeesEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    "DepositLimitSet(uint256)"(depositLimit?: null): DepositLimitSetEventFilter;
    DepositLimitSet(depositLimit?: null): DepositLimitSetEventFilter;

    "EmergencyExitActivated()"(): EmergencyExitActivatedEventFilter;
    EmergencyExitActivated(): EmergencyExitActivatedEventFilter;

    "FeeRecipientUpdated(address,address)"(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): FeeRecipientUpdatedEventFilter;
    FeeRecipientUpdated(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): FeeRecipientUpdatedEventFilter;

    "Harvested(uint256,uint256,uint256)"(
      totalAssets?: null,
      aprBefore?: null,
      aprAfter?: null
    ): HarvestedEventFilter;
    Harvested(
      totalAssets?: null,
      aprBefore?: null,
      aprAfter?: null
    ): HarvestedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NewFeesProposed((uint64,uint64,uint64,uint64),uint256)"(
      newFees?: null,
      timestamp?: null
    ): NewFeesProposedEventFilter;
    NewFeesProposed(
      newFees?: null,
      timestamp?: null
    ): NewFeesProposedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "QuitPeriodSet(uint256)"(quitPeriod?: null): QuitPeriodSetEventFilter;
    QuitPeriodSet(quitPeriod?: null): QuitPeriodSetEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,address,address,uint256,uint256)"(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DECIMAL_OFFSET(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    _getExtensionFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    accruedManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    accruedPerformanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    adapters(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    adaptersCount(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeAdapters(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeFees(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(overrides?: CallOverrides): Promise<BigNumber>;

    "estimatedAPR()"(overrides?: CallOverrides): Promise<BigNumber>;

    "estimatedAPR(uint64[])"(
      allocations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    fees(overrides?: CallOverrides): Promise<BigNumber>;

    feesUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    flywheelForRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flywheelLogic(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      adapterAllocationsHint: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    highWaterMark(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lentTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(caller: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "mint(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeFees(
      newFees: VaultFeesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proposedAdapterTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedAdapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedAdaptersCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFeeTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposedFees(overrides?: CallOverrides): Promise<BigNumber>;

    pullAccruedVaultRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    quitPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositLimit(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEmergencyExit(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setQuitPeriod(
      _quitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supplyAPY(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    takeManagementAndPerformanceFees(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "withdraw(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawalThreshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_OFFSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getExtensionFunctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    accruedManagementFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accruedPerformanceFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adaptersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetsCheckpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeAdapters(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      assets: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyExit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "estimatedAPR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "estimatedAPR(uint64[])"(
      allocations: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimatedTotalAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesUpdatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flywheelForRewardToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flywheelLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      adapterAllocationsHint: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    highWaterMark(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lentTotalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      caller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address)"(
      shares: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeFees(
      newFees: VaultFeesStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proposedAdapterTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedAdapters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedAdaptersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedFeeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullAccruedVaultRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    quitPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "redeem(uint256,address,address)"(
      shares: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEmergencyExit(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _feeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setQuitPeriod(
      _quitPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supplyAPY(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeManagementAndPerformanceFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      assets: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,address)"(
      assets: BigNumberish,
      receiver: string,
      owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawalThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
