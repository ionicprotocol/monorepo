/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CErc20PluginDelegateInterface extends utils.Interface {
  functions: {
    "_becomeImplementation(bytes)": FunctionFragment;
    "_getExtensionFunctions()": FunctionFragment;
    "_updatePlugin(address)": FunctionFragment;
    "_withdrawAdminFees(uint256)": FunctionFragment;
    "_withdrawIonicFees(uint256)": FunctionFragment;
    "accrualBlockNumber()": FunctionFragment;
    "adminFeeMantissa()": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "borrowIndex()": FunctionFragment;
    "comptroller()": FunctionFragment;
    "contractType()": FunctionFragment;
    "decimals()": FunctionFragment;
    "delegateType()": FunctionFragment;
    "feeSeizeShareMantissa()": FunctionFragment;
    "getCash()": FunctionFragment;
    "interestRateModel()": FunctionFragment;
    "ionicAdmin()": FunctionFragment;
    "ionicFeeMantissa()": FunctionFragment;
    "liquidateBorrow(address,uint256,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "plugin()": FunctionFragment;
    "protocolSeizeShareMantissa()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemUnderlying(uint256)": FunctionFragment;
    "repayBorrow(uint256)": FunctionFragment;
    "repayBorrowBehalf(address,uint256)": FunctionFragment;
    "reserveFactorMantissa()": FunctionFragment;
    "seize(address,address,uint256)": FunctionFragment;
    "selfTransferIn(address,uint256)": FunctionFragment;
    "selfTransferOut(address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAdminFees()": FunctionFragment;
    "totalBorrows()": FunctionFragment;
    "totalIonicFees()": FunctionFragment;
    "totalReserves()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "underlying()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_becomeImplementation"
      | "_getExtensionFunctions"
      | "_updatePlugin"
      | "_withdrawAdminFees"
      | "_withdrawIonicFees"
      | "accrualBlockNumber"
      | "adminFeeMantissa"
      | "borrow"
      | "borrowIndex"
      | "comptroller"
      | "contractType"
      | "decimals"
      | "delegateType"
      | "feeSeizeShareMantissa"
      | "getCash"
      | "interestRateModel"
      | "ionicAdmin"
      | "ionicFeeMantissa"
      | "liquidateBorrow"
      | "mint"
      | "name"
      | "plugin"
      | "protocolSeizeShareMantissa"
      | "redeem"
      | "redeemUnderlying"
      | "repayBorrow"
      | "repayBorrowBehalf"
      | "reserveFactorMantissa"
      | "seize"
      | "selfTransferIn"
      | "selfTransferOut"
      | "symbol"
      | "totalAdminFees"
      | "totalBorrows"
      | "totalIonicFees"
      | "totalReserves"
      | "totalSupply"
      | "underlying"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_becomeImplementation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_getExtensionFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_updatePlugin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_withdrawAdminFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_withdrawIonicFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accrualBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminFeeMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeSeizeShareMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ionicAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ionicFeeMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "plugin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolSeizeShareMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowBehalf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfTransferIn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfTransferOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAdminFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalIonicFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_becomeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getExtensionFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updatePlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_withdrawAdminFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_withdrawIonicFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrualBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminFeeMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeSeizeShareMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ionicAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ionicFeeMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plugin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolSeizeShareMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfTransferIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfTransferOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAdminFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalIonicFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {
    "AccrueInterest(uint256,uint256,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(address,uint256,uint256,uint256)": EventFragment;
    "Failure(uint256,uint256,uint256)": EventFragment;
    "LiquidateBorrow(address,address,uint256,address,uint256)": EventFragment;
    "Mint(address,uint256,uint256)": EventFragment;
    "NewAdminFee(uint256,uint256)": EventFragment;
    "NewIonicFee(uint256,uint256)": EventFragment;
    "NewMarketInterestRateModel(address,address)": EventFragment;
    "NewPluginImplementation(address,address)": EventFragment;
    "NewReserveFactor(uint256,uint256)": EventFragment;
    "Redeem(address,uint256,uint256)": EventFragment;
    "RepayBorrow(address,address,uint256,uint256,uint256)": EventFragment;
    "ReservesAdded(address,uint256,uint256)": EventFragment;
    "ReservesReduced(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Failure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdminFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewIonicFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMarketInterestRateModel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPluginImplementation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservesReduced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AccrueInterestEventObject {
  cashPrior: BigNumber;
  interestAccumulated: BigNumber;
  borrowIndex: BigNumber;
  totalBorrows: BigNumber;
}
export type AccrueInterestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AccrueInterestEventObject
>;

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowEventObject {
  borrower: string;
  borrowAmount: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface FailureEventObject {
  error: BigNumber;
  info: BigNumber;
  detail: BigNumber;
}
export type FailureEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FailureEventObject
>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export interface LiquidateBorrowEventObject {
  liquidator: string;
  borrower: string;
  repayAmount: BigNumber;
  cTokenCollateral: string;
  seizeTokens: BigNumber;
}
export type LiquidateBorrowEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  LiquidateBorrowEventObject
>;

export type LiquidateBorrowEventFilter = TypedEventFilter<LiquidateBorrowEvent>;

export interface MintEventObject {
  minter: string;
  mintAmount: BigNumber;
  mintTokens: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface NewAdminFeeEventObject {
  oldAdminFeeMantissa: BigNumber;
  newAdminFeeMantissa: BigNumber;
}
export type NewAdminFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewAdminFeeEventObject
>;

export type NewAdminFeeEventFilter = TypedEventFilter<NewAdminFeeEvent>;

export interface NewIonicFeeEventObject {
  oldIonicFeeMantissa: BigNumber;
  newIonicFeeMantissa: BigNumber;
}
export type NewIonicFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewIonicFeeEventObject
>;

export type NewIonicFeeEventFilter = TypedEventFilter<NewIonicFeeEvent>;

export interface NewMarketInterestRateModelEventObject {
  oldInterestRateModel: string;
  newInterestRateModel: string;
}
export type NewMarketInterestRateModelEvent = TypedEvent<
  [string, string],
  NewMarketInterestRateModelEventObject
>;

export type NewMarketInterestRateModelEventFilter =
  TypedEventFilter<NewMarketInterestRateModelEvent>;

export interface NewPluginImplementationEventObject {
  oldImpl: string;
  newImpl: string;
}
export type NewPluginImplementationEvent = TypedEvent<
  [string, string],
  NewPluginImplementationEventObject
>;

export type NewPluginImplementationEventFilter =
  TypedEventFilter<NewPluginImplementationEvent>;

export interface NewReserveFactorEventObject {
  oldReserveFactorMantissa: BigNumber;
  newReserveFactorMantissa: BigNumber;
}
export type NewReserveFactorEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewReserveFactorEventObject
>;

export type NewReserveFactorEventFilter =
  TypedEventFilter<NewReserveFactorEvent>;

export interface RedeemEventObject {
  redeemer: string;
  redeemAmount: BigNumber;
  redeemTokens: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RepayBorrowEventObject {
  payer: string;
  borrower: string;
  repayAmount: BigNumber;
  accountBorrows: BigNumber;
  totalBorrows: BigNumber;
}
export type RepayBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  RepayBorrowEventObject
>;

export type RepayBorrowEventFilter = TypedEventFilter<RepayBorrowEvent>;

export interface ReservesAddedEventObject {
  benefactor: string;
  addAmount: BigNumber;
  newTotalReserves: BigNumber;
}
export type ReservesAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReservesAddedEventObject
>;

export type ReservesAddedEventFilter = TypedEventFilter<ReservesAddedEvent>;

export interface ReservesReducedEventObject {
  admin: string;
  reduceAmount: BigNumber;
  newTotalReserves: BigNumber;
}
export type ReservesReducedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReservesReducedEventObject
>;

export type ReservesReducedEventFilter = TypedEventFilter<ReservesReducedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface CErc20PluginDelegate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CErc20PluginDelegateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _becomeImplementation(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _getExtensionFunctions(
      overrides?: CallOverrides
    ): Promise<[string[]] & { functionSelectors: string[] }>;

    _updatePlugin(
      _plugin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _withdrawAdminFees(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _withdrawIonicFees(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminFeeMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    contractType(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    delegateType(overrides?: CallOverrides): Promise<[number]>;

    feeSeizeShareMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    ionicAdmin(overrides?: CallOverrides): Promise<[string]>;

    ionicFeeMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      cTokenCollateral: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    plugin(overrides?: CallOverrides): Promise<[string]>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    seize(
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    selfTransferIn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    selfTransferOut(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAdminFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalIonicFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  _becomeImplementation(
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _getExtensionFunctions(overrides?: CallOverrides): Promise<string[]>;

  _updatePlugin(
    _plugin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _withdrawAdminFees(
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _withdrawIonicFees(
    withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  adminFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  contractType(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  delegateType(overrides?: CallOverrides): Promise<number>;

  feeSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  getCash(overrides?: CallOverrides): Promise<BigNumber>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  ionicAdmin(overrides?: CallOverrides): Promise<string>;

  ionicFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  liquidateBorrow(
    borrower: string,
    repayAmount: BigNumberish,
    cTokenCollateral: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mint(
    mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  plugin(overrides?: CallOverrides): Promise<string>;

  protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayBorrow(
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayBorrowBehalf(
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  seize(
    liquidator: string,
    borrower: string,
    seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  selfTransferIn(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  selfTransferOut(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAdminFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

  totalIonicFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _becomeImplementation(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    _getExtensionFunctions(overrides?: CallOverrides): Promise<string[]>;

    _updatePlugin(_plugin: string, overrides?: CallOverrides): Promise<void>;

    _withdrawAdminFees(
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _withdrawIonicFees(
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    contractType(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    delegateType(overrides?: CallOverrides): Promise<number>;

    feeSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    ionicAdmin(overrides?: CallOverrides): Promise<string>;

    ionicFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      cTokenCollateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      mintAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    plugin(overrides?: CallOverrides): Promise<string>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      redeemAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selfTransferIn(
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selfTransferOut(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAdminFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalIonicFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AccrueInterest(uint256,uint256,uint256,uint256)"(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null
    ): AccrueInterestEventFilter;
    AccrueInterest(
      cashPrior?: null,
      interestAccumulated?: null,
      borrowIndex?: null,
      totalBorrows?: null
    ): AccrueInterestEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;

    "Borrow(address,uint256,uint256,uint256)"(
      borrower?: null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): BorrowEventFilter;
    Borrow(
      borrower?: null,
      borrowAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): BorrowEventFilter;

    "Failure(uint256,uint256,uint256)"(
      error?: null,
      info?: null,
      detail?: null
    ): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    "LiquidateBorrow(address,address,uint256,address,uint256)"(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      cTokenCollateral?: null,
      seizeTokens?: null
    ): LiquidateBorrowEventFilter;
    LiquidateBorrow(
      liquidator?: null,
      borrower?: null,
      repayAmount?: null,
      cTokenCollateral?: null,
      seizeTokens?: null
    ): LiquidateBorrowEventFilter;

    "Mint(address,uint256,uint256)"(
      minter?: null,
      mintAmount?: null,
      mintTokens?: null
    ): MintEventFilter;
    Mint(minter?: null, mintAmount?: null, mintTokens?: null): MintEventFilter;

    "NewAdminFee(uint256,uint256)"(
      oldAdminFeeMantissa?: null,
      newAdminFeeMantissa?: null
    ): NewAdminFeeEventFilter;
    NewAdminFee(
      oldAdminFeeMantissa?: null,
      newAdminFeeMantissa?: null
    ): NewAdminFeeEventFilter;

    "NewIonicFee(uint256,uint256)"(
      oldIonicFeeMantissa?: null,
      newIonicFeeMantissa?: null
    ): NewIonicFeeEventFilter;
    NewIonicFee(
      oldIonicFeeMantissa?: null,
      newIonicFeeMantissa?: null
    ): NewIonicFeeEventFilter;

    "NewMarketInterestRateModel(address,address)"(
      oldInterestRateModel?: null,
      newInterestRateModel?: null
    ): NewMarketInterestRateModelEventFilter;
    NewMarketInterestRateModel(
      oldInterestRateModel?: null,
      newInterestRateModel?: null
    ): NewMarketInterestRateModelEventFilter;

    "NewPluginImplementation(address,address)"(
      oldImpl?: null,
      newImpl?: null
    ): NewPluginImplementationEventFilter;
    NewPluginImplementation(
      oldImpl?: null,
      newImpl?: null
    ): NewPluginImplementationEventFilter;

    "NewReserveFactor(uint256,uint256)"(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null
    ): NewReserveFactorEventFilter;
    NewReserveFactor(
      oldReserveFactorMantissa?: null,
      newReserveFactorMantissa?: null
    ): NewReserveFactorEventFilter;

    "Redeem(address,uint256,uint256)"(
      redeemer?: null,
      redeemAmount?: null,
      redeemTokens?: null
    ): RedeemEventFilter;
    Redeem(
      redeemer?: null,
      redeemAmount?: null,
      redeemTokens?: null
    ): RedeemEventFilter;

    "RepayBorrow(address,address,uint256,uint256,uint256)"(
      payer?: null,
      borrower?: null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): RepayBorrowEventFilter;
    RepayBorrow(
      payer?: null,
      borrower?: null,
      repayAmount?: null,
      accountBorrows?: null,
      totalBorrows?: null
    ): RepayBorrowEventFilter;

    "ReservesAdded(address,uint256,uint256)"(
      benefactor?: null,
      addAmount?: null,
      newTotalReserves?: null
    ): ReservesAddedEventFilter;
    ReservesAdded(
      benefactor?: null,
      addAmount?: null,
      newTotalReserves?: null
    ): ReservesAddedEventFilter;

    "ReservesReduced(address,uint256,uint256)"(
      admin?: null,
      reduceAmount?: null,
      newTotalReserves?: null
    ): ReservesReducedEventFilter;
    ReservesReduced(
      admin?: null,
      reduceAmount?: null,
      newTotalReserves?: null
    ): ReservesReducedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    _becomeImplementation(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _getExtensionFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    _updatePlugin(
      _plugin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _withdrawAdminFees(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _withdrawIonicFees(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    accrualBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    adminFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowIndex(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    contractType(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    delegateType(overrides?: CallOverrides): Promise<BigNumber>;

    feeSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    ionicAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    ionicFeeMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      cTokenCollateral: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    plugin(overrides?: CallOverrides): Promise<BigNumber>;

    protocolSeizeShareMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemUnderlying(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    selfTransferIn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    selfTransferOut(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAdminFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>;

    totalIonicFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _becomeImplementation(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _getExtensionFunctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _updatePlugin(
      _plugin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _withdrawAdminFees(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _withdrawIonicFees(
      withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    accrualBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminFeeMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSeizeShareMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ionicAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ionicFeeMantissa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrow(
      borrower: string,
      repayAmount: BigNumberish,
      cTokenCollateral: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mint(
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    plugin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolSeizeShareMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayBorrow(
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayBorrowBehalf(
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seize(
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    selfTransferIn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    selfTransferOut(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAdminFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalIonicFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
