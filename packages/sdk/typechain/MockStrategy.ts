/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MockStrategyInterface extends utils.Interface {
  functions: {
    "autoFarmAddress()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "entranceFeeFactor()": FunctionFragment;
    "entranceFeeFactorMax()": FunctionFragment;
    "isAutoComp()": FunctionFragment;
    "sharesTotal()": FunctionFragment;
    "wantAddress()": FunctionFragment;
    "wantLockedTotal()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawFeeFactor()": FunctionFragment;
    "withdrawFeeFactorMax()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "autoFarmAddress"
      | "deposit"
      | "entranceFeeFactor"
      | "entranceFeeFactorMax"
      | "isAutoComp"
      | "sharesTotal"
      | "wantAddress"
      | "wantLockedTotal"
      | "withdraw"
      | "withdrawFeeFactor"
      | "withdrawFeeFactorMax"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "autoFarmAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entranceFeeFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entranceFeeFactorMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAutoComp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharesTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wantAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wantLockedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeFactorMax",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "autoFarmAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entranceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entranceFeeFactorMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAutoComp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wantAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wantLockedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeFactorMax",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    autoFarmAddress(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    entranceFeeFactorMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    isAutoComp(overrides?: CallOverrides): Promise<[boolean]>;

    sharesTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    wantAddress(overrides?: CallOverrides): Promise<[string]>;

    wantLockedTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawFeeFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFeeFactorMax(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  autoFarmAddress(overrides?: CallOverrides): Promise<string>;

  deposit(
    _userAddress: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

  entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

  isAutoComp(overrides?: CallOverrides): Promise<boolean>;

  sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

  wantAddress(overrides?: CallOverrides): Promise<string>;

  wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _userAddress: string,
    _wantAmt: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    autoFarmAddress(overrides?: CallOverrides): Promise<string>;

    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

    isAutoComp(overrides?: CallOverrides): Promise<boolean>;

    sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

    wantAddress(overrides?: CallOverrides): Promise<string>;

    wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    autoFarmAddress(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    entranceFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;

    isAutoComp(overrides?: CallOverrides): Promise<BigNumber>;

    sharesTotal(overrides?: CallOverrides): Promise<BigNumber>;

    wantAddress(overrides?: CallOverrides): Promise<BigNumber>;

    wantLockedTotal(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeeFactorMax(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    autoFarmAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    entranceFeeFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entranceFeeFactorMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAutoComp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sharesTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wantAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wantLockedTotal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _userAddress: string,
      _wantAmt: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawFeeFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeeFactorMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
