/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LiquidatorsRegistrySecondExtensionInterface
  extends utils.Interface {
  functions: {
    "_getExtensionFunctions()": FunctionFragment;
    "_removeRedemptionStrategy(address)": FunctionFragment;
    "_resetRedemptionStrategies(address[],address[],address[])": FunctionFragment;
    "_setDefaultOutputToken(address,address)": FunctionFragment;
    "_setRedemptionStrategies(address[],address[],address[])": FunctionFragment;
    "_setRedemptionStrategy(address,address,address)": FunctionFragment;
    "_setSlippages(address[],address[],uint256[])": FunctionFragment;
    "_setUniswapV3Fees(address[],address[],uint24[])": FunctionFragment;
    "_setUniswapV3Routers(address[],address[],address[])": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "ap()": FunctionFragment;
    "customUniV3Router(address,address)": FunctionFragment;
    "defaultOutputToken(address)": FunctionFragment;
    "getAllPairsStrategies()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairsStrategiesMatch(address[],address[],address[])": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "redemptionStrategiesByName(string)": FunctionFragment;
    "redemptionStrategiesByTokens(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapPairsFeesMatch(address[],address[],uint256[])": FunctionFragment;
    "uniswapPairsRoutersMatch(address[],address[],address[])": FunctionFragment;
    "uniswapV3Fees(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_getExtensionFunctions"
      | "_removeRedemptionStrategy"
      | "_resetRedemptionStrategies"
      | "_setDefaultOutputToken"
      | "_setRedemptionStrategies"
      | "_setRedemptionStrategy"
      | "_setSlippages"
      | "_setUniswapV3Fees"
      | "_setUniswapV3Routers"
      | "acceptOwnership"
      | "ap"
      | "customUniV3Router"
      | "defaultOutputToken"
      | "getAllPairsStrategies"
      | "owner"
      | "pairsStrategiesMatch"
      | "pendingOwner"
      | "redemptionStrategiesByName"
      | "redemptionStrategiesByTokens"
      | "renounceOwnership"
      | "transferOwnership"
      | "uniswapPairsFeesMatch"
      | "uniswapPairsRoutersMatch"
      | "uniswapV3Fees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_getExtensionFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_removeRedemptionStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_resetRedemptionStrategies",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setDefaultOutputToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setRedemptionStrategies",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setRedemptionStrategy",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setSlippages",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setUniswapV3Fees",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setUniswapV3Routers",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "customUniV3Router",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOutputToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPairsStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairsStrategiesMatch",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionStrategiesByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionStrategiesByTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapPairsFeesMatch",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapPairsRoutersMatch",
    values: [string[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Fees",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getExtensionFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_removeRedemptionStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_resetRedemptionStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setDefaultOutputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setRedemptionStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setRedemptionStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setSlippages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setUniswapV3Fees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setUniswapV3Routers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "customUniV3Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOutputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPairsStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairsStrategiesMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionStrategiesByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionStrategiesByTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapPairsFeesMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapPairsRoutersMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Fees",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LiquidatorsRegistrySecondExtension extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidatorsRegistrySecondExtensionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getExtensionFunctions(overrides?: CallOverrides): Promise<[string[]]>;

    _removeRedemptionStrategy(
      strategyToRemove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _resetRedemptionStrategies(
      strategies: string[],
      inputTokens: string[],
      outputTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setDefaultOutputToken(
      inputToken: string,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setRedemptionStrategies(
      strategies: string[],
      inputTokens: string[],
      outputTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setRedemptionStrategy(
      strategy: string,
      inputToken: string,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setSlippages(
      inputTokens: string[],
      outputTokens: string[],
      slippages: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setUniswapV3Fees(
      inputTokens: string[],
      outputTokens: string[],
      fees: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setUniswapV3Routers(
      inputTokens: string[],
      outputTokens: string[],
      routers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ap(overrides?: CallOverrides): Promise<[string]>;

    customUniV3Router(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    defaultOutputToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllPairsStrategies(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string[]] & {
        strategies: string[];
        inputTokens: string[];
        outputTokens: string[];
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairsStrategiesMatch(
      configStrategies: string[],
      configInputTokens: string[],
      configOutputTokens: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    redemptionStrategiesByName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    redemptionStrategiesByTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uniswapPairsFeesMatch(
      configInputTokens: string[],
      configOutputTokens: string[],
      configFees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uniswapPairsRoutersMatch(
      configInputTokens: string[],
      configOutputTokens: string[],
      configRouters: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uniswapV3Fees(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  _getExtensionFunctions(overrides?: CallOverrides): Promise<string[]>;

  _removeRedemptionStrategy(
    strategyToRemove: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _resetRedemptionStrategies(
    strategies: string[],
    inputTokens: string[],
    outputTokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setDefaultOutputToken(
    inputToken: string,
    outputToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setRedemptionStrategies(
    strategies: string[],
    inputTokens: string[],
    outputTokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setRedemptionStrategy(
    strategy: string,
    inputToken: string,
    outputToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setSlippages(
    inputTokens: string[],
    outputTokens: string[],
    slippages: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setUniswapV3Fees(
    inputTokens: string[],
    outputTokens: string[],
    fees: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setUniswapV3Routers(
    inputTokens: string[],
    outputTokens: string[],
    routers: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ap(overrides?: CallOverrides): Promise<string>;

  customUniV3Router(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  defaultOutputToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  getAllPairsStrategies(
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], string[]] & {
      strategies: string[];
      inputTokens: string[];
      outputTokens: string[];
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pairsStrategiesMatch(
    configStrategies: string[],
    configInputTokens: string[],
    configOutputTokens: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  redemptionStrategiesByName(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  redemptionStrategiesByTokens(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uniswapPairsFeesMatch(
    configInputTokens: string[],
    configOutputTokens: string[],
    configFees: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  uniswapPairsRoutersMatch(
    configInputTokens: string[],
    configOutputTokens: string[],
    configRouters: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  uniswapV3Fees(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    _getExtensionFunctions(overrides?: CallOverrides): Promise<string[]>;

    _removeRedemptionStrategy(
      strategyToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _resetRedemptionStrategies(
      strategies: string[],
      inputTokens: string[],
      outputTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setDefaultOutputToken(
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _setRedemptionStrategies(
      strategies: string[],
      inputTokens: string[],
      outputTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setRedemptionStrategy(
      strategy: string,
      inputToken: string,
      outputToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _setSlippages(
      inputTokens: string[],
      outputTokens: string[],
      slippages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setUniswapV3Fees(
      inputTokens: string[],
      outputTokens: string[],
      fees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setUniswapV3Routers(
      inputTokens: string[],
      outputTokens: string[],
      routers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    ap(overrides?: CallOverrides): Promise<string>;

    customUniV3Router(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    defaultOutputToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllPairsStrategies(
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], string[]] & {
        strategies: string[];
        inputTokens: string[];
        outputTokens: string[];
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pairsStrategiesMatch(
      configStrategies: string[],
      configInputTokens: string[],
      configOutputTokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    redemptionStrategiesByName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    redemptionStrategiesByTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapPairsFeesMatch(
      configInputTokens: string[],
      configOutputTokens: string[],
      configFees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    uniswapPairsRoutersMatch(
      configInputTokens: string[],
      configOutputTokens: string[],
      configRouters: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    uniswapV3Fees(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _getExtensionFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    _removeRedemptionStrategy(
      strategyToRemove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _resetRedemptionStrategies(
      strategies: string[],
      inputTokens: string[],
      outputTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setDefaultOutputToken(
      inputToken: string,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setRedemptionStrategies(
      strategies: string[],
      inputTokens: string[],
      outputTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setRedemptionStrategy(
      strategy: string,
      inputToken: string,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setSlippages(
      inputTokens: string[],
      outputTokens: string[],
      slippages: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setUniswapV3Fees(
      inputTokens: string[],
      outputTokens: string[],
      fees: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setUniswapV3Routers(
      inputTokens: string[],
      outputTokens: string[],
      routers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ap(overrides?: CallOverrides): Promise<BigNumber>;

    customUniV3Router(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultOutputToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPairsStrategies(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairsStrategiesMatch(
      configStrategies: string[],
      configInputTokens: string[],
      configOutputTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionStrategiesByName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptionStrategiesByTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uniswapPairsFeesMatch(
      configInputTokens: string[],
      configOutputTokens: string[],
      configFees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapPairsRoutersMatch(
      configInputTokens: string[],
      configOutputTokens: string[],
      configRouters: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV3Fees(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getExtensionFunctions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _removeRedemptionStrategy(
      strategyToRemove: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _resetRedemptionStrategies(
      strategies: string[],
      inputTokens: string[],
      outputTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setDefaultOutputToken(
      inputToken: string,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setRedemptionStrategies(
      strategies: string[],
      inputTokens: string[],
      outputTokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setRedemptionStrategy(
      strategy: string,
      inputToken: string,
      outputToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setSlippages(
      inputTokens: string[],
      outputTokens: string[],
      slippages: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setUniswapV3Fees(
      inputTokens: string[],
      outputTokens: string[],
      fees: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setUniswapV3Routers(
      inputTokens: string[],
      outputTokens: string[],
      routers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customUniV3Router(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultOutputToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPairsStrategies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairsStrategiesMatch(
      configStrategies: string[],
      configInputTokens: string[],
      configOutputTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionStrategiesByName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redemptionStrategiesByTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uniswapPairsFeesMatch(
      configInputTokens: string[],
      configOutputTokens: string[],
      configFees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapPairsRoutersMatch(
      configInputTokens: string[],
      configOutputTokens: string[],
      configRouters: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV3Fees(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
