/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LiquidatorsRegistryInterface extends utils.Interface {
  functions: {
    "_listExtensions()": FunctionFragment;
    "_registerExtension(address,address)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "ap()": FunctionFragment;
    "asExtension()": FunctionFragment;
    "customUniV3Router(address,address)": FunctionFragment;
    "defaultOutputToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "redemptionStrategiesByName(string)": FunctionFragment;
    "redemptionStrategiesByTokens(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3Fees(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_listExtensions"
      | "_registerExtension"
      | "acceptOwnership"
      | "ap"
      | "asExtension"
      | "customUniV3Router"
      | "defaultOutputToken"
      | "owner"
      | "pendingOwner"
      | "redemptionStrategiesByName"
      | "redemptionStrategiesByTokens"
      | "renounceOwnership"
      | "transferOwnership"
      | "uniswapV3Fees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_listExtensions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_registerExtension",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "asExtension",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "customUniV3Router",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOutputToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionStrategiesByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionStrategiesByTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Fees",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_listExtensions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_registerExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "asExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customUniV3Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOutputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionStrategiesByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionStrategiesByTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Fees",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LiquidatorsRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidatorsRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _listExtensions(overrides?: CallOverrides): Promise<[string[]]>;

    _registerExtension(
      extensionToAdd: string,
      extensionToReplace: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ap(overrides?: CallOverrides): Promise<[string]>;

    asExtension(overrides?: CallOverrides): Promise<[string]>;

    customUniV3Router(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    defaultOutputToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    redemptionStrategiesByName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    redemptionStrategiesByTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uniswapV3Fees(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  _listExtensions(overrides?: CallOverrides): Promise<string[]>;

  _registerExtension(
    extensionToAdd: string,
    extensionToReplace: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ap(overrides?: CallOverrides): Promise<string>;

  asExtension(overrides?: CallOverrides): Promise<string>;

  customUniV3Router(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  defaultOutputToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  redemptionStrategiesByName(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  redemptionStrategiesByTokens(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uniswapV3Fees(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    _listExtensions(overrides?: CallOverrides): Promise<string[]>;

    _registerExtension(
      extensionToAdd: string,
      extensionToReplace: string,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    ap(overrides?: CallOverrides): Promise<string>;

    asExtension(overrides?: CallOverrides): Promise<string>;

    customUniV3Router(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    defaultOutputToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    redemptionStrategiesByName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    redemptionStrategiesByTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3Fees(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _listExtensions(overrides?: CallOverrides): Promise<BigNumber>;

    _registerExtension(
      extensionToAdd: string,
      extensionToReplace: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ap(overrides?: CallOverrides): Promise<BigNumber>;

    asExtension(overrides?: CallOverrides): Promise<BigNumber>;

    customUniV3Router(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultOutputToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionStrategiesByName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redemptionStrategiesByTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uniswapV3Fees(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _listExtensions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _registerExtension(
      extensionToAdd: string,
      extensionToReplace: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    asExtension(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    customUniV3Router(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultOutputToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionStrategiesByName(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redemptionStrategiesByTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uniswapV3Fees(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
