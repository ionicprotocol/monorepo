{
  "address": "0xBbDcA7858ac2417b06636F7BA35e7d9EA39402ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "estimateInputAmount",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32044c8dce0c06b9d25917a7a1833ec1d006c504824e1af8b226654ce9dc4182",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0xBbDcA7858ac2417b06636F7BA35e7d9EA39402ea",
    "transactionIndex": 1,
    "gasUsed": "381373",
    "logsBloom": "0x
    "blockHash": "0x25cd5f729ae7805027d4a244f25cb8177e724735ef4b8c208568adaf9c9d8e8b",
    "transactionHash": "0x32044c8dce0c06b9d25917a7a1833ec1d006c504824e1af8b226654ce9dc4182",
    "logs": [],
    "blockNumber": 991358,
    "cumulativeGasUsed": "425323",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4516d6f7efae8f060f60e63dbb0131ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"estimateInputAmount\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateInputAmount(uint256,bytes)\":{\"details\":\"Estimates the needed input amount of the input token for the conversion to return the desired output amount.\",\"params\":{\"outputAmount\":\"the desired output amount\",\"strategyData\":\"the input token\"}},\"redeem(address,uint256,bytes)\":{\"details\":\"Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`\",\"params\":{\"inputAmount\":\"input amount\",\"inputToken\":\"Address of the token\",\"strategyData\":\"context specific data like input token, pool address and tx expiratio period\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidators/UniswapV3LiquidatorFunder.sol\":\"UniswapV3LiquidatorFunder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/external/uniswap/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// From Uniswap3 Core\\n\\n// Updated to Solidity 0.8 by Midas Capital:\\n//   * Rewrite unary negation of denominator, which is a uint\\n//   * Wrapped function bodies with \\\"unchecked {}\\\" so as to not add any extra gas costs\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n  /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n  function mulDiv(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    unchecked {\\n      // 512-bit multiply [prod1 prod0] = a * b\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\n      // then use the Chinese Remainder Theorem to reconstruct\\n      // the 512 bit result. The result is stored in two 256\\n      // variables such that product = prod1 * 2**256 + prod0\\n      uint256 prod0; // Least significant 256 bits of the product\\n      uint256 prod1; // Most significant 256 bits of the product\\n      assembly {\\n        let mm := mulmod(a, b, not(0))\\n        prod0 := mul(a, b)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n      }\\n\\n      // Handle non-overflow cases, 256 by 256 division\\n      if (prod1 == 0) {\\n        require(denominator > 0);\\n        assembly {\\n          result := div(prod0, denominator)\\n        }\\n        return result;\\n      }\\n\\n      // Make sure the result is less than 2**256.\\n      // Also prevents denominator == 0\\n      require(denominator > prod1);\\n\\n      ///////////////////////////////////////////////\\n      // 512 by 256 division.\\n      ///////////////////////////////////////////////\\n\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\n      // Compute remainder using mulmod\\n      uint256 remainder;\\n      assembly {\\n        remainder := mulmod(a, b, denominator)\\n      }\\n      // Subtract 256 bit number from 512 bit number\\n      assembly {\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n      }\\n\\n      // Factor powers of two out of denominator\\n      // Compute largest power of two divisor of denominator.\\n      // Always >= 1.\\n      uint256 twos = denominator & (~denominator + 1);\\n\\n      // Divide denominator by power of two\\n      assembly {\\n        denominator := div(denominator, twos)\\n      }\\n\\n      // Divide [prod1 prod0] by the factors of two\\n      assembly {\\n        prod0 := div(prod0, twos)\\n      }\\n      // Shift in bits from prod1 into prod0. For this we need\\n      // to flip `twos` such that it is 2**256 / twos.\\n      // If twos is zero, then it becomes one\\n      assembly {\\n        twos := add(div(sub(0, twos), twos), 1)\\n      }\\n      prod0 |= prod1 * twos;\\n\\n      // Invert denominator mod 2**256\\n      // Now that denominator is an odd number, it has an inverse\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n      // Compute the inverse by starting with a seed that is correct\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n      uint256 inv = (3 * denominator) ^ 2;\\n      // Now use Newton-Raphson iteration to improve the precision.\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\n      // arithmetic, doubling the correct bits in each step.\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n      // Because the division is now exact we can divide by multiplying\\n      // with the modular inverse of denominator. This will give us the\\n      // correct result modulo 2**256. Since the precoditions guarantee\\n      // that the outcome is less than 2**256, this is the final result.\\n      // We don't need to compute the high bits of the result and prod1\\n      // is no longer required.\\n      result = prod0 * inv;\\n      return result;\\n    }\\n  }\\n\\n  /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  function mulDivRoundingUp(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    unchecked {\\n      result = mulDiv(a, b, denominator);\\n      if (mulmod(a, b, denominator) > 0) {\\n        require(result < type(uint256).max);\\n        result++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf42bdded6dc8044ea0321c72dcf05e2c422122beed96889c478326907ed51d16\",\"license\":\"MIT\"},\"contracts/external/uniswap/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n  /// @notice Emitted when the owner of the factory is changed\\n  /// @param oldOwner The owner before the owner was changed\\n  /// @param newOwner The owner after the owner was changed\\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n  /// @notice Emitted when a pool is created\\n  /// @param token0 The first token of the pool by address sort order\\n  /// @param token1 The second token of the pool by address sort order\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\\n  /// @param pool The address of the created pool\\n  event PoolCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    uint24 indexed fee,\\n    int24 tickSpacing,\\n    address pool\\n  );\\n\\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n  /// @param fee The enabled fee, denominated in hundredths of a bip\\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n  /// @notice Returns the current owner of the factory\\n  /// @dev Can be changed by the current owner via setOwner\\n  /// @return The address of the factory owner\\n  function owner() external view returns (address);\\n\\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n  /// @return The tick spacing\\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n  /// @param tokenA The contract address of either token0 or token1\\n  /// @param tokenB The contract address of the other token\\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n  /// @return pool The pool address\\n  function getPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee\\n  ) external view returns (address pool);\\n\\n  /// @notice Creates a pool for the given two tokens and fee\\n  /// @param tokenA One of the two tokens in the desired pool\\n  /// @param tokenB The other of the two tokens in the desired pool\\n  /// @param fee The desired fee for the pool\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n  /// are invalid.\\n  /// @return pool The address of the newly created pool\\n  function createPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee\\n  ) external returns (address pool);\\n\\n  /// @notice Updates the owner of the factory\\n  /// @dev Must be called by the current owner\\n  /// @param _owner The new owner of the factory\\n  function setOwner(address _owner) external;\\n\\n  /// @notice Enables a fee amount with the given tickSpacing\\n  /// @dev Fee amounts may never be removed once enabled\\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0x94c0f98bad3dc5b39706fbe5704b3a31d6399177fb72abc906f5ffa64c2562c2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IUniswapV3PoolActions.sol\\\";\\n\\ninterface IUniswapV3Pool is IUniswapV3PoolActions {\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function fee() external view returns (uint24);\\n\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtPriceX96,\\n      int24 tick,\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext,\\n      uint8 feeProtocol,\\n      bool unlocked\\n    );\\n\\n  function liquidity() external view returns (uint128);\\n\\n  function observe(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory tickCumulatives, uint160[] memory liquidityCumulatives);\\n\\n  function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 liquidityCumulative,\\n      bool initialized\\n    );\\n\\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityGross,\\n      int128 liquidityNet,\\n      uint256 feeGrowthOutside0X128,\\n      uint256 feeGrowthOutside1X128,\\n      int56 tickCumulativeOutside,\\n      uint160 secondsPerLiquidityOutsideX128,\\n      uint32 secondsOutside,\\n      bool initialized\\n    );\\n\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n\\n  function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n      uint128 _liquidity,\\n      uint256 feeGrowthInside0LastX128,\\n      uint256 feeGrowthInside1LastX128,\\n      uint128 tokensOwed0,\\n      uint128 tokensOwed1\\n    );\\n}\\n\",\"keccak256\":\"0x815e94e8e575e572117cf045489c699e2e0cb56b7d2dd1a9adb1b0b1f8ac25e1\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n  /// @notice Sets the initial price for the pool\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n  function initialize(uint160 sqrtPriceX96) external;\\n\\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n  /// @param recipient The address for which the liquidity will be created\\n  /// @param tickLower The lower tick of the position in which to add liquidity\\n  /// @param tickUpper The upper tick of the position in which to add liquidity\\n  /// @param amount The amount of liquidity to mint\\n  /// @param data Any data that should be passed through to the callback\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n  function mint(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount,\\n    bytes calldata data\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Collects tokens owed to a position\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n  /// @param recipient The address which should receive the fees collected\\n  /// @param tickLower The lower tick of the position for which to collect fees\\n  /// @param tickUpper The upper tick of the position for which to collect fees\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Swap token0 for token1, or token1 for token0\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n  /// @param recipient The address to receive the output of the swap\\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\n  /// @param amount0 The amount of token0 to send\\n  /// @param amount1 The amount of token1 to send\\n  /// @param data Any data to be passed through to the callback\\n  function flash(\\n    address recipient,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n  /// the input observationCardinalityNext.\\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x01e66a0dca41f6e36bc20da4f66ff0e47b6b09ee9dcf59ce272a6e15a6c91a19\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n  /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n  /// @return The contract address\\n  function factory() external view returns (address);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (address);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (address);\\n\\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n  /// @return The fee\\n  function fee() external view returns (uint24);\\n\\n  /// @notice The pool tick spacing\\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n  /// This value is an int24 to avoid casting even though it is always positive.\\n  /// @return The tick spacing\\n  function tickSpacing() external view returns (int24);\\n\\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n  /// @return The max amount of liquidity per tick\\n  function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xb2fb3532ff4b51c3aeedfbd85161048e9423d91e4e9c15a4784dbfd9431156ae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/IV3SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport './IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IV3SwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// that may remain in the router after the swap.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xe95fc9d2ee5575049d60bcd0927866fee6f01398456929833541c0c7ca3ed8f5\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\n// From Uniswap3 Core\\n\\n// Updated to Solidity 0.8 by Midas Capital:\\n//   * Cast MAX_TICK to int256 before casting to uint\\n//   * Wrapped function bodies with \\\"unchecked {}\\\" so as to not add any extra gas costs\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n  int24 internal constant MIN_TICK = -887272;\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n  /// @dev Throws if |tick| > max tick\\n  /// @param tick The input tick for the above formula\\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n  /// at the given tick\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n    unchecked {\\n      uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n      require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n      uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n      if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n      if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n      if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n      if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n      if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n      if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n      if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n      if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n      if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n      if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n      if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n      if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n      if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n      if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n      if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n      if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n      if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n      if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n      if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n      if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n      // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n      // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n      // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n      sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n  }\\n\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n  /// ever return.\\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n  function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n    unchecked {\\n      // second inequality must be < because the price can never reach the price at the max tick\\n      require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\n      uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n      uint256 r = ratio;\\n      uint256 msb = 0;\\n\\n      assembly {\\n        let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(5, gt(r, 0xFFFFFFFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(4, gt(r, 0xFFFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(3, gt(r, 0xFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(2, gt(r, 0xF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(1, gt(r, 0x3))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := gt(r, 0x1)\\n        msb := or(msb, f)\\n      }\\n\\n      if (msb >= 128) r = ratio >> (msb - 127);\\n      else r = ratio << (127 - msb);\\n\\n      int256 log_2 = (int256(msb) - 128) << 64;\\n\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(63, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(62, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(61, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(60, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(59, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(58, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(57, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(56, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(55, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(54, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(53, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(52, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(51, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(50, f))\\n      }\\n\\n      int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n      int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n      int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n      tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x432aca6b585c17a1130b0eb17a8f9ff1c3d1de49adbfea0e31b6d6c3c63c52a7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/quoter/Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../IUniswapV3Factory.sol\\\";\\nimport \\\"./interfaces/IQuoter.sol\\\";\\nimport \\\"./UniswapV3Quoter.sol\\\";\\n\\ncontract Quoter is IQuoter, UniswapV3Quoter {\\n  IUniswapV3Factory internal uniV3Factory; // TODO should it be immutable?\\n\\n  constructor(address _uniV3Factory) {\\n    uniV3Factory = IUniswapV3Factory(_uniV3Factory);\\n  }\\n\\n  // This should be equal to quoteExactInputSingle(_fromToken, _toToken, _poolFee, _amount, 0)\\n  // todo: add price limit\\n  function estimateMaxSwapUniswapV3(\\n    address _fromToken,\\n    address _toToken,\\n    uint256 _amount,\\n    uint24 _poolFee\\n  ) public view override returns (uint256) {\\n    address pool = uniV3Factory.getPool(_fromToken, _toToken, _poolFee);\\n\\n    return _estimateOutputSingle(_toToken, _fromToken, _amount, pool);\\n  }\\n\\n  // This should be equal to quoteExactOutputSingle(_fromToken, _toToken, _poolFee, _amount, 0)\\n  // todo: add price limit\\n  function estimateMinSwapUniswapV3(\\n    address _fromToken,\\n    address _toToken,\\n    uint256 _amount,\\n    uint24 _poolFee\\n  ) public view override returns (uint256) {\\n    address pool = uniV3Factory.getPool(_fromToken, _toToken, _poolFee);\\n\\n    return _estimateInputSingle(_fromToken, _toToken, _amount, pool);\\n  }\\n\\n  // todo: add price limit\\n  function _estimateOutputSingle(\\n    address _fromToken,\\n    address _toToken,\\n    uint256 _amount,\\n    address _pool\\n  ) internal view returns (uint256 amountOut) {\\n    bool zeroForOne = _fromToken > _toToken;\\n    // todo: price limit?\\n    (int256 amount0, int256 amount1) = quoteSwap(\\n      _pool,\\n      int256(_amount),\\n      zeroForOne ? (TickMath.MIN_SQRT_RATIO + 1) : (TickMath.MAX_SQRT_RATIO - 1),\\n      zeroForOne\\n    );\\n    if (zeroForOne) amountOut = amount1 > 0 ? uint256(amount1) : uint256(-amount1);\\n    else amountOut = amount0 > 0 ? uint256(amount0) : uint256(-amount0);\\n  }\\n\\n  // todo: add price limit\\n  function _estimateInputSingle(\\n    address _fromToken,\\n    address _toToken,\\n    uint256 _amount,\\n    address _pool\\n  ) internal view returns (uint256 amountOut) {\\n    bool zeroForOne = _fromToken < _toToken;\\n    // todo: price limit?\\n    (int256 amount0, int256 amount1) = quoteSwap(\\n      _pool,\\n      -int256(_amount),\\n      zeroForOne ? (TickMath.MIN_SQRT_RATIO + 1) : (TickMath.MAX_SQRT_RATIO - 1),\\n      zeroForOne\\n    );\\n    if (zeroForOne) amountOut = amount0 > 0 ? uint256(amount0) : uint256(-amount0);\\n    else amountOut = amount1 > 0 ? uint256(amount1) : uint256(-amount1);\\n  }\\n\\n  function doesPoolExist(address _token0, address _token1) external view returns (bool) {\\n    // try 0.05%\\n    address pool = uniV3Factory.getPool(_token0, _token1, 500);\\n    if (pool != address(0)) return true;\\n\\n    // try 0.3%\\n    pool = uniV3Factory.getPool(_token0, _token1, 3000);\\n    if (pool != address(0)) return true;\\n\\n    // try 1%\\n    pool = uniV3Factory.getPool(_token0, _token1, 10000);\\n    if (pool != address(0)) return true;\\n    else return false;\\n  }\\n}\\n\",\"keccak256\":\"0xcfbc88a172c99b9d4ef5b1fa9f97513fe6f41565f87cb5d8070a1f938985d70c\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/UniswapV3Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\nimport \\\"./libraries/LowGasSafeMath.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./libraries/Tick.sol\\\";\\nimport \\\"./libraries/TickBitmap.sol\\\";\\n\\nimport \\\"../FullMath.sol\\\";\\nimport \\\"../TickMath.sol\\\";\\nimport \\\"./libraries/LiquidityMath.sol\\\";\\nimport \\\"./libraries/SqrtPriceMath.sol\\\";\\nimport \\\"./libraries/SwapMath.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV3Quoter.sol\\\";\\nimport \\\"../IUniswapV3Pool.sol\\\";\\nimport \\\"../IUniswapV3PoolImmutables.sol\\\";\\n\\ncontract UniswapV3Quoter {\\n  using LowGasSafeMath for int256;\\n  using SafeCast for uint256;\\n  using Tick for mapping(int24 => Tick.Info);\\n\\n  struct PoolState {\\n    // the current price\\n    uint160 sqrtPriceX96;\\n    // the current tick\\n    int24 tick;\\n    // the tick spacing\\n    int24 tickSpacing;\\n    // the pool's fee\\n    uint24 fee;\\n    // the pool's liquidity\\n    uint128 liquidity;\\n    // whether the pool is locked\\n    bool unlocked;\\n  }\\n\\n  // accumulated protocol fees in token0/token1 units\\n  struct ProtocolFees {\\n    uint128 token0;\\n    uint128 token1;\\n  }\\n\\n  // the top level state of the swap, the results of which are recorded in storage at the end\\n  struct SwapState {\\n    // the amount remaining to be swapped in/out of the input/output asset\\n    int256 amountSpecifiedRemaining;\\n    // the amount already swapped out/in of the output/input asset\\n    int256 amountCalculated;\\n    // current sqrt(price)\\n    uint160 sqrtPriceX96;\\n    // the tick associated with the current price\\n    int24 tick;\\n    // the current liquidity in range\\n    uint128 liquidity;\\n  }\\n\\n  struct StepComputations {\\n    // the price at the beginning of the step\\n    uint160 sqrtPriceStartX96;\\n    // the next tick to swap to from the current tick in the swap direction\\n    int24 tickNext;\\n    // whether tickNext is initialized or not\\n    bool initialized;\\n    // sqrt(price) for the next tick (1/0)\\n    uint160 sqrtPriceNextX96;\\n    // how much is being swapped in in this step\\n    uint256 amountIn;\\n    // how much is being swapped out\\n    uint256 amountOut;\\n    // how much fee is being paid in\\n    uint256 feeAmount;\\n  }\\n\\n  struct InitialState {\\n    address poolAddress;\\n    PoolState poolState;\\n    uint256 feeGrowthGlobal0X128;\\n    uint256 feeGrowthGlobal1X128;\\n  }\\n\\n  struct NextTickPassage {\\n    int24 tick;\\n    int24 tickSpacing;\\n  }\\n\\n  function fetchState(address _pool) internal view returns (PoolState memory poolState) {\\n    IUniswapV3Pool pool = IUniswapV3Pool(_pool);\\n    (uint160 sqrtPriceX96, int24 tick, , , , , bool unlocked) = pool.slot0(); // external call\\n    uint128 liquidity = pool.liquidity(); // external call\\n    int24 tickSpacing = IUniswapV3PoolImmutables(_pool).tickSpacing(); // external call\\n    uint24 fee = IUniswapV3PoolImmutables(_pool).fee(); // external call\\n    poolState = PoolState(sqrtPriceX96, tick, tickSpacing, fee, liquidity, unlocked);\\n  }\\n\\n  function setInitialState(\\n    PoolState memory initialPoolState,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bool zeroForOne\\n  )\\n    internal\\n    pure\\n    returns (\\n      SwapState memory state,\\n      uint128 liquidity,\\n      uint160 sqrtPriceX96\\n    )\\n  {\\n    liquidity = initialPoolState.liquidity;\\n\\n    sqrtPriceX96 = initialPoolState.sqrtPriceX96;\\n\\n    require(\\n      zeroForOne\\n        ? sqrtPriceLimitX96 < initialPoolState.sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\\n        : sqrtPriceLimitX96 > initialPoolState.sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\\n      \\\"SPL\\\"\\n    );\\n\\n    state = SwapState({\\n      amountSpecifiedRemaining: amountSpecified,\\n      amountCalculated: 0,\\n      sqrtPriceX96: initialPoolState.sqrtPriceX96,\\n      tick: initialPoolState.tick,\\n      liquidity: 0 // to be modified after initialization\\n    });\\n  }\\n\\n  function getNextTickAndPrice(\\n    int24 tickSpacing,\\n    int24 currentTick,\\n    IUniswapV3Pool pool,\\n    bool zeroForOne\\n  )\\n    internal\\n    view\\n    returns (\\n      int24 tickNext,\\n      bool initialized,\\n      uint160 sqrtPriceNextX96\\n    )\\n  {\\n    int24 compressed = currentTick / tickSpacing;\\n    if (!zeroForOne) compressed++;\\n    if (currentTick < 0 && currentTick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n    uint256 selfResult = pool.tickBitmap(int16(compressed >> 8)); // external call\\n\\n    (tickNext, initialized) = TickBitmap.nextInitializedTickWithinOneWord(\\n      selfResult,\\n      currentTick,\\n      tickSpacing,\\n      zeroForOne\\n    );\\n\\n    if (tickNext < TickMath.MIN_TICK) {\\n      tickNext = TickMath.MIN_TICK;\\n    } else if (tickNext > TickMath.MAX_TICK) {\\n      tickNext = TickMath.MAX_TICK;\\n    }\\n    sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(tickNext);\\n  }\\n\\n  function processSwapWithinTick(\\n    IUniswapV3Pool pool,\\n    PoolState memory initialPoolState,\\n    SwapState memory state,\\n    uint160 firstSqrtPriceX96,\\n    uint128 firstLiquidity,\\n    uint160 sqrtPriceLimitX96,\\n    bool zeroForOne,\\n    bool exactAmount\\n  )\\n    internal\\n    view\\n    returns (\\n      uint160 sqrtPriceNextX96,\\n      uint160 finalSqrtPriceX96,\\n      uint128 finalLiquidity\\n    )\\n  {\\n    StepComputations memory step;\\n\\n    step.sqrtPriceStartX96 = firstSqrtPriceX96;\\n\\n    (step.tickNext, step.initialized, sqrtPriceNextX96) = getNextTickAndPrice(\\n      initialPoolState.tickSpacing,\\n      state.tick,\\n      pool,\\n      zeroForOne\\n    );\\n\\n    (finalSqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n      firstSqrtPriceX96,\\n      (zeroForOne ? sqrtPriceNextX96 < sqrtPriceLimitX96 : sqrtPriceNextX96 > sqrtPriceLimitX96)\\n        ? sqrtPriceLimitX96\\n        : sqrtPriceNextX96,\\n      firstLiquidity,\\n      state.amountSpecifiedRemaining,\\n      initialPoolState.fee,\\n      zeroForOne\\n    );\\n\\n    if (exactAmount) {\\n      state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n      state.amountCalculated = state.amountCalculated.sub(step.amountOut.toInt256());\\n    } else {\\n      state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n      state.amountCalculated = state.amountCalculated.add((step.amountIn + step.feeAmount).toInt256());\\n    }\\n\\n    if (finalSqrtPriceX96 == sqrtPriceNextX96) {\\n      if (step.initialized) {\\n        (, int128 liquidityNet, , , , , , ) = pool.ticks(step.tickNext);\\n        if (zeroForOne) liquidityNet = -liquidityNet;\\n        finalLiquidity = LiquidityMath.addDelta(firstLiquidity, liquidityNet);\\n      }\\n      state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n    } else if (finalSqrtPriceX96 != step.sqrtPriceStartX96) {\\n      // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n      state.tick = TickMath.getTickAtSqrtRatio(finalSqrtPriceX96);\\n    }\\n  }\\n\\n  function returnedAmount(\\n    SwapState memory state,\\n    int256 amountSpecified,\\n    bool zeroForOne\\n  ) internal pure returns (int256 amount0, int256 amount1) {\\n    if (amountSpecified > 0) {\\n      (amount0, amount1) = zeroForOne\\n        ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n        : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    } else {\\n      (amount0, amount1) = zeroForOne\\n        ? (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining)\\n        : (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated);\\n    }\\n  }\\n\\n  function quoteSwap(\\n    address poolAddress,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bool zeroForOne\\n  ) internal view returns (int256 amount0, int256 amount1) {\\n    bool exactAmount = amountSpecified > 0;\\n\\n    PoolState memory initialPoolState = fetchState(poolAddress);\\n    uint160 sqrtPriceNextX96;\\n\\n    (SwapState memory state, uint128 liquidity, uint160 sqrtPriceX96) = setInitialState(\\n      initialPoolState,\\n      amountSpecified,\\n      sqrtPriceLimitX96,\\n      zeroForOne\\n    );\\n\\n    while (state.amountSpecifiedRemaining != 0 && sqrtPriceX96 != sqrtPriceLimitX96)\\n      (sqrtPriceNextX96, sqrtPriceX96, liquidity) = processSwapWithinTick(\\n        IUniswapV3Pool(poolAddress),\\n        initialPoolState,\\n        state,\\n        sqrtPriceX96,\\n        liquidity,\\n        sqrtPriceLimitX96,\\n        zeroForOne,\\n        exactAmount\\n      );\\n\\n    (amount0, amount1) = returnedAmount(state, amountSpecified, zeroForOne);\\n  }\\n}\\n\",\"keccak256\":\"0x04323a39bc058fccb502d2fb2ef9438560f4b8b06bc51d1a072c1b39b2006d45\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IQuoter {\\n  function estimateMaxSwapUniswapV3(\\n    address _fromToken,\\n    address _toToken,\\n    uint256 _amount,\\n    uint24 _poolFee\\n  ) external view returns (uint256);\\n\\n  function estimateMinSwapUniswapV3(\\n    address _fromToken,\\n    address _toToken,\\n    uint256 _amount,\\n    uint24 _poolFee\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4354205b233dc56b0809867666845265260cb4059554a4bd4f35b0360508fea0\",\"license\":\"BUSL-1.1\"},\"contracts/external/uniswap/quoter/interfaces/IUniswapV3Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IUniswapV3Quoter {\\n  /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\\n  /// @param amountIn The amount of the first token to swap\\n  /// @return amountOut The amount of the last token that would be received\\n  function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n  /// @param tokenIn The token being swapped in\\n  /// @param tokenOut The token being swapped out\\n  /// @param fee The fee of the token pool to consider for the pair\\n  /// @param amountIn The desired input amount\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n  /// @return amountOut The amount of `tokenOut` that would be received\\n  function quoteExactInputSingle(\\n    address tokenIn,\\n    address tokenOut,\\n    uint24 fee,\\n    uint256 amountIn,\\n    uint160 sqrtPriceLimitX96\\n  ) external returns (uint256 amountOut);\\n\\n  /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n  /// @param amountOut The amount of the last token to receive\\n  /// @return amountIn The amount of first token required to be paid\\n  function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n  /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n  /// @param tokenIn The token being swapped in\\n  /// @param tokenOut The token being swapped out\\n  /// @param fee The fee of the token pool to consider for the pair\\n  /// @param amountOut The desired output amount\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n  /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n  function quoteExactOutputSingle(\\n    address tokenIn,\\n    address tokenOut,\\n    uint24 fee,\\n    uint256 amountOut,\\n    uint160 sqrtPriceLimitX96\\n  ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xfebe8703ca93969f7314c5eefcd48125059abaa94182dac93ae202e761055d88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/quoter/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n  /// @notice Returns the index of the most significant bit of the number,\\n  ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n  /// @dev The function satisfies the property:\\n  ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n  /// @param x the value for which to compute the most significant bit, must be greater than 0\\n  /// @return r the index of the most significant bit\\n  function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n    require(x > 0);\\n\\n    if (x >= 0x100000000000000000000000000000000) {\\n      x >>= 128;\\n      r += 128;\\n    }\\n    if (x >= 0x10000000000000000) {\\n      x >>= 64;\\n      r += 64;\\n    }\\n    if (x >= 0x100000000) {\\n      x >>= 32;\\n      r += 32;\\n    }\\n    if (x >= 0x10000) {\\n      x >>= 16;\\n      r += 16;\\n    }\\n    if (x >= 0x100) {\\n      x >>= 8;\\n      r += 8;\\n    }\\n    if (x >= 0x10) {\\n      x >>= 4;\\n      r += 4;\\n    }\\n    if (x >= 0x4) {\\n      x >>= 2;\\n      r += 2;\\n    }\\n    if (x >= 0x2) r += 1;\\n  }\\n\\n  /// @notice Returns the index of the least significant bit of the number,\\n  ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n  /// @dev The function satisfies the property:\\n  ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n  /// @param x the value for which to compute the least significant bit, must be greater than 0\\n  /// @return r the index of the least significant bit\\n  function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n    require(x > 0);\\n\\n    r = 255;\\n    if (x & type(uint128).max > 0) {\\n      r -= 128;\\n    } else {\\n      x >>= 128;\\n    }\\n    if (x & type(uint64).max > 0) {\\n      r -= 64;\\n    } else {\\n      x >>= 64;\\n    }\\n    if (x & type(uint32).max > 0) {\\n      r -= 32;\\n    } else {\\n      x >>= 32;\\n    }\\n    if (x & type(uint16).max > 0) {\\n      r -= 16;\\n    } else {\\n      x >>= 16;\\n    }\\n    if (x & type(uint8).max > 0) {\\n      r -= 8;\\n    } else {\\n      x >>= 8;\\n    }\\n    if (x & 0xf > 0) {\\n      r -= 4;\\n    } else {\\n      x >>= 4;\\n    }\\n    if (x & 0x3 > 0) {\\n      r -= 2;\\n    } else {\\n      x >>= 2;\\n    }\\n    if (x & 0x1 > 0) r -= 1;\\n  }\\n}\\n\",\"keccak256\":\"0x6565078afaf4a8bc4804a95da936fd5a66c4b0095eabd462da0620d5388b7326\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n  uint8 internal constant RESOLUTION = 96;\\n  uint256 internal constant Q96 = 0x1000000000000000000000000; // 2^96\\n}\\n\",\"keccak256\":\"0xd9c548394832b82a4c4221b5a323fe2986061b759637ad87b23430d43e8fefad\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n  /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n  /// @param x The liquidity before change\\n  /// @param y The delta by which liquidity should be changed\\n  /// @return z The liquidity delta\\n  function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n    if (y < 0) {\\n      require((z = x - uint128(-y)) < x, \\\"LS\\\");\\n    } else {\\n      require((z = x + uint128(y)) >= x, \\\"LA\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x07062c5e1b28cf94a3c995566bb9acc7f1f23f555e9765d6bba7629a71f7c30e\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x);\\n  }\\n\\n  /// @notice Returns x - y, reverts if underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x - y) <= x);\\n  }\\n\\n  /// @notice Returns x * y, reverts if overflows\\n  /// @param x The multiplicand\\n  /// @param y The multiplier\\n  /// @return z The product of x and y\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(x == 0 || (z = x * y) / x == y);\\n  }\\n\\n  /// @notice Returns x + y, reverts if overflows or underflows\\n  /// @param x The augend\\n  /// @param y The addend\\n  /// @return z The sum of x and y\\n  function add(int256 x, int256 y) internal pure returns (int256 z) {\\n    require((z = x + y) >= x == (y >= 0));\\n  }\\n\\n  /// @notice Returns x - y, reverts if overflows or underflows\\n  /// @param x The minuend\\n  /// @param y The subtrahend\\n  /// @return z The difference of x and y\\n  function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n    require((z = x - y) <= x == (y >= 0));\\n  }\\n}\\n\",\"keccak256\":\"0x43f569e74a7d31db8e077710734e3267de08f7ce6eb2618f153ea7338e1eb774\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\n    require((z = uint160(y)) == y);\\n  }\\n\\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n  /// @param y The int256 to be downcasted\\n  /// @return z The downcasted integer, now type int128\\n  function toInt128(int256 y) internal pure returns (int128 z) {\\n    require((z = int128(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255);\\n    z = int256(y);\\n  }\\n}\\n\",\"keccak256\":\"0x9aeb9a4b82064c1e0cd82046e4f5a011f74485461676599f76de6ffb969a25a0\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./LowGasSafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\nimport \\\"../../FullMath.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n  using LowGasSafeMath for uint256;\\n  using SafeCast for uint256;\\n\\n  /// @notice Gets the next sqrt price given a delta of token0\\n  /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n  /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n  /// price less in order to not send too much output.\\n  /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n  /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n  /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n  /// @param liquidity The amount of usable liquidity\\n  /// @param amount How much of token0 to add or remove from virtual reserves\\n  /// @param add Whether to add or remove the amount of token0\\n  /// @return The price after adding or removing amount, depending on add\\n  function getNextSqrtPriceFromAmount0RoundingUp(\\n    uint160 sqrtPX96,\\n    uint128 liquidity,\\n    uint256 amount,\\n    bool add\\n  ) internal pure returns (uint160) {\\n    // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n    if (amount == 0) return sqrtPX96;\\n    uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n    bool overflow = false;\\n    if (numerator1 != 0 && sqrtPX96 != 0)\\n      overflow = uint256(BitMath.mostSignificantBit(numerator1)) + uint256(BitMath.mostSignificantBit(sqrtPX96)) >= 254;\\n\\n    if (add) {\\n      uint256 product;\\n      if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n        product = overflow ? FullMath.mulDivRoundingUp(amount, sqrtPX96, uint256(liquidity)) : product;\\n        numerator1 = overflow ? FixedPoint96.Q96 : numerator1;\\n        uint256 denominator = numerator1 + product;\\n        if (denominator >= numerator1) {\\n          // always fits in 160 bits\\n          return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n        }\\n      }\\n\\n      return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n    } else {\\n      uint256 product;\\n      // if the product overflows, we know the denominator underflows\\n      // in addition, we must check that the denominator does not underflow\\n      require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n      product = overflow ? FullMath.mulDivRoundingUp(amount, sqrtPX96, uint256(liquidity)) : product;\\n      numerator1 = overflow ? FixedPoint96.Q96 : numerator1;\\n      uint256 denominator = numerator1 - product;\\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n    }\\n  }\\n\\n  /// @notice Gets the next sqrt price given a delta of token1\\n  /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n  /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n  /// price less in order to not send too much output.\\n  /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n  /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n  /// @param liquidity The amount of usable liquidity\\n  /// @param amount How much of token1 to add, or remove, from virtual reserves\\n  /// @param add Whether to add, or remove, the amount of token1\\n  /// @return The price after adding or removing `amount`\\n  function getNextSqrtPriceFromAmount1RoundingDown(\\n    uint160 sqrtPX96,\\n    uint128 liquidity,\\n    uint256 amount,\\n    bool add\\n  ) internal pure returns (uint160) {\\n    // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n    // in both cases, avoid a mulDiv for most inputs\\n    if (add) {\\n      uint256 quotient = (\\n        amount <= type(uint160).max\\n          ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n          : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n      );\\n\\n      return uint256(sqrtPX96).add(quotient).toUint160();\\n    } else {\\n      uint256 quotient = (\\n        amount <= type(uint160).max\\n          ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n          : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n      );\\n\\n      require(sqrtPX96 > quotient);\\n      // always fits 160 bits\\n      return uint160(sqrtPX96 - quotient);\\n    }\\n  }\\n\\n  /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n  /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n  /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n  /// @param liquidity The amount of usable liquidity\\n  /// @param amountIn How much of token0, or token1, is being swapped in\\n  /// @param zeroForOne Whether the amount in is token0 or token1\\n  /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n  function getNextSqrtPriceFromInput(\\n    uint160 sqrtPX96,\\n    uint128 liquidity,\\n    uint256 amountIn,\\n    bool zeroForOne\\n  ) internal pure returns (uint160 sqrtQX96) {\\n    require(sqrtPX96 > 0);\\n    require(liquidity > 0);\\n\\n    // round to make sure that we don't pass the target price\\n    return\\n      zeroForOne\\n        ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n        : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n  }\\n\\n  /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n  /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n  /// @param sqrtPX96 The starting price before accounting for the output amount\\n  /// @param liquidity The amount of usable liquidity\\n  /// @param amountOut How much of token0, or token1, is being swapped out\\n  /// @param zeroForOne Whether the amount out is token0 or token1\\n  /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n  function getNextSqrtPriceFromOutput(\\n    uint160 sqrtPX96,\\n    uint128 liquidity,\\n    uint256 amountOut,\\n    bool zeroForOne\\n  ) internal pure returns (uint160 sqrtQX96) {\\n    require(sqrtPX96 > 0);\\n    require(liquidity > 0);\\n\\n    // round to make sure that we pass the target price\\n    return\\n      zeroForOne\\n        ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n        : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n  }\\n\\n  /// @notice Gets the amount0 delta between two prices\\n  /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n  /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param liquidity The amount of usable liquidity\\n  /// @param roundUp Whether to round the amount up or down\\n  /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n  function getAmount0Delta(\\n    uint160 sqrtRatioAX96,\\n    uint160 sqrtRatioBX96,\\n    uint128 liquidity,\\n    bool roundUp\\n  ) internal pure returns (uint256 amount0) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n    uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n    uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n    require(sqrtRatioAX96 > 0);\\n\\n    bool overflow = false;\\n    if (numerator1 != 0 && numerator2 != 0)\\n      overflow =\\n        uint256(BitMath.mostSignificantBit(numerator1)) + uint256(BitMath.mostSignificantBit(numerator2)) >= 254;\\n\\n    if (overflow) {\\n      return\\n        roundUp\\n          ? FullMath.mulDivRoundingUp(\\n            FullMath.mulDivRoundingUp(uint256(liquidity), numerator2, sqrtRatioBX96),\\n            FixedPoint96.Q96,\\n            sqrtRatioAX96\\n          )\\n          : FullMath.mulDiv(\\n            FullMath.mulDiv(uint256(liquidity), numerator2, sqrtRatioBX96),\\n            FixedPoint96.Q96,\\n            sqrtRatioAX96\\n          );\\n    } else {\\n      return\\n        roundUp\\n          ? UnsafeMath.divRoundingUp(FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96), sqrtRatioAX96)\\n          : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n  }\\n\\n  /// @notice Gets the amount1 delta between two prices\\n  /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param liquidity The amount of usable liquidity\\n  /// @param roundUp Whether to round the amount up, or down\\n  /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n  function getAmount1Delta(\\n    uint160 sqrtRatioAX96,\\n    uint160 sqrtRatioBX96,\\n    uint128 liquidity,\\n    bool roundUp\\n  ) internal pure returns (uint256 amount1) {\\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n    return\\n      roundUp\\n        ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n        : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n  }\\n\\n  /// @notice Helper that gets signed token0 delta\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n  /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n  function getAmount0Delta(\\n    uint160 sqrtRatioAX96,\\n    uint160 sqrtRatioBX96,\\n    int128 liquidity\\n  ) internal pure returns (int256 amount0) {\\n    return\\n      liquidity < 0\\n        ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n        : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n  }\\n\\n  /// @notice Helper that gets signed token1 delta\\n  /// @param sqrtRatioAX96 A sqrt price\\n  /// @param sqrtRatioBX96 Another sqrt price\\n  /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n  /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n  function getAmount1Delta(\\n    uint160 sqrtRatioAX96,\\n    uint160 sqrtRatioBX96,\\n    int128 liquidity\\n  ) internal pure returns (int256 amount1) {\\n    return\\n      liquidity < 0\\n        ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n        : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n  }\\n}\\n\",\"keccak256\":\"0x34d6754b798385e60b1b7ca9a405d371ce4986f73b3d08ce906b47eff2eaca2a\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"../../FullMath.sol\\\";\\nimport \\\"./SqrtPriceMath.sol\\\";\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n  /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n  /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n  /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n  /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n  /// @param liquidity The usable liquidity\\n  /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n  /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n  /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n  /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n  /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n  /// @return feeAmount The amount of input that will be taken as a fee\\n  function computeSwapStep(\\n    uint160 sqrtRatioCurrentX96,\\n    uint160 sqrtRatioTargetX96,\\n    uint128 liquidity,\\n    int256 amountRemaining,\\n    uint24 feePips,\\n    bool zeroForOne\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint160 sqrtRatioNextX96,\\n      uint256 amountIn,\\n      uint256 amountOut,\\n      uint256 feeAmount\\n    )\\n  {\\n    require(zeroForOne == sqrtRatioCurrentX96 >= sqrtRatioTargetX96, \\\"SPD\\\");\\n    bool exactIn = amountRemaining >= 0;\\n\\n    if (exactIn) {\\n      uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n      amountIn = zeroForOne\\n        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n      if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n      else\\n        sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n          sqrtRatioCurrentX96,\\n          liquidity,\\n          amountRemainingLessFee,\\n          zeroForOne\\n        );\\n    } else {\\n      amountOut = zeroForOne\\n        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n\\n      if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n      else\\n        sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n          sqrtRatioCurrentX96,\\n          liquidity,\\n          uint256(-amountRemaining),\\n          zeroForOne\\n        );\\n    }\\n\\n    bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n    // get the input/output amounts\\n    if (zeroForOne) {\\n      amountIn = max && exactIn\\n        ? amountIn\\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n      amountOut = max && !exactIn\\n        ? amountOut\\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n    } else {\\n      amountIn = max && exactIn\\n        ? amountIn\\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n      amountOut = max && !exactIn\\n        ? amountOut\\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n    }\\n\\n    // cap the output amount to not exceed the remaining output amount\\n    if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n      amountOut = uint256(-amountRemaining);\\n    }\\n\\n    if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n      // we didn't reach the target, so take the remainder of the maximum input as fee\\n      feeAmount = uint256(amountRemaining) - amountIn;\\n    } else {\\n      feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf25585e84e48d80c4d3ee87d73e57f0f81ca0e81876e50a29653b235762b544e\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./LowGasSafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\nimport \\\"../../TickMath.sol\\\";\\nimport \\\"./LiquidityMath.sol\\\";\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\n\\n/// Ithil to modify it, since it does not have access to storage arrays\\nlibrary Tick {\\n  using LowGasSafeMath for int256;\\n  using SafeCast for int256;\\n\\n  // info stored for each initialized individual tick\\n  struct Info {\\n    // the total position liquidity that references this tick\\n    uint128 liquidityGross;\\n    // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n    int128 liquidityNet;\\n    // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n    // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n    uint256 feeGrowthOutside0X128;\\n    uint256 feeGrowthOutside1X128;\\n    // the cumulative tick value on the other side of the tick\\n    int56 tickCumulativeOutside;\\n    // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n    // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n    uint160 secondsPerLiquidityOutsideX128;\\n    // the seconds spent on the other side of the tick (relative to the current tick)\\n    // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n    uint32 secondsOutside;\\n    // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n    // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n    bool initialized;\\n  }\\n\\n  /// @notice Derives max liquidity per tick from given tick spacing\\n  /// @dev Executed within the pool constructor\\n  /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\\n  ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\\n  /// @return The max liquidity per tick\\n  function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\\n    int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\\n    int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\\n    uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\\n    return type(uint128).max / numTicks;\\n  }\\n\\n  /// @notice Retrieves fee growth data\\n  /// Ithil: only use it with lower = self[tickLower] and upper = self[tickUpper]\\n  /// @param lower The info of the lower tick boundary of the position\\n  /// @param upper The info of the upper tick boundary of the position\\n  /// @param tickLower The lower tick boundary of the position\\n  /// @param tickUpper The upper tick boundary of the position\\n  /// @param tickCurrent The current tick\\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n  /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n  /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n  function getFeeGrowthInside(\\n    Tick.Info memory lower,\\n    Tick.Info memory upper,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    int24 tickCurrent,\\n    uint256 feeGrowthGlobal0X128,\\n    uint256 feeGrowthGlobal1X128\\n  ) internal pure returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\\n    // calculate fee growth below\\n    uint256 feeGrowthBelow0X128;\\n    uint256 feeGrowthBelow1X128;\\n    if (tickCurrent >= tickLower) {\\n      feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\\n      feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\\n    } else {\\n      feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\\n      feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\\n    }\\n\\n    // calculate fee growth above\\n    uint256 feeGrowthAbove0X128;\\n    uint256 feeGrowthAbove1X128;\\n    if (tickCurrent < tickUpper) {\\n      feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\\n      feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\\n    } else {\\n      feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\\n      feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\\n    }\\n\\n    feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\\n    feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\\n  }\\n\\n  /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\n  /// Ithil: always use with info = self[tick]\\n  /// @param info The info tick that will be updated\\n  /// @param tick The tick that will be updated\\n  /// @param tickCurrent The current tick\\n  /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n  /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\\n  /// @param tickCumulative The tick * time elapsed since the pool was first initialized\\n  /// @param time The current block timestamp cast to a uint32\\n  /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\\n  /// @param maxLiquidity The maximum liquidity allocation for a single tick\\n  /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\n  function update(\\n    Tick.Info memory info,\\n    int24 tick,\\n    int24 tickCurrent,\\n    int128 liquidityDelta,\\n    uint256 feeGrowthGlobal0X128,\\n    uint256 feeGrowthGlobal1X128,\\n    uint160 secondsPerLiquidityCumulativeX128,\\n    int56 tickCumulative,\\n    uint32 time,\\n    bool upper,\\n    uint128 maxLiquidity\\n  ) internal pure returns (bool flipped) {\\n    uint128 liquidityGrossBefore = info.liquidityGross;\\n    uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\\n\\n    require(liquidityGrossAfter <= maxLiquidity, \\\"LO\\\");\\n\\n    flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n    if (liquidityGrossBefore == 0) {\\n      // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\n      if (tick <= tickCurrent) {\\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\\n        info.tickCumulativeOutside = tickCumulative;\\n        info.secondsOutside = time;\\n      }\\n      info.initialized = true;\\n    }\\n\\n    info.liquidityGross = liquidityGrossAfter;\\n\\n    // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\n    info.liquidityNet = upper\\n      ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\\n      : int256(info.liquidityNet).add(liquidityDelta).toInt128();\\n  }\\n\\n  /// @notice Transitions to next tick as needed by price movement\\n  /// @param info The result of the mapping containing all tick information for initialized ticks\\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\\n  /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\\n  /// @param tickCumulative The tick * time elapsed since the pool was first initialized\\n  /// @param time The current block.timestamp\\n  /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n  function cross(\\n    Tick.Info memory info,\\n    uint256 feeGrowthGlobal0X128,\\n    uint256 feeGrowthGlobal1X128,\\n    uint160 secondsPerLiquidityCumulativeX128,\\n    int56 tickCumulative,\\n    uint32 time\\n  ) internal pure returns (int128 liquidityNet) {\\n    info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\\n    info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\\n    info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128 - info.secondsPerLiquidityOutsideX128;\\n    info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\\n    info.secondsOutside = time - info.secondsOutside;\\n    liquidityNet = info.liquidityNet;\\n  }\\n}\\n\",\"keccak256\":\"0x53d99c9e769a4d6fc8f96a4db7c772a83a92b1822484992b2667b1afeb4c471e\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/TickBitmap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\nimport \\\"./BitMath.sol\\\";\\n\\n/// @title Packed tick initialized state library\\n/// @notice Stores a packed mapping of tick index to its initialized state\\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\nlibrary TickBitmap {\\n  /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n  /// @param tick The tick for which to compute the position\\n  /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n  /// @return bitPos The bit position in the word where the flag is stored\\n  /// @dev simply divides @param tick by 256 with remainder: tick = wordPos * 256 + bitPos\\n  function position(int24 tick) internal pure returns (int16 wordPos, uint8 bitPos) {\\n    wordPos = int16(tick >> 8);\\n    bitPos = uint8(int8(tick % 256));\\n  }\\n\\n  /// Written by Ithil\\n  function computeWordPos(\\n    int24 tick,\\n    int24 tickSpacing,\\n    bool lte\\n  ) internal pure returns (int16 wordPos) {\\n    int24 compressed = tick / tickSpacing;\\n    if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n    (wordPos, ) = lte ? position(compressed) : position(compressed + 1);\\n  }\\n\\n  /// @notice Flips the initialized state for a given tick from false to true, or vice versa\\n  /// @param selfResult The result of the mapping in which to flip the tick (Ithil modified)\\n  /// @param tick The tick to flip\\n  /// @param tickSpacing The spacing between usable ticks\\n  function flipTick(\\n    uint256 selfResult,\\n    int24 tick,\\n    int24 tickSpacing\\n  ) internal pure {\\n    require(tick % tickSpacing == 0); // ensure that the tick is spaced\\n    (, uint8 bitPos) = position(tick / tickSpacing);\\n    uint256 mask = 1 << bitPos;\\n    selfResult ^= mask;\\n  }\\n\\n  /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n  /// to the left (less than or equal to) or right (greater than) of the given tick\\n  /// @param selfResult The result of the mapping in which to compute the next initialized tick (Ithil modified)\\n  /// @param tick The starting tick\\n  /// @param tickSpacing The spacing between usable ticks\\n  /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n  /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n  /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n  function nextInitializedTickWithinOneWord(\\n    uint256 selfResult,\\n    int24 tick,\\n    int24 tickSpacing,\\n    bool lte\\n  ) internal pure returns (int24 next, bool initialized) {\\n    int24 compressed = tick / tickSpacing;\\n    if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n    if (lte) {\\n      (, uint8 bitPos) = position(compressed);\\n      // all the 1s at or to the right of the current bitPos\\n      uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n      uint256 masked = selfResult & mask;\\n\\n      // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n      initialized = masked != 0;\\n      // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n      next = initialized\\n        ? (compressed - int24(uint24(bitPos) - uint24(BitMath.mostSignificantBit(masked)))) * tickSpacing\\n        : (compressed - int24(uint24(bitPos))) * tickSpacing;\\n    } else {\\n      // start from the word of the next tick, since the current tick state doesn't matter\\n      (, uint8 bitPos) = position(compressed + 1);\\n      // all the 1s at or to the left of the bitPos\\n      uint256 mask = ~((1 << bitPos) - 1);\\n      uint256 masked = selfResult & mask;\\n\\n      // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n      initialized = masked != 0;\\n      // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n      next = initialized\\n        ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\\n        : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x0dd2a7751c58a90757ef0c4e2a8f438d32e22e3f09eb0697229b1205ebda06dd\",\"license\":\"MIT\"},\"contracts/external/uniswap/quoter/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n  /// @notice Returns ceil(x / y)\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\n  /// @param x The dividend\\n  /// @param y The divisor\\n  /// @return z The quotient, ceil(x / y)\\n  function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    assembly {\\n      z := add(div(x, y), gt(mod(x, y), 0))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6630728b314eb1b184ce20a66bb9797539211e40a7159890a0990de28e0f7e66\",\"license\":\"MIT\"},\"contracts/liquidators/IFundsConversionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRedemptionStrategy.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IFundsConversionStrategy is IRedemptionStrategy {\\n  function convert(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n\\n  function estimateInputAmount(uint256 outputAmount, bytes memory strategyData)\\n    external\\n    view\\n    returns (IERC20Upgradeable inputToken, uint256 inputAmount);\\n}\\n\",\"keccak256\":\"0xa8bb583271cf321f13f24304b0d03aa951d63aca61bcbbff22d2b44138240271\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n\\n  function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4cf72f79d325ed14f3c8d52e013a8d1f8bfe15b59553bbd9dff251761baf60dd\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/UniswapV3Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IRedemptionStrategy } from \\\"./IRedemptionStrategy.sol\\\";\\nimport { IV3SwapRouter } from \\\"../external/uniswap/IV3SwapRouter.sol\\\";\\n\\nimport { IERC20Upgradeable } from \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ncontract UniswapV3Liquidator is IRedemptionStrategy {\\n  /**\\n   * @dev Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`\\n   * @param inputToken Address of the token\\n   * @param inputAmount input amount\\n   * @param strategyData context specific data like input token, pool address and tx expiratio period\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external override returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    return _convert(inputToken, inputAmount, strategyData);\\n  }\\n\\n  function _convert(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) internal returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    (, address _outputToken, uint24 fee, IV3SwapRouter swapRouter, ) = abi.decode(\\n      strategyData,\\n      (address, address, uint24, IV3SwapRouter, address)\\n    );\\n    outputToken = IERC20Upgradeable(_outputToken);\\n\\n    inputToken.approve(address(swapRouter), inputAmount);\\n\\n    outputAmount = swapRouter.exactInputSingle(\\n      IV3SwapRouter.ExactInputSingleParams(\\n        address(inputToken),\\n        _outputToken,\\n        fee,\\n        address(this),\\n        inputAmount,\\n        0,\\n        0\\n      )\\n    );\\n  }\\n\\n  function name() public pure virtual override returns (string memory) {\\n    return \\\"UniswapV3Liquidator\\\";\\n  }\\n}\\n\",\"keccak256\":\"0xca10c4271aab376d1bd2a01c448f8102e997832da138dd982fc23cbe89c88b91\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/UniswapV3LiquidatorFunder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { FixedPointMathLib } from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\nimport { IFundsConversionStrategy } from \\\"./IFundsConversionStrategy.sol\\\";\\nimport { IRedemptionStrategy } from \\\"./IRedemptionStrategy.sol\\\";\\nimport \\\"./UniswapV3Liquidator.sol\\\";\\n\\nimport { Quoter } from \\\"../external/uniswap/quoter/Quoter.sol\\\";\\n\\ncontract UniswapV3LiquidatorFunder is UniswapV3Liquidator, IFundsConversionStrategy {\\n  using FixedPointMathLib for uint256;\\n\\n  function convert(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external override returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    return _convert(inputToken, inputAmount, strategyData);\\n  }\\n\\n  /**\\n   * @dev Estimates the needed input amount of the input token for the conversion to return the desired output amount.\\n   * @param outputAmount the desired output amount\\n   * @param strategyData the input token\\n   */\\n  function estimateInputAmount(uint256 outputAmount, bytes memory strategyData)\\n    external\\n    view\\n    returns (IERC20Upgradeable inputToken, uint256 inputAmount)\\n  {\\n    (address _inputToken, address _outputToken, uint24 fee, , Quoter quoter) = abi.decode(\\n      strategyData,\\n      (address, address, uint24, IV3SwapRouter, Quoter)\\n    );\\n\\n    inputAmount = quoter.estimateMinSwapUniswapV3(_inputToken, _outputToken, outputAmount, fee);\\n    inputToken = IERC20Upgradeable(_inputToken);\\n  }\\n\\n  function name() public pure override(UniswapV3Liquidator, IRedemptionStrategy) returns (string memory) {\\n    return \\\"UniswapV3LiquidatorFunder\\\";\\n  }\\n}\\n\",\"keccak256\":\"0xf251b80dd8b16f0d8eeb90dd033f4fca4666c9c7931546f870ece6b6d4b900ff\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"solmate/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xab8ca9afbb0f7412e1408d4f111b53cc00813bc752236638ad336050ea2188f8\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105f0806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde031461005157806310badf4e1461009957806330132996146100cb57806389eabf0214610099575b600080fd5b604080518082018252601981527f556e697377617056334c697175696461746f7246756e64657200000000000000602082015290516100909190610345565b60405180910390f35b6100ac6100a736600461044f565b6100de565b604080516001600160a01b039093168352602083019190915201610090565b6100ac6100d93660046104a8565b6100f8565b6000806100ec8585856101b6565b91509150935093915050565b600080600080600080868060200190518101906101159190610507565b6040516386ed50b160e01b81526001600160a01b0380871660048301528086166024830152604482018f905262ffffff8516606483015295995093975091955090935050908216906386ed50b190608401602060405180830381865afa158015610183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a79190610578565b93989397509295505050505050565b6000806000806000858060200190518101906101d29190610507565b5060405163095ea7b360e01b81526001600160a01b038083166004830152602482018d90529399508997509195509350908a16915063095ea7b3906044016020604051808303816000875af115801561022f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102539190610591565b506040805160e0810182526001600160a01b038a811682528581166020830190815262ffffff8681168486019081523060608601908152608086018e8152600060a0880181815260c0890191825298516304e45aaf60e01b815297518716600489015294518616602488015291519092166044860152905183166064850152516084840152925160a48301529151821660c4820152908216906304e45aaf9060e4016020604051808303816000875af1158015610314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103389190610578565b9350505050935093915050565b60006020808352835180602085015260005b8181101561037357858101830151858201604001528201610357565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146103a957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126103d357600080fd5b813567ffffffffffffffff808211156103ee576103ee6103ac565b604051601f8301601f19908116603f01168101908282118183101715610416576104166103ac565b8160405283815286602085880101111561042f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561046457600080fd5b833561046f81610394565b925060208401359150604084013567ffffffffffffffff81111561049257600080fd5b61049e868287016103c2565b9150509250925092565b600080604083850312156104bb57600080fd5b82359150602083013567ffffffffffffffff8111156104d957600080fd5b6104e5858286016103c2565b9150509250929050565b805162ffffff8116811461050257600080fd5b919050565b600080600080600060a0868803121561051f57600080fd5b855161052a81610394565b602087015190955061053b81610394565b9350610549604087016104ef565b9250606086015161055981610394565b608087015190925061056a81610394565b809150509295509295909350565b60006020828403121561058a57600080fd5b5051919050565b6000602082840312156105a357600080fd5b815180151581146105b357600080fd5b939250505056fea26469706673582212207716a92ad1236e367da9c113a9a242d174933ce2c80dd5c13c7d7e6d17c3d27164736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde031461005157806310badf4e1461009957806330132996146100cb57806389eabf0214610099575b600080fd5b604080518082018252601981527f556e697377617056334c697175696461746f7246756e64657200000000000000602082015290516100909190610345565b60405180910390f35b6100ac6100a736600461044f565b6100de565b604080516001600160a01b039093168352602083019190915201610090565b6100ac6100d93660046104a8565b6100f8565b6000806100ec8585856101b6565b91509150935093915050565b600080600080600080868060200190518101906101159190610507565b6040516386ed50b160e01b81526001600160a01b0380871660048301528086166024830152604482018f905262ffffff8516606483015295995093975091955090935050908216906386ed50b190608401602060405180830381865afa158015610183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a79190610578565b93989397509295505050505050565b6000806000806000858060200190518101906101d29190610507565b5060405163095ea7b360e01b81526001600160a01b038083166004830152602482018d90529399508997509195509350908a16915063095ea7b3906044016020604051808303816000875af115801561022f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102539190610591565b506040805160e0810182526001600160a01b038a811682528581166020830190815262ffffff8681168486019081523060608601908152608086018e8152600060a0880181815260c0890191825298516304e45aaf60e01b815297518716600489015294518616602488015291519092166044860152905183166064850152516084840152925160a48301529151821660c4820152908216906304e45aaf9060e4016020604051808303816000875af1158015610314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103389190610578565b9350505050935093915050565b60006020808352835180602085015260005b8181101561037357858101830151858201604001528201610357565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146103a957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126103d357600080fd5b813567ffffffffffffffff808211156103ee576103ee6103ac565b604051601f8301601f19908116603f01168101908282118183101715610416576104166103ac565b8160405283815286602085880101111561042f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561046457600080fd5b833561046f81610394565b925060208401359150604084013567ffffffffffffffff81111561049257600080fd5b61049e868287016103c2565b9150509250925092565b600080604083850312156104bb57600080fd5b82359150602083013567ffffffffffffffff8111156104d957600080fd5b6104e5858286016103c2565b9150509250929050565b805162ffffff8116811461050257600080fd5b919050565b600080600080600060a0868803121561051f57600080fd5b855161052a81610394565b602087015190955061053b81610394565b9350610549604087016104ef565b9250606086015161055981610394565b608087015190925061056a81610394565b809150509295509295909350565b60006020828403121561058a57600080fd5b5051919050565b6000602082840312156105a357600080fd5b815180151581146105b357600080fd5b939250505056fea26469706673582212207716a92ad1236e367da9c113a9a242d174933ce2c80dd5c13c7d7e6d17c3d27164736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "estimateInputAmount(uint256,bytes)": {
        "details": "Estimates the needed input amount of the input token for the conversion to return the desired output amount.",
        "params": {
          "outputAmount": "the desired output amount",
          "strategyData": "the input token"
        }
      },
      "redeem(address,uint256,bytes)": {
        "details": "Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`",
        "params": {
          "inputAmount": "input amount",
          "inputToken": "Address of the token",
          "strategyData": "context specific data like input token, pool address and tx expiratio period"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}