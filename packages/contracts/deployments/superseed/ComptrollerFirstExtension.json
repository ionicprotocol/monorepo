{
  "address": "0x284bb7298F3d7B99CA105a468c4E696D11150E6E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ICErc20",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pauseState",
          "type": "bool"
        }
      ],
      "name": "MarketActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ICErc20",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "MarketUnlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ICErc20",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "NewBorrowCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBorrowCapGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "NewBorrowCapGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPauseGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "NewPauseGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ICErc20",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "NewSupplyCap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "blacklisted",
          "type": "bool"
        }
      ],
      "name": "_blacklistBorrowingAgainstCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "_blacklistBorrowingAgainstCollateralWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "_borrowCapWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getExtensionFunctions",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "flywheelAddress",
          "type": "address"
        }
      ],
      "name": "_removeFlywheel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowCap",
          "type": "uint256"
        }
      ],
      "name": "_setBorrowCapForCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "_setBorrowCapForCollateralWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBorrowCapGuardian",
          "type": "address"
        }
      ],
      "name": "_setBorrowCapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICErc20",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setBorrowPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICErc20[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newBorrowCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketBorrowCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICErc20[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newSupplyCaps",
          "type": "uint256[]"
        }
      ],
      "name": "_setMarketSupplyCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICErc20",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setMintPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPauseGuardian",
          "type": "address"
        }
      ],
      "name": "_setPauseGuardian",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setSeizePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "_setTransferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        }
      ],
      "name": "_supplyCapWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICErc20",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "_unsupportMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "accountAssets",
      "outputs": [
        {
          "internalType": "contract ICErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "flywheelAddress",
          "type": "address"
        }
      ],
      "name": "addNonAccruingFlywheel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminHasRights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allBorrowers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "contract ICErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCapForCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCapGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowingAgainstCollateralBlacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokensByUnderlying",
      "outputs": [
        {
          "internalType": "contract ICErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "effectiveBorrowCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "effectiveSupplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supplyCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enforceWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccruingFlywheels",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBorrowers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBorrowersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "contract ICErc20[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICErc20",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "contract ICErc20",
          "name": "cTokenModify",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "redeeming",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAssetAsCollateralValueCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        }
      ],
      "name": "getPaginatedBorrowers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalPages",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_pageOfBorrowers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsDistributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getWhitelistedBorrowersBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getWhitelistedSuppliersSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supplied",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ionicAdmin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ionicAdminHasRights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklistBorrowingAgainstCollateralWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cTokenBorrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBorrowCapForCollateralWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBorrowCapWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isComptroller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isSupplyCapWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isUserOfPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationIncentiveMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isListed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactorMantissa",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonAccruingRewardsDistributors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract BasePriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerInSFS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsDistributors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seizeGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "suppliers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferGuardianPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x580266018cff9556ee61bcb4a67a62e6227bad34d45d081ad2f6c0a57fe740e1",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0x284bb7298F3d7B99CA105a468c4E696D11150E6E",
    "transactionIndex": 1,
    "gasUsed": "3575655",
    "logsBloom": "0x
    "blockHash": "0x65d036b65436ead2396b27c0f2faa872c7610a582aba848a2b7c7bebfdbe5a97",
    "transactionHash": "0x580266018cff9556ee61bcb4a67a62e6227bad34d45d081ad2f6c0a57fe740e1",
    "logs": [],
    "blockNumber": 4134114,
    "cumulativeGasUsed": "3619533",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4516d6f7efae8f060f60e63dbb0131ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICErc20\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pauseState\",\"type\":\"bool\"}],\"name\":\"MarketActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICErc20\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICErc20\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"NewBorrowCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBorrowCapGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"NewBorrowCapGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauseGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"NewPauseGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ICErc20\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"NewSupplyCap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"_blacklistBorrowingAgainstCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"_blacklistBorrowingAgainstCollateralWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"_borrowCapWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getExtensionFunctions\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flywheelAddress\",\"type\":\"address\"}],\"name\":\"_removeFlywheel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"}],\"name\":\"_setBorrowCapForCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"_setBorrowCapForCollateralWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBorrowCapGuardian\",\"type\":\"address\"}],\"name\":\"_setBorrowCapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setBorrowPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICErc20[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newBorrowCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketBorrowCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICErc20[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newSupplyCaps\",\"type\":\"uint256[]\"}],\"name\":\"_setMarketSupplyCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setMintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauseGuardian\",\"type\":\"address\"}],\"name\":\"_setPauseGuardian\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setSeizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"_setTransferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"_supplyCapWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_unsupportMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flywheelAddress\",\"type\":\"address\"}],\"name\":\"addNonAccruingFlywheel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminHasRights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBorrowers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCapForCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCapGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowingAgainstCollateralBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokensByUnderlying\",\"outputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"effectiveBorrowCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"effectiveSupplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforceWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccruingFlywheels\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBorrowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBorrowersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"contract ICErc20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"cTokenModify\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"redeeming\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAssetAsCollateralValueCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"}],\"name\":\"getPaginatedBorrowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalPages\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_pageOfBorrowers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getWhitelistedBorrowersBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getWhitelistedSuppliersSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplied\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ionicAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ionicAdminHasRights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklistBorrowingAgainstCollateralWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBorrowCapForCollateralWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBorrowCapWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSupplyCapWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserOfPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonAccruingRewardsDistributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract BasePriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerInSFS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsDistributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"suppliers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Failure(uint256,uint256,uint256)\":{\"details\":\"`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*\"}},\"kind\":\"dev\",\"methods\":{\"_getExtensionFunctions()\":{\"returns\":{\"_0\":\"a list of all the function selectors that this logic extension exposes\"}},\"_removeFlywheel(address)\":{\"details\":\"Removes a flywheel from the accruing or non-accruing array\",\"params\":{\"flywheelAddress\":\"The address of the flywheel to remove from the accruing or non-accruing array\"},\"returns\":{\"_0\":\"true if the flywheel was found and removed\"}},\"_setBorrowCapGuardian(address)\":{\"params\":{\"newBorrowCapGuardian\":\"The address of the new Borrow Cap Guardian\"}},\"_setMarketBorrowCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the borrow caps for\",\"newBorrowCaps\":\"The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\"}},\"_setMarketSupplyCaps(address[],uint256[])\":{\"details\":\"Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\",\"params\":{\"cTokens\":\"The addresses of the markets (tokens) to change the supply caps for\",\"newSupplyCaps\":\"The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\"}},\"_setPauseGuardian(address)\":{\"params\":{\"newPauseGuardian\":\"The address of the new Pause Guardian\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"_unsupportMarket(address)\":{\"details\":\"Admin function unset isListed and collateralFactorMantissa and unadd support for the market\",\"params\":{\"cToken\":\"The address of the market (token) to unlist\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure. (See enum Error for details)\"}},\"addNonAccruingFlywheel(address)\":{\"details\":\"Adds a flywheel to the non-accruing list and if already in the accruing, removes it from that list\",\"params\":{\"flywheelAddress\":\"The address of the flywheel to add to the non-accruing\"}},\"effectiveBorrowCaps(address)\":{\"params\":{\"cToken\":\"The address of the cToken.\"}},\"effectiveSupplyCaps(address)\":{\"params\":{\"cToken\":\"The address of the cToken.\"}},\"getAllBorrowers()\":{\"details\":\"The automatic getter may be used to access an individual borrower.\",\"returns\":{\"_0\":\"The list of borrower account addresses\"}},\"getAllMarkets()\":{\"details\":\"The automatic getter may be used to access an individual market.\",\"returns\":{\"_0\":\"The list of market addresses\"}},\"getWhitelist()\":{\"details\":\"The automatic getter may be used to access an individual whitelist status.\",\"returns\":{\"_0\":\"The list of borrower account addresses\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ActionPaused(string,bool)\":{\"notice\":\"Emitted when an action is paused globally\"},\"MarketActionPaused(address,string,bool)\":{\"notice\":\"Emitted when an action is paused on a market\"},\"MarketUnlisted(address)\":{\"notice\":\"Emitted when an admin unsupports a market\"},\"NewBorrowCap(address,uint256)\":{\"notice\":\"Emitted when borrow cap for a cToken is changed\"},\"NewBorrowCapGuardian(address,address)\":{\"notice\":\"Emitted when borrow cap guardian is changed\"},\"NewPauseGuardian(address,address)\":{\"notice\":\"Emitted when pause guardian is changed\"},\"NewSupplyCap(address,uint256)\":{\"notice\":\"Emitted when supply cap for a cToken is changed\"}},\"kind\":\"user\",\"methods\":{\"_setBorrowCapGuardian(address)\":{\"notice\":\"Admin function to change the Borrow Cap Guardian\"},\"_setMarketBorrowCaps(address[],uint256[])\":{\"notice\":\"Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\"},\"_setMarketSupplyCaps(address[],uint256[])\":{\"notice\":\"Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\"},\"_setPauseGuardian(address)\":{\"notice\":\"Admin function to change the Pause Guardian\"},\"_unsupportMarket(address)\":{\"notice\":\"Removed a market from the markets mapping and sets it as unlisted\"},\"accountAssets(address,uint256)\":{\"notice\":\"Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\"},\"addNonAccruingFlywheel(address)\":{\"notice\":\"Returns true if the accruing flyhwheel was found and replaced\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"adminHasRights()\":{\"notice\":\"Whether or not the admin has admin rights\"},\"allBorrowers(uint256)\":{\"notice\":\"A list of all borrowers who have entered markets\"},\"allMarkets(uint256)\":{\"notice\":\"A list of all markets\"},\"borrowCapGuardian()\":{\"notice\":\"The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\"},\"borrowCaps(address)\":{\"notice\":\"Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\"},\"cTokensByUnderlying(address)\":{\"notice\":\"All cTokens addresses mapped by their underlying token addresses\"},\"closeFactorMantissa()\":{\"notice\":\"Multiplier used to calculate the maximum repayAmount when liquidating a borrow\"},\"effectiveBorrowCaps(address)\":{\"notice\":\"Gets the borrow cap of a cToken in the units of the underlying asset.\"},\"effectiveSupplyCaps(address)\":{\"notice\":\"Gets the supply cap of a cToken in the units of the underlying asset.\"},\"enforceWhitelist()\":{\"notice\":\"Whether or not the supplier whitelist is enforced\"},\"getAllBorrowers()\":{\"notice\":\"Return all of the borrowers\"},\"getAllMarkets()\":{\"notice\":\"Return all of the markets\"},\"getRewardsDistributors()\":{\"notice\":\"Returns an array of all accruing and non-accruing flywheels\"},\"getWhitelist()\":{\"notice\":\"Return all of the whitelist\"},\"ionicAdminHasRights()\":{\"notice\":\"Whether or not the Ionic admin has admin rights\"},\"isComptroller()\":{\"notice\":\"Indicator that this is a Comptroller contract (for inspection)\"},\"liquidationIncentiveMantissa()\":{\"notice\":\"Multiplier representing the discount on collateral that a liquidator receives\"},\"markets(address)\":{\"notice\":\"Official mapping of cTokens -> Market metadata\"},\"nonAccruingRewardsDistributors(uint256)\":{\"notice\":\"RewardsDistributor to list for claiming, but not to notify of flywheel changes.\"},\"oracle()\":{\"notice\":\"Oracle which gives the price of any given asset\"},\"pauseGuardian()\":{\"notice\":\"The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market.\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"rewardsDistributors(uint256)\":{\"notice\":\"RewardsDistributor contracts to notify of flywheel changes.\"},\"supplyCaps(address)\":{\"notice\":\"Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\"},\"whitelist(address)\":{\"notice\":\"Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\"},\"whitelistArray(uint256)\":{\"notice\":\"An array of all whitelisted accounts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compound/ComptrollerFirstExtension.sol\":\"ComptrollerFirstExtension\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x636eab608b4563c01e88042aba9330e6fe69af2c567fe1adf4d85731974ac81d\",\"license\":\"MIT\"},\"adrastia-periphery/rates/IHistoricalRates.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./RateLibrary.sol\\\";\\n\\n/**\\n * @title IHistoricalRates\\n * @notice An interface that defines a contract that stores historical rates.\\n */\\ninterface IHistoricalRates {\\n    /// @notice Gets an rate for a token at a specific index.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param index The index of the rate to get, where index 0 contains the latest rate, and the last\\n    ///   index contains the oldest rate (uses reverse chronological ordering).\\n    /// @return rate The rate for the token at the specified index.\\n    function getRateAt(address token, uint256 index) external view returns (RateLibrary.Rate memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(address token, uint256 amount) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @param offset The index of the first rate to get (default: 0).\\n    /// @param increment The increment between rates to get (default: 1).\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the number of rates for a token.\\n    /// @param token The address of the token to get the number of rates for.\\n    /// @return count The number of rates for the token.\\n    function getRatesCount(address token) external view returns (uint256);\\n\\n    /// @notice Gets the capacity of rates for a token.\\n    /// @param token The address of the token to get the capacity of rates for.\\n    /// @return capacity The capacity of rates for the token.\\n    function getRatesCapacity(address token) external view returns (uint256);\\n\\n    /// @notice Sets the capacity of rates for a token.\\n    /// @param token The address of the token to set the capacity of rates for.\\n    /// @param amount The new capacity of rates for the token.\\n    function setRatesCapacity(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2754968c368df628f1ed00c2016b1a73f0f9b44f29e48d405887ad108723b3af\",\"license\":\"MIT\"},\"adrastia-periphery/rates/RateLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary RateLibrary {\\n    struct Rate {\\n        uint64 target;\\n        uint64 current;\\n        uint32 timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x397b79cf9f183afa76db3c8d10cffb408e31ba154900f671a7e93c071bacbff4\",\"license\":\"MIT\"},\"contracts/adrastia/PrudentiaLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nlibrary PrudentiaLib {\\n  struct PrudentiaConfig {\\n    address controller; // Adrastia Prudentia controller address\\n    uint8 offset; // Offset for delayed rate activation\\n    int8 decimalShift; // Positive values scale the rate up (in powers of 10), negative values scale the rate down\\n  }\\n}\\n\",\"keccak256\":\"0x8cc50f1a5dab30e0c205b0bba5f58c18eda9ebf01c661895c8f40678b86bf31f\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IonicComptroller } from \\\"./ComptrollerInterface.sol\\\";\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\nimport { ComptrollerV3Storage } from \\\"./ComptrollerStorage.sol\\\";\\nimport { AddressesProvider } from \\\"../ionic/AddressesProvider.sol\\\";\\n\\nabstract contract CTokenAdminStorage {\\n  /*\\n   * Administrator for Ionic\\n   */\\n  address payable public ionicAdmin;\\n}\\n\\nabstract contract CErc20Storage is CTokenAdminStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  /*\\n   * Maximum borrow rate that can ever be applied (.0005% / block)\\n   */\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  /*\\n   * Maximum fraction of interest that can be set aside for reserves + fees\\n   */\\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  IonicComptroller public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  /*\\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n   */\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for admin fees\\n   */\\n  uint256 public adminFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for Ionic fees\\n   */\\n  uint256 public ionicFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total amount of admin fees of the underlying held in this market\\n   */\\n  uint256 public totalAdminFees;\\n\\n  /**\\n   * @notice Total amount of Ionic fees of the underlying held in this market\\n   */\\n  uint256 public totalIonicFees;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  /*\\n   * Official record of token balances for each account\\n   */\\n  mapping(address => uint256) internal accountTokens;\\n\\n  /*\\n   * Approved token transfer amounts on behalf of others\\n   */\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  /*\\n   * Mapping of account addresses to outstanding borrow balances\\n   */\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /*\\n   * Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n  /*\\n   * Share of seized collateral taken as fees\\n   */\\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\\n\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n\\n  /**\\n   * @notice Addresses Provider\\n   */\\n  AddressesProvider public ap;\\n}\\n\\nabstract contract CTokenBaseEvents {\\n  /* ERC20 */\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the admin fee is changed\\n   */\\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\n\\n  /**\\n   * @notice Event emitted when the Ionic fee is changed\\n   */\\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n}\\n\\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\\n  event Flash(address receiver, uint256 amount);\\n}\\n\\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral,\\n    uint256 seizeTokens\\n  );\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n}\\n\\ninterface CTokenFirstExtensionInterface {\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function exchangeRateCurrent() external view returns (uint256);\\n\\n  function accrueInterest() external returns (uint256);\\n\\n  function totalBorrowsCurrent() external view returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external view returns (uint256);\\n\\n  function getTotalUnderlyingSupplied() external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external view returns (uint256);\\n\\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n  function flash(uint256 amount, bytes calldata data) external;\\n\\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\\n\\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\\n\\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\\n\\n  function registerInSFS() external returns (uint256);\\n}\\n\\ninterface CTokenSecondExtensionInterface {\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\\n\\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\\n\\n  function selfTransferOut(address to, uint256 amount) external;\\n\\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\\n}\\n\\ninterface CDelegatorInterface {\\n  function implementation() external view returns (address);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\\n\\n  /**\\n   * @dev upgrades the implementation if necessary\\n   */\\n  function _upgrade() external;\\n}\\n\\ninterface CDelegateInterface {\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes calldata data) external;\\n\\n  function delegateType() external pure returns (uint8);\\n\\n  function contractType() external pure returns (string memory);\\n}\\n\\nabstract contract CErc20AdminBase is CErc20Storage {\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\n    return\\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\\n  }\\n}\\n\\nabstract contract CErc20FirstExtensionBase is\\n  CErc20AdminBase,\\n  CTokenFirstExtensionEvents,\\n  CTokenFirstExtensionInterface\\n{}\\n\\nabstract contract CTokenSecondExtensionBase is\\n  CErc20AdminBase,\\n  CTokenSecondExtensionEvents,\\n  CTokenSecondExtensionInterface,\\n  CDelegateInterface\\n{}\\n\\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\\n\\ninterface CErc20StorageInterface {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function ionicAdmin() external view returns (address);\\n\\n  function ionicAdminHasRights() external view returns (bool);\\n\\n  function comptroller() external view returns (IonicComptroller);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function ionicFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function protocolSeizeShareMantissa() external view returns (uint256);\\n\\n  function feeSeizeShareMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalIonicFees() external view returns (uint256);\\n\\n  function totalBorrows() external view returns (uint256);\\n\\n  function accrualBlockNumber() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function borrowIndex() external view returns (uint256);\\n\\n  function interestRateModel() external view returns (address);\\n}\\n\\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\\n  function plugin() external view returns (address);\\n}\\n\\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\\n  function approve(address, address) external;\\n}\\n\\ninterface ICErc20 is\\n  CErc20StorageInterface,\\n  CTokenSecondExtensionInterface,\\n  CTokenFirstExtensionInterface,\\n  CDelegatorInterface,\\n  CDelegateInterface\\n{}\\n\\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\\n  function _updatePlugin(address _plugin) external;\\n}\\n\\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\\n\",\"keccak256\":\"0x7cc75051a5fa860b9ee93d0ba1ac0608921f02308aeff786ce8bbd8d8a70489a\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerFirstExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { DiamondExtension } from \\\"../ionic/DiamondExtension.sol\\\";\\nimport { ComptrollerErrorReporter } from \\\"../compound/ErrorReporter.sol\\\";\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { ComptrollerExtensionInterface, ComptrollerBase, SFSRegister } from \\\"./ComptrollerInterface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract ComptrollerFirstExtension is\\n  DiamondExtension,\\n  ComptrollerBase,\\n  ComptrollerExtensionInterface,\\n  ComptrollerErrorReporter\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @notice Emitted when supply cap for a cToken is changed\\n  event NewSupplyCap(ICErc20 indexed cToken, uint256 newSupplyCap);\\n\\n  /// @notice Emitted when borrow cap for a cToken is changed\\n  event NewBorrowCap(ICErc20 indexed cToken, uint256 newBorrowCap);\\n\\n  /// @notice Emitted when borrow cap guardian is changed\\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n  /// @notice Emitted when pause guardian is changed\\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n  /// @notice Emitted when an action is paused globally\\n  event ActionPaused(string action, bool pauseState);\\n\\n  /// @notice Emitted when an action is paused on a market\\n  event MarketActionPaused(ICErc20 cToken, string action, bool pauseState);\\n\\n  /// @notice Emitted when an admin unsupports a market\\n  event MarketUnlisted(ICErc20 cToken);\\n\\n  function _getExtensionFunctions() external pure virtual override returns (bytes4[] memory) {\\n    uint8 fnsCount = 33;\\n    bytes4[] memory functionSelectors = new bytes4[](fnsCount);\\n    functionSelectors[--fnsCount] = this.addNonAccruingFlywheel.selector;\\n    functionSelectors[--fnsCount] = this._setMarketSupplyCaps.selector;\\n    functionSelectors[--fnsCount] = this._setMarketBorrowCaps.selector;\\n    functionSelectors[--fnsCount] = this._setBorrowCapForCollateralWhitelist.selector;\\n    functionSelectors[--fnsCount] = this._blacklistBorrowingAgainstCollateralWhitelist.selector;\\n    functionSelectors[--fnsCount] = this._supplyCapWhitelist.selector;\\n    functionSelectors[--fnsCount] = this._borrowCapWhitelist.selector;\\n    functionSelectors[--fnsCount] = this._setBorrowCapGuardian.selector;\\n    functionSelectors[--fnsCount] = this._setPauseGuardian.selector;\\n    functionSelectors[--fnsCount] = this._setMintPaused.selector;\\n    functionSelectors[--fnsCount] = this._setBorrowPaused.selector;\\n    functionSelectors[--fnsCount] = this._setTransferPaused.selector;\\n    functionSelectors[--fnsCount] = this._setSeizePaused.selector;\\n    functionSelectors[--fnsCount] = this._unsupportMarket.selector;\\n    functionSelectors[--fnsCount] = this.getAllMarkets.selector;\\n    functionSelectors[--fnsCount] = this.getAllBorrowers.selector;\\n    functionSelectors[--fnsCount] = this.getAllBorrowersCount.selector;\\n    functionSelectors[--fnsCount] = this.getPaginatedBorrowers.selector;\\n    functionSelectors[--fnsCount] = this.getWhitelist.selector;\\n    functionSelectors[--fnsCount] = this.getRewardsDistributors.selector;\\n    functionSelectors[--fnsCount] = this.isUserOfPool.selector;\\n    functionSelectors[--fnsCount] = this.getAccruingFlywheels.selector;\\n    functionSelectors[--fnsCount] = this._removeFlywheel.selector;\\n    functionSelectors[--fnsCount] = this._setBorrowCapForCollateral.selector;\\n    functionSelectors[--fnsCount] = this._blacklistBorrowingAgainstCollateral.selector;\\n    functionSelectors[--fnsCount] = this.isBorrowCapForCollateralWhitelisted.selector;\\n    functionSelectors[--fnsCount] = this.isBlacklistBorrowingAgainstCollateralWhitelisted.selector;\\n    functionSelectors[--fnsCount] = this.isSupplyCapWhitelisted.selector;\\n    functionSelectors[--fnsCount] = this.isBorrowCapWhitelisted.selector;\\n    functionSelectors[--fnsCount] = this.getWhitelistedSuppliersSupply.selector;\\n    functionSelectors[--fnsCount] = this.getWhitelistedBorrowersBorrows.selector;\\n    functionSelectors[--fnsCount] = this.getAssetAsCollateralValueCap.selector;\\n    functionSelectors[--fnsCount] = this.registerInSFS.selector;\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n    return functionSelectors;\\n  }\\n\\n  /**\\n   * @notice Returns true if the accruing flyhwheel was found and replaced\\n   * @dev Adds a flywheel to the non-accruing list and if already in the accruing, removes it from that list\\n   * @param flywheelAddress The address of the flywheel to add to the non-accruing\\n   */\\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool) {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n    require(flywheelAddress != address(0), \\\"!flywheel\\\");\\n\\n    for (uint256 i = 0; i < nonAccruingRewardsDistributors.length; i++) {\\n      require(flywheelAddress != nonAccruingRewardsDistributors[i], \\\"!alreadyadded\\\");\\n    }\\n\\n    // add it to the non-accruing\\n    nonAccruingRewardsDistributors.push(flywheelAddress);\\n\\n    // remove it from the accruing\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++) {\\n      if (flywheelAddress == rewardsDistributors[i]) {\\n        rewardsDistributors[i] = rewardsDistributors[rewardsDistributors.length - 1];\\n        rewardsDistributors.pop();\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function getAssetAsCollateralValueCap(\\n    ICErc20 collateral,\\n    ICErc20 cTokenModify,\\n    bool redeeming,\\n    address account\\n  ) external view returns (uint256) {\\n    if (address(collateral) == address(cTokenModify) && !redeeming) {\\n      // the collateral asset counts as 0 liquidity when borrowed\\n      return 0;\\n    }\\n\\n    uint256 assetAsCollateralValueCap = type(uint256).max;\\n    if (address(cTokenModify) != address(0)) {\\n      // if the borrowed asset is blacklisted against this collateral & account is not whitelisted\\n      if (\\n        borrowingAgainstCollateralBlacklist[address(cTokenModify)][address(collateral)] &&\\n        !borrowingAgainstCollateralBlacklistWhitelist[address(cTokenModify)][address(collateral)].contains(account)\\n      ) {\\n        assetAsCollateralValueCap = 0;\\n      } else {\\n        // for each user the value of this kind of collateral is capped regardless of the amount borrowed\\n        // denominated in the borrowed asset\\n        uint256 borrowCapForCollateral = borrowCapForCollateral[address(cTokenModify)][address(collateral)];\\n        // check if set to any value & account is not whitelisted\\n        if (\\n          borrowCapForCollateral != 0 &&\\n          !borrowCapForCollateralWhitelist[address(cTokenModify)][address(collateral)].contains(account)\\n        ) {\\n          uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(cTokenModify);\\n          // this asset usage as collateral is capped at the native value of the borrow cap\\n          assetAsCollateralValueCap = (borrowCapForCollateral * borrowedAssetPrice) / 1e18;\\n        }\\n      }\\n    }\\n\\n    uint256 supplyCap = effectiveSupplyCaps(address(collateral));\\n\\n    // if there is any supply cap, don't allow donations to the market/plugin to go around it\\n    if (supplyCap > 0 && !supplyCapWhitelist[address(collateral)].contains(account)) {\\n      uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateral);\\n      uint256 supplyCapValue = (supplyCap * collateralAssetPrice) / 1e18;\\n      supplyCapValue = (supplyCapValue * markets[address(collateral)].collateralFactorMantissa) / 1e18;\\n      if (supplyCapValue < assetAsCollateralValueCap) assetAsCollateralValueCap = supplyCapValue;\\n    }\\n\\n    return assetAsCollateralValueCap;\\n  }\\n\\n  /**\\n   * @notice Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\\n   * @dev Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\\n   * @param cTokens The addresses of the markets (tokens) to change the supply caps for\\n   * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\\n   */\\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external {\\n    require(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"!admin\\\");\\n\\n    uint256 numMarkets = cTokens.length;\\n    uint256 numSupplyCaps = newSupplyCaps.length;\\n\\n    require(numMarkets != 0 && numMarkets == numSupplyCaps, \\\"!input\\\");\\n\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\\n      emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n   * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n   * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n   * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n   */\\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external {\\n    require(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"!admin\\\");\\n\\n    uint256 numMarkets = cTokens.length;\\n    uint256 numBorrowCaps = newBorrowCaps.length;\\n\\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"!input\\\");\\n\\n    for (uint256 i = 0; i < numMarkets; i++) {\\n      borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n      emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Admin function to change the Borrow Cap Guardian\\n   * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n   */\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n    require(msg.sender == admin, \\\"!admin\\\");\\n\\n    // Save current value for inclusion in log\\n    address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n    // Store borrowCapGuardian with value newBorrowCapGuardian\\n    borrowCapGuardian = newBorrowCapGuardian;\\n\\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n  }\\n\\n  /**\\n   * @notice Admin function to change the Pause Guardian\\n   * @param newPauseGuardian The address of the new Pause Guardian\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _setPauseGuardian(address newPauseGuardian) public returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n    }\\n\\n    // Save current value for inclusion in log\\n    address oldPauseGuardian = pauseGuardian;\\n\\n    // Store pauseGuardian with value newPauseGuardian\\n    pauseGuardian = newPauseGuardian;\\n\\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function _setMintPaused(ICErc20 cToken, bool state) public returns (bool) {\\n    require(markets[address(cToken)].isListed, \\\"!market\\\");\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"!guardian\\\");\\n    require(hasAdminRights() || state == true, \\\"!admin\\\");\\n\\n    mintGuardianPaused[address(cToken)] = state;\\n    emit MarketActionPaused(cToken, \\\"Mint\\\", state);\\n    return state;\\n  }\\n\\n  function _setBorrowPaused(ICErc20 cToken, bool state) public returns (bool) {\\n    require(markets[address(cToken)].isListed, \\\"!market\\\");\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"!guardian\\\");\\n    require(hasAdminRights() || state == true, \\\"!admin\\\");\\n\\n    borrowGuardianPaused[address(cToken)] = state;\\n    emit MarketActionPaused(cToken, \\\"Borrow\\\", state);\\n    return state;\\n  }\\n\\n  function _setTransferPaused(bool state) public returns (bool) {\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"!guardian\\\");\\n    require(hasAdminRights() || state == true, \\\"!admin\\\");\\n\\n    transferGuardianPaused = state;\\n    emit ActionPaused(\\\"Transfer\\\", state);\\n    return state;\\n  }\\n\\n  function _setSeizePaused(bool state) public returns (bool) {\\n    require(msg.sender == pauseGuardian || hasAdminRights(), \\\"!guardian\\\");\\n    require(hasAdminRights() || state == true, \\\"!admin\\\");\\n\\n    seizeGuardianPaused = state;\\n    emit ActionPaused(\\\"Seize\\\", state);\\n    return state;\\n  }\\n\\n  /**\\n   * @notice Removed a market from the markets mapping and sets it as unlisted\\n   * @dev Admin function unset isListed and collateralFactorMantissa and unadd support for the market\\n   * @param cToken The address of the market (token) to unlist\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256) {\\n    // Check admin rights\\n    if (!hasAdminRights()) return fail(Error.UNAUTHORIZED, FailureInfo.UNSUPPORT_MARKET_OWNER_CHECK);\\n\\n    // Check if market is already unlisted\\n    if (!markets[address(cToken)].isListed)\\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.UNSUPPORT_MARKET_DOES_NOT_EXIST);\\n\\n    // Check if market is in use\\n    if (cToken.totalSupply() > 0) return fail(Error.NONZERO_TOTAL_SUPPLY, FailureInfo.UNSUPPORT_MARKET_IN_USE);\\n\\n    // Unlist market\\n    delete markets[address(cToken)];\\n\\n    /* Delete cToken from allMarkets */\\n    // load into memory for faster iteration\\n    ICErc20[] memory _allMarkets = allMarkets;\\n    uint256 len = _allMarkets.length;\\n    uint256 assetIndex = len;\\n    for (uint256 i = 0; i < len; i++) {\\n      if (_allMarkets[i] == cToken) {\\n        assetIndex = i;\\n        break;\\n      }\\n    }\\n\\n    // We *must* have found the asset in the list or our redundant data structure is broken\\n    assert(assetIndex < len);\\n\\n    // copy last item in list to location of item to be removed, reduce length by 1\\n    allMarkets[assetIndex] = allMarkets[allMarkets.length - 1];\\n    allMarkets.pop();\\n\\n    cTokensByUnderlying[ICErc20(address(cToken)).underlying()] = ICErc20(address(0));\\n    emit MarketUnlisted(cToken);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function _setBorrowCapForCollateral(address cTokenBorrow, address cTokenCollateral, uint256 borrowCap) public {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n    borrowCapForCollateral[cTokenBorrow][cTokenCollateral] = borrowCap;\\n  }\\n\\n  function _setBorrowCapForCollateralWhitelist(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account,\\n    bool whitelisted\\n  ) public {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n\\n    if (whitelisted) borrowCapForCollateralWhitelist[cTokenBorrow][cTokenCollateral].add(account);\\n    else borrowCapForCollateralWhitelist[cTokenBorrow][cTokenCollateral].remove(account);\\n  }\\n\\n  function isBorrowCapForCollateralWhitelisted(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account\\n  ) public view returns (bool) {\\n    return borrowCapForCollateralWhitelist[cTokenBorrow][cTokenCollateral].contains(account);\\n  }\\n\\n  function _blacklistBorrowingAgainstCollateral(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    bool blacklisted\\n  ) public {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n    borrowingAgainstCollateralBlacklist[cTokenBorrow][cTokenCollateral] = blacklisted;\\n  }\\n\\n  function _blacklistBorrowingAgainstCollateralWhitelist(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account,\\n    bool whitelisted\\n  ) public {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n\\n    if (whitelisted) borrowingAgainstCollateralBlacklistWhitelist[cTokenBorrow][cTokenCollateral].add(account);\\n    else borrowingAgainstCollateralBlacklistWhitelist[cTokenBorrow][cTokenCollateral].remove(account);\\n  }\\n\\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account\\n  ) public view returns (bool) {\\n    return borrowingAgainstCollateralBlacklistWhitelist[cTokenBorrow][cTokenCollateral].contains(account);\\n  }\\n\\n  function _supplyCapWhitelist(address cToken, address account, bool whitelisted) public {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n\\n    if (whitelisted) supplyCapWhitelist[cToken].add(account);\\n    else supplyCapWhitelist[cToken].remove(account);\\n  }\\n\\n  function isSupplyCapWhitelisted(address cToken, address account) public view returns (bool) {\\n    return supplyCapWhitelist[cToken].contains(account);\\n  }\\n\\n  function getWhitelistedSuppliersSupply(address cToken) public view returns (uint256 supplied) {\\n    address[] memory whitelistedSuppliers = supplyCapWhitelist[cToken].values();\\n    for (uint256 i = 0; i < whitelistedSuppliers.length; i++) {\\n      supplied += ICErc20(cToken).balanceOfUnderlying(whitelistedSuppliers[i]);\\n    }\\n  }\\n\\n  function _borrowCapWhitelist(address cToken, address account, bool whitelisted) public {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n\\n    if (whitelisted) borrowCapWhitelist[cToken].add(account);\\n    else borrowCapWhitelist[cToken].remove(account);\\n  }\\n\\n  function isBorrowCapWhitelisted(address cToken, address account) public view returns (bool) {\\n    return borrowCapWhitelist[cToken].contains(account);\\n  }\\n\\n  function getWhitelistedBorrowersBorrows(address cToken) public view returns (uint256 borrowed) {\\n    address[] memory whitelistedBorrowers = borrowCapWhitelist[cToken].values();\\n    for (uint256 i = 0; i < whitelistedBorrowers.length; i++) {\\n      borrowed += ICErc20(cToken).borrowBalanceCurrent(whitelistedBorrowers[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice Return all of the markets\\n   * @dev The automatic getter may be used to access an individual market.\\n   * @return The list of market addresses\\n   */\\n  function getAllMarkets() public view returns (ICErc20[] memory) {\\n    return allMarkets;\\n  }\\n\\n  /**\\n   * @notice Return all of the borrowers\\n   * @dev The automatic getter may be used to access an individual borrower.\\n   * @return The list of borrower account addresses\\n   */\\n  function getAllBorrowers() public view returns (address[] memory) {\\n    return allBorrowers;\\n  }\\n\\n  function getAllBorrowersCount() public view returns (uint256) {\\n    return allBorrowers.length;\\n  }\\n\\n  function getPaginatedBorrowers(\\n    uint256 page,\\n    uint256 pageSize\\n  ) public view returns (uint256 _totalPages, address[] memory _pageOfBorrowers) {\\n    uint256 allBorrowersCount = allBorrowers.length;\\n    if (allBorrowersCount == 0) {\\n      return (0, new address[](0));\\n    }\\n\\n    if (pageSize == 0) pageSize = 300;\\n    uint256 currentPageSize = pageSize;\\n    uint256 sizeOfPageFromRemainder = allBorrowersCount % pageSize;\\n\\n    _totalPages = allBorrowersCount / pageSize;\\n    if (sizeOfPageFromRemainder > 0) {\\n      _totalPages++;\\n      if (page + 1 == _totalPages) {\\n        currentPageSize = sizeOfPageFromRemainder;\\n      }\\n    }\\n\\n    if (page + 1 > _totalPages) {\\n      return (_totalPages, new address[](0));\\n    }\\n\\n    uint256 offset = page * pageSize;\\n    _pageOfBorrowers = new address[](currentPageSize);\\n    for (uint256 i = 0; i < currentPageSize; i++) {\\n      _pageOfBorrowers[i] = allBorrowers[i + offset];\\n    }\\n  }\\n\\n  /**\\n   * @notice Return all of the whitelist\\n   * @dev The automatic getter may be used to access an individual whitelist status.\\n   * @return The list of borrower account addresses\\n   */\\n  function getWhitelist() external view returns (address[] memory) {\\n    return whitelistArray;\\n  }\\n\\n  /**\\n   * @notice Returns an array of all accruing and non-accruing flywheels\\n   */\\n  function getRewardsDistributors() external view returns (address[] memory) {\\n    address[] memory allFlywheels = new address[](rewardsDistributors.length + nonAccruingRewardsDistributors.length);\\n\\n    uint8 i = 0;\\n    while (i < rewardsDistributors.length) {\\n      allFlywheels[i] = rewardsDistributors[i];\\n      i++;\\n    }\\n    uint8 j = 0;\\n    while (j < nonAccruingRewardsDistributors.length) {\\n      allFlywheels[i + j] = nonAccruingRewardsDistributors[j];\\n      j++;\\n    }\\n\\n    return allFlywheels;\\n  }\\n\\n  function getAccruingFlywheels() external view returns (address[] memory) {\\n    return rewardsDistributors;\\n  }\\n\\n  /**\\n   * @dev Removes a flywheel from the accruing or non-accruing array\\n   * @param flywheelAddress The address of the flywheel to remove from the accruing or non-accruing array\\n   * @return true if the flywheel was found and removed\\n   */\\n  function _removeFlywheel(address flywheelAddress) external returns (bool) {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n    require(flywheelAddress != address(0), \\\"!flywheel\\\");\\n\\n    // remove it from the accruing\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++) {\\n      if (flywheelAddress == rewardsDistributors[i]) {\\n        rewardsDistributors[i] = rewardsDistributors[rewardsDistributors.length - 1];\\n        rewardsDistributors.pop();\\n        return true;\\n      }\\n    }\\n\\n    // or remove it from the non-accruing\\n    for (uint256 i = 0; i < nonAccruingRewardsDistributors.length; i++) {\\n      if (flywheelAddress == nonAccruingRewardsDistributors[i]) {\\n        nonAccruingRewardsDistributors[i] = nonAccruingRewardsDistributors[nonAccruingRewardsDistributors.length - 1];\\n        nonAccruingRewardsDistributors.pop();\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function isUserOfPool(address user) external view returns (bool) {\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      address marketAddress = address(allMarkets[i]);\\n      if (markets[marketAddress].accountMembership[user]) {\\n        return true;\\n      }\\n    }\\n\\n    return false;\\n  }\\n\\n  function registerInSFS() external returns (uint256) {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n    SFSRegister sfsContract = SFSRegister(0x8680CEaBcb9b56913c519c069Add6Bc3494B7020);\\n\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      allMarkets[i].registerInSFS();\\n    }\\n\\n    return sfsContract.register(0x8Fba84867Ba458E7c6E2c024D2DE3d0b5C3ea1C2);\\n  }\\n}\\n\",\"keccak256\":\"0x91bbdc157e7acfd7fa311d0af3c95886771f700fa03ca1ad86cb8eda56c50c6a\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { BasePriceOracle } from \\\"../oracles/BasePriceOracle.sol\\\";\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { DiamondExtension } from \\\"../ionic/DiamondExtension.sol\\\";\\nimport { ComptrollerV4Storage } from \\\"../compound/ComptrollerStorage.sol\\\";\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\nimport { IHistoricalRates } from \\\"adrastia-periphery/rates/IHistoricalRates.sol\\\";\\n\\ninterface ComptrollerInterface {\\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\\n\\n  function _becomeImplementation() external;\\n\\n  function _deployMarket(\\n    uint8 delegateType,\\n    bytes memory constructorData,\\n    bytes calldata becomeImplData,\\n    uint256 collateralFactorMantissa\\n  ) external returns (uint256);\\n\\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\\n\\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\\n\\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\\n\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\\n\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\\n\\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\\n\\n  function _addRewardsDistributor(address distributor) external returns (uint256);\\n\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount,\\n    uint256 repayAmount\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n\\n  function getMaxRedeemOrBorrow(address account, ICErc20 cToken, bool isBorrow) external view returns (uint256);\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n  function exitMarket(address cToken) external returns (uint256);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\\n\\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\\n\\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256);\\n\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\\n\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external returns (uint256);\\n\\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external returns (uint256);\\n\\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function getAccountLiquidity(\\n    address account\\n  ) external view returns (uint256 error, uint256 collateralValue, uint256 liquidity, uint256 shortfall);\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 repayAmount\\n  ) external view returns (uint256, uint256);\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  function _beforeNonReentrant() external;\\n\\n  function _afterNonReentrant() external;\\n\\n  /*** New supply and borrow cap view functions ***/\\n\\n  /**\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveSupplyCaps(address cToken) external view returns (uint256 supplyCap);\\n\\n  /**\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveBorrowCaps(address cToken) external view returns (uint256 borrowCap);\\n}\\n\\ninterface ComptrollerStorageInterface {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function ionicAdmin() external view returns (address);\\n\\n  function ionicAdminHasRights() external view returns (bool);\\n\\n  function pendingAdmin() external view returns (address);\\n\\n  function oracle() external view returns (BasePriceOracle);\\n\\n  function pauseGuardian() external view returns (address);\\n\\n  function closeFactorMantissa() external view returns (uint256);\\n\\n  function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n  function isUserOfPool(address user) external view returns (bool);\\n\\n  function whitelist(address account) external view returns (bool);\\n\\n  function enforceWhitelist() external view returns (bool);\\n\\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\\n\\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\\n\\n  function suppliers(address account) external view returns (bool);\\n\\n  function cTokensByUnderlying(address) external view returns (address);\\n\\n  /**\\n   * Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the supply cap. Instead, use\\n   * `effectiveSupplyCaps` to get the correct supply cap.\\n   * @param cToken The address of the cToken.\\n   * @return The supply cap in the units of the underlying asset.\\n   */\\n  function supplyCaps(address cToken) external view returns (uint256);\\n\\n  /**\\n   * Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the borrow cap. Instead, use\\n   * `effectiveBorrowCaps` to get the correct borrow cap.\\n   * @param cToken The address of the cToken.\\n   * @return The borrow cap in the units of the underlying asset.\\n   */\\n  function borrowCaps(address cToken) external view returns (uint256);\\n\\n  function markets(address cToken) external view returns (bool, uint256);\\n\\n  function accountAssets(address, uint256) external view returns (address);\\n\\n  function borrowGuardianPaused(address cToken) external view returns (bool);\\n\\n  function mintGuardianPaused(address cToken) external view returns (bool);\\n\\n  function rewardsDistributors(uint256) external view returns (address);\\n}\\n\\ninterface SFSRegister {\\n  function register(address _recipient) external returns (uint256 tokenId);\\n}\\n\\ninterface ComptrollerExtensionInterface {\\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\\n\\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\\n\\n  function getAllMarkets() external view returns (ICErc20[] memory);\\n\\n  function getAllBorrowers() external view returns (address[] memory);\\n\\n  function getAllBorrowersCount() external view returns (uint256);\\n\\n  function getPaginatedBorrowers(\\n    uint256 page,\\n    uint256 pageSize\\n  ) external view returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\\n\\n  function getRewardsDistributors() external view returns (address[] memory);\\n\\n  function getAccruingFlywheels() external view returns (address[] memory);\\n\\n  function _supplyCapWhitelist(address cToken, address account, bool whitelisted) external;\\n\\n  function _setBorrowCapForCollateral(address cTokenBorrow, address cTokenCollateral, uint256 borrowCap) external;\\n\\n  function _setBorrowCapForCollateralWhitelist(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account,\\n    bool whitelisted\\n  ) external;\\n\\n  function isBorrowCapForCollateralWhitelisted(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account\\n  ) external view returns (bool);\\n\\n  function _blacklistBorrowingAgainstCollateral(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    bool blacklisted\\n  ) external;\\n\\n  function _blacklistBorrowingAgainstCollateralWhitelist(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account,\\n    bool whitelisted\\n  ) external;\\n\\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account\\n  ) external view returns (bool);\\n\\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\\n\\n  function _borrowCapWhitelist(address cToken, address account, bool whitelisted) external;\\n\\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\\n\\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\\n\\n  function getWhitelist() external view returns (address[] memory);\\n\\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\\n\\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\\n\\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\\n\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\n\\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\n\\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\\n\\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\\n\\n  function _setTransferPaused(bool state) external returns (bool);\\n\\n  function _setSeizePaused(bool state) external returns (bool);\\n\\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\\n\\n  function getAssetAsCollateralValueCap(\\n    ICErc20 collateral,\\n    ICErc20 cTokenModify,\\n    bool redeeming,\\n    address account\\n  ) external view returns (uint256);\\n\\n  function registerInSFS() external returns (uint256);\\n}\\n\\ninterface ComptrollerPrudentiaCapsExtInterface {\\n  /**\\n   * @notice Retrieves Adrastia Prudentia borrow cap config from storage.\\n   * @return The config.\\n   */\\n  function getBorrowCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\n\\n  /**\\n   * @notice Retrieves Adrastia Prudentia supply cap config from storage.\\n   * @return The config.\\n   */\\n  function getSupplyCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\n\\n  /**\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native supply caps.\\n   * @param newConfig The new config.\\n   */\\n  function _setSupplyCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\n\\n  /**\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native borrow caps.\\n   * @param newConfig The new config.\\n   */\\n  function _setBorrowCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\n}\\n\\ninterface UnitrollerInterface {\\n  function comptrollerImplementation() external view returns (address);\\n\\n  function _upgrade() external;\\n\\n  function _acceptAdmin() external returns (uint256);\\n\\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\\n\\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\\n}\\n\\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\\n\\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\\n\\ninterface IonicComptroller is\\n  ComptrollerInterface,\\n  ComptrollerExtensionInterface,\\n  UnitrollerInterface,\\n  ComptrollerStorageInterface\\n{\\n\\n}\\n\\nabstract contract ComptrollerBase is ComptrollerV4Storage {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  /**\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveSupplyCaps(address cToken) public view virtual returns (uint256 supplyCap) {\\n    PrudentiaLib.PrudentiaConfig memory capConfig = supplyCapConfig;\\n\\n    // Check if we're using Adrastia Prudentia for the supply cap\\n    if (capConfig.controller != address(0)) {\\n      // We have a controller, so we're using Adrastia Prudentia\\n\\n      address underlyingToken = ICErc20(cToken).underlying();\\n\\n      // Get the supply cap from Adrastia Prudentia\\n      supplyCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\n\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\n      // must scale the supply cap to get the correct amount\\n\\n      int256 scaleByDecimals = 18;\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n      if (success && data.length == 32) {\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\n      }\\n\\n      scaleByDecimals += capConfig.decimalShift;\\n\\n      if (scaleByDecimals >= 0) {\\n        // We're scaling up, so we need to multiply\\n        supplyCap *= 10 ** uint256(scaleByDecimals);\\n      } else {\\n        // We're scaling down, so we need to divide\\n        supplyCap /= 10 ** uint256(-scaleByDecimals);\\n      }\\n    } else {\\n      // We don't have a controller, so we're using the local supply cap\\n\\n      // Get the supply cap from the local supply cap\\n      supplyCap = supplyCaps[cToken];\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveBorrowCaps(address cToken) public view virtual returns (uint256 borrowCap) {\\n    PrudentiaLib.PrudentiaConfig memory capConfig = borrowCapConfig;\\n\\n    // Check if we're using Adrastia Prudentia for the borrow cap\\n    if (capConfig.controller != address(0)) {\\n      // We have a controller, so we're using Adrastia Prudentia\\n\\n      address underlyingToken = ICErc20(cToken).underlying();\\n\\n      // Get the borrow cap from Adrastia Prudentia\\n      borrowCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\n\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\n      // must scale the supply cap to get the correct amount\\n\\n      int256 scaleByDecimals = 18;\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n      if (success && data.length == 32) {\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\n      }\\n\\n      scaleByDecimals += capConfig.decimalShift;\\n\\n      if (scaleByDecimals >= 0) {\\n        // We're scaling up, so we need to multiply\\n        borrowCap *= 10 ** uint256(scaleByDecimals);\\n      } else {\\n        // We're scaling down, so we need to divide\\n        borrowCap /= 10 ** uint256(-scaleByDecimals);\\n      }\\n    } else {\\n      // We don't have a controller, so we're using the local borrow cap\\n      borrowCap = borrowCaps[cToken];\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7632af3b32bc1fccd14255b6885e74c4d5ac8de5f00fb8ed67186810d286424f\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFeeDistributor.sol\\\";\\nimport \\\"../oracles/BasePriceOracle.sol\\\";\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /*\\n   * Administrator for Ionic\\n   */\\n  address payable public ionicAdmin;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Whether or not the Ionic admin has admin rights\\n   */\\n  bool public ionicAdminHasRights = true;\\n\\n  /**\\n   * @notice Whether or not the admin has admin rights\\n   */\\n  bool public adminHasRights = true;\\n\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\\n  }\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  BasePriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint256 public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint256 public liquidationIncentiveMantissa;\\n\\n  /*\\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint256 internal maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => ICErc20[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    // Multiplier representing the most one can borrow against their collateral in this market.\\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\\n    // Must be between 0 and 1, and stored as a mantissa.\\n    uint256 collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n  }\\n\\n  /**\\n   * @notice Official mapping of cTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /// @notice A list of all markets\\n  ICErc20[] public allMarkets;\\n\\n  /**\\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\\n   */\\n  mapping(address => bool) internal borrowers;\\n\\n  /// @notice A list of all borrowers who have entered markets\\n  address[] public allBorrowers;\\n\\n  // Indexes of borrower account addresses in the `allBorrowers` array\\n  mapping(address => uint256) internal borrowerIndexes;\\n\\n  /**\\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n   */\\n  mapping(address => bool) public suppliers;\\n\\n  /// @notice All cTokens addresses mapped by their underlying token addresses\\n  mapping(address => ICErc20) public cTokensByUnderlying;\\n\\n  /// @notice Whether or not the supplier whitelist is enforced\\n  bool public enforceWhitelist;\\n\\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n  mapping(address => bool) public whitelist;\\n\\n  /// @notice An array of all whitelisted accounts\\n  address[] public whitelistArray;\\n\\n  // Indexes of account addresses in the `whitelistArray` array\\n  mapping(address => uint256) internal whitelistIndexes;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  /// @dev If Adrastia Prudentia is enabled, the values the borrow cap guardian sets are ignored.\\n  address public borrowCapGuardian;\\n\\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveBorrowCaps` instead.\\n  mapping(address => uint256) public borrowCaps;\\n\\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveSupplyCaps` instead.\\n  mapping(address => uint256) public supplyCaps;\\n\\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n  address[] public rewardsDistributors;\\n\\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n  bool internal _notEntered;\\n\\n  /// @dev Whether or not _notEntered has been initialized\\n  bool internal _notEnteredInitialized;\\n\\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\\n  address[] public nonAccruingRewardsDistributors;\\n\\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\\n\\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\\n    internal borrowingAgainstCollateralBlacklistWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n  /// @dev Adrastia Prudentia config for controlling borrow caps.\\n  PrudentiaLib.PrudentiaConfig internal borrowCapConfig;\\n\\n  /// @dev Adrastia Prudentia config for controlling supply caps.\\n  PrudentiaLib.PrudentiaConfig internal supplyCapConfig;\\n}\\n\",\"keccak256\":\"0xa4a8110e666a93c1228c914f1414131e0f3b93385826bb72f6f93d429e514286\",\"license\":\"UNLICENSED\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ncontract ComptrollerErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    COMPTROLLER_MISMATCH,\\n    INSUFFICIENT_SHORTFALL,\\n    INSUFFICIENT_LIQUIDITY,\\n    INVALID_CLOSE_FACTOR,\\n    INVALID_COLLATERAL_FACTOR,\\n    INVALID_LIQUIDATION_INCENTIVE,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    MATH_ERROR,\\n    NONZERO_BORROW_BALANCE,\\n    PRICE_ERROR,\\n    REJECTION,\\n    SNAPSHOT_ERROR,\\n    TOO_MANY_ASSETS,\\n    TOO_MUCH_REPAY,\\n    SUPPLIER_NOT_WHITELISTED,\\n    BORROW_BELOW_MIN,\\n    SUPPLY_ABOVE_MAX,\\n    NONZERO_TOTAL_SUPPLY\\n  }\\n\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n    ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\n    EXIT_MARKET_BALANCE_OWED,\\n    EXIT_MARKET_REJECTION,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n    SET_PRICE_ORACLE_OWNER_CHECK,\\n    SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\n    SET_WHITELIST_STATUS_OWNER_CHECK,\\n    SUPPORT_MARKET_EXISTS,\\n    SUPPORT_MARKET_OWNER_CHECK,\\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n    UNSUPPORT_MARKET_OWNER_CHECK,\\n    UNSUPPORT_MARKET_DOES_NOT_EXIST,\\n    UNSUPPORT_MARKET_IN_USE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return uint256(err);\\n  }\\n}\\n\\ncontract TokenErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    BAD_INPUT,\\n    COMPTROLLER_REJECTION,\\n    COMPTROLLER_CALCULATION_ERROR,\\n    INTEREST_RATE_MODEL_ERROR,\\n    INVALID_ACCOUNT_PAIR,\\n    INVALID_CLOSE_AMOUNT_REQUESTED,\\n    INVALID_COLLATERAL_FACTOR,\\n    MATH_ERROR,\\n    MARKET_NOT_FRESH,\\n    MARKET_NOT_LISTED,\\n    TOKEN_INSUFFICIENT_ALLOWANCE,\\n    TOKEN_INSUFFICIENT_BALANCE,\\n    TOKEN_INSUFFICIENT_CASH,\\n    TOKEN_TRANSFER_IN_FAILED,\\n    TOKEN_TRANSFER_OUT_FAILED,\\n    UTILIZATION_ABOVE_MAX\\n  }\\n\\n  /*\\n   * Note: FailureInfo (but not Error) is kept in alphabetical order\\n   *       This is because FailureInfo grows significantly faster, and\\n   *       the order of Error has some meaning, while the order of FailureInfo\\n   *       is entirely arbitrary.\\n   */\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_IONIC_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    BORROW_ACCRUE_INTEREST_FAILED,\\n    BORROW_CASH_NOT_AVAILABLE,\\n    BORROW_FRESHNESS_CHECK,\\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    BORROW_MARKET_NOT_LISTED,\\n    BORROW_COMPTROLLER_REJECTION,\\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n    LIQUIDATE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n    LIQUIDATE_FRESHNESS_CHECK,\\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_SEIZE_TOO_MUCH,\\n    MINT_ACCRUE_INTEREST_FAILED,\\n    MINT_COMPTROLLER_REJECTION,\\n    MINT_EXCHANGE_CALCULATION_FAILED,\\n    MINT_EXCHANGE_RATE_READ_FAILED,\\n    MINT_FRESHNESS_CHECK,\\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    MINT_TRANSFER_IN_FAILED,\\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\\n    NEW_UTILIZATION_RATE_ABOVE_MAX,\\n    REDEEM_ACCRUE_INTEREST_FAILED,\\n    REDEEM_COMPTROLLER_REJECTION,\\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\\n    REDEEM_FRESHNESS_CHECK,\\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n    WITHDRAW_IONIC_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_IONIC_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_IONIC_FEES_FRESH_CHECK,\\n    WITHDRAW_IONIC_FEES_VALIDATION,\\n    WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\n    WITHDRAW_ADMIN_FEES_VALIDATION,\\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n    REDUCE_RESERVES_ADMIN_CHECK,\\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n    REDUCE_RESERVES_FRESH_CHECK,\\n    REDUCE_RESERVES_VALIDATION,\\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_COMPTROLLER_REJECTION,\\n    REPAY_BORROW_FRESHNESS_CHECK,\\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COMPTROLLER_OWNER_CHECK,\\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_ADMIN_FEE_ADMIN_CHECK,\\n    SET_ADMIN_FEE_FRESH_CHECK,\\n    SET_ADMIN_FEE_BOUNDS_CHECK,\\n    SET_IONIC_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_IONIC_FEE_FRESH_CHECK,\\n    SET_IONIC_FEE_BOUNDS_CHECK,\\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\\n    SET_RESERVE_FACTOR_FRESH_CHECK,\\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n    TRANSFER_COMPTROLLER_REJECTION,\\n    TRANSFER_NOT_ALLOWED,\\n    TRANSFER_NOT_ENOUGH,\\n    TRANSFER_TOO_MUCH,\\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n    ADD_RESERVES_FRESH_CHECK,\\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint256(err);\\n  }\\n}\\n\",\"keccak256\":\"0xad342553cda4d7b7e40678c636a406bc2785be2117a29d9b1cb52e747726745e\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../ionic/AuthoritiesRegistry.sol\\\";\\n\\ninterface IFeeDistributor {\\n  function minBorrowEth() external view returns (uint256);\\n\\n  function maxUtilizationRate() external view returns (uint256);\\n\\n  function interestFeeRate() external view returns (uint256);\\n\\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\n\\n  function latestCErc20Delegate(uint8 delegateType)\\n    external\\n    view\\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\\n\\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\\n\\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\\n\\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\\n\\n  function deployCErc20(\\n    uint8 delegateType,\\n    bytes calldata constructorData,\\n    bytes calldata becomeImplData\\n  ) external returns (address);\\n\\n  function canCall(\\n    address pool,\\n    address user,\\n    address target,\\n    bytes4 functionSig\\n  ) external view returns (bool);\\n\\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\\n\\n  fallback() external payable;\\n\\n  receive() external payable;\\n}\\n\",\"keccak256\":\"0xa822e2942e6a88851968d5f3bda48709713c84d556031a1dd3db5dfd06121d3e\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\",\"license\":\"UNLICENSED\"},\"contracts/ionic/AddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title AddressesProvider\\n * @notice The Addresses Provider serves as a central storage of system internal and external\\n *         contract addresses that change between deploys and across chains\\n * @author Veliko Minkov <veliko@midascapital.xyz>\\n */\\ncontract AddressesProvider is SafeOwnableUpgradeable {\\n  mapping(string => address) private _addresses;\\n  mapping(address => Contract) public plugins;\\n  mapping(address => Contract) public flywheelRewards;\\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\\n  JarvisPool[] public jarvisPoolsConfig;\\n  CurveSwapPool[] public curveSwapPoolsConfig;\\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\\n\\n  /// @dev Initializer to set the admin that can set and change contracts addresses\\n  function initialize(address owner) public initializer {\\n    __SafeOwnable_init(owner);\\n  }\\n\\n  /**\\n   * @dev The contract address and a string that uniquely identifies the contract's interface\\n   */\\n  struct Contract {\\n    address addr;\\n    string contractInterface;\\n  }\\n\\n  struct RedemptionStrategy {\\n    address addr;\\n    string contractInterface;\\n    address outputToken;\\n  }\\n\\n  struct FundingStrategy {\\n    address addr;\\n    string contractInterface;\\n    address inputToken;\\n  }\\n\\n  struct JarvisPool {\\n    address syntheticToken;\\n    address collateralToken;\\n    address liquidityPool;\\n    uint256 expirationTime;\\n  }\\n\\n  struct CurveSwapPool {\\n    address poolAddress;\\n    address[] coins;\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\\n   * @param rewardToken the reward token address\\n   * @param flywheelRewardsModule the flywheel rewards module address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setFlywheelRewards(\\n    address rewardToken,\\n    address flywheelRewardsModule,\\n    string calldata contractInterface\\n  ) public onlyOwner {\\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\\n   * @param asset the asset address\\n   * @param plugin the ERC4626 plugin address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setPlugin(\\n    address asset,\\n    address plugin,\\n    string calldata contractInterface\\n  ) public onlyOwner {\\n    plugins[asset] = Contract(plugin, contractInterface);\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\\n   * @param asset the asset address\\n   * @param strategy redemption strategy address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setRedemptionStrategy(\\n    address asset,\\n    address strategy,\\n    string calldata contractInterface,\\n    address outputToken\\n  ) public onlyOwner {\\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\\n  }\\n\\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\\n    return redemptionStrategiesConfig[asset];\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\\n   * @param asset the asset address\\n   * @param strategy funding strategy address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setFundingStrategy(\\n    address asset,\\n    address strategy,\\n    string calldata contractInterface,\\n    address inputToken\\n  ) public onlyOwner {\\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\\n  }\\n\\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\\n    return fundingStrategiesConfig[asset];\\n  }\\n\\n  /**\\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\\n   * @param syntheticToken the synthetic token address\\n   * @param collateralToken the collateral token address\\n   * @param liquidityPool the liquidity pool address\\n   * @param expirationTime the operation expiration time\\n   */\\n  function setJarvisPool(\\n    address syntheticToken,\\n    address collateralToken,\\n    address liquidityPool,\\n    uint256 expirationTime\\n  ) public onlyOwner {\\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\\n  }\\n\\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\\n  }\\n\\n  /**\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\\n    _addresses[id] = newAddress;\\n  }\\n\\n  /**\\n   * @dev Returns an address by id\\n   * @return The address\\n   */\\n  function getAddress(string calldata id) public view returns (address) {\\n    return _addresses[id];\\n  }\\n\\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\\n    return curveSwapPoolsConfig;\\n  }\\n\\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\\n    return jarvisPoolsConfig;\\n  }\\n\\n  function setBalancerPoolForTokens(\\n    address inputToken,\\n    address outputToken,\\n    address pool\\n  ) external onlyOwner {\\n    balancerPoolForTokens[inputToken][outputToken] = pool;\\n  }\\n\\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\\n    return balancerPoolForTokens[inputToken][outputToken];\\n  }\\n}\\n\",\"keccak256\":\"0xf48e9e8b2150408c1c6b68dd957226c342ba47396da792fdaa0922f539a7e163\",\"license\":\"AGPL-3.0-only\"},\"contracts/ionic/AuthoritiesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { PoolRolesAuthority } from \\\"../ionic/PoolRolesAuthority.sol\\\";\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\nimport { IonicComptroller } from \\\"../compound/ComptrollerInterface.sol\\\";\\n\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\\n  PoolRolesAuthority public poolAuthLogic;\\n  address public leveredPositionsFactory;\\n  bool public noAuthRequired;\\n\\n  function initialize(address _leveredPositionsFactory) public initializer {\\n    __SafeOwnable_init(msg.sender);\\n    leveredPositionsFactory = _leveredPositionsFactory;\\n    poolAuthLogic = new PoolRolesAuthority();\\n  }\\n\\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\\n    leveredPositionsFactory = _leveredPositionsFactory;\\n    poolAuthLogic = new PoolRolesAuthority();\\n    // for Neon the auth is not required\\n    noAuthRequired = block.chainid == 245022934;\\n  }\\n\\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\\n    require(address(poolsAuthorities[pool]) == address(0), \\\"already created\\\");\\n\\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \\\"\\\");\\n    auth = PoolRolesAuthority(address(proxy));\\n    auth.initialize(address(this));\\n    poolsAuthorities[pool] = auth;\\n\\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\\n    // sets the registry owner as the auth owner\\n    reconfigureAuthority(pool);\\n  }\\n\\n  function reconfigureAuthority(address poolAddress) public {\\n    IonicComptroller pool = IonicComptroller(poolAddress);\\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\\n\\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\\n      require(address(auth) != address(0), \\\"no such authority\\\");\\n      require(msg.sender == owner() || msg.sender == poolAddress, \\\"not owner or pool\\\");\\n\\n      auth.configureRegistryCapabilities();\\n      auth.configurePoolSupplierCapabilities(pool);\\n      auth.configurePoolBorrowerCapabilities(pool);\\n      // everyone can be a liquidator\\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\\n      auth.configureLeveredPositionCapabilities(pool);\\n\\n      if (auth.owner() != owner()) {\\n        auth.setOwner(owner());\\n      }\\n    }\\n  }\\n\\n  function canCall(\\n    address pool,\\n    address user,\\n    address target,\\n    bytes4 functionSig\\n  ) external view returns (bool) {\\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\\n    if (address(authorityForPool) == address(0)) {\\n      return noAuthRequired;\\n    } else {\\n      // allow only if an auth exists and it allows the action\\n      return authorityForPool.canCall(user, target, functionSig);\\n    }\\n  }\\n\\n  function setUserRole(\\n    address pool,\\n    address user,\\n    uint8 role,\\n    bool enabled\\n  ) external {\\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\\n\\n    require(address(poolAuth) != address(0), \\\"auth does not exist\\\");\\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \\\"not owner or factory\\\");\\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \\\"only lev pos role\\\");\\n\\n    poolAuth.setUserRole(user, role, enabled);\\n  }\\n}\\n\",\"keccak256\":\"0x98fc1f8a735b5759fc7524e3065ae322703d2771e7ec429e1cc9b60a4b1028dd\",\"license\":\"UNLICENSED\"},\"contracts/ionic/DiamondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice a base contract for logic extensions that use the diamond pattern storage\\n * to map the functions when looking up the extension contract to delegate to.\\n */\\nabstract contract DiamondExtension {\\n  /**\\n   * @return a list of all the function selectors that this logic extension exposes\\n   */\\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\\n}\\n\\n// When no function exists for function called\\nerror FunctionNotFound(bytes4 _functionSelector);\\n\\n// When no extension exists for function called\\nerror ExtensionNotFound(bytes4 _functionSelector);\\n\\n// When the function is already added\\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\\n\\nabstract contract DiamondBase {\\n  /**\\n   * @dev register a logic extension\\n   * @param extensionToAdd the extension whose functions are to be added\\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\\n   */\\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\\n\\n  function _listExtensions() public view returns (address[] memory) {\\n    return LibDiamond.listExtensions();\\n  }\\n\\n  fallback() external {\\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\\n    // Execute external function from extension using delegatecall and return any value.\\n    assembly {\\n      // copy function selector and any arguments\\n      calldatacopy(0, 0, calldatasize())\\n      // execute function call using the extension\\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\\n      // get any return value\\n      returndatacopy(0, 0, returndatasize())\\n      // return any return value or error back to the caller\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * @notice a library to use in a contract, whose logic is extended with diamond extension\\n */\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.extensions.diamond.storage\\\");\\n\\n  struct Function {\\n    address extension;\\n    bytes4 selector;\\n  }\\n\\n  struct LogicStorage {\\n    Function[] functions;\\n    address[] extensions;\\n  }\\n\\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\\n    return getExtensionForSelector(msgSig, diamondStorage());\\n  }\\n\\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  function listExtensions() internal view returns (address[] memory) {\\n    return diamondStorage().extensions;\\n  }\\n\\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\\n    if (address(extensionToReplace) != address(0)) {\\n      removeExtension(extensionToReplace);\\n    }\\n    addExtension(extensionToAdd);\\n  }\\n\\n  function removeExtension(DiamondExtension extension) internal {\\n    LogicStorage storage ds = diamondStorage();\\n    // remove all functions of the extension to replace\\n    removeExtensionFunctions(extension);\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\n      if (ds.extensions[i] == address(extension)) {\\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\\n        ds.extensions.pop();\\n      }\\n    }\\n  }\\n\\n  function addExtension(DiamondExtension extension) internal {\\n    LogicStorage storage ds = diamondStorage();\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\n      require(ds.extensions[i] != address(extension), \\\"extension already added\\\");\\n    }\\n    addExtensionFunctions(extension);\\n    ds.extensions.push(address(extension));\\n  }\\n\\n  function removeExtensionFunctions(DiamondExtension extension) internal {\\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\\n    LogicStorage storage ds = diamondStorage();\\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\\n      bytes4 selectorToRemove = fnsToRemove[i];\\n      // must never fail\\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\\n      // swap with the last element in the selectorAtIndex array and remove the last element\\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\\n      ds.functions.pop();\\n    }\\n  }\\n\\n  function addExtensionFunctions(DiamondExtension extension) internal {\\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\\n    LogicStorage storage ds = diamondStorage();\\n    uint16 functionsCount = uint16(ds.functions.length);\\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\\n      bytes4 selector = fnsToAdd[functionsIndex];\\n      address oldImplementation = getExtensionForSelector(selector, ds);\\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\\n      ds.functions.push(Function(address(extension), selector));\\n      functionsCount++;\\n    }\\n  }\\n\\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\\n    uint256 fnsLen = ds.functions.length;\\n    for (uint256 i = 0; i < fnsLen; i++) {\\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\\n    }\\n\\n    return address(0);\\n  }\\n\\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\\n    uint16 fnsLen = uint16(ds.functions.length);\\n    for (uint16 i = 0; i < fnsLen; i++) {\\n      if (ds.functions[i].selector == selector) return i;\\n    }\\n\\n    return type(uint16).max;\\n  }\\n}\\n\",\"keccak256\":\"0x6d33291928e3c255f0276fa465dcc5ea88d74a6562241a39ad2e52ae8abaf7bc\",\"license\":\"UNLICENSED\"},\"contracts/ionic/PoolRolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IonicComptroller, ComptrollerInterface } from \\\"../compound/ComptrollerInterface.sol\\\";\\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \\\"../compound/CTokenInterfaces.sol\\\";\\n\\nimport { RolesAuthority, Authority } from \\\"solmate/auth/authorities/RolesAuthority.sol\\\";\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _owner) public initializer {\\n    owner = _owner;\\n    authority = this;\\n  }\\n\\n  // up to 256 roles\\n  uint8 public constant REGISTRY_ROLE = 0;\\n  uint8 public constant SUPPLIER_ROLE = 1;\\n  uint8 public constant BORROWER_ROLE = 2;\\n  uint8 public constant LIQUIDATOR_ROLE = 3;\\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\\n\\n  function configureRegistryCapabilities() external requiresAuth {\\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\\n  }\\n\\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolSupplierCapabilities(pool, true);\\n  }\\n\\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolSupplierCapabilities(pool, false);\\n  }\\n\\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\n      for (uint256 j = 0; j < selectors.length; j++) {\\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\\n      }\\n    }\\n  }\\n\\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\\n  }\\n\\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\\n    uint8 fnsCount = 6;\\n    selectors = new bytes4[](fnsCount);\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\\n\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n    return selectors;\\n  }\\n\\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\n      for (uint256 j = 0; j < selectors.length; j++) {\\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\\n      }\\n    }\\n  }\\n\\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolBorrowerCapabilities(pool, true);\\n  }\\n\\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolBorrowerCapabilities(pool, false);\\n  }\\n\\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\\n    }\\n  }\\n\\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    // borrowers have the SUPPLIER_ROLE capabilities by default\\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\n    }\\n  }\\n\\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n    }\\n  }\\n\\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\n      // TODO this leaves redeeming open for everyone\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n    }\\n  }\\n\\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\\n\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1ec824166a7b4b1e67384a25d231d3acab89ef90ff43ff380cbf1715410d9851\",\"license\":\"UNLICENSED\"},\"contracts/ionic/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\\n * that will shift the other.\\n */\\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\\n  /**\\n   * @notice Pending owner of this contract\\n   */\\n  address public pendingOwner;\\n\\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\\n    __Ownable_init();\\n    _transferOwnership(owner_);\\n  }\\n\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  modifier onlyOwnerOrAdmin() {\\n    bool isOwner = owner() == _msgSender();\\n    if (!isOwner) {\\n      address admin = _getProxyAdmin();\\n      bool isAdmin = admin == _msgSender();\\n      require(isAdmin, \\\"Ownable: caller is neither the owner nor the admin\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Emitted when pendingOwner is changed\\n   */\\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\\n\\n  /**\\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\\n   */\\n  event NewOwner(address oldOwner, address newOwner);\\n\\n  /**\\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\n   * @param newPendingOwner New pending owner.\\n   */\\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingOwner = pendingOwner;\\n\\n    // Store pendingOwner with value newPendingOwner\\n    pendingOwner = newPendingOwner;\\n\\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\\n   * @dev Owner function for pending owner to accept role and update owner\\n   */\\n  function _acceptOwner() public {\\n    // Check caller is pendingOwner and pendingOwner \\u2260 address(0)\\n    require(msg.sender == pendingOwner, \\\"not the pending owner\\\");\\n\\n    // Save current values for inclusion in log\\n    address oldOwner = owner();\\n    address oldPendingOwner = pendingOwner;\\n\\n    // Store owner with value pendingOwner\\n    _transferOwnership(pendingOwner);\\n\\n    // Clear the pending value\\n    pendingOwner = address(0);\\n\\n    emit NewOwner(oldOwner, pendingOwner);\\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n  }\\n\\n  function renounceOwnership() public override onlyOwner {\\n    // do not remove this overriding fn\\n    revert(\\\"not used anymore\\\");\\n  }\\n\\n  function transferOwnership(address newOwner) public override onlyOwner {\\n    emit NewPendingOwner(pendingOwner, newOwner);\\n    pendingOwner = newOwner;\\n  }\\n\\n  function _getProxyAdmin() internal view returns (address admin) {\\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    AddressSlot storage adminSlot;\\n    assembly {\\n      adminSlot.slot := _ADMIN_SLOT\\n    }\\n    admin = adminSlot.value;\\n  }\\n}\\n\",\"keccak256\":\"0x73f50a022ee86874b63ebd7e418b5948ef2913e32cb80024fe3cd4f17be7f2a5\",\"license\":\"UNLICENSED\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../compound/CTokenInterfaces.sol\\\";\\n\\n/**\\n * @title BasePriceOracle\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\n * @dev Implements the `PriceOracle` interface.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface BasePriceOracle {\\n  /**\\n   * @notice Get the price of an underlying asset.\\n   * @param underlying The underlying asset to get the price of.\\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n   * Zero means the price is unavailable.\\n   */\\n  function price(address underlying) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xed2a27a8dc71a4280c0ef19d3165ff237d8066ae782e750b071bb39d12e73404\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2b54ec184943843041ab77f61988b5060f6f03acbfe92cdc125f95f00891da\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"solmate/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n\\n    constructor(address _owner, Authority _authority) {\\n        owner = _owner;\\n        authority = _authority;\\n\\n        emit OwnerUpdated(msg.sender, _owner);\\n        emit AuthorityUpdated(msg.sender, _authority);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5cf8213a40d727af89c93dd359ad68984c123c1a1a93fc9ad7ba62b3436fb75\",\"license\":\"AGPL-3.0-only\"},\"solmate/auth/authorities/RolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {Auth, Authority} from \\\"../Auth.sol\\\";\\n\\n/// @notice Role based Authority that supports up to 256 roles.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\\ncontract RolesAuthority is Auth, Authority {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\\n\\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\\n\\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLE/USER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => bytes32) public getUserRoles;\\n\\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\\n\\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\\n\\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\\n    }\\n\\n    function doesRoleHaveCapability(\\n        uint8 role,\\n        address target,\\n        bytes4 functionSig\\n    ) public view virtual returns (bool) {\\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           AUTHORIZATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) public view virtual override returns (bool) {\\n        return\\n            isCapabilityPublic[target][functionSig] ||\\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                   ROLE CAPABILITY CONFIGURATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setPublicCapability(\\n        address target,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        isCapabilityPublic[target][functionSig] = enabled;\\n\\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        address target,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        if (enabled) {\\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\\n        } else {\\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\\n        }\\n\\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       USER ROLE ASSIGNMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setUserRole(\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        if (enabled) {\\n            getUserRoles[user] |= bytes32(1 << role);\\n        } else {\\n            getUserRoles[user] &= ~bytes32(1 << role);\\n        }\\n\\n        emit UserRoleUpdated(user, role, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x278247a2c5b0accb60af8d3749e34ab5d4436ee4f35a8fff301aaa25ab690762\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040526002805461ffff60a01b191661010160a01b17905534801561002557600080fd5b50613f48806100356000396000f3fe608060405234801561001057600080fd5b50600436106103fb5760003560e01c80637515bafa11610215578063be945a6411610125578063d9e0ea6b116100b8578063e875544611610087578063e875544614610986578063ee5b9a2f1461098f578063f851a440146109a2578063f874eb0c146109b5578063fb6243fa146109c857600080fd5b8063d9e0ea6b1461092b578063dce154491461093e578063e6653f3d14610951578063e68065911461096557600080fd5b8063cf6bfd2d116100f4578063cf6bfd2d146108e9578063d01f63f5146108fd578063d219fca714610905578063d251fefc1461091857600080fd5b8063be945a641461089d578063c6c5b0dd146108b0578063c76ae260146108c3578063c91a424f146108d657600080fd5b80638ebf6364116101a8578063ac0b0bb711610177578063ac0b0bb714610841578063b0772d0b14610855578063b09572101461086a578063b103488214610877578063b32538011461088a57600080fd5b80638ebf6364146107cd578063940cd6f1146107e05780639b19251a1461080b578063a5fb48571461082e57600080fd5b8063819605a8116101e4578063819605a81461074d57806387f763031461076057806389f8132e146107745780638e8f294b1461078957600080fd5b80637515bafa1461070c578063783f10961461071f5780637dc0d1d0146107325780637f15e2161461074557600080fd5b80633605b51b1161031057806351a485e4116102a3578063607ef6c111610272578063607ef6c11461068d578063692fd2a9146106a05780636bd02b8a146106b35780636d154ea5146106c6578063731f0c2b146106e957600080fd5b806351a485e41461064157806351c8491d1461065457806352d84d1e146106675780635f5af1aa1461067a57600080fd5b80633c94786f116102df5780633c94786f146105fc5780634a584432146106105780634a76e727146106305780634ada90af1461063857600080fd5b80633605b51b146105b9578063391957d7146105c15780633a72cb5e146105d65780633bcf7ec1146105e957600080fd5b80631c819e4311610393578063267822471161036257806326782247146105425780632ccf47a4146105555780632d70db781461056857806331ff47fa1461057b57806332abcdbe146105a457600080fd5b80631c819e43146104c357806321af4569146104f15780632273f40e1461051c57806324a3d6221461052f57600080fd5b8063109908ce116103cf578063109908ce1461047257806315c3b9b01461048557806316dc15fe1461048d57806318c882a5146104b057600080fd5b80627e3dd21461040057806302c3bcbb1461041d578063088e0fce1461044b5780630a755ec21461045e575b600080fd5b610408600181565b60405190151581526020015b60405180910390f35b61043d61042b3660046136af565b60186020526000908152604090205481565b604051908152602001610414565b6104086104593660046136cc565b6109db565b60025461040890600160a81b900460ff1681565b6104086104803660046136af565b610a14565b600b5461043d565b61040861049b3660046136af565b600d6020526000908152604090205460ff1681565b6104086104be36600461372c565b610c5e565b6104086104d1366004613761565b601d60209081526000928352604080842090915290825290205460ff1681565b601654610504906001600160a01b031681565b6040516001600160a01b039091168152602001610414565b61040861052a366004613761565b610da4565b601354610504906001600160a01b031681565b600254610504906001600160a01b031681565b61043d6105633660046136af565b610dcc565b61040861057636600461379a565b61103e565b6105046105893660046136af565b600e602052600090815260409020546001600160a01b031681565b6105ac611121565b60405161041491906137fa565b6105ac611183565b6105d46105cf3660046136af565b6112eb565b005b61043d6105e43660046136af565b611376565b6104086105f736600461372c565b611457565b60135461040890600160a01b900460ff1681565b61043d61061e3660046136af565b60176020526000908152604090205481565b6105ac61158e565b61043d60055481565b6105d461064f366004613852565b6115ee565b6105d46106623660046138be565b61176d565b610504610675366004613905565b6117df565b61043d6106883660046136af565b611809565b6105d461069b366004613852565b611889565b6104086106ae3660046136af565b6119ff565b6105046106c1366004613905565b611b86565b6104086106d43660046136af565b60156020526000908152604090205460ff1681565b6104086106f73660046136af565b60146020526000908152604090205460ff1681565b61050461071a366004613905565b611b96565b61043d61072d36600461391e565b611ba6565b600354610504906001600160a01b031681565b61043d611e76565b61043d61075b3660046136af565b611fe0565b60135461040890600160b01b900460ff1681565b61077c61230b565b6040516104149190613978565b6107b66107973660046136af565b6008602052600090815260409020805460019091015460ff9091169082565b604080519215158352602083019190915201610414565b6104086107db36600461379a565b612be7565b61043d6107ee366004613761565b601c60209081526000928352604080842090915290825290205481565b6104086108193660046136af565b60106020526000908152604090205460ff1681565b6105d461083c3660046139c6565b612cc1565b60135461040890600160b81b900460ff1681565b61085d612d11565b6040516104149190613a07565b600f546104089060ff1681565b61043d6108853660046136af565b612d71565b610408610898366004613761565b612e10565b6105d46108ab3660046138be565b612e32565b6105046108be366004613905565b612ea0565b6105d46108d1366004613a48565b612eb0565b600054610504906001600160a01b031681565b60025461040890600160a01b900460ff1681565b6105ac612f45565b6105d4610913366004613a48565b612fa5565b610504610926366004613905565b61302d565b6104086109393660046136af565b61303d565b61050461094c366004613aa2565b6130b4565b60135461040890600160a81b900460ff1681565b610978610973366004613ace565b6130ec565b604051610414929190613af0565b61043d60045481565b6105d461099d3660046138be565b61326b565b600154610504906001600160a01b031681565b6104086109c33660046136cc565b6132c9565b61043d6109d63660046136af565b6132fa565b6001600160a01b038084166000908152601e602090815260408083209386168352929052908120610a0c90836133d3565b949350505050565b6000610a1e6133f5565b610a435760405162461bcd60e51b8152600401610a3a90613b09565b60405180910390fd5b6001600160a01b038216610a855760405162461bcd60e51b815260206004820152600960248201526808599b1e5dda19595b60ba1b6044820152606401610a3a565b60005b601954811015610b825760198181548110610aa557610aa5613b29565b6000918252602090912001546001600160a01b0390811690841603610b7a5760198054610ad490600190613b55565b81548110610ae457610ae4613b29565b600091825260209091200154601980546001600160a01b039092169183908110610b1057610b10613b29565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506019805480610b4f57610b4f613b68565b600082815260209020810160001990810180546001600160a01b031916905501905550600192915050565b600101610a88565b5060005b601b54811015610c5557601b8181548110610ba357610ba3613b29565b6000918252602090912001546001600160a01b0390811690841603610c4d57601b8054610bd290600190613b55565b81548110610be257610be2613b29565b600091825260209091200154601b80546001600160a01b039092169183908110610c0e57610c0e613b29565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601b805480610b4f57610b4f613b68565b600101610b86565b50600092915050565b6001600160a01b03821660009081526008602052604081205460ff16610cb05760405162461bcd60e51b8152602060048201526007602482015266085b585c9ad95d60ca1b6044820152606401610a3a565b6013546001600160a01b0316331480610ccc5750610ccc6133f5565b610ce85760405162461bcd60e51b8152600401610a3a90613b7e565b610cf06133f5565b80610cfd57506001821515145b610d195760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b038316600081815260156020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f4ab2c577b7459254dd330a38beef1d66ae70ba1ab28db7147d52d3a752a03cdc9060a0015b60405180910390a150805b92915050565b6001600160a01b03821660009081526020805260408120610dc590836133d3565b9392505050565b604080516060810182526023546001600160a01b03811680835260ff600160a01b8304166020840152600160a81b909104600090810b938301939093521561101c576000836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e729190613ba1565b8251602084015160405163197c92ab60e31b81526001600160a01b03808516600483015260ff9092166024820152929350169063cbe4955890604401606060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190613bec565b602090810151604080516004815260248101825292830180516001600160e01b031663313ce56760e01b1790525167ffffffffffffffff909116945060129160009182916001600160a01b03861691610f489190613c71565b600060405180830381855afa9150503d8060008114610f83576040519150601f19603f3d011682016040523d82523d6000602084013e610f88565b606091505b5091509150818015610f9b575080516020145b15610fba5780806020019051810190610fb49190613ca0565b60ff1692505b6040850151610fcc9060000b84613cc3565b925060008312610ff257610fe183600a613dcf565b610feb9087613ddb565b9550611013565b610ffb83613df2565b61100690600a613dcf565b6110109087613e24565b95505b50505050611038565b6001600160a01b03831660009081526018602052604090205491505b50919050565b6013546000906001600160a01b031633148061105d575061105d6133f5565b6110795760405162461bcd60e51b8152600401610a3a90613b7e565b6110816133f5565b8061108e57506001821515145b6110aa5760405162461bcd60e51b8152600401610a3a90613b09565b60138054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906111159084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b6060600b80548060200260200160405190810160405280929190818152602001828054801561117957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161115b575b5050505050905090565b601b546019546060916000916111999190613e38565b67ffffffffffffffff8111156111b1576111b1613bbe565b6040519080825280602002602001820160405280156111da578160200160208202803683370190505b50905060005b60195460ff821610156112605760198160ff168154811061120357611203613b29565b9060005260206000200160009054906101000a90046001600160a01b0316828260ff168151811061123657611236613b29565b6001600160a01b03909216602092830291909101909101528061125881613e4b565b9150506111e0565b60005b601b5460ff821610156112e357601b8160ff168154811061128657611286613b29565b6000918252602090912001546001600160a01b0316836112a68385613e6a565b60ff16815181106112b9576112b9613b29565b6001600160a01b0390921660209283029190910190910152806112db81613e4b565b915050611263565b509092915050565b6001546001600160a01b031633146113155760405162461bcd60e51b8152600401610a3a90613b09565b601680546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b0381166000908152602160205260408120819061139990613449565b905060005b815181101561145057836001600160a01b03166317bfdfbc8383815181106113c8576113c8613b29565b60200260200101516040518263ffffffff1660e01b81526004016113fb91906001600160a01b0391909116815260200190565b602060405180830381865afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190613e83565b6114469084613e38565b925060010161139e565b5050919050565b6001600160a01b03821660009081526008602052604081205460ff166114a95760405162461bcd60e51b8152602060048201526007602482015266085b585c9ad95d60ca1b6044820152606401610a3a565b6013546001600160a01b03163314806114c557506114c56133f5565b6114e15760405162461bcd60e51b8152600401610a3a90613b7e565b6114e96133f5565b806114f657506001821515145b6115125760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b038316600081815260146020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f4ab2c577b7459254dd330a38beef1d66ae70ba1ab28db7147d52d3a752a03cdc9060a001610d93565b60606019805480602002602001604051908101604052809291908181526020018280548015611179576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161115b575050505050905090565b6001546001600160a01b031633148061161157506016546001600160a01b031633145b61162d5760405162461bcd60e51b8152600401610a3a90613b09565b8281811580159061163d57508082145b6116725760405162461bcd60e51b8152602060048201526006602482015265085a5b9c1d5d60d21b6044820152606401610a3a565b60005b828110156117645784848281811061168f5761168f613b29565b90506020020135601860008989858181106116ac576116ac613b29565b90506020020160208101906116c191906136af565b6001600160a01b031681526020810191909152604001600020558686828181106116ed576116ed613b29565b905060200201602081019061170291906136af565b6001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f886868481811061173e5761173e613b29565b9050602002013560405161175491815260200190565b60405180910390a2600101611675565b50505050505050565b6117756133f5565b6117915760405162461bcd60e51b8152600401610a3a90613b09565b80156117be576001600160a01b038316600090815260208052604090206117b89083613456565b50505050565b6001600160a01b038316600090815260208052604090206117b8908361346b565b600981815481106117ef57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006118136133f5565b61182357610d9e60016017613480565b601380546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e910160405180910390a160009392505050565b6001546001600160a01b03163314806118ac57506016546001600160a01b031633145b6118c85760405162461bcd60e51b8152600401610a3a90613b09565b828181158015906118d857508082145b61190d5760405162461bcd60e51b8152602060048201526006602482015265085a5b9c1d5d60d21b6044820152606401610a3a565b60005b828110156117645784848281811061192a5761192a613b29565b905060200201356017600089898581811061194757611947613b29565b905060200201602081019061195c91906136af565b6001600160a01b0316815260208101919091526040016000205586868281811061198857611988613b29565b905060200201602081019061199d91906136af565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f68686848181106119d9576119d9613b29565b905060200201356040516119ef91815260200190565b60405180910390a2600101611910565b6000611a096133f5565b611a255760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b038216611a675760405162461bcd60e51b815260206004820152600960248201526808599b1e5dda19595b60ba1b6044820152606401610a3a565b60005b601b54811015611ae657601b8181548110611a8757611a87613b29565b6000918252602090912001546001600160a01b0390811690841603611ade5760405162461bcd60e51b815260206004820152600d60248201526c08585b1c9958591e5859191959609a1b6044820152606401610a3a565b600101611a6a565b50601b805460018101825560009182527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10180546001600160a01b0319166001600160a01b0385161790555b601954811015610c555760198181548110611b4f57611b4f613b29565b6000918252602090912001546001600160a01b0390811690841603611b7e5760198054610ad490600190613b55565b600101611b32565b601b81815481106117ef57600080fd5b600b81815481106117ef57600080fd5b6000836001600160a01b0316856001600160a01b0316148015611bc7575082155b15611bd457506000610a0c565b6000196001600160a01b03851615611d4e576001600160a01b038086166000908152601d60209081526040808320938a168352929052205460ff168015611c4757506001600160a01b038086166000908152601f60209081526040808320938a16835292905220611c4590846133d3565b155b15611c5457506000611d4e565b6001600160a01b038086166000908152601c60209081526040808320938a16835292905220548015801590611cb557506001600160a01b038087166000908152601e60209081526040808320938b16835292905220611cb390856133d3565b155b15611d4c5760035460405163fc57d4df60e01b81526001600160a01b038881166004830152600092169063fc57d4df90602401602060405180830381865afa158015611d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d299190613e83565b9050670de0b6b3a7640000611d3e8284613ddb565b611d489190613e24565b9250505b505b6000611d5987610dcc565b9050600081118015611d8957506001600160a01b03871660009081526020805260409020611d8790856133d3565b155b15611e6c5760035460405163fc57d4df60e01b81526001600160a01b038981166004830152600092169063fc57d4df90602401602060405180830381865afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd9190613e83565b90506000670de0b6b3a7640000611e148385613ddb565b611e1e9190613e24565b6001600160a01b038a16600090815260086020526040902060010154909150670de0b6b3a764000090611e519083613ddb565b611e5b9190613e24565b905083811015611e69578093505b50505b5095945050505050565b6000611e806133f5565b611e9c5760405162461bcd60e51b8152600401610a3a90613b09565b738680ceabcb9b56913c519c069add6bc3494b702060005b600954811015611f5b5760098181548110611ed157611ed1613b29565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b0316637f15e2166040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f529190613e83565b50600101611eb4565b50604051632210724360e11b8152738fba84867ba458e7c6e2c024d2de3d0b5c3ea1c260048201526001600160a01b03821690634420e486906024016020604051808303816000875af1158015611fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fda9190613e83565b91505090565b6000611fea6133f5565b611ffa57610d9e60016018613480565b6001600160a01b03821660009081526008602052604090205460ff1661202657610d9e60086019613480565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a9190613e83565b111561209c57610d9e6014601a613480565b6001600160a01b0382166000908152600860209081526040808320805460ff1916815560010183905560098054825181850281018501909352808352919290919083018282801561211657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120f8575b5050835193945083925060009150505b8281101561217057856001600160a01b031684828151811061214a5761214a613b29565b60200260200101516001600160a01b03160361216857809150612170565b600101612126565b5081811061218057612180613eb2565b6009805461219090600190613b55565b815481106121a0576121a0613b29565b600091825260209091200154600980546001600160a01b0390921691839081106121cc576121cc613b29565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600980548061220b5761220b613b68565b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590556000600e6000876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229b9190613ba1565b6001600160a01b039081168252602080830193909352604091820160002080546001600160a01b031916948216949094179093555191871682527f302feb03efd5741df80efe7f97f5d93d74d46a542a3d312d0faae64fa1f3e0e9910160405180910390a1600095945050505050565b60408051602180825261044082019092526060919060009082602082016104208036833701905050905063692fd2a960e01b8161234784613ec8565b93508360ff168151811061235d5761235d613b29565b6001600160e01b031990921660209283029190910190910152631469217960e21b8161238884613ec8565b93508360ff168151811061239e5761239e613b29565b6001600160e01b03199092166020928302919091019091015263607ef6c160e01b816123c984613ec8565b93508360ff16815181106123df576123df613b29565b6001600160e01b03199092166020928302919091019091015263d219fca760e01b8161240a84613ec8565b93508360ff168151811061242057612420613b29565b6001600160e01b03199092166020928302919091019091015263063b571360e51b8161244b84613ec8565b93508360ff168151811061246157612461613b29565b6001600160e01b0319909216602092830291909101909101526351c8491d60e01b8161248c84613ec8565b93508360ff16815181106124a2576124a2613b29565b6001600160e01b031990921660209283029190910190910152632fa5169960e21b816124cd84613ec8565b93508360ff16815181106124e3576124e3613b29565b6001600160e01b03199092166020928302919091019091015263391957d760e01b8161250e84613ec8565b93508360ff168151811061252457612524613b29565b6001600160e01b031990921660209283029190910190910152632fad78d560e11b8161254f84613ec8565b93508360ff168151811061256557612565613b29565b6001600160e01b031990921660209283029190910190910152633bcf7ec160e01b8161259084613ec8565b93508360ff16815181106125a6576125a6613b29565b6001600160e01b0319909216602092830291909101909101526318c882a560e01b816125d184613ec8565b93508360ff16815181106125e7576125e7613b29565b6001600160e01b0319909216602092830291909101909101526323afd8d960e21b8161261284613ec8565b93508360ff168151811061262857612628613b29565b6001600160e01b0319909216602092830291909101909101526305ae1b6f60e31b8161265384613ec8565b93508360ff168151811061266957612669613b29565b6001600160e01b031990921660209283029190910190910152631032c0b560e31b8161269484613ec8565b93508360ff16815181106126aa576126aa613b29565b6001600160e01b03199092166020928302919091019091015263b0772d0b60e01b816126d584613ec8565b93508360ff16815181106126eb576126eb613b29565b6001600160e01b031990921660209283029190910190910152631955e6df60e11b8161271684613ec8565b93508360ff168151811061272c5761272c613b29565b6001600160e01b03199092166020928302919091019091015263015c3b9b60e41b8161275784613ec8565b93508360ff168151811061276d5761276d613b29565b6001600160e01b03199092166020928302919091019091015263e680659160e01b8161279884613ec8565b93508360ff16815181106127ae576127ae613b29565b6001600160e01b03199092166020928302919091019091015263d01f63f560e01b816127d984613ec8565b93508360ff16815181106127ef576127ef613b29565b6001600160e01b031990921660209283029190910190910152633605b51b60e01b8161281a84613ec8565b93508360ff168151811061283057612830613b29565b6001600160e01b03199092166020928302919091019091015263d9e0ea6b60e01b8161285b84613ec8565b93508360ff168151811061287157612871613b29565b6001600160e01b031990921660209283029190910190910152634a76e72760e01b8161289c84613ec8565b93508360ff16815181106128b2576128b2613b29565b6001600160e01b03199092166020928302919091019091015263084c846760e11b816128dd84613ec8565b93508360ff16815181106128f3576128f3613b29565b6001600160e01b03199092166020928302919091019091015263a5fb485760e01b8161291e84613ec8565b93508360ff168151811061293457612934613b29565b6001600160e01b03199092166020928302919091019091015263ee5b9a2f60e01b8161295f84613ec8565b93508360ff168151811061297557612975613b29565b6001600160e01b03199092166020928302919091019091015263044707e760e11b816129a084613ec8565b93508360ff16815181106129b6576129b6613b29565b6001600160e01b031990921660209283029190910190910152633e1d3ac360e21b816129e184613ec8565b93508360ff16815181106129f7576129f7613b29565b6001600160e01b031990921660209283029190910190910152631139fa0760e11b81612a2284613ec8565b93508360ff1681518110612a3857612a38613b29565b6001600160e01b03199092166020928302919091019091015263b325380160e01b81612a6384613ec8565b93508360ff1681518110612a7957612a79613b29565b6001600160e01b031990921660209283029190910190910152637db121fd60e11b81612aa484613ec8565b93508360ff1681518110612aba57612aba613b29565b6001600160e01b031990921660209283029190910190910152631d3965af60e11b81612ae584613ec8565b93508360ff1681518110612afb57612afb613b29565b6001600160e01b031990921660209283029190910190910152633c1f884b60e11b81612b2684613ec8565b93508360ff1681518110612b3c57612b3c613b29565b6001600160e01b031990921660209283029190910190910152633f8af10b60e11b81612b6784613ec8565b93508360ff1681518110612b7d57612b7d613b29565b6001600160e01b03199092166020928302919091019091015260ff821615610d9e5760405162461bcd60e51b815260206004820152601c60248201527f7573652074686520636f7272656374206172726179206c656e677468000000006044820152606401610a3a565b6013546000906001600160a01b0316331480612c065750612c066133f5565b612c225760405162461bcd60e51b8152600401610a3a90613b7e565b612c2a6133f5565b80612c3757506001821515145b612c535760405162461bcd60e51b8152600401610a3a90613b09565b60138054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906111159084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b612cc96133f5565b612ce55760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b039283166000908152601c602090815260408083209490951682529290925291902055565b60606009805480602002602001604051908101604052809291908181526020018280548015611179576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161115b575050505050905090565b604080516060810182526022546001600160a01b03811680835260ff600160a01b8304166020840152600160a81b909104600090810b9383019390935215612df3576000836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4e573d6000803e3d6000fd5b50506001600160a01b031660009081526017602052604090205490565b6001600160a01b0382166000908152602160205260408120610dc590836133d3565b612e3a6133f5565b612e565760405162461bcd60e51b8152600401610a3a90613b09565b8015612e7e576001600160a01b03831660009081526021602052604090206117b89083613456565b6001600160a01b03831660009081526021602052604090206117b8908361346b565b601981815481106117ef57600080fd5b612eb86133f5565b612ed45760405162461bcd60e51b8152600401610a3a90613b09565b8015612f0f576001600160a01b038085166000908152601f60209081526040808320938716835292905220612f099083613456565b506117b8565b6001600160a01b038085166000908152601f60209081526040808320938716835292905220612f3e908361346b565b5050505050565b60606011805480602002602001604051908101604052809291908181526020018280548015611179576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161115b575050505050905090565b612fad6133f5565b612fc95760405162461bcd60e51b8152600401610a3a90613b09565b8015612ffe576001600160a01b038085166000908152601e60209081526040808320938716835292905220612f099083613456565b6001600160a01b038085166000908152601e60209081526040808320938716835292905220612f3e908361346b565b601181815481106117ef57600080fd5b6000805b600954811015610c555760006009828154811061306057613060613b29565b60009182526020808320909101546001600160a01b03908116808452600883526040808520928916855260029092019092529091205490915060ff16156130ab575060019392505050565b50600101613041565b600760205281600052604060002081815481106130d057600080fd5b6000918252602090912001546001600160a01b03169150829050565b600b5460009060609080830361311657604080516000808252602082019092529250925050613264565b836000036131245761012c93505b8360006131318284613ee5565b905061313d8684613e24565b94508015613168578461314f81613ef9565b955085905061315f886001613e38565b03613168578091505b84613174886001613e38565b111561319457505060408051600081526020810190915291506132649050565b60006131a08789613ddb565b90508267ffffffffffffffff8111156131bb576131bb613bbe565b6040519080825280602002602001820160405280156131e4578160200160208202803683370190505b50945060005b8381101561325e57600b6131fe8383613e38565b8154811061320e5761320e613b29565b9060005260206000200160009054906101000a90046001600160a01b031686828151811061323e5761323e613b29565b6001600160a01b03909216602092830291909101909101526001016131ea565b50505050505b9250929050565b6132736133f5565b61328f5760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b039283166000908152601d6020908152604080832094909516825292909252919020805460ff1916911515919091179055565b6001600160a01b038084166000908152601f602090815260408083209386168352929052908120610a0c90836133d3565b6001600160a01b03811660009081526020805260408120819061331c90613449565b905060005b815181101561145057836001600160a01b0316633af9e66983838151811061334b5761334b613b29565b60200260200101516040518263ffffffff1660e01b815260040161337e91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561339b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bf9190613e83565b6133c99084613e38565b9250600101613321565b6001600160a01b03811660009081526001830160205260408120541515610dc5565b6001546000906001600160a01b03163314801561341b5750600254600160a81b900460ff165b8061344457506000546001600160a01b0316331480156134445750600254600160a01b900460ff165b905090565b60606000610dc5836134f9565b6000610dc5836001600160a01b038416613555565b6000610dc5836001600160a01b0384166135a4565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360148111156134b5576134b5613e9c565b83601a8111156134c7576134c7613e9c565b60408051928352602083019190915260009082015260600160405180910390a1826014811115610dc557610dc5613e9c565b60608160000180548060200260200160405190810160405280929190818152602001828054801561354957602002820191906000526020600020905b815481526020019060010190808311613535575b50505050509050919050565b600081815260018301602052604081205461359c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d9e565b506000610d9e565b6000818152600183016020526040812054801561368d5760006135c8600183613b55565b85549091506000906135dc90600190613b55565b90508181146136415760008660000182815481106135fc576135fc613b29565b906000526020600020015490508087600001848154811061361f5761361f613b29565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061365257613652613b68565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d9e565b6000915050610d9e565b6001600160a01b03811681146136ac57600080fd5b50565b6000602082840312156136c157600080fd5b8135610dc581613697565b6000806000606084860312156136e157600080fd5b83356136ec81613697565b925060208401356136fc81613697565b9150604084013561370c81613697565b809150509250925092565b8035801515811461372757600080fd5b919050565b6000806040838503121561373f57600080fd5b823561374a81613697565b915061375860208401613717565b90509250929050565b6000806040838503121561377457600080fd5b823561377f81613697565b9150602083013561378f81613697565b809150509250929050565b6000602082840312156137ac57600080fd5b610dc582613717565b60008151808452602080850194506020840160005b838110156137ef5781516001600160a01b0316875295820195908201906001016137ca565b509495945050505050565b602081526000610dc560208301846137b5565b60008083601f84011261381f57600080fd5b50813567ffffffffffffffff81111561383757600080fd5b6020830191508360208260051b850101111561326457600080fd5b6000806000806040858703121561386857600080fd5b843567ffffffffffffffff8082111561388057600080fd5b61388c8883890161380d565b909650945060208701359150808211156138a557600080fd5b506138b28782880161380d565b95989497509550505050565b6000806000606084860312156138d357600080fd5b83356138de81613697565b925060208401356138ee81613697565b91506138fc60408501613717565b90509250925092565b60006020828403121561391757600080fd5b5035919050565b6000806000806080858703121561393457600080fd5b843561393f81613697565b9350602085013561394f81613697565b925061395d60408601613717565b9150606085013561396d81613697565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b818110156139ba5783516001600160e01b03191683529284019291840191600101613994565b50909695505050505050565b6000806000606084860312156139db57600080fd5b83356139e681613697565b925060208401356139f681613697565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b818110156139ba5783516001600160a01b031683529284019291840191600101613a23565b60008060008060808587031215613a5e57600080fd5b8435613a6981613697565b93506020850135613a7981613697565b92506040850135613a8981613697565b9150613a9760608601613717565b905092959194509250565b60008060408385031215613ab557600080fd5b8235613ac081613697565b946020939093013593505050565b60008060408385031215613ae157600080fd5b50508035926020909101359150565b828152604060208201526000610a0c60408301846137b5565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610d9e57610d9e613b3f565b634e487b7160e01b600052603160045260246000fd5b60208082526009908201526810b3bab0b93234b0b760b91b604082015260600190565b600060208284031215613bb357600080fd5b8151610dc581613697565b634e487b7160e01b600052604160045260246000fd5b805167ffffffffffffffff8116811461372757600080fd5b600060608284031215613bfe57600080fd5b6040516060810181811067ffffffffffffffff82111715613c2f57634e487b7160e01b600052604160045260246000fd5b604052613c3b83613bd4565b8152613c4960208401613bd4565b6020820152604083015163ffffffff81168114613c6557600080fd5b60408201529392505050565b6000825160005b81811015613c925760208186018101518583015201613c78565b506000920191825250919050565b600060208284031215613cb257600080fd5b815160ff81168114610dc557600080fd5b8082018281126000831280158216821582161715613ce357613ce3613b3f565b505092915050565b600181815b80851115613d26578160001904821115613d0c57613d0c613b3f565b80851615613d1957918102915b93841c9390800290613cf0565b509250929050565b600082613d3d57506001610d9e565b81613d4a57506000610d9e565b8160018114613d605760028114613d6a57613d86565b6001915050610d9e565b60ff841115613d7b57613d7b613b3f565b50506001821b610d9e565b5060208310610133831016604e8410600b8410161715613da9575081810a610d9e565b613db38383613ceb565b8060001904821115613dc757613dc7613b3f565b029392505050565b6000610dc58383613d2e565b8082028115828204841417610d9e57610d9e613b3f565b6000600160ff1b8201613e0757613e07613b3f565b5060000390565b634e487b7160e01b600052601260045260246000fd5b600082613e3357613e33613e0e565b500490565b80820180821115610d9e57610d9e613b3f565b600060ff821660ff8103613e6157613e61613b3f565b60010192915050565b60ff8181168382160190811115610d9e57610d9e613b3f565b600060208284031215613e9557600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b600060ff821680613edb57613edb613b3f565b6000190192915050565b600082613ef457613ef4613e0e565b500690565b600060018201613f0b57613f0b613b3f565b506001019056fea26469706673582212204a79bfe3806f2d15b90a91e9b5b4a01fea29671ba7d13d1a25399899bdc97cba64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103fb5760003560e01c80637515bafa11610215578063be945a6411610125578063d9e0ea6b116100b8578063e875544611610087578063e875544614610986578063ee5b9a2f1461098f578063f851a440146109a2578063f874eb0c146109b5578063fb6243fa146109c857600080fd5b8063d9e0ea6b1461092b578063dce154491461093e578063e6653f3d14610951578063e68065911461096557600080fd5b8063cf6bfd2d116100f4578063cf6bfd2d146108e9578063d01f63f5146108fd578063d219fca714610905578063d251fefc1461091857600080fd5b8063be945a641461089d578063c6c5b0dd146108b0578063c76ae260146108c3578063c91a424f146108d657600080fd5b80638ebf6364116101a8578063ac0b0bb711610177578063ac0b0bb714610841578063b0772d0b14610855578063b09572101461086a578063b103488214610877578063b32538011461088a57600080fd5b80638ebf6364146107cd578063940cd6f1146107e05780639b19251a1461080b578063a5fb48571461082e57600080fd5b8063819605a8116101e4578063819605a81461074d57806387f763031461076057806389f8132e146107745780638e8f294b1461078957600080fd5b80637515bafa1461070c578063783f10961461071f5780637dc0d1d0146107325780637f15e2161461074557600080fd5b80633605b51b1161031057806351a485e4116102a3578063607ef6c111610272578063607ef6c11461068d578063692fd2a9146106a05780636bd02b8a146106b35780636d154ea5146106c6578063731f0c2b146106e957600080fd5b806351a485e41461064157806351c8491d1461065457806352d84d1e146106675780635f5af1aa1461067a57600080fd5b80633c94786f116102df5780633c94786f146105fc5780634a584432146106105780634a76e727146106305780634ada90af1461063857600080fd5b80633605b51b146105b9578063391957d7146105c15780633a72cb5e146105d65780633bcf7ec1146105e957600080fd5b80631c819e4311610393578063267822471161036257806326782247146105425780632ccf47a4146105555780632d70db781461056857806331ff47fa1461057b57806332abcdbe146105a457600080fd5b80631c819e43146104c357806321af4569146104f15780632273f40e1461051c57806324a3d6221461052f57600080fd5b8063109908ce116103cf578063109908ce1461047257806315c3b9b01461048557806316dc15fe1461048d57806318c882a5146104b057600080fd5b80627e3dd21461040057806302c3bcbb1461041d578063088e0fce1461044b5780630a755ec21461045e575b600080fd5b610408600181565b60405190151581526020015b60405180910390f35b61043d61042b3660046136af565b60186020526000908152604090205481565b604051908152602001610414565b6104086104593660046136cc565b6109db565b60025461040890600160a81b900460ff1681565b6104086104803660046136af565b610a14565b600b5461043d565b61040861049b3660046136af565b600d6020526000908152604090205460ff1681565b6104086104be36600461372c565b610c5e565b6104086104d1366004613761565b601d60209081526000928352604080842090915290825290205460ff1681565b601654610504906001600160a01b031681565b6040516001600160a01b039091168152602001610414565b61040861052a366004613761565b610da4565b601354610504906001600160a01b031681565b600254610504906001600160a01b031681565b61043d6105633660046136af565b610dcc565b61040861057636600461379a565b61103e565b6105046105893660046136af565b600e602052600090815260409020546001600160a01b031681565b6105ac611121565b60405161041491906137fa565b6105ac611183565b6105d46105cf3660046136af565b6112eb565b005b61043d6105e43660046136af565b611376565b6104086105f736600461372c565b611457565b60135461040890600160a01b900460ff1681565b61043d61061e3660046136af565b60176020526000908152604090205481565b6105ac61158e565b61043d60055481565b6105d461064f366004613852565b6115ee565b6105d46106623660046138be565b61176d565b610504610675366004613905565b6117df565b61043d6106883660046136af565b611809565b6105d461069b366004613852565b611889565b6104086106ae3660046136af565b6119ff565b6105046106c1366004613905565b611b86565b6104086106d43660046136af565b60156020526000908152604090205460ff1681565b6104086106f73660046136af565b60146020526000908152604090205460ff1681565b61050461071a366004613905565b611b96565b61043d61072d36600461391e565b611ba6565b600354610504906001600160a01b031681565b61043d611e76565b61043d61075b3660046136af565b611fe0565b60135461040890600160b01b900460ff1681565b61077c61230b565b6040516104149190613978565b6107b66107973660046136af565b6008602052600090815260409020805460019091015460ff9091169082565b604080519215158352602083019190915201610414565b6104086107db36600461379a565b612be7565b61043d6107ee366004613761565b601c60209081526000928352604080842090915290825290205481565b6104086108193660046136af565b60106020526000908152604090205460ff1681565b6105d461083c3660046139c6565b612cc1565b60135461040890600160b81b900460ff1681565b61085d612d11565b6040516104149190613a07565b600f546104089060ff1681565b61043d6108853660046136af565b612d71565b610408610898366004613761565b612e10565b6105d46108ab3660046138be565b612e32565b6105046108be366004613905565b612ea0565b6105d46108d1366004613a48565b612eb0565b600054610504906001600160a01b031681565b60025461040890600160a01b900460ff1681565b6105ac612f45565b6105d4610913366004613a48565b612fa5565b610504610926366004613905565b61302d565b6104086109393660046136af565b61303d565b61050461094c366004613aa2565b6130b4565b60135461040890600160a81b900460ff1681565b610978610973366004613ace565b6130ec565b604051610414929190613af0565b61043d60045481565b6105d461099d3660046138be565b61326b565b600154610504906001600160a01b031681565b6104086109c33660046136cc565b6132c9565b61043d6109d63660046136af565b6132fa565b6001600160a01b038084166000908152601e602090815260408083209386168352929052908120610a0c90836133d3565b949350505050565b6000610a1e6133f5565b610a435760405162461bcd60e51b8152600401610a3a90613b09565b60405180910390fd5b6001600160a01b038216610a855760405162461bcd60e51b815260206004820152600960248201526808599b1e5dda19595b60ba1b6044820152606401610a3a565b60005b601954811015610b825760198181548110610aa557610aa5613b29565b6000918252602090912001546001600160a01b0390811690841603610b7a5760198054610ad490600190613b55565b81548110610ae457610ae4613b29565b600091825260209091200154601980546001600160a01b039092169183908110610b1057610b10613b29565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506019805480610b4f57610b4f613b68565b600082815260209020810160001990810180546001600160a01b031916905501905550600192915050565b600101610a88565b5060005b601b54811015610c5557601b8181548110610ba357610ba3613b29565b6000918252602090912001546001600160a01b0390811690841603610c4d57601b8054610bd290600190613b55565b81548110610be257610be2613b29565b600091825260209091200154601b80546001600160a01b039092169183908110610c0e57610c0e613b29565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601b805480610b4f57610b4f613b68565b600101610b86565b50600092915050565b6001600160a01b03821660009081526008602052604081205460ff16610cb05760405162461bcd60e51b8152602060048201526007602482015266085b585c9ad95d60ca1b6044820152606401610a3a565b6013546001600160a01b0316331480610ccc5750610ccc6133f5565b610ce85760405162461bcd60e51b8152600401610a3a90613b7e565b610cf06133f5565b80610cfd57506001821515145b610d195760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b038316600081815260156020908152604091829020805460ff19168615159081179091558251938452606091840182905260069184019190915265426f72726f7760d01b6080840152908201527f4ab2c577b7459254dd330a38beef1d66ae70ba1ab28db7147d52d3a752a03cdc9060a0015b60405180910390a150805b92915050565b6001600160a01b03821660009081526020805260408120610dc590836133d3565b9392505050565b604080516060810182526023546001600160a01b03811680835260ff600160a01b8304166020840152600160a81b909104600090810b938301939093521561101c576000836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e729190613ba1565b8251602084015160405163197c92ab60e31b81526001600160a01b03808516600483015260ff9092166024820152929350169063cbe4955890604401606060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190613bec565b602090810151604080516004815260248101825292830180516001600160e01b031663313ce56760e01b1790525167ffffffffffffffff909116945060129160009182916001600160a01b03861691610f489190613c71565b600060405180830381855afa9150503d8060008114610f83576040519150601f19603f3d011682016040523d82523d6000602084013e610f88565b606091505b5091509150818015610f9b575080516020145b15610fba5780806020019051810190610fb49190613ca0565b60ff1692505b6040850151610fcc9060000b84613cc3565b925060008312610ff257610fe183600a613dcf565b610feb9087613ddb565b9550611013565b610ffb83613df2565b61100690600a613dcf565b6110109087613e24565b95505b50505050611038565b6001600160a01b03831660009081526018602052604090205491505b50919050565b6013546000906001600160a01b031633148061105d575061105d6133f5565b6110795760405162461bcd60e51b8152600401610a3a90613b7e565b6110816133f5565b8061108e57506001821515145b6110aa5760405162461bcd60e51b8152600401610a3a90613b09565b60138054831515600160b81b0260ff60b81b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906111159084906040808252600590820152645365697a6560d81b6060820152901515602082015260800190565b60405180910390a15090565b6060600b80548060200260200160405190810160405280929190818152602001828054801561117957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161115b575b5050505050905090565b601b546019546060916000916111999190613e38565b67ffffffffffffffff8111156111b1576111b1613bbe565b6040519080825280602002602001820160405280156111da578160200160208202803683370190505b50905060005b60195460ff821610156112605760198160ff168154811061120357611203613b29565b9060005260206000200160009054906101000a90046001600160a01b0316828260ff168151811061123657611236613b29565b6001600160a01b03909216602092830291909101909101528061125881613e4b565b9150506111e0565b60005b601b5460ff821610156112e357601b8160ff168154811061128657611286613b29565b6000918252602090912001546001600160a01b0316836112a68385613e6a565b60ff16815181106112b9576112b9613b29565b6001600160a01b0390921660209283029190910190910152806112db81613e4b565b915050611263565b509092915050565b6001546001600160a01b031633146113155760405162461bcd60e51b8152600401610a3a90613b09565b601680546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527feda98690e518e9a05f8ec6837663e188211b2da8f4906648b323f2c1d4434e29910160405180910390a15050565b6001600160a01b0381166000908152602160205260408120819061139990613449565b905060005b815181101561145057836001600160a01b03166317bfdfbc8383815181106113c8576113c8613b29565b60200260200101516040518263ffffffff1660e01b81526004016113fb91906001600160a01b0391909116815260200190565b602060405180830381865afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190613e83565b6114469084613e38565b925060010161139e565b5050919050565b6001600160a01b03821660009081526008602052604081205460ff166114a95760405162461bcd60e51b8152602060048201526007602482015266085b585c9ad95d60ca1b6044820152606401610a3a565b6013546001600160a01b03163314806114c557506114c56133f5565b6114e15760405162461bcd60e51b8152600401610a3a90613b7e565b6114e96133f5565b806114f657506001821515145b6115125760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b038316600081815260146020908152604091829020805460ff19168615159081179091558251938452606091840182905260049184019190915263135a5b9d60e21b6080840152908201527f4ab2c577b7459254dd330a38beef1d66ae70ba1ab28db7147d52d3a752a03cdc9060a001610d93565b60606019805480602002602001604051908101604052809291908181526020018280548015611179576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161115b575050505050905090565b6001546001600160a01b031633148061161157506016546001600160a01b031633145b61162d5760405162461bcd60e51b8152600401610a3a90613b09565b8281811580159061163d57508082145b6116725760405162461bcd60e51b8152602060048201526006602482015265085a5b9c1d5d60d21b6044820152606401610a3a565b60005b828110156117645784848281811061168f5761168f613b29565b90506020020135601860008989858181106116ac576116ac613b29565b90506020020160208101906116c191906136af565b6001600160a01b031681526020810191909152604001600020558686828181106116ed576116ed613b29565b905060200201602081019061170291906136af565b6001600160a01b03167f9e0ad9cee10bdf36b7fbd38910c0bdff0f275ace679b45b922381c2723d676f886868481811061173e5761173e613b29565b9050602002013560405161175491815260200190565b60405180910390a2600101611675565b50505050505050565b6117756133f5565b6117915760405162461bcd60e51b8152600401610a3a90613b09565b80156117be576001600160a01b038316600090815260208052604090206117b89083613456565b50505050565b6001600160a01b038316600090815260208052604090206117b8908361346b565b600981815481106117ef57600080fd5b6000918252602090912001546001600160a01b0316905081565b60006118136133f5565b61182357610d9e60016017613480565b601380546001600160a01b038481166001600160a01b031983168117909355604080519190921680825260208201939093527f0613b6ee6a04f0d09f390e4d9318894b9f6ac7fd83897cd8d18896ba579c401e910160405180910390a160009392505050565b6001546001600160a01b03163314806118ac57506016546001600160a01b031633145b6118c85760405162461bcd60e51b8152600401610a3a90613b09565b828181158015906118d857508082145b61190d5760405162461bcd60e51b8152602060048201526006602482015265085a5b9c1d5d60d21b6044820152606401610a3a565b60005b828110156117645784848281811061192a5761192a613b29565b905060200201356017600089898581811061194757611947613b29565b905060200201602081019061195c91906136af565b6001600160a01b0316815260208101919091526040016000205586868281811061198857611988613b29565b905060200201602081019061199d91906136af565b6001600160a01b03167f6f1951b2aad10f3fc81b86d91105b413a5b3f847a34bbc5ce1904201b14438f68686848181106119d9576119d9613b29565b905060200201356040516119ef91815260200190565b60405180910390a2600101611910565b6000611a096133f5565b611a255760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b038216611a675760405162461bcd60e51b815260206004820152600960248201526808599b1e5dda19595b60ba1b6044820152606401610a3a565b60005b601b54811015611ae657601b8181548110611a8757611a87613b29565b6000918252602090912001546001600160a01b0390811690841603611ade5760405162461bcd60e51b815260206004820152600d60248201526c08585b1c9958591e5859191959609a1b6044820152606401610a3a565b600101611a6a565b50601b805460018101825560009182527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10180546001600160a01b0319166001600160a01b0385161790555b601954811015610c555760198181548110611b4f57611b4f613b29565b6000918252602090912001546001600160a01b0390811690841603611b7e5760198054610ad490600190613b55565b600101611b32565b601b81815481106117ef57600080fd5b600b81815481106117ef57600080fd5b6000836001600160a01b0316856001600160a01b0316148015611bc7575082155b15611bd457506000610a0c565b6000196001600160a01b03851615611d4e576001600160a01b038086166000908152601d60209081526040808320938a168352929052205460ff168015611c4757506001600160a01b038086166000908152601f60209081526040808320938a16835292905220611c4590846133d3565b155b15611c5457506000611d4e565b6001600160a01b038086166000908152601c60209081526040808320938a16835292905220548015801590611cb557506001600160a01b038087166000908152601e60209081526040808320938b16835292905220611cb390856133d3565b155b15611d4c5760035460405163fc57d4df60e01b81526001600160a01b038881166004830152600092169063fc57d4df90602401602060405180830381865afa158015611d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d299190613e83565b9050670de0b6b3a7640000611d3e8284613ddb565b611d489190613e24565b9250505b505b6000611d5987610dcc565b9050600081118015611d8957506001600160a01b03871660009081526020805260409020611d8790856133d3565b155b15611e6c5760035460405163fc57d4df60e01b81526001600160a01b038981166004830152600092169063fc57d4df90602401602060405180830381865afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd9190613e83565b90506000670de0b6b3a7640000611e148385613ddb565b611e1e9190613e24565b6001600160a01b038a16600090815260086020526040902060010154909150670de0b6b3a764000090611e519083613ddb565b611e5b9190613e24565b905083811015611e69578093505b50505b5095945050505050565b6000611e806133f5565b611e9c5760405162461bcd60e51b8152600401610a3a90613b09565b738680ceabcb9b56913c519c069add6bc3494b702060005b600954811015611f5b5760098181548110611ed157611ed1613b29565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b0316637f15e2166040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f529190613e83565b50600101611eb4565b50604051632210724360e11b8152738fba84867ba458e7c6e2c024d2de3d0b5c3ea1c260048201526001600160a01b03821690634420e486906024016020604051808303816000875af1158015611fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fda9190613e83565b91505090565b6000611fea6133f5565b611ffa57610d9e60016018613480565b6001600160a01b03821660009081526008602052604090205460ff1661202657610d9e60086019613480565b6000826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208a9190613e83565b111561209c57610d9e6014601a613480565b6001600160a01b0382166000908152600860209081526040808320805460ff1916815560010183905560098054825181850281018501909352808352919290919083018282801561211657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116120f8575b5050835193945083925060009150505b8281101561217057856001600160a01b031684828151811061214a5761214a613b29565b60200260200101516001600160a01b03160361216857809150612170565b600101612126565b5081811061218057612180613eb2565b6009805461219090600190613b55565b815481106121a0576121a0613b29565b600091825260209091200154600980546001600160a01b0390921691839081106121cc576121cc613b29565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600980548061220b5761220b613b68565b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590556000600e6000876001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229b9190613ba1565b6001600160a01b039081168252602080830193909352604091820160002080546001600160a01b031916948216949094179093555191871682527f302feb03efd5741df80efe7f97f5d93d74d46a542a3d312d0faae64fa1f3e0e9910160405180910390a1600095945050505050565b60408051602180825261044082019092526060919060009082602082016104208036833701905050905063692fd2a960e01b8161234784613ec8565b93508360ff168151811061235d5761235d613b29565b6001600160e01b031990921660209283029190910190910152631469217960e21b8161238884613ec8565b93508360ff168151811061239e5761239e613b29565b6001600160e01b03199092166020928302919091019091015263607ef6c160e01b816123c984613ec8565b93508360ff16815181106123df576123df613b29565b6001600160e01b03199092166020928302919091019091015263d219fca760e01b8161240a84613ec8565b93508360ff168151811061242057612420613b29565b6001600160e01b03199092166020928302919091019091015263063b571360e51b8161244b84613ec8565b93508360ff168151811061246157612461613b29565b6001600160e01b0319909216602092830291909101909101526351c8491d60e01b8161248c84613ec8565b93508360ff16815181106124a2576124a2613b29565b6001600160e01b031990921660209283029190910190910152632fa5169960e21b816124cd84613ec8565b93508360ff16815181106124e3576124e3613b29565b6001600160e01b03199092166020928302919091019091015263391957d760e01b8161250e84613ec8565b93508360ff168151811061252457612524613b29565b6001600160e01b031990921660209283029190910190910152632fad78d560e11b8161254f84613ec8565b93508360ff168151811061256557612565613b29565b6001600160e01b031990921660209283029190910190910152633bcf7ec160e01b8161259084613ec8565b93508360ff16815181106125a6576125a6613b29565b6001600160e01b0319909216602092830291909101909101526318c882a560e01b816125d184613ec8565b93508360ff16815181106125e7576125e7613b29565b6001600160e01b0319909216602092830291909101909101526323afd8d960e21b8161261284613ec8565b93508360ff168151811061262857612628613b29565b6001600160e01b0319909216602092830291909101909101526305ae1b6f60e31b8161265384613ec8565b93508360ff168151811061266957612669613b29565b6001600160e01b031990921660209283029190910190910152631032c0b560e31b8161269484613ec8565b93508360ff16815181106126aa576126aa613b29565b6001600160e01b03199092166020928302919091019091015263b0772d0b60e01b816126d584613ec8565b93508360ff16815181106126eb576126eb613b29565b6001600160e01b031990921660209283029190910190910152631955e6df60e11b8161271684613ec8565b93508360ff168151811061272c5761272c613b29565b6001600160e01b03199092166020928302919091019091015263015c3b9b60e41b8161275784613ec8565b93508360ff168151811061276d5761276d613b29565b6001600160e01b03199092166020928302919091019091015263e680659160e01b8161279884613ec8565b93508360ff16815181106127ae576127ae613b29565b6001600160e01b03199092166020928302919091019091015263d01f63f560e01b816127d984613ec8565b93508360ff16815181106127ef576127ef613b29565b6001600160e01b031990921660209283029190910190910152633605b51b60e01b8161281a84613ec8565b93508360ff168151811061283057612830613b29565b6001600160e01b03199092166020928302919091019091015263d9e0ea6b60e01b8161285b84613ec8565b93508360ff168151811061287157612871613b29565b6001600160e01b031990921660209283029190910190910152634a76e72760e01b8161289c84613ec8565b93508360ff16815181106128b2576128b2613b29565b6001600160e01b03199092166020928302919091019091015263084c846760e11b816128dd84613ec8565b93508360ff16815181106128f3576128f3613b29565b6001600160e01b03199092166020928302919091019091015263a5fb485760e01b8161291e84613ec8565b93508360ff168151811061293457612934613b29565b6001600160e01b03199092166020928302919091019091015263ee5b9a2f60e01b8161295f84613ec8565b93508360ff168151811061297557612975613b29565b6001600160e01b03199092166020928302919091019091015263044707e760e11b816129a084613ec8565b93508360ff16815181106129b6576129b6613b29565b6001600160e01b031990921660209283029190910190910152633e1d3ac360e21b816129e184613ec8565b93508360ff16815181106129f7576129f7613b29565b6001600160e01b031990921660209283029190910190910152631139fa0760e11b81612a2284613ec8565b93508360ff1681518110612a3857612a38613b29565b6001600160e01b03199092166020928302919091019091015263b325380160e01b81612a6384613ec8565b93508360ff1681518110612a7957612a79613b29565b6001600160e01b031990921660209283029190910190910152637db121fd60e11b81612aa484613ec8565b93508360ff1681518110612aba57612aba613b29565b6001600160e01b031990921660209283029190910190910152631d3965af60e11b81612ae584613ec8565b93508360ff1681518110612afb57612afb613b29565b6001600160e01b031990921660209283029190910190910152633c1f884b60e11b81612b2684613ec8565b93508360ff1681518110612b3c57612b3c613b29565b6001600160e01b031990921660209283029190910190910152633f8af10b60e11b81612b6784613ec8565b93508360ff1681518110612b7d57612b7d613b29565b6001600160e01b03199092166020928302919091019091015260ff821615610d9e5760405162461bcd60e51b815260206004820152601c60248201527f7573652074686520636f7272656374206172726179206c656e677468000000006044820152606401610a3a565b6013546000906001600160a01b0316331480612c065750612c066133f5565b612c225760405162461bcd60e51b8152600401610a3a90613b7e565b612c2a6133f5565b80612c3757506001821515145b612c535760405162461bcd60e51b8152600401610a3a90613b09565b60138054831515600160b01b0260ff60b01b199091161790556040517fef159d9a32b2472e32b098f954f3ce62d232939f1c207070b584df1814de2de0906111159084906040808252600890820152672a3930b739b332b960c11b6060820152901515602082015260800190565b612cc96133f5565b612ce55760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b039283166000908152601c602090815260408083209490951682529290925291902055565b60606009805480602002602001604051908101604052809291908181526020018280548015611179576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161115b575050505050905090565b604080516060810182526022546001600160a01b03811680835260ff600160a01b8304166020840152600160a81b909104600090810b9383019390935215612df3576000836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e4e573d6000803e3d6000fd5b50506001600160a01b031660009081526017602052604090205490565b6001600160a01b0382166000908152602160205260408120610dc590836133d3565b612e3a6133f5565b612e565760405162461bcd60e51b8152600401610a3a90613b09565b8015612e7e576001600160a01b03831660009081526021602052604090206117b89083613456565b6001600160a01b03831660009081526021602052604090206117b8908361346b565b601981815481106117ef57600080fd5b612eb86133f5565b612ed45760405162461bcd60e51b8152600401610a3a90613b09565b8015612f0f576001600160a01b038085166000908152601f60209081526040808320938716835292905220612f099083613456565b506117b8565b6001600160a01b038085166000908152601f60209081526040808320938716835292905220612f3e908361346b565b5050505050565b60606011805480602002602001604051908101604052809291908181526020018280548015611179576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161115b575050505050905090565b612fad6133f5565b612fc95760405162461bcd60e51b8152600401610a3a90613b09565b8015612ffe576001600160a01b038085166000908152601e60209081526040808320938716835292905220612f099083613456565b6001600160a01b038085166000908152601e60209081526040808320938716835292905220612f3e908361346b565b601181815481106117ef57600080fd5b6000805b600954811015610c555760006009828154811061306057613060613b29565b60009182526020808320909101546001600160a01b03908116808452600883526040808520928916855260029092019092529091205490915060ff16156130ab575060019392505050565b50600101613041565b600760205281600052604060002081815481106130d057600080fd5b6000918252602090912001546001600160a01b03169150829050565b600b5460009060609080830361311657604080516000808252602082019092529250925050613264565b836000036131245761012c93505b8360006131318284613ee5565b905061313d8684613e24565b94508015613168578461314f81613ef9565b955085905061315f886001613e38565b03613168578091505b84613174886001613e38565b111561319457505060408051600081526020810190915291506132649050565b60006131a08789613ddb565b90508267ffffffffffffffff8111156131bb576131bb613bbe565b6040519080825280602002602001820160405280156131e4578160200160208202803683370190505b50945060005b8381101561325e57600b6131fe8383613e38565b8154811061320e5761320e613b29565b9060005260206000200160009054906101000a90046001600160a01b031686828151811061323e5761323e613b29565b6001600160a01b03909216602092830291909101909101526001016131ea565b50505050505b9250929050565b6132736133f5565b61328f5760405162461bcd60e51b8152600401610a3a90613b09565b6001600160a01b039283166000908152601d6020908152604080832094909516825292909252919020805460ff1916911515919091179055565b6001600160a01b038084166000908152601f602090815260408083209386168352929052908120610a0c90836133d3565b6001600160a01b03811660009081526020805260408120819061331c90613449565b905060005b815181101561145057836001600160a01b0316633af9e66983838151811061334b5761334b613b29565b60200260200101516040518263ffffffff1660e01b815260040161337e91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561339b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bf9190613e83565b6133c99084613e38565b9250600101613321565b6001600160a01b03811660009081526001830160205260408120541515610dc5565b6001546000906001600160a01b03163314801561341b5750600254600160a81b900460ff165b8061344457506000546001600160a01b0316331480156134445750600254600160a01b900460ff165b905090565b60606000610dc5836134f9565b6000610dc5836001600160a01b038416613555565b6000610dc5836001600160a01b0384166135a4565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360148111156134b5576134b5613e9c565b83601a8111156134c7576134c7613e9c565b60408051928352602083019190915260009082015260600160405180910390a1826014811115610dc557610dc5613e9c565b60608160000180548060200260200160405190810160405280929190818152602001828054801561354957602002820191906000526020600020905b815481526020019060010190808311613535575b50505050509050919050565b600081815260018301602052604081205461359c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d9e565b506000610d9e565b6000818152600183016020526040812054801561368d5760006135c8600183613b55565b85549091506000906135dc90600190613b55565b90508181146136415760008660000182815481106135fc576135fc613b29565b906000526020600020015490508087600001848154811061361f5761361f613b29565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061365257613652613b68565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d9e565b6000915050610d9e565b6001600160a01b03811681146136ac57600080fd5b50565b6000602082840312156136c157600080fd5b8135610dc581613697565b6000806000606084860312156136e157600080fd5b83356136ec81613697565b925060208401356136fc81613697565b9150604084013561370c81613697565b809150509250925092565b8035801515811461372757600080fd5b919050565b6000806040838503121561373f57600080fd5b823561374a81613697565b915061375860208401613717565b90509250929050565b6000806040838503121561377457600080fd5b823561377f81613697565b9150602083013561378f81613697565b809150509250929050565b6000602082840312156137ac57600080fd5b610dc582613717565b60008151808452602080850194506020840160005b838110156137ef5781516001600160a01b0316875295820195908201906001016137ca565b509495945050505050565b602081526000610dc560208301846137b5565b60008083601f84011261381f57600080fd5b50813567ffffffffffffffff81111561383757600080fd5b6020830191508360208260051b850101111561326457600080fd5b6000806000806040858703121561386857600080fd5b843567ffffffffffffffff8082111561388057600080fd5b61388c8883890161380d565b909650945060208701359150808211156138a557600080fd5b506138b28782880161380d565b95989497509550505050565b6000806000606084860312156138d357600080fd5b83356138de81613697565b925060208401356138ee81613697565b91506138fc60408501613717565b90509250925092565b60006020828403121561391757600080fd5b5035919050565b6000806000806080858703121561393457600080fd5b843561393f81613697565b9350602085013561394f81613697565b925061395d60408601613717565b9150606085013561396d81613697565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b818110156139ba5783516001600160e01b03191683529284019291840191600101613994565b50909695505050505050565b6000806000606084860312156139db57600080fd5b83356139e681613697565b925060208401356139f681613697565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b818110156139ba5783516001600160a01b031683529284019291840191600101613a23565b60008060008060808587031215613a5e57600080fd5b8435613a6981613697565b93506020850135613a7981613697565b92506040850135613a8981613697565b9150613a9760608601613717565b905092959194509250565b60008060408385031215613ab557600080fd5b8235613ac081613697565b946020939093013593505050565b60008060408385031215613ae157600080fd5b50508035926020909101359150565b828152604060208201526000610a0c60408301846137b5565b60208082526006908201526510b0b236b4b760d11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610d9e57610d9e613b3f565b634e487b7160e01b600052603160045260246000fd5b60208082526009908201526810b3bab0b93234b0b760b91b604082015260600190565b600060208284031215613bb357600080fd5b8151610dc581613697565b634e487b7160e01b600052604160045260246000fd5b805167ffffffffffffffff8116811461372757600080fd5b600060608284031215613bfe57600080fd5b6040516060810181811067ffffffffffffffff82111715613c2f57634e487b7160e01b600052604160045260246000fd5b604052613c3b83613bd4565b8152613c4960208401613bd4565b6020820152604083015163ffffffff81168114613c6557600080fd5b60408201529392505050565b6000825160005b81811015613c925760208186018101518583015201613c78565b506000920191825250919050565b600060208284031215613cb257600080fd5b815160ff81168114610dc557600080fd5b8082018281126000831280158216821582161715613ce357613ce3613b3f565b505092915050565b600181815b80851115613d26578160001904821115613d0c57613d0c613b3f565b80851615613d1957918102915b93841c9390800290613cf0565b509250929050565b600082613d3d57506001610d9e565b81613d4a57506000610d9e565b8160018114613d605760028114613d6a57613d86565b6001915050610d9e565b60ff841115613d7b57613d7b613b3f565b50506001821b610d9e565b5060208310610133831016604e8410600b8410161715613da9575081810a610d9e565b613db38383613ceb565b8060001904821115613dc757613dc7613b3f565b029392505050565b6000610dc58383613d2e565b8082028115828204841417610d9e57610d9e613b3f565b6000600160ff1b8201613e0757613e07613b3f565b5060000390565b634e487b7160e01b600052601260045260246000fd5b600082613e3357613e33613e0e565b500490565b80820180821115610d9e57610d9e613b3f565b600060ff821660ff8103613e6157613e61613b3f565b60010192915050565b60ff8181168382160190811115610d9e57610d9e613b3f565b600060208284031215613e9557600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b600060ff821680613edb57613edb613b3f565b6000190192915050565b600082613ef457613ef4613e0e565b500690565b600060018201613f0b57613f0b613b3f565b506001019056fea26469706673582212204a79bfe3806f2d15b90a91e9b5b4a01fea29671ba7d13d1a25399899bdc97cba64736f6c63430008160033",
  "devdoc": {
    "events": {
      "Failure(uint256,uint256,uint256)": {
        "details": "`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*"
      }
    },
    "kind": "dev",
    "methods": {
      "_getExtensionFunctions()": {
        "returns": {
          "_0": "a list of all the function selectors that this logic extension exposes"
        }
      },
      "_removeFlywheel(address)": {
        "details": "Removes a flywheel from the accruing or non-accruing array",
        "params": {
          "flywheelAddress": "The address of the flywheel to remove from the accruing or non-accruing array"
        },
        "returns": {
          "_0": "true if the flywheel was found and removed"
        }
      },
      "_setBorrowCapGuardian(address)": {
        "params": {
          "newBorrowCapGuardian": "The address of the new Borrow Cap Guardian"
        }
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the borrow caps for",
          "newBorrowCaps": "The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing."
        }
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "details": "Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.",
        "params": {
          "cTokens": "The addresses of the markets (tokens) to change the supply caps for",
          "newSupplyCaps": "The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying."
        }
      },
      "_setPauseGuardian(address)": {
        "params": {
          "newPauseGuardian": "The address of the new Pause Guardian"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "_unsupportMarket(address)": {
        "details": "Admin function unset isListed and collateralFactorMantissa and unadd support for the market",
        "params": {
          "cToken": "The address of the market (token) to unlist"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure. (See enum Error for details)"
        }
      },
      "addNonAccruingFlywheel(address)": {
        "details": "Adds a flywheel to the non-accruing list and if already in the accruing, removes it from that list",
        "params": {
          "flywheelAddress": "The address of the flywheel to add to the non-accruing"
        }
      },
      "effectiveBorrowCaps(address)": {
        "params": {
          "cToken": "The address of the cToken."
        }
      },
      "effectiveSupplyCaps(address)": {
        "params": {
          "cToken": "The address of the cToken."
        }
      },
      "getAllBorrowers()": {
        "details": "The automatic getter may be used to access an individual borrower.",
        "returns": {
          "_0": "The list of borrower account addresses"
        }
      },
      "getAllMarkets()": {
        "details": "The automatic getter may be used to access an individual market.",
        "returns": {
          "_0": "The list of market addresses"
        }
      },
      "getWhitelist()": {
        "details": "The automatic getter may be used to access an individual whitelist status.",
        "returns": {
          "_0": "The list of borrower account addresses"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ActionPaused(string,bool)": {
        "notice": "Emitted when an action is paused globally"
      },
      "MarketActionPaused(address,string,bool)": {
        "notice": "Emitted when an action is paused on a market"
      },
      "MarketUnlisted(address)": {
        "notice": "Emitted when an admin unsupports a market"
      },
      "NewBorrowCap(address,uint256)": {
        "notice": "Emitted when borrow cap for a cToken is changed"
      },
      "NewBorrowCapGuardian(address,address)": {
        "notice": "Emitted when borrow cap guardian is changed"
      },
      "NewPauseGuardian(address,address)": {
        "notice": "Emitted when pause guardian is changed"
      },
      "NewSupplyCap(address,uint256)": {
        "notice": "Emitted when supply cap for a cToken is changed"
      }
    },
    "kind": "user",
    "methods": {
      "_setBorrowCapGuardian(address)": {
        "notice": "Admin function to change the Borrow Cap Guardian"
      },
      "_setMarketBorrowCaps(address[],uint256[])": {
        "notice": "Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert."
      },
      "_setMarketSupplyCaps(address[],uint256[])": {
        "notice": "Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert."
      },
      "_setPauseGuardian(address)": {
        "notice": "Admin function to change the Pause Guardian"
      },
      "_unsupportMarket(address)": {
        "notice": "Removed a market from the markets mapping and sets it as unlisted"
      },
      "accountAssets(address,uint256)": {
        "notice": "Per-account mapping of \"assets you are in\", capped by maxAssets"
      },
      "addNonAccruingFlywheel(address)": {
        "notice": "Returns true if the accruing flyhwheel was found and replaced"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "adminHasRights()": {
        "notice": "Whether or not the admin has admin rights"
      },
      "allBorrowers(uint256)": {
        "notice": "A list of all borrowers who have entered markets"
      },
      "allMarkets(uint256)": {
        "notice": "A list of all markets"
      },
      "borrowCapGuardian()": {
        "notice": "The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market."
      },
      "borrowCaps(address)": {
        "notice": "Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing."
      },
      "cTokensByUnderlying(address)": {
        "notice": "All cTokens addresses mapped by their underlying token addresses"
      },
      "closeFactorMantissa()": {
        "notice": "Multiplier used to calculate the maximum repayAmount when liquidating a borrow"
      },
      "effectiveBorrowCaps(address)": {
        "notice": "Gets the borrow cap of a cToken in the units of the underlying asset."
      },
      "effectiveSupplyCaps(address)": {
        "notice": "Gets the supply cap of a cToken in the units of the underlying asset."
      },
      "enforceWhitelist()": {
        "notice": "Whether or not the supplier whitelist is enforced"
      },
      "getAllBorrowers()": {
        "notice": "Return all of the borrowers"
      },
      "getAllMarkets()": {
        "notice": "Return all of the markets"
      },
      "getRewardsDistributors()": {
        "notice": "Returns an array of all accruing and non-accruing flywheels"
      },
      "getWhitelist()": {
        "notice": "Return all of the whitelist"
      },
      "ionicAdminHasRights()": {
        "notice": "Whether or not the Ionic admin has admin rights"
      },
      "isComptroller()": {
        "notice": "Indicator that this is a Comptroller contract (for inspection)"
      },
      "liquidationIncentiveMantissa()": {
        "notice": "Multiplier representing the discount on collateral that a liquidator receives"
      },
      "markets(address)": {
        "notice": "Official mapping of cTokens -> Market metadata"
      },
      "nonAccruingRewardsDistributors(uint256)": {
        "notice": "RewardsDistributor to list for claiming, but not to notify of flywheel changes."
      },
      "oracle()": {
        "notice": "Oracle which gives the price of any given asset"
      },
      "pauseGuardian()": {
        "notice": "The Pause Guardian can pause certain actions as a safety mechanism.  Actions which allow users to remove their own assets cannot be paused.  Liquidation / seizing / transfer can only be paused globally, not by market."
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "rewardsDistributors(uint256)": {
        "notice": "RewardsDistributor contracts to notify of flywheel changes."
      },
      "supplyCaps(address)": {
        "notice": "Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying."
      },
      "whitelist(address)": {
        "notice": "Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)"
      },
      "whitelistArray(uint256)": {
        "notice": "An array of all whitelisted accounts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 34026,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "ionicAdmin",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 34029,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 34032,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 34036,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "ionicAdminHasRights",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 34040,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "adminHasRights",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 34073,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(BasePriceOracle)78405"
      },
      {
        "astId": 34076,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "closeFactorMantissa",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 34079,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "liquidationIncentiveMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 34081,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "maxAssets",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 34088,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "accountAssets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_contract(ICErc20)26708)dyn_storage)"
      },
      {
        "astId": 34106,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "markets",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Market)34100_storage)"
      },
      {
        "astId": 34111,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "allMarkets",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_contract(ICErc20)26708)dyn_storage"
      },
      {
        "astId": 34116,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 34120,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "allBorrowers",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 34124,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowerIndexes",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34129,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "suppliers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 34135,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "cTokensByUnderlying",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_contract(ICErc20)26708)"
      },
      {
        "astId": 34138,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "enforceWhitelist",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 34143,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "whitelist",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 34147,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "whitelistArray",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 34151,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "whitelistIndexes",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34154,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 34156,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "_mintGuardianPaused",
        "offset": 20,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 34158,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "_borrowGuardianPaused",
        "offset": 21,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 34160,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "transferGuardianPaused",
        "offset": 22,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 34162,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "seizeGuardianPaused",
        "offset": 23,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 34166,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "mintGuardianPaused",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 34170,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowGuardianPaused",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 34176,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowCapGuardian",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 34181,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowCaps",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34186,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "supplyCaps",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34190,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "rewardsDistributors",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 34193,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "_notEntered",
        "offset": 0,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 34196,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "_notEnteredInitialized",
        "offset": 1,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 34200,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "nonAccruingRewardsDistributors",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 34207,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowCapForCollateral",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 34214,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowingAgainstCollateralBlacklist",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 34222,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowCapForCollateralWhitelist",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(AddressSet)7179_storage))"
      },
      {
        "astId": 34230,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowingAgainstCollateralBlacklistWhitelist",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(AddressSet)7179_storage))"
      },
      {
        "astId": 34236,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "supplyCapWhitelist",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_struct(AddressSet)7179_storage)"
      },
      {
        "astId": 34242,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowCapWhitelist",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_struct(AddressSet)7179_storage)"
      },
      {
        "astId": 34249,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "borrowCapConfig",
        "offset": 0,
        "slot": "34",
        "type": "t_struct(PrudentiaConfig)18257_storage"
      },
      {
        "astId": 34253,
        "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
        "label": "supplyCapConfig",
        "offset": 0,
        "slot": "35",
        "type": "t_struct(PrudentiaConfig)18257_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(ICErc20)26708)dyn_storage": {
        "base": "t_contract(ICErc20)26708",
        "encoding": "dynamic_array",
        "label": "contract ICErc20[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BasePriceOracle)78405": {
        "encoding": "inplace",
        "label": "contract BasePriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ICErc20)26708": {
        "encoding": "inplace",
        "label": "contract ICErc20",
        "numberOfBytes": "20"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_contract(ICErc20)26708)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract ICErc20[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(ICErc20)26708)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(ICErc20)26708)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract ICErc20)",
        "numberOfBytes": "32",
        "value": "t_contract(ICErc20)26708"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(AddressSet)7179_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(AddressSet)7179_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)7179_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7179_storage"
      },
      "t_mapping(t_address,t_struct(Market)34100_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ComptrollerV2Storage.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)34100_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)7179_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7178,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6864_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Market)34100_storage": {
        "encoding": "inplace",
        "label": "struct ComptrollerV2Storage.Market",
        "members": [
          {
            "astId": 34093,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "isListed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 34095,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "collateralFactorMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 34099,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "accountMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PrudentiaConfig)18257_storage": {
        "encoding": "inplace",
        "label": "struct PrudentiaLib.PrudentiaConfig",
        "members": [
          {
            "astId": 18252,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "controller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18254,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "offset",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 18256,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "decimalShift",
            "offset": 21,
            "slot": "0",
            "type": "t_int8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)6864_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6859,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6863,
            "contract": "contracts/compound/ComptrollerFirstExtension.sol:ComptrollerFirstExtension",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}