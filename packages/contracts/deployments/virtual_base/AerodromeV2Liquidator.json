{
  "address": "0xD46b85409C43571145206B11D370A62AaeB22475",
  "abi": [
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xed3a4b993044c710e445aaf951c85e4317274b03502f67be6e9e3603269d97fd",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0xD46b85409C43571145206B11D370A62AaeB22475",
    "transactionIndex": 48,
    "gasUsed": "487348",
    "logsBloom": "0x
    "blockHash": "0xc622b0edaa54a068e6a2a5c074925bbb88c376fc96081ef85c289cb7b4d940bb",
    "transactionHash": "0xed3a4b993044c710e445aaf951c85e4317274b03502f67be6e9e3603269d97fd",
    "logs": [],
    "blockNumber": 19986109,
    "cumulativeGasUsed": "9337022",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a0e954176dde567fba8b5e6168808716",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"kind\":\"dev\",\"methods\":{\"redeem(address,uint256,bytes)\":{\"params\":{\"inputAmount\":\"The amount of the input wrapped token to be redeemed for an underlying token.\",\"inputToken\":\"The input wrapped token to be redeemed for an underlying token.\",\"strategyData\":\"The ABI-encoded data to be used in the redemption strategy logic.\"},\"returns\":{\"outputAmount\":\"The quantity of underlying tokens outputted.\",\"outputToken\":\"The underlying ERC20 token outputted.\"}}},\"title\":\"UniswapV2Liquidator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"redeem(address,uint256,bytes)\":{\"notice\":\"Redeems custom collateral `token` for an underlying token.\"}},\"notice\":\"Exchanges seized token collateral for underlying tokens via a Uniswap V2 router for use as a step in a liquidation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidators/AerodromeV2Liquidator.sol\":\"AerodromeV2Liquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/external/aerodrome/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n}\\n\\ninterface IRouter {\\n  struct Route {\\n    address from;\\n    address to;\\n    bool stable;\\n    address factory;\\n  }\\n\\n  error ETHTransferFailed();\\n  error Expired();\\n  error InsufficientAmount();\\n  error InsufficientAmountA();\\n  error InsufficientAmountB();\\n  error InsufficientAmountADesired();\\n  error InsufficientAmountBDesired();\\n  error InsufficientAmountAOptimal();\\n  error InsufficientLiquidity();\\n  error InsufficientOutputAmount();\\n  error InvalidAmountInForETHDeposit();\\n  error InvalidTokenInForETHDeposit();\\n  error InvalidPath();\\n  error InvalidRouteA();\\n  error InvalidRouteB();\\n  error OnlyWETH();\\n  error PoolDoesNotExist();\\n  error PoolFactoryDoesNotExist();\\n  error SameAddresses();\\n  error ZeroAddress();\\n\\n  /// @notice Address of FactoryRegistry.sol\\n  function factoryRegistry() external view returns (address);\\n\\n  /// @notice Address of Protocol PoolFactory.sol\\n  function defaultFactory() external view returns (address);\\n\\n  /// @notice Address of Voter.sol\\n  function voter() external view returns (address);\\n\\n  /// @notice Interface of WETH contract used for WETH => ETH wrapping/unwrapping\\n  function weth() external view returns (IWETH);\\n\\n  /// @dev Represents Ether. Used by zapper to determine whether to return assets as ETH/WETH.\\n  function ETHER() external view returns (address);\\n\\n  /// @dev Struct containing information necessary to zap in and out of pools\\n  /// @param tokenA           .\\n  /// @param tokenB           .\\n  /// @param stable           Stable or volatile pool\\n  /// @param factory          factory of pool\\n  /// @param amountOutMinA    Minimum amount expected from swap leg of zap via routesA\\n  /// @param amountOutMinB    Minimum amount expected from swap leg of zap via routesB\\n  /// @param amountAMin       Minimum amount of tokenA expected from liquidity leg of zap\\n  /// @param amountBMin       Minimum amount of tokenB expected from liquidity leg of zap\\n  struct Zap {\\n    address tokenA;\\n    address tokenB;\\n    bool stable;\\n    address factory;\\n    uint256 amountOutMinA;\\n    uint256 amountOutMinB;\\n    uint256 amountAMin;\\n    uint256 amountBMin;\\n  }\\n\\n  /// @notice Sort two tokens by which address value is less than the other\\n  /// @param tokenA   Address of token to sort\\n  /// @param tokenB   Address of token to sort\\n  /// @return token0  Lower address value between tokenA and tokenB\\n  /// @return token1  Higher address value between tokenA and tokenB\\n  function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n  /// @notice Calculate the address of a pool by its' factory.\\n  ///         Used by all Router functions containing a `Route[]` or `_factory` argument.\\n  ///         Reverts if _factory is not approved by the FactoryRegistry\\n  /// @dev Returns a randomly generated address for a nonexistent pool\\n  /// @param tokenA   Address of token to query\\n  /// @param tokenB   Address of token to query\\n  /// @param stable   True if pool is stable, false if volatile\\n  /// @param _factory Address of factory which created the pool\\n  function poolFor(address tokenA, address tokenB, bool stable, address _factory) external view returns (address pool);\\n\\n  /// @notice Fetch and sort the reserves for a pool\\n  /// @param tokenA       .\\n  /// @param tokenB       .\\n  /// @param stable       True if pool is stable, false if volatile\\n  /// @param _factory     Address of PoolFactory for tokenA and tokenB\\n  /// @return reserveA    Amount of reserves of the sorted token A\\n  /// @return reserveB    Amount of reserves of the sorted token B\\n  function getReserves(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    address _factory\\n  ) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n  /// @notice Perform chained getAmountOut calculations on any number of pools\\n  function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n  // **** ADD LIQUIDITY ****\\n\\n  /// @notice Quote the amount deposited into a Pool\\n  /// @param tokenA           .\\n  /// @param tokenB           .\\n  /// @param stable           True if pool is stable, false if volatile\\n  /// @param _factory         Address of PoolFactory for tokenA and tokenB\\n  /// @param amountADesired   Amount of tokenA desired to deposit\\n  /// @param amountBDesired   Amount of tokenB desired to deposit\\n  /// @return amountA         Amount of tokenA to actually deposit\\n  /// @return amountB         Amount of tokenB to actually deposit\\n  /// @return liquidity       Amount of liquidity token returned from deposit\\n  function quoteAddLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    address _factory,\\n    uint256 amountADesired,\\n    uint256 amountBDesired\\n  ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n  /// @notice Quote the amount of liquidity removed from a Pool\\n  /// @param tokenA       .\\n  /// @param tokenB       .\\n  /// @param stable       True if pool is stable, false if volatile\\n  /// @param _factory     Address of PoolFactory for tokenA and tokenB\\n  /// @param liquidity    Amount of liquidity to remove\\n  /// @return amountA     Amount of tokenA received\\n  /// @return amountB     Amount of tokenB received\\n  function quoteRemoveLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    address _factory,\\n    uint256 liquidity\\n  ) external view returns (uint256 amountA, uint256 amountB);\\n\\n  /// @notice Add liquidity of two tokens to a Pool\\n  /// @param tokenA           .\\n  /// @param tokenB           .\\n  /// @param stable           True if pool is stable, false if volatile\\n  /// @param amountADesired   Amount of tokenA desired to deposit\\n  /// @param amountBDesired   Amount of tokenB desired to deposit\\n  /// @param amountAMin       Minimum amount of tokenA to deposit\\n  /// @param amountBMin       Minimum amount of tokenB to deposit\\n  /// @param to               Recipient of liquidity token\\n  /// @param deadline         Deadline to receive liquidity\\n  /// @return amountA         Amount of tokenA to actually deposit\\n  /// @return amountB         Amount of tokenB to actually deposit\\n  /// @return liquidity       Amount of liquidity token returned from deposit\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n  /// @notice Add liquidity of a token and WETH (transferred as ETH) to a Pool\\n  /// @param token                .\\n  /// @param stable               True if pool is stable, false if volatile\\n  /// @param amountTokenDesired   Amount of token desired to deposit\\n  /// @param amountTokenMin       Minimum amount of token to deposit\\n  /// @param amountETHMin         Minimum amount of ETH to deposit\\n  /// @param to                   Recipient of liquidity token\\n  /// @param deadline             Deadline to add liquidity\\n  /// @return amountToken         Amount of token to actually deposit\\n  /// @return amountETH           Amount of tokenETH to actually deposit\\n  /// @return liquidity           Amount of liquidity token returned from deposit\\n  function addLiquidityETH(\\n    address token,\\n    bool stable,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n  // **** REMOVE LIQUIDITY ****\\n\\n  /// @notice Remove liquidity of two tokens from a Pool\\n  /// @param tokenA       .\\n  /// @param tokenB       .\\n  /// @param stable       True if pool is stable, false if volatile\\n  /// @param liquidity    Amount of liquidity to remove\\n  /// @param amountAMin   Minimum amount of tokenA to receive\\n  /// @param amountBMin   Minimum amount of tokenB to receive\\n  /// @param to           Recipient of tokens received\\n  /// @param deadline     Deadline to remove liquidity\\n  /// @return amountA     Amount of tokenA received\\n  /// @return amountB     Amount of tokenB received\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  /// @notice Remove liquidity of a token and WETH (returned as ETH) from a Pool\\n  /// @param token            .\\n  /// @param stable           True if pool is stable, false if volatile\\n  /// @param liquidity        Amount of liquidity to remove\\n  /// @param amountTokenMin   Minimum amount of token to receive\\n  /// @param amountETHMin     Minimum amount of ETH to receive\\n  /// @param to               Recipient of liquidity token\\n  /// @param deadline         Deadline to receive liquidity\\n  /// @return amountToken     Amount of token received\\n  /// @return amountETH       Amount of ETH received\\n  function removeLiquidityETH(\\n    address token,\\n    bool stable,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  /// @notice Remove liquidity of a fee-on-transfer token and WETH (returned as ETH) from a Pool\\n  /// @param token            .\\n  /// @param stable           True if pool is stable, false if volatile\\n  /// @param liquidity        Amount of liquidity to remove\\n  /// @param amountTokenMin   Minimum amount of token to receive\\n  /// @param amountETHMin     Minimum amount of ETH to receive\\n  /// @param to               Recipient of liquidity token\\n  /// @param deadline         Deadline to receive liquidity\\n  /// @return amountETH       Amount of ETH received\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    bool stable,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  // **** SWAP ****\\n\\n  /// @notice Swap one token for another\\n  /// @param amountIn     Amount of token in\\n  /// @param amountOutMin Minimum amount of desired token received\\n  /// @param routes       Array of trade routes used in the swap\\n  /// @param to           Recipient of the tokens received\\n  /// @param deadline     Deadline to receive tokens\\n  /// @return amounts     Array of amounts returned per route\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  /// @notice Swap ETH for a token\\n  /// @param amountOutMin Minimum amount of desired token received\\n  /// @param routes       Array of trade routes used in the swap\\n  /// @param to           Recipient of the tokens received\\n  /// @param deadline     Deadline to receive tokens\\n  /// @return amounts     Array of amounts returned per route\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  /// @notice Swap a token for WETH (returned as ETH)\\n  /// @param amountIn     Amount of token in\\n  /// @param amountOutMin Minimum amount of desired ETH\\n  /// @param routes       Array of trade routes used in the swap\\n  /// @param to           Recipient of the tokens received\\n  /// @param deadline     Deadline to receive tokens\\n  /// @return amounts     Array of amounts returned per route\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  /// @notice Swap one token for another without slippage protection\\n  /// @return amounts     Array of amounts to swap  per route\\n  /// @param routes       Array of trade routes used in the swap\\n  /// @param to           Recipient of the tokens received\\n  /// @param deadline     Deadline to receive tokens\\n  function UNSAFE_swapExactTokensForTokens(\\n    uint256[] memory amounts,\\n    Route[] calldata routes,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  // **** SWAP (supporting fee-on-transfer tokens) ****\\n\\n  /// @notice Swap one token for another supporting fee-on-transfer tokens\\n  /// @param amountIn     Amount of token in\\n  /// @param amountOutMin Minimum amount of desired token received\\n  /// @param routes       Array of trade routes used in the swap\\n  /// @param to           Recipient of the tokens received\\n  /// @param deadline     Deadline to receive tokens\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  /// @notice Swap ETH for a token supporting fee-on-transfer tokens\\n  /// @param amountOutMin Minimum amount of desired token received\\n  /// @param routes       Array of trade routes used in the swap\\n  /// @param to           Recipient of the tokens received\\n  /// @param deadline     Deadline to receive tokens\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  /// @notice Swap a token for WETH (returned as ETH) supporting fee-on-transfer tokens\\n  /// @param amountIn     Amount of token in\\n  /// @param amountOutMin Minimum amount of desired ETH\\n  /// @param routes       Array of trade routes used in the swap\\n  /// @param to           Recipient of the tokens received\\n  /// @param deadline     Deadline to receive tokens\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    Route[] calldata routes,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  /// @notice Zap a token A into a pool (B, C). (A can be equal to B or C).\\n  ///         Supports standard ERC20 tokens only (i.e. not fee-on-transfer tokens etc).\\n  ///         Slippage is required for the initial swap.\\n  ///         Additional slippage may be required when adding liquidity as the\\n  ///         price of the token may have changed.\\n  /// @param tokenIn      Token you are zapping in from (i.e. input token).\\n  /// @param amountInA    Amount of input token you wish to send down routesA\\n  /// @param amountInB    Amount of input token you wish to send down routesB\\n  /// @param zapInPool    Contains zap struct information. See Zap struct.\\n  /// @param routesA      Route used to convert input token to tokenA\\n  /// @param routesB      Route used to convert input token to tokenB\\n  /// @param to           Address you wish to mint liquidity to.\\n  /// @param stake        Auto-stake liquidity in corresponding gauge.\\n  /// @return liquidity   Amount of LP tokens created from zapping in.\\n  function zapIn(\\n    address tokenIn,\\n    uint256 amountInA,\\n    uint256 amountInB,\\n    Zap calldata zapInPool,\\n    Route[] calldata routesA,\\n    Route[] calldata routesB,\\n    address to,\\n    bool stake\\n  ) external payable returns (uint256 liquidity);\\n\\n  /// @notice Zap out a pool (B, C) into A.\\n  ///         Supports standard ERC20 tokens only (i.e. not fee-on-transfer tokens etc).\\n  ///         Slippage is required for the removal of liquidity.\\n  ///         Additional slippage may be required on the swap as the\\n  ///         price of the token may have changed.\\n  /// @param tokenOut     Token you are zapping out to (i.e. output token).\\n  /// @param liquidity    Amount of liquidity you wish to remove.\\n  /// @param zapOutPool   Contains zap struct information. See Zap struct.\\n  /// @param routesA      Route used to convert tokenA into output token.\\n  /// @param routesB      Route used to convert tokenB into output token.\\n  function zapOut(\\n    address tokenOut,\\n    uint256 liquidity,\\n    Zap calldata zapOutPool,\\n    Route[] calldata routesA,\\n    Route[] calldata routesB\\n  ) external;\\n\\n  /// @notice Used to generate params required for zapping in.\\n  ///         Zap in => remove liquidity then swap.\\n  ///         Apply slippage to expected swap values to account for changes in reserves in between.\\n  /// @dev Output token refers to the token you want to zap in from.\\n  /// @param tokenA           .\\n  /// @param tokenB           .\\n  /// @param stable           .\\n  /// @param _factory         .\\n  /// @param amountInA        Amount of input token you wish to send down routesA\\n  /// @param amountInB        Amount of input token you wish to send down routesB\\n  /// @param routesA          Route used to convert input token to tokenA\\n  /// @param routesB          Route used to convert input token to tokenB\\n  /// @return amountOutMinA   Minimum output expected from swapping input token to tokenA.\\n  /// @return amountOutMinB   Minimum output expected from swapping input token to tokenB.\\n  /// @return amountAMin      Minimum amount of tokenA expected from depositing liquidity.\\n  /// @return amountBMin      Minimum amount of tokenB expected from depositing liquidity.\\n  function generateZapInParams(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    address _factory,\\n    uint256 amountInA,\\n    uint256 amountInB,\\n    Route[] calldata routesA,\\n    Route[] calldata routesB\\n  ) external view returns (uint256 amountOutMinA, uint256 amountOutMinB, uint256 amountAMin, uint256 amountBMin);\\n\\n  /// @notice Used to generate params required for zapping out.\\n  ///         Zap out => swap then add liquidity.\\n  ///         Apply slippage to expected liquidity values to account for changes in reserves in between.\\n  /// @dev Output token refers to the token you want to zap out of.\\n  /// @param tokenA           .\\n  /// @param tokenB           .\\n  /// @param stable           .\\n  /// @param _factory         .\\n  /// @param liquidity        Amount of liquidity being zapped out of into a given output token.\\n  /// @param routesA          Route used to convert tokenA into output token.\\n  /// @param routesB          Route used to convert tokenB into output token.\\n  /// @return amountOutMinA   Minimum output expected from swapping tokenA into output token.\\n  /// @return amountOutMinB   Minimum output expected from swapping tokenB into output token.\\n  /// @return amountAMin      Minimum amount of tokenA expected from withdrawing liquidity.\\n  /// @return amountBMin      Minimum amount of tokenB expected from withdrawing liquidity.\\n  function generateZapOutParams(\\n    address tokenA,\\n    address tokenB,\\n    bool stable,\\n    address _factory,\\n    uint256 liquidity,\\n    Route[] calldata routesA,\\n    Route[] calldata routesB\\n  ) external view returns (uint256 amountOutMinA, uint256 amountOutMinB, uint256 amountAMin, uint256 amountBMin);\\n\\n  /// @notice Used by zapper to determine appropriate ratio of A to B to deposit liquidity. Assumes stable pool.\\n  /// @dev Returns stable liquidity ratio of B to (A + B).\\n  ///      E.g. if ratio is 0.4, it means there is more of A than there is of B.\\n  ///      Therefore you should deposit more of token A than B.\\n  /// @param tokenA   tokenA of stable pool you are zapping into.\\n  /// @param tokenB   tokenB of stable pool you are zapping into.\\n  /// @param factory  Factory that created stable pool.\\n  /// @return ratio   Ratio of token0 to token1 required to deposit into zap.\\n  function quoteStableLiquidityRatio(\\n    address tokenA,\\n    address tokenB,\\n    address factory\\n  ) external view returns (uint256 ratio);\\n}\\n\",\"keccak256\":\"0x526cb5f23b0128475897604b3d30e4a0d17515dd80d118fe1d0841335f0dc49b\",\"license\":\"Unlicense\"},\"contracts/liquidators/AerodromeV2Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { IRouter } from \\\"../external/aerodrome/IRouter.sol\\\";\\n\\n/**\\n * @title UniswapV2Liquidator\\n * @notice Exchanges seized token collateral for underlying tokens via a Uniswap V2 router for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract AerodromeV2Liquidator {\\n  function _swap(IRouter router, uint256 inputAmount, IRouter.Route[] memory swapPath) internal {\\n    router.swapExactTokensForTokens(inputAmount, 0, swapPath, address(this), block.timestamp);\\n  }\\n\\n  function name() public pure virtual returns (string memory) {\\n    return \\\"AerodromeV2Liquidator\\\";\\n  }\\n\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    return _convert(inputToken, inputAmount, strategyData);\\n  }\\n\\n  function _convert(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) internal returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    // Get Uniswap router and path\\n    (IRouter router, IRouter.Route[] memory swapPath) = abi.decode(strategyData, (IRouter, IRouter.Route[]));\\n    require(swapPath.length >= 1 && swapPath[0].from == address(inputToken), \\\"Invalid AerodromeV2Liquidator swap path.\\\");\\n\\n    // Swap underlying tokens\\n    inputToken.approve(address(router), inputAmount);\\n\\n    // call the relevant fn depending on the uni v2 fork specifics\\n    _swap(router, inputAmount, swapPath);\\n\\n    // Get new collateral\\n    outputToken = IERC20Upgradeable(swapPath[swapPath.length - 1].to);\\n    outputAmount = outputToken.balanceOf(address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xd16d829c9bea299aa865ef4eb2f9cf19a944306f194aebf06972865748b72263\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107da806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007b575b600080fd5b604080518082018252601581527420b2b937b23937b6b2ab192634b8bab4b230ba37b960591b60208201529051610072919061032c565b60405180910390f35b61008e610089366004610403565b6100ad565b604080516001600160a01b039093168352602083019190915201610072565b6000806100bb8585856100c7565b91509150935093915050565b600080600080848060200190518101906100e191906104ed565b9150915060018151101580156101265750866001600160a01b03168160008151811061010f5761010f6105f6565b6020026020010151600001516001600160a01b0316145b6101875760405162461bcd60e51b815260206004820152602860248201527f496e76616c6964204165726f64726f6d6556324c697175696461746f7220737760448201526730b8103830ba341760c11b606482015260840160405180910390fd5b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa919061060c565b506102068287836102aa565b8060018251610215919061062e565b81518110610225576102256105f6565b60209081029190910181015101516040516370a0823160e01b81523060048201529094506001600160a01b038516906370a0823190602401602060405180830381865afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610655565b92505050935093915050565b60405163cac88ea960e01b81526001600160a01b0384169063cac88ea9906102df90859060009086903090429060040161066e565b6000604051808303816000875af11580156102fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103269190810190610713565b50505050565b60006020808352835180602085015260005b8181101561035a5785810183015185820160400152820161033e565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461039057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156103cc576103cc610393565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103fb576103fb610393565b604052919050565b60008060006060848603121561041857600080fd5b83356104238161037b565b92506020848101359250604085013567ffffffffffffffff8082111561044857600080fd5b818701915087601f83011261045c57600080fd5b81358181111561046e5761046e610393565b610480601f8201601f191685016103d2565b9150808252888482850101111561049657600080fd5b80848401858401376000848284010152508093505050509250925092565b600067ffffffffffffffff8211156104ce576104ce610393565b5060051b60200190565b805180151581146104e857600080fd5b919050565b600080604080848603121561050157600080fd5b835161050c8161037b565b8093505060208085015167ffffffffffffffff81111561052b57600080fd5b8501601f8101871361053c57600080fd5b805161054f61054a826104b4565b6103d2565b81815260079190911b8201830190838101908983111561056e57600080fd5b928401925b828410156105e6576080848b03121561058c5760008081fd5b6105946103a9565b845161059f8161037b565b8152848601516105ae8161037b565b818701526105bd8588016104d8565b878201526060808601516105d08161037b565b9082015282526080939093019290840190610573565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561061e57600080fd5b610627826104d8565b9392505050565b8181038181111561064f57634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561066757600080fd5b5051919050565b600060a082018783526020876020850152604060a0604086015282885180855260c08701915060208a01945060005b818110156106e757855180516001600160a01b039081168552868201518116878601528582015115158686015260609182015116908401529484019460809092019160010161069d565b50506001600160a01b0388166060870152935061070392505050565b8260808301529695505050505050565b6000602080838503121561072657600080fd5b825167ffffffffffffffff81111561073d57600080fd5b8301601f8101851361074e57600080fd5b805161075c61054a826104b4565b81815260059190911b8201830190838101908783111561077b57600080fd5b928401925b8284101561079957835182529284019290840190610780565b97965050505050505056fea264697066735822122049929557b8e75c4787f5fb8549ae5419b770bcef57d58676dea5930b1415a39b64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007b575b600080fd5b604080518082018252601581527420b2b937b23937b6b2ab192634b8bab4b230ba37b960591b60208201529051610072919061032c565b60405180910390f35b61008e610089366004610403565b6100ad565b604080516001600160a01b039093168352602083019190915201610072565b6000806100bb8585856100c7565b91509150935093915050565b600080600080848060200190518101906100e191906104ed565b9150915060018151101580156101265750866001600160a01b03168160008151811061010f5761010f6105f6565b6020026020010151600001516001600160a01b0316145b6101875760405162461bcd60e51b815260206004820152602860248201527f496e76616c6964204165726f64726f6d6556324c697175696461746f7220737760448201526730b8103830ba341760c11b606482015260840160405180910390fd5b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa919061060c565b506102068287836102aa565b8060018251610215919061062e565b81518110610225576102256105f6565b60209081029190910181015101516040516370a0823160e01b81523060048201529094506001600160a01b038516906370a0823190602401602060405180830381865afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610655565b92505050935093915050565b60405163cac88ea960e01b81526001600160a01b0384169063cac88ea9906102df90859060009086903090429060040161066e565b6000604051808303816000875af11580156102fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103269190810190610713565b50505050565b60006020808352835180602085015260005b8181101561035a5785810183015185820160400152820161033e565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461039057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156103cc576103cc610393565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103fb576103fb610393565b604052919050565b60008060006060848603121561041857600080fd5b83356104238161037b565b92506020848101359250604085013567ffffffffffffffff8082111561044857600080fd5b818701915087601f83011261045c57600080fd5b81358181111561046e5761046e610393565b610480601f8201601f191685016103d2565b9150808252888482850101111561049657600080fd5b80848401858401376000848284010152508093505050509250925092565b600067ffffffffffffffff8211156104ce576104ce610393565b5060051b60200190565b805180151581146104e857600080fd5b919050565b600080604080848603121561050157600080fd5b835161050c8161037b565b8093505060208085015167ffffffffffffffff81111561052b57600080fd5b8501601f8101871361053c57600080fd5b805161054f61054a826104b4565b6103d2565b81815260079190911b8201830190838101908983111561056e57600080fd5b928401925b828410156105e6576080848b03121561058c5760008081fd5b6105946103a9565b845161059f8161037b565b8152848601516105ae8161037b565b818701526105bd8588016104d8565b878201526060808601516105d08161037b565b9082015282526080939093019290840190610573565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561061e57600080fd5b610627826104d8565b9392505050565b8181038181111561064f57634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561066757600080fd5b5051919050565b600060a082018783526020876020850152604060a0604086015282885180855260c08701915060208a01945060005b818110156106e757855180516001600160a01b039081168552868201518116878601528582015115158686015260609182015116908401529484019460809092019160010161069d565b50506001600160a01b0388166060870152935061070392505050565b8260808301529695505050505050565b6000602080838503121561072657600080fd5b825167ffffffffffffffff81111561073d57600080fd5b8301601f8101851361074e57600080fd5b805161075c61054a826104b4565b81815260059190911b8201830190838101908783111561077b57600080fd5b928401925b8284101561079957835182529284019290840190610780565b97965050505050505056fea264697066735822122049929557b8e75c4787f5fb8549ae5419b770bcef57d58676dea5930b1415a39b64736f6c63430008160033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "kind": "dev",
    "methods": {
      "redeem(address,uint256,bytes)": {
        "params": {
          "inputAmount": "The amount of the input wrapped token to be redeemed for an underlying token.",
          "inputToken": "The input wrapped token to be redeemed for an underlying token.",
          "strategyData": "The ABI-encoded data to be used in the redemption strategy logic."
        },
        "returns": {
          "outputAmount": "The quantity of underlying tokens outputted.",
          "outputToken": "The underlying ERC20 token outputted."
        }
      }
    },
    "title": "UniswapV2Liquidator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "redeem(address,uint256,bytes)": {
        "notice": "Redeems custom collateral `token` for an underlying token."
      }
    },
    "notice": "Exchanges seized token collateral for underlying tokens via a Uniswap V2 router for use as a step in a liquidation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}