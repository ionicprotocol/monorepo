{
  "address": "0xE68e481584848D2D48335A73696dC39729f0Af02",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "veloWallet",
          "type": "address"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEscrow",
          "type": "address"
        }
      ],
      "name": "EscrowSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "escrow",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stakingWalletImplementation",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "veloWallet",
          "type": "address"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newStakingContract",
          "type": "address"
        }
      ],
      "name": "StakingContractSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newStakingToken",
          "type": "address"
        }
      ],
      "name": "StakingTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakingWalletTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBeacon",
          "type": "address"
        }
      ],
      "name": "UpgradeableBeaconSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingWalletImplementation",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "name": "setEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "name": "setStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beacon",
          "type": "address"
        }
      ],
      "name": "setUpgradeableBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferStakingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakingWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veloAeroBeacon",
      "outputs": [
        {
          "internalType": "contract UpgradeableBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_withdrawTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdeb442d0dc28f1f8f23dab773ddbcd68c92974f7f1ca5c26d2d3bf303588d114",
  "receipt": {
    "to": null,
    "from": "0x7d922bf0975424b3371074f54cC784AF738Dac0D",
    "contractAddress": "0xE68e481584848D2D48335A73696dC39729f0Af02",
    "transactionIndex": 1,
    "gasUsed": "2159447",
    "logsBloom": "0x
    "blockHash": "0x6852c77b96566bb4808dd8f817f5293f26b80bce15133dcfc49142d4a35fe148",
    "transactionHash": "0xdeb442d0dc28f1f8f23dab773ddbcd68c92974f7f1ca5c26d2d3bf303588d114",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 14522705,
        "transactionHash": "0xdeb442d0dc28f1f8f23dab773ddbcd68c92974f7f1ca5c26d2d3bf303588d114",
        "address": "0xE68e481584848D2D48335A73696dC39729f0Af02",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x6852c77b96566bb4808dd8f817f5293f26b80bce15133dcfc49142d4a35fe148"
      }
    ],
    "blockNumber": 14522705,
    "cumulativeGasUsed": "2203286",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0366741513880e85aaa5abbf67624948",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"veloWallet\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEscrow\",\"type\":\"address\"}],\"name\":\"EscrowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingWalletImplementation\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"veloWallet\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStakingContract\",\"type\":\"address\"}],\"name\":\"StakingContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newStakingToken\",\"type\":\"address\"}],\"name\":\"StakingTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingWalletTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBeacon\",\"type\":\"address\"}],\"name\":\"UpgradeableBeaconSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingWalletImplementation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"setEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beacon\",\"type\":\"address\"}],\"name\":\"setUpgradeableBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferStakingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veloAeroBeacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_withdrawTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"balanceOf(address)\":{\"params\":{\"account\":\"The address to query the balance of.\"},\"returns\":{\"_0\":\"The balance as a uint256.\"}},\"claim(address)\":{\"params\":{\"_from\":\"The address for which to claim rewards.\"}},\"initialize(address,address,address,address)\":{\"details\":\"This function can only be called once due to the initializer modifier\",\"params\":{\"_escrow\":\"The address of the escrow responsible for staking operations\",\"_stakingContract\":\"The address of the contract handling staking\",\"_stakingToken\":\"The address of the token to be staked\",\"_stakingWalletImplementation\":\"The address of the staking wallet implementation\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"periodFinish()\":{\"returns\":{\"_0\":\"The period finish time as a uint256.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardRate()\":{\"returns\":{\"_0\":\"The reward rate as a uint256.\"}},\"rewardToken()\":{\"returns\":{\"_0\":\"The address of the reward token.\"}},\"setEscrow(address)\":{\"params\":{\"_escrow\":\"The address of the new escrow.\"}},\"setStakingContract(address)\":{\"params\":{\"_stakingContract\":\"The address of the new staking contract.\"}},\"setStakingToken(address)\":{\"params\":{\"_stakingToken\":\"The address of the new staking token.\"}},\"setUpgradeableBeacon(address)\":{\"params\":{\"_beacon\":\"The address of the new beacon contract.\"}},\"stake(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The amount of tokens to stake.\",\"_data\":\"Additional data that might be needed for staking.\",\"_from\":\"The address from which tokens will be staked.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply as a uint256.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"transferStakingWallet(address,address,uint256)\":{\"params\":{\"from\":\"The current owner of the staking wallet.\",\"to\":\"The new owner of the staking wallet.\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to withdraw.\",\"_owner\":\"The address from which tokens will be withdrawn.\"}}},\"title\":\"VeloAeroStakingStrategy\",\"version\":1},\"userdoc\":{\"events\":{\"Claimed(address,address)\":{\"notice\":\"Emitted when rewards are claimed\"},\"EscrowSet(address)\":{\"notice\":\"Emitted when escrow is set\"},\"Initialized(address,address,address,address)\":{\"notice\":\"Emitted when the contract is initialized\"},\"Staked(address,uint256,address)\":{\"notice\":\"Emitted when tokens are staked\"},\"StakingContractSet(address)\":{\"notice\":\"Emitted when staking contract is set\"},\"StakingTokenSet(address)\":{\"notice\":\"Emitted when staking token is set\"},\"StakingWalletTransferred(address,address,uint256)\":{\"notice\":\"Emitted when staking wallet is transferred\"},\"UpgradeableBeaconSet(address)\":{\"notice\":\"Emitted when upgradeable beacon is set\"},\"Withdrawn(address,address,uint256)\":{\"notice\":\"Emitted when tokens are withdrawn\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the balance of a specific address.\"},\"claim(address)\":{\"notice\":\"Claims rewards for a given address.\"},\"escrow()\":{\"notice\":\"Address of the escrow responsible for managing staking operations\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializes the staking strategy contract with necessary parameters\"},\"periodFinish()\":{\"notice\":\"Returns the period finish time for the staking strategy.\"},\"rewardRate()\":{\"notice\":\"Returns the current reward rate for the staking strategy.\"},\"rewardToken()\":{\"notice\":\"Returns the address of the reward token for the staking strategy.\"},\"setEscrow(address)\":{\"notice\":\"Sets the escrow address.\"},\"setStakingContract(address)\":{\"notice\":\"Sets the staking contract address.\"},\"setStakingToken(address)\":{\"notice\":\"Sets the staking token address.\"},\"setUpgradeableBeacon(address)\":{\"notice\":\"Sets the address of the  beacon.\"},\"stake(address,uint256,bytes)\":{\"notice\":\"Stakes a specified amount of tokens from a given address.\"},\"stakingContract()\":{\"notice\":\"Address of the contract where staking operations are executed\"},\"stakingToken()\":{\"notice\":\"Address of the token being staked\"},\"totalSupply()\":{\"notice\":\"Returns the total supply of staked tokens.\"},\"transferStakingWallet(address,address,uint256)\":{\"notice\":\"Transfers the staking wallet from one user to another.\"},\"userStakingWallet(address)\":{\"notice\":\"Mapping of user addresses to their respective staking wallet addresses\"},\"veloAeroBeacon()\":{\"notice\":\"Address of beacon contract that manages wallet proxies\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraws a specified amount of tokens for a given address.\"}},\"notice\":\"Staking interface for usage in veION when staking Velodrome/Aerodrome style LP.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/stake/velo/VeloAeroStakingStrategy.sol\":\"VeloAeroStakingStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available all functions\\r\\n * from parent (Ownable).\\r\\n */\\r\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\r\\n    function __Ownable2Step_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending owner.\\r\\n     */\\r\\n    function pendingOwner() public view virtual returns (address) {\\r\\n        return _pendingOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\r\\n        _pendingOwner = newOwner;\\r\\n        emit OwnershipTransferStarted(owner(), newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual override {\\r\\n        delete _pendingOwner;\\r\\n        super._transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The new owner accepts the ownership transfer.\\r\\n     */\\r\\n    function acceptOwnership() external {\\r\\n        address sender = _msgSender();\\r\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\r\\n        _transferOwnership(sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xc02ae28ae149c0475b5b98088ecc53b1b6310d906506c5522f598f02d88f9131\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal onlyInitializing {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xcf4a2c2c1a8b1570ee9a7059c218de1efbc9050239b1111dcfc24081391d11b7\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized < type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4603e2f1403e437820665af135e9675c80e81aa005e360318b8e640ca2624658\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20PermitUpgradeable {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xa4ef4473f068f5f97b73e442f554e4464a581c2200c23181287b4c8eee5de777\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20Upgradeable.sol\\\";\\r\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\r\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20Upgradeable {\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20Upgradeable token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20Upgradeable token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20Upgradeable token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20Upgradeable token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20Upgradeable token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20PermitUpgradeable token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5735e7a8ab4d99d6cbef359228e76c7c2057f13f9a22d014458951409ea30f7c\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c08bea8e975fa8e5e635a7753a9442b3d58f501c3a9951df8eb45581054228d\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xee2b6bc803215b66037612da0fe9f23ec3c99ff89db4ff05449a8df17c9befc5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\r\\n * proxy whose upgrades are fully controlled by the current implementation.\\r\\n */\\r\\ninterface IERC1822Proxiable {\\r\\n    /**\\r\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\r\\n     * address.\\r\\n     *\\r\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\r\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\r\\n     * function revert if invoked through a proxy.\\r\\n     */\\r\\n    function proxiableUUID() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xe768c5863db91751a70d25c9dac899ec5078c6bacfbc02878652e454aa416b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../beacon/IBeacon.sol\\\";\\r\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\nimport \\\"../../utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides getters and event emitting update functions for\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n *\\r\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\r\\n */\\r\\nabstract contract ERC1967Upgrade {\\r\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\r\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _getImplementation() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeTo(address newImplementation) internal {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade with additional setup call.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCall(\\r\\n        address newImplementation,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        _upgradeTo(newImplementation);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(newImplementation, data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCallUUPS(\\r\\n        address newImplementation,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\r\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\r\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\r\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\r\\n            _setImplementation(newImplementation);\\r\\n        } else {\\r\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\r\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\r\\n            } catch {\\r\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\r\\n            }\\r\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the admin of the contract.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the admin account has changed.\\r\\n     */\\r\\n    event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     */\\r\\n    function _getAdmin() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 admin slot.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) private {\\r\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\r\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {AdminChanged} event.\\r\\n     */\\r\\n    function _changeAdmin(address newAdmin) internal {\\r\\n        emit AdminChanged(_getAdmin(), newAdmin);\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\r\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the beacon is upgraded.\\r\\n     */\\r\\n    event BeaconUpgraded(address indexed beacon);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current beacon.\\r\\n     */\\r\\n    function _getBeacon() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\r\\n     */\\r\\n    function _setBeacon(address newBeacon) private {\\r\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\r\\n        require(\\r\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\r\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\r\\n        );\\r\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\r\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\r\\n     *\\r\\n     * Emits a {BeaconUpgraded} event.\\r\\n     */\\r\\n    function _upgradeBeaconToAndCall(\\r\\n        address newBeacon,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        _setBeacon(newBeacon);\\r\\n        emit BeaconUpgraded(newBeacon);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb9b4ac05179724cbcb7621bdab336a09eb32d07e07b425e0216263ad80388145\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n    /**\\r\\n     * @dev Delegates the current call to `implementation`.\\r\\n     *\\r\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _delegate(address implementation) internal virtual {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\r\\n     * and {_fallback} should delegate.\\r\\n     */\\r\\n    function _implementation() internal view virtual returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n     *\\r\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _fallback() internal virtual {\\r\\n        _beforeFallback();\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n     * function in the contract matches the call data.\\r\\n     */\\r\\n    fallback() external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\r\\n     * is empty.\\r\\n     */\\r\\n    receive() external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\r\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\r\\n     *\\r\\n     * If overridden should call `super._beforeFallback()`.\\r\\n     */\\r\\n    function _beforeFallback() internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x62c6b919abeeb4c9146ffbb325fc03b5f2d55a29b8e719b8ff62daab48123565\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBeacon.sol\\\";\\r\\nimport \\\"../Proxy.sol\\\";\\r\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\r\\n *\\r\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\r\\n * conflict with the storage layout of the implementation behind the proxy.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\r\\n    /**\\r\\n     * @dev Initializes the proxy with `beacon`.\\r\\n     *\\r\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\r\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\r\\n     * constructor.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\r\\n     */\\r\\n    constructor(address beacon, bytes memory data) payable {\\r\\n        _upgradeBeaconToAndCall(beacon, data, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current beacon address.\\r\\n     */\\r\\n    function _beacon() internal view virtual returns (address) {\\r\\n        return _getBeacon();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address of the associated beacon.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address) {\\r\\n        return IBeacon(_getBeacon()).implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\r\\n     *\\r\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `beacon` must be a contract.\\r\\n     * - The implementation returned by `beacon` must be a contract.\\r\\n     */\\r\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\r\\n        _upgradeBeaconToAndCall(beacon, data, false);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e6523f96ae0050f3de4c1bf1a6d635459e2c5bc83991bdfbeae9d11e3dee152\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {BeaconProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xd3effc3ce6d1c85e1aae2ba5c6f28434c2eef52e1fc48b15096a176dcfee5853\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBeacon.sol\\\";\\r\\nimport \\\"../../access/Ownable.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\r\\n * implementation contract, which is where they will delegate all function calls.\\r\\n *\\r\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\r\\n */\\r\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\r\\n    address private _implementation;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\r\\n     * beacon.\\r\\n     */\\r\\n    constructor(address implementation_) {\\r\\n        _setImplementation(implementation_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function implementation() public view virtual override returns (address) {\\r\\n        return _implementation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrades the beacon to a new implementation.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - msg.sender must be the owner of the contract.\\r\\n     * - `newImplementation` must be a contract.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the implementation contract address for this beacon\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `newImplementation` must be a contract.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\r\\n        _implementation = newImplementation;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x96d52f844533def4977d87f5b21e2352a27d8796ea9bf11a4a44691cae275de8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x86bd9e04dbee51fb3a9370279a0177e9da874a858dfb2c25a405171aa5ae2030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c3c43ba6e81d44ca93d32e97e0d5b9d64eb7346b7a3921e6ce9648f4b70f815\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7ed49cc8c6b941c4b0f07556eef72cedbce73d60c79d54cc82f6bbe7e061fb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb61a2a836d1e25029f013b03fa606fb6bcea10a9cc93ee2eb85d47b389d18c74\",\"license\":\"MIT\"},\"contracts/veION/stake/IStakeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IStakeStrategy\\r\\n * @notice Interface for the VeloIonModeStakingModeReward contract.\\r\\n */\\r\\ninterface IStakeStrategy {\\r\\n  /// @notice Emitted when the contract is initialized\\r\\n  event Initialized(\\r\\n    address indexed escrow,\\r\\n    address indexed stakingToken,\\r\\n    address indexed stakingContract,\\r\\n    address stakingWalletImplementation\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when tokens are staked\\r\\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when rewards are claimed\\r\\n  event Claimed(address indexed from, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when tokens are withdrawn\\r\\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when staking wallet is transferred\\r\\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when escrow is set\\r\\n  event EscrowSet(address indexed newEscrow);\\r\\n\\r\\n  /// @notice Emitted when staking token is set\\r\\n  event StakingTokenSet(address indexed newStakingToken);\\r\\n\\r\\n  /// @notice Emitted when staking contract is set\\r\\n  event StakingContractSet(address indexed newStakingContract);\\r\\n\\r\\n  /// @notice Emitted when upgradeable beacon is set\\r\\n  event UpgradeableBeaconSet(address indexed newBeacon);\\r\\n\\r\\n  /**\\r\\n   * @notice Stakes a specified amount of tokens from a given address.\\r\\n   * @param _from The address from which tokens will be staked.\\r\\n   * @param _amount The amount of tokens to stake.\\r\\n   * @param _data Additional data that might be needed for staking.\\r\\n   */\\r\\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claims rewards for a given address.\\r\\n   * @param _from The address for which to claim rewards.\\r\\n   */\\r\\n  function claim(address _from) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws a specified amount of tokens for a given address.\\r\\n   * @param _owner The address from which tokens will be withdrawn.\\r\\n   * @param _amount The amount of tokens to withdraw.\\r\\n   */\\r\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the current reward rate for the staking strategy.\\r\\n   * @return The reward rate as a uint256.\\r\\n   */\\r\\n  function rewardRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the period finish time for the staking strategy.\\r\\n   * @return The period finish time as a uint256.\\r\\n   */\\r\\n  function periodFinish() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the balance of a specific address.\\r\\n   * @param account The address to query the balance of.\\r\\n   * @return The balance as a uint256.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the total supply of staked tokens.\\r\\n   * @return The total supply as a uint256.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the reward token for the staking strategy.\\r\\n   * @return The address of the reward token.\\r\\n   */\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking contract.\\r\\n   * @return The address of the staking contract.\\r\\n   */\\r\\n  function stakingContract() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking token.\\r\\n   * @return The address of the staking token.\\r\\n   */\\r\\n  function stakingToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the staking wallet address for a specific user.\\r\\n   * @param user The address of the user.\\r\\n   * @return The address of the user's staking wallet.\\r\\n   */\\r\\n  function userStakingWallet(address user) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers the staking wallet from one user to another.\\r\\n   * @param from The current owner of the staking wallet.\\r\\n   * @param to The new owner of the staking wallet.\\r\\n   */\\r\\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the escrow address.\\r\\n   * @param _escrow The address of the new escrow.\\r\\n   */\\r\\n  function setEscrow(address _escrow) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking token address.\\r\\n   * @param _stakingToken The address of the new staking token.\\r\\n   */\\r\\n  function setStakingToken(address _stakingToken) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking contract address.\\r\\n   * @param _stakingContract The address of the new staking contract.\\r\\n   */\\r\\n  function setStakingContract(address _stakingContract) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the  beacon.\\r\\n   * @param _beacon The address of the new beacon contract.\\r\\n   */\\r\\n  function setUpgradeableBeacon(address _beacon) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x69d7a60ae3df2ead3b3afaa32ae9b6ea4df13ef65c7c375babe7be2e5457fc8b\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/IStakeWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IStakeWallet {\\r\\n  /// @notice Emitted when tokens are staked\\r\\n  event Staked(uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when rewards are claimed\\r\\n  event Claimed(address indexed from, uint256 rewardAmount);\\r\\n\\r\\n  /// @notice Emitted when tokens are withdrawn\\r\\n  event Withdrawn(address indexed withdrawTo, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Stakes a specified amount of tokens according to the strategy.\\r\\n   * @param amount The amount of tokens to stake.\\r\\n   * @param data Additional data required for the staking strategy.\\r\\n   */\\r\\n  function stake(address from, uint256 amount, bytes memory data) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claims rewards for the caller.\\r\\n   */\\r\\n  function claim(address from) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws a specified amount of staked tokens.\\r\\n   * @param withdrawTo The address to withdraw tokens to.\\r\\n   * @param amount The amount of tokens to withdraw.\\r\\n   */\\r\\n  function withdraw(address withdrawTo, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa1145156b33d804afb421beb12e8c1fc19416e9d1d4b815d7b698fd97564ef42\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/velo/IVeloIonModeStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IVeloIonModeStaking {\\r\\n  event Deposit(address indexed from, address indexed to, uint256 amount);\\r\\n  event Withdraw(address indexed from, uint256 amount);\\r\\n  event NotifyReward(address indexed from, uint256 amount);\\r\\n  event ClaimFees(uint256 claimed0, uint256 claimed1);\\r\\n  event ClaimRewards(address indexed from, uint256 amount);\\r\\n\\r\\n  /// @notice Address of the pool LP token which is deposited (staked) for rewards\\r\\n  function stakingToken() external view returns (address);\\r\\n\\r\\n  /// @notice Address of the token (VELO v2) rewarded to stakers\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  /// @notice Address of the Converter contract linked to the gauge\\r\\n  function feeConverter() external view returns (address);\\r\\n\\r\\n  /// @notice Address of the staking rewards factory that created this gauge\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /// @notice Timestamp end of current rewards period\\r\\n  function periodFinish() external view returns (uint256);\\r\\n\\r\\n  /// @notice Current reward rate of rewardToken to distribute per second\\r\\n  function rewardRate() external view returns (uint256);\\r\\n\\r\\n  /// @notice Most recent timestamp contract has updated state\\r\\n  function lastUpdateTime() external view returns (uint256);\\r\\n\\r\\n  /// @notice Most recent stored value of rewardPerToken\\r\\n  function rewardPerTokenStored() external view returns (uint256);\\r\\n\\r\\n  /// @notice Amount of stakingToken deposited for rewards\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /// @notice Get the amount of stakingToken deposited by an account\\r\\n  function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n  /// @notice Cached rewardPerTokenStored for an account based on their most recent action\\r\\n  function userRewardPerTokenPaid(address) external view returns (uint256);\\r\\n\\r\\n  /// @notice Cached amount of rewardToken earned for an account\\r\\n  function rewards(address) external view returns (uint256);\\r\\n\\r\\n  /// @notice View to see the rewardRate given the timestamp of the start of the epoch\\r\\n  function rewardRateByEpoch(uint256) external view returns (uint256);\\r\\n\\r\\n  /// @notice Get the current reward rate per unit of stakingToken deposited\\r\\n  function rewardPerToken() external view returns (uint256 _rewardPerToken);\\r\\n\\r\\n  /// @notice Returns the last time the reward was modified or periodFinish if the reward has ended\\r\\n  function lastTimeRewardApplicable() external view returns (uint256 _time);\\r\\n\\r\\n  /// @notice Returns accrued balance to date from last claim / first deposit.\\r\\n  function earned(address _account) external view returns (uint256 _earned);\\r\\n\\r\\n  /// @notice Total amount of rewardToken to distribute for the current rewards period\\r\\n  function left() external view returns (uint256 _left);\\r\\n\\r\\n  /// @notice Claims accrued Fees from Pool and distributes them to the Converter\\r\\n  /// @return _claimed0 Amount of Fees claimed in token0\\r\\n  /// @return _claimed1 Amount of Fees claimed in token1\\r\\n  function claimFees() external returns (uint256 _claimed0, uint256 _claimed1);\\r\\n\\r\\n  /// @notice Retrieve rewards for an address.\\r\\n  /// @dev Throws if not called by same address or voter.\\r\\n  /// @param _account .\\r\\n  function getReward(address _account) external;\\r\\n\\r\\n  /// @notice Deposit LP tokens into gauge for msg.sender\\r\\n  /// @param _amount .\\r\\n  function deposit(uint256 _amount) external;\\r\\n\\r\\n  /// @notice Deposit LP tokens into gauge for any user\\r\\n  /// @param _amount .\\r\\n  /// @param _recipient Recipient to give balance to\\r\\n  function deposit(uint256 _amount, address _recipient) external;\\r\\n\\r\\n  /// @notice Withdraw LP tokens for user\\r\\n  /// @param _amount .\\r\\n  function withdraw(uint256 _amount) external;\\r\\n\\r\\n  /// @dev Notifies gauge of gauge rewards. Assumes gauge reward tokens is 18 decimals.\\r\\n  ///      If not 18 decimals, rewardRate may have rounding issues.\\r\\n  function notifyRewardMatch(uint256 amount) external;\\r\\n\\r\\n  /// @dev Notifies gauge of gauge rewards. Assumes gauge reward tokens is 18 decimals.\\r\\n  ///      If not 18 decimals, rewardRate may have rounding issues.\\r\\n  function notifyRewardAmount(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x23f5c8711c247d772dc1dd96417a335a99857bcd8e3dbe9a96d14ac8f5038262\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/velo/VeloAeroStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../IStakeStrategy.sol\\\";\\r\\nimport \\\"./VeloAeroStakingWallet.sol\\\";\\r\\nimport \\\"./IVeloIonModeStaking.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\r\\nimport { BeaconProxy } from \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\r\\nimport { UpgradeableBeacon } from \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title VeloAeroStakingStrategy\\r\\n * @notice Staking interface for usage in veION when staking Velodrome/Aerodrome style LP.\\r\\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\\r\\n */\\r\\ncontract VeloAeroStakingStrategy is IStakeStrategy, Ownable2StepUpgradeable {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  /// @notice Address of the escrow responsible for managing staking operations\\r\\n  address public escrow;\\r\\n  /// @notice Address of the token being staked\\r\\n  address public stakingToken;\\r\\n  /// @notice Address of the contract where staking operations are executed\\r\\n  address public stakingContract;\\r\\n  /// @notice Address of beacon contract that manages wallet proxies\\r\\n  UpgradeableBeacon public veloAeroBeacon;\\r\\n  /// @notice Mapping of user addresses to their respective staking wallet addresses\\r\\n  mapping(address => address) public userStakingWallet;\\r\\n\\r\\n  /// @dev Modifier to restrict function access to only the escrow address\\r\\n  modifier onlyEscrow() {\\r\\n    require(msg.sender == escrow, \\\"Not authorized: Only escrow can call this function\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes the staking strategy contract with necessary parameters\\r\\n   * @dev This function can only be called once due to the initializer modifier\\r\\n   * @param _escrow The address of the escrow responsible for staking operations\\r\\n   * @param _stakingToken The address of the token to be staked\\r\\n   * @param _stakingContract The address of the contract handling staking\\r\\n   * @param _stakingWalletImplementation The address of the staking wallet implementation\\r\\n   */\\r\\n  function initialize(\\r\\n    address _escrow,\\r\\n    address _stakingToken,\\r\\n    address _stakingContract,\\r\\n    address _stakingWalletImplementation\\r\\n  ) public initializer {\\r\\n    __Ownable2Step_init();\\r\\n    escrow = _escrow;\\r\\n    stakingToken = _stakingToken;\\r\\n    stakingContract = _stakingContract;\\r\\n\\r\\n    veloAeroBeacon = new UpgradeableBeacon(_stakingWalletImplementation);\\r\\n    veloAeroBeacon.transferOwnership(msg.sender);\\r\\n\\r\\n    emit Initialized(_escrow, _stakingToken, _stakingContract, _stakingWalletImplementation);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function stake(address _from, uint256 _amount, bytes memory _data) external override onlyEscrow {\\r\\n    IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n    address veloWallet = userStakingWallet[_from];\\r\\n    if (veloWallet == address(0)) {\\r\\n      BeaconProxy newWallet = new BeaconProxy(address(veloAeroBeacon), \\\"\\\");\\r\\n      veloWallet = address(newWallet);\\r\\n      VeloAeroStakingWallet(veloWallet).initialize(IStakeStrategy(address(this)));\\r\\n      userStakingWallet[_from] = veloWallet;\\r\\n    }\\r\\n\\r\\n    IERC20(stakingToken).approve(veloWallet, _amount);\\r\\n    VeloAeroStakingWallet(veloWallet).stake(_from, _amount, _data);\\r\\n    emit Staked(_from, _amount, veloWallet);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function claim(address _from) external onlyEscrow {\\r\\n    VeloAeroStakingWallet veloWallet = VeloAeroStakingWallet(userStakingWallet[_from]);\\r\\n    veloWallet.claim(_from);\\r\\n    emit Claimed(_from, address(veloWallet));\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external onlyEscrow {\\r\\n    VeloAeroStakingWallet veloWallet = VeloAeroStakingWallet(userStakingWallet[_owner]);\\r\\n    veloWallet.withdraw(_withdrawTo, _amount);\\r\\n    emit Withdrawn(_owner, _withdrawTo, _amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function transferStakingWallet(address _from, address _to, uint256 _amount) external onlyEscrow {\\r\\n    address fromWallet = userStakingWallet[_from];\\r\\n    address toWallet = userStakingWallet[_to];\\r\\n\\r\\n    if (toWallet == address(0)) {\\r\\n      BeaconProxy newWallet = new BeaconProxy(address(veloAeroBeacon), \\\"\\\");\\r\\n      toWallet = address(newWallet);\\r\\n      VeloAeroStakingWallet(toWallet).initialize(IStakeStrategy(address(this)));\\r\\n      userStakingWallet[_to] = toWallet;\\r\\n    }\\r\\n\\r\\n    VeloAeroStakingWallet(fromWallet).withdraw(address(this), _amount);\\r\\n    IERC20(stakingToken).approve(address(toWallet), _amount);\\r\\n    VeloAeroStakingWallet(toWallet).stake(_to, _amount, \\\"\\\");\\r\\n    emit StakingWalletTransferred(_from, _to, _amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function rewardRate() external view override returns (uint256) {\\r\\n    return IVeloIonModeStaking(stakingContract).rewardRate();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function periodFinish() external view override returns (uint256) {\\r\\n    return IVeloIonModeStaking(stakingContract).periodFinish();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function balanceOf(address account) public view override returns (uint256) {\\r\\n    return IVeloIonModeStaking(stakingContract).balanceOf(account);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function totalSupply() external view override returns (uint256) {\\r\\n    return IVeloIonModeStaking(stakingContract).totalSupply();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function rewardToken() public view returns (address) {\\r\\n    return IVeloIonModeStaking(stakingContract).rewardToken();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function setEscrow(address _escrow) external onlyOwner {\\r\\n    require(_escrow != address(0), \\\"Invalid address\\\");\\r\\n    escrow = _escrow;\\r\\n    emit EscrowSet(_escrow);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function setStakingToken(address _stakingToken) external onlyOwner {\\r\\n    require(_stakingToken != address(0), \\\"Invalid address\\\");\\r\\n    stakingToken = _stakingToken;\\r\\n    emit StakingTokenSet(_stakingToken);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function setStakingContract(address _stakingContract) external onlyOwner {\\r\\n    require(_stakingContract != address(0), \\\"Invalid address\\\");\\r\\n    stakingContract = _stakingContract;\\r\\n    emit StakingContractSet(_stakingContract);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeStrategy\\r\\n  function setUpgradeableBeacon(address _beacon) external onlyOwner {\\r\\n    require(_beacon != address(0), \\\"Invalid address\\\");\\r\\n    veloAeroBeacon = UpgradeableBeacon(_beacon);\\r\\n    emit UpgradeableBeaconSet(_beacon);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x01b4a448f460c30d749a5723c949c788d95846b4d290fb510623ca064c23ba59\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/velo/VeloAeroStakingWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport { IStakeWallet } from \\\"../IStakeWallet.sol\\\";\\r\\nimport { IStakeStrategy } from \\\"../IStakeStrategy.sol\\\";\\r\\nimport { IVeloIonModeStaking } from \\\"./IVeloIonModeStaking.sol\\\";\\r\\nimport { IERC20Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport { Initializable } from \\\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title VeloAeroStakingWallet\\r\\n * @notice Staking interface for usage in veION when staking Velodrome/Aerodrome style LP.\\r\\n * @dev This contract allows staking and claiming rewards with a specific staking strategy.\\r\\n * @dev The staking strategy is set during contract deployment and can only be called by the strategy.\\r\\n * @dev The contract is designed to be used with the Velodrome/Aerodrome style LP.\\r\\n * @author Jourdan Dunkley <jourdan@ionic.money>\\r\\n */\\r\\ncontract VeloAeroStakingWallet is IStakeWallet, Initializable {\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n  IStakeStrategy public stakeStrategy;\\r\\n\\r\\n  /// @dev Modifier to restrict function access to only the stake strategy contract\\r\\n  modifier onlyStakeStrategy() {\\r\\n    require(msg.sender == address(stakeStrategy), \\\"Not authorized: Only stake strategy can call this function\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes the contract with a staking strategy\\r\\n   * @dev Can only be called once due to initializer modifier\\r\\n   * @param _stakeStrategy The address of the staking strategy contract\\r\\n   */\\r\\n  function initialize(IStakeStrategy _stakeStrategy) external initializer {\\r\\n    stakeStrategy = _stakeStrategy;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeWallet\\r\\n  function stake(address /* _from */, uint256 _amount, bytes memory /* _data */) external override onlyStakeStrategy {\\r\\n    IERC20Upgradeable stakingToken = IERC20Upgradeable(stakeStrategy.stakingToken());\\r\\n    IVeloIonModeStaking stakingContract = IVeloIonModeStaking(stakeStrategy.stakingContract());\\r\\n\\r\\n    stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    stakingToken.approve(address(stakingContract), _amount);\\r\\n    stakingContract.deposit(_amount);\\r\\n    emit Staked(_amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeWallet\\r\\n  function claim(address _from) external onlyStakeStrategy {\\r\\n    IERC20Upgradeable rewardToken = IERC20Upgradeable(stakeStrategy.rewardToken());\\r\\n    IVeloIonModeStaking stakingContract = IVeloIonModeStaking(stakeStrategy.stakingContract());\\r\\n\\r\\n    stakingContract.getReward(address(this));\\r\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\r\\n    IERC20Upgradeable(rewardToken).safeTransfer(_from, rewardAmount);\\r\\n    emit Claimed(_from, rewardAmount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeWallet\\r\\n  function withdraw(address _withdrawTo, uint256 _amount) external onlyStakeStrategy {\\r\\n    IERC20Upgradeable stakingToken = IERC20Upgradeable(stakeStrategy.stakingToken());\\r\\n    IVeloIonModeStaking stakingContract = IVeloIonModeStaking(stakeStrategy.stakingContract());\\r\\n\\r\\n    stakingContract.withdraw(_amount);\\r\\n    stakingToken.safeTransfer(_withdrawTo, _amount);\\r\\n    emit Withdrawn(_withdrawTo, _amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x5d95949d0e7ba07afe3cfbe991cbf6ec8b8877d10181886ba8cdbf896e914ff7\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6125ae806100ed6000396000f3fe60806040523480156200001157600080fd5b5060043610620001755760003560e01c8063c10c354611620000d3578063ee3fd2231162000086578063ee3fd223146200030a578063ee99205c1462000321578063f2cdf2261462000335578063f2fde38b1462000349578063f7c618c11462000360578063f8c8765e146200036a57600080fd5b8063c10c35461462000295578063d9caed1214620002ac578063e2fdcc1714620002c3578063e30c397814620002d7578063e31d753114620002e9578063ebe2b12b146200030057600080fd5b806372f702f3116200012c57806372f702f314620001ff57806379ba5097146200022c5780637b0a47ee14620002365780638da5cb5b14620002405780639dd373b91462000252578063ae919173146200026957600080fd5b806318160ddd146200017a5780631e83409a14620001975780631e9b12ef14620001b05780633e12170f14620001c757806370a0823114620001de578063715018a614620001f5575b600080fd5b6200018462000381565b6040519081526020015b60405180910390f35b620001ae620001a836600462001650565b620003f7565b005b620001ae620001c136600462001650565b620004dc565b620001ae620001d83660046200168d565b62000559565b62000184620001ef36600462001650565b620007e2565b620001ae6200085a565b60985462000213906001600160a01b031681565b6040516001600160a01b0390911681526020016200018e565b620001ae62000872565b62000184620008f0565b6033546001600160a01b031662000213565b620001ae6200026336600462001650565b6200093b565b620002136200027a36600462001650565b609b602052600090815260409020546001600160a01b031681565b620001ae620002a636600462001650565b620009b8565b620001ae620002bd36600462001766565b62000a35565b60975462000213906001600160a01b031681565b6065546001600160a01b031662000213565b620001ae620002fa36600462001766565b62000b21565b6200018462000e0c565b620001ae6200031b36600462001650565b62000e57565b60995462000213906001600160a01b031681565b609a5462000213906001600160a01b031681565b620001ae6200035a36600462001650565b62000ed4565b6200021362000f48565b620001ae6200037b366004620017ac565b62000fb9565b609954604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015620003cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f2919062001811565b905090565b6097546001600160a01b031633146200042d5760405162461bcd60e51b815260040162000424906200182b565b60405180910390fd5b6001600160a01b038181166000818152609b602052604090819020549051630f41a04d60e11b81526004810192909252909116908190631e83409a90602401600060405180830381600087803b1580156200048757600080fd5b505af11580156200049c573d6000803e3d6000fd5b50506040516001600160a01b038085169350851691507f89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b90600090a35050565b620004e662001209565b6001600160a01b0381166200050f5760405162461bcd60e51b815260040162000424906200187d565b609880546001600160a01b0319166001600160a01b0383169081179091556040517f9904a32444ae0eb0bae2045baf588aa248f03f4fef600c18afd1d7e751614af890600090a250565b6097546001600160a01b03163314620005865760405162461bcd60e51b815260040162000424906200182b565b609854620005a0906001600160a01b031633308562001265565b6001600160a01b038084166000908152609b60205260409020541680620006ad57609a546040516000916001600160a01b031690620005df906200161e565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f0801580156200061b573d6000803e3d6000fd5b5060405163189acdbd60e31b81523060048201529092508291506001600160a01b0382169063c4d66de890602401600060405180830381600087803b1580156200066457600080fd5b505af115801562000679573d6000803e3d6000fd5b505050506001600160a01b038581166000908152609b6020526040902080546001600160a01b031916918416919091179055505b60985460405163095ea7b360e01b81526001600160a01b038381166004830152602482018690529091169063095ea7b3906044016020604051808303816000875af115801562000701573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007279190620018a6565b50604051633e12170f60e01b81526001600160a01b03821690633e12170f906200075a908790879087906004016200191e565b600060405180830381600087803b1580156200077557600080fd5b505af11580156200078a573d6000803e3d6000fd5b50505050806001600160a01b0316846001600160a01b03167f9f9e4044c5742cca66ca090b21552bac14645e68bad7a92364a9d9ff18111a1c85604051620007d491815260200190565b60405180910390a350505050565b6099546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa1580156200082e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000854919062001811565b92915050565b6200086462001209565b620008706000620012c7565b565b60655433906001600160a01b03168114620008e25760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840162000424565b620008ed81620012c7565b50565b60995460408051633d8523f760e11b815290516000926001600160a01b031691637b0a47ee9160048083019260209291908290030181865afa158015620003cc573d6000803e3d6000fd5b6200094562001209565b6001600160a01b0381166200096e5760405162461bcd60e51b815260040162000424906200187d565b609980546001600160a01b0319166001600160a01b0383169081179091556040517f1253844b0fff3da7dd2829de816c9b4f94c238cf2bf6eb72c02c7d6f2b53beac90600090a250565b620009c262001209565b6001600160a01b038116620009eb5760405162461bcd60e51b815260040162000424906200187d565b609780546001600160a01b0319166001600160a01b0383169081179091556040517fa585aec3a6cb0e1a084ed18c7638024e40cc3e3ea815166e2cb6fc17d7f1392b90600090a250565b6097546001600160a01b0316331462000a625760405162461bcd60e51b815260040162000424906200182b565b6001600160a01b038381166000908152609b60205260409081902054905163f3fef3a360e01b8152848316600482015260248101849052911690819063f3fef3a390604401600060405180830381600087803b15801562000ac257600080fd5b505af115801562000ad7573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb84604051620007d491815260200190565b6097546001600160a01b0316331462000b4e5760405162461bcd60e51b815260040162000424906200182b565b6001600160a01b038084166000908152609b602052604080822054858416835291205490821691168062000c6857609a546040516000916001600160a01b03169062000b9a906200161e565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562000bd6573d6000803e3d6000fd5b5060405163189acdbd60e31b81523060048201529092508291506001600160a01b0382169063c4d66de890602401600060405180830381600087803b15801562000c1f57600080fd5b505af115801562000c34573d6000803e3d6000fd5b505050506001600160a01b038581166000908152609b6020526040902080546001600160a01b031916918416919091179055505b60405163f3fef3a360e01b8152306004820152602481018490526001600160a01b0383169063f3fef3a390604401600060405180830381600087803b15801562000cb157600080fd5b505af115801562000cc6573d6000803e3d6000fd5b505060985460405163095ea7b360e01b81526001600160a01b03858116600483015260248201889052909116925063095ea7b391506044016020604051808303816000875af115801562000d1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d449190620018a6565b50604051633e12170f60e01b81526001600160a01b038581166004830152602482018590526060604483015260006064830152821690633e12170f90608401600060405180830381600087803b15801562000d9e57600080fd5b505af115801562000db3573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167fdd0cdc1bea06c790fb371c8acc5b948f282e5872429ce2bc5971f5b5c6d76b6c8560405162000dfd91815260200190565b60405180910390a35050505050565b6099546040805163ebe2b12b60e01b815290516000926001600160a01b03169163ebe2b12b9160048083019260209291908290030181865afa158015620003cc573d6000803e3d6000fd5b62000e6162001209565b6001600160a01b03811662000e8a5760405162461bcd60e51b815260040162000424906200187d565b609a80546001600160a01b0319166001600160a01b0383169081179091556040517fa922f30fc35aecb996d111c48db797fadceb5a048e693f841e0c4f339bb0326490600090a250565b62000ede62001209565b606580546001600160a01b0383166001600160a01b0319909116811790915562000f106033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6099546040805163f7c618c160e01b815290516000926001600160a01b03169163f7c618c19160048083019260209291908290030181865afa15801562000f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f2919062001950565b600054610100900460ff161580801562000fda5750600054600160ff909116105b8062000ff65750303b15801562000ff6575060005460ff166001145b6200105b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000424565b6000805460ff1916600117905580156200107f576000805461ff0019166101001790555b62001089620012e2565b609780546001600160a01b038088166001600160a01b0319928316179092556098805487841690831617905560998054928616929091169190911790556040518290620010d6906200162c565b6001600160a01b039091168152602001604051809103906000f08015801562001103573d6000803e3d6000fd5b50609a80546001600160a01b0319166001600160a01b0392909216918217905560405163f2fde38b60e01b815233600482015263f2fde38b90602401600060405180830381600087803b1580156200115a57600080fd5b505af11580156200116f573d6000803e3d6000fd5b50506040516001600160a01b038581168252808716935087811692508816907f3514319b7a526ad5f1f42edf0c1df25fa0ea2ae054779987fbe636f164515e2f9060200160405180910390a4801562001202576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6033546001600160a01b03163314620008705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000424565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052620012c190859062001316565b50505050565b606580546001600160a01b0319169055620008ed81620013f4565b600054610100900460ff166200130c5760405162461bcd60e51b8152600401620004249062001970565b6200087062001446565b60006200136d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200147b9092919063ffffffff16565b805190915015620013ef57808060200190518101906200138e9190620018a6565b620013ef5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000424565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16620014705760405162461bcd60e51b8152600401620004249062001970565b6200087033620012c7565b60606200148c848460008562001494565b949350505050565b606082471015620014f75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000424565b600080866001600160a01b03168587604051620015159190620019bb565b60006040518083038185875af1925050503d806000811462001554576040519150601f19603f3d011682016040523d82523d6000602084013e62001559565b606091505b50915091506200156c8783838762001577565b979650505050505050565b60608315620015eb578251600003620015e3576001600160a01b0385163b620015e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000424565b50816200148c565b6200148c8383815115620016025781518083602001fd5b8060405162461bcd60e51b8152600401620004249190620019d9565b6106cc80620019ef83390190565b6104be80620020bb83390190565b6001600160a01b0381168114620008ed57600080fd5b6000602082840312156200166357600080fd5b813562001670816200163a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215620016a357600080fd5b8335620016b0816200163a565b925060208401359150604084013567ffffffffffffffff80821115620016d557600080fd5b818601915086601f830112620016ea57600080fd5b813581811115620016ff57620016ff62001677565b604051601f8201601f19908116603f011681019083821181831017156200172a576200172a62001677565b816040528281528960208487010111156200174457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000806000606084860312156200177c57600080fd5b833562001789816200163a565b925060208401356200179b816200163a565b929592945050506040919091013590565b60008060008060808587031215620017c357600080fd5b8435620017d0816200163a565b93506020850135620017e2816200163a565b92506040850135620017f4816200163a565b9150606085013562001806816200163a565b939692955090935050565b6000602082840312156200182457600080fd5b5051919050565b60208082526032908201527f4e6f7420617574686f72697a65643a204f6e6c7920657363726f772063616e2060408201527131b0b636103a3434b990333ab731ba34b7b760711b606082015260800190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b600060208284031215620018b957600080fd5b815180151581146200167057600080fd5b60005b83811015620018e7578181015183820152602001620018cd565b50506000910152565b600081518084526200190a816020860160208601620018ca565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000620019476060830184620018f0565b95945050505050565b6000602082840312156200196357600080fd5b815162001670816200163a565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251620019cf818460208701620018ca565b9190910192915050565b602081526000620016706020830184620018f056fe60806040526040516106cc3803806106cc83398101604081905261002291610420565b61002e82826000610035565b505061054a565b61003e836100f6565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a260008251118061007f5750805b156100f1576100ef836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e991906104e0565b8361027a565b505b505050565b6001600160a01b0381163b6101605760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101d4816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c591906104e0565b6001600160a01b03163b151590565b6102395760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610157565b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b0392909216919091179055565b606061029f83836040518060600160405280602781526020016106a5602791396102a6565b9392505050565b6060600080856001600160a01b0316856040516102c391906104fb565b600060405180830381855af49150503d80600081146102fe576040519150601f19603f3d011682016040523d82523d6000602084013e610303565b606091505b5090925090506103158683838761031f565b9695505050505050565b6060831561038e578251600003610387576001600160a01b0385163b6103875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610157565b5081610398565b61039883836103a0565b949350505050565b8151156103b05781518083602001fd5b8060405162461bcd60e51b81526004016101579190610517565b80516001600160a01b03811681146103e157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156104175781810151838201526020016103ff565b50506000910152565b6000806040838503121561043357600080fd5b61043c836103ca565b60208401519092506001600160401b038082111561045957600080fd5b818501915085601f83011261046d57600080fd5b81518181111561047f5761047f6103e6565b604051601f8201601f19908116603f011681019083821181831017156104a7576104a76103e6565b816040528281528860208487010111156104c057600080fd5b6104d18360208301602088016103fc565b80955050505050509250929050565b6000602082840312156104f257600080fd5b61029f826103ca565b6000825161050d8184602087016103fc565b9190910192915050565b60208152600082518060208401526105368160408501602087016103fc565b601f01601f19169190910160400192915050565b61014c806105596000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610029565b6100c2565b565b600061005c7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bd91906100e6565b905090565b3660008037600080366000845af43d6000803e8080156100e1573d6000f35b3d6000fd5b6000602082840312156100f857600080fd5b81516001600160a01b038116811461010f57600080fd5b939250505056fea26469706673582212200fdbd93def38e5cbcee033f760da77fe3d36b8bf06a75256372b980f4ae5bd5064736f6c63430008160033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564608060405234801561001057600080fd5b506040516104be3803806104be83398101604081905261002f9161013a565b61003833610047565b61004181610097565b5061016a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381163b6101185760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561014c57600080fd5b81516001600160a01b038116811461016357600080fd5b9392505050565b610345806101796000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610071578063715018a61461009a5780638da5cb5b146100a2578063f2fde38b146100b3575b600080fd5b61006f61006a3660046102df565b6100c6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006f61010e565b6000546001600160a01b031661007e565b61006f6100c13660046102df565b610122565b6100ce6101a0565b6100d7816101fa565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6101166101a0565b610120600061028f565b565b61012a6101a0565b6001600160a01b0381166101945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61019d8161028f565b50565b6000546001600160a01b031633146101205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161018b565b6001600160a01b0381163b61026d5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6044820152721b881a5cc81b9bdd08184818dbdb9d1c9858dd606a1b606482015260840161018b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102f157600080fd5b81356001600160a01b038116811461030857600080fd5b939250505056fea264697066735822122061aafe9c0974224ae4f98e82cd84eb5427d380f755f81ef0957872ad1c509caf64736f6c63430008160033a2646970667358221220a4ecceefd2f10c7205105791c80f873ce0775dd7c8fd219175fd7aa9768aae8164736f6c63430008160033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001755760003560e01c8063c10c354611620000d3578063ee3fd2231162000086578063ee3fd223146200030a578063ee99205c1462000321578063f2cdf2261462000335578063f2fde38b1462000349578063f7c618c11462000360578063f8c8765e146200036a57600080fd5b8063c10c35461462000295578063d9caed1214620002ac578063e2fdcc1714620002c3578063e30c397814620002d7578063e31d753114620002e9578063ebe2b12b146200030057600080fd5b806372f702f3116200012c57806372f702f314620001ff57806379ba5097146200022c5780637b0a47ee14620002365780638da5cb5b14620002405780639dd373b91462000252578063ae919173146200026957600080fd5b806318160ddd146200017a5780631e83409a14620001975780631e9b12ef14620001b05780633e12170f14620001c757806370a0823114620001de578063715018a614620001f5575b600080fd5b6200018462000381565b6040519081526020015b60405180910390f35b620001ae620001a836600462001650565b620003f7565b005b620001ae620001c136600462001650565b620004dc565b620001ae620001d83660046200168d565b62000559565b62000184620001ef36600462001650565b620007e2565b620001ae6200085a565b60985462000213906001600160a01b031681565b6040516001600160a01b0390911681526020016200018e565b620001ae62000872565b62000184620008f0565b6033546001600160a01b031662000213565b620001ae6200026336600462001650565b6200093b565b620002136200027a36600462001650565b609b602052600090815260409020546001600160a01b031681565b620001ae620002a636600462001650565b620009b8565b620001ae620002bd36600462001766565b62000a35565b60975462000213906001600160a01b031681565b6065546001600160a01b031662000213565b620001ae620002fa36600462001766565b62000b21565b6200018462000e0c565b620001ae6200031b36600462001650565b62000e57565b60995462000213906001600160a01b031681565b609a5462000213906001600160a01b031681565b620001ae6200035a36600462001650565b62000ed4565b6200021362000f48565b620001ae6200037b366004620017ac565b62000fb9565b609954604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015620003cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f2919062001811565b905090565b6097546001600160a01b031633146200042d5760405162461bcd60e51b815260040162000424906200182b565b60405180910390fd5b6001600160a01b038181166000818152609b602052604090819020549051630f41a04d60e11b81526004810192909252909116908190631e83409a90602401600060405180830381600087803b1580156200048757600080fd5b505af11580156200049c573d6000803e3d6000fd5b50506040516001600160a01b038085169350851691507f89309c9b2aeaffbdce717113df9427298b20448c05919bf889e05f8c3094254b90600090a35050565b620004e662001209565b6001600160a01b0381166200050f5760405162461bcd60e51b815260040162000424906200187d565b609880546001600160a01b0319166001600160a01b0383169081179091556040517f9904a32444ae0eb0bae2045baf588aa248f03f4fef600c18afd1d7e751614af890600090a250565b6097546001600160a01b03163314620005865760405162461bcd60e51b815260040162000424906200182b565b609854620005a0906001600160a01b031633308562001265565b6001600160a01b038084166000908152609b60205260409020541680620006ad57609a546040516000916001600160a01b031690620005df906200161e565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f0801580156200061b573d6000803e3d6000fd5b5060405163189acdbd60e31b81523060048201529092508291506001600160a01b0382169063c4d66de890602401600060405180830381600087803b1580156200066457600080fd5b505af115801562000679573d6000803e3d6000fd5b505050506001600160a01b038581166000908152609b6020526040902080546001600160a01b031916918416919091179055505b60985460405163095ea7b360e01b81526001600160a01b038381166004830152602482018690529091169063095ea7b3906044016020604051808303816000875af115801562000701573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007279190620018a6565b50604051633e12170f60e01b81526001600160a01b03821690633e12170f906200075a908790879087906004016200191e565b600060405180830381600087803b1580156200077557600080fd5b505af11580156200078a573d6000803e3d6000fd5b50505050806001600160a01b0316846001600160a01b03167f9f9e4044c5742cca66ca090b21552bac14645e68bad7a92364a9d9ff18111a1c85604051620007d491815260200190565b60405180910390a350505050565b6099546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa1580156200082e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000854919062001811565b92915050565b6200086462001209565b620008706000620012c7565b565b60655433906001600160a01b03168114620008e25760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840162000424565b620008ed81620012c7565b50565b60995460408051633d8523f760e11b815290516000926001600160a01b031691637b0a47ee9160048083019260209291908290030181865afa158015620003cc573d6000803e3d6000fd5b6200094562001209565b6001600160a01b0381166200096e5760405162461bcd60e51b815260040162000424906200187d565b609980546001600160a01b0319166001600160a01b0383169081179091556040517f1253844b0fff3da7dd2829de816c9b4f94c238cf2bf6eb72c02c7d6f2b53beac90600090a250565b620009c262001209565b6001600160a01b038116620009eb5760405162461bcd60e51b815260040162000424906200187d565b609780546001600160a01b0319166001600160a01b0383169081179091556040517fa585aec3a6cb0e1a084ed18c7638024e40cc3e3ea815166e2cb6fc17d7f1392b90600090a250565b6097546001600160a01b0316331462000a625760405162461bcd60e51b815260040162000424906200182b565b6001600160a01b038381166000908152609b60205260409081902054905163f3fef3a360e01b8152848316600482015260248101849052911690819063f3fef3a390604401600060405180830381600087803b15801562000ac257600080fd5b505af115801562000ad7573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb84604051620007d491815260200190565b6097546001600160a01b0316331462000b4e5760405162461bcd60e51b815260040162000424906200182b565b6001600160a01b038084166000908152609b602052604080822054858416835291205490821691168062000c6857609a546040516000916001600160a01b03169062000b9a906200161e565b6001600160a01b039091168152604060208201819052600090820152606001604051809103906000f08015801562000bd6573d6000803e3d6000fd5b5060405163189acdbd60e31b81523060048201529092508291506001600160a01b0382169063c4d66de890602401600060405180830381600087803b15801562000c1f57600080fd5b505af115801562000c34573d6000803e3d6000fd5b505050506001600160a01b038581166000908152609b6020526040902080546001600160a01b031916918416919091179055505b60405163f3fef3a360e01b8152306004820152602481018490526001600160a01b0383169063f3fef3a390604401600060405180830381600087803b15801562000cb157600080fd5b505af115801562000cc6573d6000803e3d6000fd5b505060985460405163095ea7b360e01b81526001600160a01b03858116600483015260248201889052909116925063095ea7b391506044016020604051808303816000875af115801562000d1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d449190620018a6565b50604051633e12170f60e01b81526001600160a01b038581166004830152602482018590526060604483015260006064830152821690633e12170f90608401600060405180830381600087803b15801562000d9e57600080fd5b505af115801562000db3573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167fdd0cdc1bea06c790fb371c8acc5b948f282e5872429ce2bc5971f5b5c6d76b6c8560405162000dfd91815260200190565b60405180910390a35050505050565b6099546040805163ebe2b12b60e01b815290516000926001600160a01b03169163ebe2b12b9160048083019260209291908290030181865afa158015620003cc573d6000803e3d6000fd5b62000e6162001209565b6001600160a01b03811662000e8a5760405162461bcd60e51b815260040162000424906200187d565b609a80546001600160a01b0319166001600160a01b0383169081179091556040517fa922f30fc35aecb996d111c48db797fadceb5a048e693f841e0c4f339bb0326490600090a250565b62000ede62001209565b606580546001600160a01b0383166001600160a01b0319909116811790915562000f106033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6099546040805163f7c618c160e01b815290516000926001600160a01b03169163f7c618c19160048083019260209291908290030181865afa15801562000f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f2919062001950565b600054610100900460ff161580801562000fda5750600054600160ff909116105b8062000ff65750303b15801562000ff6575060005460ff166001145b6200105b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000424565b6000805460ff1916600117905580156200107f576000805461ff0019166101001790555b62001089620012e2565b609780546001600160a01b038088166001600160a01b0319928316179092556098805487841690831617905560998054928616929091169190911790556040518290620010d6906200162c565b6001600160a01b039091168152602001604051809103906000f08015801562001103573d6000803e3d6000fd5b50609a80546001600160a01b0319166001600160a01b0392909216918217905560405163f2fde38b60e01b815233600482015263f2fde38b90602401600060405180830381600087803b1580156200115a57600080fd5b505af11580156200116f573d6000803e3d6000fd5b50506040516001600160a01b038581168252808716935087811692508816907f3514319b7a526ad5f1f42edf0c1df25fa0ea2ae054779987fbe636f164515e2f9060200160405180910390a4801562001202576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6033546001600160a01b03163314620008705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000424565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052620012c190859062001316565b50505050565b606580546001600160a01b0319169055620008ed81620013f4565b600054610100900460ff166200130c5760405162461bcd60e51b8152600401620004249062001970565b6200087062001446565b60006200136d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200147b9092919063ffffffff16565b805190915015620013ef57808060200190518101906200138e9190620018a6565b620013ef5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000424565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16620014705760405162461bcd60e51b8152600401620004249062001970565b6200087033620012c7565b60606200148c848460008562001494565b949350505050565b606082471015620014f75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000424565b600080866001600160a01b03168587604051620015159190620019bb565b60006040518083038185875af1925050503d806000811462001554576040519150601f19603f3d011682016040523d82523d6000602084013e62001559565b606091505b50915091506200156c8783838762001577565b979650505050505050565b60608315620015eb578251600003620015e3576001600160a01b0385163b620015e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000424565b50816200148c565b6200148c8383815115620016025781518083602001fd5b8060405162461bcd60e51b8152600401620004249190620019d9565b6106cc80620019ef83390190565b6104be80620020bb83390190565b6001600160a01b0381168114620008ed57600080fd5b6000602082840312156200166357600080fd5b813562001670816200163a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215620016a357600080fd5b8335620016b0816200163a565b925060208401359150604084013567ffffffffffffffff80821115620016d557600080fd5b818601915086601f830112620016ea57600080fd5b813581811115620016ff57620016ff62001677565b604051601f8201601f19908116603f011681019083821181831017156200172a576200172a62001677565b816040528281528960208487010111156200174457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000806000606084860312156200177c57600080fd5b833562001789816200163a565b925060208401356200179b816200163a565b929592945050506040919091013590565b60008060008060808587031215620017c357600080fd5b8435620017d0816200163a565b93506020850135620017e2816200163a565b92506040850135620017f4816200163a565b9150606085013562001806816200163a565b939692955090935050565b6000602082840312156200182457600080fd5b5051919050565b60208082526032908201527f4e6f7420617574686f72697a65643a204f6e6c7920657363726f772063616e2060408201527131b0b636103a3434b990333ab731ba34b7b760711b606082015260800190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b600060208284031215620018b957600080fd5b815180151581146200167057600080fd5b60005b83811015620018e7578181015183820152602001620018cd565b50506000910152565b600081518084526200190a816020860160208601620018ca565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000620019476060830184620018f0565b95945050505050565b6000602082840312156200196357600080fd5b815162001670816200163a565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251620019cf818460208701620018ca565b9190910192915050565b602081526000620016706020830184620018f056fe60806040526040516106cc3803806106cc83398101604081905261002291610420565b61002e82826000610035565b505061054a565b61003e836100f6565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a260008251118061007f5750805b156100f1576100ef836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e991906104e0565b8361027a565b505b505050565b6001600160a01b0381163b6101605760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101d4816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c591906104e0565b6001600160a01b03163b151590565b6102395760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610157565b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5080546001600160a01b0319166001600160a01b0392909216919091179055565b606061029f83836040518060600160405280602781526020016106a5602791396102a6565b9392505050565b6060600080856001600160a01b0316856040516102c391906104fb565b600060405180830381855af49150503d80600081146102fe576040519150601f19603f3d011682016040523d82523d6000602084013e610303565b606091505b5090925090506103158683838761031f565b9695505050505050565b6060831561038e578251600003610387576001600160a01b0385163b6103875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610157565b5081610398565b61039883836103a0565b949350505050565b8151156103b05781518083602001fd5b8060405162461bcd60e51b81526004016101579190610517565b80516001600160a01b03811681146103e157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156104175781810151838201526020016103ff565b50506000910152565b6000806040838503121561043357600080fd5b61043c836103ca565b60208401519092506001600160401b038082111561045957600080fd5b818501915085601f83011261046d57600080fd5b81518181111561047f5761047f6103e6565b604051601f8201601f19908116603f011681019083821181831017156104a7576104a76103e6565b816040528281528860208487010111156104c057600080fd5b6104d18360208301602088016103fc565b80955050505050509250929050565b6000602082840312156104f257600080fd5b61029f826103ca565b6000825161050d8184602087016103fc565b9190910192915050565b60208152600082518060208401526105368160408501602087016103fc565b601f01601f19169190910160400192915050565b61014c806105596000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610029565b6100c2565b565b600061005c7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bd91906100e6565b905090565b3660008037600080366000845af43d6000803e8080156100e1573d6000f35b3d6000fd5b6000602082840312156100f857600080fd5b81516001600160a01b038116811461010f57600080fd5b939250505056fea26469706673582212200fdbd93def38e5cbcee033f760da77fe3d36b8bf06a75256372b980f4ae5bd5064736f6c63430008160033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564608060405234801561001057600080fd5b506040516104be3803806104be83398101604081905261002f9161013a565b61003833610047565b61004181610097565b5061016a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381163b6101185760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60448201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561014c57600080fd5b81516001600160a01b038116811461016357600080fd5b9392505050565b610345806101796000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610071578063715018a61461009a5780638da5cb5b146100a2578063f2fde38b146100b3575b600080fd5b61006f61006a3660046102df565b6100c6565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b61006f61010e565b6000546001600160a01b031661007e565b61006f6100c13660046102df565b610122565b6100ce6101a0565b6100d7816101fa565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6101166101a0565b610120600061028f565b565b61012a6101a0565b6001600160a01b0381166101945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61019d8161028f565b50565b6000546001600160a01b031633146101205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161018b565b6001600160a01b0381163b61026d5760405162461bcd60e51b815260206004820152603360248201527f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f6044820152721b881a5cc81b9bdd08184818dbdb9d1c9858dd606a1b606482015260840161018b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102f157600080fd5b81356001600160a01b038116811461030857600080fd5b939250505056fea264697066735822122061aafe9c0974224ae4f98e82cd84eb5427d380f755f81ef0957872ad1c509caf64736f6c63430008160033a2646970667358221220a4ecceefd2f10c7205105791c80f873ce0775dd7c8fd219175fd7aa9768aae8164736f6c63430008160033",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address to query the balance of."
        },
        "returns": {
          "_0": "The balance as a uint256."
        }
      },
      "claim(address)": {
        "params": {
          "_from": "The address for which to claim rewards."
        }
      },
      "initialize(address,address,address,address)": {
        "details": "This function can only be called once due to the initializer modifier",
        "params": {
          "_escrow": "The address of the escrow responsible for staking operations",
          "_stakingContract": "The address of the contract handling staking",
          "_stakingToken": "The address of the token to be staked",
          "_stakingWalletImplementation": "The address of the staking wallet implementation"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "periodFinish()": {
        "returns": {
          "_0": "The period finish time as a uint256."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardRate()": {
        "returns": {
          "_0": "The reward rate as a uint256."
        }
      },
      "rewardToken()": {
        "returns": {
          "_0": "The address of the reward token."
        }
      },
      "setEscrow(address)": {
        "params": {
          "_escrow": "The address of the new escrow."
        }
      },
      "setStakingContract(address)": {
        "params": {
          "_stakingContract": "The address of the new staking contract."
        }
      },
      "setStakingToken(address)": {
        "params": {
          "_stakingToken": "The address of the new staking token."
        }
      },
      "setUpgradeableBeacon(address)": {
        "params": {
          "_beacon": "The address of the new beacon contract."
        }
      },
      "stake(address,uint256,bytes)": {
        "params": {
          "_amount": "The amount of tokens to stake.",
          "_data": "Additional data that might be needed for staking.",
          "_from": "The address from which tokens will be staked."
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "The total supply as a uint256."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "transferStakingWallet(address,address,uint256)": {
        "params": {
          "from": "The current owner of the staking wallet.",
          "to": "The new owner of the staking wallet."
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to withdraw.",
          "_owner": "The address from which tokens will be withdrawn."
        }
      }
    },
    "title": "VeloAeroStakingStrategy",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(address,address)": {
        "notice": "Emitted when rewards are claimed"
      },
      "EscrowSet(address)": {
        "notice": "Emitted when escrow is set"
      },
      "Initialized(address,address,address,address)": {
        "notice": "Emitted when the contract is initialized"
      },
      "Staked(address,uint256,address)": {
        "notice": "Emitted when tokens are staked"
      },
      "StakingContractSet(address)": {
        "notice": "Emitted when staking contract is set"
      },
      "StakingTokenSet(address)": {
        "notice": "Emitted when staking token is set"
      },
      "StakingWalletTransferred(address,address,uint256)": {
        "notice": "Emitted when staking wallet is transferred"
      },
      "UpgradeableBeaconSet(address)": {
        "notice": "Emitted when upgradeable beacon is set"
      },
      "Withdrawn(address,address,uint256)": {
        "notice": "Emitted when tokens are withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the balance of a specific address."
      },
      "claim(address)": {
        "notice": "Claims rewards for a given address."
      },
      "escrow()": {
        "notice": "Address of the escrow responsible for managing staking operations"
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializes the staking strategy contract with necessary parameters"
      },
      "periodFinish()": {
        "notice": "Returns the period finish time for the staking strategy."
      },
      "rewardRate()": {
        "notice": "Returns the current reward rate for the staking strategy."
      },
      "rewardToken()": {
        "notice": "Returns the address of the reward token for the staking strategy."
      },
      "setEscrow(address)": {
        "notice": "Sets the escrow address."
      },
      "setStakingContract(address)": {
        "notice": "Sets the staking contract address."
      },
      "setStakingToken(address)": {
        "notice": "Sets the staking token address."
      },
      "setUpgradeableBeacon(address)": {
        "notice": "Sets the address of the  beacon."
      },
      "stake(address,uint256,bytes)": {
        "notice": "Stakes a specified amount of tokens from a given address."
      },
      "stakingContract()": {
        "notice": "Address of the contract where staking operations are executed"
      },
      "stakingToken()": {
        "notice": "Address of the token being staked"
      },
      "totalSupply()": {
        "notice": "Returns the total supply of staked tokens."
      },
      "transferStakingWallet(address,address,uint256)": {
        "notice": "Transfers the staking wallet from one user to another."
      },
      "userStakingWallet(address)": {
        "notice": "Mapping of user addresses to their respective staking wallet addresses"
      },
      "veloAeroBeacon()": {
        "notice": "Address of beacon contract that manages wallet proxies"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraws a specified amount of tokens for a given address."
      }
    },
    "notice": "Staking interface for usage in veION when staking Velodrome/Aerodrome style LP.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3343,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3346,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6909,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2967,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3087,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2876,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 2955,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 109566,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "escrow",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 109569,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "stakingToken",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 109572,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "stakingContract",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 109576,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "veloAeroBeacon",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(UpgradeableBeacon)8851"
      },
      {
        "astId": 109581,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingStrategy.sol:VeloAeroStakingStrategy",
        "label": "userStakingWallet",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(UpgradeableBeacon)8851": {
        "encoding": "inplace",
        "label": "contract UpgradeableBeacon",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}