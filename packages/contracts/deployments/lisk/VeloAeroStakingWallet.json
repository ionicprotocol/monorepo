{
  "address": "0x541D4b7dbc7Db727c596c74748737Deb7001b9ef",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStakeStrategy",
          "name": "_stakeStrategy",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeStrategy",
      "outputs": [
        {
          "internalType": "contract IStakeStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3bae255f12548a6660a1eb5b9838907d530973c3626ca04ca3091e1d0904daf",
  "receipt": {
    "to": null,
    "from": "0x7d922bf0975424b3371074f54cC784AF738Dac0D",
    "contractAddress": "0x541D4b7dbc7Db727c596c74748737Deb7001b9ef",
    "transactionIndex": 2,
    "gasUsed": "861154",
    "logsBloom": "0x
    "blockHash": "0x489fbd9d2114ee93f1a2fbd5a0af5e9863c8f18a09a002a9914c96aa8855233b",
    "transactionHash": "0xe3bae255f12548a6660a1eb5b9838907d530973c3626ca04ca3091e1d0904daf",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 14522688,
        "transactionHash": "0xe3bae255f12548a6660a1eb5b9838907d530973c3626ca04ca3091e1d0904daf",
        "address": "0x541D4b7dbc7Db727c596c74748737Deb7001b9ef",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 1,
        "blockHash": "0x489fbd9d2114ee93f1a2fbd5a0af5e9863c8f18a09a002a9914c96aa8855233b"
      }
    ],
    "blockNumber": 14522688,
    "cumulativeGasUsed": "938730",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0366741513880e85aaa5abbf67624948",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakeStrategy\",\"name\":\"_stakeStrategy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStrategy\",\"outputs\":[{\"internalType\":\"contract IStakeStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money>\",\"details\":\"This contract allows staking and claiming rewards with a specific staking strategy.The staking strategy is set during contract deployment and can only be called by the strategy.The contract is designed to be used with the Velodrome/Aerodrome style LP.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"initialize(address)\":{\"details\":\"Can only be called once due to initializer modifier\",\"params\":{\"_stakeStrategy\":\"The address of the staking strategy contract\"}},\"stake(address,uint256,bytes)\":{\"params\":{\"amount\":\"The amount of tokens to stake.\",\"data\":\"Additional data required for the staking strategy.\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"withdrawTo\":\"The address to withdraw tokens to.\"}}},\"title\":\"VeloAeroStakingWallet\",\"version\":1},\"userdoc\":{\"events\":{\"Claimed(address,uint256)\":{\"notice\":\"Emitted when rewards are claimed\"},\"Staked(uint256)\":{\"notice\":\"Emitted when tokens are staked\"},\"Withdrawn(address,uint256)\":{\"notice\":\"Emitted when tokens are withdrawn\"}},\"kind\":\"user\",\"methods\":{\"claim(address)\":{\"notice\":\"Claims rewards for the caller.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract with a staking strategy\"},\"stake(address,uint256,bytes)\":{\"notice\":\"Stakes a specified amount of tokens according to the strategy.\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws a specified amount of staked tokens.\"}},\"notice\":\"Staking interface for usage in veION when staking Velodrome/Aerodrome style LP.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/stake/velo/VeloAeroStakingWallet.sol\":\"VeloAeroStakingWallet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized < type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4603e2f1403e437820665af135e9675c80e81aa005e360318b8e640ca2624658\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20PermitUpgradeable {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xa4ef4473f068f5f97b73e442f554e4464a581c2200c23181287b4c8eee5de777\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20Upgradeable.sol\\\";\\r\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\r\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20Upgradeable {\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20Upgradeable token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20Upgradeable token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20Upgradeable token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20Upgradeable token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20Upgradeable token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20PermitUpgradeable token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5735e7a8ab4d99d6cbef359228e76c7c2057f13f9a22d014458951409ea30f7c\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c08bea8e975fa8e5e635a7753a9442b3d58f501c3a9951df8eb45581054228d\",\"license\":\"MIT\"},\"contracts/veION/stake/IStakeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IStakeStrategy\\r\\n * @notice Interface for the VeloIonModeStakingModeReward contract.\\r\\n */\\r\\ninterface IStakeStrategy {\\r\\n  /// @notice Emitted when the contract is initialized\\r\\n  event Initialized(\\r\\n    address indexed escrow,\\r\\n    address indexed stakingToken,\\r\\n    address indexed stakingContract,\\r\\n    address stakingWalletImplementation\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when tokens are staked\\r\\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when rewards are claimed\\r\\n  event Claimed(address indexed from, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when tokens are withdrawn\\r\\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when staking wallet is transferred\\r\\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when escrow is set\\r\\n  event EscrowSet(address indexed newEscrow);\\r\\n\\r\\n  /// @notice Emitted when staking token is set\\r\\n  event StakingTokenSet(address indexed newStakingToken);\\r\\n\\r\\n  /// @notice Emitted when staking contract is set\\r\\n  event StakingContractSet(address indexed newStakingContract);\\r\\n\\r\\n  /// @notice Emitted when upgradeable beacon is set\\r\\n  event UpgradeableBeaconSet(address indexed newBeacon);\\r\\n\\r\\n  /**\\r\\n   * @notice Stakes a specified amount of tokens from a given address.\\r\\n   * @param _from The address from which tokens will be staked.\\r\\n   * @param _amount The amount of tokens to stake.\\r\\n   * @param _data Additional data that might be needed for staking.\\r\\n   */\\r\\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claims rewards for a given address.\\r\\n   * @param _from The address for which to claim rewards.\\r\\n   */\\r\\n  function claim(address _from) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws a specified amount of tokens for a given address.\\r\\n   * @param _owner The address from which tokens will be withdrawn.\\r\\n   * @param _amount The amount of tokens to withdraw.\\r\\n   */\\r\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the current reward rate for the staking strategy.\\r\\n   * @return The reward rate as a uint256.\\r\\n   */\\r\\n  function rewardRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the period finish time for the staking strategy.\\r\\n   * @return The period finish time as a uint256.\\r\\n   */\\r\\n  function periodFinish() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the balance of a specific address.\\r\\n   * @param account The address to query the balance of.\\r\\n   * @return The balance as a uint256.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the total supply of staked tokens.\\r\\n   * @return The total supply as a uint256.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the reward token for the staking strategy.\\r\\n   * @return The address of the reward token.\\r\\n   */\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking contract.\\r\\n   * @return The address of the staking contract.\\r\\n   */\\r\\n  function stakingContract() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking token.\\r\\n   * @return The address of the staking token.\\r\\n   */\\r\\n  function stakingToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the staking wallet address for a specific user.\\r\\n   * @param user The address of the user.\\r\\n   * @return The address of the user's staking wallet.\\r\\n   */\\r\\n  function userStakingWallet(address user) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers the staking wallet from one user to another.\\r\\n   * @param from The current owner of the staking wallet.\\r\\n   * @param to The new owner of the staking wallet.\\r\\n   */\\r\\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the escrow address.\\r\\n   * @param _escrow The address of the new escrow.\\r\\n   */\\r\\n  function setEscrow(address _escrow) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking token address.\\r\\n   * @param _stakingToken The address of the new staking token.\\r\\n   */\\r\\n  function setStakingToken(address _stakingToken) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking contract address.\\r\\n   * @param _stakingContract The address of the new staking contract.\\r\\n   */\\r\\n  function setStakingContract(address _stakingContract) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the  beacon.\\r\\n   * @param _beacon The address of the new beacon contract.\\r\\n   */\\r\\n  function setUpgradeableBeacon(address _beacon) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x69d7a60ae3df2ead3b3afaa32ae9b6ea4df13ef65c7c375babe7be2e5457fc8b\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/IStakeWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IStakeWallet {\\r\\n  /// @notice Emitted when tokens are staked\\r\\n  event Staked(uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when rewards are claimed\\r\\n  event Claimed(address indexed from, uint256 rewardAmount);\\r\\n\\r\\n  /// @notice Emitted when tokens are withdrawn\\r\\n  event Withdrawn(address indexed withdrawTo, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Stakes a specified amount of tokens according to the strategy.\\r\\n   * @param amount The amount of tokens to stake.\\r\\n   * @param data Additional data required for the staking strategy.\\r\\n   */\\r\\n  function stake(address from, uint256 amount, bytes memory data) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claims rewards for the caller.\\r\\n   */\\r\\n  function claim(address from) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws a specified amount of staked tokens.\\r\\n   * @param withdrawTo The address to withdraw tokens to.\\r\\n   * @param amount The amount of tokens to withdraw.\\r\\n   */\\r\\n  function withdraw(address withdrawTo, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa1145156b33d804afb421beb12e8c1fc19416e9d1d4b815d7b698fd97564ef42\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/velo/IVeloIonModeStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IVeloIonModeStaking {\\r\\n  event Deposit(address indexed from, address indexed to, uint256 amount);\\r\\n  event Withdraw(address indexed from, uint256 amount);\\r\\n  event NotifyReward(address indexed from, uint256 amount);\\r\\n  event ClaimFees(uint256 claimed0, uint256 claimed1);\\r\\n  event ClaimRewards(address indexed from, uint256 amount);\\r\\n\\r\\n  /// @notice Address of the pool LP token which is deposited (staked) for rewards\\r\\n  function stakingToken() external view returns (address);\\r\\n\\r\\n  /// @notice Address of the token (VELO v2) rewarded to stakers\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  /// @notice Address of the Converter contract linked to the gauge\\r\\n  function feeConverter() external view returns (address);\\r\\n\\r\\n  /// @notice Address of the staking rewards factory that created this gauge\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /// @notice Timestamp end of current rewards period\\r\\n  function periodFinish() external view returns (uint256);\\r\\n\\r\\n  /// @notice Current reward rate of rewardToken to distribute per second\\r\\n  function rewardRate() external view returns (uint256);\\r\\n\\r\\n  /// @notice Most recent timestamp contract has updated state\\r\\n  function lastUpdateTime() external view returns (uint256);\\r\\n\\r\\n  /// @notice Most recent stored value of rewardPerToken\\r\\n  function rewardPerTokenStored() external view returns (uint256);\\r\\n\\r\\n  /// @notice Amount of stakingToken deposited for rewards\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /// @notice Get the amount of stakingToken deposited by an account\\r\\n  function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n  /// @notice Cached rewardPerTokenStored for an account based on their most recent action\\r\\n  function userRewardPerTokenPaid(address) external view returns (uint256);\\r\\n\\r\\n  /// @notice Cached amount of rewardToken earned for an account\\r\\n  function rewards(address) external view returns (uint256);\\r\\n\\r\\n  /// @notice View to see the rewardRate given the timestamp of the start of the epoch\\r\\n  function rewardRateByEpoch(uint256) external view returns (uint256);\\r\\n\\r\\n  /// @notice Get the current reward rate per unit of stakingToken deposited\\r\\n  function rewardPerToken() external view returns (uint256 _rewardPerToken);\\r\\n\\r\\n  /// @notice Returns the last time the reward was modified or periodFinish if the reward has ended\\r\\n  function lastTimeRewardApplicable() external view returns (uint256 _time);\\r\\n\\r\\n  /// @notice Returns accrued balance to date from last claim / first deposit.\\r\\n  function earned(address _account) external view returns (uint256 _earned);\\r\\n\\r\\n  /// @notice Total amount of rewardToken to distribute for the current rewards period\\r\\n  function left() external view returns (uint256 _left);\\r\\n\\r\\n  /// @notice Claims accrued Fees from Pool and distributes them to the Converter\\r\\n  /// @return _claimed0 Amount of Fees claimed in token0\\r\\n  /// @return _claimed1 Amount of Fees claimed in token1\\r\\n  function claimFees() external returns (uint256 _claimed0, uint256 _claimed1);\\r\\n\\r\\n  /// @notice Retrieve rewards for an address.\\r\\n  /// @dev Throws if not called by same address or voter.\\r\\n  /// @param _account .\\r\\n  function getReward(address _account) external;\\r\\n\\r\\n  /// @notice Deposit LP tokens into gauge for msg.sender\\r\\n  /// @param _amount .\\r\\n  function deposit(uint256 _amount) external;\\r\\n\\r\\n  /// @notice Deposit LP tokens into gauge for any user\\r\\n  /// @param _amount .\\r\\n  /// @param _recipient Recipient to give balance to\\r\\n  function deposit(uint256 _amount, address _recipient) external;\\r\\n\\r\\n  /// @notice Withdraw LP tokens for user\\r\\n  /// @param _amount .\\r\\n  function withdraw(uint256 _amount) external;\\r\\n\\r\\n  /// @dev Notifies gauge of gauge rewards. Assumes gauge reward tokens is 18 decimals.\\r\\n  ///      If not 18 decimals, rewardRate may have rounding issues.\\r\\n  function notifyRewardMatch(uint256 amount) external;\\r\\n\\r\\n  /// @dev Notifies gauge of gauge rewards. Assumes gauge reward tokens is 18 decimals.\\r\\n  ///      If not 18 decimals, rewardRate may have rounding issues.\\r\\n  function notifyRewardAmount(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x23f5c8711c247d772dc1dd96417a335a99857bcd8e3dbe9a96d14ac8f5038262\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/velo/VeloAeroStakingWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport { IStakeWallet } from \\\"../IStakeWallet.sol\\\";\\r\\nimport { IStakeStrategy } from \\\"../IStakeStrategy.sol\\\";\\r\\nimport { IVeloIonModeStaking } from \\\"./IVeloIonModeStaking.sol\\\";\\r\\nimport { IERC20Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport { Initializable } from \\\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title VeloAeroStakingWallet\\r\\n * @notice Staking interface for usage in veION when staking Velodrome/Aerodrome style LP.\\r\\n * @dev This contract allows staking and claiming rewards with a specific staking strategy.\\r\\n * @dev The staking strategy is set during contract deployment and can only be called by the strategy.\\r\\n * @dev The contract is designed to be used with the Velodrome/Aerodrome style LP.\\r\\n * @author Jourdan Dunkley <jourdan@ionic.money>\\r\\n */\\r\\ncontract VeloAeroStakingWallet is IStakeWallet, Initializable {\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n  IStakeStrategy public stakeStrategy;\\r\\n\\r\\n  /// @dev Modifier to restrict function access to only the stake strategy contract\\r\\n  modifier onlyStakeStrategy() {\\r\\n    require(msg.sender == address(stakeStrategy), \\\"Not authorized: Only stake strategy can call this function\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes the contract with a staking strategy\\r\\n   * @dev Can only be called once due to initializer modifier\\r\\n   * @param _stakeStrategy The address of the staking strategy contract\\r\\n   */\\r\\n  function initialize(IStakeStrategy _stakeStrategy) external initializer {\\r\\n    stakeStrategy = _stakeStrategy;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeWallet\\r\\n  function stake(address /* _from */, uint256 _amount, bytes memory /* _data */) external override onlyStakeStrategy {\\r\\n    IERC20Upgradeable stakingToken = IERC20Upgradeable(stakeStrategy.stakingToken());\\r\\n    IVeloIonModeStaking stakingContract = IVeloIonModeStaking(stakeStrategy.stakingContract());\\r\\n\\r\\n    stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    stakingToken.approve(address(stakingContract), _amount);\\r\\n    stakingContract.deposit(_amount);\\r\\n    emit Staked(_amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeWallet\\r\\n  function claim(address _from) external onlyStakeStrategy {\\r\\n    IERC20Upgradeable rewardToken = IERC20Upgradeable(stakeStrategy.rewardToken());\\r\\n    IVeloIonModeStaking stakingContract = IVeloIonModeStaking(stakeStrategy.stakingContract());\\r\\n\\r\\n    stakingContract.getReward(address(this));\\r\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\r\\n    IERC20Upgradeable(rewardToken).safeTransfer(_from, rewardAmount);\\r\\n    emit Claimed(_from, rewardAmount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IStakeWallet\\r\\n  function withdraw(address _withdrawTo, uint256 _amount) external onlyStakeStrategy {\\r\\n    IERC20Upgradeable stakingToken = IERC20Upgradeable(stakeStrategy.stakingToken());\\r\\n    IVeloIonModeStaking stakingContract = IVeloIonModeStaking(stakeStrategy.stakingContract());\\r\\n\\r\\n    stakingContract.withdraw(_amount);\\r\\n    stakingToken.safeTransfer(_withdrawTo, _amount);\\r\\n    emit Withdrawn(_withdrawTo, _amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x5d95949d0e7ba07afe3cfbe991cbf6ec8b8877d10181886ba8cdbf896e914ff7\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610e23806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631e83409a1461005c5780633e12170f14610071578063766c737214610084578063c4d66de8146100b9578063f3fef3a3146100cc575b600080fd5b61006f61006a366004610b92565b6100df565b005b61006f61007f366004610bcc565b610330565b60005461009d906201000090046001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100c7366004610b92565b610577565b61006f6100da366004610c99565b6106a3565b6000546201000090046001600160a01b031633146101185760405162461bcd60e51b815260040161010f90610cc5565b60405180910390fd5b60008060029054906101000a90046001600160a01b03166001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101909190610d22565b905060008060029054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190610d22565b604051630c00007b60e41b81523060048201529091506001600160a01b0382169063c00007b090602401600060405180830381600087803b15801561024e57600080fd5b505af1158015610262573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d19190610d3f565b90506102e76001600160a01b0384168583610872565b836001600160a01b03167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8260405161032291815260200190565b60405180910390a250505050565b6000546201000090046001600160a01b031633146103605760405162461bcd60e51b815260040161010f90610cc5565b60008060029054906101000a90046001600160a01b03166001600160a01b03166372f702f36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190610d22565b905060008060029054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104529190610d22565b90506104696001600160a01b0383163330876108da565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820186905283169063095ea7b3906044016020604051808303816000875af11580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc9190610d58565b5060405163b6b55f2560e01b8152600481018590526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b15801561051f57600080fd5b505af1158015610533573d6000803e3d6000fd5b505050507feebbaa86c348cb664e392b180fd0ff2e1998af9fa833ef69a778cb0b42d3ca278460405161056891815260200190565b60405180910390a15050505050565b600054610100900460ff16158080156105975750600054600160ff909116105b806105b15750303b1580156105b1575060005460ff166001145b6106145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161010f565b6000805460ff191660011790558015610637576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561069f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000546201000090046001600160a01b031633146106d35760405162461bcd60e51b815260040161010f90610cc5565b60008060029054906101000a90046001600160a01b03166001600160a01b03166372f702f36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190610d22565b905060008060029054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190610d22565b604051632e1a7d4d60e01b8152600481018590529091506001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b50610837925050506001600160a01b0383168585610872565b836001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58460405161032291815260200190565b6040516001600160a01b0383166024820152604481018290526108d590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610918565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526109129085906323b872dd60e01b9060840161089e565b50505050565b600061096d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109ea9092919063ffffffff16565b8051909150156108d5578080602001905181019061098b9190610d58565b6108d55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161010f565b60606109f98484600085610a01565b949350505050565b606082471015610a625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161010f565b600080866001600160a01b03168587604051610a7e9190610d9e565b60006040518083038185875af1925050503d8060008114610abb576040519150601f19603f3d011682016040523d82523d6000602084013e610ac0565b606091505b5091509150610ad187838387610adc565b979650505050505050565b60608315610b4b578251600003610b44576001600160a01b0385163b610b445760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161010f565b50816109f9565b6109f98383815115610b605781518083602001fd5b8060405162461bcd60e51b815260040161010f9190610dba565b6001600160a01b0381168114610b8f57600080fd5b50565b600060208284031215610ba457600080fd5b8135610baf81610b7a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610be157600080fd5b8335610bec81610b7a565b925060208401359150604084013567ffffffffffffffff80821115610c1057600080fd5b818601915086601f830112610c2457600080fd5b813581811115610c3657610c36610bb6565b604051601f8201601f19908116603f01168101908382118183101715610c5e57610c5e610bb6565b81604052828152896020848701011115610c7757600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060408385031215610cac57600080fd5b8235610cb781610b7a565b946020939093013593505050565b6020808252603a908201527f4e6f7420617574686f72697a65643a204f6e6c79207374616b6520737472617460408201527f6567792063616e2063616c6c20746869732066756e6374696f6e000000000000606082015260800190565b600060208284031215610d3457600080fd5b8151610baf81610b7a565b600060208284031215610d5157600080fd5b5051919050565b600060208284031215610d6a57600080fd5b81518015158114610baf57600080fd5b60005b83811015610d95578181015183820152602001610d7d565b50506000910152565b60008251610db0818460208701610d7a565b9190910192915050565b6020815260008251806020840152610dd9816040850160208701610d7a565b601f01601f1916919091016040019291505056fea264697066735822122028b00a85895fd51bc12e2cec8a0377cef289ee51bad945abac89ef209d1366df64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631e83409a1461005c5780633e12170f14610071578063766c737214610084578063c4d66de8146100b9578063f3fef3a3146100cc575b600080fd5b61006f61006a366004610b92565b6100df565b005b61006f61007f366004610bcc565b610330565b60005461009d906201000090046001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61006f6100c7366004610b92565b610577565b61006f6100da366004610c99565b6106a3565b6000546201000090046001600160a01b031633146101185760405162461bcd60e51b815260040161010f90610cc5565b60405180910390fd5b60008060029054906101000a90046001600160a01b03166001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101909190610d22565b905060008060029054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a9190610d22565b604051630c00007b60e41b81523060048201529091506001600160a01b0382169063c00007b090602401600060405180830381600087803b15801561024e57600080fd5b505af1158015610262573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa1580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d19190610d3f565b90506102e76001600160a01b0384168583610872565b836001600160a01b03167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a8260405161032291815260200190565b60405180910390a250505050565b6000546201000090046001600160a01b031633146103605760405162461bcd60e51b815260040161010f90610cc5565b60008060029054906101000a90046001600160a01b03166001600160a01b03166372f702f36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d89190610d22565b905060008060029054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104529190610d22565b90506104696001600160a01b0383163330876108da565b60405163095ea7b360e01b81526001600160a01b0382811660048301526024820186905283169063095ea7b3906044016020604051808303816000875af11580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc9190610d58565b5060405163b6b55f2560e01b8152600481018590526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b15801561051f57600080fd5b505af1158015610533573d6000803e3d6000fd5b505050507feebbaa86c348cb664e392b180fd0ff2e1998af9fa833ef69a778cb0b42d3ca278460405161056891815260200190565b60405180910390a15050505050565b600054610100900460ff16158080156105975750600054600160ff909116105b806105b15750303b1580156105b1575060005460ff166001145b6106145760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161010f565b6000805460ff191660011790558015610637576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b03851602179055801561069f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000546201000090046001600160a01b031633146106d35760405162461bcd60e51b815260040161010f90610cc5565b60008060029054906101000a90046001600160a01b03166001600160a01b03166372f702f36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190610d22565b905060008060029054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c59190610d22565b604051632e1a7d4d60e01b8152600481018590529091506001600160a01b03821690632e1a7d4d90602401600060405180830381600087803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b50610837925050506001600160a01b0383168585610872565b836001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58460405161032291815260200190565b6040516001600160a01b0383166024820152604481018290526108d590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610918565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526109129085906323b872dd60e01b9060840161089e565b50505050565b600061096d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109ea9092919063ffffffff16565b8051909150156108d5578080602001905181019061098b9190610d58565b6108d55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161010f565b60606109f98484600085610a01565b949350505050565b606082471015610a625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161010f565b600080866001600160a01b03168587604051610a7e9190610d9e565b60006040518083038185875af1925050503d8060008114610abb576040519150601f19603f3d011682016040523d82523d6000602084013e610ac0565b606091505b5091509150610ad187838387610adc565b979650505050505050565b60608315610b4b578251600003610b44576001600160a01b0385163b610b445760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161010f565b50816109f9565b6109f98383815115610b605781518083602001fd5b8060405162461bcd60e51b815260040161010f9190610dba565b6001600160a01b0381168114610b8f57600080fd5b50565b600060208284031215610ba457600080fd5b8135610baf81610b7a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610be157600080fd5b8335610bec81610b7a565b925060208401359150604084013567ffffffffffffffff80821115610c1057600080fd5b818601915086601f830112610c2457600080fd5b813581811115610c3657610c36610bb6565b604051601f8201601f19908116603f01168101908382118183101715610c5e57610c5e610bb6565b81604052828152896020848701011115610c7757600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060408385031215610cac57600080fd5b8235610cb781610b7a565b946020939093013593505050565b6020808252603a908201527f4e6f7420617574686f72697a65643a204f6e6c79207374616b6520737472617460408201527f6567792063616e2063616c6c20746869732066756e6374696f6e000000000000606082015260800190565b600060208284031215610d3457600080fd5b8151610baf81610b7a565b600060208284031215610d5157600080fd5b5051919050565b600060208284031215610d6a57600080fd5b81518015158114610baf57600080fd5b60005b83811015610d95578181015183820152602001610d7d565b50506000910152565b60008251610db0818460208701610d7a565b9190910192915050565b6020815260008251806020840152610dd9816040850160208701610d7a565b601f01601f1916919091016040019291505056fea264697066735822122028b00a85895fd51bc12e2cec8a0377cef289ee51bad945abac89ef209d1366df64736f6c63430008160033",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money>",
    "details": "This contract allows staking and claiming rewards with a specific staking strategy.The staking strategy is set during contract deployment and can only be called by the strategy.The contract is designed to be used with the Velodrome/Aerodrome style LP.",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "initialize(address)": {
        "details": "Can only be called once due to initializer modifier",
        "params": {
          "_stakeStrategy": "The address of the staking strategy contract"
        }
      },
      "stake(address,uint256,bytes)": {
        "params": {
          "amount": "The amount of tokens to stake.",
          "data": "Additional data required for the staking strategy."
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amount of tokens to withdraw.",
          "withdrawTo": "The address to withdraw tokens to."
        }
      }
    },
    "title": "VeloAeroStakingWallet",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(address,uint256)": {
        "notice": "Emitted when rewards are claimed"
      },
      "Staked(uint256)": {
        "notice": "Emitted when tokens are staked"
      },
      "Withdrawn(address,uint256)": {
        "notice": "Emitted when tokens are withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "claim(address)": {
        "notice": "Claims rewards for the caller."
      },
      "initialize(address)": {
        "notice": "Initializes the contract with a staking strategy"
      },
      "stake(address,uint256,bytes)": {
        "notice": "Stakes a specified amount of tokens according to the strategy."
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraws a specified amount of staked tokens."
      }
    },
    "notice": "Staking interface for usage in veION when staking Velodrome/Aerodrome style LP.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3343,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingWallet.sol:VeloAeroStakingWallet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3346,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingWallet.sol:VeloAeroStakingWallet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 110139,
        "contract": "contracts/veION/stake/velo/VeloAeroStakingWallet.sol:VeloAeroStakingWallet",
        "label": "stakeStrategy",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IStakeStrategy)109301"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStakeStrategy)109301": {
        "encoding": "inplace",
        "label": "contract IStakeStrategy",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}