{
  "address": "0xE1A3006be645a80F206311d9f18C866c204bA02f",
  "abi": [
    {
      "inputs": [],
      "name": "CallerIsNotEOA",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InteractionNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashPrior",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "AccrueInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAdminFeeMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFeeMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIonicFeeMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newIonicFeeMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewIonicFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "oldInterestRateModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "NewMarketInterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "NewPluginImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReserveFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewReserveFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesReduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_becomeImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getExtensionFunctions",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "functionSelectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_plugin",
          "type": "address"
        }
      ],
      "name": "_updatePlugin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "_withdrawAdminFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "_withdrawIonicFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrualBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ap",
      "outputs": [
        {
          "internalType": "contract AddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IonicComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegateType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeSeizeShareMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateModel",
      "outputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ionicAdmin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ionicFeeMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plugin",
      "outputs": [
        {
          "internalType": "contract IERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolSeizeShareMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrowBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "selfTransferIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "selfTransferOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAdminFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIonicFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fcc10de09725b11509af5c31b1c790f72e783767b0f209c2ff7eadb740493c1",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0xE1A3006be645a80F206311d9f18C866c204bA02f",
    "transactionIndex": 1,
    "gasUsed": "5282316",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7fdd84882acf2d852fde1dde6d7f7add4728495ddf4a26fec00f690a15dda7e8",
    "transactionHash": "0x4fcc10de09725b11509af5c31b1c790f72e783767b0f209c2ff7eadb740493c1",
    "logs": [],
    "blockNumber": 7630707,
    "cumulativeGasUsed": "5326203",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5aaea447b85dccd5473e8e0eceb8e2df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CallerIsNotEOA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InteractionNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAdminFeeMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFeeMantissa\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIonicFeeMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIonicFeeMantissa\",\"type\":\"uint256\"}],\"name\":\"NewIonicFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"NewPluginImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getExtensionFunctions\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"}],\"name\":\"_updatePlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"_withdrawAdminFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"_withdrawIonicFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ap\",\"outputs\":[{\"internalType\":\"contract AddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IonicComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSeizeShareMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ionicAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ionicFeeMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plugin\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSeizeShareMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfTransferIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selfTransferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAdminFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIonicFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Joey Santoro CErc20PluginDelegate deposits and withdraws from a plugin contract It is also capable of delegating reward functionality to a PluginRewardsDistributor\",\"events\":{\"Failure(uint256,uint256,uint256)\":{\"details\":\"`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*\"}},\"kind\":\"dev\",\"methods\":{\"_becomeImplementation(bytes)\":{\"params\":{\"data\":\"The encoded arguments for becoming\"}},\"_getExtensionFunctions()\":{\"returns\":{\"functionSelectors\":\"a list of all the function selectors that this logic extension exposes\"}},\"_updatePlugin(address)\":{\"params\":{\"_plugin\":\"The address of the plugin implementation to use\"}},\"_withdrawAdminFees(uint256)\":{\"params\":{\"withdrawAmount\":\"Amount of fees to withdraw\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_withdrawIonicFees(uint256)\":{\"params\":{\"withdrawAmount\":\"Amount of fees to withdraw\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"borrow(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset to borrow\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"getCash()\":{\"returns\":{\"_0\":\"The quantity of underlying asset owned by this contract\"}},\"liquidateBorrow(address,uint256,address)\":{\"params\":{\"borrower\":\"The borrower of this cToken to be liquidated\",\"cTokenCollateral\":\"The market in which to seize collateral from the borrower\",\"repayAmount\":\"The amount of the underlying borrowed asset to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"mint(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"mintAmount\":\"The amount of the underlying asset to supply\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeem(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemTokens\":\"The number of cTokens to redeem into underlying\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeemUnderlying(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemAmount\":\"The amount of underlying to redeem\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrow(uint256)\":{\"params\":{\"repayAmount\":\"The amount to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrowBehalf(address,uint256)\":{\"params\":{\"borrower\":\"the account with the debt being payed off\",\"repayAmount\":\"The amount to repay\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"seize(address,address,uint256)\":{\"details\":\"Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\",\"params\":{\"borrower\":\"The account having collateral seized\",\"liquidator\":\"The account receiving seized collateral\",\"seizeTokens\":\"The number of cTokens to seize\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}}},\"title\":\"Rari's CErc20Plugin's Contract\",\"version\":1},\"userdoc\":{\"events\":{\"AccrueInterest(uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when interest is accrued\"},\"Approval(address,address,uint256)\":{\"notice\":\"EIP20 Approval event\"},\"Borrow(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when underlying is borrowed\"},\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when a borrow is liquidated\"},\"Mint(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are minted\"},\"NewAdminFee(uint256,uint256)\":{\"notice\":\"Event emitted when the admin fee is changed\"},\"NewIonicFee(uint256,uint256)\":{\"notice\":\"Event emitted when the Ionic fee is changed\"},\"NewMarketInterestRateModel(address,address)\":{\"notice\":\"Event emitted when interestRateModel is changed\"},\"NewReserveFactor(uint256,uint256)\":{\"notice\":\"Event emitted when the reserve factor is changed\"},\"Redeem(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are redeemed\"},\"RepayBorrow(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a borrow is repaid\"},\"ReservesAdded(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are added\"},\"ReservesReduced(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are reduced\"},\"Transfer(address,address,uint256)\":{\"notice\":\"EIP20 Transfer event\"}},\"kind\":\"user\",\"methods\":{\"_becomeImplementation(bytes)\":{\"notice\":\"Delegate interface to become the implementation\"},\"_updatePlugin(address)\":{\"notice\":\"Update the plugin implementation to a whitelisted implementation\"},\"_withdrawAdminFees(uint256)\":{\"notice\":\"Accrues interest and reduces admin fees by transferring to admin\"},\"_withdrawIonicFees(uint256)\":{\"notice\":\"Accrues interest and reduces Ionic fees by transferring to Ionic\"},\"accrualBlockNumber()\":{\"notice\":\"Block number that interest was last accrued at\"},\"adminFeeMantissa()\":{\"notice\":\"Fraction of interest currently set aside for admin fees\"},\"ap()\":{\"notice\":\"Addresses Provider\"},\"borrow(uint256)\":{\"notice\":\"Sender borrows assets from the protocol to their own address\"},\"borrowIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the opening of the market\"},\"comptroller()\":{\"notice\":\"Contract which oversees inter-cToken operations\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"getCash()\":{\"notice\":\"Get cash balance of this cToken in the underlying asset\"},\"interestRateModel()\":{\"notice\":\"Model which tells what the current interest rate should be\"},\"ionicFeeMantissa()\":{\"notice\":\"Fraction of interest currently set aside for Ionic fees\"},\"liquidateBorrow(address,uint256,address)\":{\"notice\":\"The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator.\"},\"mint(uint256)\":{\"notice\":\"Sender supplies assets into the market and receives cTokens in exchange\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"plugin()\":{\"notice\":\"Plugin address\"},\"redeem(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for the underlying asset\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for a specified amount of underlying asset\"},\"repayBorrow(uint256)\":{\"notice\":\"Sender repays their own borrow\"},\"repayBorrowBehalf(address,uint256)\":{\"notice\":\"Sender repays a borrow belonging to borrower\"},\"reserveFactorMantissa()\":{\"notice\":\"Fraction of interest currently set aside for reserves\"},\"seize(address,address,uint256)\":{\"notice\":\"Transfers collateral tokens (this market) to the liquidator.\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalAdminFees()\":{\"notice\":\"Total amount of admin fees of the underlying held in this market\"},\"totalBorrows()\":{\"notice\":\"Total amount of outstanding borrows of the underlying in this market\"},\"totalIonicFees()\":{\"notice\":\"Total amount of Ionic fees of the underlying held in this market\"},\"totalReserves()\":{\"notice\":\"Total amount of reserves of the underlying held in this market\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"underlying()\":{\"notice\":\"Underlying asset for this CToken\"}},\"notice\":\"CToken which outsources token logic to a plugin\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/compound/CErc20PluginDelegate.sol\":\"CErc20PluginDelegate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x636eab608b4563c01e88042aba9330e6fe69af2c567fe1adf4d85731974ac81d\",\"license\":\"MIT\"},\"adrastia-periphery/rates/IHistoricalRates.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./RateLibrary.sol\\\";\\n\\n/**\\n * @title IHistoricalRates\\n * @notice An interface that defines a contract that stores historical rates.\\n */\\ninterface IHistoricalRates {\\n    /// @notice Gets an rate for a token at a specific index.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param index The index of the rate to get, where index 0 contains the latest rate, and the last\\n    ///   index contains the oldest rate (uses reverse chronological ordering).\\n    /// @return rate The rate for the token at the specified index.\\n    function getRateAt(address token, uint256 index) external view returns (RateLibrary.Rate memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(address token, uint256 amount) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @param offset The index of the first rate to get (default: 0).\\n    /// @param increment The increment between rates to get (default: 1).\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the number of rates for a token.\\n    /// @param token The address of the token to get the number of rates for.\\n    /// @return count The number of rates for the token.\\n    function getRatesCount(address token) external view returns (uint256);\\n\\n    /// @notice Gets the capacity of rates for a token.\\n    /// @param token The address of the token to get the capacity of rates for.\\n    /// @return capacity The capacity of rates for the token.\\n    function getRatesCapacity(address token) external view returns (uint256);\\n\\n    /// @notice Sets the capacity of rates for a token.\\n    /// @param token The address of the token to set the capacity of rates for.\\n    /// @param amount The new capacity of rates for the token.\\n    function setRatesCapacity(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2754968c368df628f1ed00c2016b1a73f0f9b44f29e48d405887ad108723b3af\",\"license\":\"MIT\"},\"adrastia-periphery/rates/RateLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary RateLibrary {\\n    struct Rate {\\n        uint64 target;\\n        uint64 current;\\n        uint32 timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x397b79cf9f183afa76db3c8d10cffb408e31ba154900f671a7e93c071bacbff4\",\"license\":\"MIT\"},\"contracts/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { ICErc20 } from \\\"./compound/CTokenInterfaces.sol\\\";\\nimport \\\"./liquidators/IRedemptionStrategy.sol\\\";\\nimport \\\"./liquidators/IFundsConversionStrategy.sol\\\";\\n\\ninterface ILiquidator {\\n  /**\\n   * borrower The borrower's Ethereum address.\\n   * repayAmount The amount to repay to liquidate the unhealthy loan.\\n   * cErc20 The borrowed CErc20 contract to repay.\\n   * cTokenCollateral The cToken collateral contract to be liquidated.\\n   * minProfitAmount The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\\n   * redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * strategyData The data for the chosen IRedemptionStrategy contracts, if any.\\n   */\\n  struct LiquidateToTokensWithFlashSwapVars {\\n    address borrower;\\n    uint256 repayAmount;\\n    ICErc20 cErc20;\\n    ICErc20 cTokenCollateral;\\n    address flashSwapContract;\\n    uint256 minProfitAmount;\\n    IRedemptionStrategy[] redemptionStrategies;\\n    bytes[] strategyData;\\n    IFundsConversionStrategy[] debtFundingStrategies;\\n    bytes[] debtFundingStrategiesData;\\n  }\\n\\n  function redemptionStrategiesWhitelist(address strategy) external view returns (bool);\\n\\n  function safeLiquidate(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICErc20 cTokenCollateral,\\n    uint256 minOutputAmount\\n  ) external returns (uint256);\\n\\n  function safeLiquidateToTokensWithFlashLoan(LiquidateToTokensWithFlashSwapVars calldata vars)\\n    external\\n    returns (uint256);\\n\\n  function _whitelistRedemptionStrategy(IRedemptionStrategy strategy, bool whitelisted) external;\\n\\n  function _whitelistRedemptionStrategies(IRedemptionStrategy[] calldata strategies, bool[] calldata whitelisted)\\n    external;\\n\\n  function setExpressRelay(address _expressRelay) external;\\n\\n  function setPoolLens(address _poolLens) external;\\n\\n  function setHealthFactorThreshold(uint256 _healthFactorThreshold) external;\\n}\\n\",\"keccak256\":\"0x27f01b974199a9ab7e4e4d5df2a744d4c7465a3b56316d00829ca0f484efb67d\",\"license\":\"UNLICENSED\"},\"contracts/IonicUniV3Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./liquidators/IRedemptionStrategy.sol\\\";\\nimport \\\"./liquidators/IFundsConversionStrategy.sol\\\";\\nimport \\\"./ILiquidator.sol\\\";\\n\\nimport \\\"./external/uniswap/IUniswapV3FlashCallback.sol\\\";\\nimport \\\"./external/uniswap/IUniswapV3Pool.sol\\\";\\nimport \\\"./external/pyth/IExpressRelay.sol\\\";\\nimport \\\"./external/pyth/IExpressRelayFeeReceiver.sol\\\";\\nimport { IUniswapV3Quoter } from \\\"./external/uniswap/quoter/interfaces/IUniswapV3Quoter.sol\\\";\\nimport { IFlashLoanReceiver } from \\\"./ionic/IFlashLoanReceiver.sol\\\";\\n\\nimport { ICErc20 } from \\\"./compound/CTokenInterfaces.sol\\\";\\n\\nimport \\\"./PoolLens.sol\\\";\\n\\n/**\\n * @title IonicUniV3Liquidator\\n * @author Veliko Minkov <v.minkov@dcvx.io> (https://github.com/vminkov)\\n * @notice IonicUniV3Liquidator liquidates unhealthy borrowers with flashloan support.\\n */\\ncontract IonicUniV3Liquidator is\\n  OwnableUpgradeable,\\n  ILiquidator,\\n  IUniswapV3FlashCallback,\\n  IExpressRelayFeeReceiver,\\n  IFlashLoanReceiver\\n{\\n  using AddressUpgradeable for address payable;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event VaultReceivedETH(address sender, uint256 amount, bytes permissionKey);\\n  /**\\n   * @dev Cached liquidator profit exchange source.\\n   * ERC20 token address or the zero address for NATIVE.\\n   * For use in `safeLiquidateToTokensWithFlashLoan` after it is set by `postFlashLoanTokens`.\\n   */\\n  address private _liquidatorProfitExchangeSource;\\n\\n  /**\\n   * @dev Cached flash swap amount.\\n   * For use in `repayTokenFlashLoan` after it is set by `safeLiquidateToTokensWithFlashLoan`.\\n   */\\n  uint256 private _flashSwapAmount;\\n\\n  /**\\n   * @dev Cached flash swap token.\\n   * For use in `repayTokenFlashLoan` after it is set by `safeLiquidateToTokensWithFlashLoan`.\\n   */\\n  address private _flashSwapToken;\\n\\n  address public W_NATIVE_ADDRESS;\\n  mapping(address => bool) public redemptionStrategiesWhitelist;\\n  IUniswapV3Quoter public quoter;\\n\\n  /**\\n   * @dev Addres of Pyth Express Relay for preventing value leakage in liquidations.\\n   */\\n  IExpressRelay public expressRelay;\\n  /**\\n   * @dev Pool Lens.\\n   */\\n  PoolLens public lens;\\n  /**\\n   * @dev Health Factor below which PER permissioning is bypassed.\\n   */\\n  uint256 public healthFactorThreshold;\\n\\n  modifier onlyLowHF(address borrower, ICErc20 cToken) {\\n    uint256 currentHealthFactor = lens.getHealthFactor(borrower, cToken.comptroller());\\n    require(currentHealthFactor < healthFactorThreshold, \\\"HF not low enough, reserving for PYTH\\\");\\n    _;\\n  }\\n\\n  function initialize(address _wtoken, address _quoter) external initializer {\\n    __Ownable_init();\\n    W_NATIVE_ADDRESS = _wtoken;\\n    quoter = IUniswapV3Quoter(_quoter);\\n  }\\n\\n  /**\\n   * @notice Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\\n   * @param borrower The borrower's Ethereum address.\\n   * @param repayAmount The amount to repay to liquidate the unhealthy loan.\\n   * @param cErc20 The borrowed cErc20 to repay.\\n   * @param cTokenCollateral The cToken collateral to be liquidated.\\n   * @param minOutputAmount The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\\n   */\\n  function _safeLiquidate(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICErc20 cTokenCollateral,\\n    uint256 minOutputAmount\\n  ) internal returns (uint256) {\\n    // Transfer tokens in, approve to cErc20, and liquidate borrow\\n    require(repayAmount > 0, \\\"Repay amount (transaction value) must be greater than 0.\\\");\\n    IERC20Upgradeable underlying = IERC20Upgradeable(cErc20.underlying());\\n    underlying.safeTransferFrom(msg.sender, address(this), repayAmount);\\n    underlying.approve(address(cErc20), repayAmount);\\n    require(cErc20.liquidateBorrow(borrower, repayAmount, address(cTokenCollateral)) == 0, \\\"Liquidation failed.\\\");\\n\\n    // Redeem seized cTokens for underlying asset\\n    uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\\n    require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n    uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\\n    require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n\\n    return transferSeizedFunds(address(cTokenCollateral.underlying()), minOutputAmount);\\n  }\\n\\n  function safeLiquidate(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICErc20 cTokenCollateral,\\n    uint256 minOutputAmount\\n  ) external onlyLowHF(borrower, cTokenCollateral) returns (uint256) {\\n    return _safeLiquidate(borrower, repayAmount, cErc20, cTokenCollateral, minOutputAmount);\\n  }\\n\\n  function safeLiquidatePyth(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICErc20 cTokenCollateral,\\n    uint256 minOutputAmount\\n  ) external returns (uint256) {\\n    require(expressRelay.isPermissioned(address(this), abi.encode(borrower)), \\\"invalid liquidation\\\");\\n    return _safeLiquidate(borrower, repayAmount, cErc20, cTokenCollateral, minOutputAmount);\\n  }\\n\\n  function safeLiquidateWithAggregator(\\n    address borrower,\\n    uint256 repayAmount,\\n    ICErc20 cErc20,\\n    ICErc20 cTokenCollateral,\\n    address aggregatorTarget,\\n    bytes memory aggregatorData\\n  ) external {\\n    // Transfer tokens in, approve to cErc20, and liquidate borrow\\n    require(repayAmount > 0, \\\"Repay amount (transaction value) must be greater than 0.\\\");\\n    cErc20.flash(\\n      repayAmount,\\n      abi.encode(borrower, cErc20, cTokenCollateral, aggregatorTarget, aggregatorData, msg.sender)\\n    );\\n  }\\n\\n  function receiveFlashLoan(address _underlyingBorrow, uint256 amount, bytes calldata data) external {\\n    (\\n      address borrower,\\n      ICErc20 cErc20,\\n      ICErc20 cTokenCollateral,\\n      address aggregatorTarget,\\n      bytes memory aggregatorData,\\n      address liquidator\\n    ) = abi.decode(data, (address, ICErc20, ICErc20, address, bytes, address));\\n    IERC20Upgradeable underlyingBorrow = IERC20Upgradeable(_underlyingBorrow);\\n    underlyingBorrow.approve(address(cErc20), amount);\\n    require(cErc20.liquidateBorrow(borrower, amount, address(cTokenCollateral)) == 0, \\\"Liquidation failed.\\\");\\n\\n    // Redeem seized cTokens for underlying asset\\n    IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(cTokenCollateral.underlying());\\n    {\\n      uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\\n      require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n      uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\\n      require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n      uint256 underlyingCollateralRedeemed = underlyingCollateral.balanceOf(address(this));\\n\\n      // Call the aggregator\\n      underlyingCollateral.approve(aggregatorTarget, underlyingCollateralRedeemed);\\n      (bool success, ) = aggregatorTarget.call(aggregatorData);\\n      require(success, \\\"Aggregator call failed\\\");\\n    }\\n\\n    // receive profits\\n    {\\n      uint256 receivedAmount = underlyingBorrow.balanceOf(address(this));\\n      require(receivedAmount >= amount, \\\"Not received enough collateral after swap.\\\");\\n      uint256 profitBorrow = receivedAmount - amount;\\n      if (profitBorrow > 0) {\\n        underlyingBorrow.safeTransfer(liquidator, profitBorrow);\\n      }\\n\\n      uint256 profitCollateral = underlyingCollateral.balanceOf(address(this));\\n      if (profitCollateral > 0) {\\n        underlyingCollateral.safeTransfer(liquidator, profitCollateral);\\n      }\\n    }\\n\\n    // pay back flashloan\\n    underlyingBorrow.approve(address(cErc20), amount);\\n  }\\n\\n  /**\\n   * @dev Transfers seized funds to the sender.\\n   * @param erc20Contract The address of the token to transfer.\\n   * @param minOutputAmount The minimum amount to transfer.\\n   */\\n  function transferSeizedFunds(address erc20Contract, uint256 minOutputAmount) internal returns (uint256) {\\n    IERC20Upgradeable token = IERC20Upgradeable(erc20Contract);\\n    uint256 seizedOutputAmount = token.balanceOf(address(this));\\n    require(seizedOutputAmount >= minOutputAmount, \\\"Minimum token output amount not satified.\\\");\\n    if (seizedOutputAmount > 0) token.safeTransfer(msg.sender, seizedOutputAmount);\\n\\n    return seizedOutputAmount;\\n  }\\n\\n  function safeLiquidateToTokensWithFlashLoan(\\n    LiquidateToTokensWithFlashSwapVars calldata vars\\n  ) external onlyLowHF(vars.borrower, vars.cTokenCollateral) returns (uint256) {\\n    // Input validation\\n    require(vars.repayAmount > 0, \\\"Repay amount must be greater than 0.\\\");\\n\\n    // we want to calculate the needed flashSwapAmount on-chain to\\n    // avoid errors due to changing market conditions\\n    // between the time of calculating and including the tx in a block\\n    uint256 fundingAmount = vars.repayAmount;\\n    IERC20Upgradeable fundingToken;\\n    if (vars.debtFundingStrategies.length > 0) {\\n      require(\\n        vars.debtFundingStrategies.length == vars.debtFundingStrategiesData.length,\\n        \\\"Funding IFundsConversionStrategy contract array and strategy data bytes array must be the same length.\\\"\\n      );\\n      // estimate the initial (flash-swapped token) input from the expected output (debt token)\\n      for (uint256 i = 0; i < vars.debtFundingStrategies.length; i++) {\\n        bytes memory strategyData = vars.debtFundingStrategiesData[i];\\n        IFundsConversionStrategy fcs = vars.debtFundingStrategies[i];\\n        (fundingToken, fundingAmount) = fcs.estimateInputAmount(fundingAmount, strategyData);\\n      }\\n    } else {\\n      fundingToken = IERC20Upgradeable(ICErc20(address(vars.cErc20)).underlying());\\n    }\\n\\n    // the last outputs from estimateInputAmount are the ones to be flash-swapped\\n    _flashSwapAmount = fundingAmount;\\n    _flashSwapToken = address(fundingToken);\\n\\n    IUniswapV3Pool flashSwapPool = IUniswapV3Pool(vars.flashSwapContract);\\n    bool token0IsFlashSwapFundingToken = flashSwapPool.token0() == address(fundingToken);\\n    flashSwapPool.flash(\\n      address(this),\\n      token0IsFlashSwapFundingToken ? fundingAmount : 0,\\n      !token0IsFlashSwapFundingToken ? fundingAmount : 0,\\n      msg.data\\n    );\\n\\n    return transferSeizedFunds(_liquidatorProfitExchangeSource, vars.minProfitAmount);\\n  }\\n\\n  /**\\n   * @dev Receives NATIVE from liquidations and flashloans.\\n   * Requires that `msg.sender` is W_NATIVE, a CToken, or a Uniswap V2 Router, or another contract.\\n   */\\n  receive() external payable {\\n    require(payable(msg.sender).isContract(), \\\"Sender is not a contract.\\\");\\n  }\\n\\n  /**\\n   * @notice receiveAuctionProceedings function - receives native token from the express relay\\n   * You can use permission key to distribute the received funds to users who got liquidated, LPs, etc...\\n   */\\n  function receiveAuctionProceedings(bytes calldata permissionKey) external payable {\\n    emit VaultReceivedETH(msg.sender, msg.value, permissionKey);\\n  }\\n\\n  function withdrawAll() external onlyOwner {\\n    uint256 balance = address(this).balance;\\n    require(balance > 0, \\\"No Ether left to withdraw\\\");\\n\\n    // Transfer all Ether to the owner\\n    (bool sent, ) = msg.sender.call{ value: balance }(\\\"\\\");\\n    require(sent, \\\"Failed to send Ether\\\");\\n  }\\n\\n  /**\\n   * @dev Callback function for Uniswap flashloans.\\n   */\\n\\n  function supV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\\n    uniswapV3FlashCallback(fee0, fee1, data);\\n  }\\n\\n  function algebraFlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external {\\n    uniswapV3FlashCallback(fee0, fee1, data);\\n  }\\n\\n  function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) public {\\n    // Liquidate unhealthy borrow, exchange seized collateral, return flashloaned funds, and exchange profit\\n    // Decode params\\n    LiquidateToTokensWithFlashSwapVars memory vars = abi.decode(data[4:], (LiquidateToTokensWithFlashSwapVars));\\n\\n    // Post token flashloan\\n    // Cache liquidation profit token (or the zero address for NATIVE) for use as source for exchange later\\n    _liquidatorProfitExchangeSource = postFlashLoanTokens(vars, fee0, fee1);\\n  }\\n\\n  /**\\n   * @dev Liquidate unhealthy token borrow, exchange seized collateral, return flashloaned funds, and exchange profit.\\n   */\\n  function postFlashLoanTokens(\\n    LiquidateToTokensWithFlashSwapVars memory vars,\\n    uint256 fee0,\\n    uint256 fee1\\n  ) private returns (address) {\\n    IERC20Upgradeable debtRepaymentToken = IERC20Upgradeable(_flashSwapToken);\\n    uint256 debtRepaymentAmount = _flashSwapAmount;\\n\\n    if (vars.debtFundingStrategies.length > 0) {\\n      // loop backwards to convert the initial (flash-swapped token) input to the final expected output (debt token)\\n      for (uint256 i = vars.debtFundingStrategies.length; i > 0; i--) {\\n        (debtRepaymentToken, debtRepaymentAmount) = convertCustomFunds(\\n          debtRepaymentToken,\\n          debtRepaymentAmount,\\n          vars.debtFundingStrategies[i - 1],\\n          vars.debtFundingStrategiesData[i - 1]\\n        );\\n      }\\n    }\\n\\n    // Approve the debt repayment transfer, liquidate and redeem the seized collateral\\n    {\\n      address underlyingBorrow = vars.cErc20.underlying();\\n      require(\\n        address(debtRepaymentToken) == underlyingBorrow,\\n        \\\"the debt repayment funds should be converted to the underlying debt token\\\"\\n      );\\n      require(debtRepaymentAmount >= vars.repayAmount, \\\"debt repayment amount not enough\\\");\\n      // Approve repayAmount to cErc20\\n      IERC20Upgradeable(underlyingBorrow).approve(address(vars.cErc20), vars.repayAmount);\\n\\n      // Liquidate borrow\\n      require(\\n        vars.cErc20.liquidateBorrow(vars.borrower, vars.repayAmount, address(vars.cTokenCollateral)) == 0,\\n        \\\"Liquidation failed.\\\"\\n      );\\n\\n      // Redeem seized cTokens for underlying asset\\n      uint256 seizedCTokenAmount = vars.cTokenCollateral.balanceOf(address(this));\\n      require(seizedCTokenAmount > 0, \\\"No cTokens seized.\\\");\\n      uint256 redeemResult = vars.cTokenCollateral.redeem(seizedCTokenAmount);\\n      require(redeemResult == 0, \\\"Error calling redeeming seized cToken: error code not equal to 0\\\");\\n    }\\n\\n    // Repay flashloan\\n    return repayTokenFlashLoan(vars.cTokenCollateral, vars.redemptionStrategies, vars.strategyData, fee0, fee1);\\n  }\\n\\n  /**\\n   * @dev Repays token flashloans.\\n   */\\n  function repayTokenFlashLoan(\\n    ICErc20 cTokenCollateral,\\n    IRedemptionStrategy[] memory redemptionStrategies,\\n    bytes[] memory strategyData,\\n    uint256 fee0,\\n    uint256 fee1\\n  ) private returns (address) {\\n    IUniswapV3Pool pool = IUniswapV3Pool(msg.sender);\\n    uint256 flashSwapReturnAmount = _flashSwapAmount;\\n    if (IUniswapV3Pool(msg.sender).token0() == _flashSwapToken) {\\n      flashSwapReturnAmount += fee0;\\n    } else if (IUniswapV3Pool(msg.sender).token1() == _flashSwapToken) {\\n      flashSwapReturnAmount += fee1;\\n    } else {\\n      revert(\\\"wrong pool or _flashSwapToken\\\");\\n    }\\n\\n    // Swap cTokenCollateral for cErc20 via Uniswap\\n    // Check underlying collateral seized\\n    IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(ICErc20(address(cTokenCollateral)).underlying());\\n    uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\\n\\n    // Redeem custom collateral if liquidation strategy is set\\n    if (redemptionStrategies.length > 0) {\\n      require(\\n        redemptionStrategies.length == strategyData.length,\\n        \\\"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\\\"\\n      );\\n      for (uint256 i = 0; i < redemptionStrategies.length; i++)\\n        (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(\\n          underlyingCollateral,\\n          underlyingCollateralSeized,\\n          redemptionStrategies[i],\\n          strategyData[i]\\n        );\\n    }\\n\\n    // Check if we can repay directly one of the sides with collateral\\n    if (address(underlyingCollateral) == pool.token0() || address(underlyingCollateral) == pool.token1()) {\\n      // Repay flashloan directly with collateral\\n      uint256 collateralRequired;\\n      if (address(underlyingCollateral) == _flashSwapToken) {\\n        // repay the borrowed asset directly\\n        collateralRequired = flashSwapReturnAmount;\\n\\n        // Repay flashloan\\n        IERC20Upgradeable(_flashSwapToken).transfer(address(pool), flashSwapReturnAmount);\\n      } else {\\n        // TODO swap within the same pool and then repay the FL to the pool\\n        bool zeroForOne = address(underlyingCollateral) == pool.token0();\\n\\n        {\\n          collateralRequired = quoter.quoteExactOutputSingle(\\n            zeroForOne ? pool.token0() : pool.token1(),\\n            zeroForOne ? pool.token1() : pool.token0(),\\n            pool.fee(),\\n            _flashSwapAmount,\\n            0 // sqrtPriceLimitX96\\n          );\\n        }\\n        require(\\n          collateralRequired <= underlyingCollateralSeized,\\n          \\\"Token flashloan return amount greater than seized collateral.\\\"\\n        );\\n\\n        // Repay flashloan\\n        pool.swap(\\n          address(pool),\\n          zeroForOne,\\n          int256(collateralRequired),\\n          0, // sqrtPriceLimitX96\\n          \\\"\\\"\\n        );\\n      }\\n\\n      return address(underlyingCollateral);\\n    } else {\\n      revert(\\\"the redemptions strategy did not swap to the flash swapped pool assets\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev for security reasons only whitelisted redemption strategies may be used.\\n   * Each whitelisted redemption strategy has to be checked to not be able to\\n   * call `selfdestruct` with the `delegatecall` call in `redeemCustomCollateral`\\n   */\\n  function _whitelistRedemptionStrategy(IRedemptionStrategy strategy, bool whitelisted) external onlyOwner {\\n    redemptionStrategiesWhitelist[address(strategy)] = whitelisted;\\n  }\\n\\n  /**\\n   * @dev for security reasons only whitelisted redemption strategies may be used.\\n   * Each whitelisted redemption strategy has to be checked to not be able to\\n   * call `selfdestruct` with the `delegatecall` call in `redeemCustomCollateral`\\n   */\\n  function _whitelistRedemptionStrategies(\\n    IRedemptionStrategy[] calldata strategies,\\n    bool[] calldata whitelisted\\n  ) external onlyOwner {\\n    require(\\n      strategies.length > 0 && strategies.length == whitelisted.length,\\n      \\\"list of strategies empty or whitelist does not match its length\\\"\\n    );\\n\\n    for (uint256 i = 0; i < strategies.length; i++) {\\n      redemptionStrategiesWhitelist[address(strategies[i])] = whitelisted[i];\\n    }\\n  }\\n\\n  function setExpressRelay(address _expressRelay) external onlyOwner {\\n    expressRelay = IExpressRelay(_expressRelay);\\n  }\\n\\n  function setPoolLens(address _poolLens) external onlyOwner {\\n    lens = PoolLens(_poolLens);\\n  }\\n\\n  function setHealthFactorThreshold(uint256 _healthFactorThreshold) external onlyOwner {\\n    require(_healthFactorThreshold <= 1e18, \\\"Invalid Health Factor Threshold\\\");\\n    healthFactorThreshold = _healthFactorThreshold;\\n  }\\n\\n  /**\\n   * @dev Redeem \\\"special\\\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\\n   * Public visibility because we have to call this function externally if called from a payable IonicLiquidator function (for some reason delegatecall fails when called with msg.value > 0).\\n   */\\n  function redeemCustomCollateral(\\n    IERC20Upgradeable underlyingCollateral,\\n    uint256 underlyingCollateralSeized,\\n    IRedemptionStrategy strategy,\\n    bytes memory strategyData\\n  ) private returns (IERC20Upgradeable, uint256) {\\n    require(redemptionStrategiesWhitelist[address(strategy)], \\\"only whitelisted redemption strategies can be used\\\");\\n\\n    bytes memory returndata = _functionDelegateCall(\\n      address(strategy),\\n      abi.encodeWithSelector(strategy.redeem.selector, underlyingCollateral, underlyingCollateralSeized, strategyData)\\n    );\\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\\n  }\\n\\n  function convertCustomFunds(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    IFundsConversionStrategy strategy,\\n    bytes memory strategyData\\n  ) private returns (IERC20Upgradeable, uint256) {\\n    require(redemptionStrategiesWhitelist[address(strategy)], \\\"only whitelisted redemption strategies can be used\\\");\\n\\n    bytes memory returndata = _functionDelegateCall(\\n      address(strategy),\\n      abi.encodeWithSelector(strategy.convert.selector, inputToken, inputAmount, strategyData)\\n    );\\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], but performing a delegate call.\\n   * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/contracts/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L37\\n   */\\n  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n    require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Used by `_functionDelegateCall` to verify the result of a delegate call.\\n   * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/contracts/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L45\\n   */\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x03ad15c5d4e63fbc8d4df554ce3172f4e0611843a326a8e29ec39870e5ddbd72\",\"license\":\"UNLICENSED\"},\"contracts/PoolDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol\\\";\\n\\nimport { IonicComptroller } from \\\"./compound/ComptrollerInterface.sol\\\";\\nimport { BasePriceOracle } from \\\"./oracles/BasePriceOracle.sol\\\";\\nimport { Unitroller } from \\\"./compound/Unitroller.sol\\\";\\nimport \\\"./ionic/SafeOwnableUpgradeable.sol\\\";\\nimport \\\"./ionic/DiamondExtension.sol\\\";\\n\\n/**\\n * @title PoolDirectory\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice PoolDirectory is a directory for Ionic interest rate pools.\\n */\\ncontract PoolDirectory is SafeOwnableUpgradeable {\\n  /**\\n   * @dev Initializes a deployer whitelist if desired.\\n   * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\\n   * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\\n   */\\n  function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\\n    __SafeOwnable_init(msg.sender);\\n    enforceDeployerWhitelist = _enforceDeployerWhitelist;\\n    for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\\n  }\\n\\n  /**\\n   * @dev Struct for a Ionic interest rate pool.\\n   */\\n  struct Pool {\\n    string name;\\n    address creator;\\n    address comptroller;\\n    uint256 blockPosted;\\n    uint256 timestampPosted;\\n  }\\n\\n  /**\\n   * @dev Array of Ionic interest rate pools.\\n   */\\n  Pool[] public pools;\\n\\n  /**\\n   * @dev Maps Ethereum accounts to arrays of Ionic pool indexes.\\n   */\\n  mapping(address => uint256[]) private _poolsByAccount;\\n\\n  /**\\n   * @dev Maps Ionic pool Comptroller addresses to bools indicating if they have been registered via the directory.\\n   */\\n  mapping(address => bool) public poolExists;\\n\\n  /**\\n   * @dev Emitted when a new Ionic pool is added to the directory.\\n   */\\n  event PoolRegistered(uint256 index, Pool pool);\\n\\n  /**\\n   * @dev Booleans indicating if the deployer whitelist is enforced.\\n   */\\n  bool public enforceDeployerWhitelist;\\n\\n  /**\\n   * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\\n   */\\n  mapping(address => bool) public deployerWhitelist;\\n\\n  /**\\n   * @dev Controls if the deployer whitelist is to be enforced.\\n   * @param enforce Boolean indicating if the deployer whitelist is to be enforced.\\n   */\\n  function _setDeployerWhitelistEnforcement(bool enforce) external onlyOwner {\\n    enforceDeployerWhitelist = enforce;\\n  }\\n\\n  /**\\n   * @dev Adds/removes Ethereum accounts to the deployer whitelist.\\n   * @param deployers Array of Ethereum accounts to be whitelisted.\\n   * @param status Whether to add or remove the accounts.\\n   */\\n  function _editDeployerWhitelist(address[] calldata deployers, bool status) external onlyOwner {\\n    require(deployers.length > 0, \\\"No deployers supplied.\\\");\\n    for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = status;\\n  }\\n\\n  /**\\n   * @dev Adds a new Ionic pool to the directory (without checking msg.sender).\\n   * @param name The name of the pool.\\n   * @param comptroller The pool's Comptroller proxy contract address.\\n   * @return The index of the registered Ionic pool.\\n   */\\n  function _registerPool(string memory name, address comptroller) internal returns (uint256) {\\n    require(!poolExists[comptroller], \\\"Pool already exists in the directory.\\\");\\n    require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \\\"Sender is not on deployer whitelist.\\\");\\n    require(bytes(name).length <= 100, \\\"No pool name supplied.\\\");\\n    Pool memory pool = Pool(name, msg.sender, comptroller, block.number, block.timestamp);\\n    pools.push(pool);\\n    _poolsByAccount[msg.sender].push(pools.length - 1);\\n    poolExists[comptroller] = true;\\n    emit PoolRegistered(pools.length - 1, pool);\\n    return pools.length - 1;\\n  }\\n\\n  function _deprecatePool(address comptroller) external onlyOwner {\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      if (pools[i].comptroller == comptroller) {\\n        _deprecatePool(i);\\n        break;\\n      }\\n    }\\n  }\\n\\n  function _deprecatePool(uint256 index) public onlyOwner {\\n    Pool storage ionicPool = pools[index];\\n\\n    require(ionicPool.comptroller != address(0), \\\"pool already deprecated\\\");\\n\\n    // swap with the last pool of the creator and delete\\n    uint256[] storage creatorPools = _poolsByAccount[ionicPool.creator];\\n    for (uint256 i = 0; i < creatorPools.length; i++) {\\n      if (creatorPools[i] == index) {\\n        creatorPools[i] = creatorPools[creatorPools.length - 1];\\n        creatorPools.pop();\\n        break;\\n      }\\n    }\\n\\n    // leave it to true to deny the re-registering of the same pool\\n    poolExists[ionicPool.comptroller] = true;\\n\\n    // nullify the storage\\n    ionicPool.comptroller = address(0);\\n    ionicPool.creator = address(0);\\n    ionicPool.name = \\\"\\\";\\n    ionicPool.blockPosted = 0;\\n    ionicPool.timestampPosted = 0;\\n  }\\n\\n  /**\\n   * @dev Deploys a new Ionic pool and adds to the directory.\\n   * @param name The name of the pool.\\n   * @param implementation The Comptroller implementation contract address.\\n   * @param constructorData Encoded construction data for `Unitroller constructor()`\\n   * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\\n   * @param closeFactor The pool's close factor (scaled by 1e18).\\n   * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\\n   * @param priceOracle The pool's PriceOracle contract address.\\n   * @return Index of the registered Ionic pool and the Unitroller proxy address.\\n   */\\n  function deployPool(\\n    string memory name,\\n    address implementation,\\n    bytes calldata constructorData,\\n    bool enforceWhitelist,\\n    uint256 closeFactor,\\n    uint256 liquidationIncentive,\\n    address priceOracle\\n  ) external returns (uint256, address) {\\n    // Input validation\\n    require(implementation != address(0), \\\"No Comptroller implementation contract address specified.\\\");\\n    require(priceOracle != address(0), \\\"No PriceOracle contract address specified.\\\");\\n\\n    // Deploy Unitroller using msg.sender, name, and block.number as a salt\\n    bytes memory unitrollerCreationCode = abi.encodePacked(type(Unitroller).creationCode, constructorData);\\n    address proxy = Create2Upgradeable.deploy(\\n      0,\\n      keccak256(abi.encodePacked(msg.sender, name, ++poolsCounter)),\\n      unitrollerCreationCode\\n    );\\n\\n    // Setup the pool\\n    IonicComptroller comptrollerProxy = IonicComptroller(proxy);\\n    // Set up the extensions\\n    comptrollerProxy._upgrade();\\n\\n    // Set pool parameters\\n    require(comptrollerProxy._setCloseFactor(closeFactor) == 0, \\\"Failed to set pool close factor.\\\");\\n    require(\\n      comptrollerProxy._setLiquidationIncentive(liquidationIncentive) == 0,\\n      \\\"Failed to set pool liquidation incentive.\\\"\\n    );\\n    require(comptrollerProxy._setPriceOracle(BasePriceOracle(priceOracle)) == 0, \\\"Failed to set pool price oracle.\\\");\\n\\n    // Whitelist\\n    if (enforceWhitelist)\\n      require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \\\"Failed to enforce supplier/borrower whitelist.\\\");\\n\\n    // Make msg.sender the admin\\n    require(comptrollerProxy._setPendingAdmin(msg.sender) == 0, \\\"Failed to set pending admin on Unitroller.\\\");\\n\\n    // Register the pool with this PoolDirectory\\n    return (_registerPool(name, proxy), proxy);\\n  }\\n\\n  /**\\n   * @notice Returns `ids` and directory information of all non-deprecated Ionic pools.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getActivePools() public view returns (uint256[] memory, Pool[] memory) {\\n    uint256 count = 0;\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      if (pools[i].comptroller != address(0)) count++;\\n    }\\n\\n    Pool[] memory activePools = new Pool[](count);\\n    uint256[] memory poolIds = new uint256[](count);\\n\\n    uint256 index = 0;\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      if (pools[i].comptroller != address(0)) {\\n        poolIds[index] = i;\\n        activePools[index] = pools[i];\\n        index++;\\n      }\\n    }\\n\\n    return (poolIds, activePools);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all Ionic pools' data.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getAllPools() public view returns (Pool[] memory) {\\n    uint256 count = 0;\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      if (pools[i].comptroller != address(0)) count++;\\n    }\\n\\n    Pool[] memory result = new Pool[](count);\\n\\n    uint256 index = 0;\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      if (pools[i].comptroller != address(0)) {\\n        result[index++] = pools[i];\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all public Ionic pool indexes and data.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getPublicPools() external view returns (uint256[] memory, Pool[] memory) {\\n    uint256 arrayLength = 0;\\n\\n    (, Pool[] memory activePools) = getActivePools();\\n    for (uint256 i = 0; i < activePools.length; i++) {\\n      try IonicComptroller(activePools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n        if (enforceWhitelist) continue;\\n      } catch {}\\n\\n      arrayLength++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](arrayLength);\\n    Pool[] memory publicPools = new Pool[](arrayLength);\\n    uint256 index = 0;\\n\\n    for (uint256 i = 0; i < activePools.length; i++) {\\n      try IonicComptroller(activePools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\\n        if (enforceWhitelist) continue;\\n      } catch {}\\n\\n      indexes[index] = i;\\n      publicPools[index] = activePools[i];\\n      index++;\\n    }\\n\\n    return (indexes, publicPools);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all public Ionic pool indexes and data.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getPoolsOfUser(address user) external view returns (uint256[] memory, Pool[] memory) {\\n    uint256 arrayLength = 0;\\n\\n    (, Pool[] memory activePools) = getActivePools();\\n    for (uint256 i = 0; i < activePools.length; i++) {\\n      try IonicComptroller(activePools[i].comptroller).isUserOfPool(user) returns (bool isUsing) {\\n        if (!isUsing) continue;\\n      } catch {}\\n\\n      arrayLength++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](arrayLength);\\n    Pool[] memory poolsOfUser = new Pool[](arrayLength);\\n    uint256 index = 0;\\n\\n    for (uint256 i = 0; i < activePools.length; i++) {\\n      try IonicComptroller(activePools[i].comptroller).isUserOfPool(user) returns (bool isUsing) {\\n        if (!isUsing) continue;\\n      } catch {}\\n\\n      indexes[index] = i;\\n      poolsOfUser[index] = activePools[i];\\n      index++;\\n    }\\n\\n    return (indexes, poolsOfUser);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of Ionic pool indexes and data created by `account`.\\n   */\\n  function getPoolsByAccount(address account) external view returns (uint256[] memory, Pool[] memory) {\\n    uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\\n    Pool[] memory accountPools = new Pool[](_poolsByAccount[account].length);\\n    (, Pool[] memory activePools) = getActivePools();\\n\\n    for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\\n      indexes[i] = _poolsByAccount[account][i];\\n      accountPools[i] = activePools[_poolsByAccount[account][i]];\\n    }\\n\\n    return (indexes, accountPools);\\n  }\\n\\n  /**\\n   * @notice Modify existing Ionic pool name.\\n   */\\n  function setPoolName(uint256 index, string calldata name) external {\\n    IonicComptroller _comptroller = IonicComptroller(pools[index].comptroller);\\n    require(\\n      (msg.sender == _comptroller.admin() && _comptroller.adminHasRights()) || msg.sender == owner(),\\n      \\\"!permission\\\"\\n    );\\n    pools[index].name = name;\\n  }\\n\\n  /**\\n   * @dev Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\\n   */\\n  mapping(address => bool) public adminWhitelist;\\n\\n  /**\\n   * @dev used as salt for the creation of new pools\\n   */\\n  uint256 public poolsCounter;\\n\\n  /**\\n   * @dev Event emitted when the admin whitelist is updated.\\n   */\\n  event AdminWhitelistUpdated(address[] admins, bool status);\\n\\n  /**\\n   * @dev Adds/removes Ethereum accounts to the admin whitelist.\\n   * @param admins Array of Ethereum accounts to be whitelisted.\\n   * @param status Whether to add or remove the accounts.\\n   */\\n  function _editAdminWhitelist(address[] calldata admins, bool status) external onlyOwner {\\n    require(admins.length > 0, \\\"No admins supplied.\\\");\\n    for (uint256 i = 0; i < admins.length; i++) adminWhitelist[admins[i]] = status;\\n    emit AdminWhitelistUpdated(admins, status);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all Ionic pool indexes and data with whitelisted admins.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getPublicPoolsByVerification(bool whitelistedAdmin) external view returns (uint256[] memory, Pool[] memory) {\\n    uint256 arrayLength = 0;\\n\\n    (, Pool[] memory activePools) = getActivePools();\\n    for (uint256 i = 0; i < activePools.length; i++) {\\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\\n\\n      try comptroller.admin() returns (address admin) {\\n        if (whitelistedAdmin != adminWhitelist[admin]) continue;\\n      } catch {}\\n\\n      arrayLength++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](arrayLength);\\n    Pool[] memory publicPools = new Pool[](arrayLength);\\n    uint256 index = 0;\\n\\n    for (uint256 i = 0; i < activePools.length; i++) {\\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\\n\\n      try comptroller.admin() returns (address admin) {\\n        if (whitelistedAdmin != adminWhitelist[admin]) continue;\\n      } catch {}\\n\\n      indexes[index] = i;\\n      publicPools[index] = activePools[i];\\n      index++;\\n    }\\n\\n    return (indexes, publicPools);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all verified Ionic pool indexes and data for which the account is whitelisted\\n   * @param account who is whitelisted in the returned verified whitelist-enabled pools.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getVerifiedPoolsOfWhitelistedAccount(address account)\\n    external\\n    view\\n    returns (uint256[] memory, Pool[] memory)\\n  {\\n    uint256 arrayLength = 0;\\n    (, Pool[] memory activePools) = getActivePools();\\n    for (uint256 i = 0; i < activePools.length; i++) {\\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\\n\\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\n        if (!enforceWhitelist || !comptroller.whitelist(account)) continue;\\n      } catch {}\\n\\n      arrayLength++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](arrayLength);\\n    Pool[] memory accountWhitelistedPools = new Pool[](arrayLength);\\n    uint256 index = 0;\\n\\n    for (uint256 i = 0; i < activePools.length; i++) {\\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\\n        if (!enforceWhitelist || !comptroller.whitelist(account)) continue;\\n      } catch {}\\n\\n      indexes[index] = i;\\n      accountWhitelistedPools[index] = activePools[i];\\n      index++;\\n    }\\n\\n    return (indexes, accountWhitelistedPools);\\n  }\\n}\\n\",\"keccak256\":\"0xd3d28cd044a0205a86f0c2d82021a36018ec4b0e95f72064c92bcad99f84f6c8\",\"license\":\"UNLICENSED\"},\"contracts/PoolLens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport { IonicComptroller } from \\\"./compound/ComptrollerInterface.sol\\\";\\nimport { BasePriceOracle } from \\\"./oracles/BasePriceOracle.sol\\\";\\nimport { ICErc20 } from \\\"./compound/CTokenInterfaces.sol\\\";\\n\\nimport { PoolDirectory } from \\\"./PoolDirectory.sol\\\";\\nimport { MasterPriceOracle } from \\\"./oracles/MasterPriceOracle.sol\\\";\\n\\n/**\\n * @title PoolLens\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n * @notice PoolLens returns data on Ionic interest rate pools in mass for viewing by dApps, bots, etc.\\n */\\ncontract PoolLens is Initializable {\\n  error ComptrollerError(uint256 errCode);\\n\\n  /**\\n   * @notice Initialize the `PoolDirectory` contract object.\\n   * @param _directory The PoolDirectory\\n   * @param _name Name for the nativeToken\\n   * @param _symbol Symbol for the nativeToken\\n   * @param _hardcodedAddresses Underlying token addresses for a token like maker which are DSToken and/or use bytes32 for `symbol`\\n   * @param _hardcodedNames Harcoded name for these tokens\\n   * @param _hardcodedSymbols Harcoded symbol for these tokens\\n   * @param _uniswapLPTokenNames Harcoded names for underlying uniswap LpToken\\n   * @param _uniswapLPTokenSymbols Harcoded symbols for underlying uniswap LpToken\\n   * @param _uniswapLPTokenDisplayNames Harcoded display names for underlying uniswap LpToken\\n   */\\n  function initialize(\\n    PoolDirectory _directory,\\n    string memory _name,\\n    string memory _symbol,\\n    address[] memory _hardcodedAddresses,\\n    string[] memory _hardcodedNames,\\n    string[] memory _hardcodedSymbols,\\n    string[] memory _uniswapLPTokenNames,\\n    string[] memory _uniswapLPTokenSymbols,\\n    string[] memory _uniswapLPTokenDisplayNames\\n  ) public initializer {\\n    require(address(_directory) != address(0), \\\"PoolDirectory instance cannot be the zero address.\\\");\\n    require(\\n      _hardcodedAddresses.length == _hardcodedNames.length && _hardcodedAddresses.length == _hardcodedSymbols.length,\\n      \\\"Hardcoded addresses lengths not equal.\\\"\\n    );\\n    require(\\n      _uniswapLPTokenNames.length == _uniswapLPTokenSymbols.length &&\\n        _uniswapLPTokenNames.length == _uniswapLPTokenDisplayNames.length,\\n      \\\"Uniswap LP token names lengths not equal.\\\"\\n    );\\n\\n    directory = _directory;\\n    name = _name;\\n    symbol = _symbol;\\n    for (uint256 i = 0; i < _hardcodedAddresses.length; i++) {\\n      hardcoded[_hardcodedAddresses[i]] = TokenData({ name: _hardcodedNames[i], symbol: _hardcodedSymbols[i] });\\n    }\\n\\n    for (uint256 i = 0; i < _uniswapLPTokenNames.length; i++) {\\n      uniswapData.push(\\n        UniswapData({\\n          name: _uniswapLPTokenNames[i],\\n          symbol: _uniswapLPTokenSymbols[i],\\n          displayName: _uniswapLPTokenDisplayNames[i]\\n        })\\n      );\\n    }\\n  }\\n\\n  string public name;\\n  string public symbol;\\n\\n  struct TokenData {\\n    string name;\\n    string symbol;\\n  }\\n  mapping(address => TokenData) hardcoded;\\n\\n  struct UniswapData {\\n    string name; // ie \\\"Uniswap V2\\\" or \\\"SushiSwap LP Token\\\"\\n    string symbol; // ie \\\"UNI-V2\\\" or \\\"SLP\\\"\\n    string displayName; // ie \\\"SushiSwap\\\" or \\\"Uniswap\\\"\\n  }\\n  UniswapData[] uniswapData;\\n\\n  /**\\n   * @notice `PoolDirectory` contract object.\\n   */\\n  PoolDirectory public directory;\\n\\n  /**\\n   * @dev Struct for Ionic pool summary data.\\n   */\\n  struct IonicPoolData {\\n    uint256 totalSupply;\\n    uint256 totalBorrow;\\n    address[] underlyingTokens;\\n    string[] underlyingSymbols;\\n    bool whitelistedAdmin;\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all public Ionic pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   */\\n  function getPublicPoolsWithData()\\n    external\\n    returns (uint256[] memory, PoolDirectory.Pool[] memory, IonicPoolData[] memory, bool[] memory)\\n  {\\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory publicPools) = directory.getPublicPools();\\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(publicPools);\\n    return (indexes, publicPools, data, errored);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of all whitelisted public Ionic pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   */\\n  function getPublicPoolsByVerificationWithData(\\n    bool whitelistedAdmin\\n  ) external returns (uint256[] memory, PoolDirectory.Pool[] memory, IonicPoolData[] memory, bool[] memory) {\\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory publicPools) = directory.getPublicPoolsByVerification(\\n      whitelistedAdmin\\n    );\\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(publicPools);\\n    return (indexes, publicPools, data, errored);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of the indexes of Ionic pools created by `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   */\\n  function getPoolsByAccountWithData(\\n    address account\\n  ) external returns (uint256[] memory, PoolDirectory.Pool[] memory, IonicPoolData[] memory, bool[] memory) {\\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory accountPools) = directory.getPoolsByAccount(account);\\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(accountPools);\\n    return (indexes, accountPools, data, errored);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of the indexes of Ionic pools used by `user`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   */\\n  function getPoolsOIonicrWithData(\\n    address user\\n  ) external returns (uint256[] memory, PoolDirectory.Pool[] memory, IonicPoolData[] memory, bool[] memory) {\\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory userPools) = directory.getPoolsOfUser(user);\\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(userPools);\\n    return (indexes, userPools, data, errored);\\n  }\\n\\n  /**\\n   * @notice Internal function returning arrays of requested Ionic pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   */\\n  function getPoolsData(PoolDirectory.Pool[] memory pools) internal returns (IonicPoolData[] memory, bool[] memory) {\\n    IonicPoolData[] memory data = new IonicPoolData[](pools.length);\\n    bool[] memory errored = new bool[](pools.length);\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      try this.getPoolSummary(IonicComptroller(pools[i].comptroller)) returns (\\n        uint256 _totalSupply,\\n        uint256 _totalBorrow,\\n        address[] memory _underlyingTokens,\\n        string[] memory _underlyingSymbols,\\n        bool _whitelistedAdmin\\n      ) {\\n        data[i] = IonicPoolData(_totalSupply, _totalBorrow, _underlyingTokens, _underlyingSymbols, _whitelistedAdmin);\\n      } catch {\\n        errored[i] = true;\\n      }\\n    }\\n\\n    return (data, errored);\\n  }\\n\\n  /**\\n   * @notice Returns total supply balance (in ETH), total borrow balance (in ETH), underlying token addresses, and underlying token symbols of a Ionic pool.\\n   */\\n  function getPoolSummary(\\n    IonicComptroller comptroller\\n  ) external returns (uint256, uint256, address[] memory, string[] memory, bool) {\\n    uint256 totalBorrow = 0;\\n    uint256 totalSupply = 0;\\n    ICErc20[] memory cTokens = comptroller.getAllMarkets();\\n    address[] memory underlyingTokens = new address[](cTokens.length);\\n    string[] memory underlyingSymbols = new string[](cTokens.length);\\n    BasePriceOracle oracle = comptroller.oracle();\\n\\n    for (uint256 i = 0; i < cTokens.length; i++) {\\n      ICErc20 cToken = cTokens[i];\\n      (bool isListed, ) = comptroller.markets(address(cToken));\\n      if (!isListed) continue;\\n      cToken.accrueInterest();\\n      uint256 assetTotalBorrow = cToken.totalBorrowsCurrent();\\n      uint256 assetTotalSupply = cToken.getCash() +\\n        assetTotalBorrow -\\n        (cToken.totalReserves() + cToken.totalAdminFees() + cToken.totalIonicFees());\\n      uint256 underlyingPrice = oracle.getUnderlyingPrice(cToken);\\n      totalBorrow = totalBorrow + (assetTotalBorrow * underlyingPrice) / 1e18;\\n      totalSupply = totalSupply + (assetTotalSupply * underlyingPrice) / 1e18;\\n\\n      underlyingTokens[i] = ICErc20(address(cToken)).underlying();\\n      (, underlyingSymbols[i]) = getTokenNameAndSymbol(underlyingTokens[i]);\\n    }\\n\\n    bool whitelistedAdmin = directory.adminWhitelist(comptroller.admin());\\n    return (totalSupply, totalBorrow, underlyingTokens, underlyingSymbols, whitelistedAdmin);\\n  }\\n\\n  /**\\n   * @dev Struct for a Ionic pool asset.\\n   */\\n  struct PoolAsset {\\n    address cToken;\\n    address underlyingToken;\\n    string underlyingName;\\n    string underlyingSymbol;\\n    uint256 underlyingDecimals;\\n    uint256 underlyingBalance;\\n    uint256 supplyRatePerBlock;\\n    uint256 borrowRatePerBlock;\\n    uint256 totalSupply;\\n    uint256 totalBorrow;\\n    uint256 supplyBalance;\\n    uint256 borrowBalance;\\n    uint256 liquidity;\\n    bool membership;\\n    uint256 exchangeRate; // Price of cTokens in terms of underlying tokens\\n    uint256 underlyingPrice; // Price of underlying tokens in ETH (scaled by 1e18)\\n    address oracle;\\n    uint256 collateralFactor;\\n    uint256 reserveFactor;\\n    uint256 adminFee;\\n    uint256 ionicFee;\\n    bool borrowGuardianPaused;\\n    bool mintGuardianPaused;\\n  }\\n\\n  /**\\n   * @notice Returns data on the specified assets of the specified Ionic pool.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   * @param comptroller The Comptroller proxy contract address of the Ionic pool.\\n   * @param cTokens The cToken contract addresses of the assets to query.\\n   * @param user The user for which to get account data.\\n   * @return An array of Ionic pool assets.\\n   */\\n  function getPoolAssetsWithData(\\n    IonicComptroller comptroller,\\n    ICErc20[] memory cTokens,\\n    address user\\n  ) internal returns (PoolAsset[] memory) {\\n    uint256 arrayLength = 0;\\n\\n    for (uint256 i = 0; i < cTokens.length; i++) {\\n      (bool isListed, ) = comptroller.markets(address(cTokens[i]));\\n      if (isListed) arrayLength++;\\n    }\\n\\n    PoolAsset[] memory detailedAssets = new PoolAsset[](arrayLength);\\n    uint256 index = 0;\\n    BasePriceOracle oracle = BasePriceOracle(address(comptroller.oracle()));\\n\\n    for (uint256 i = 0; i < cTokens.length; i++) {\\n      // Check if market is listed and get collateral factor\\n      (bool isListed, uint256 collateralFactorMantissa) = comptroller.markets(address(cTokens[i]));\\n      if (!isListed) continue;\\n\\n      // Start adding data to PoolAsset\\n      PoolAsset memory asset;\\n      ICErc20 cToken = cTokens[i];\\n      asset.cToken = address(cToken);\\n\\n      cToken.accrueInterest();\\n\\n      // Get underlying asset data\\n      asset.underlyingToken = ICErc20(address(cToken)).underlying();\\n      ERC20Upgradeable underlying = ERC20Upgradeable(asset.underlyingToken);\\n      (asset.underlyingName, asset.underlyingSymbol) = getTokenNameAndSymbol(asset.underlyingToken);\\n      asset.underlyingDecimals = underlying.decimals();\\n      asset.underlyingBalance = underlying.balanceOf(user);\\n\\n      // Get cToken data\\n      asset.supplyRatePerBlock = cToken.supplyRatePerBlock();\\n      asset.borrowRatePerBlock = cToken.borrowRatePerBlock();\\n      asset.liquidity = cToken.getCash();\\n      asset.totalBorrow = cToken.totalBorrowsCurrent();\\n      asset.totalSupply =\\n        asset.liquidity +\\n        asset.totalBorrow -\\n        (cToken.totalReserves() + cToken.totalAdminFees() + cToken.totalIonicFees());\\n      asset.supplyBalance = cToken.balanceOfUnderlying(user);\\n      asset.borrowBalance = cToken.borrowBalanceCurrent(user);\\n      asset.membership = comptroller.checkMembership(user, cToken);\\n      asset.exchangeRate = cToken.exchangeRateCurrent(); // We would use exchangeRateCurrent but we already accrue interest above\\n      asset.underlyingPrice = oracle.price(asset.underlyingToken);\\n\\n      // Get oracle for this cToken\\n      asset.oracle = address(oracle);\\n\\n      try MasterPriceOracle(asset.oracle).oracles(asset.underlyingToken) returns (BasePriceOracle _oracle) {\\n        asset.oracle = address(_oracle);\\n      } catch {}\\n\\n      // More cToken data\\n      asset.collateralFactor = collateralFactorMantissa;\\n      asset.reserveFactor = cToken.reserveFactorMantissa();\\n      asset.adminFee = cToken.adminFeeMantissa();\\n      asset.ionicFee = cToken.ionicFeeMantissa();\\n      asset.borrowGuardianPaused = comptroller.borrowGuardianPaused(address(cToken));\\n      asset.mintGuardianPaused = comptroller.mintGuardianPaused(address(cToken));\\n\\n      // Add to assets array and increment index\\n      detailedAssets[index] = asset;\\n      index++;\\n    }\\n\\n    return (detailedAssets);\\n  }\\n\\n  function getBorrowCapsPerCollateral(\\n    ICErc20 borrowedAsset,\\n    IonicComptroller comptroller\\n  )\\n    internal\\n    view\\n    returns (\\n      address[] memory collateral,\\n      uint256[] memory borrowCapsAgainstCollateral,\\n      bool[] memory borrowingBlacklistedAgainstCollateral\\n    )\\n  {\\n    ICErc20[] memory poolMarkets = comptroller.getAllMarkets();\\n\\n    collateral = new address[](poolMarkets.length);\\n    borrowCapsAgainstCollateral = new uint256[](poolMarkets.length);\\n    borrowingBlacklistedAgainstCollateral = new bool[](poolMarkets.length);\\n\\n    for (uint256 i = 0; i < poolMarkets.length; i++) {\\n      address collateralAddress = address(poolMarkets[i]);\\n      if (collateralAddress != address(borrowedAsset)) {\\n        collateral[i] = collateralAddress;\\n        borrowCapsAgainstCollateral[i] = comptroller.borrowCapForCollateral(address(borrowedAsset), collateralAddress);\\n        borrowingBlacklistedAgainstCollateral[i] = comptroller.borrowingAgainstCollateralBlacklist(\\n          address(borrowedAsset),\\n          collateralAddress\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the `name` and `symbol` of `token`.\\n   * Supports Uniswap V2 and SushiSwap LP tokens as well as MKR.\\n   * @param token An ERC20 token contract object.\\n   * @return The `name` and `symbol`.\\n   */\\n  function getTokenNameAndSymbol(address token) internal view returns (string memory, string memory) {\\n    // i.e. MKR is a DSToken and uses bytes32\\n    if (bytes(hardcoded[token].symbol).length != 0) {\\n      return (hardcoded[token].name, hardcoded[token].symbol);\\n    }\\n\\n    // Get name and symbol from token contract\\n    ERC20Upgradeable tokenContract = ERC20Upgradeable(token);\\n    string memory _name = tokenContract.name();\\n    string memory _symbol = tokenContract.symbol();\\n\\n    return (_name, _symbol);\\n  }\\n\\n  /**\\n   * @notice Returns the assets of the specified Ionic pool.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   * @param comptroller The Comptroller proxy contract of the Ionic pool.\\n   * @return An array of Ionic pool assets.\\n   */\\n  function getPoolAssetsWithData(IonicComptroller comptroller) external returns (PoolAsset[] memory) {\\n    return getPoolAssetsWithData(comptroller, comptroller.getAllMarkets(), msg.sender);\\n  }\\n\\n  /**\\n   * @dev Struct for a Ionic pool user.\\n   */\\n  struct IonicPoolUser {\\n    address account;\\n    uint256 totalBorrow;\\n    uint256 totalCollateral;\\n    uint256 health;\\n  }\\n\\n  /**\\n   * @notice Returns arrays of PoolAsset for a specific user\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getPoolAssetsByUser(IonicComptroller comptroller, address user) public returns (PoolAsset[] memory) {\\n    PoolAsset[] memory assets = getPoolAssetsWithData(comptroller, comptroller.getAssetsIn(user), user);\\n    return assets;\\n  }\\n\\n  /**\\n   * @notice returns the total supply cap for each asset in the pool\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getSupplyCapsForPool(IonicComptroller comptroller) public view returns (address[] memory, uint256[] memory) {\\n    ICErc20[] memory poolMarkets = comptroller.getAllMarkets();\\n\\n    address[] memory assets = new address[](poolMarkets.length);\\n    uint256[] memory supplyCapsPerAsset = new uint256[](poolMarkets.length);\\n    for (uint256 i = 0; i < poolMarkets.length; i++) {\\n      assets[i] = address(poolMarkets[i]);\\n      supplyCapsPerAsset[i] = comptroller.effectiveSupplyCaps(assets[i]);\\n    }\\n\\n    return (assets, supplyCapsPerAsset);\\n  }\\n\\n  /**\\n   * @notice returns the total supply cap for each asset in the pool and the total non-whitelist supplied assets\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getSupplyCapsDataForPool(\\n    IonicComptroller comptroller\\n  ) public view returns (address[] memory, uint256[] memory, uint256[] memory) {\\n    ICErc20[] memory poolMarkets = comptroller.getAllMarkets();\\n\\n    address[] memory assets = new address[](poolMarkets.length);\\n    uint256[] memory supplyCapsPerAsset = new uint256[](poolMarkets.length);\\n    uint256[] memory nonWhitelistedTotalSupply = new uint256[](poolMarkets.length);\\n    for (uint256 i = 0; i < poolMarkets.length; i++) {\\n      assets[i] = address(poolMarkets[i]);\\n      supplyCapsPerAsset[i] = comptroller.effectiveSupplyCaps(assets[i]);\\n      uint256 assetTotalSupplied = poolMarkets[i].getTotalUnderlyingSupplied();\\n      uint256 whitelistedSuppliersSupply = comptroller.getWhitelistedSuppliersSupply(assets[i]);\\n      if (whitelistedSuppliersSupply >= assetTotalSupplied) nonWhitelistedTotalSupply[i] = 0;\\n      else nonWhitelistedTotalSupply[i] = assetTotalSupplied - whitelistedSuppliersSupply;\\n    }\\n\\n    return (assets, supplyCapsPerAsset, nonWhitelistedTotalSupply);\\n  }\\n\\n  /**\\n   * @notice returns the total borrow cap and the per collateral borrowing cap/blacklist for the asset\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getBorrowCapsForAsset(\\n    ICErc20 asset\\n  )\\n    public\\n    view\\n    returns (\\n      address[] memory collateral,\\n      uint256[] memory borrowCapsPerCollateral,\\n      bool[] memory collateralBlacklisted,\\n      uint256 totalBorrowCap\\n    )\\n  {\\n    IonicComptroller comptroller = IonicComptroller(asset.comptroller());\\n    (collateral, borrowCapsPerCollateral, collateralBlacklisted) = getBorrowCapsPerCollateral(asset, comptroller);\\n    totalBorrowCap = comptroller.effectiveBorrowCaps(address(asset));\\n  }\\n\\n  /**\\n   * @notice returns the total borrow cap, the per collateral borrowing cap/blacklist for the asset and the total non-whitelist borrows\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getBorrowCapsDataForAsset(\\n    ICErc20 asset\\n  )\\n    public\\n    view\\n    returns (\\n      address[] memory collateral,\\n      uint256[] memory borrowCapsPerCollateral,\\n      bool[] memory collateralBlacklisted,\\n      uint256 totalBorrowCap,\\n      uint256 nonWhitelistedTotalBorrows\\n    )\\n  {\\n    IonicComptroller comptroller = IonicComptroller(asset.comptroller());\\n    (collateral, borrowCapsPerCollateral, collateralBlacklisted) = getBorrowCapsPerCollateral(asset, comptroller);\\n    totalBorrowCap = comptroller.effectiveBorrowCaps(address(asset));\\n    uint256 totalBorrows = asset.totalBorrowsCurrent();\\n    uint256 whitelistedBorrowersBorrows = comptroller.getWhitelistedBorrowersBorrows(address(asset));\\n    if (whitelistedBorrowersBorrows >= totalBorrows) nonWhitelistedTotalBorrows = 0;\\n    else nonWhitelistedTotalBorrows = totalBorrows - whitelistedBorrowersBorrows;\\n  }\\n\\n  /**\\n   * @notice Returns arrays of Ionic pool indexes and data with a whitelist containing `account`.\\n   * Note that the whitelist does not have to be enforced.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   */\\n  function getWhitelistedPoolsByAccount(\\n    address account\\n  ) public view returns (uint256[] memory, PoolDirectory.Pool[] memory) {\\n    (, PoolDirectory.Pool[] memory pools) = directory.getActivePools();\\n    uint256 arrayLength = 0;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\\n\\n      if (comptroller.whitelist(account)) arrayLength++;\\n    }\\n\\n    uint256[] memory indexes = new uint256[](arrayLength);\\n    PoolDirectory.Pool[] memory accountPools = new PoolDirectory.Pool[](arrayLength);\\n    uint256 index = 0;\\n\\n    for (uint256 i = 0; i < pools.length; i++) {\\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\\n\\n      if (comptroller.whitelist(account)) {\\n        indexes[index] = i;\\n        accountPools[index] = pools[i];\\n        index++;\\n        break;\\n      }\\n    }\\n\\n    return (indexes, accountPools);\\n  }\\n\\n  /**\\n   * @notice Returns arrays of the indexes of Ionic pools with a whitelist containing `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\\n   */\\n  function getWhitelistedPoolsByAccountWithData(\\n    address account\\n  ) external returns (uint256[] memory, PoolDirectory.Pool[] memory, IonicPoolData[] memory, bool[] memory) {\\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory accountPools) = getWhitelistedPoolsByAccount(account);\\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(accountPools);\\n    return (indexes, accountPools, data, errored);\\n  }\\n\\n  function getHealthFactor(address user, IonicComptroller pool) external view returns (uint256) {\\n    return getHealthFactorHypothetical(pool, user, address(0), 0, 0, 0);\\n  }\\n\\n  function getHealthFactorHypothetical(\\n    IonicComptroller pool,\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount,\\n    uint256 repayAmount\\n  ) public view returns (uint256) {\\n    (uint256 err, uint256 collateralValue, uint256 liquidity, uint256 shortfall) = pool.getHypotheticalAccountLiquidity(\\n      account,\\n      cTokenModify,\\n      redeemTokens,\\n      borrowAmount,\\n      repayAmount\\n    );\\n\\n    if (err != 0) revert ComptrollerError(err);\\n\\n    if (shortfall > 0) {\\n      // HF < 1.0\\n      return (collateralValue * 1e18) / (collateralValue + shortfall);\\n    } else {\\n      // HF >= 1.0\\n      if (collateralValue <= liquidity) return type(uint256).max;\\n      else return (collateralValue * 1e18) / (collateralValue - liquidity);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x62702fad5f5f2823af735e25755839dc24bd1b16a2d2be82395a07061a055461\",\"license\":\"UNLICENSED\"},\"contracts/adrastia/PrudentiaLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nlibrary PrudentiaLib {\\n  struct PrudentiaConfig {\\n    address controller; // Adrastia Prudentia controller address\\n    uint8 offset; // Offset for delayed rate activation\\n    int8 decimalShift; // Positive values scale the rate up (in powers of 10), negative values scale the rate down\\n  }\\n}\\n\",\"keccak256\":\"0x8cc50f1a5dab30e0c205b0bba5f58c18eda9ebf01c661895c8f40678b86bf31f\",\"license\":\"UNLICENSED\"},\"contracts/compound/CErc20Delegate.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CToken.sol\\\";\\n\\n/**\\n * @title Compound's CErc20Delegate Contract\\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\\n * @author Compound\\n */\\ncontract CErc20Delegate is CErc20 {\\n  function _getExtensionFunctions() public pure virtual override returns (bytes4[] memory functionSelectors) {\\n    uint8 fnsCount = 3;\\n\\n    bytes4[] memory superFunctionSelectors = super._getExtensionFunctions();\\n    functionSelectors = new bytes4[](superFunctionSelectors.length + fnsCount);\\n\\n    for (uint256 i = 0; i < superFunctionSelectors.length; i++) {\\n      functionSelectors[i] = superFunctionSelectors[i];\\n    }\\n\\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this.contractType.selector;\\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this.delegateType.selector;\\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this._becomeImplementation.selector;\\n\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n  }\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   */\\n  function _becomeImplementation(bytes memory) public virtual override {\\n    require(msg.sender == address(this) || hasAdminRights(), \\\"!self || !admin\\\");\\n  }\\n\\n  function delegateType() public pure virtual override returns (uint8) {\\n    return 1;\\n  }\\n\\n  function contractType() external pure virtual override returns (string memory) {\\n    return \\\"CErc20Delegate\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x64f72d66ae0f29c8400dd922cf2d5f453c1de98a72d7041fa8b39ec2aba25402\",\"license\":\"UNLICENSED\"},\"contracts/compound/CErc20PluginDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CErc20Delegate.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./IERC4626.sol\\\";\\nimport \\\"../external/uniswap/IUniswapV2Pair.sol\\\";\\n\\n/**\\n * @title Rari's CErc20Plugin's Contract\\n * @notice CToken which outsources token logic to a plugin\\n * @author Joey Santoro\\n *\\n * CErc20PluginDelegate deposits and withdraws from a plugin contract\\n * It is also capable of delegating reward functionality to a PluginRewardsDistributor\\n */\\ncontract CErc20PluginDelegate is CErc20Delegate {\\n  event NewPluginImplementation(address oldImpl, address newImpl);\\n\\n  /**\\n   * @notice Plugin address\\n   */\\n  IERC4626 public plugin;\\n\\n  function _getExtensionFunctions() public pure virtual override returns (bytes4[] memory functionSelectors) {\\n    uint8 fnsCount = 2;\\n\\n    bytes4[] memory superFunctionSelectors = super._getExtensionFunctions();\\n    functionSelectors = new bytes4[](superFunctionSelectors.length + fnsCount);\\n\\n    for (uint256 i = 0; i < superFunctionSelectors.length; i++) {\\n      functionSelectors[i] = superFunctionSelectors[i];\\n    }\\n\\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this.plugin.selector;\\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this._updatePlugin.selector;\\n\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n  }\\n\\n  /**\\n   * @notice Delegate interface to become the implementation\\n   * @param data The encoded arguments for becoming\\n   */\\n  function _becomeImplementation(bytes memory data) public virtual override {\\n    require(msg.sender == address(this) || hasAdminRights(), \\\"only self and admins can call _becomeImplementation\\\");\\n\\n    address _plugin = abi.decode(data, (address));\\n\\n    if (_plugin == address(0) && address(plugin) != address(0)) {\\n      // if no new plugin address is given, use the latest implementation\\n      _plugin = IFeeDistributor(ionicAdmin).latestPluginImplementation(address(plugin));\\n    }\\n\\n    if (_plugin != address(0) && _plugin != address(plugin)) {\\n      _updatePlugin(_plugin);\\n    }\\n  }\\n\\n  /**\\n   * @notice Update the plugin implementation to a whitelisted implementation\\n   * @param _plugin The address of the plugin implementation to use\\n   */\\n  function _updatePlugin(address _plugin) public {\\n    require(msg.sender == address(this) || hasAdminRights(), \\\"only self and admins can call _updatePlugin\\\");\\n\\n    address oldImplementation = address(plugin) != address(0) ? address(plugin) : _plugin;\\n\\n    if (address(plugin) != address(0) && plugin.balanceOf(address(this)) != 0) {\\n      plugin.redeem(plugin.balanceOf(address(this)), address(this), address(this));\\n    }\\n\\n    plugin = IERC4626(_plugin);\\n\\n    EIP20Interface(underlying).approve(_plugin, type(uint256).max);\\n\\n    uint256 amount = EIP20Interface(underlying).balanceOf(address(this));\\n    if (amount != 0) {\\n      deposit(amount);\\n    }\\n\\n    emit NewPluginImplementation(oldImplementation, _plugin);\\n  }\\n\\n  /*** CToken Overrides ***/\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of the plugin in terms of the underlying\\n   * @return The quantity of underlying tokens owned by this contract\\n   */\\n  function getCashInternal() internal view override returns (uint256) {\\n    return plugin.previewRedeem(plugin.balanceOf(address(this)));\\n  }\\n\\n  /**\\n   * @notice Transfer the underlying to the cToken and trigger a deposit\\n   * @param from Address to transfer funds from\\n   * @param amount Amount of underlying to transfer\\n   * @return The actual amount that is transferred\\n   */\\n  function doTransferIn(address from, uint256 amount) internal override returns (uint256) {\\n    // Perform the EIP-20 transfer in\\n    require(EIP20Interface(underlying).transferFrom(from, address(this), amount), \\\"send\\\");\\n\\n    deposit(amount);\\n    return amount;\\n  }\\n\\n  function deposit(uint256 amount) internal {\\n    plugin.deposit(amount, address(this));\\n  }\\n\\n  /**\\n   * @notice Transfer the underlying from plugin to destination\\n   * @param to Address to transfer funds to\\n   * @param amount Amount of underlying to transfer\\n   */\\n  function doTransferOut(address to, uint256 amount) internal override {\\n    plugin.withdraw(amount, to, address(this));\\n  }\\n\\n  function delegateType() public pure virtual override returns (uint8) {\\n    return 2;\\n  }\\n\\n  function contractType() external pure virtual override returns (string memory) {\\n    return \\\"CErc20PluginDelegate\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x095cc54097ac06a9b6232222c5197df72c4cc4a0f2c69261bf22ebba2dfead3f\",\"license\":\"UNLICENSED\"},\"contracts/compound/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IonicComptroller } from \\\"./ComptrollerInterface.sol\\\";\\nimport { CTokenSecondExtensionBase, ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { TokenErrorReporter } from \\\"./ErrorReporter.sol\\\";\\nimport { Exponential } from \\\"./Exponential.sol\\\";\\nimport { EIP20Interface } from \\\"./EIP20Interface.sol\\\";\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\nimport { ComptrollerV3Storage } from \\\"./ComptrollerStorage.sol\\\";\\nimport { IFeeDistributor } from \\\"./IFeeDistributor.sol\\\";\\nimport { CTokenOracleProtected } from \\\"./CTokenOracleProtected.sol\\\";\\n\\nimport { DiamondExtension, LibDiamond } from \\\"../ionic/DiamondExtension.sol\\\";\\nimport { PoolLens } from \\\"../PoolLens.sol\\\";\\nimport { IonicUniV3Liquidator } from \\\"../IonicUniV3Liquidator.sol\\\";\\nimport { IHypernativeOracle } from \\\"../external/hypernative/interfaces/IHypernativeOracle.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).\\n * @author Compound\\n */\\nabstract contract CErc20 is CTokenOracleProtected, CTokenSecondExtensionBase, TokenErrorReporter, Exponential, DiamondExtension {\\n  modifier isAuthorized() {\\n    require(\\n      IFeeDistributor(ionicAdmin).canCall(address(comptroller), msg.sender, address(this), msg.sig),\\n      \\\"not authorized\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier isMinHFThresholdExceeded(address borrower) {\\n    PoolLens lens = PoolLens(ap.getAddress(\\\"PoolLens\\\"));\\n    IonicUniV3Liquidator liquidator = IonicUniV3Liquidator(payable(ap.getAddress(\\\"IonicUniV3Liquidator\\\")));\\n\\n    if (lens.getHealthFactor(borrower, comptroller) > liquidator.healthFactorThreshold()) {\\n      require(msg.sender == address(liquidator), \\\"Health factor not low enough for non-permissioned liquidations\\\");\\n      _;\\n    } else {\\n      _;\\n    }\\n  }\\n\\n  function _getExtensionFunctions() public pure virtual override returns (bytes4[] memory) {\\n    uint8 fnsCount = 13;\\n    bytes4[] memory functionSelectors = new bytes4[](fnsCount);\\n    functionSelectors[--fnsCount] = this.mint.selector;\\n    functionSelectors[--fnsCount] = this.redeem.selector;\\n    functionSelectors[--fnsCount] = this.redeemUnderlying.selector;\\n    functionSelectors[--fnsCount] = this.borrow.selector;\\n    functionSelectors[--fnsCount] = this.repayBorrow.selector;\\n    functionSelectors[--fnsCount] = this.repayBorrowBehalf.selector;\\n    functionSelectors[--fnsCount] = this.liquidateBorrow.selector;\\n    functionSelectors[--fnsCount] = this.getCash.selector;\\n    functionSelectors[--fnsCount] = this.seize.selector;\\n    functionSelectors[--fnsCount] = this.selfTransferOut.selector;\\n    functionSelectors[--fnsCount] = this.selfTransferIn.selector;\\n    functionSelectors[--fnsCount] = this._withdrawIonicFees.selector;\\n    functionSelectors[--fnsCount] = this._withdrawAdminFees.selector;\\n\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n    return functionSelectors;\\n  }\\n\\n  /*** User Interface ***/\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function mint(uint256 mintAmount) external override isAuthorized onlyOracleApprovedAllowEOA returns (uint256) {\\n    (uint256 err, ) = mintInternal(mintAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeem(uint256 redeemTokens) external override isAuthorized onlyOracleApprovedAllowEOA returns (uint256) {\\n    return redeemInternal(redeemTokens);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to redeem\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlying(uint256 redeemAmount) external override isAuthorized onlyOracleApprovedAllowEOA returns (uint256) {\\n    return redeemUnderlyingInternal(redeemAmount);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrow(uint256 borrowAmount) external override isAuthorized onlyOracleApprovedAllowEOA returns (uint256) {\\n    return borrowInternal(borrowAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrow(uint256 repayAmount) external override isAuthorized onlyOracleApprovedAllowEOA returns (uint256) {\\n    (uint256 err, ) = repayBorrowInternal(repayAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external override isAuthorized onlyOracleApprovedAllowEOA returns (uint256) {\\n    (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external override isAuthorized onlyOracleApprovedAllowEOA isMinHFThresholdExceeded(borrower) returns (uint256) {\\n    (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\n    return err;\\n  }\\n\\n  /**\\n   * @notice Get cash balance of this cToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash() external view override returns (uint256) {\\n    return getCashInternal();\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Will fail unless called by another cToken during the process of liquidation.\\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override nonReentrant(true) onlyOracleApprovedAllowEOA returns (uint256) {\\n    return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n  }\\n\\n  function selfTransferOut(address to, uint256 amount) external override {\\n    require(msg.sender == address(this), \\\"!self\\\");\\n    doTransferOut(to, amount);\\n  }\\n\\n  function selfTransferIn(address from, uint256 amount) external override returns (uint256) {\\n    require(msg.sender == address(this), \\\"!self\\\");\\n    return doTransferIn(from, amount);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces Ionic fees by transferring to Ionic\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawIonicFees(uint256 withdrawAmount) external override nonReentrant(false) onlyOracleApproved returns (uint256) {\\n    asCTokenExtension().accrueInterest();\\n\\n    if (accrualBlockNumber != block.number) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_IONIC_FEES_FRESH_CHECK);\\n    }\\n\\n    if (getCashInternal() < withdrawAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_IONIC_FEES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    if (withdrawAmount > totalIonicFees) {\\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_IONIC_FEES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    uint256 totalIonicFeesNew = totalIonicFees - withdrawAmount;\\n    totalIonicFees = totalIonicFeesNew;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(address(ionicAdmin), withdrawAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accrues interest and reduces admin fees by transferring to admin\\n   * @param withdrawAmount Amount of fees to withdraw\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _withdrawAdminFees(uint256 withdrawAmount) external override nonReentrant(false) onlyOracleApproved returns (uint256) {\\n    asCTokenExtension().accrueInterest();\\n\\n    if (accrualBlockNumber != block.number) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK);\\n    }\\n\\n    // Fail gracefully if protocol has insufficient underlying cash\\n    if (getCashInternal() < withdrawAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE);\\n    }\\n\\n    if (withdrawAmount > totalAdminFees) {\\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n    totalAdminFees = totalAdminFees - withdrawAmount;\\n\\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n    doTransferOut(ComptrollerV3Storage(address(comptroller)).admin(), withdrawAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /*** Safe Token ***/\\n\\n  /**\\n   * @notice Gets balance of this contract in terms of the underlying\\n   * @dev This excludes the value of the current message, if any\\n   * @return The quantity of underlying tokens owned by this contract\\n   */\\n  function getCashInternal() internal view virtual returns (uint256) {\\n    return EIP20Interface(underlying).balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n   *      This will revert due to insufficient balance or insufficient allowance.\\n   *      This function returns the actual amount received,\\n   *      which may be less than `amount` if there is a fee attached to the transfer.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256) {\\n    uint256 balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n    _callOptionalReturn(\\n      abi.encodeWithSelector(EIP20Interface.transferFrom.selector, from, address(this), amount),\\n      \\\"TOKEN_TRANSFER_IN_FAILED\\\"\\n    );\\n\\n    // Calculate the amount that was *actually* transferred\\n    uint256 balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n    require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n    return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n  }\\n\\n  /**\\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n   *      it is >= amount, this should not revert in normal conditions.\\n   *\\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n   */\\n  function doTransferOut(address to, uint256 amount) internal virtual {\\n    _callOptionalReturn(\\n      abi.encodeWithSelector(EIP20Interface.transfer.selector, to, amount),\\n      \\\"TOKEN_TRANSFER_OUT_FAILED\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   * @param errorMessage The revert string to return on failure.\\n   */\\n  function _callOptionalReturn(bytes memory data, string memory errorMessage) internal {\\n    bytes memory returndata = _functionCall(underlying, data, errorMessage);\\n    if (returndata.length > 0) require(abi.decode(returndata, (bool)), errorMessage);\\n  }\\n\\n  /**\\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n   */\\n  function mintInternal(uint256 mintAmount) internal nonReentrant(false) returns (uint256, uint256) {\\n    asCTokenExtension().accrueInterest();\\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n    return mintFresh(msg.sender, mintAmount);\\n  }\\n\\n  struct MintLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 exchangeRateMantissa;\\n    uint256 mintTokens;\\n    uint256 totalSupplyNew;\\n    uint256 accountTokensNew;\\n    uint256 actualMintAmount;\\n  }\\n\\n  /**\\n   * @notice User supplies assets into the market and receives cTokens in exchange\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param minter The address of the account which is supplying the assets\\n   * @param mintAmount The amount of the underlying asset to supply\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n   */\\n  function mintFresh(address minter, uint256 mintAmount) internal returns (uint256, uint256) {\\n    /* Fail if mint not allowed */\\n    uint256 allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != block.number) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n    }\\n\\n    MintLocalVars memory vars;\\n\\n    vars.exchangeRateMantissa = asCTokenExtension().exchangeRateCurrent();\\n\\n    // Check max supply\\n    // unused function\\n    /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        } */\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     *  We call `doTransferIn` for the minter and the mintAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n     *  side-effects occurred. The function returns the amount actually transferred,\\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n     *  of cash.\\n     */\\n    vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n    /*\\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\\n     *  mintTokens = actualMintAmount / exchangeRate\\n     */\\n\\n    // mintTokens is rounded down here - correct\\n    (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n      vars.actualMintAmount,\\n      Exp({ mantissa: vars.exchangeRateMantissa })\\n    );\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n    require(vars.mintTokens > 0, \\\"MINT_ZERO_CTOKENS_REJECTED\\\");\\n\\n    /*\\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n     *  totalSupplyNew = totalSupply + mintTokens\\n     *  accountTokensNew = accountTokens[minter] + mintTokens\\n     */\\n    vars.totalSupplyNew = totalSupply + vars.mintTokens;\\n\\n    vars.accountTokensNew = accountTokens[minter] + vars.mintTokens;\\n\\n    /* We write previously calculated values into storage */\\n    totalSupply = vars.totalSupplyNew;\\n    accountTokens[minter] = vars.accountTokensNew;\\n\\n    /* We emit a Mint event, and a Transfer event */\\n    emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n    emit Transfer(address(this), minter, vars.mintTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n    return (uint256(Error.NO_ERROR), vars.actualMintAmount);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for the underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemTokens The number of cTokens to redeem into underlying\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant(false) returns (uint256) {\\n    asCTokenExtension().accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    return redeemFresh(msg.sender, redeemTokens, 0);\\n  }\\n\\n  /**\\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant(false) returns (uint256) {\\n    asCTokenExtension().accrueInterest();\\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n    return redeemFresh(msg.sender, 0, redeemAmount);\\n  }\\n\\n  struct RedeemLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 exchangeRateMantissa;\\n    uint256 redeemTokens;\\n    uint256 redeemAmount;\\n    uint256 totalSupplyNew;\\n    uint256 accountTokensNew;\\n  }\\n\\n  function divRoundUp(uint256 x, uint256 y) internal pure returns (uint256 res) {\\n    res = (x * 1e18) / y;\\n    if (x % y != 0) res += 1;\\n  }\\n\\n  /**\\n   * @notice User redeems cTokens in exchange for the underlying asset\\n   * @dev Assumes interest has already been accrued up to the current block\\n   * @param redeemer The address of the account which is redeeming the tokens\\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function redeemFresh(\\n    address redeemer,\\n    uint256 redeemTokensIn,\\n    uint256 redeemAmountIn\\n  ) internal returns (uint256) {\\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"!redeem tokens or amount\\\");\\n\\n    RedeemLocalVars memory vars;\\n\\n    vars.exchangeRateMantissa = asCTokenExtension().exchangeRateCurrent();\\n\\n    if (redeemTokensIn > 0) {\\n      // don't allow dust tokens/assets to be left after\\n      if (totalSupply - redeemTokensIn < 5000) redeemTokensIn = totalSupply;\\n\\n      /*\\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\\n       *  redeemTokens = redeemTokensIn\\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n       */\\n      vars.redeemTokens = redeemTokensIn;\\n\\n      (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n        Exp({ mantissa: vars.exchangeRateMantissa }),\\n        redeemTokensIn\\n      );\\n      if (vars.mathErr != MathError.NO_ERROR) {\\n        return\\n          failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint256(vars.mathErr));\\n      }\\n    } else {\\n      if (redeemAmountIn == type(uint256).max) {\\n        redeemAmountIn = comptroller.getMaxRedeemOrBorrow(redeemer, ICErc20(address(this)), false);\\n      }\\n\\n      // don't allow dust tokens/assets to be left after\\n      uint256 totalUnderlyingSupplied = asCTokenExtension().getTotalUnderlyingSupplied();\\n      if (totalUnderlyingSupplied - redeemAmountIn < 1000) redeemAmountIn = totalUnderlyingSupplied;\\n\\n      /*\\n       * We get the current exchange rate and calculate the amount to be redeemed:\\n       *  redeemTokens = redeemAmountIn / exchangeRate\\n       *  redeemAmount = redeemAmountIn\\n       */\\n\\n      vars.redeemTokens = divRoundUp(redeemAmountIn, vars.exchangeRateMantissa);\\n\\n      // don't allow dust tokens/assets to be left after\\n      if (totalSupply - vars.redeemTokens < 1000) vars.redeemTokens = totalSupply;\\n\\n      vars.redeemAmount = redeemAmountIn;\\n    }\\n\\n    /* Fail if redeem not allowed */\\n    uint256 allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != block.number) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n    }\\n\\n    /*\\n     * We calculate the new total supply and redeemer balance, checking for underflow:\\n     *  totalSupplyNew = totalSupply - redeemTokens\\n     *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n     */\\n    (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient cash */\\n    if (getCashInternal() < vars.redeemAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write previously calculated values into storage */\\n    totalSupply = vars.totalSupplyNew;\\n    accountTokens[redeemer] = vars.accountTokensNew;\\n\\n    /*\\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken has redeemAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(redeemer, vars.redeemAmount);\\n\\n    /* We emit a Transfer event, and a Redeem event */\\n    emit Transfer(redeemer, address(this), vars.redeemTokens);\\n    emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n    /* We call the defense hook */\\n    comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender borrows assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant(false) returns (uint256) {\\n    asCTokenExtension().accrueInterest();\\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n    return borrowFresh(msg.sender, borrowAmount);\\n  }\\n\\n  struct BorrowLocalVars {\\n    MathError mathErr;\\n    uint256 accountBorrows;\\n    uint256 accountBorrowsNew;\\n    uint256 totalBorrowsNew;\\n  }\\n\\n  /**\\n   * @notice Users borrow assets from the protocol to their own address\\n   * @param borrowAmount The amount of the underlying asset to borrow\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function borrowFresh(address borrower, uint256 borrowAmount) internal returns (uint256) {\\n    /* Fail if borrow not allowed */\\n    uint256 allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != block.number) {\\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n    }\\n\\n    /* Fail gracefully if protocol has insufficient underlying cash */\\n    uint256 cashPrior = getCashInternal();\\n\\n    if (cashPrior < borrowAmount) {\\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n    }\\n\\n    BorrowLocalVars memory vars;\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on overflow:\\n     *  accountBorrowsNew = accountBorrows + borrowAmount\\n     *  totalBorrowsNew = totalBorrows + borrowAmount\\n     */\\n    vars.accountBorrows = asCTokenExtension().borrowBalanceCurrent(borrower);\\n\\n    (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(\\n          Error.MATH_ERROR,\\n          FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n          uint256(vars.mathErr)\\n        );\\n    }\\n\\n    // Check min borrow for this user for this asset\\n    allowed = comptroller.borrowWithinLimits(address(this), vars.accountBorrowsNew);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return\\n        failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = vars.totalBorrowsNew;\\n\\n    /*\\n     * We invoke doTransferOut for the borrower and the borrowAmount.\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken borrowAmount less of cash.\\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     */\\n    doTransferOut(borrower, borrowAmount);\\n\\n    /* We emit a Borrow event */\\n    emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sender repays their own borrow\\n   * @param repayAmount The amount to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant(false) returns (uint256, uint256) {\\n    asCTokenExtension().accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n  }\\n\\n  /**\\n   * @notice Sender repays a borrow belonging to borrower\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount The amount to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\\n    internal\\n    nonReentrant(false)\\n    returns (uint256, uint256)\\n  {\\n    asCTokenExtension().accrueInterest();\\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n    return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n  }\\n\\n  struct RepayBorrowLocalVars {\\n    Error err;\\n    MathError mathErr;\\n    uint256 repayAmount;\\n    uint256 borrowerIndex;\\n    uint256 accountBorrows;\\n    uint256 accountBorrowsNew;\\n    uint256 totalBorrowsNew;\\n    uint256 actualRepayAmount;\\n  }\\n\\n  /**\\n   * @notice Borrows are repaid by another user (possibly the borrower).\\n   * @param payer the account paying off the borrow\\n   * @param borrower the account with the debt being payed off\\n   * @param repayAmount the amount of undelrying tokens being returned\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function repayBorrowFresh(\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) internal returns (uint256, uint256) {\\n    /* Fail if repayBorrow not allowed */\\n    uint256 allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != block.number) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n    }\\n\\n    RepayBorrowLocalVars memory vars;\\n\\n    /* We remember the original borrowerIndex for verification purposes */\\n    vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n    /* We fetch the amount the borrower owes, with accumulated interest */\\n    vars.accountBorrows = asCTokenExtension().borrowBalanceCurrent(borrower);\\n\\n    /* If repayAmount == -1, repayAmount = accountBorrows */\\n    if (repayAmount == type(uint256).max) {\\n      vars.repayAmount = vars.accountBorrows;\\n    } else {\\n      vars.repayAmount = repayAmount;\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /*\\n     * We call doTransferIn for the payer and the repayAmount\\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n     *  On success, the cToken holds an additional repayAmount of cash.\\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n     *   it returns the amount actually transferred, in case of a fee.\\n     */\\n    vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n    /*\\n     * We calculate the new borrower and total borrow balances, failing on underflow:\\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n     */\\n    (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n    (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n    require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n    /* We write the previously calculated values into storage */\\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n    accountBorrows[borrower].interestIndex = borrowIndex;\\n    totalBorrows = vars.totalBorrowsNew;\\n\\n    /* We emit a RepayBorrow event */\\n    emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n    return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\\n  }\\n\\n  /**\\n   * @notice The sender liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function liquidateBorrowInternal(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) internal nonReentrant(false) returns (uint256, uint256) {\\n    asCTokenExtension().accrueInterest();\\n    ICErc20(cTokenCollateral).accrueInterest();\\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n    return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n  }\\n\\n  /**\\n   * @notice The liquidator liquidates the borrowers collateral.\\n   *  The collateral seized is transferred to the liquidator.\\n   * @param borrower The borrower of this cToken to be liquidated\\n   * @param liquidator The address repaying the borrow and seizing collateral\\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\\n   * @param repayAmount The amount of the underlying borrowed asset to repay\\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n   */\\n  function liquidateBorrowFresh(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) internal returns (uint256, uint256) {\\n    /* Fail if liquidate not allowed */\\n    uint256 allowed = comptroller.liquidateBorrowAllowed(\\n      address(this),\\n      cTokenCollateral,\\n      liquidator,\\n      borrower,\\n      repayAmount\\n    );\\n    if (allowed != 0) {\\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n    }\\n\\n    /* Verify market's block number equals current block number */\\n    if (accrualBlockNumber != block.number) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n    }\\n\\n    /* Verify cTokenCollateral market's block number equals current block number */\\n    if (CErc20(cTokenCollateral).accrualBlockNumber() != block.number) {\\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n    }\\n\\n    /* Fail if repayAmount = 0 */\\n    if (repayAmount == 0) {\\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n    }\\n\\n    /* Fail if repayAmount = -1 */\\n    if (repayAmount == type(uint256).max) {\\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n    }\\n\\n    /* Fail if repayBorrow fails */\\n    (uint256 repayBorrowError, uint256 actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n    if (repayBorrowError != uint256(Error.NO_ERROR)) {\\n      return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We calculate the number of collateral tokens that will be seized */\\n    (uint256 amountSeizeError, uint256 seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n      address(this),\\n      cTokenCollateral,\\n      actualRepayAmount\\n    );\\n    require(amountSeizeError == uint256(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n    /* Revert if borrower collateral token balance < seizeTokens */\\n    require(ICErc20(cTokenCollateral).balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n    uint256 seizeError;\\n    if (cTokenCollateral == address(this)) {\\n      seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n    } else {\\n      seizeError = CErc20(cTokenCollateral).seize(liquidator, borrower, seizeTokens);\\n    }\\n\\n    /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n    require(seizeError == uint256(Error.NO_ERROR), \\\"!seize\\\");\\n\\n    /* We emit a LiquidateBorrow event */\\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, cTokenCollateral, seizeTokens);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.liquidateBorrowVerify(address(this), cTokenCollateral, liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n    return (uint256(Error.NO_ERROR), actualRepayAmount);\\n  }\\n\\n  struct SeizeInternalLocalVars {\\n    MathError mathErr;\\n    uint256 borrowerTokensNew;\\n    uint256 liquidatorTokensNew;\\n    uint256 liquidatorSeizeTokens;\\n    uint256 protocolSeizeTokens;\\n    uint256 protocolSeizeAmount;\\n    uint256 exchangeRateMantissa;\\n    uint256 totalReservesNew;\\n    uint256 totalIonicFeeNew;\\n    uint256 totalSupplyNew;\\n    uint256 feeSeizeTokens;\\n    uint256 feeSeizeAmount;\\n  }\\n\\n  /**\\n   * @notice Transfers collateral tokens (this market) to the liquidator.\\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n   * @param liquidator The account receiving seized collateral\\n   * @param borrower The account having collateral seized\\n   * @param seizeTokens The number of cTokens to seize\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function seizeInternal(\\n    address seizerToken,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) internal returns (uint256) {\\n    /* Fail if seize not allowed */\\n    uint256 allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n    if (allowed != 0) {\\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n    }\\n\\n    /* Fail if borrower = liquidator */\\n    if (borrower == liquidator) {\\n      return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n    }\\n\\n    SeizeInternalLocalVars memory vars;\\n\\n    /*\\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n     */\\n    (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    vars.protocolSeizeTokens = mul_(seizeTokens, Exp({ mantissa: protocolSeizeShareMantissa }));\\n    vars.feeSeizeTokens = mul_(seizeTokens, Exp({ mantissa: feeSeizeShareMantissa }));\\n    vars.liquidatorSeizeTokens = seizeTokens - vars.protocolSeizeTokens - vars.feeSeizeTokens;\\n\\n    vars.exchangeRateMantissa = asCTokenExtension().exchangeRateCurrent();\\n\\n    vars.protocolSeizeAmount = mul_ScalarTruncate(\\n      Exp({ mantissa: vars.exchangeRateMantissa }),\\n      vars.protocolSeizeTokens\\n    );\\n    vars.feeSeizeAmount = mul_ScalarTruncate(Exp({ mantissa: vars.exchangeRateMantissa }), vars.feeSeizeTokens);\\n\\n    vars.totalReservesNew = totalReserves + vars.protocolSeizeAmount;\\n    vars.totalSupplyNew = totalSupply - vars.protocolSeizeTokens - vars.feeSeizeTokens;\\n    vars.totalIonicFeeNew = totalIonicFees + vars.feeSeizeAmount;\\n\\n    (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\\n    if (vars.mathErr != MathError.NO_ERROR) {\\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint256(vars.mathErr));\\n    }\\n\\n    /////////////////////////\\n    // EFFECTS & INTERACTIONS\\n    // (No safe failures beyond this point)\\n\\n    /* We write the previously calculated values into storage */\\n    totalReserves = vars.totalReservesNew;\\n    totalSupply = vars.totalSupplyNew;\\n    totalIonicFees = vars.totalIonicFeeNew;\\n\\n    accountTokens[borrower] = vars.borrowerTokensNew;\\n    accountTokens[liquidator] = vars.liquidatorTokensNew;\\n\\n    /* Emit a Transfer event */\\n    emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\\n    emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\\n    emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\\n\\n    /* We call the defense hook */\\n    // unused function\\n    // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function asCTokenExtension() internal view returns (ICErc20) {\\n    return ICErc20(address(this));\\n  }\\n\\n  /*** Reentrancy Guard ***/\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   */\\n  modifier nonReentrant(bool localOnly) {\\n    _beforeNonReentrant(localOnly);\\n    _;\\n    _afterNonReentrant(localOnly);\\n  }\\n\\n  /**\\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n   * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n   * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\\n   */\\n  function _beforeNonReentrant(bool localOnly) private {\\n    require(_notEntered, \\\"re-entered\\\");\\n    if (!localOnly) comptroller._beforeNonReentrant();\\n    _notEntered = false;\\n  }\\n\\n  /**\\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\\n   * Saves space because function modifier code is \\\"inlined\\\" into every function with the modifier).\\n   * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\\n   */\\n  function _afterNonReentrant(bool localOnly) private {\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n    if (!localOnly) comptroller._afterNonReentrant();\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   * @param errorMessage The revert string to return on failure.\\n   */\\n  function _functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.call(data);\\n\\n    if (!success) {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n\\n    return returndata;\\n  }\\n}\\n\",\"keccak256\":\"0x308ca2ce334910ef9ece96a98a4a899eaa802051051dc89bf6f8732242000b7b\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IonicComptroller } from \\\"./ComptrollerInterface.sol\\\";\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\nimport { ComptrollerV3Storage } from \\\"./ComptrollerStorage.sol\\\";\\nimport { AddressesProvider } from \\\"../ionic/AddressesProvider.sol\\\";\\n\\nabstract contract CTokenAdminStorage {\\n  /*\\n   * Administrator for Ionic\\n   */\\n  address payable public ionicAdmin;\\n}\\n\\nabstract contract CErc20Storage is CTokenAdminStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  /*\\n   * Maximum borrow rate that can ever be applied (.0005% / block)\\n   */\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  /*\\n   * Maximum fraction of interest that can be set aside for reserves + fees\\n   */\\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  IonicComptroller public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  /*\\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n   */\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for admin fees\\n   */\\n  uint256 public adminFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for Ionic fees\\n   */\\n  uint256 public ionicFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total amount of admin fees of the underlying held in this market\\n   */\\n  uint256 public totalAdminFees;\\n\\n  /**\\n   * @notice Total amount of Ionic fees of the underlying held in this market\\n   */\\n  uint256 public totalIonicFees;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  /*\\n   * Official record of token balances for each account\\n   */\\n  mapping(address => uint256) internal accountTokens;\\n\\n  /*\\n   * Approved token transfer amounts on behalf of others\\n   */\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  /*\\n   * Mapping of account addresses to outstanding borrow balances\\n   */\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /*\\n   * Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n  /*\\n   * Share of seized collateral taken as fees\\n   */\\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\\n\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n\\n  /**\\n   * @notice Addresses Provider\\n   */\\n  AddressesProvider public ap;\\n}\\n\\nabstract contract CTokenBaseEvents {\\n  /* ERC20 */\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the admin fee is changed\\n   */\\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\n\\n  /**\\n   * @notice Event emitted when the Ionic fee is changed\\n   */\\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n}\\n\\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\\n  event Flash(address receiver, uint256 amount);\\n}\\n\\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral,\\n    uint256 seizeTokens\\n  );\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n}\\n\\ninterface CTokenFirstExtensionInterface {\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function exchangeRateCurrent() external view returns (uint256);\\n\\n  function accrueInterest() external returns (uint256);\\n\\n  function totalBorrowsCurrent() external view returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external view returns (uint256);\\n\\n  function getTotalUnderlyingSupplied() external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external view returns (uint256);\\n\\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n  function flash(uint256 amount, bytes calldata data) external;\\n\\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\\n\\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\\n\\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\\n\\n  function registerInSFS() external returns (uint256);\\n}\\n\\ninterface CTokenSecondExtensionInterface {\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\\n\\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\\n\\n  function selfTransferOut(address to, uint256 amount) external;\\n\\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\\n}\\n\\ninterface CDelegatorInterface {\\n  function implementation() external view returns (address);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\\n\\n  /**\\n   * @dev upgrades the implementation if necessary\\n   */\\n  function _upgrade() external;\\n}\\n\\ninterface CDelegateInterface {\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes calldata data) external;\\n\\n  function delegateType() external pure returns (uint8);\\n\\n  function contractType() external pure returns (string memory);\\n}\\n\\nabstract contract CErc20AdminBase is CErc20Storage {\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\n    return\\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\\n  }\\n}\\n\\nabstract contract CErc20FirstExtensionBase is\\n  CErc20AdminBase,\\n  CTokenFirstExtensionEvents,\\n  CTokenFirstExtensionInterface\\n{}\\n\\nabstract contract CTokenSecondExtensionBase is\\n  CErc20AdminBase,\\n  CTokenSecondExtensionEvents,\\n  CTokenSecondExtensionInterface,\\n  CDelegateInterface\\n{}\\n\\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\\n\\ninterface CErc20StorageInterface {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function ionicAdmin() external view returns (address);\\n\\n  function ionicAdminHasRights() external view returns (bool);\\n\\n  function comptroller() external view returns (IonicComptroller);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function ionicFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function protocolSeizeShareMantissa() external view returns (uint256);\\n\\n  function feeSeizeShareMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalIonicFees() external view returns (uint256);\\n\\n  function totalBorrows() external view returns (uint256);\\n\\n  function accrualBlockNumber() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function borrowIndex() external view returns (uint256);\\n\\n  function interestRateModel() external view returns (address);\\n}\\n\\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\\n  function plugin() external view returns (address);\\n}\\n\\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\\n  function approve(address, address) external;\\n}\\n\\ninterface ICErc20 is\\n  CErc20StorageInterface,\\n  CTokenSecondExtensionInterface,\\n  CTokenFirstExtensionInterface,\\n  CDelegatorInterface,\\n  CDelegateInterface\\n{}\\n\\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\\n  function _updatePlugin(address _plugin) external;\\n}\\n\\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\\n\",\"keccak256\":\"0x7cc75051a5fa860b9ee93d0ba1ac0608921f02308aeff786ce8bbd8d8a70489a\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenOracleProtected.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.22;\\n\\nimport { CErc20Storage } from \\\"./CTokenInterfaces.sol\\\";\\nimport { IHypernativeOracle } from \\\"../external/hypernative/interfaces/IHypernativeOracle.sol\\\";\\n\\ncontract CTokenOracleProtected is CErc20Storage {\\n  error InteractionNotAllowed();\\n  error CallerIsNotEOA();\\n\\n  modifier onlyOracleApproved() {\\n    address oracleAddress = ap.getAddress(\\\"HYPERNATIVE_ORACLE\\\");\\n\\n    if (oracleAddress == address(0)) {\\n      _;\\n      return;\\n    }\\n\\n    IHypernativeOracle oracle = IHypernativeOracle(oracleAddress);\\n    oracle.validateForbiddenContextInteraction(tx.origin, msg.sender);\\n    _;\\n  }\\n\\n  modifier onlyOracleApprovedAllowEOA() {\\n    address oracleAddress = ap.getAddress(\\\"HYPERNATIVE_ORACLE\\\");\\n\\n    if (oracleAddress == address(0)) {\\n      _;\\n      return;\\n    }\\n\\n    IHypernativeOracle oracle = IHypernativeOracle(oracleAddress);\\n    oracle.validateBlacklistedAccountInteraction(msg.sender);\\n    if (tx.origin == msg.sender) {\\n      _;\\n      return;\\n    }\\n\\n    oracle.validateForbiddenContextInteraction(tx.origin, msg.sender);\\n    _;\\n  }\\n\\n  modifier onlyNotBlacklistedEOA() {\\n    address oracleAddress = ap.getAddress(\\\"HYPERNATIVE_ORACLE\\\");\\n\\n    if (oracleAddress == address(0)) {\\n      _;\\n      return;\\n    }\\n\\n    IHypernativeOracle oracle = IHypernativeOracle(oracleAddress);\\n    if (msg.sender != tx.origin) {\\n      revert CallerIsNotEOA();\\n    }\\n    oracle.validateBlacklistedAccountInteraction(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x42b99e4fbc5880f64a6f1d8b02f3b061b0d3a6c312f47d83e88593eefaf71304\",\"license\":\"Unlicense\"},\"contracts/compound/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Careful Math\\n * @author Compound\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n  /**\\n   * @dev Possible error codes that we can return\\n   */\\n  enum MathError {\\n    NO_ERROR,\\n    DIVISION_BY_ZERO,\\n    INTEGER_OVERFLOW,\\n    INTEGER_UNDERFLOW\\n  }\\n\\n  /**\\n   * @dev Multiplies two numbers, returns an error on overflow.\\n   */\\n  function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (a == 0) {\\n      return (MathError.NO_ERROR, 0);\\n    }\\n\\n    uint256 c;\\n    unchecked {\\n      c = a * b;\\n    }\\n\\n    if (c / a != b) {\\n      return (MathError.INTEGER_OVERFLOW, 0);\\n    } else {\\n      return (MathError.NO_ERROR, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Integer division of two numbers, truncating the quotient.\\n   */\\n  function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (b == 0) {\\n      return (MathError.DIVISION_BY_ZERO, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, a / b);\\n  }\\n\\n  /**\\n   * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n   */\\n  function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    if (b <= a) {\\n      return (MathError.NO_ERROR, a - b);\\n    } else {\\n      return (MathError.INTEGER_UNDERFLOW, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Adds two numbers, returns an error on overflow.\\n   */\\n  function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\\n    uint256 c;\\n    unchecked {\\n      c = a + b;\\n    }\\n\\n    if (c >= a) {\\n      return (MathError.NO_ERROR, c);\\n    } else {\\n      return (MathError.INTEGER_OVERFLOW, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev add a and b and then subtract c\\n   */\\n  function addThenSubUInt(\\n    uint256 a,\\n    uint256 b,\\n    uint256 c\\n  ) internal pure returns (MathError, uint256) {\\n    (MathError err0, uint256 sum) = addUInt(a, b);\\n\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, 0);\\n    }\\n\\n    return subUInt(sum, c);\\n  }\\n}\\n\",\"keccak256\":\"0x7425598d767521ba25277a7f95273c4705721aef0d7f2cd855cb6a61de709a7c\",\"license\":\"UNLICENSED\"},\"contracts/compound/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { ComptrollerErrorReporter } from \\\"./ErrorReporter.sol\\\";\\nimport { Exponential } from \\\"./Exponential.sol\\\";\\nimport { BasePriceOracle } from \\\"../oracles/BasePriceOracle.sol\\\";\\nimport { Unitroller } from \\\"./Unitroller.sol\\\";\\nimport { IFeeDistributor } from \\\"./IFeeDistributor.sol\\\";\\nimport { IIonicFlywheel } from \\\"../ionic/strategies/flywheel/IIonicFlywheel.sol\\\";\\nimport { DiamondExtension, DiamondBase, LibDiamond } from \\\"../ionic/DiamondExtension.sol\\\";\\nimport { ComptrollerExtensionInterface, ComptrollerBase, ComptrollerInterface } from \\\"./ComptrollerInterface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n * @dev This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\\n */\\ncontract Comptroller is ComptrollerBase, ComptrollerInterface, ComptrollerErrorReporter, Exponential, DiamondExtension {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @notice Emitted when an admin supports a market\\n  event MarketListed(ICErc20 cToken);\\n\\n  /// @notice Emitted when an account enters a market\\n  event MarketEntered(ICErc20 cToken, address account);\\n\\n  /// @notice Emitted when an account exits a market\\n  event MarketExited(ICErc20 cToken, address account);\\n\\n  /// @notice Emitted when close factor is changed by admin\\n  event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\\n\\n  /// @notice Emitted when a collateral factor is changed by admin\\n  event NewCollateralFactor(ICErc20 cToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa);\\n\\n  /// @notice Emitted when liquidation incentive is changed by admin\\n  event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\\n\\n  /// @notice Emitted when price oracle is changed\\n  event NewPriceOracle(BasePriceOracle oldPriceOracle, BasePriceOracle newPriceOracle);\\n\\n  /// @notice Emitted when the whitelist enforcement is changed\\n  event WhitelistEnforcementChanged(bool enforce);\\n\\n  /// @notice Emitted when a new RewardsDistributor contract is added to hooks\\n  event AddedRewardsDistributor(address rewardsDistributor);\\n\\n  // closeFactorMantissa must be strictly greater than this value\\n  uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\\n\\n  // closeFactorMantissa must not exceed this value\\n  uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\\n\\n  // No collateralFactorMantissa may exceed this value\\n  uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n  // liquidationIncentiveMantissa must be no less than this value\\n  uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\\n\\n  // liquidationIncentiveMantissa must be no greater than this value\\n  uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\\n\\n  modifier isAuthorized() {\\n    require(IFeeDistributor(ionicAdmin).canCall(address(this), msg.sender, address(this), msg.sig), \\\"not authorized\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveSupplyCaps(\\n    address cToken\\n  ) public view override(ComptrollerBase, ComptrollerInterface) returns (uint256 supplyCap) {\\n    return ComptrollerBase.effectiveSupplyCaps(cToken);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveBorrowCaps(\\n    address cToken\\n  ) public view override(ComptrollerBase, ComptrollerInterface) returns (uint256 borrowCap) {\\n    return ComptrollerBase.effectiveBorrowCaps(cToken);\\n  }\\n\\n  /*** Assets You Are In ***/\\n\\n  /**\\n   * @notice Returns the assets an account has entered\\n   * @param account The address of the account to pull assets for\\n   * @return A dynamic list with the assets the account has entered\\n   */\\n  function getAssetsIn(address account) external view returns (ICErc20[] memory) {\\n    ICErc20[] memory assetsIn = accountAssets[account];\\n\\n    return assetsIn;\\n  }\\n\\n  /**\\n   * @notice Returns whether the given account is entered in the given asset\\n   * @param account The address of the account to check\\n   * @param cToken The cToken to check\\n   * @return True if the account is in the asset, otherwise false.\\n   */\\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool) {\\n    return markets[address(cToken)].accountMembership[account];\\n  }\\n\\n  /**\\n   * @notice Add assets to be included in account liquidity calculation\\n   * @param cTokens The list of addresses of the cToken markets to be enabled\\n   * @return Success indicator for whether each corresponding market was entered\\n   */\\n  function enterMarkets(address[] memory cTokens) public override isAuthorized returns (uint256[] memory) {\\n    uint256 len = cTokens.length;\\n\\n    uint256[] memory results = new uint256[](len);\\n    for (uint256 i = 0; i < len; i++) {\\n      ICErc20 cToken = ICErc20(cTokens[i]);\\n\\n      results[i] = uint256(addToMarketInternal(cToken, msg.sender));\\n    }\\n\\n    return results;\\n  }\\n\\n  /**\\n   * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n   * @param cToken The market to enter\\n   * @param borrower The address of the account to modify\\n   * @return Success indicator for whether the market was entered\\n   */\\n  function addToMarketInternal(ICErc20 cToken, address borrower) internal returns (Error) {\\n    Market storage marketToJoin = markets[address(cToken)];\\n\\n    if (!marketToJoin.isListed) {\\n      // market is not listed, cannot join\\n      return Error.MARKET_NOT_LISTED;\\n    }\\n\\n    if (marketToJoin.accountMembership[borrower] == true) {\\n      // already joined\\n      return Error.NO_ERROR;\\n    }\\n\\n    // survived the gauntlet, add to list\\n    // NOTE: we store these somewhat redundantly as a significant optimization\\n    //  this avoids having to iterate through the list for the most common use cases\\n    //  that is, only when we need to perform liquidity checks\\n    //  and not whenever we want to check if an account is in a particular market\\n    marketToJoin.accountMembership[borrower] = true;\\n    accountAssets[borrower].push(cToken);\\n\\n    // Add to allBorrowers\\n    if (!borrowers[borrower]) {\\n      allBorrowers.push(borrower);\\n      borrowers[borrower] = true;\\n      borrowerIndexes[borrower] = allBorrowers.length - 1;\\n    }\\n\\n    emit MarketEntered(cToken, borrower);\\n\\n    return Error.NO_ERROR;\\n  }\\n\\n  /**\\n   * @notice Removes asset from sender's account liquidity calculation\\n   * @dev Sender must not have an outstanding borrow balance in the asset,\\n   *  or be providing necessary collateral for an outstanding borrow.\\n   * @param cTokenAddress The address of the asset to be removed\\n   * @return Whether or not the account successfully exited the market\\n   */\\n  function exitMarket(address cTokenAddress) external override isAuthorized returns (uint256) {\\n    // TODO\\n    require(markets[cTokenAddress].isListed, \\\"!Comptroller:exitMarket\\\");\\n\\n    ICErc20 cToken = ICErc20(cTokenAddress);\\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n    (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n    require(oErr == 0, \\\"!exitMarket\\\"); // semi-opaque error code\\n\\n    /* Fail if the sender has a borrow balance */\\n    if (amountOwed != 0) {\\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n    }\\n\\n    /* Fail if the sender is not permitted to redeem all of their tokens */\\n    uint256 allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n    if (allowed != 0) {\\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n    }\\n\\n    Market storage marketToExit = markets[cTokenAddress];\\n\\n    /* Return true if the sender is not already \\u2018in\\u2019 the market */\\n    if (!marketToExit.accountMembership[msg.sender]) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Set cToken account membership to false */\\n    delete marketToExit.accountMembership[msg.sender];\\n\\n    /* Delete cToken from the account\\u2019s list of assets */\\n    // load into memory for faster iteration\\n    ICErc20[] memory userAssetList = accountAssets[msg.sender];\\n    uint256 len = userAssetList.length;\\n    uint256 assetIndex = len;\\n    for (uint256 i = 0; i < len; i++) {\\n      if (userAssetList[i] == ICErc20(cTokenAddress)) {\\n        assetIndex = i;\\n        break;\\n      }\\n    }\\n\\n    // We *must* have found the asset in the list or our redundant data structure is broken\\n    assert(assetIndex < len);\\n\\n    // copy last item in list to location of item to be removed, reduce length by 1\\n    ICErc20[] storage storedList = accountAssets[msg.sender];\\n    storedList[assetIndex] = storedList[storedList.length - 1];\\n    storedList.pop();\\n\\n    // If the user has exited all markets, remove them from the `allBorrowers` array\\n    if (storedList.length == 0) {\\n      allBorrowers[borrowerIndexes[msg.sender]] = allBorrowers[allBorrowers.length - 1]; // Copy last item in list to location of item to be removed\\n      allBorrowers.pop(); // Reduce length by 1\\n      borrowerIndexes[allBorrowers[borrowerIndexes[msg.sender]]] = borrowerIndexes[msg.sender]; // Set borrower index of moved item to correct index\\n      borrowerIndexes[msg.sender] = 0; // Reset sender borrower index to 0 for a gas refund\\n      borrowers[msg.sender] = false; // Tell the contract that the sender is no longer a borrower (so it knows to add the borrower back if they enter a market in the future)\\n    }\\n\\n    emit MarketExited(ICErc20(cTokenAddress), msg.sender);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /*** Policy Hooks ***/\\n\\n  /**\\n   * @notice Checks if the account should be allowed to mint tokens in the given market\\n   * @param cTokenAddress The market to verify the mint against\\n   * @param minter The account which would get the minted tokens\\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n   * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function mintAllowed(address cTokenAddress, address minter, uint256 mintAmount) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!mintGuardianPaused[cTokenAddress], \\\"!mint:paused\\\");\\n\\n    // Make sure market is listed\\n    if (!markets[cTokenAddress].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Make sure minter is whitelisted\\n    if (enforceWhitelist && !whitelist[minter]) {\\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\\n    }\\n\\n    uint256 supplyCap = effectiveSupplyCaps(cTokenAddress);\\n\\n    // Supply cap of 0 corresponds to unlimited supplying\\n    if (supplyCap != 0 && !supplyCapWhitelist[cTokenAddress].contains(minter)) {\\n      uint256 totalUnderlyingSupply = ICErc20(cTokenAddress).getTotalUnderlyingSupplied();\\n      uint256 whitelistedSuppliersSupply = asComptrollerExtension().getWhitelistedSuppliersSupply(cTokenAddress);\\n      uint256 nonWhitelistedTotalSupply;\\n      if (whitelistedSuppliersSupply >= totalUnderlyingSupply) nonWhitelistedTotalSupply = 0;\\n      else nonWhitelistedTotalSupply = totalUnderlyingSupply - whitelistedSuppliersSupply;\\n\\n      require(nonWhitelistedTotalSupply + mintAmount < supplyCap, \\\"!supply cap\\\");\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreSupplierAction(cTokenAddress, minter);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\\n   * @param cToken The market to verify the redeem against\\n   * @param redeemer The account which would redeem the tokens\\n   * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n   * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external override returns (uint256) {\\n    uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n    if (allowed != uint256(Error.NO_ERROR)) {\\n      return allowed;\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreSupplierAction(cToken, redeemer);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function redeemAllowedInternal(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) internal view returns (uint256) {\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n    if (!markets[cToken].accountMembership[redeemer]) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n    (Error err, , , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      redeemer,\\n      ICErc20(cToken),\\n      redeemTokens,\\n      0,\\n      0\\n    );\\n    if (err != Error.NO_ERROR) {\\n      return uint256(err);\\n    }\\n    if (shortfall > 0) {\\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Validates mint and reverts on rejection. May emit logs.\\n   * @param cToken Asset being minted\\n   * @param minter The address minting the tokens\\n   * @param actualMintAmount The amount of the underlying asset being minted\\n   * @param mintTokens The number of tokens being minted\\n   */\\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external {\\n    // Add minter to suppliers mapping\\n    suppliers[minter] = true;\\n  }\\n\\n  /**\\n   * @notice Validates redeem and reverts on rejection. May emit logs.\\n   * @param cToken Asset being redeemed\\n   * @param redeemer The address redeeming the tokens\\n   * @param redeemAmount The amount of the underlying asset being redeemed\\n   * @param redeemTokens The number of tokens being redeemed\\n   */\\n  function redeemVerify(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemAmount,\\n    uint256 redeemTokens\\n  ) external override {\\n    require(markets[msg.sender].isListed, \\\"!market\\\");\\n\\n    // Require tokens is zero or amount is also zero\\n    if (redeemTokens == 0 && redeemAmount > 0) {\\n      revert(\\\"!zero\\\");\\n    }\\n  }\\n\\n  function getMaxRedeemOrBorrow(\\n    address account,\\n    ICErc20 cTokenModify,\\n    bool isBorrow\\n  ) external view override returns (uint256) {\\n    address cToken = address(cTokenModify);\\n    // Accrue interest\\n    uint256 balanceOfUnderlying = cTokenModify.balanceOfUnderlying(account);\\n\\n    // Get account liquidity\\n    (Error err, , uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n      account,\\n      isBorrow ? cTokenModify : ICErc20(address(0)),\\n      0,\\n      0,\\n      0\\n    );\\n    require(err == Error.NO_ERROR, \\\"!liquidity\\\");\\n    if (shortfall > 0) return 0; // Shortfall, so no more borrow/redeem\\n\\n    // Get max borrow/redeem\\n    uint256 maxBorrowOrRedeemAmount;\\n\\n    if (!isBorrow && !markets[cToken].accountMembership[account]) {\\n      // Max redeem = balance of underlying if not used as collateral\\n      maxBorrowOrRedeemAmount = balanceOfUnderlying;\\n    } else {\\n      // Avoid \\\"stack too deep\\\" error by separating this logic\\n      maxBorrowOrRedeemAmount = _getMaxRedeemOrBorrow(liquidity, cTokenModify, isBorrow);\\n\\n      // Redeem only: max out at underlying balance\\n      if (!isBorrow && balanceOfUnderlying < maxBorrowOrRedeemAmount) maxBorrowOrRedeemAmount = balanceOfUnderlying;\\n    }\\n\\n    // Get max borrow or redeem considering cToken liquidity\\n    uint256 cTokenLiquidity = cTokenModify.getCash();\\n\\n    // Return the minimum of the two maximums\\n    return maxBorrowOrRedeemAmount <= cTokenLiquidity ? maxBorrowOrRedeemAmount : cTokenLiquidity;\\n  }\\n\\n  /**\\n   * @dev Portion of the logic in `getMaxRedeemOrBorrow` above separated to avoid \\\"stack too deep\\\" errors.\\n   */\\n  function _getMaxRedeemOrBorrow(\\n    uint256 liquidity,\\n    ICErc20 cTokenModify,\\n    bool isBorrow\\n  ) internal view returns (uint256) {\\n    if (liquidity == 0) return 0; // No available account liquidity, so no more borrow/redeem\\n\\n    // Get the normalized price of the asset\\n    uint256 conversionFactor = oracle.getUnderlyingPrice(cTokenModify);\\n    require(conversionFactor > 0, \\\"!oracle\\\");\\n\\n    // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n    if (!isBorrow) {\\n      uint256 collateralFactorMantissa = markets[address(cTokenModify)].collateralFactorMantissa;\\n      conversionFactor = (collateralFactorMantissa * conversionFactor) / 1e18;\\n    }\\n\\n    // Get max borrow or redeem considering excess account liquidity\\n    return (liquidity * 1e18) / conversionFactor;\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param cToken The market to verify the borrow against\\n   * @param borrower The account which would borrow the asset\\n   * @param borrowAmount The amount of underlying the account would borrow\\n   * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!borrowGuardianPaused[cToken], \\\"!borrow:paused\\\");\\n\\n    // Make sure market is listed\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    if (!markets[cToken].accountMembership[borrower]) {\\n      // only cTokens may call borrowAllowed if borrower not in market\\n      require(msg.sender == cToken, \\\"!ctoken\\\");\\n\\n      // attempt to add borrower to the market\\n      Error err = addToMarketInternal(ICErc20(msg.sender), borrower);\\n      if (err != Error.NO_ERROR) {\\n        return uint256(err);\\n      }\\n\\n      // it should be impossible to break the important invariant\\n      assert(markets[cToken].accountMembership[borrower]);\\n    }\\n\\n    // Make sure oracle price is available\\n    if (oracle.getUnderlyingPrice(ICErc20(cToken)) == 0) {\\n      return uint256(Error.PRICE_ERROR);\\n    }\\n\\n    // Make sure borrower is whitelisted\\n    if (enforceWhitelist && !whitelist[borrower]) {\\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\\n    }\\n\\n    uint256 borrowCap = effectiveBorrowCaps(cToken);\\n\\n    // Borrow cap of 0 corresponds to unlimited borrowing\\n    if (borrowCap != 0 && !borrowCapWhitelist[cToken].contains(borrower)) {\\n      uint256 totalBorrows = ICErc20(cToken).totalBorrowsCurrent();\\n      uint256 whitelistedBorrowersBorrows = asComptrollerExtension().getWhitelistedBorrowersBorrows(cToken);\\n      uint256 nonWhitelistedTotalBorrows;\\n      if (whitelistedBorrowersBorrows >= totalBorrows) nonWhitelistedTotalBorrows = 0;\\n      else nonWhitelistedTotalBorrows = totalBorrows - whitelistedBorrowersBorrows;\\n\\n      require(nonWhitelistedTotalBorrows + borrowAmount < borrowCap, \\\"!borrow:cap\\\");\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreBorrowerAction(cToken, borrower);\\n\\n    // Perform a hypothetical liquidity check to guard against shortfall\\n    (uint256 err, , , uint256 shortfall) = this.getHypotheticalAccountLiquidity(borrower, cToken, 0, borrowAmount, 0);\\n    if (err != uint256(Error.NO_ERROR)) {\\n      return err;\\n    }\\n    if (shortfall > 0) {\\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param cToken Asset whose underlying is being borrowed\\n   * @param accountBorrowsNew The user's new borrow balance of the underlying asset\\n   */\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view override returns (uint256) {\\n    // Check if min borrow exists\\n    uint256 minBorrowEth = IFeeDistributor(ionicAdmin).minBorrowEth();\\n\\n    if (minBorrowEth > 0) {\\n      // Get new underlying borrow balance of account for this cToken\\n      uint256 oraclePriceMantissa = oracle.getUnderlyingPrice(ICErc20(cToken));\\n      if (oraclePriceMantissa == 0) return uint256(Error.PRICE_ERROR);\\n      (MathError mathErr, uint256 borrowBalanceEth) = mulScalarTruncate(\\n        Exp({ mantissa: oraclePriceMantissa }),\\n        accountBorrowsNew\\n      );\\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\\n\\n      // Check against min borrow\\n      if (borrowBalanceEth < minBorrowEth) return uint256(Error.BORROW_BELOW_MIN);\\n    }\\n\\n    // Return no error\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\\n   * @param cToken The market to verify the repay against\\n   * @param payer The account which would repay the asset\\n   * @param borrower The account which would borrowed the asset\\n   * @param repayAmount The amount of the underlying asset the account would repay\\n   * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external override returns (uint256) {\\n    // Make sure market is listed\\n    if (!markets[cToken].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreBorrowerAction(cToken, borrower);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the liquidation should be allowed to occur\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param repayAmount The amount of underlying being repaid\\n   */\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external override returns (uint256) {\\n    // Make sure markets are listed\\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Get borrowers' underlying borrow balance\\n    uint256 borrowBalance = ICErc20(cTokenBorrowed).borrowBalanceCurrent(borrower);\\n\\n    /* allow accounts to be liquidated if the market is deprecated */\\n    if (isDeprecated(ICErc20(cTokenBorrowed))) {\\n      require(borrowBalance >= repayAmount, \\\"!borrow>repay\\\");\\n    } else {\\n      /* The borrower must have shortfall in order to be liquidateable */\\n      (Error err, , , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\\n        borrower,\\n        ICErc20(address(0)),\\n        0,\\n        0,\\n        0\\n      );\\n      if (err != Error.NO_ERROR) {\\n        return uint256(err);\\n      }\\n\\n      if (shortfall == 0) {\\n        return uint256(Error.INSUFFICIENT_SHORTFALL);\\n      }\\n\\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\\n      uint256 maxClose = mul_ScalarTruncate(Exp({ mantissa: closeFactorMantissa }), borrowBalance);\\n      if (repayAmount > maxClose) {\\n        return uint256(Error.TOO_MUCH_REPAY);\\n      }\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the seizing of assets should be allowed to occur\\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\\n   * @param liquidator The address repaying the borrow and seizing the collateral\\n   * @param borrower The address of the borrower\\n   * @param seizeTokens The number of collateral tokens to seize\\n   */\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!seizeGuardianPaused, \\\"!seize:paused\\\");\\n\\n    // Make sure markets are listed\\n    if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n      return uint256(Error.MARKET_NOT_LISTED);\\n    }\\n\\n    // Make sure cToken Comptrollers are identical\\n    if (ICErc20(cTokenCollateral).comptroller() != ICErc20(cTokenBorrowed).comptroller()) {\\n      return uint256(Error.COMPTROLLER_MISMATCH);\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreTransferAction(cTokenCollateral, borrower, liquidator);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\\n   * @param cToken The market to verify the transfer against\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   * @param transferTokens The number of cTokens to transfer\\n   * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n   */\\n  function transferAllowed(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external override returns (uint256) {\\n    // Pausing is a very serious situation - we revert to sound the alarms\\n    require(!transferGuardianPaused, \\\"!transfer:paused\\\");\\n\\n    // Currently the only consideration is whether or not\\n    //  the src is allowed to redeem this many tokens\\n    uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n    if (allowed != uint256(Error.NO_ERROR)) {\\n      return allowed;\\n    }\\n\\n    // Keep the flywheel moving\\n    flywheelPreTransferAction(cToken, src, dst);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /*** Flywheel Hooks ***/\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\\n   * @param cToken The relevant market\\n   * @param supplier The minter/redeemer\\n   */\\n  function flywheelPreSupplierAction(address cToken, address supplier) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreSupplierAction(cToken, supplier);\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\\n   * @param cToken The relevant market\\n   * @param borrower The borrower\\n   */\\n  function flywheelPreBorrowerAction(address cToken, address borrower) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreBorrowerAction(cToken, borrower);\\n  }\\n\\n  /**\\n   * @notice Keeps the flywheel moving pre-transfer and pre-seize\\n   * @param cToken The relevant market\\n   * @param src The account which sources the tokens\\n   * @param dst The account which receives the tokens\\n   */\\n  function flywheelPreTransferAction(address cToken, address src, address dst) internal {\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreTransferAction(cToken, src, dst);\\n  }\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  /**\\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n   *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n   *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n   */\\n  struct AccountLiquidityLocalVars {\\n    ICErc20 asset;\\n    uint256 sumCollateral;\\n    uint256 sumBorrowPlusEffects;\\n    uint256 cTokenBalance;\\n    uint256 borrowBalance;\\n    uint256 exchangeRateMantissa;\\n    uint256 oraclePriceMantissa;\\n    Exp collateralFactor;\\n    Exp exchangeRate;\\n    Exp oraclePrice;\\n    Exp tokensToDenom;\\n    uint256 borrowCapForCollateral;\\n    uint256 borrowedAssetPrice;\\n    uint256 assetAsCollateralValueCap;\\n  }\\n\\n  function getAccountLiquidity(address account) public view override returns (uint256, uint256, uint256, uint256) {\\n    (\\n      Error err,\\n      uint256 collateralValue,\\n      uint256 liquidity,\\n      uint256 shortfall\\n    ) = getHypotheticalAccountLiquidityInternal(account, ICErc20(address(0)), 0, 0, 0);\\n    return (uint256(err), collateralValue, liquidity, shortfall);\\n  }\\n\\n  /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount,\\n    uint256 repayAmount\\n  ) public view returns (uint256, uint256, uint256, uint256) {\\n    (\\n      Error err,\\n      uint256 collateralValue,\\n      uint256 liquidity,\\n      uint256 shortfall\\n    ) = getHypotheticalAccountLiquidityInternal(\\n        account,\\n        ICErc20(cTokenModify),\\n        redeemTokens,\\n        borrowAmount,\\n        repayAmount\\n      );\\n    return (uint256(err), collateralValue, liquidity, shortfall);\\n  }\\n\\n  /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code,\\n                hypothetical account collateral value,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n  function getHypotheticalAccountLiquidityInternal(\\n    address account,\\n    ICErc20 cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount,\\n    uint256 repayAmount\\n  ) internal view returns (Error, uint256, uint256, uint256) {\\n    AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n\\n    if (address(cTokenModify) != address(0)) {\\n      vars.borrowedAssetPrice = oracle.getUnderlyingPrice(cTokenModify);\\n    }\\n\\n    // For each asset the account is in\\n    for (uint256 i = 0; i < accountAssets[account].length; i++) {\\n      vars.asset = accountAssets[account][i];\\n\\n      {\\n        // Read the balances and exchange rate from the cToken\\n        uint256 oErr;\\n        (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = vars.asset.getAccountSnapshot(\\n          account\\n        );\\n        if (oErr != 0) {\\n          // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n          return (Error.SNAPSHOT_ERROR, 0, 0, 0);\\n        }\\n      }\\n      {\\n        vars.collateralFactor = Exp({ mantissa: markets[address(vars.asset)].collateralFactorMantissa });\\n        vars.exchangeRate = Exp({ mantissa: vars.exchangeRateMantissa });\\n\\n        // Get the normalized price of the asset\\n        vars.oraclePriceMantissa = oracle.getUnderlyingPrice(vars.asset);\\n        if (vars.oraclePriceMantissa == 0) {\\n          return (Error.PRICE_ERROR, 0, 0, 0);\\n        }\\n        vars.oraclePrice = Exp({ mantissa: vars.oraclePriceMantissa });\\n\\n        // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n        vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\\n      }\\n      {\\n        // Exclude the asset-to-be-borrowed from the liquidity, except for when redeeming\\n        vars.assetAsCollateralValueCap = asComptrollerExtension().getAssetAsCollateralValueCap(\\n          vars.asset,\\n          cTokenModify,\\n          redeemTokens > 0,\\n          account\\n        );\\n\\n        // accumulate the collateral value to sumCollateral\\n        uint256 assetCollateralValue = mul_ScalarTruncate(vars.tokensToDenom, vars.cTokenBalance);\\n        if (assetCollateralValue > vars.assetAsCollateralValueCap)\\n          assetCollateralValue = vars.assetAsCollateralValueCap;\\n        vars.sumCollateral += assetCollateralValue;\\n      }\\n\\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n        vars.oraclePrice,\\n        vars.borrowBalance,\\n        vars.sumBorrowPlusEffects\\n      );\\n\\n      // Calculate effects of interacting with cTokenModify\\n      if (vars.asset == cTokenModify) {\\n        // redeem effect\\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n          vars.tokensToDenom,\\n          redeemTokens,\\n          vars.sumBorrowPlusEffects\\n        );\\n\\n        // borrow effect\\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\\n          vars.oraclePrice,\\n          borrowAmount,\\n          vars.sumBorrowPlusEffects\\n        );\\n\\n        uint256 repayEffect = mul_ScalarTruncate(vars.oraclePrice, repayAmount);\\n        if (repayEffect >= vars.sumBorrowPlusEffects) {\\n          vars.sumBorrowPlusEffects = 0;\\n        } else {\\n          vars.sumBorrowPlusEffects -= repayEffect;\\n        }\\n      }\\n    }\\n\\n    // These are safe, as the underflow condition is checked first\\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n      return (Error.NO_ERROR, vars.sumCollateral, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\\n    } else {\\n      return (Error.NO_ERROR, vars.sumCollateral, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n   * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n   * @param cTokenBorrowed The address of the borrowed cToken\\n   * @param cTokenCollateral The address of the collateral cToken\\n   * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n   * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n   */\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 actualRepayAmount\\n  ) external view override returns (uint256, uint256) {\\n    /* Read oracle prices for borrowed and collateral markets */\\n    uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(ICErc20(cTokenBorrowed));\\n    uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(ICErc20(cTokenCollateral));\\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n      return (uint256(Error.PRICE_ERROR), 0);\\n    }\\n\\n    /*\\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n     *  seizeTokens = seizeAmount / exchangeRate\\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n     */\\n    ICErc20 collateralCToken = ICErc20(cTokenCollateral);\\n    uint256 exchangeRateMantissa = collateralCToken.exchangeRateCurrent();\\n    uint256 seizeTokens;\\n    Exp memory numerator;\\n    Exp memory denominator;\\n    Exp memory ratio;\\n\\n    uint256 protocolSeizeShareMantissa = collateralCToken.protocolSeizeShareMantissa();\\n    uint256 feeSeizeShareMantissa = collateralCToken.feeSeizeShareMantissa();\\n\\n    /*\\n     * The liquidation penalty includes\\n     * - the liquidator incentive\\n     * - the protocol fees (Ionic admin fees)\\n     * - the market fee\\n     */\\n    Exp memory totalPenaltyMantissa = add_(\\n      add_(Exp({ mantissa: liquidationIncentiveMantissa }), Exp({ mantissa: protocolSeizeShareMantissa })),\\n      Exp({ mantissa: feeSeizeShareMantissa })\\n    );\\n\\n    numerator = mul_(totalPenaltyMantissa, Exp({ mantissa: priceBorrowedMantissa }));\\n    denominator = mul_(Exp({ mantissa: priceCollateralMantissa }), Exp({ mantissa: exchangeRateMantissa }));\\n    ratio = div_(numerator, denominator);\\n\\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n    return (uint256(Error.NO_ERROR), seizeTokens);\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Add a RewardsDistributor contracts.\\n   * @dev Admin function to add a RewardsDistributor contract\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _addRewardsDistributor(address distributor) external returns (uint256) {\\n    require(hasAdminRights(), \\\"!admin\\\");\\n\\n    // Check marker method\\n    require(IIonicFlywheel(distributor).isRewardsDistributor(), \\\"!isRewardsDistributor\\\");\\n\\n    // Check for existing RewardsDistributor\\n    for (uint256 i = 0; i < rewardsDistributors.length; i++) require(distributor != rewardsDistributors[i], \\\"!added\\\");\\n\\n    // Add RewardsDistributor to array\\n    rewardsDistributors.push(distributor);\\n    emit AddedRewardsDistributor(distributor);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the whitelist enforcement for the comptroller\\n   * @dev Admin function to set a new whitelist enforcement boolean\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_ENFORCEMENT_OWNER_CHECK);\\n    }\\n\\n    // Check if `enforceWhitelist` already equals `enforce`\\n    if (enforceWhitelist == enforce) {\\n      return uint256(Error.NO_ERROR);\\n    }\\n\\n    // Set comptroller's `enforceWhitelist` to `enforce`\\n    enforceWhitelist = enforce;\\n\\n    // Emit WhitelistEnforcementChanged(bool enforce);\\n    emit WhitelistEnforcementChanged(enforce);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the whitelist `statuses` for `suppliers`\\n   * @dev Admin function to set the whitelist `statuses` for `suppliers`\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_STATUS_OWNER_CHECK);\\n    }\\n\\n    // Set whitelist statuses for suppliers\\n    for (uint256 i = 0; i < suppliers.length; i++) {\\n      address supplier = suppliers[i];\\n\\n      if (statuses[i]) {\\n        // If not already whitelisted, add to whitelist\\n        if (!whitelist[supplier]) {\\n          whitelist[supplier] = true;\\n          whitelistArray.push(supplier);\\n          whitelistIndexes[supplier] = whitelistArray.length - 1;\\n        }\\n      } else {\\n        // If whitelisted, remove from whitelist\\n        if (whitelist[supplier]) {\\n          whitelistArray[whitelistIndexes[supplier]] = whitelistArray[whitelistArray.length - 1]; // Copy last item in list to location of item to be removed\\n          whitelistArray.pop(); // Reduce length by 1\\n          whitelistIndexes[whitelistArray[whitelistIndexes[supplier]]] = whitelistIndexes[supplier]; // Set whitelist index of moved item to correct index\\n          whitelistIndexes[supplier] = 0; // Reset supplier whitelist index to 0 for a gas refund\\n          whitelist[supplier] = false; // Tell the contract that the supplier is no longer whitelisted\\n        }\\n      }\\n    }\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets a new price oracle for the comptroller\\n   * @dev Admin function to set a new price oracle\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPriceOracle(BasePriceOracle newOracle) public returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n    }\\n\\n    // Track the old oracle for the comptroller\\n    BasePriceOracle oldOracle = oracle;\\n\\n    // Set comptroller's oracle to newOracle\\n    oracle = newOracle;\\n\\n    // Emit NewPriceOracle(oldOracle, newOracle)\\n    emit NewPriceOracle(oldOracle, newOracle);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the closeFactor used when liquidating borrows\\n   * @dev Admin function to set closeFactor\\n   * @param newCloseFactorMantissa New close factor, scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\\n    }\\n\\n    // Check limits\\n    Exp memory newCloseFactorExp = Exp({ mantissa: newCloseFactorMantissa });\\n    Exp memory lowLimit = Exp({ mantissa: closeFactorMinMantissa });\\n    if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n    }\\n\\n    Exp memory highLimit = Exp({ mantissa: closeFactorMaxMantissa });\\n    if (lessThanExp(highLimit, newCloseFactorExp)) {\\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\\n    }\\n\\n    // Set pool close factor to new close factor, remember old value\\n    uint256 oldCloseFactorMantissa = closeFactorMantissa;\\n    closeFactorMantissa = newCloseFactorMantissa;\\n\\n    // Emit event\\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets the collateralFactor for a market\\n   * @dev Admin function to set per-market collateralFactor\\n   * @param cToken The market to set the factor on\\n   * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setCollateralFactor(ICErc20 cToken, uint256 newCollateralFactorMantissa) public returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n    }\\n\\n    // Verify market is listed\\n    Market storage market = markets[address(cToken)];\\n    if (!market.isListed) {\\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n    }\\n\\n    Exp memory newCollateralFactorExp = Exp({ mantissa: newCollateralFactorMantissa });\\n\\n    // Check collateral factor <= 0.9\\n    Exp memory highLimit = Exp({ mantissa: collateralFactorMaxMantissa });\\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n    }\\n\\n    // If collateral factor != 0, fail if price == 0\\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n    }\\n\\n    // Set market's collateral factor to new collateral factor, remember old value\\n    uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n    // Emit event with asset, old collateral factor, and new collateral factor\\n    emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Sets liquidationIncentive\\n   * @dev Admin function to set liquidationIncentive\\n   * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n   */\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n    }\\n\\n    // Check de-scaled min <= newLiquidationIncentive <= max\\n    Exp memory newLiquidationIncentive = Exp({ mantissa: newLiquidationIncentiveMantissa });\\n    Exp memory minLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMinMantissa });\\n    if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n    }\\n\\n    Exp memory maxLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMaxMantissa });\\n    if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n    }\\n\\n    // Save current value for use in log\\n    uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\\n\\n    // Set liquidation incentive to new incentive\\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n    // Emit event with old incentive, new incentive\\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Add the market to the markets mapping and set it as listed\\n   * @dev Admin function to set isListed and add support for the market\\n   * @param cToken The address of the market (token) to list\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _supportMarket(ICErc20 cToken) internal returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n    }\\n\\n    // Is market already listed?\\n    if (markets[address(cToken)].isListed) {\\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n    }\\n\\n    // Check cToken.comptroller == this\\n    require(address(cToken.comptroller()) == address(this), \\\"!comptroller\\\");\\n\\n    // Make sure market is not already listed\\n    address underlying = ICErc20(address(cToken)).underlying();\\n\\n    if (address(cTokensByUnderlying[underlying]) != address(0)) {\\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n    }\\n\\n    // List market and emit event\\n    Market storage market = markets[address(cToken)];\\n    market.isListed = true;\\n    market.collateralFactorMantissa = 0;\\n    allMarkets.push(cToken);\\n    cTokensByUnderlying[underlying] = cToken;\\n    emit MarketListed(cToken);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\\n   * @dev Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n   */\\n  function _deployMarket(\\n    uint8 delegateType,\\n    bytes calldata constructorData,\\n    bytes calldata becomeImplData,\\n    uint256 collateralFactorMantissa\\n  ) external returns (uint256) {\\n    // Check caller is admin\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n    }\\n\\n    // Temporarily enable Ionic admin rights for asset deployment (storing the original value)\\n    bool oldIonicAdminHasRights = ionicAdminHasRights;\\n    ionicAdminHasRights = true;\\n\\n    // Deploy via Ionic admin\\n    ICErc20 cToken = ICErc20(IFeeDistributor(ionicAdmin).deployCErc20(delegateType, constructorData, becomeImplData));\\n    // Reset Ionic admin rights to the original value\\n    ionicAdminHasRights = oldIonicAdminHasRights;\\n    // Support market here in the Comptroller\\n    uint256 err = _supportMarket(cToken);\\n\\n    IFeeDistributor(ionicAdmin).authoritiesRegistry().reconfigureAuthority(address(this));\\n\\n    // Set collateral factor\\n    return err == uint256(Error.NO_ERROR) ? _setCollateralFactor(cToken, collateralFactorMantissa) : err;\\n  }\\n\\n  function _becomeImplementation() external {\\n    require(msg.sender == address(this), \\\"!self call\\\");\\n\\n    if (!_notEnteredInitialized) {\\n      _notEntered = true;\\n      _notEnteredInitialized = true;\\n    }\\n  }\\n\\n  /*** Helper Functions ***/\\n\\n  /**\\n   * @notice Returns true if the given cToken market has been deprecated\\n   * @dev All borrows in a deprecated cToken market can be immediately liquidated\\n   * @param cToken The market to check if deprecated\\n   */\\n  function isDeprecated(ICErc20 cToken) public view returns (bool) {\\n    return\\n      markets[address(cToken)].collateralFactorMantissa == 0 &&\\n      borrowGuardianPaused[address(cToken)] == true &&\\n      add_(add_(cToken.reserveFactorMantissa(), cToken.adminFeeMantissa()), cToken.ionicFeeMantissa()) == 1e18;\\n  }\\n\\n  function asComptrollerExtension() internal view returns (ComptrollerExtensionInterface) {\\n    return ComptrollerExtensionInterface(address(this));\\n  }\\n\\n  function _getExtensionFunctions() external pure virtual override returns (bytes4[] memory functionSelectors) {\\n    uint8 fnsCount = 32;\\n\\n    functionSelectors = new bytes4[](fnsCount);\\n\\n    functionSelectors[--fnsCount] = this.isDeprecated.selector;\\n    functionSelectors[--fnsCount] = this._deployMarket.selector;\\n    functionSelectors[--fnsCount] = this.getAssetsIn.selector;\\n    functionSelectors[--fnsCount] = this.checkMembership.selector;\\n    functionSelectors[--fnsCount] = this._setPriceOracle.selector;\\n    functionSelectors[--fnsCount] = this._setCloseFactor.selector;\\n    functionSelectors[--fnsCount] = this._setCollateralFactor.selector;\\n    functionSelectors[--fnsCount] = this._setLiquidationIncentive.selector;\\n    functionSelectors[--fnsCount] = this._setWhitelistEnforcement.selector;\\n    functionSelectors[--fnsCount] = this._setWhitelistStatuses.selector;\\n    functionSelectors[--fnsCount] = this._addRewardsDistributor.selector;\\n    functionSelectors[--fnsCount] = this.getHypotheticalAccountLiquidity.selector;\\n    functionSelectors[--fnsCount] = this.getMaxRedeemOrBorrow.selector;\\n    functionSelectors[--fnsCount] = this.enterMarkets.selector;\\n    functionSelectors[--fnsCount] = this.exitMarket.selector;\\n    functionSelectors[--fnsCount] = this.mintAllowed.selector;\\n    functionSelectors[--fnsCount] = this.redeemAllowed.selector;\\n    functionSelectors[--fnsCount] = this.redeemVerify.selector;\\n    functionSelectors[--fnsCount] = this.borrowAllowed.selector;\\n    functionSelectors[--fnsCount] = this.borrowWithinLimits.selector;\\n    functionSelectors[--fnsCount] = this.repayBorrowAllowed.selector;\\n    functionSelectors[--fnsCount] = this.liquidateBorrowAllowed.selector;\\n    functionSelectors[--fnsCount] = this.seizeAllowed.selector;\\n    functionSelectors[--fnsCount] = this.transferAllowed.selector;\\n    functionSelectors[--fnsCount] = this.mintVerify.selector;\\n    functionSelectors[--fnsCount] = this.getAccountLiquidity.selector;\\n    functionSelectors[--fnsCount] = this.liquidateCalculateSeizeTokens.selector;\\n    functionSelectors[--fnsCount] = this._beforeNonReentrant.selector;\\n    functionSelectors[--fnsCount] = this._afterNonReentrant.selector;\\n    functionSelectors[--fnsCount] = this._becomeImplementation.selector;\\n    functionSelectors[--fnsCount] = this.effectiveSupplyCaps.selector;\\n    functionSelectors[--fnsCount] = this.effectiveBorrowCaps.selector;\\n\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n  }\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  /**\\n   * @dev Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention.\\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\n   */\\n  function _beforeNonReentrant() external override {\\n    require(markets[msg.sender].isListed, \\\"!Comptroller:_beforeNonReentrant\\\");\\n    require(_notEntered, \\\"!reentered\\\");\\n    _notEntered = false;\\n  }\\n\\n  /**\\n   * @dev Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention.\\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\\n   */\\n  function _afterNonReentrant() external override {\\n    require(markets[msg.sender].isListed, \\\"!Comptroller:_afterNonReentrant\\\");\\n    _notEntered = true; // get a gas-refund post-Istanbul\\n  }\\n}\\n\",\"keccak256\":\"0x99b5df813bb4a7619169842591460bd0a13dc2f544f683f4420741bc28079e8a\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { BasePriceOracle } from \\\"../oracles/BasePriceOracle.sol\\\";\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { DiamondExtension } from \\\"../ionic/DiamondExtension.sol\\\";\\nimport { ComptrollerV4Storage } from \\\"../compound/ComptrollerStorage.sol\\\";\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\nimport { IHistoricalRates } from \\\"adrastia-periphery/rates/IHistoricalRates.sol\\\";\\n\\ninterface ComptrollerInterface {\\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\\n\\n  function _becomeImplementation() external;\\n\\n  function _deployMarket(\\n    uint8 delegateType,\\n    bytes memory constructorData,\\n    bytes calldata becomeImplData,\\n    uint256 collateralFactorMantissa\\n  ) external returns (uint256);\\n\\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\\n\\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\\n\\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\\n\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\\n\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\\n\\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\\n\\n  function _addRewardsDistributor(address distributor) external returns (uint256);\\n\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount,\\n    uint256 repayAmount\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n\\n  function getMaxRedeemOrBorrow(address account, ICErc20 cToken, bool isBorrow) external view returns (uint256);\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n  function exitMarket(address cToken) external returns (uint256);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\\n\\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\\n\\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256);\\n\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\\n\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external returns (uint256);\\n\\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external returns (uint256);\\n\\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function getAccountLiquidity(\\n    address account\\n  ) external view returns (uint256 error, uint256 collateralValue, uint256 liquidity, uint256 shortfall);\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 repayAmount\\n  ) external view returns (uint256, uint256);\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  function _beforeNonReentrant() external;\\n\\n  function _afterNonReentrant() external;\\n\\n  /*** New supply and borrow cap view functions ***/\\n\\n  /**\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveSupplyCaps(address cToken) external view returns (uint256 supplyCap);\\n\\n  /**\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveBorrowCaps(address cToken) external view returns (uint256 borrowCap);\\n}\\n\\ninterface ComptrollerStorageInterface {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function ionicAdmin() external view returns (address);\\n\\n  function ionicAdminHasRights() external view returns (bool);\\n\\n  function pendingAdmin() external view returns (address);\\n\\n  function oracle() external view returns (BasePriceOracle);\\n\\n  function pauseGuardian() external view returns (address);\\n\\n  function closeFactorMantissa() external view returns (uint256);\\n\\n  function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n  function isUserOfPool(address user) external view returns (bool);\\n\\n  function whitelist(address account) external view returns (bool);\\n\\n  function enforceWhitelist() external view returns (bool);\\n\\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\\n\\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\\n\\n  function suppliers(address account) external view returns (bool);\\n\\n  function cTokensByUnderlying(address) external view returns (address);\\n\\n  /**\\n   * Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the supply cap. Instead, use\\n   * `effectiveSupplyCaps` to get the correct supply cap.\\n   * @param cToken The address of the cToken.\\n   * @return The supply cap in the units of the underlying asset.\\n   */\\n  function supplyCaps(address cToken) external view returns (uint256);\\n\\n  /**\\n   * Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the borrow cap. Instead, use\\n   * `effectiveBorrowCaps` to get the correct borrow cap.\\n   * @param cToken The address of the cToken.\\n   * @return The borrow cap in the units of the underlying asset.\\n   */\\n  function borrowCaps(address cToken) external view returns (uint256);\\n\\n  function markets(address cToken) external view returns (bool, uint256);\\n\\n  function accountAssets(address, uint256) external view returns (address);\\n\\n  function borrowGuardianPaused(address cToken) external view returns (bool);\\n\\n  function mintGuardianPaused(address cToken) external view returns (bool);\\n\\n  function rewardsDistributors(uint256) external view returns (address);\\n}\\n\\ninterface SFSRegister {\\n  function register(address _recipient) external returns (uint256 tokenId);\\n}\\n\\ninterface ComptrollerExtensionInterface {\\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\\n\\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\\n\\n  function getAllMarkets() external view returns (ICErc20[] memory);\\n\\n  function getAllBorrowers() external view returns (address[] memory);\\n\\n  function getAllBorrowersCount() external view returns (uint256);\\n\\n  function getPaginatedBorrowers(\\n    uint256 page,\\n    uint256 pageSize\\n  ) external view returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\\n\\n  function getRewardsDistributors() external view returns (address[] memory);\\n\\n  function getAccruingFlywheels() external view returns (address[] memory);\\n\\n  function _supplyCapWhitelist(address cToken, address account, bool whitelisted) external;\\n\\n  function _setBorrowCapForCollateral(address cTokenBorrow, address cTokenCollateral, uint256 borrowCap) external;\\n\\n  function _setBorrowCapForCollateralWhitelist(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account,\\n    bool whitelisted\\n  ) external;\\n\\n  function isBorrowCapForCollateralWhitelisted(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account\\n  ) external view returns (bool);\\n\\n  function _blacklistBorrowingAgainstCollateral(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    bool blacklisted\\n  ) external;\\n\\n  function _blacklistBorrowingAgainstCollateralWhitelist(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account,\\n    bool whitelisted\\n  ) external;\\n\\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account\\n  ) external view returns (bool);\\n\\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\\n\\n  function _borrowCapWhitelist(address cToken, address account, bool whitelisted) external;\\n\\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\\n\\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\\n\\n  function getWhitelist() external view returns (address[] memory);\\n\\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\\n\\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\\n\\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\\n\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\n\\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\n\\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\\n\\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\\n\\n  function _setTransferPaused(bool state) external returns (bool);\\n\\n  function _setSeizePaused(bool state) external returns (bool);\\n\\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\\n\\n  function getAssetAsCollateralValueCap(\\n    ICErc20 collateral,\\n    ICErc20 cTokenModify,\\n    bool redeeming,\\n    address account\\n  ) external view returns (uint256);\\n\\n  function registerInSFS() external returns (uint256);\\n}\\n\\ninterface ComptrollerPrudentiaCapsExtInterface {\\n  /**\\n   * @notice Retrieves Adrastia Prudentia borrow cap config from storage.\\n   * @return The config.\\n   */\\n  function getBorrowCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\n\\n  /**\\n   * @notice Retrieves Adrastia Prudentia supply cap config from storage.\\n   * @return The config.\\n   */\\n  function getSupplyCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\n\\n  /**\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native supply caps.\\n   * @param newConfig The new config.\\n   */\\n  function _setSupplyCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\n\\n  /**\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native borrow caps.\\n   * @param newConfig The new config.\\n   */\\n  function _setBorrowCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\n}\\n\\ninterface UnitrollerInterface {\\n  function comptrollerImplementation() external view returns (address);\\n\\n  function _upgrade() external;\\n\\n  function _acceptAdmin() external returns (uint256);\\n\\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\\n\\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\\n}\\n\\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\\n\\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\\n\\ninterface IonicComptroller is\\n  ComptrollerInterface,\\n  ComptrollerExtensionInterface,\\n  UnitrollerInterface,\\n  ComptrollerStorageInterface\\n{\\n\\n}\\n\\nabstract contract ComptrollerBase is ComptrollerV4Storage {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  /**\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveSupplyCaps(address cToken) public view virtual returns (uint256 supplyCap) {\\n    PrudentiaLib.PrudentiaConfig memory capConfig = supplyCapConfig;\\n\\n    // Check if we're using Adrastia Prudentia for the supply cap\\n    if (capConfig.controller != address(0)) {\\n      // We have a controller, so we're using Adrastia Prudentia\\n\\n      address underlyingToken = ICErc20(cToken).underlying();\\n\\n      // Get the supply cap from Adrastia Prudentia\\n      supplyCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\n\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\n      // must scale the supply cap to get the correct amount\\n\\n      int256 scaleByDecimals = 18;\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n      if (success && data.length == 32) {\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\n      }\\n\\n      scaleByDecimals += capConfig.decimalShift;\\n\\n      if (scaleByDecimals >= 0) {\\n        // We're scaling up, so we need to multiply\\n        supplyCap *= 10 ** uint256(scaleByDecimals);\\n      } else {\\n        // We're scaling down, so we need to divide\\n        supplyCap /= 10 ** uint256(-scaleByDecimals);\\n      }\\n    } else {\\n      // We don't have a controller, so we're using the local supply cap\\n\\n      // Get the supply cap from the local supply cap\\n      supplyCap = supplyCaps[cToken];\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveBorrowCaps(address cToken) public view virtual returns (uint256 borrowCap) {\\n    PrudentiaLib.PrudentiaConfig memory capConfig = borrowCapConfig;\\n\\n    // Check if we're using Adrastia Prudentia for the borrow cap\\n    if (capConfig.controller != address(0)) {\\n      // We have a controller, so we're using Adrastia Prudentia\\n\\n      address underlyingToken = ICErc20(cToken).underlying();\\n\\n      // Get the borrow cap from Adrastia Prudentia\\n      borrowCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\n\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\n      // must scale the supply cap to get the correct amount\\n\\n      int256 scaleByDecimals = 18;\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n      if (success && data.length == 32) {\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\n      }\\n\\n      scaleByDecimals += capConfig.decimalShift;\\n\\n      if (scaleByDecimals >= 0) {\\n        // We're scaling up, so we need to multiply\\n        borrowCap *= 10 ** uint256(scaleByDecimals);\\n      } else {\\n        // We're scaling down, so we need to divide\\n        borrowCap /= 10 ** uint256(-scaleByDecimals);\\n      }\\n    } else {\\n      // We don't have a controller, so we're using the local borrow cap\\n      borrowCap = borrowCaps[cToken];\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7632af3b32bc1fccd14255b6885e74c4d5ac8de5f00fb8ed67186810d286424f\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFeeDistributor.sol\\\";\\nimport \\\"../oracles/BasePriceOracle.sol\\\";\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /*\\n   * Administrator for Ionic\\n   */\\n  address payable public ionicAdmin;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Whether or not the Ionic admin has admin rights\\n   */\\n  bool public ionicAdminHasRights = true;\\n\\n  /**\\n   * @notice Whether or not the admin has admin rights\\n   */\\n  bool public adminHasRights = true;\\n\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\\n  }\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  BasePriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint256 public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint256 public liquidationIncentiveMantissa;\\n\\n  /*\\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint256 internal maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => ICErc20[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    // Multiplier representing the most one can borrow against their collateral in this market.\\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\\n    // Must be between 0 and 1, and stored as a mantissa.\\n    uint256 collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n  }\\n\\n  /**\\n   * @notice Official mapping of cTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /// @notice A list of all markets\\n  ICErc20[] public allMarkets;\\n\\n  /**\\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\\n   */\\n  mapping(address => bool) internal borrowers;\\n\\n  /// @notice A list of all borrowers who have entered markets\\n  address[] public allBorrowers;\\n\\n  // Indexes of borrower account addresses in the `allBorrowers` array\\n  mapping(address => uint256) internal borrowerIndexes;\\n\\n  /**\\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n   */\\n  mapping(address => bool) public suppliers;\\n\\n  /// @notice All cTokens addresses mapped by their underlying token addresses\\n  mapping(address => ICErc20) public cTokensByUnderlying;\\n\\n  /// @notice Whether or not the supplier whitelist is enforced\\n  bool public enforceWhitelist;\\n\\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n  mapping(address => bool) public whitelist;\\n\\n  /// @notice An array of all whitelisted accounts\\n  address[] public whitelistArray;\\n\\n  // Indexes of account addresses in the `whitelistArray` array\\n  mapping(address => uint256) internal whitelistIndexes;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  /// @dev If Adrastia Prudentia is enabled, the values the borrow cap guardian sets are ignored.\\n  address public borrowCapGuardian;\\n\\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveBorrowCaps` instead.\\n  mapping(address => uint256) public borrowCaps;\\n\\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveSupplyCaps` instead.\\n  mapping(address => uint256) public supplyCaps;\\n\\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n  address[] public rewardsDistributors;\\n\\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n  bool internal _notEntered;\\n\\n  /// @dev Whether or not _notEntered has been initialized\\n  bool internal _notEnteredInitialized;\\n\\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\\n  address[] public nonAccruingRewardsDistributors;\\n\\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\\n\\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\\n    internal borrowingAgainstCollateralBlacklistWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n  /// @dev Adrastia Prudentia config for controlling borrow caps.\\n  PrudentiaLib.PrudentiaConfig internal borrowCapConfig;\\n\\n  /// @dev Adrastia Prudentia config for controlling supply caps.\\n  PrudentiaLib.PrudentiaConfig internal supplyCapConfig;\\n}\\n\",\"keccak256\":\"0xa4a8110e666a93c1228c914f1414131e0f3b93385826bb72f6f93d429e514286\",\"license\":\"UNLICENSED\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return uint256 The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xcea1d290397e1c8eac89c96738e7ec55259a575f878152eeccf33c0cf6d008e5\",\"license\":\"UNLICENSED\"},\"contracts/compound/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ncontract ComptrollerErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    COMPTROLLER_MISMATCH,\\n    INSUFFICIENT_SHORTFALL,\\n    INSUFFICIENT_LIQUIDITY,\\n    INVALID_CLOSE_FACTOR,\\n    INVALID_COLLATERAL_FACTOR,\\n    INVALID_LIQUIDATION_INCENTIVE,\\n    MARKET_NOT_LISTED,\\n    MARKET_ALREADY_LISTED,\\n    MATH_ERROR,\\n    NONZERO_BORROW_BALANCE,\\n    PRICE_ERROR,\\n    REJECTION,\\n    SNAPSHOT_ERROR,\\n    TOO_MANY_ASSETS,\\n    TOO_MUCH_REPAY,\\n    SUPPLIER_NOT_WHITELISTED,\\n    BORROW_BELOW_MIN,\\n    SUPPLY_ABOVE_MAX,\\n    NONZERO_TOTAL_SUPPLY\\n  }\\n\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n    ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\\n    EXIT_MARKET_BALANCE_OWED,\\n    EXIT_MARKET_REJECTION,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_OWNER_CHECK,\\n    SET_CLOSE_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n    SET_PRICE_ORACLE_OWNER_CHECK,\\n    SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\\n    SET_WHITELIST_STATUS_OWNER_CHECK,\\n    SUPPORT_MARKET_EXISTS,\\n    SUPPORT_MARKET_OWNER_CHECK,\\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n    UNSUPPORT_MARKET_OWNER_CHECK,\\n    UNSUPPORT_MARKET_DOES_NOT_EXIST,\\n    UNSUPPORT_MARKET_IN_USE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return uint256(err);\\n  }\\n}\\n\\ncontract TokenErrorReporter {\\n  enum Error {\\n    NO_ERROR,\\n    UNAUTHORIZED,\\n    BAD_INPUT,\\n    COMPTROLLER_REJECTION,\\n    COMPTROLLER_CALCULATION_ERROR,\\n    INTEREST_RATE_MODEL_ERROR,\\n    INVALID_ACCOUNT_PAIR,\\n    INVALID_CLOSE_AMOUNT_REQUESTED,\\n    INVALID_COLLATERAL_FACTOR,\\n    MATH_ERROR,\\n    MARKET_NOT_FRESH,\\n    MARKET_NOT_LISTED,\\n    TOKEN_INSUFFICIENT_ALLOWANCE,\\n    TOKEN_INSUFFICIENT_BALANCE,\\n    TOKEN_INSUFFICIENT_CASH,\\n    TOKEN_TRANSFER_IN_FAILED,\\n    TOKEN_TRANSFER_OUT_FAILED,\\n    UTILIZATION_ABOVE_MAX\\n  }\\n\\n  /*\\n   * Note: FailureInfo (but not Error) is kept in alphabetical order\\n   *       This is because FailureInfo grows significantly faster, and\\n   *       the order of Error has some meaning, while the order of FailureInfo\\n   *       is entirely arbitrary.\\n   */\\n  enum FailureInfo {\\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_IONIC_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    BORROW_ACCRUE_INTEREST_FAILED,\\n    BORROW_CASH_NOT_AVAILABLE,\\n    BORROW_FRESHNESS_CHECK,\\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    BORROW_MARKET_NOT_LISTED,\\n    BORROW_COMPTROLLER_REJECTION,\\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n    LIQUIDATE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n    LIQUIDATE_FRESHNESS_CHECK,\\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n    LIQUIDATE_SEIZE_TOO_MUCH,\\n    MINT_ACCRUE_INTEREST_FAILED,\\n    MINT_COMPTROLLER_REJECTION,\\n    MINT_EXCHANGE_CALCULATION_FAILED,\\n    MINT_EXCHANGE_RATE_READ_FAILED,\\n    MINT_FRESHNESS_CHECK,\\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    MINT_TRANSFER_IN_FAILED,\\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\\n    NEW_UTILIZATION_RATE_ABOVE_MAX,\\n    REDEEM_ACCRUE_INTEREST_FAILED,\\n    REDEEM_COMPTROLLER_REJECTION,\\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\\n    REDEEM_FRESHNESS_CHECK,\\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n    WITHDRAW_IONIC_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_IONIC_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_IONIC_FEES_FRESH_CHECK,\\n    WITHDRAW_IONIC_FEES_VALIDATION,\\n    WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\\n    WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\\n    WITHDRAW_ADMIN_FEES_FRESH_CHECK,\\n    WITHDRAW_ADMIN_FEES_VALIDATION,\\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n    REDUCE_RESERVES_ADMIN_CHECK,\\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n    REDUCE_RESERVES_FRESH_CHECK,\\n    REDUCE_RESERVES_VALIDATION,\\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_COMPTROLLER_REJECTION,\\n    REPAY_BORROW_FRESHNESS_CHECK,\\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n    SET_COLLATERAL_FACTOR_VALIDATION,\\n    SET_COMPTROLLER_OWNER_CHECK,\\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\\n    SET_PENDING_ADMIN_OWNER_CHECK,\\n    SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_ADMIN_FEE_ADMIN_CHECK,\\n    SET_ADMIN_FEE_FRESH_CHECK,\\n    SET_ADMIN_FEE_BOUNDS_CHECK,\\n    SET_IONIC_FEE_ACCRUE_INTEREST_FAILED,\\n    SET_IONIC_FEE_FRESH_CHECK,\\n    SET_IONIC_FEE_BOUNDS_CHECK,\\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\\n    SET_RESERVE_FACTOR_FRESH_CHECK,\\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n    TRANSFER_COMPTROLLER_REJECTION,\\n    TRANSFER_NOT_ALLOWED,\\n    TRANSFER_NOT_ENOUGH,\\n    TRANSFER_TOO_MUCH,\\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n    ADD_RESERVES_FRESH_CHECK,\\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n  }\\n\\n  /**\\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n   **/\\n  event Failure(uint256 error, uint256 info, uint256 detail);\\n\\n  /**\\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n   */\\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), 0);\\n\\n    return uint256(err);\\n  }\\n\\n  /**\\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n   */\\n  function failOpaque(\\n    Error err,\\n    FailureInfo info,\\n    uint256 opaqueError\\n  ) internal returns (uint256) {\\n    emit Failure(uint256(err), uint256(info), opaqueError);\\n\\n    return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint256(err);\\n  }\\n}\\n\",\"keccak256\":\"0xad342553cda4d7b7e40678c636a406bc2785be2117a29d9b1cb52e747726745e\",\"license\":\"UNLICENSED\"},\"contracts/compound/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n  /**\\n   * @dev Creates an exponential from numerator and denominator values.\\n   *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n   *            or if `denom` is zero.\\n   */\\n  function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\\n    if (err1 != MathError.NO_ERROR) {\\n      return (err1, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n  }\\n\\n  /**\\n   * @dev Adds two exponentials, returning a new exponential.\\n   */\\n  function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\\n\\n    return (error, Exp({ mantissa: result }));\\n  }\\n\\n  /**\\n   * @dev Subtracts two exponentials, returning a new exponential.\\n   */\\n  function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\\n\\n    return (error, Exp({ mantissa: result }));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, returning a new Exp.\\n   */\\n  function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, truncate(product));\\n  }\\n\\n  /**\\n   * @dev Divide an Exp by a scalar, returning a new Exp.\\n   */\\n  function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n  }\\n\\n  /**\\n   * @dev Divide a scalar by an Exp, returning a new Exp.\\n   */\\n  function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n    /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n    (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n    return getExp(numerator, divisor.mantissa);\\n  }\\n\\n  /**\\n   * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n   */\\n  function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\\n    (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, 0);\\n    }\\n\\n    return (MathError.NO_ERROR, truncate(fraction));\\n  }\\n\\n  /**\\n   * @dev Multiplies two exponentials, returning a new exponential.\\n   */\\n  function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n    if (err0 != MathError.NO_ERROR) {\\n      return (err0, Exp({ mantissa: 0 }));\\n    }\\n\\n    // We add half the scale before dividing so that we get rounding instead of truncation.\\n    //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n    // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n    (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n    if (err1 != MathError.NO_ERROR) {\\n      return (err1, Exp({ mantissa: 0 }));\\n    }\\n\\n    (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n    // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n    assert(err2 == MathError.NO_ERROR);\\n\\n    return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n  }\\n\\n  /**\\n   * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n   */\\n  function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\\n    return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n  }\\n\\n  /**\\n   * @dev Multiplies three exponentials, returning a new exponential.\\n   */\\n  function mulExp3(\\n    Exp memory a,\\n    Exp memory b,\\n    Exp memory c\\n  ) internal pure returns (MathError, Exp memory) {\\n    (MathError err, Exp memory ab) = mulExp(a, b);\\n    if (err != MathError.NO_ERROR) {\\n      return (err, ab);\\n    }\\n    return mulExp(ab, c);\\n  }\\n\\n  /**\\n   * @dev Divides two exponentials, returning a new exponential.\\n   *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n   *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n   */\\n  function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n    return getExp(a.mantissa, b.mantissa);\\n  }\\n}\\n\",\"keccak256\":\"0xf1b6442cbde756ce56dc5507487b1769905147f390fdf88e1d59a66bc3e2161e\",\"license\":\"UNLICENSED\"},\"contracts/compound/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n  uint256 constant expScale = 1e18;\\n  uint256 constant doubleScale = 1e36;\\n  uint256 constant halfExpScale = expScale / 2;\\n  uint256 constant mantissaOne = expScale;\\n\\n  struct Exp {\\n    uint256 mantissa;\\n  }\\n\\n  struct Double {\\n    uint256 mantissa;\\n  }\\n\\n  /**\\n   * @dev Truncates the given exp to a whole number value.\\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n   */\\n  function truncate(Exp memory exp) internal pure returns (uint256) {\\n    // Note: We are not using careful math here as we're performing a division that cannot fail\\n    return exp.mantissa / expScale;\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n   */\\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return truncate(product);\\n  }\\n\\n  /**\\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n   */\\n  function mul_ScalarTruncateAddUInt(\\n    Exp memory a,\\n    uint256 scalar,\\n    uint256 addend\\n  ) internal pure returns (uint256) {\\n    Exp memory product = mul_(a, scalar);\\n    return add_(truncate(product), addend);\\n  }\\n\\n  /**\\n   * @dev Checks if first Exp is less than second Exp.\\n   */\\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa < right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp <= right Exp.\\n   */\\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa <= right.mantissa;\\n  }\\n\\n  /**\\n   * @dev Checks if left Exp > right Exp.\\n   */\\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n    return left.mantissa > right.mantissa;\\n  }\\n\\n  /**\\n   * @dev returns true if Exp is exactly zero\\n   */\\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\\n    return value.mantissa == 0;\\n  }\\n\\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n    require(n < 2**224, errorMessage);\\n    return uint224(n);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return add_(a, b, \\\"addition overflow\\\");\\n  }\\n\\n  function add_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n  }\\n\\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub_(a, b, \\\"subtraction underflow\\\");\\n  }\\n\\n  function sub_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n  }\\n\\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / expScale;\\n  }\\n\\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n  }\\n\\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: mul_(a.mantissa, b) });\\n  }\\n\\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return mul_(a, b.mantissa) / doubleScale;\\n  }\\n\\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mul_(a, b, \\\"multiplication overflow\\\");\\n  }\\n\\n  function mul_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    uint256 c = a * b;\\n    require(c / a == b, errorMessage);\\n    return c;\\n  }\\n\\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n  }\\n\\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n    return Exp({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, expScale), b.mantissa);\\n  }\\n\\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n  }\\n\\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(a.mantissa, b) });\\n  }\\n\\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n    return div_(mul_(a, doubleScale), b.mantissa);\\n  }\\n\\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div_(a, b, \\\"divide by zero\\\");\\n  }\\n\\n  function div_(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    return a / b;\\n  }\\n\\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n  }\\n}\\n\",\"keccak256\":\"0xec0df0038026b4e9c272de575121befd31d3a306fec5f157aaf1625fc08cfe69\",\"license\":\"UNLICENSED\"},\"contracts/compound/IERC4626.sol\":{\"content\":\"pragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { EIP20Interface } from \\\"./EIP20Interface.sol\\\";\\n\\ninterface IERC4626 is EIP20Interface {\\n  /*----------------------------------------------------------------\\n                                Events\\n    ----------------------------------------------------------------*/\\n\\n  event Deposit(address indexed from, address indexed to, uint256 value);\\n\\n  event Withdraw(address indexed from, address indexed to, uint256 value);\\n\\n  /*----------------------------------------------------------------\\n                            Mutable Functions\\n    ----------------------------------------------------------------*/\\n\\n  /**\\n      @notice Deposit a specific amount of underlying tokens.\\n      @param underlyingAmount The amount of the underlying token to deposit.\\n      @param to The address to receive shares corresponding to the deposit\\n      @return shares The shares in the vault credited to `to`\\n    */\\n  function deposit(uint256 underlyingAmount, address to) external returns (uint256 shares);\\n\\n  /**\\n      @notice Mint an exact amount of shares for a variable amount of underlying tokens.\\n      @param shareAmount The amount of vault shares to mint.\\n      @param to The address to receive shares corresponding to the mint.\\n      @return underlyingAmount The amount of the underlying tokens deposited from the mint call.\\n    */\\n  function mint(uint256 shareAmount, address to) external returns (uint256 underlyingAmount);\\n\\n  /**\\n      @notice Withdraw a specific amount of underlying tokens.\\n      @param underlyingAmount The amount of the underlying token to withdraw.\\n      @param to The address to receive underlying corresponding to the withdrawal.\\n      @param from The address to burn shares from corresponding to the withdrawal.\\n      @return shares The shares in the vault burned from sender\\n    */\\n  function withdraw(\\n    uint256 underlyingAmount,\\n    address to,\\n    address from\\n  ) external returns (uint256 shares);\\n\\n  /**\\n      @notice Redeem a specific amount of shares for underlying tokens.\\n      @param shareAmount The amount of shares to redeem.\\n      @param to The address to receive underlying corresponding to the redemption.\\n      @param from The address to burn shares from corresponding to the redemption.\\n      @return value The underlying amount transferred to `to`.\\n    */\\n  function redeem(\\n    uint256 shareAmount,\\n    address to,\\n    address from\\n  ) external returns (uint256 value);\\n\\n  /*----------------------------------------------------------------\\n                            View Functions\\n    ----------------------------------------------------------------*/\\n  /** \\n      @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n      @return the address of the asset\\n    */\\n  function asset() external view returns (address);\\n\\n  /** \\n      @notice Returns a user's Vault balance in underlying tokens.\\n      @param user The user to get the underlying balance of.\\n      @return balance The user's Vault balance in underlying tokens.\\n    */\\n  function balanceOfUnderlying(address user) external view returns (uint256 balance);\\n\\n  /** \\n      @notice Calculates the total amount of underlying tokens the Vault manages.\\n      @return The total amount of underlying tokens the Vault manages.\\n    */\\n  function totalAssets() external view returns (uint256);\\n\\n  /** \\n      @notice Returns the value in underlying terms of one vault token. \\n     */\\n  function exchangeRate() external view returns (uint256);\\n\\n  /**\\n      @notice Returns the amount of vault tokens that would be obtained if depositing a given amount of underlying tokens in a `deposit` call.\\n      @param underlyingAmount the input amount of underlying tokens\\n      @return shareAmount the corresponding amount of shares out from a deposit call with `underlyingAmount` in\\n     */\\n  function previewDeposit(uint256 underlyingAmount) external view returns (uint256 shareAmount);\\n\\n  /**\\n      @notice Returns the amount of underlying tokens that would be deposited if minting a given amount of shares in a `mint` call.\\n      @param shareAmount the amount of shares from a mint call.\\n      @return underlyingAmount the amount of underlying tokens corresponding to the mint call\\n     */\\n  function previewMint(uint256 shareAmount) external view returns (uint256 underlyingAmount);\\n\\n  /**\\n      @notice Returns the amount of vault tokens that would be burned if withdrawing a given amount of underlying tokens in a `withdraw` call.\\n      @param underlyingAmount the input amount of underlying tokens\\n      @return shareAmount the corresponding amount of shares out from a withdraw call with `underlyingAmount` in\\n     */\\n  function previewWithdraw(uint256 underlyingAmount) external view returns (uint256 shareAmount);\\n\\n  /**\\n      @notice Returns the amount of underlying tokens that would be obtained if redeeming a given amount of shares in a `redeem` call.\\n      @param shareAmount the amount of shares from a redeem call.\\n      @return underlyingAmount the amount of underlying tokens corresponding to the redeem call\\n     */\\n  function previewRedeem(uint256 shareAmount) external view returns (uint256 underlyingAmount);\\n}\\n\",\"keccak256\":\"0x1dc7b6dc2f1202ca16bff4eb488bb5bfcd6a48202996663a7220a888b261d7cb\"},\"contracts/compound/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../ionic/AuthoritiesRegistry.sol\\\";\\n\\ninterface IFeeDistributor {\\n  function minBorrowEth() external view returns (uint256);\\n\\n  function maxUtilizationRate() external view returns (uint256);\\n\\n  function interestFeeRate() external view returns (uint256);\\n\\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\n\\n  function latestCErc20Delegate(uint8 delegateType)\\n    external\\n    view\\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\\n\\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\\n\\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\\n\\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\\n\\n  function deployCErc20(\\n    uint8 delegateType,\\n    bytes calldata constructorData,\\n    bytes calldata becomeImplData\\n  ) external returns (address);\\n\\n  function canCall(\\n    address pool,\\n    address user,\\n    address target,\\n    bytes4 functionSig\\n  ) external view returns (bool);\\n\\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\\n\\n  fallback() external payable;\\n\\n  receive() external payable;\\n}\\n\",\"keccak256\":\"0xa822e2942e6a88851968d5f3bda48709713c84d556031a1dd3db5dfd06121d3e\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\",\"license\":\"UNLICENSED\"},\"contracts/compound/Unitroller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"./Comptroller.sol\\\";\\nimport { DiamondExtension, DiamondBase, LibDiamond } from \\\"../ionic/DiamondExtension.sol\\\";\\n\\n/**\\n * @title Unitroller\\n * @dev Storage for the comptroller is at this address, while execution is delegated via the Diamond Extensions\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is ComptrollerV3Storage, ComptrollerErrorReporter, DiamondBase {\\n  /**\\n   * @notice Event emitted when the admin rights are changed\\n   */\\n  event AdminRightsToggled(bool hasRights);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is changed\\n   */\\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n  /**\\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  constructor(address payable _ionicAdmin) {\\n    admin = msg.sender;\\n    ionicAdmin = _ionicAdmin;\\n  }\\n\\n  /*** Admin Functions ***/\\n\\n  /**\\n   * @notice Toggles admin rights.\\n   * @param hasRights Boolean indicating if the admin is to have rights.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _toggleAdminRights(bool hasRights) external returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\\n    }\\n\\n    // Check that rights have not already been set to the desired value\\n    if (adminHasRights == hasRights) return uint256(Error.NO_ERROR);\\n\\n    adminHasRights = hasRights;\\n    emit AdminRightsToggled(hasRights);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n   * @param newPendingAdmin New pending admin.\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\\n    if (!hasAdminRights()) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n    }\\n\\n    address oldPendingAdmin = pendingAdmin;\\n    pendingAdmin = newPendingAdmin;\\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n   * @dev Admin function for pending admin to accept role and update admin\\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n   */\\n  function _acceptAdmin() public returns (uint256) {\\n    // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n    }\\n\\n    // Save current values for inclusion in log\\n    address oldAdmin = admin;\\n    address oldPendingAdmin = pendingAdmin;\\n\\n    admin = pendingAdmin;\\n    pendingAdmin = address(0);\\n\\n    emit NewAdmin(oldAdmin, admin);\\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n    return uint256(Error.NO_ERROR);\\n  }\\n\\n  function comptrollerImplementation() public view returns (address) {\\n    return LibDiamond.getExtensionForFunction(bytes4(keccak256(bytes(\\\"_deployMarket(uint8,bytes,bytes,uint256)\\\"))));\\n  }\\n\\n  /**\\n   * @dev upgrades the implementation if necessary\\n   */\\n  function _upgrade() external {\\n    require(msg.sender == address(this) || hasAdminRights(), \\\"!self || !admin\\\");\\n\\n    address currentImplementation = comptrollerImplementation();\\n    address latestComptrollerImplementation = IFeeDistributor(ionicAdmin).latestComptrollerImplementation(\\n      currentImplementation\\n    );\\n\\n    _updateExtensions(latestComptrollerImplementation);\\n\\n    if (currentImplementation != latestComptrollerImplementation) {\\n      // reinitialize\\n      _functionCall(address(this), abi.encodeWithSignature(\\\"_becomeImplementation()\\\"), \\\"!become impl\\\");\\n    }\\n  }\\n\\n  function _functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.call(data);\\n\\n    if (!success) {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n\\n    return returndata;\\n  }\\n\\n  function _updateExtensions(address currentComptroller) internal {\\n    address[] memory latestExtensions = IFeeDistributor(ionicAdmin).getComptrollerExtensions(currentComptroller);\\n    address[] memory currentExtensions = LibDiamond.listExtensions();\\n\\n    // removed the current (old) extensions\\n    for (uint256 i = 0; i < currentExtensions.length; i++) {\\n      LibDiamond.removeExtension(DiamondExtension(currentExtensions[i]));\\n    }\\n    // add the new extensions\\n    for (uint256 i = 0; i < latestExtensions.length; i++) {\\n      LibDiamond.addExtension(DiamondExtension(latestExtensions[i]));\\n    }\\n  }\\n\\n  /**\\n   * @dev register a logic extension\\n   * @param extensionToAdd the extension whose functions are to be added\\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\\n   */\\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external override {\\n    require(hasAdminRights(), \\\"!unauthorized\\\");\\n    LibDiamond.registerExtension(extensionToAdd, extensionToReplace);\\n  }\\n}\\n\",\"keccak256\":\"0xcea89eb6bccd6ab62b57e42d483fd3638a0296ec9aae45d21f80a521004cc9e8\",\"license\":\"UNLICENSED\"},\"contracts/external/hypernative/interfaces/IHypernativeOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IHypernativeOracle {\\n    function register(address account, bool isStrictMode) external;\\n    function validateForbiddenAccountInteraction(address sender) external view;\\n    function validateForbiddenContextInteraction(address origin, address sender) external view;\\n    function validateBlacklistedAccountInteraction(address sender) external;\\n}\",\"keccak256\":\"0x0d0cabf23ce22f610eeea557c588d74011bb64cee59785f796635c2df5a6f5e3\",\"license\":\"MIT\"},\"contracts/external/pyth/IExpressRelay.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.0;\\n\\ninterface IExpressRelay {\\n    // Check if the combination of protocol and permissionKey is allowed within this transaction.\\n    // This will return true if and only if it's being called while executing the auction winner(s) call.\\n    // @param protocolFeeReceiver The address of the protocol that is gating an action behind this permission\\n    // @param permissionId The id that represents the action being gated\\n    // @return permissioned True if the permission is allowed, false otherwise\\n    function isPermissioned(\\n        address protocolFeeReceiver,\\n        bytes calldata permissionId\\n    ) external view returns (bool permissioned);\\n}\\n\",\"keccak256\":\"0xfcd165d263ba7372726637a004aca64177334e48f51c8c9ed27ce7a63ebec5e9\",\"license\":\"Apache 2\"},\"contracts/external/pyth/IExpressRelayFeeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.0;\\n\\ninterface IExpressRelayFeeReceiver {\\n    // Receive the proceeds of an auction.\\n    // @param permissionKey The permission key where the auction was conducted on.\\n    function receiveAuctionProceedings(\\n        bytes calldata permissionKey\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xc91591ca7c7e9a2659768a9142fa4dfbd7bd0494dabd853a915d72446a5f74a0\",\"license\":\"Apache 2\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xc30635313c081ea723c128678f4d45c48aac88080d91578e8c4374774d26cba2\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV3FlashCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#flash\\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\\ninterface IUniswapV3FlashCallback {\\n  /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\\n  /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n  /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\\n  /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\\n  function uniswapV3FlashCallback(\\n    uint256 fee0,\\n    uint256 fee1,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xbc26730db16259a49c30bd7bd880bb7e48ad94853087a373ba787e406ca969f3\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IUniswapV3PoolActions.sol\\\";\\n\\ninterface IUniswapV3Pool is IUniswapV3PoolActions {\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function fee() external view returns (uint24);\\n\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtPriceX96,\\n      int24 tick,\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext,\\n      uint8 feeProtocol,\\n      bool unlocked\\n    );\\n\\n  function liquidity() external view returns (uint128);\\n\\n  function observe(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory tickCumulatives, uint160[] memory liquidityCumulatives);\\n\\n  function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 liquidityCumulative,\\n      bool initialized\\n    );\\n\\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityGross,\\n      int128 liquidityNet,\\n      uint256 feeGrowthOutside0X128,\\n      uint256 feeGrowthOutside1X128,\\n      int56 tickCumulativeOutside,\\n      uint160 secondsPerLiquidityOutsideX128,\\n      uint32 secondsOutside,\\n      bool initialized\\n    );\\n\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n\\n  function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n      uint128 _liquidity,\\n      uint256 feeGrowthInside0LastX128,\\n      uint256 feeGrowthInside1LastX128,\\n      uint128 tokensOwed0,\\n      uint128 tokensOwed1\\n    );\\n}\\n\",\"keccak256\":\"0x815e94e8e575e572117cf045489c699e2e0cb56b7d2dd1a9adb1b0b1f8ac25e1\",\"license\":\"GPL-3.0-only\"},\"contracts/external/uniswap/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n  /// @notice Sets the initial price for the pool\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n  function initialize(uint160 sqrtPriceX96) external;\\n\\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n  /// @param recipient The address for which the liquidity will be created\\n  /// @param tickLower The lower tick of the position in which to add liquidity\\n  /// @param tickUpper The upper tick of the position in which to add liquidity\\n  /// @param amount The amount of liquidity to mint\\n  /// @param data Any data that should be passed through to the callback\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n  function mint(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount,\\n    bytes calldata data\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Collects tokens owed to a position\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n  /// @param recipient The address which should receive the fees collected\\n  /// @param tickLower The lower tick of the position for which to collect fees\\n  /// @param tickUpper The upper tick of the position for which to collect fees\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount0Requested,\\n    uint128 amount1Requested\\n  ) external returns (uint128 amount0, uint128 amount1);\\n\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n  /// @dev Fees must be collected separately via a call to #collect\\n  /// @param tickLower The lower tick of the position for which to burn liquidity\\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\\n  /// @param amount How much liquidity to burn\\n  /// @return amount0 The amount of token0 sent to the recipient\\n  /// @return amount1 The amount of token1 sent to the recipient\\n  function burn(\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 amount\\n  ) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Swap token0 for token1, or token1 for token0\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n  /// @param recipient The address to receive the output of the swap\\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\n  /// @param amount0 The amount of token0 to send\\n  /// @param amount1 The amount of token1 to send\\n  /// @param data Any data to be passed through to the callback\\n  function flash(\\n    address recipient,\\n    uint256 amount0,\\n    uint256 amount1,\\n    bytes calldata data\\n  ) external;\\n\\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n  /// the input observationCardinalityNext.\\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x01e66a0dca41f6e36bc20da4f66ff0e47b6b09ee9dcf59ce272a6e15a6c91a19\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/uniswap/quoter/interfaces/IUniswapV3Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IUniswapV3Quoter {\\n  /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\\n  /// @param amountIn The amount of the first token to swap\\n  /// @return amountOut The amount of the last token that would be received\\n  function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n  /// @param tokenIn The token being swapped in\\n  /// @param tokenOut The token being swapped out\\n  /// @param fee The fee of the token pool to consider for the pair\\n  /// @param amountIn The desired input amount\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n  /// @return amountOut The amount of `tokenOut` that would be received\\n  function quoteExactInputSingle(\\n    address tokenIn,\\n    address tokenOut,\\n    uint24 fee,\\n    uint256 amountIn,\\n    uint160 sqrtPriceLimitX96\\n  ) external returns (uint256 amountOut);\\n\\n  /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n  /// @param amountOut The amount of the last token to receive\\n  /// @return amountIn The amount of first token required to be paid\\n  function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n  /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n  /// @param tokenIn The token being swapped in\\n  /// @param tokenOut The token being swapped out\\n  /// @param fee The fee of the token pool to consider for the pair\\n  /// @param amountOut The desired output amount\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n  /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n  function quoteExactOutputSingle(\\n    address tokenIn,\\n    address tokenOut,\\n    uint24 fee,\\n    uint256 amountOut,\\n    uint160 sqrtPriceLimitX96\\n  ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xfebe8703ca93969f7314c5eefcd48125059abaa94182dac93ae202e761055d88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ionic/AddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title AddressesProvider\\n * @notice The Addresses Provider serves as a central storage of system internal and external\\n *         contract addresses that change between deploys and across chains\\n * @author Veliko Minkov <veliko@midascapital.xyz>\\n */\\ncontract AddressesProvider is SafeOwnableUpgradeable {\\n  mapping(string => address) private _addresses;\\n  mapping(address => Contract) public plugins;\\n  mapping(address => Contract) public flywheelRewards;\\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\\n  JarvisPool[] public jarvisPoolsConfig;\\n  CurveSwapPool[] public curveSwapPoolsConfig;\\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\\n\\n  /// @dev Initializer to set the admin that can set and change contracts addresses\\n  function initialize(address owner) public initializer {\\n    __SafeOwnable_init(owner);\\n  }\\n\\n  /**\\n   * @dev The contract address and a string that uniquely identifies the contract's interface\\n   */\\n  struct Contract {\\n    address addr;\\n    string contractInterface;\\n  }\\n\\n  struct RedemptionStrategy {\\n    address addr;\\n    string contractInterface;\\n    address outputToken;\\n  }\\n\\n  struct FundingStrategy {\\n    address addr;\\n    string contractInterface;\\n    address inputToken;\\n  }\\n\\n  struct JarvisPool {\\n    address syntheticToken;\\n    address collateralToken;\\n    address liquidityPool;\\n    uint256 expirationTime;\\n  }\\n\\n  struct CurveSwapPool {\\n    address poolAddress;\\n    address[] coins;\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\\n   * @param rewardToken the reward token address\\n   * @param flywheelRewardsModule the flywheel rewards module address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setFlywheelRewards(\\n    address rewardToken,\\n    address flywheelRewardsModule,\\n    string calldata contractInterface\\n  ) public onlyOwner {\\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\\n   * @param asset the asset address\\n   * @param plugin the ERC4626 plugin address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setPlugin(\\n    address asset,\\n    address plugin,\\n    string calldata contractInterface\\n  ) public onlyOwner {\\n    plugins[asset] = Contract(plugin, contractInterface);\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\\n   * @param asset the asset address\\n   * @param strategy redemption strategy address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setRedemptionStrategy(\\n    address asset,\\n    address strategy,\\n    string calldata contractInterface,\\n    address outputToken\\n  ) public onlyOwner {\\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\\n  }\\n\\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\\n    return redemptionStrategiesConfig[asset];\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\\n   * @param asset the asset address\\n   * @param strategy funding strategy address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setFundingStrategy(\\n    address asset,\\n    address strategy,\\n    string calldata contractInterface,\\n    address inputToken\\n  ) public onlyOwner {\\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\\n  }\\n\\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\\n    return fundingStrategiesConfig[asset];\\n  }\\n\\n  /**\\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\\n   * @param syntheticToken the synthetic token address\\n   * @param collateralToken the collateral token address\\n   * @param liquidityPool the liquidity pool address\\n   * @param expirationTime the operation expiration time\\n   */\\n  function setJarvisPool(\\n    address syntheticToken,\\n    address collateralToken,\\n    address liquidityPool,\\n    uint256 expirationTime\\n  ) public onlyOwner {\\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\\n  }\\n\\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\\n  }\\n\\n  /**\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\\n    _addresses[id] = newAddress;\\n  }\\n\\n  /**\\n   * @dev Returns an address by id\\n   * @return The address\\n   */\\n  function getAddress(string calldata id) public view returns (address) {\\n    return _addresses[id];\\n  }\\n\\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\\n    return curveSwapPoolsConfig;\\n  }\\n\\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\\n    return jarvisPoolsConfig;\\n  }\\n\\n  function setBalancerPoolForTokens(\\n    address inputToken,\\n    address outputToken,\\n    address pool\\n  ) external onlyOwner {\\n    balancerPoolForTokens[inputToken][outputToken] = pool;\\n  }\\n\\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\\n    return balancerPoolForTokens[inputToken][outputToken];\\n  }\\n}\\n\",\"keccak256\":\"0xf48e9e8b2150408c1c6b68dd957226c342ba47396da792fdaa0922f539a7e163\",\"license\":\"AGPL-3.0-only\"},\"contracts/ionic/AuthoritiesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { PoolRolesAuthority } from \\\"../ionic/PoolRolesAuthority.sol\\\";\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\nimport { IonicComptroller } from \\\"../compound/ComptrollerInterface.sol\\\";\\n\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\\n  PoolRolesAuthority public poolAuthLogic;\\n  address public leveredPositionsFactory;\\n  bool public noAuthRequired;\\n\\n  function initialize(address _leveredPositionsFactory) public initializer {\\n    __SafeOwnable_init(msg.sender);\\n    leveredPositionsFactory = _leveredPositionsFactory;\\n    poolAuthLogic = new PoolRolesAuthority();\\n  }\\n\\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\\n    leveredPositionsFactory = _leveredPositionsFactory;\\n    poolAuthLogic = new PoolRolesAuthority();\\n    // for Neon the auth is not required\\n    noAuthRequired = block.chainid == 245022934;\\n  }\\n\\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\\n    require(address(poolsAuthorities[pool]) == address(0), \\\"already created\\\");\\n\\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \\\"\\\");\\n    auth = PoolRolesAuthority(address(proxy));\\n    auth.initialize(address(this));\\n    poolsAuthorities[pool] = auth;\\n\\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\\n    // sets the registry owner as the auth owner\\n    reconfigureAuthority(pool);\\n  }\\n\\n  function reconfigureAuthority(address poolAddress) public {\\n    IonicComptroller pool = IonicComptroller(poolAddress);\\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\\n\\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\\n      require(address(auth) != address(0), \\\"no such authority\\\");\\n      require(msg.sender == owner() || msg.sender == poolAddress, \\\"not owner or pool\\\");\\n\\n      auth.configureRegistryCapabilities();\\n      auth.configurePoolSupplierCapabilities(pool);\\n      auth.configurePoolBorrowerCapabilities(pool);\\n      // everyone can be a liquidator\\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\\n      auth.configureLeveredPositionCapabilities(pool);\\n\\n      if (auth.owner() != owner()) {\\n        auth.setOwner(owner());\\n      }\\n    }\\n  }\\n\\n  function canCall(\\n    address pool,\\n    address user,\\n    address target,\\n    bytes4 functionSig\\n  ) external view returns (bool) {\\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\\n    if (address(authorityForPool) == address(0)) {\\n      return noAuthRequired;\\n    } else {\\n      // allow only if an auth exists and it allows the action\\n      return authorityForPool.canCall(user, target, functionSig);\\n    }\\n  }\\n\\n  function setUserRole(\\n    address pool,\\n    address user,\\n    uint8 role,\\n    bool enabled\\n  ) external {\\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\\n\\n    require(address(poolAuth) != address(0), \\\"auth does not exist\\\");\\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \\\"not owner or factory\\\");\\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \\\"only lev pos role\\\");\\n\\n    poolAuth.setUserRole(user, role, enabled);\\n  }\\n}\\n\",\"keccak256\":\"0x98fc1f8a735b5759fc7524e3065ae322703d2771e7ec429e1cc9b60a4b1028dd\",\"license\":\"UNLICENSED\"},\"contracts/ionic/DiamondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice a base contract for logic extensions that use the diamond pattern storage\\n * to map the functions when looking up the extension contract to delegate to.\\n */\\nabstract contract DiamondExtension {\\n  /**\\n   * @return a list of all the function selectors that this logic extension exposes\\n   */\\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\\n}\\n\\n// When no function exists for function called\\nerror FunctionNotFound(bytes4 _functionSelector);\\n\\n// When no extension exists for function called\\nerror ExtensionNotFound(bytes4 _functionSelector);\\n\\n// When the function is already added\\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\\n\\nabstract contract DiamondBase {\\n  /**\\n   * @dev register a logic extension\\n   * @param extensionToAdd the extension whose functions are to be added\\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\\n   */\\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\\n\\n  function _listExtensions() public view returns (address[] memory) {\\n    return LibDiamond.listExtensions();\\n  }\\n\\n  fallback() external {\\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\\n    // Execute external function from extension using delegatecall and return any value.\\n    assembly {\\n      // copy function selector and any arguments\\n      calldatacopy(0, 0, calldatasize())\\n      // execute function call using the extension\\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\\n      // get any return value\\n      returndatacopy(0, 0, returndatasize())\\n      // return any return value or error back to the caller\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * @notice a library to use in a contract, whose logic is extended with diamond extension\\n */\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.extensions.diamond.storage\\\");\\n\\n  struct Function {\\n    address extension;\\n    bytes4 selector;\\n  }\\n\\n  struct LogicStorage {\\n    Function[] functions;\\n    address[] extensions;\\n  }\\n\\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\\n    return getExtensionForSelector(msgSig, diamondStorage());\\n  }\\n\\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  function listExtensions() internal view returns (address[] memory) {\\n    return diamondStorage().extensions;\\n  }\\n\\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\\n    if (address(extensionToReplace) != address(0)) {\\n      removeExtension(extensionToReplace);\\n    }\\n    addExtension(extensionToAdd);\\n  }\\n\\n  function removeExtension(DiamondExtension extension) internal {\\n    LogicStorage storage ds = diamondStorage();\\n    // remove all functions of the extension to replace\\n    removeExtensionFunctions(extension);\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\n      if (ds.extensions[i] == address(extension)) {\\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\\n        ds.extensions.pop();\\n      }\\n    }\\n  }\\n\\n  function addExtension(DiamondExtension extension) internal {\\n    LogicStorage storage ds = diamondStorage();\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\n      require(ds.extensions[i] != address(extension), \\\"extension already added\\\");\\n    }\\n    addExtensionFunctions(extension);\\n    ds.extensions.push(address(extension));\\n  }\\n\\n  function removeExtensionFunctions(DiamondExtension extension) internal {\\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\\n    LogicStorage storage ds = diamondStorage();\\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\\n      bytes4 selectorToRemove = fnsToRemove[i];\\n      // must never fail\\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\\n      // swap with the last element in the selectorAtIndex array and remove the last element\\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\\n      ds.functions.pop();\\n    }\\n  }\\n\\n  function addExtensionFunctions(DiamondExtension extension) internal {\\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\\n    LogicStorage storage ds = diamondStorage();\\n    uint16 functionsCount = uint16(ds.functions.length);\\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\\n      bytes4 selector = fnsToAdd[functionsIndex];\\n      address oldImplementation = getExtensionForSelector(selector, ds);\\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\\n      ds.functions.push(Function(address(extension), selector));\\n      functionsCount++;\\n    }\\n  }\\n\\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\\n    uint256 fnsLen = ds.functions.length;\\n    for (uint256 i = 0; i < fnsLen; i++) {\\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\\n    }\\n\\n    return address(0);\\n  }\\n\\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\\n    uint16 fnsLen = uint16(ds.functions.length);\\n    for (uint16 i = 0; i < fnsLen; i++) {\\n      if (ds.functions[i].selector == selector) return i;\\n    }\\n\\n    return type(uint16).max;\\n  }\\n}\\n\",\"keccak256\":\"0x6d33291928e3c255f0276fa465dcc5ea88d74a6562241a39ad2e52ae8abaf7bc\",\"license\":\"UNLICENSED\"},\"contracts/ionic/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ninterface IFlashLoanReceiver {\\n  function receiveFlashLoan(\\n    address borrowedAsset,\\n    uint256 borrowedAmount,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x3db1dbf3e47975f60cccc859740aa84665d9fd683079c7329285008502c454da\",\"license\":\"UNLICENSED\"},\"contracts/ionic/PoolRolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IonicComptroller, ComptrollerInterface } from \\\"../compound/ComptrollerInterface.sol\\\";\\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \\\"../compound/CTokenInterfaces.sol\\\";\\n\\nimport { RolesAuthority, Authority } from \\\"solmate/auth/authorities/RolesAuthority.sol\\\";\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _owner) public initializer {\\n    owner = _owner;\\n    authority = this;\\n  }\\n\\n  // up to 256 roles\\n  uint8 public constant REGISTRY_ROLE = 0;\\n  uint8 public constant SUPPLIER_ROLE = 1;\\n  uint8 public constant BORROWER_ROLE = 2;\\n  uint8 public constant LIQUIDATOR_ROLE = 3;\\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\\n\\n  function configureRegistryCapabilities() external requiresAuth {\\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\\n  }\\n\\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolSupplierCapabilities(pool, true);\\n  }\\n\\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolSupplierCapabilities(pool, false);\\n  }\\n\\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\n      for (uint256 j = 0; j < selectors.length; j++) {\\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\\n      }\\n    }\\n  }\\n\\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\\n  }\\n\\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\\n    uint8 fnsCount = 6;\\n    selectors = new bytes4[](fnsCount);\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\\n\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n    return selectors;\\n  }\\n\\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\n      for (uint256 j = 0; j < selectors.length; j++) {\\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\\n      }\\n    }\\n  }\\n\\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolBorrowerCapabilities(pool, true);\\n  }\\n\\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolBorrowerCapabilities(pool, false);\\n  }\\n\\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\\n    }\\n  }\\n\\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    // borrowers have the SUPPLIER_ROLE capabilities by default\\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\n    }\\n  }\\n\\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n    }\\n  }\\n\\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\n      // TODO this leaves redeeming open for everyone\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n    }\\n  }\\n\\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\\n\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1ec824166a7b4b1e67384a25d231d3acab89ef90ff43ff380cbf1715410d9851\",\"license\":\"UNLICENSED\"},\"contracts/ionic/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\\n * that will shift the other.\\n */\\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\\n  /**\\n   * @notice Pending owner of this contract\\n   */\\n  address public pendingOwner;\\n\\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\\n    __Ownable_init();\\n    _transferOwnership(owner_);\\n  }\\n\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  modifier onlyOwnerOrAdmin() {\\n    bool isOwner = owner() == _msgSender();\\n    if (!isOwner) {\\n      address admin = _getProxyAdmin();\\n      bool isAdmin = admin == _msgSender();\\n      require(isAdmin, \\\"Ownable: caller is neither the owner nor the admin\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Emitted when pendingOwner is changed\\n   */\\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\\n\\n  /**\\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\\n   */\\n  event NewOwner(address oldOwner, address newOwner);\\n\\n  /**\\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\n   * @param newPendingOwner New pending owner.\\n   */\\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingOwner = pendingOwner;\\n\\n    // Store pendingOwner with value newPendingOwner\\n    pendingOwner = newPendingOwner;\\n\\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\\n   * @dev Owner function for pending owner to accept role and update owner\\n   */\\n  function _acceptOwner() public {\\n    // Check caller is pendingOwner and pendingOwner \\u2260 address(0)\\n    require(msg.sender == pendingOwner, \\\"not the pending owner\\\");\\n\\n    // Save current values for inclusion in log\\n    address oldOwner = owner();\\n    address oldPendingOwner = pendingOwner;\\n\\n    // Store owner with value pendingOwner\\n    _transferOwnership(pendingOwner);\\n\\n    // Clear the pending value\\n    pendingOwner = address(0);\\n\\n    emit NewOwner(oldOwner, pendingOwner);\\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n  }\\n\\n  function renounceOwnership() public override onlyOwner {\\n    // do not remove this overriding fn\\n    revert(\\\"not used anymore\\\");\\n  }\\n\\n  function transferOwnership(address newOwner) public override onlyOwner {\\n    emit NewPendingOwner(pendingOwner, newOwner);\\n    pendingOwner = newOwner;\\n  }\\n\\n  function _getProxyAdmin() internal view returns (address admin) {\\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    AddressSlot storage adminSlot;\\n    assembly {\\n      adminSlot.slot := _ADMIN_SLOT\\n    }\\n    admin = adminSlot.value;\\n  }\\n}\\n\",\"keccak256\":\"0x73f50a022ee86874b63ebd7e418b5948ef2913e32cb80024fe3cd4f17be7f2a5\",\"license\":\"UNLICENSED\"},\"contracts/ionic/strategies/flywheel/IIonicFlywheel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"solmate/tokens/ERC20.sol\\\";\\n\\ninterface IIonicFlywheel {\\n  function isRewardsDistributor() external returns (bool);\\n\\n  function isFlywheel() external returns (bool);\\n\\n  function flywheelPreSupplierAction(address market, address supplier) external;\\n\\n  function flywheelPreBorrowerAction(address market, address borrower) external;\\n\\n  function flywheelPreTransferAction(address market, address src, address dst) external;\\n\\n  function compAccrued(address user) external view returns (uint256);\\n\\n  function addMarketForRewards(ERC20 strategy) external;\\n\\n  function marketState(ERC20 strategy) external view returns (uint224 index, uint32 lastUpdatedTimestamp);\\n}\\n\",\"keccak256\":\"0xb24009cac18b0f9b6d12884169ab4461ec04027110a768091077dc5c648e934c\",\"license\":\"AGPL-3.0-only\"},\"contracts/liquidators/IFundsConversionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRedemptionStrategy.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IFundsConversionStrategy is IRedemptionStrategy {\\n  function convert(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n\\n  function estimateInputAmount(uint256 outputAmount, bytes memory strategyData)\\n    external\\n    view\\n    returns (IERC20Upgradeable inputToken, uint256 inputAmount);\\n}\\n\",\"keccak256\":\"0xa8bb583271cf321f13f24304b0d03aa951d63aca61bcbbff22d2b44138240271\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n\\n  function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4cf72f79d325ed14f3c8d52e013a8d1f8bfe15b59553bbd9dff251761baf60dd\",\"license\":\"UNLICENSED\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../compound/CTokenInterfaces.sol\\\";\\n\\n/**\\n * @title BasePriceOracle\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\n * @dev Implements the `PriceOracle` interface.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface BasePriceOracle {\\n  /**\\n   * @notice Get the price of an underlying asset.\\n   * @param underlying The underlying asset to get the price of.\\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n   * Zero means the price is unavailable.\\n   */\\n  function price(address underlying) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xed2a27a8dc71a4280c0ef19d3165ff237d8066ae782e750b071bb39d12e73404\",\"license\":\"UNLICENSED\"},\"contracts/oracles/MasterPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { ICErc20 } from \\\"../compound/CTokenInterfaces.sol\\\";\\n\\nimport { BasePriceOracle } from \\\"./BasePriceOracle.sol\\\";\\n\\n/**\\n * @title MasterPriceOracle\\n * @notice Use a combination of price oracles.\\n * @dev Implements `PriceOracle`.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract MasterPriceOracle is Initializable, BasePriceOracle {\\n  /**\\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\\n   */\\n  mapping(address => BasePriceOracle) public oracles;\\n\\n  /**\\n   * @dev Default/fallback `PriceOracle`.\\n   */\\n  BasePriceOracle public defaultOracle;\\n\\n  /**\\n   * @dev The administrator of this `MasterPriceOracle`.\\n   */\\n  address public admin;\\n\\n  /**\\n   * @dev Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   */\\n  bool internal noAdminOverwrite;\\n\\n  /**\\n   * @dev The Wrapped native asset address.\\n   */\\n  address public wtoken;\\n\\n  /**\\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\\n   */\\n  mapping(address => BasePriceOracle) public fallbackOracles;\\n\\n  /**\\n   * @dev Returns a boolean indicating if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   */\\n  function canAdminOverwrite() external view returns (bool) {\\n    return !noAdminOverwrite;\\n  }\\n\\n  /**\\n   * @dev Event emitted when `admin` is changed.\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Event emitted when the default oracle is changed.\\n   */\\n  event NewDefaultOracle(address oldOracle, address newOracle);\\n\\n  /**\\n   * @dev Event emitted when an underlying token's oracle is changed.\\n   */\\n  event NewOracle(address underlying, address oldOracle, address newOracle);\\n\\n  /**\\n   * @dev  Initialize state variables.\\n   * @param underlyings The underlying ERC20 token addresses to link to `_oracles`.\\n   * @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`.\\n   * @param _defaultOracle The default `PriceOracle` contract to use.\\n   * @param _admin The admin who can assign oracles to underlying tokens.\\n   * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   * @param _wtoken The Wrapped native asset address\\n   */\\n  function initialize(\\n    address[] memory underlyings,\\n    BasePriceOracle[] memory _oracles,\\n    BasePriceOracle _defaultOracle,\\n    address _admin,\\n    bool _canAdminOverwrite,\\n    address _wtoken\\n  ) external initializer {\\n    // Input validation\\n    require(underlyings.length == _oracles.length, \\\"Lengths of both arrays must be equal.\\\");\\n\\n    // Initialize state variables\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\n      address underlying = underlyings[i];\\n      BasePriceOracle newOracle = _oracles[i];\\n      oracles[underlying] = newOracle;\\n      emit NewOracle(underlying, address(0), address(newOracle));\\n    }\\n\\n    defaultOracle = _defaultOracle;\\n    admin = _admin;\\n    noAdminOverwrite = !_canAdminOverwrite;\\n    wtoken = _wtoken;\\n  }\\n\\n  /**\\n   * @dev Sets `_oracles` for `underlyings`.\\n   */\\n  function add(address[] calldata underlyings, BasePriceOracle[] calldata _oracles) external onlyAdmin {\\n    // Input validation\\n    require(\\n      underlyings.length > 0 && underlyings.length == _oracles.length,\\n      \\\"Lengths of both arrays must be equal and greater than 0.\\\"\\n    );\\n\\n    // Assign oracles to underlying tokens\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\n      address underlying = underlyings[i];\\n      address oldOracle = address(oracles[underlying]);\\n      if (noAdminOverwrite)\\n        require(\\n          oldOracle == address(0),\\n          \\\"Admin cannot overwrite existing assignments of oracles to underlying tokens.\\\"\\n        );\\n      BasePriceOracle newOracle = _oracles[i];\\n      oracles[underlying] = newOracle;\\n      emit NewOracle(underlying, oldOracle, address(newOracle));\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets `_oracles` for `underlyings`.\\n   */\\n  function addFallbacks(address[] calldata underlyings, BasePriceOracle[] calldata _oracles) external onlyAdmin {\\n    // Input validation\\n    require(\\n      underlyings.length > 0 && underlyings.length == _oracles.length,\\n      \\\"Lengths of both arrays must be equal and greater than 0.\\\"\\n    );\\n\\n    // Assign oracles to underlying tokens\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\n      address underlying = underlyings[i];\\n      address oldOracle = address(fallbackOracles[underlying]);\\n      if (noAdminOverwrite)\\n        require(\\n          oldOracle == address(0),\\n          \\\"Admin cannot overwrite existing assignments of oracles to underlying tokens.\\\"\\n        );\\n      BasePriceOracle newOracle = _oracles[i];\\n      fallbackOracles[underlying] = newOracle;\\n      emit NewOracle(underlying, oldOracle, address(newOracle));\\n    }\\n  }\\n\\n  /**\\n   * @dev Changes the default price oracle\\n   */\\n  function setDefaultOracle(BasePriceOracle newOracle) external onlyAdmin {\\n    BasePriceOracle oldOracle = defaultOracle;\\n    defaultOracle = newOracle;\\n    emit NewDefaultOracle(address(oldOracle), address(newOracle));\\n  }\\n\\n  /**\\n   * @dev Changes the admin and emits an event.\\n   */\\n  function changeAdmin(address newAdmin) external onlyAdmin {\\n    address oldAdmin = admin;\\n    admin = newAdmin;\\n    emit NewAdmin(oldAdmin, newAdmin);\\n  }\\n\\n  /**\\n   * @dev Modifier that checks if `msg.sender == admin`.\\n   */\\n  modifier onlyAdmin() {\\n    require(msg.sender == admin, \\\"Sender is not the admin.\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the price in ETH of the token underlying `cToken`.\\n   * @dev Implements the `PriceOracle` interface for Ionic pools (and Compound v2).\\n   * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\\n   */\\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\\n    // Get underlying ERC20 token address\\n    address underlying = address(ICErc20(address(cToken)).underlying());\\n\\n    if (underlying == wtoken) return 1e18;\\n\\n    BasePriceOracle oracle = oracles[underlying];\\n    BasePriceOracle fallbackOracle = fallbackOracles[underlying];\\n\\n    if (address(oracle) != address(0)) {\\n      try oracle.getUnderlyingPrice(cToken) returns (uint256 underlyingPrice) {\\n        if (underlyingPrice == 0) {\\n          if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\n        } else {\\n          return underlyingPrice;\\n        }\\n      } catch {\\n        if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\n      }\\n    } else {\\n      if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\n    }\\n    revert(\\\"Price oracle not found for this underlying token address.\\\");\\n  }\\n\\n  /**\\n   * @dev Attempts to return the price in ETH of `underlying` (implements `BasePriceOracle`).\\n   */\\n  function price(address underlying) public view override returns (uint256) {\\n    // Return 1e18 for WETH\\n    if (underlying == wtoken) return 1e18;\\n\\n    // Get underlying price from assigned oracle\\n    BasePriceOracle oracle = oracles[underlying];\\n    BasePriceOracle fallbackOracle = fallbackOracles[underlying];\\n\\n    if (address(oracle) != address(0)) {\\n      try oracle.price(underlying) returns (uint256 underlyingPrice) {\\n        if (underlyingPrice == 0) {\\n          if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\n        } else {\\n          return underlyingPrice;\\n        }\\n      } catch {\\n        if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\n      }\\n    } else {\\n      if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\n    }\\n    revert(\\\"Price oracle not found for this underlying token address.\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x8748b7e74b8f789617f0b387cd2e2259a0fa3639d54234d7e6c99cb3eae6fc9a\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2b54ec184943843041ab77f61988b5060f6f03acbfe92cdc125f95f00891da\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x17aff86be546601617585e91fd98aad74cf39f1be65d8eb6f93b7f3c30181275\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4586689c55edb37fc3cac296d75d3851b3aee3f378aaa54d8a9258a384fbf541\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4f2e4c252119ec161cc4de7fc6631b0dd840c46e85bf1fc771252924957d5ab\",\"license\":\"MIT\"},\"solmate/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n\\n    constructor(address _owner, Authority _authority) {\\n        owner = _owner;\\n        authority = _authority;\\n\\n        emit OwnerUpdated(msg.sender, _owner);\\n        emit AuthorityUpdated(msg.sender, _authority);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5cf8213a40d727af89c93dd359ad68984c123c1a1a93fc9ad7ba62b3436fb75\",\"license\":\"AGPL-3.0-only\"},\"solmate/auth/authorities/RolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {Auth, Authority} from \\\"../Auth.sol\\\";\\n\\n/// @notice Role based Authority that supports up to 256 roles.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\\ncontract RolesAuthority is Auth, Authority {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\\n\\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\\n\\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLE/USER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => bytes32) public getUserRoles;\\n\\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\\n\\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\\n\\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\\n    }\\n\\n    function doesRoleHaveCapability(\\n        uint8 role,\\n        address target,\\n        bytes4 functionSig\\n    ) public view virtual returns (bool) {\\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           AUTHORIZATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) public view virtual override returns (bool) {\\n        return\\n            isCapabilityPublic[target][functionSig] ||\\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                   ROLE CAPABILITY CONFIGURATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setPublicCapability(\\n        address target,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        isCapabilityPublic[target][functionSig] = enabled;\\n\\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        address target,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        if (enabled) {\\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\\n        } else {\\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\\n        }\\n\\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       USER ROLE ASSIGNMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setUserRole(\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        if (enabled) {\\n            getUserRoles[user] |= bytes32(1 << role);\\n        } else {\\n            getUserRoles[user] &= ~bytes32(1 << role);\\n        }\\n\\n        emit UserRoleUpdated(user, role, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x278247a2c5b0accb60af8d3749e34ab5d4436ee4f35a8fff301aaa25ab690762\",\"license\":\"AGPL-3.0-only\"},\"solmate/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e9480620000216000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063852a12e31161013b578063b2a02ff1116100b8578063cb2ef6f71161007c578063cb2ef6f71461047b578063db006a75146104ab578063ef01df4f146104be578063f3fdb15a146104d1578063f5e3c462146104e457600080fd5b8063b2a02ff11461042a578063be99f1191461043d578063c3bf11cd1461044c578063c5ebeaec14610455578063c91a424f1461046857600080fd5b80639826394b116100ff5780639826394b146103df578063a0712d68146103e8578063a7b820df146103fb578063aa5af0fd1461040e578063b0d58e491461041757600080fd5b8063852a12e31461039d57806389f8132e146103b05780638d02d9a1146103c55780638f840ddd146103ce57806395d89b41146103d757600080fd5b8063313ce567116101c95780635fe3b5671161018d5780635fe3b5671461035257806361feacff1461036a5780636752e702146103735780636c540baf146103815780636f307dc31461038a57600080fd5b8063313ce567146102f65780633b1d21a2146103035780633c4f743c1461030b57806347bd37181461033657806356e677281461033f57600080fd5b8063173b990411610210578063173b9904146102a957806318160ddd146102b257806319f496c8146102bb5780632608f818146102ce5780632c436e5b146102e157600080fd5b8063067db1b31461024257806306fdde03146102575780630e75270214610275578063135f133414610296575b600080fd5b6102556102503660046158f9565b6104f7565b005b61025f610541565b60405161026c9190615925565b60405180910390f35b610288610283366004615974565b6105cf565b60405190815260200161026c565b6102886102a43660046158f9565b6107ef565b61028860085481565b610288600f5481565b6102556102c936600461598d565b61083b565b6102886102dc3660046158f9565b610b8f565b60025b60405160ff909116815260200161026c565b6003546102e49060ff1681565b610288610dbf565b60145461031e906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b610288600b5481565b61025561034d3660046159c0565b610dce565b60035461031e9061010090046001600160a01b031681565b610288600d5481565b610288666379da05b6000081565b61028860095481565b60135461031e906001600160a01b031681565b6102886103ab366004615974565b610f2c565b6103b8611142565b60405161026c9190615a71565b61028860065481565b610288600c5481565b61025f6112f2565b610288600e5481565b6102886103f6366004615974565b6112ff565b610288610409366004615974565b61150c565b610288600a5481565b610288610425366004615974565b61189a565b610288610438366004615abf565b611b59565b61028867016345785d8a000081565b61028860075481565b610288610463366004615974565b611cf3565b60005461031e906001600160a01b031681565b604080518082019091526014815273434572633230506c7567696e44656c656761746560601b602082015261025f565b6102886104b9366004615974565b611efa565b60155461031e906001600160a01b031681565b60045461031e906001600160a01b031681565b6102886104f2366004615b00565b612101565b3330146105335760405162461bcd60e51b815260206004820152600560248201526410b9b2b63360d91b60448201526064015b60405180910390fd5b61053d8282612960565b5050565b6001805461054e90615b42565b80601f016020809104026020016040519081016040528092919081815260200182805461057a90615b42565b80156105c75780601f1061059c576101008083540402835291602001916105c7565b820191906000526020600020905b8154815290600101906020018083116105aa57829003601f168201915b505050505081565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb89261061c9261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d9190615ba9565b6106795760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906106a890600401615bf3565b602060405180830381865afa1580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190615c1f565b90506001600160a01b03811661070d576000610704846129e2565b50949350505050565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b15801561075057600080fd5b505af1158015610764573d6000803e3d6000fd5b50503332039150610786905057600061077c856129e2565b5095945050505050565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906107b49032903390600401615c3c565b60006040518083038186803b1580156107cc57600080fd5b505afa1580156107e0573d6000803e3d6000fd5b50505050600061077c856129e2565b60003330146108285760405162461bcd60e51b815260206004820152600560248201526410b9b2b63360d91b604482015260640161052a565b6108328383612a73565b90505b92915050565b3330148061084c575061084c612b29565b6108ac5760405162461bcd60e51b815260206004820152602b60248201527f6f6e6c792073656c6620616e642061646d696e732063616e2063616c6c205f7560448201526a383230ba32a8363ab3b4b760a91b606482015260840161052a565b6015546000906001600160a01b03166108c557816108d2565b6015546001600160a01b03165b6015549091506001600160a01b03161580159061095957506015546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109569190615c56565b15155b15610a43576015546040516370a0823160e01b81523060048201526001600160a01b039091169063ba0876529082906370a0823190602401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190615c56565b6040516001600160e01b031960e084901b1681526004810191909152306024820181905260448201526064016020604051808303816000875af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190615c56565b505b601580546001600160a01b0319166001600160a01b0384811691821790925560135460405163095ea7b360e01b8152600481019290925260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad29190615ba9565b506013546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190615c56565b90508015610b5157610b5181612ca6565b7fb32957d2794aaec3ea2c8852833af2192fe9fb518777de1f883e9e821781da758284604051610b82929190615c3c565b60405180910390a1505050565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb892610bdc9261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190615ba9565b610c395760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac190610c6890600401615bf3565b602060405180830381865afa158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca99190615c1f565b90506001600160a01b038116610ccf576000610cc58585612d1b565b5092505050610835565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b50503332039150610d4a9050576000610d3f8686612d1b565b509350505050610835565b604051633108c13b60e01b81526001600160a01b03821690633108c13b90610d789032903390600401615c3c565b60006040518083038186803b158015610d9057600080fd5b505afa158015610da4573d6000803e3d6000fd5b505050506000610db48686612d1b565b509695505050505050565b6000610dc9612dae565b905090565b33301480610ddf5750610ddf612b29565b610e475760405162461bcd60e51b815260206004820152603360248201527f6f6e6c792073656c6620616e642061646d696e732063616e2063616c6c205f6260448201527232b1b7b6b2a4b6b83632b6b2b73a30ba34b7b760691b606482015260840161052a565b600081806020019051810190610e5d9190615c1f565b90506001600160a01b038116158015610e8057506015546001600160a01b031615155b15610ef8576000546015546040516381218ea960e01b81526001600160a01b0391821660048201529116906381218ea990602401602060405180830381865afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef59190615c1f565b90505b6001600160a01b03811615801590610f1e57506015546001600160a01b03828116911614155b1561053d5761053d8161083b565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb892610f799261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba9190615ba9565b610fd65760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac19061100590600401615bf3565b602060405180830381865afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190615c1f565b90506001600160a01b0381166110665761105f83612e82565b9392505050565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b1580156110a957600080fd5b505af11580156110bd573d6000803e3d6000fd5b505033320391506110db9050576110d384612e82565b949350505050565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906111099032903390600401615c3c565b60006040518083038186803b15801561112157600080fd5b505afa158015611135573d6000803e3d6000fd5b505050506110d384612e82565b606060026000611150612f0a565b90508160ff1681516111629190615c85565b67ffffffffffffffff81111561117a5761117a6159aa565b6040519080825280602002602001820160405280156111a3578160200160208202803683370190505b50925060005b81518110156111ff578181815181106111c4576111c4615c98565b60200260200101518482815181106111de576111de615c98565b6001600160e01b0319909216602092830291909101909101526001016111a9565b50805163ef01df4f60e01b90849061121685615cae565b94506112259060ff8616615c85565b8151811061123557611235615c98565b6001600160e01b031990921660209283029190910190910152805163033e92d960e31b90849061126485615cae565b94506112739060ff8616615c85565b8151811061128357611283615c98565b6001600160e01b03199092166020928302919091019091015260ff8216156112ed5760405162461bcd60e51b815260206004820152601c60248201527f7573652074686520636f7272656374206172726179206c656e67746800000000604482015260640161052a565b505090565b6002805461054e90615b42565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb89261134c9261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190615ba9565b6113a95760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906113d890600401615bf3565b602060405180830381865afa1580156113f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114199190615c1f565b90506001600160a01b0381166114345760006107048461307a565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b15801561147757600080fd5b505af115801561148b573d6000803e3d6000fd5b505033320391506114a3905057600061077c8561307a565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906114d19032903390600401615c3c565b60006040518083038186803b1580156114e957600080fd5b505afa1580156114fd573d6000803e3d6000fd5b50505050600061077c8561307a565b600080611518816130f7565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac19061154790600401615bf3565b602060405180830381865afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115889190615c1f565b90506001600160a01b0381166116e057306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156115d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fc9190615c56565b50436009541461161957611612600a60396131bb565b92506116da565b83611622612dae565b101561163457611612600e60386131bb565b600d5484111561164a576116126002603a6131bb565b83600d546116589190615ccb565b600d55600354604080516303e1469160e61b815290516116d59261010090046001600160a01b03169163f851a4409160048083019260209291908290030181865afa1580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cf9190615c1f565b85612960565b600092505b5061188b565b604051633108c13b60e01b815281906001600160a01b03821690633108c13b906117109032903390600401615c3c565b60006040518083038186803b15801561172857600080fd5b505afa15801561173c573d6000803e3d6000fd5b505050506117473090565b6001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117aa9190615c56565b5043600954146117c7576117c0600a60396131bb565b9350611888565b846117d0612dae565b10156117e2576117c0600e60386131bb565b600d548511156117f8576117c06002603a6131bb565b84600d546118069190615ccb565b600d55600354604080516303e1469160e61b815290516118839261010090046001600160a01b03169163f851a4409160048083019260209291908290030181865afa158015611859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187d9190615c1f565b86612960565b600093505b50505b61189481613234565b50919050565b6000806118a6816130f7565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906118d590600401615bf3565b602060405180830381865afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119169190615c1f565b90506001600160a01b038116611a0a57306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198a9190615c56565b5043600954146119a057611612600a60356131bb565b836119a9612dae565b10156119bb57611612600e60346131bb565b600e548411156119d157611612600260366131bb565b600084600e546119e19190615ccb565b600e8190556000549091506119ff906001600160a01b031686612960565b60009350505061188b565b604051633108c13b60e01b815281906001600160a01b03821690633108c13b90611a3a9032903390600401615c3c565b60006040518083038186803b158015611a5257600080fd5b505afa158015611a66573d6000803e3d6000fd5b50505050611a713090565b6001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad49190615c56565b504360095414611aea576117c0600a60356131bb565b84611af3612dae565b1015611b05576117c0600e60346131bb565b600e54851115611b1b576117c0600260366131bb565b600085600e54611b2b9190615ccb565b600e819055600054909150611b49906001600160a01b031687612960565b6000945050505061189481613234565b60006001611b66816130f7565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac190611b9590600401615bf3565b602060405180830381865afa158015611bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd69190615c1f565b90506001600160a01b038116611bfa57611bf2338787876132b8565b925050611ce2565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b158015611c3d57600080fd5b505af1158015611c51573d6000803e3d6000fd5b50503332039150611c73905057611c6a338888886132b8565b93505050611ce2565b604051633108c13b60e01b81526001600160a01b03821690633108c13b90611ca19032903390600401615c3c565b60006040518083038186803b158015611cb957600080fd5b505afa158015611ccd573d6000803e3d6000fd5b50505050611cdd338888886132b8565b935050505b611ceb81613234565b509392505050565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb892611d409261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015611d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d819190615ba9565b611d9d5760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac190611dcc90600401615bf3565b602060405180830381865afa158015611de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0d9190615c1f565b90506001600160a01b038116611e265761105f836137a0565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b158015611e6957600080fd5b505af1158015611e7d573d6000803e3d6000fd5b50503332039150611e939050576110d3846137a0565b604051633108c13b60e01b81526001600160a01b03821690633108c13b90611ec19032903390600401615c3c565b60006040518083038186803b158015611ed957600080fd5b505afa158015611eed573d6000803e3d6000fd5b505050506110d3846137a0565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb892611f479261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f889190615ba9565b611fa45760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac190611fd390600401615bf3565b602060405180830381865afa158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120149190615c1f565b90506001600160a01b03811661202d5761105f8361381b565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b15801561207057600080fd5b505af1158015612084573d6000803e3d6000fd5b5050333203915061209a9050576110d38461381b565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906120c89032903390600401615c3c565b60006040518083038186803b1580156120e057600080fd5b505afa1580156120f4573d6000803e3d6000fd5b505050506110d38461381b565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb89261214e9261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa15801561216b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218f9190615ba9565b6121ab5760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906121da90600401615bf3565b602060405180830381865afa1580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190615c1f565b90506001600160a01b0381166124505760145460405163bf40fac160e01b815286916000916001600160a01b039091169063bf40fac19061225e90600401615cf4565b602060405180830381865afa15801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f9190615c1f565b60145460405163bf40fac160e01b81529192506000916001600160a01b039091169063bf40fac1906122d390600401615d16565b602060405180830381865afa1580156122f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123149190615c1f565b9050806001600160a01b0316632c89aa2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123789190615c56565b6003546040516357c89a7d60e01b81526001600160a01b03808616926357c89a7d926123af92899261010090041690600401615c3c565b602060405180830381865afa1580156123cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f09190615c56565b111561243557336001600160a01b0382161461241e5760405162461bcd60e51b815260040161052a90615d44565b600061242b898989613898565b5095506124479050565b6000612442898989613898565b509550505b5050505061105f565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b15801561249357600080fd5b505af11580156124a7573d6000803e3d6000fd5b505033320391506126da90505760145460405163bf40fac160e01b815287916000916001600160a01b039091169063bf40fac1906124e790600401615cf4565b602060405180830381865afa158015612504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125289190615c1f565b60145460405163bf40fac160e01b81529192506000916001600160a01b039091169063bf40fac19061255c90600401615d16565b602060405180830381865afa158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d9190615c1f565b9050806001600160a01b0316632c89aa2e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126019190615c56565b6003546040516357c89a7d60e01b81526001600160a01b03808616926357c89a7d9261263892899261010090041690600401615c3c565b602060405180830381865afa158015612655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126799190615c56565b11156126be57336001600160a01b038216146126a75760405162461bcd60e51b815260040161052a90615d44565b60006126b48a8a8a613898565b5096506126d09050565b60006126cb8a8a8a613898565b509650505b505050505061105f565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906127089032903390600401615c3c565b60006040518083038186803b15801561272057600080fd5b505afa158015612734573d6000803e3d6000fd5b505060145460405163bf40fac160e01b8152899350600092506001600160a01b039091169063bf40fac19061276b90600401615cf4565b602060405180830381865afa158015612788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ac9190615c1f565b60145460405163bf40fac160e01b81529192506000916001600160a01b039091169063bf40fac1906127e090600401615d16565b602060405180830381865afa1580156127fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128219190615c1f565b9050806001600160a01b0316632c89aa2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128859190615c56565b6003546040516357c89a7d60e01b81526001600160a01b03808616926357c89a7d926128bc92899261010090041690600401615c3c565b602060405180830381865afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fd9190615c56565b111561294257336001600160a01b0382161461292b5760405162461bcd60e51b815260040161052a90615d44565b60006129388a8a8a613898565b5096506129549050565b600061294f8a8a8a613898565b509650505b50505050509392505050565b601554604051632d182be560e21b8152600481018390526001600160a01b0384811660248301523060448301529091169063b460af94906064016020604051808303816000875af11580156129b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129dd9190615c56565b505050565b60008060006129f0816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a549190615c56565b50612a60333386613992565b92509250612a6d81613234565b50915091565b6013546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd90612aa890869030908790600401615da1565b6020604051808303816000875af1158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb9190615ba9565b612b205760405162461bcd60e51b815260040161052a906020808252600490820152631cd95b9960e21b604082015260600190565b61189482612ca6565b600080600360019054906101000a90046001600160a01b03169050806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba69190615c1f565b6001600160a01b0316336001600160a01b0316148015612c235750806001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c239190615ba9565b80612ca057506000546001600160a01b031633148015612ca05750806001600160a01b031663cf6bfd2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca09190615ba9565b91505090565b601554604051636e553f6560e01b8152600481018390523060248201526001600160a01b0390911690636e553f65906044016020604051808303816000875af1158015612cf7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190615c56565b6000806000612d29816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8d9190615c56565b50612d99338686613992565b92509250612da681613234565b509250929050565b6015546040516370a0823160e01b81523060048201526000916001600160a01b031690634cdad5069082906370a0823190602401602060405180830381865afa158015612dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e239190615c56565b6040518263ffffffff1660e01b8152600401612e4191815260200190565b602060405180830381865afa158015612e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190615c56565b600080612e8e816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef29190615c56565b50612eff33600085613d9f565b915061189481613234565b606060036000612f186143e6565b90508160ff168151612f2a9190615c85565b67ffffffffffffffff811115612f4257612f426159aa565b604051908082528060200260200182016040528015612f6b578160200160208202803683370190505b50925060005b8151811015612fc757818181518110612f8c57612f8c615c98565b6020026020010151848281518110612fa657612fa6615c98565b6001600160e01b031990921660209283029190910190910152600101612f71565b50805163cb2ef6f760e01b908490612fde85615cae565b9450612fed9060ff8616615c85565b81518110612ffd57612ffd615c98565b6001600160e01b0319909216602092830291909101909101528051632c436e5b60e01b90849061302c85615cae565b945061303b9060ff8616615c85565b8151811061304b5761304b615c98565b6001600160e01b0319909216602092830291909101909101528051630adccee560e31b90849061126485615cae565b6000806000613088816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156130c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ec9190615c56565b50612a6033856147ae565b600054600160a01b900460ff1661313d5760405162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015260640161052a565b806131ab57600360019054906101000a90046001600160a01b03166001600160a01b031663c90c20b16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561319257600080fd5b505af11580156131a6573d6000803e3d6000fd5b505050505b506000805460ff60a01b19169055565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360118111156131f0576131f0615cde565b83606181111561320257613202615cde565b60408051928352602083019190915260009082015260600160405180910390a182601181111561083257610832615cde565b6000805460ff60a01b1916600160a01b179055806132b557600360019054906101000a90046001600160a01b03166001600160a01b031663632e51426040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561329c57600080fd5b505af11580156132b0573d6000803e3d6000fd5b505050505b50565b60035460405163d02f735160e01b81523060048201526001600160a01b038681166024830152858116604483015284811660648301526084820184905260009283926101009091049091169063d02f73519060a4016020604051808303816000875af115801561332c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133509190615c56565b9050801561336d576133656003601d83614bb9565b9150506110d3565b846001600160a01b0316846001600160a01b031603613392576133656006601e6131bb565b6133f7604080516101808101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03851660009081526010602052604090205461341a9085614c5b565b602083018190528282600381111561343457613434615cde565b600381111561344557613445615cde565b905250600090508151600381111561345f5761345f615cde565b1461348f576134866009601c8360000151600381111561348157613481615cde565b614bb9565b925050506110d3565b6134ae846040518060200160405280666379da05b60000815250614c86565b6080820152604080516020810190915267016345785d8a000081526134d4908590614c86565b610140820181905260808201516134eb9086615ccb565b6134f59190615ccb565b6060820152306001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355c9190615c56565b60c0820190815260408051602081019091529051815260808201516135819190614ca9565b60a0820152604080516020810190915260c082015181526101408201516135a89190614ca9565b61016082015260a0810151600c546135c09190615c85565b60e08201526101408101516080820151600f546135dd9190615ccb565b6135e79190615ccb565b610120820152610160810151600e546136009190615c85565b6101008201526001600160a01b038616600090815260106020526040902054606082015161362e9190614cc1565b604083018190528282600381111561364857613648615cde565b600381111561365957613659615cde565b905250600090508151600381111561367357613673615cde565b14613695576134866009601b8360000151600381111561348157613481615cde565b60e0810151600c55610120810151600f55610100810151600e556020808201516001600160a01b0387811660008181526010855260408082209490945583860151928b1680825290849020929092556060850151925192835290929091600080516020615e3f833981519152910160405180910390a3306001600160a01b0316856001600160a01b0316600080516020615e3f833981519152836080015160405161374291815260200190565b60405180910390a360a081015160e08201516040805130815260208101939093528201527fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc59060600160405180910390a15060009695505050505050565b6000806137ac816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156137ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138109190615c56565b50612eff3384614ce7565b600080613827816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015613867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388b9190615c56565b50612eff33846000613d9f565b60008060006138a6816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156138e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390a9190615c56565b50836001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af115801561394b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396f9190615c56565b5061397c33878787615082565b9250925061398981613234565b50935093915050565b600354604051631200453160e11b81523060048201526001600160a01b03858116602483015284811660448301526064820184905260009283928392610100909204909116906324008a62906084016020604051808303816000875af1158015613a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a249190615c56565b90508015613a4557613a396003604383614bb9565b60009250925050613d97565b4360095414613a5a57613a39600a60446131bb565b613aa36040805161010081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0386166000908152601260205260409020600101546060820152306040516305eff7ef60e21b81526001600160a01b03888116600483015291909116906317bfdfbc90602401602060405180830381865afa158015613b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b319190615c56565b608082015260018501613b4d5760808101516040820152613b55565b604081018590525b613b63878260400151612a73565b60e082018190526080820151613b7891614c5b565b60a0830181905260208301826003811115613b9557613b95615cde565b6003811115613ba657613ba6615cde565b9052506000905081602001516003811115613bc357613bc3615cde565b14613c365760405162461bcd60e51b815260206004820152603a60248201527f52455041595f424f52524f575f4e45575f4143434f554e545f424f52524f575f60448201527f42414c414e43455f43414c43554c4154494f4e5f4641494c4544000000000000606482015260840161052a565b613c46600b548260e00151614c5b565b60c0830181905260208301826003811115613c6357613c63615cde565b6003811115613c7457613c74615cde565b9052506000905081602001516003811115613c9157613c91615cde565b14613cf85760405162461bcd60e51b815260206004820152603160248201527f52455041595f424f52524f575f4e45575f544f54414c5f42414c414e43455f43604482015270105310d55310551253d397d19052531151607a1b606482015260840161052a565b60a081810180516001600160a01b03898116600081815260126020908152604091829020948555600a5460019095019490945560c0870151600b81905560e088015195518251948f16855294840192909252820193909352606081019190915260808101919091527f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a1910160405180910390a160e00151600093509150505b935093915050565b6000821580613dac575081155b613df85760405162461bcd60e51b815260206004820152601860248201527f2172656465656d20746f6b656e73206f7220616d6f756e740000000000000000604482015260640161052a565b613e396040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b306001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9b9190615c56565b60408201528315613f5e5761138884600f54613eb79190615ccb565b1015613ec357600f5493505b6060810184905260408051602081018252908201518152613ee4908561553f565b6080830181905260208301826003811115613f0157613f01615cde565b6003811115613f1257613f12615cde565b9052506000905081602001516003811115613f2f57613f2f615cde565b14613f5957613f516009602c8360200151600381111561348157613481615cde565b91505061105f565b6140a5565b6000198303613feb57600354604051630cbb414760e11b81526001600160a01b0387811660048301523060248301526000604483015261010090920490911690631976828e90606401602060405180830381865afa158015613fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fe89190615c56565b92505b6000306001600160a01b0316634aeb3d9a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561402b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404f9190615c56565b90506103e861405e8583615ccb565b1015614068578093505b614076848360400151615591565b60608301819052600f546103e89161408d91615ccb565b101561409c57600f5460608301525b50608081018390525b600354606082015160405163eabe7d9160e01b815260009261010090046001600160a01b03169163eabe7d91916140e39130918b9190600401615da1565b6020604051808303816000875af1158015614102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141269190615c56565b905080156141445761413b6003602b83614bb9565b9250505061105f565b43600954146141595761413b600a602f6131bb565b614169600f548360600151614c5b565b60a084018190526020840182600381111561418657614186615cde565b600381111561419757614197615cde565b90525060009050826020015160038111156141b4576141b4615cde565b146141d65761413b600960318460200151600381111561348157613481615cde565b6001600160a01b03861660009081526010602052604090205460608301516141fe9190614c5b565b60c084018190526020840182600381111561421b5761421b615cde565b600381111561422c5761422c615cde565b905250600090508260200151600381111561424957614249615cde565b1461426b5761413b600960308460200151600381111561348157613481615cde565b8160800151614278612dae565b101561428a5761413b600e60326131bb565b60a0820151600f5560c08201516001600160a01b03871660009081526010602052604090205560808201516142c0908790612960565b306001600160a01b0316866001600160a01b0316600080516020615e3f83398151915284606001516040516142f791815260200190565b60405180910390a36080820151606080840151604080516001600160a01b038b16815260208101949094528301527fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929910160405180910390a1600354608083015160608401516040516351dff98960e01b81523060048201526001600160a01b038a811660248301526044820193909352606481019190915261010090920416906351dff98990608401600060405180830381600087803b1580156143bb57600080fd5b505af11580156143cf573d6000803e3d6000fd5b50600092506143dc915050565b9695505050505050565b60408051600d8082526101c082019092526060919060009082602082016101a08036833701905050905063140e25ad60e31b8161442284615cae565b93508360ff168151811061443857614438615c98565b6001600160e01b03199092166020928302919091019091015263db006a7560e01b8161446384615cae565b93508360ff168151811061447957614479615c98565b6001600160e01b03199092166020928302919091019091015263852a12e360e01b816144a484615cae565b93508360ff16815181106144ba576144ba615c98565b6001600160e01b03199092166020928302919091019091015263317afabb60e21b816144e584615cae565b93508360ff16815181106144fb576144fb615c98565b6001600160e01b03199092166020928302919091019091015263073a938160e11b8161452684615cae565b93508360ff168151811061453c5761453c615c98565b6001600160e01b0319909216602092830291909101909101526304c11f0360e31b8161456784615cae565b93508360ff168151811061457d5761457d615c98565b6001600160e01b031990921660209283029190910190910152637af1e23160e11b816145a884615cae565b93508360ff16815181106145be576145be615c98565b6001600160e01b031990921660209283029190910190910152631d8e90d160e11b816145e984615cae565b93508360ff16815181106145ff576145ff615c98565b6001600160e01b03199092166020928302919091019091015263b2a02ff160e01b8161462a84615cae565b93508360ff168151811061464057614640615c98565b6001600160e01b03199092166020928302919091019091015263067db1b360e01b8161466b84615cae565b93508360ff168151811061468157614681615c98565b6001600160e01b0319909216602092830291909101909101526304d7c4cd60e21b816146ac84615cae565b93508360ff16815181106146c2576146c2615c98565b6001600160e01b03199092166020928302919091019091015263b0d58e4960e01b816146ed84615cae565b93508360ff168151811061470357614703615c98565b6001600160e01b03199092166020928302919091019091015263a7b820df60e01b8161472e84615cae565b93508360ff168151811061474457614744615c98565b6001600160e01b03199092166020928302919091019091015260ff8216156108355760405162461bcd60e51b815260206004820152601c60248201527f7573652074686520636f7272656374206172726179206c656e67746800000000604482015260640161052a565b600354604051634ef4c3e160e01b81526000918291829161010090046001600160a01b031690634ef4c3e1906147ec90309089908990600401615da1565b6020604051808303816000875af115801561480b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061482f9190615c56565b90508015614850576148446003602183614bb9565b60009250925050614bb2565b436009541461486557614844600a60246131bb565b6148a66040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b306001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149089190615c56565b60408201526149178686612a73565b60c082018190526040805160208101825290830151815261493891906155cc565b606083018190526020830182600381111561495557614955615cde565b600381111561496657614966615cde565b905250600090508160200151600381111561498357614983615cde565b146149d05760405162461bcd60e51b815260206004820181905260248201527f4d494e545f45584348414e47455f43414c43554c4154494f4e5f4641494c4544604482015260640161052a565b6000816060015111614a245760405162461bcd60e51b815260206004820152601a60248201527f4d494e545f5a45524f5f43544f4b454e535f52454a4543544544000000000000604482015260640161052a565b8060600151600f54614a369190615c85565b608082015260608101516001600160a01b038716600090815260106020526040902054614a639190615c85565b60a082018190526080820151600f556001600160a01b0387166000818152601060209081526040918290209390935560c0840151606080860151835194855294840191909152908201929092527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a1856001600160a01b0316306001600160a01b0316600080516020615e3f8339815191528360600151604051614b1291815260200190565b60405180910390a360035460c082015160608301516040516341c728b960e01b81523060048201526001600160a01b038a811660248301526044820193909352606481019190915261010090920416906341c728b990608401600060405180830381600087803b158015614b8557600080fd5b505af1158015614b99573d6000803e3d6000fd5b5060009250614ba6915050565b8160c001519350935050505b9250929050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115614bee57614bee615cde565b846061811115614c0057614c00615cde565b604080519283526020830191909152810184905260600160405180910390a16003846011811115614c3357614c33615cde565b14614c4f57836011811115614c4a57614c4a615cde565b6110d3565b6110d3826103e8615c85565b600080838311614c7a576000614c718486615ccb565b91509150614bb2565b50600390506000614bb2565b6000670de0b6b3a7640000614c9f8484600001516155dc565b6108329190615ddb565b600080614cb6848461561e565b90506110d38161564f565b600080838301848110614cd957600092509050614bb2565b600260009250925050614bb2565b60035460405163368f515360e21b815260009182916101009091046001600160a01b03169063da3d454c90614d2490309088908890600401615da1565b6020604051808303816000875af1158015614d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d679190615c56565b90508015614d8457614d7c6003601083614bb9565b915050610835565b4360095414614d9957614d7c600a600c6131bb565b6000614da3612dae565b905083811015614dc257614db9600e600b6131bb565b92505050610835565b614dee604080516080810190915280600081526020016000815260200160008152602001600081525090565b306040516305eff7ef60e21b81526001600160a01b03888116600483015291909116906317bfdfbc90602401602060405180830381865afa158015614e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e5b9190615c56565b60208201819052614e6c9086614cc1565b6040830181905282826003811115614e8657614e86615cde565b6003811115614e9757614e97615cde565b9052506000905081516003811115614eb157614eb1615cde565b14614edd57614ed36009600e8360000151600381111561348157613481615cde565b9350505050610835565b6003546040828101519051631de6c8a560e21b815230600482015260248101919091526101009091046001600160a01b03169063779b229490604401602060405180830381865afa158015614f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f5a9190615c56565b92508215614f6f57614ed36003601085614bb9565b614f7b600b5486614cc1565b6060830181905282826003811115614f9557614f95615cde565b6003811115614fa657614fa6615cde565b9052506000905081516003811115614fc057614fc0615cde565b14614fe257614ed36009600d8360000151600381111561348157613481615cde565b6040808201516001600160a01b0388166000908152601260205291909120908155600a546001909101556060810151600b5561501e8686612960565b60408082015160608084015183516001600160a01b038b168152602081018a9052938401929092528201527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a160009695505050505050565b600354604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000928392839261010090920490911690635fc7e71e9060a4016020604051808303816000875af11580156150f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061511c9190615c56565b9050801561513d576151316003601483614bb9565b60009250925050615536565b436009541461515257615131600a60186131bb565b43846001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015615191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151b59190615c56565b146151c657615131600a60136131bb565b866001600160a01b0316866001600160a01b0316036151eb57615131600660196131bb565b846000036151ff57615131600760176131bb565b600019850361521457615131600760166131bb565b600080615222898989613992565b909250905081156152575761524982601181111561524257615242615cde565b601a6131bb565b600094509450505050615536565b60035460405163c488847b60e01b815260009182916101009091046001600160a01b03169063c488847b906152949030908c908890600401615da1565b6040805180830381865afa1580156152b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152d49190615def565b909250905081156153435760405162461bcd60e51b815260206004820152603360248201527f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f604482015272105353d5539517d4d152569157d19052531151606a1b606482015260840161052a565b6040516370a0823160e01b81526001600160a01b038b811660048301528291908a16906370a0823190602401602060405180830381865afa15801561538c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153b09190615c56565b10156153fe5760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d5543480000000000000000604482015260640161052a565b6000306001600160a01b038a16036154235761541c308d8d856132b8565b9050615499565b60405163b2a02ff160e01b81526001600160a01b038a169063b2a02ff190615453908f908f908790600401615da1565b6020604051808303816000875af1158015615472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154969190615c56565b90505b80156154d05760405162461bcd60e51b8152602060048201526006602482015265217365697a6560d01b604482015260640161052a565b604080516001600160a01b038e811682528d811660208301528183018790528b1660608201526080810184905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a16000975092955050505050505b94509492505050565b60008060008061554f8686615667565b9092509050600082600381111561556857615568615cde565b146155795750915060009050614bb2565b60006155848261564f565b9350935050509250929050565b6000816155a684670de0b6b3a7640000615e13565b6155b09190615ddb565b90506155bc8284615e2a565b1561083557610832600182615c85565b60008060008061554f86866156e3565b600061083283836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250615756565b60408051602081019091526000815260405180602001604052806156468560000151856155dc565b90529392505050565b805160009061083590670de0b6b3a764000090615ddb565b600061567f6040518060200160405280600081525090565b6000806156908660000151866157a9565b909250905060008260038111156156a9576156a9615cde565b146156c857506040805160208101909152600081529092509050614bb2565b60408051602081019091529081526000969095509350505050565b60006156fb6040518060200160405280600081525090565b600080615710670de0b6b3a7640000876157a9565b9092509050600082600381111561572957615729615cde565b1461574857506040805160208101909152600081529092509050614bb2565b6155848186600001516157eb565b6000831580615763575082155b156157705750600061105f565b600061577c8486615e13565b9050836157898683615ddb565b1483906107045760405162461bcd60e51b815260040161052a9190615925565b600080836000036157bf57506000905080614bb2565b838302836157cd8683615ddb565b146157e057600260009250925050614bb2565b600092509050614bb2565b60006158036040518060200160405280600081525090565b60008061581886670de0b6b3a76400006157a9565b9092509050600082600381111561583157615831615cde565b1461585057506040805160208101909152600081529092509050614bb2565b60008061585d83886158b6565b9092509050600082600381111561587657615876615cde565b146158995781604051806020016040528060008152509550955050505050614bb2565b604080516020810190915290815260009890975095505050505050565b600080826000036158cd5750600190506000614bb2565b60006158d98486615ddb565b915091509250929050565b6001600160a01b03811681146132b557600080fd5b6000806040838503121561590c57600080fd5b8235615917816158e4565b946020939093013593505050565b60006020808352835180602085015260005b8181101561595357858101830151858201604001528201615937565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561598657600080fd5b5035919050565b60006020828403121561599f57600080fd5b813561105f816158e4565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156159d257600080fd5b813567ffffffffffffffff808211156159ea57600080fd5b818401915084601f8301126159fe57600080fd5b813581811115615a1057615a106159aa565b604051601f8201601f19908116603f01168101908382118183101715615a3857615a386159aa565b81604052828152876020848701011115615a5157600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252825182820181905260009190848201906040850190845b81811015615ab35783516001600160e01b03191683529284019291840191600101615a8d565b50909695505050505050565b600080600060608486031215615ad457600080fd5b8335615adf816158e4565b92506020840135615aef816158e4565b929592945050506040919091013590565b600080600060608486031215615b1557600080fd5b8335615b20816158e4565b9250602084013591506040840135615b37816158e4565b809150509250925092565b600181811c90821680615b5657607f821691505b60208210810361189457634e487b7160e01b600052602260045260246000fd5b6001600160a01b0394851681529284166020840152921660408201526001600160e01b0319909116606082015260800190565b600060208284031215615bbb57600080fd5b8151801515811461105f57600080fd5b6020808252600e908201526d1b9bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b60208082526012908201527148595045524e41544956455f4f5241434c4560701b604082015260600190565b600060208284031215615c3157600080fd5b815161105f816158e4565b6001600160a01b0392831681529116602082015260400190565b600060208284031215615c6857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561083557610835615c6f565b634e487b7160e01b600052603260045260246000fd5b600060ff821680615cc157615cc1615c6f565b6000190192915050565b8181038181111561083557610835615c6f565b634e487b7160e01b600052602160045260246000fd5b602080825260089082015267506f6f6c4c656e7360c01b604082015260600190565b60208082526014908201527324b7b734b1aab734ab19a634b8bab4b230ba37b960611b604082015260600190565b6020808252603e908201527f4865616c746820666163746f72206e6f74206c6f7720656e6f75676820666f7260408201527f206e6f6e2d7065726d697373696f6e6564206c69717569646174696f6e730000606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601260045260246000fd5b600082615dea57615dea615dc5565b500490565b60008060408385031215615e0257600080fd5b505080516020909101519092909150565b808202811582820484141761083557610835615c6f565b600082615e3957615e39615dc5565b50069056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202b9014d02cf451c4a158c1796e57da55ad5383226679ce0300ea4ebdf7c477ca64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c8063852a12e31161013b578063b2a02ff1116100b8578063cb2ef6f71161007c578063cb2ef6f71461047b578063db006a75146104ab578063ef01df4f146104be578063f3fdb15a146104d1578063f5e3c462146104e457600080fd5b8063b2a02ff11461042a578063be99f1191461043d578063c3bf11cd1461044c578063c5ebeaec14610455578063c91a424f1461046857600080fd5b80639826394b116100ff5780639826394b146103df578063a0712d68146103e8578063a7b820df146103fb578063aa5af0fd1461040e578063b0d58e491461041757600080fd5b8063852a12e31461039d57806389f8132e146103b05780638d02d9a1146103c55780638f840ddd146103ce57806395d89b41146103d757600080fd5b8063313ce567116101c95780635fe3b5671161018d5780635fe3b5671461035257806361feacff1461036a5780636752e702146103735780636c540baf146103815780636f307dc31461038a57600080fd5b8063313ce567146102f65780633b1d21a2146103035780633c4f743c1461030b57806347bd37181461033657806356e677281461033f57600080fd5b8063173b990411610210578063173b9904146102a957806318160ddd146102b257806319f496c8146102bb5780632608f818146102ce5780632c436e5b146102e157600080fd5b8063067db1b31461024257806306fdde03146102575780630e75270214610275578063135f133414610296575b600080fd5b6102556102503660046158f9565b6104f7565b005b61025f610541565b60405161026c9190615925565b60405180910390f35b610288610283366004615974565b6105cf565b60405190815260200161026c565b6102886102a43660046158f9565b6107ef565b61028860085481565b610288600f5481565b6102556102c936600461598d565b61083b565b6102886102dc3660046158f9565b610b8f565b60025b60405160ff909116815260200161026c565b6003546102e49060ff1681565b610288610dbf565b60145461031e906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b610288600b5481565b61025561034d3660046159c0565b610dce565b60035461031e9061010090046001600160a01b031681565b610288600d5481565b610288666379da05b6000081565b61028860095481565b60135461031e906001600160a01b031681565b6102886103ab366004615974565b610f2c565b6103b8611142565b60405161026c9190615a71565b61028860065481565b610288600c5481565b61025f6112f2565b610288600e5481565b6102886103f6366004615974565b6112ff565b610288610409366004615974565b61150c565b610288600a5481565b610288610425366004615974565b61189a565b610288610438366004615abf565b611b59565b61028867016345785d8a000081565b61028860075481565b610288610463366004615974565b611cf3565b60005461031e906001600160a01b031681565b604080518082019091526014815273434572633230506c7567696e44656c656761746560601b602082015261025f565b6102886104b9366004615974565b611efa565b60155461031e906001600160a01b031681565b60045461031e906001600160a01b031681565b6102886104f2366004615b00565b612101565b3330146105335760405162461bcd60e51b815260206004820152600560248201526410b9b2b63360d91b60448201526064015b60405180910390fd5b61053d8282612960565b5050565b6001805461054e90615b42565b80601f016020809104026020016040519081016040528092919081815260200182805461057a90615b42565b80156105c75780601f1061059c576101008083540402835291602001916105c7565b820191906000526020600020905b8154815290600101906020018083116105aa57829003601f168201915b505050505081565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb89261061c9261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d9190615ba9565b6106795760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906106a890600401615bf3565b602060405180830381865afa1580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190615c1f565b90506001600160a01b03811661070d576000610704846129e2565b50949350505050565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b15801561075057600080fd5b505af1158015610764573d6000803e3d6000fd5b50503332039150610786905057600061077c856129e2565b5095945050505050565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906107b49032903390600401615c3c565b60006040518083038186803b1580156107cc57600080fd5b505afa1580156107e0573d6000803e3d6000fd5b50505050600061077c856129e2565b60003330146108285760405162461bcd60e51b815260206004820152600560248201526410b9b2b63360d91b604482015260640161052a565b6108328383612a73565b90505b92915050565b3330148061084c575061084c612b29565b6108ac5760405162461bcd60e51b815260206004820152602b60248201527f6f6e6c792073656c6620616e642061646d696e732063616e2063616c6c205f7560448201526a383230ba32a8363ab3b4b760a91b606482015260840161052a565b6015546000906001600160a01b03166108c557816108d2565b6015546001600160a01b03165b6015549091506001600160a01b03161580159061095957506015546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610932573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109569190615c56565b15155b15610a43576015546040516370a0823160e01b81523060048201526001600160a01b039091169063ba0876529082906370a0823190602401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190615c56565b6040516001600160e01b031960e084901b1681526004810191909152306024820181905260448201526064016020604051808303816000875af1158015610a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a419190615c56565b505b601580546001600160a01b0319166001600160a01b0384811691821790925560135460405163095ea7b360e01b8152600481019290925260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad29190615ba9565b506013546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190615c56565b90508015610b5157610b5181612ca6565b7fb32957d2794aaec3ea2c8852833af2192fe9fb518777de1f883e9e821781da758284604051610b82929190615c3c565b60405180910390a1505050565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb892610bdc9261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190615ba9565b610c395760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac190610c6890600401615bf3565b602060405180830381865afa158015610c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca99190615c1f565b90506001600160a01b038116610ccf576000610cc58585612d1b565b5092505050610835565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b158015610d1257600080fd5b505af1158015610d26573d6000803e3d6000fd5b50503332039150610d4a9050576000610d3f8686612d1b565b509350505050610835565b604051633108c13b60e01b81526001600160a01b03821690633108c13b90610d789032903390600401615c3c565b60006040518083038186803b158015610d9057600080fd5b505afa158015610da4573d6000803e3d6000fd5b505050506000610db48686612d1b565b509695505050505050565b6000610dc9612dae565b905090565b33301480610ddf5750610ddf612b29565b610e475760405162461bcd60e51b815260206004820152603360248201527f6f6e6c792073656c6620616e642061646d696e732063616e2063616c6c205f6260448201527232b1b7b6b2a4b6b83632b6b2b73a30ba34b7b760691b606482015260840161052a565b600081806020019051810190610e5d9190615c1f565b90506001600160a01b038116158015610e8057506015546001600160a01b031615155b15610ef8576000546015546040516381218ea960e01b81526001600160a01b0391821660048201529116906381218ea990602401602060405180830381865afa158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef59190615c1f565b90505b6001600160a01b03811615801590610f1e57506015546001600160a01b03828116911614155b1561053d5761053d8161083b565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb892610f799261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba9190615ba9565b610fd65760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac19061100590600401615bf3565b602060405180830381865afa158015611022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110469190615c1f565b90506001600160a01b0381166110665761105f83612e82565b9392505050565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b1580156110a957600080fd5b505af11580156110bd573d6000803e3d6000fd5b505033320391506110db9050576110d384612e82565b949350505050565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906111099032903390600401615c3c565b60006040518083038186803b15801561112157600080fd5b505afa158015611135573d6000803e3d6000fd5b505050506110d384612e82565b606060026000611150612f0a565b90508160ff1681516111629190615c85565b67ffffffffffffffff81111561117a5761117a6159aa565b6040519080825280602002602001820160405280156111a3578160200160208202803683370190505b50925060005b81518110156111ff578181815181106111c4576111c4615c98565b60200260200101518482815181106111de576111de615c98565b6001600160e01b0319909216602092830291909101909101526001016111a9565b50805163ef01df4f60e01b90849061121685615cae565b94506112259060ff8616615c85565b8151811061123557611235615c98565b6001600160e01b031990921660209283029190910190910152805163033e92d960e31b90849061126485615cae565b94506112739060ff8616615c85565b8151811061128357611283615c98565b6001600160e01b03199092166020928302919091019091015260ff8216156112ed5760405162461bcd60e51b815260206004820152601c60248201527f7573652074686520636f7272656374206172726179206c656e67746800000000604482015260640161052a565b505090565b6002805461054e90615b42565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb89261134c9261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015611369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138d9190615ba9565b6113a95760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906113d890600401615bf3565b602060405180830381865afa1580156113f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114199190615c1f565b90506001600160a01b0381166114345760006107048461307a565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b15801561147757600080fd5b505af115801561148b573d6000803e3d6000fd5b505033320391506114a3905057600061077c8561307a565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906114d19032903390600401615c3c565b60006040518083038186803b1580156114e957600080fd5b505afa1580156114fd573d6000803e3d6000fd5b50505050600061077c8561307a565b600080611518816130f7565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac19061154790600401615bf3565b602060405180830381865afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115889190615c1f565b90506001600160a01b0381166116e057306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156115d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fc9190615c56565b50436009541461161957611612600a60396131bb565b92506116da565b83611622612dae565b101561163457611612600e60386131bb565b600d5484111561164a576116126002603a6131bb565b83600d546116589190615ccb565b600d55600354604080516303e1469160e61b815290516116d59261010090046001600160a01b03169163f851a4409160048083019260209291908290030181865afa1580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cf9190615c1f565b85612960565b600092505b5061188b565b604051633108c13b60e01b815281906001600160a01b03821690633108c13b906117109032903390600401615c3c565b60006040518083038186803b15801561172857600080fd5b505afa15801561173c573d6000803e3d6000fd5b505050506117473090565b6001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117aa9190615c56565b5043600954146117c7576117c0600a60396131bb565b9350611888565b846117d0612dae565b10156117e2576117c0600e60386131bb565b600d548511156117f8576117c06002603a6131bb565b84600d546118069190615ccb565b600d55600354604080516303e1469160e61b815290516118839261010090046001600160a01b03169163f851a4409160048083019260209291908290030181865afa158015611859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187d9190615c1f565b86612960565b600093505b50505b61189481613234565b50919050565b6000806118a6816130f7565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906118d590600401615bf3565b602060405180830381865afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119169190615c1f565b90506001600160a01b038116611a0a57306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198a9190615c56565b5043600954146119a057611612600a60356131bb565b836119a9612dae565b10156119bb57611612600e60346131bb565b600e548411156119d157611612600260366131bb565b600084600e546119e19190615ccb565b600e8190556000549091506119ff906001600160a01b031686612960565b60009350505061188b565b604051633108c13b60e01b815281906001600160a01b03821690633108c13b90611a3a9032903390600401615c3c565b60006040518083038186803b158015611a5257600080fd5b505afa158015611a66573d6000803e3d6000fd5b50505050611a713090565b6001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad49190615c56565b504360095414611aea576117c0600a60356131bb565b84611af3612dae565b1015611b05576117c0600e60346131bb565b600e54851115611b1b576117c0600260366131bb565b600085600e54611b2b9190615ccb565b600e819055600054909150611b49906001600160a01b031687612960565b6000945050505061189481613234565b60006001611b66816130f7565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac190611b9590600401615bf3565b602060405180830381865afa158015611bb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd69190615c1f565b90506001600160a01b038116611bfa57611bf2338787876132b8565b925050611ce2565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b158015611c3d57600080fd5b505af1158015611c51573d6000803e3d6000fd5b50503332039150611c73905057611c6a338888886132b8565b93505050611ce2565b604051633108c13b60e01b81526001600160a01b03821690633108c13b90611ca19032903390600401615c3c565b60006040518083038186803b158015611cb957600080fd5b505afa158015611ccd573d6000803e3d6000fd5b50505050611cdd338888886132b8565b935050505b611ceb81613234565b509392505050565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb892611d409261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015611d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d819190615ba9565b611d9d5760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac190611dcc90600401615bf3565b602060405180830381865afa158015611de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0d9190615c1f565b90506001600160a01b038116611e265761105f836137a0565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b158015611e6957600080fd5b505af1158015611e7d573d6000803e3d6000fd5b50503332039150611e939050576110d3846137a0565b604051633108c13b60e01b81526001600160a01b03821690633108c13b90611ec19032903390600401615c3c565b60006040518083038186803b158015611ed957600080fd5b505afa158015611eed573d6000803e3d6000fd5b505050506110d3846137a0565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb892611f479261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f889190615ba9565b611fa45760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac190611fd390600401615bf3565b602060405180830381865afa158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120149190615c1f565b90506001600160a01b03811661202d5761105f8361381b565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b15801561207057600080fd5b505af1158015612084573d6000803e3d6000fd5b5050333203915061209a9050576110d38461381b565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906120c89032903390600401615c3c565b60006040518083038186803b1580156120e057600080fd5b505afa1580156120f4573d6000803e3d6000fd5b505050506110d38461381b565b60008054600354604051631beb2b9760e31b81526001600160a01b039283169263df595cb89261214e9261010090910490911690339030906001600160e01b031988351690600401615b76565b602060405180830381865afa15801561216b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218f9190615ba9565b6121ab5760405162461bcd60e51b815260040161052a90615bcb565b60145460405163bf40fac160e01b81526000916001600160a01b03169063bf40fac1906121da90600401615bf3565b602060405180830381865afa1580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190615c1f565b90506001600160a01b0381166124505760145460405163bf40fac160e01b815286916000916001600160a01b039091169063bf40fac19061225e90600401615cf4565b602060405180830381865afa15801561227b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229f9190615c1f565b60145460405163bf40fac160e01b81529192506000916001600160a01b039091169063bf40fac1906122d390600401615d16565b602060405180830381865afa1580156122f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123149190615c1f565b9050806001600160a01b0316632c89aa2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123789190615c56565b6003546040516357c89a7d60e01b81526001600160a01b03808616926357c89a7d926123af92899261010090041690600401615c3c565b602060405180830381865afa1580156123cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f09190615c56565b111561243557336001600160a01b0382161461241e5760405162461bcd60e51b815260040161052a90615d44565b600061242b898989613898565b5095506124479050565b6000612442898989613898565b509550505b5050505061105f565b60405163b230eab960e01b815233600482015281906001600160a01b0382169063b230eab990602401600060405180830381600087803b15801561249357600080fd5b505af11580156124a7573d6000803e3d6000fd5b505033320391506126da90505760145460405163bf40fac160e01b815287916000916001600160a01b039091169063bf40fac1906124e790600401615cf4565b602060405180830381865afa158015612504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125289190615c1f565b60145460405163bf40fac160e01b81529192506000916001600160a01b039091169063bf40fac19061255c90600401615d16565b602060405180830381865afa158015612579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259d9190615c1f565b9050806001600160a01b0316632c89aa2e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126019190615c56565b6003546040516357c89a7d60e01b81526001600160a01b03808616926357c89a7d9261263892899261010090041690600401615c3c565b602060405180830381865afa158015612655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126799190615c56565b11156126be57336001600160a01b038216146126a75760405162461bcd60e51b815260040161052a90615d44565b60006126b48a8a8a613898565b5096506126d09050565b60006126cb8a8a8a613898565b509650505b505050505061105f565b604051633108c13b60e01b81526001600160a01b03821690633108c13b906127089032903390600401615c3c565b60006040518083038186803b15801561272057600080fd5b505afa158015612734573d6000803e3d6000fd5b505060145460405163bf40fac160e01b8152899350600092506001600160a01b039091169063bf40fac19061276b90600401615cf4565b602060405180830381865afa158015612788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ac9190615c1f565b60145460405163bf40fac160e01b81529192506000916001600160a01b039091169063bf40fac1906127e090600401615d16565b602060405180830381865afa1580156127fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128219190615c1f565b9050806001600160a01b0316632c89aa2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128859190615c56565b6003546040516357c89a7d60e01b81526001600160a01b03808616926357c89a7d926128bc92899261010090041690600401615c3c565b602060405180830381865afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fd9190615c56565b111561294257336001600160a01b0382161461292b5760405162461bcd60e51b815260040161052a90615d44565b60006129388a8a8a613898565b5096506129549050565b600061294f8a8a8a613898565b509650505b50505050509392505050565b601554604051632d182be560e21b8152600481018390526001600160a01b0384811660248301523060448301529091169063b460af94906064016020604051808303816000875af11580156129b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129dd9190615c56565b505050565b60008060006129f0816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a549190615c56565b50612a60333386613992565b92509250612a6d81613234565b50915091565b6013546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd90612aa890869030908790600401615da1565b6020604051808303816000875af1158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb9190615ba9565b612b205760405162461bcd60e51b815260040161052a906020808252600490820152631cd95b9960e21b604082015260600190565b61189482612ca6565b600080600360019054906101000a90046001600160a01b03169050806001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba69190615c1f565b6001600160a01b0316336001600160a01b0316148015612c235750806001600160a01b0316630a755ec26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c239190615ba9565b80612ca057506000546001600160a01b031633148015612ca05750806001600160a01b031663cf6bfd2d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca09190615ba9565b91505090565b601554604051636e553f6560e01b8152600481018390523060248201526001600160a01b0390911690636e553f65906044016020604051808303816000875af1158015612cf7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053d9190615c56565b6000806000612d29816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d8d9190615c56565b50612d99338686613992565b92509250612da681613234565b509250929050565b6015546040516370a0823160e01b81523060048201526000916001600160a01b031690634cdad5069082906370a0823190602401602060405180830381865afa158015612dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e239190615c56565b6040518263ffffffff1660e01b8152600401612e4191815260200190565b602060405180830381865afa158015612e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc99190615c56565b600080612e8e816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612ece573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef29190615c56565b50612eff33600085613d9f565b915061189481613234565b606060036000612f186143e6565b90508160ff168151612f2a9190615c85565b67ffffffffffffffff811115612f4257612f426159aa565b604051908082528060200260200182016040528015612f6b578160200160208202803683370190505b50925060005b8151811015612fc757818181518110612f8c57612f8c615c98565b6020026020010151848281518110612fa657612fa6615c98565b6001600160e01b031990921660209283029190910190910152600101612f71565b50805163cb2ef6f760e01b908490612fde85615cae565b9450612fed9060ff8616615c85565b81518110612ffd57612ffd615c98565b6001600160e01b0319909216602092830291909101909101528051632c436e5b60e01b90849061302c85615cae565b945061303b9060ff8616615c85565b8151811061304b5761304b615c98565b6001600160e01b0319909216602092830291909101909101528051630adccee560e31b90849061126485615cae565b6000806000613088816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156130c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ec9190615c56565b50612a6033856147ae565b600054600160a01b900460ff1661313d5760405162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015260640161052a565b806131ab57600360019054906101000a90046001600160a01b03166001600160a01b031663c90c20b16040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561319257600080fd5b505af11580156131a6573d6000803e3d6000fd5b505050505b506000805460ff60a01b19169055565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa08360118111156131f0576131f0615cde565b83606181111561320257613202615cde565b60408051928352602083019190915260009082015260600160405180910390a182601181111561083257610832615cde565b6000805460ff60a01b1916600160a01b179055806132b557600360019054906101000a90046001600160a01b03166001600160a01b031663632e51426040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561329c57600080fd5b505af11580156132b0573d6000803e3d6000fd5b505050505b50565b60035460405163d02f735160e01b81523060048201526001600160a01b038681166024830152858116604483015284811660648301526084820184905260009283926101009091049091169063d02f73519060a4016020604051808303816000875af115801561332c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133509190615c56565b9050801561336d576133656003601d83614bb9565b9150506110d3565b846001600160a01b0316846001600160a01b031603613392576133656006601e6131bb565b6133f7604080516101808101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03851660009081526010602052604090205461341a9085614c5b565b602083018190528282600381111561343457613434615cde565b600381111561344557613445615cde565b905250600090508151600381111561345f5761345f615cde565b1461348f576134866009601c8360000151600381111561348157613481615cde565b614bb9565b925050506110d3565b6134ae846040518060200160405280666379da05b60000815250614c86565b6080820152604080516020810190915267016345785d8a000081526134d4908590614c86565b610140820181905260808201516134eb9086615ccb565b6134f59190615ccb565b6060820152306001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355c9190615c56565b60c0820190815260408051602081019091529051815260808201516135819190614ca9565b60a0820152604080516020810190915260c082015181526101408201516135a89190614ca9565b61016082015260a0810151600c546135c09190615c85565b60e08201526101408101516080820151600f546135dd9190615ccb565b6135e79190615ccb565b610120820152610160810151600e546136009190615c85565b6101008201526001600160a01b038616600090815260106020526040902054606082015161362e9190614cc1565b604083018190528282600381111561364857613648615cde565b600381111561365957613659615cde565b905250600090508151600381111561367357613673615cde565b14613695576134866009601b8360000151600381111561348157613481615cde565b60e0810151600c55610120810151600f55610100810151600e556020808201516001600160a01b0387811660008181526010855260408082209490945583860151928b1680825290849020929092556060850151925192835290929091600080516020615e3f833981519152910160405180910390a3306001600160a01b0316856001600160a01b0316600080516020615e3f833981519152836080015160405161374291815260200190565b60405180910390a360a081015160e08201516040805130815260208101939093528201527fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc59060600160405180910390a15060009695505050505050565b6000806137ac816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156137ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138109190615c56565b50612eff3384614ce7565b600080613827816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015613867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388b9190615c56565b50612eff33846000613d9f565b60008060006138a6816130f7565b306001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af11580156138e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390a9190615c56565b50836001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af115801561394b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396f9190615c56565b5061397c33878787615082565b9250925061398981613234565b50935093915050565b600354604051631200453160e11b81523060048201526001600160a01b03858116602483015284811660448301526064820184905260009283928392610100909204909116906324008a62906084016020604051808303816000875af1158015613a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a249190615c56565b90508015613a4557613a396003604383614bb9565b60009250925050613d97565b4360095414613a5a57613a39600a60446131bb565b613aa36040805161010081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b0386166000908152601260205260409020600101546060820152306040516305eff7ef60e21b81526001600160a01b03888116600483015291909116906317bfdfbc90602401602060405180830381865afa158015613b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b319190615c56565b608082015260018501613b4d5760808101516040820152613b55565b604081018590525b613b63878260400151612a73565b60e082018190526080820151613b7891614c5b565b60a0830181905260208301826003811115613b9557613b95615cde565b6003811115613ba657613ba6615cde565b9052506000905081602001516003811115613bc357613bc3615cde565b14613c365760405162461bcd60e51b815260206004820152603a60248201527f52455041595f424f52524f575f4e45575f4143434f554e545f424f52524f575f60448201527f42414c414e43455f43414c43554c4154494f4e5f4641494c4544000000000000606482015260840161052a565b613c46600b548260e00151614c5b565b60c0830181905260208301826003811115613c6357613c63615cde565b6003811115613c7457613c74615cde565b9052506000905081602001516003811115613c9157613c91615cde565b14613cf85760405162461bcd60e51b815260206004820152603160248201527f52455041595f424f52524f575f4e45575f544f54414c5f42414c414e43455f43604482015270105310d55310551253d397d19052531151607a1b606482015260840161052a565b60a081810180516001600160a01b03898116600081815260126020908152604091829020948555600a5460019095019490945560c0870151600b81905560e088015195518251948f16855294840192909252820193909352606081019190915260808101919091527f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a1910160405180910390a160e00151600093509150505b935093915050565b6000821580613dac575081155b613df85760405162461bcd60e51b815260206004820152601860248201527f2172656465656d20746f6b656e73206f7220616d6f756e740000000000000000604482015260640161052a565b613e396040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b306001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9b9190615c56565b60408201528315613f5e5761138884600f54613eb79190615ccb565b1015613ec357600f5493505b6060810184905260408051602081018252908201518152613ee4908561553f565b6080830181905260208301826003811115613f0157613f01615cde565b6003811115613f1257613f12615cde565b9052506000905081602001516003811115613f2f57613f2f615cde565b14613f5957613f516009602c8360200151600381111561348157613481615cde565b91505061105f565b6140a5565b6000198303613feb57600354604051630cbb414760e11b81526001600160a01b0387811660048301523060248301526000604483015261010090920490911690631976828e90606401602060405180830381865afa158015613fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fe89190615c56565b92505b6000306001600160a01b0316634aeb3d9a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561402b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061404f9190615c56565b90506103e861405e8583615ccb565b1015614068578093505b614076848360400151615591565b60608301819052600f546103e89161408d91615ccb565b101561409c57600f5460608301525b50608081018390525b600354606082015160405163eabe7d9160e01b815260009261010090046001600160a01b03169163eabe7d91916140e39130918b9190600401615da1565b6020604051808303816000875af1158015614102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141269190615c56565b905080156141445761413b6003602b83614bb9565b9250505061105f565b43600954146141595761413b600a602f6131bb565b614169600f548360600151614c5b565b60a084018190526020840182600381111561418657614186615cde565b600381111561419757614197615cde565b90525060009050826020015160038111156141b4576141b4615cde565b146141d65761413b600960318460200151600381111561348157613481615cde565b6001600160a01b03861660009081526010602052604090205460608301516141fe9190614c5b565b60c084018190526020840182600381111561421b5761421b615cde565b600381111561422c5761422c615cde565b905250600090508260200151600381111561424957614249615cde565b1461426b5761413b600960308460200151600381111561348157613481615cde565b8160800151614278612dae565b101561428a5761413b600e60326131bb565b60a0820151600f5560c08201516001600160a01b03871660009081526010602052604090205560808201516142c0908790612960565b306001600160a01b0316866001600160a01b0316600080516020615e3f83398151915284606001516040516142f791815260200190565b60405180910390a36080820151606080840151604080516001600160a01b038b16815260208101949094528301527fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929910160405180910390a1600354608083015160608401516040516351dff98960e01b81523060048201526001600160a01b038a811660248301526044820193909352606481019190915261010090920416906351dff98990608401600060405180830381600087803b1580156143bb57600080fd5b505af11580156143cf573d6000803e3d6000fd5b50600092506143dc915050565b9695505050505050565b60408051600d8082526101c082019092526060919060009082602082016101a08036833701905050905063140e25ad60e31b8161442284615cae565b93508360ff168151811061443857614438615c98565b6001600160e01b03199092166020928302919091019091015263db006a7560e01b8161446384615cae565b93508360ff168151811061447957614479615c98565b6001600160e01b03199092166020928302919091019091015263852a12e360e01b816144a484615cae565b93508360ff16815181106144ba576144ba615c98565b6001600160e01b03199092166020928302919091019091015263317afabb60e21b816144e584615cae565b93508360ff16815181106144fb576144fb615c98565b6001600160e01b03199092166020928302919091019091015263073a938160e11b8161452684615cae565b93508360ff168151811061453c5761453c615c98565b6001600160e01b0319909216602092830291909101909101526304c11f0360e31b8161456784615cae565b93508360ff168151811061457d5761457d615c98565b6001600160e01b031990921660209283029190910190910152637af1e23160e11b816145a884615cae565b93508360ff16815181106145be576145be615c98565b6001600160e01b031990921660209283029190910190910152631d8e90d160e11b816145e984615cae565b93508360ff16815181106145ff576145ff615c98565b6001600160e01b03199092166020928302919091019091015263b2a02ff160e01b8161462a84615cae565b93508360ff168151811061464057614640615c98565b6001600160e01b03199092166020928302919091019091015263067db1b360e01b8161466b84615cae565b93508360ff168151811061468157614681615c98565b6001600160e01b0319909216602092830291909101909101526304d7c4cd60e21b816146ac84615cae565b93508360ff16815181106146c2576146c2615c98565b6001600160e01b03199092166020928302919091019091015263b0d58e4960e01b816146ed84615cae565b93508360ff168151811061470357614703615c98565b6001600160e01b03199092166020928302919091019091015263a7b820df60e01b8161472e84615cae565b93508360ff168151811061474457614744615c98565b6001600160e01b03199092166020928302919091019091015260ff8216156108355760405162461bcd60e51b815260206004820152601c60248201527f7573652074686520636f7272656374206172726179206c656e67746800000000604482015260640161052a565b600354604051634ef4c3e160e01b81526000918291829161010090046001600160a01b031690634ef4c3e1906147ec90309089908990600401615da1565b6020604051808303816000875af115801561480b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061482f9190615c56565b90508015614850576148446003602183614bb9565b60009250925050614bb2565b436009541461486557614844600a60246131bb565b6148a66040805160e0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b306001600160a01b031663bd6d894d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156148e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149089190615c56565b60408201526149178686612a73565b60c082018190526040805160208101825290830151815261493891906155cc565b606083018190526020830182600381111561495557614955615cde565b600381111561496657614966615cde565b905250600090508160200151600381111561498357614983615cde565b146149d05760405162461bcd60e51b815260206004820181905260248201527f4d494e545f45584348414e47455f43414c43554c4154494f4e5f4641494c4544604482015260640161052a565b6000816060015111614a245760405162461bcd60e51b815260206004820152601a60248201527f4d494e545f5a45524f5f43544f4b454e535f52454a4543544544000000000000604482015260640161052a565b8060600151600f54614a369190615c85565b608082015260608101516001600160a01b038716600090815260106020526040902054614a639190615c85565b60a082018190526080820151600f556001600160a01b0387166000818152601060209081526040918290209390935560c0840151606080860151835194855294840191909152908201929092527f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a1856001600160a01b0316306001600160a01b0316600080516020615e3f8339815191528360600151604051614b1291815260200190565b60405180910390a360035460c082015160608301516040516341c728b960e01b81523060048201526001600160a01b038a811660248301526044820193909352606481019190915261010090920416906341c728b990608401600060405180830381600087803b158015614b8557600080fd5b505af1158015614b99573d6000803e3d6000fd5b5060009250614ba6915050565b8160c001519350935050505b9250929050565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846011811115614bee57614bee615cde565b846061811115614c0057614c00615cde565b604080519283526020830191909152810184905260600160405180910390a16003846011811115614c3357614c33615cde565b14614c4f57836011811115614c4a57614c4a615cde565b6110d3565b6110d3826103e8615c85565b600080838311614c7a576000614c718486615ccb565b91509150614bb2565b50600390506000614bb2565b6000670de0b6b3a7640000614c9f8484600001516155dc565b6108329190615ddb565b600080614cb6848461561e565b90506110d38161564f565b600080838301848110614cd957600092509050614bb2565b600260009250925050614bb2565b60035460405163368f515360e21b815260009182916101009091046001600160a01b03169063da3d454c90614d2490309088908890600401615da1565b6020604051808303816000875af1158015614d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d679190615c56565b90508015614d8457614d7c6003601083614bb9565b915050610835565b4360095414614d9957614d7c600a600c6131bb565b6000614da3612dae565b905083811015614dc257614db9600e600b6131bb565b92505050610835565b614dee604080516080810190915280600081526020016000815260200160008152602001600081525090565b306040516305eff7ef60e21b81526001600160a01b03888116600483015291909116906317bfdfbc90602401602060405180830381865afa158015614e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e5b9190615c56565b60208201819052614e6c9086614cc1565b6040830181905282826003811115614e8657614e86615cde565b6003811115614e9757614e97615cde565b9052506000905081516003811115614eb157614eb1615cde565b14614edd57614ed36009600e8360000151600381111561348157613481615cde565b9350505050610835565b6003546040828101519051631de6c8a560e21b815230600482015260248101919091526101009091046001600160a01b03169063779b229490604401602060405180830381865afa158015614f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f5a9190615c56565b92508215614f6f57614ed36003601085614bb9565b614f7b600b5486614cc1565b6060830181905282826003811115614f9557614f95615cde565b6003811115614fa657614fa6615cde565b9052506000905081516003811115614fc057614fc0615cde565b14614fe257614ed36009600d8360000151600381111561348157613481615cde565b6040808201516001600160a01b0388166000908152601260205291909120908155600a546001909101556060810151600b5561501e8686612960565b60408082015160608084015183516001600160a01b038b168152602081018a9052938401929092528201527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a160009695505050505050565b600354604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000928392839261010090920490911690635fc7e71e9060a4016020604051808303816000875af11580156150f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061511c9190615c56565b9050801561513d576151316003601483614bb9565b60009250925050615536565b436009541461515257615131600a60186131bb565b43846001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015615191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151b59190615c56565b146151c657615131600a60136131bb565b866001600160a01b0316866001600160a01b0316036151eb57615131600660196131bb565b846000036151ff57615131600760176131bb565b600019850361521457615131600760166131bb565b600080615222898989613992565b909250905081156152575761524982601181111561524257615242615cde565b601a6131bb565b600094509450505050615536565b60035460405163c488847b60e01b815260009182916101009091046001600160a01b03169063c488847b906152949030908c908890600401615da1565b6040805180830381865afa1580156152b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152d49190615def565b909250905081156153435760405162461bcd60e51b815260206004820152603360248201527f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f604482015272105353d5539517d4d152569157d19052531151606a1b606482015260840161052a565b6040516370a0823160e01b81526001600160a01b038b811660048301528291908a16906370a0823190602401602060405180830381865afa15801561538c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153b09190615c56565b10156153fe5760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f5345495a455f544f4f5f4d5543480000000000000000604482015260640161052a565b6000306001600160a01b038a16036154235761541c308d8d856132b8565b9050615499565b60405163b2a02ff160e01b81526001600160a01b038a169063b2a02ff190615453908f908f908790600401615da1565b6020604051808303816000875af1158015615472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154969190615c56565b90505b80156154d05760405162461bcd60e51b8152602060048201526006602482015265217365697a6560d01b604482015260640161052a565b604080516001600160a01b038e811682528d811660208301528183018790528b1660608201526080810184905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a16000975092955050505050505b94509492505050565b60008060008061554f8686615667565b9092509050600082600381111561556857615568615cde565b146155795750915060009050614bb2565b60006155848261564f565b9350935050509250929050565b6000816155a684670de0b6b3a7640000615e13565b6155b09190615ddb565b90506155bc8284615e2a565b1561083557610832600182615c85565b60008060008061554f86866156e3565b600061083283836040518060400160405280601781526020017f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000815250615756565b60408051602081019091526000815260405180602001604052806156468560000151856155dc565b90529392505050565b805160009061083590670de0b6b3a764000090615ddb565b600061567f6040518060200160405280600081525090565b6000806156908660000151866157a9565b909250905060008260038111156156a9576156a9615cde565b146156c857506040805160208101909152600081529092509050614bb2565b60408051602081019091529081526000969095509350505050565b60006156fb6040518060200160405280600081525090565b600080615710670de0b6b3a7640000876157a9565b9092509050600082600381111561572957615729615cde565b1461574857506040805160208101909152600081529092509050614bb2565b6155848186600001516157eb565b6000831580615763575082155b156157705750600061105f565b600061577c8486615e13565b9050836157898683615ddb565b1483906107045760405162461bcd60e51b815260040161052a9190615925565b600080836000036157bf57506000905080614bb2565b838302836157cd8683615ddb565b146157e057600260009250925050614bb2565b600092509050614bb2565b60006158036040518060200160405280600081525090565b60008061581886670de0b6b3a76400006157a9565b9092509050600082600381111561583157615831615cde565b1461585057506040805160208101909152600081529092509050614bb2565b60008061585d83886158b6565b9092509050600082600381111561587657615876615cde565b146158995781604051806020016040528060008152509550955050505050614bb2565b604080516020810190915290815260009890975095505050505050565b600080826000036158cd5750600190506000614bb2565b60006158d98486615ddb565b915091509250929050565b6001600160a01b03811681146132b557600080fd5b6000806040838503121561590c57600080fd5b8235615917816158e4565b946020939093013593505050565b60006020808352835180602085015260005b8181101561595357858101830151858201604001528201615937565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561598657600080fd5b5035919050565b60006020828403121561599f57600080fd5b813561105f816158e4565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156159d257600080fd5b813567ffffffffffffffff808211156159ea57600080fd5b818401915084601f8301126159fe57600080fd5b813581811115615a1057615a106159aa565b604051601f8201601f19908116603f01168101908382118183101715615a3857615a386159aa565b81604052828152876020848701011115615a5157600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252825182820181905260009190848201906040850190845b81811015615ab35783516001600160e01b03191683529284019291840191600101615a8d565b50909695505050505050565b600080600060608486031215615ad457600080fd5b8335615adf816158e4565b92506020840135615aef816158e4565b929592945050506040919091013590565b600080600060608486031215615b1557600080fd5b8335615b20816158e4565b9250602084013591506040840135615b37816158e4565b809150509250925092565b600181811c90821680615b5657607f821691505b60208210810361189457634e487b7160e01b600052602260045260246000fd5b6001600160a01b0394851681529284166020840152921660408201526001600160e01b0319909116606082015260800190565b600060208284031215615bbb57600080fd5b8151801515811461105f57600080fd5b6020808252600e908201526d1b9bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b60208082526012908201527148595045524e41544956455f4f5241434c4560701b604082015260600190565b600060208284031215615c3157600080fd5b815161105f816158e4565b6001600160a01b0392831681529116602082015260400190565b600060208284031215615c6857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561083557610835615c6f565b634e487b7160e01b600052603260045260246000fd5b600060ff821680615cc157615cc1615c6f565b6000190192915050565b8181038181111561083557610835615c6f565b634e487b7160e01b600052602160045260246000fd5b602080825260089082015267506f6f6c4c656e7360c01b604082015260600190565b60208082526014908201527324b7b734b1aab734ab19a634b8bab4b230ba37b960611b604082015260600190565b6020808252603e908201527f4865616c746820666163746f72206e6f74206c6f7720656e6f75676820666f7260408201527f206e6f6e2d7065726d697373696f6e6564206c69717569646174696f6e730000606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601260045260246000fd5b600082615dea57615dea615dc5565b500490565b60008060408385031215615e0257600080fd5b505080516020909101519092909150565b808202811582820484141761083557610835615c6f565b600082615e3957615e39615dc5565b50069056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202b9014d02cf451c4a158c1796e57da55ad5383226679ce0300ea4ebdf7c477ca64736f6c63430008160033",
  "devdoc": {
    "author": "Joey Santoro CErc20PluginDelegate deposits and withdraws from a plugin contract It is also capable of delegating reward functionality to a PluginRewardsDistributor",
    "events": {
      "Failure(uint256,uint256,uint256)": {
        "details": "`error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary contract-specific code that enables us to report opaque error codes from upgradeable contracts.*"
      }
    },
    "kind": "dev",
    "methods": {
      "_becomeImplementation(bytes)": {
        "params": {
          "data": "The encoded arguments for becoming"
        }
      },
      "_getExtensionFunctions()": {
        "returns": {
          "functionSelectors": "a list of all the function selectors that this logic extension exposes"
        }
      },
      "_updatePlugin(address)": {
        "params": {
          "_plugin": "The address of the plugin implementation to use"
        }
      },
      "_withdrawAdminFees(uint256)": {
        "params": {
          "withdrawAmount": "Amount of fees to withdraw"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_withdrawIonicFees(uint256)": {
        "params": {
          "withdrawAmount": "Amount of fees to withdraw"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "borrow(uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset to borrow"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "getCash()": {
        "returns": {
          "_0": "The quantity of underlying asset owned by this contract"
        }
      },
      "liquidateBorrow(address,uint256,address)": {
        "params": {
          "borrower": "The borrower of this cToken to be liquidated",
          "cTokenCollateral": "The market in which to seize collateral from the borrower",
          "repayAmount": "The amount of the underlying borrowed asset to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "mint(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "mintAmount": "The amount of the underlying asset to supply"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeem(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemTokens": "The number of cTokens to redeem into underlying"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeemUnderlying(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemAmount": "The amount of underlying to redeem"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrow(uint256)": {
        "params": {
          "repayAmount": "The amount to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrowBehalf(address,uint256)": {
        "params": {
          "borrower": "the account with the debt being payed off",
          "repayAmount": "The amount to repay"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.",
        "params": {
          "borrower": "The account having collateral seized",
          "liquidator": "The account receiving seized collateral",
          "seizeTokens": "The number of cTokens to seize"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      }
    },
    "title": "Rari's CErc20Plugin's Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AccrueInterest(uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when interest is accrued"
      },
      "Approval(address,address,uint256)": {
        "notice": "EIP20 Approval event"
      },
      "Borrow(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when underlying is borrowed"
      },
      "LiquidateBorrow(address,address,uint256,address,uint256)": {
        "notice": "Event emitted when a borrow is liquidated"
      },
      "Mint(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are minted"
      },
      "NewAdminFee(uint256,uint256)": {
        "notice": "Event emitted when the admin fee is changed"
      },
      "NewIonicFee(uint256,uint256)": {
        "notice": "Event emitted when the Ionic fee is changed"
      },
      "NewMarketInterestRateModel(address,address)": {
        "notice": "Event emitted when interestRateModel is changed"
      },
      "NewReserveFactor(uint256,uint256)": {
        "notice": "Event emitted when the reserve factor is changed"
      },
      "Redeem(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are redeemed"
      },
      "RepayBorrow(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a borrow is repaid"
      },
      "ReservesAdded(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are added"
      },
      "ReservesReduced(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are reduced"
      },
      "Transfer(address,address,uint256)": {
        "notice": "EIP20 Transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "_becomeImplementation(bytes)": {
        "notice": "Delegate interface to become the implementation"
      },
      "_updatePlugin(address)": {
        "notice": "Update the plugin implementation to a whitelisted implementation"
      },
      "_withdrawAdminFees(uint256)": {
        "notice": "Accrues interest and reduces admin fees by transferring to admin"
      },
      "_withdrawIonicFees(uint256)": {
        "notice": "Accrues interest and reduces Ionic fees by transferring to Ionic"
      },
      "accrualBlockNumber()": {
        "notice": "Block number that interest was last accrued at"
      },
      "adminFeeMantissa()": {
        "notice": "Fraction of interest currently set aside for admin fees"
      },
      "ap()": {
        "notice": "Addresses Provider"
      },
      "borrow(uint256)": {
        "notice": "Sender borrows assets from the protocol to their own address"
      },
      "borrowIndex()": {
        "notice": "Accumulator of the total earned interest rate since the opening of the market"
      },
      "comptroller()": {
        "notice": "Contract which oversees inter-cToken operations"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "getCash()": {
        "notice": "Get cash balance of this cToken in the underlying asset"
      },
      "interestRateModel()": {
        "notice": "Model which tells what the current interest rate should be"
      },
      "ionicFeeMantissa()": {
        "notice": "Fraction of interest currently set aside for Ionic fees"
      },
      "liquidateBorrow(address,uint256,address)": {
        "notice": "The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator."
      },
      "mint(uint256)": {
        "notice": "Sender supplies assets into the market and receives cTokens in exchange"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "plugin()": {
        "notice": "Plugin address"
      },
      "redeem(uint256)": {
        "notice": "Sender redeems cTokens in exchange for the underlying asset"
      },
      "redeemUnderlying(uint256)": {
        "notice": "Sender redeems cTokens in exchange for a specified amount of underlying asset"
      },
      "repayBorrow(uint256)": {
        "notice": "Sender repays their own borrow"
      },
      "repayBorrowBehalf(address,uint256)": {
        "notice": "Sender repays a borrow belonging to borrower"
      },
      "reserveFactorMantissa()": {
        "notice": "Fraction of interest currently set aside for reserves"
      },
      "seize(address,address,uint256)": {
        "notice": "Transfers collateral tokens (this market) to the liquidator."
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalAdminFees()": {
        "notice": "Total amount of admin fees of the underlying held in this market"
      },
      "totalBorrows()": {
        "notice": "Total amount of outstanding borrows of the underlying in this market"
      },
      "totalIonicFees()": {
        "notice": "Total amount of Ionic fees of the underlying held in this market"
      },
      "totalReserves()": {
        "notice": "Total amount of reserves of the underlying held in this market"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "underlying()": {
        "notice": "Underlying asset for this CToken"
      }
    },
    "notice": "CToken which outsources token logic to a plugin",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17997,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "ionicAdmin",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 18003,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "_notEntered",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18006,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 18009,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 18012,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 18022,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "comptroller",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IonicComptroller)25652"
      },
      {
        "astId": 18026,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "interestRateModel",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(InterestRateModel)28313"
      },
      {
        "astId": 18028,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "initialExchangeRateMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 18031,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "adminFeeMantissa",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 18034,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "ionicFeeMantissa",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 18037,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "reserveFactorMantissa",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 18040,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "accrualBlockNumber",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 18043,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 18046,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "totalBorrows",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 18049,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "totalReserves",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 18052,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "totalAdminFees",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 18055,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "totalIonicFees",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 18058,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "totalSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 18062,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "accountTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18068,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "transferAllowances",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 18079,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "accountBorrows",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_struct(BorrowSnapshot)18074_storage)"
      },
      {
        "astId": 18088,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "underlying",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 18092,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "ap",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(AddressesProvider)37930"
      },
      {
        "astId": 12640,
        "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
        "label": "plugin",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IERC4626)28185"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AddressesProvider)37930": {
        "encoding": "inplace",
        "label": "contract AddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IERC4626)28185": {
        "encoding": "inplace",
        "label": "contract IERC4626",
        "numberOfBytes": "20"
      },
      "t_contract(InterestRateModel)28313": {
        "encoding": "inplace",
        "label": "contract InterestRateModel",
        "numberOfBytes": "20"
      },
      "t_contract(IonicComptroller)25652": {
        "encoding": "inplace",
        "label": "contract IonicComptroller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowSnapshot)18074_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CErc20Storage.BorrowSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowSnapshot)18074_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BorrowSnapshot)18074_storage": {
        "encoding": "inplace",
        "label": "struct CErc20Storage.BorrowSnapshot",
        "members": [
          {
            "astId": 18071,
            "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18073,
            "contract": "contracts/compound/CErc20PluginDelegate.sol:CErc20PluginDelegate",
            "label": "interestIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}