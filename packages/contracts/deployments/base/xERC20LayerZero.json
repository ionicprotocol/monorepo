{
  "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ChainIdNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OriginNotMirrorAdapter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "ChainIdToEidSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        }
      ],
      "name": "EidToChainIdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "FeeBpsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_dstToken",
          "type": "address"
        }
      ],
      "name": "TokenMapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_srcChainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        }
      ],
      "name": "TokenReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_dstChainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        }
      ],
      "name": "TokenSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "chainIdToEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "eidToChainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "mappedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstChainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstChainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dstChainId",
          "type": "uint32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_dstChainId",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "setChainIdToEid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        }
      ],
      "name": "setEidToChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "setFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstToken",
          "type": "address"
        }
      ],
      "name": "setMappedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
    "transactionIndex": 70,
    "gasUsed": "1928487",
    "logsBloom": "0x
    "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d",
    "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001155b614971f16758c92c4890ed338c9e3ede6b7"
        ],
        "data": "0x",
        "logIndex": 329,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x1a44076050125825900e736c501f859c50fE728c",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x0000000000000000000000004e055e4a1d66dea2525f3ed4281388659649832d0000000000000000000000001155b614971f16758c92c4890ed338c9e3ede6b7",
        "logIndex": 330,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xca3a427605227707d442b29ebfc079cbb4eed8504c9e91a9dc082383749a65ba",
          "0x0000000000000000000000000000000000000000000000000000000000002105",
          "0x00000000000000000000000000000000000000000000000000000000000075e8"
        ],
        "data": "0x",
        "logIndex": 331,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xca3a427605227707d442b29ebfc079cbb4eed8504c9e91a9dc082383749a65ba",
          "0x000000000000000000000000000000000000000000000000000000000000000a",
          "0x000000000000000000000000000000000000000000000000000000000000759f"
        ],
        "data": "0x",
        "logIndex": 332,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xca3a427605227707d442b29ebfc079cbb4eed8504c9e91a9dc082383749a65ba",
          "0x00000000000000000000000000000000000000000000000000000000000000fc",
          "0x000000000000000000000000000000000000000000000000000000000000762f"
        ],
        "data": "0x",
        "logIndex": 333,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xca3a427605227707d442b29ebfc079cbb4eed8504c9e91a9dc082383749a65ba",
          "0x000000000000000000000000000000000000000000000000000000000000ed88",
          "0x0000000000000000000000000000000000000000000000000000000000007647"
        ],
        "data": "0x",
        "logIndex": 334,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xca3a427605227707d442b29ebfc079cbb4eed8504c9e91a9dc082383749a65ba",
          "0x000000000000000000000000000000000000000000000000000000000000868b",
          "0x0000000000000000000000000000000000000000000000000000000000007634"
        ],
        "data": "0x",
        "logIndex": 335,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xccdd25d4741ed2a08cec83b24a123c47cdf831230a4e029a6848164513d2632b",
          "0x00000000000000000000000000000000000000000000000000000000000075e8",
          "0x0000000000000000000000000000000000000000000000000000000000002105"
        ],
        "data": "0x",
        "logIndex": 336,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xccdd25d4741ed2a08cec83b24a123c47cdf831230a4e029a6848164513d2632b",
          "0x000000000000000000000000000000000000000000000000000000000000759f",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 337,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xccdd25d4741ed2a08cec83b24a123c47cdf831230a4e029a6848164513d2632b",
          "0x000000000000000000000000000000000000000000000000000000000000762f",
          "0x00000000000000000000000000000000000000000000000000000000000000fc"
        ],
        "data": "0x",
        "logIndex": 338,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xccdd25d4741ed2a08cec83b24a123c47cdf831230a4e029a6848164513d2632b",
          "0x0000000000000000000000000000000000000000000000000000000000007647",
          "0x000000000000000000000000000000000000000000000000000000000000ed88"
        ],
        "data": "0x",
        "logIndex": 339,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      },
      {
        "transactionIndex": 70,
        "blockNumber": 18973464,
        "transactionHash": "0x12a57daa6b8e04cc3427884f3647a15f162328ab58ebd69149996eb3fa51a5f1",
        "address": "0x4e055E4A1d66DeA2525f3eD4281388659649832D",
        "topics": [
          "0xccdd25d4741ed2a08cec83b24a123c47cdf831230a4e029a6848164513d2632b",
          "0x0000000000000000000000000000000000000000000000000000000000007634",
          "0x000000000000000000000000000000000000000000000000000000000000868b"
        ],
        "data": "0x",
        "logIndex": 340,
        "blockHash": "0x0e4c7086c84f2d72ea8b6b0d27563089a00c2cde90c9b10becdd682d45c7069d"
      }
    ],
    "blockNumber": 18973464,
    "cumulativeGasUsed": "17102344",
    "status": 1,
    "byzantium": true
  },
  "args": [
    10,
    "0x1a44076050125825900e736c501f859c50fE728c"
  ],
  "numDeployments": 2,
  "solcInputHash": "7953c310e4d722af0464135fc587d970",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ChainIdNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OriginNotMirrorAdapter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"ChainIdToEidSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"EidToChainIdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"FeeBpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"}],\"name\":\"TokenMapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_srcChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"}],\"name\":\"TokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_dstChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"}],\"name\":\"TokenSent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chainIdToEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"eidToChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"mappedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstChainId\",\"type\":\"uint32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"setChainIdToEid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"setEidToChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"}],\"name\":\"setMappedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"send(address,uint256,address,uint32,bytes)\":{\"params\":{\"_amount\":\"The amount of tokens to send\",\"_dstChainId\":\"The destination chain id\",\"_options\":\"The options to send the tokens with\",\"_to\":\"The address to send the tokens to\",\"_token\":\"The token to send\"}},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"send(address,uint256,address,uint32,bytes)\":{\"notice\":\"Sends tokens to a destination chain\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/xERC20LayerZero.sol\":\"xERC20LayerZero\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0xd710f9efe703982e8eabe15d19d6114af753ef42f2796551da782a0fb6633e4b\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f211a9dd6bc7e4bc6c98a062d4729b821b7ff391a888215a48872b205117749\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bridge/interface/IXERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IXERC20 {\\n  /**\\n   * @notice Emits when a lockbox is set\\n   *\\n   * @param _lockbox The address of the lockbox\\n   */\\n  event LockboxSet(address _lockbox);\\n\\n  /**\\n   * @notice Emits when a limit is set\\n   *\\n   * @param _mintingLimit The updated minting limit we are setting to the bridge\\n   * @param _burningLimit The updated burning limit we are setting to the bridge\\n   * @param _bridge The address of the bridge we are setting the limit too\\n   */\\n  event BridgeLimitsSet(uint256 _mintingLimit, uint256 _burningLimit, address indexed _bridge);\\n\\n  /**\\n   * @notice Reverts when a user with too low of a limit tries to call mint/burn\\n   */\\n  error IXERC20_NotHighEnoughLimits();\\n\\n  /**\\n   * @notice Reverts when caller is not the factory\\n   */\\n  error IXERC20_NotFactory();\\n\\n  /**\\n   * @notice Reverts when limits are too high\\n   */\\n  error IXERC20_LimitsTooHigh();\\n\\n  /**\\n   * @notice Contains the full minting and burning data for a particular bridge\\n   *\\n   * @param minterParams The minting parameters for the bridge\\n   * @param burnerParams The burning parameters for the bridge\\n   */\\n  struct Bridge {\\n    BridgeParameters minterParams;\\n    BridgeParameters burnerParams;\\n  }\\n\\n  /**\\n   * @notice Contains the mint or burn parameters for a bridge\\n   *\\n   * @param timestamp The timestamp of the last mint/burn\\n   * @param ratePerSecond The rate per second of the bridge\\n   * @param maxLimit The max limit of the bridge\\n   * @param currentLimit The current limit of the bridge\\n   */\\n  struct BridgeParameters {\\n    uint256 timestamp;\\n    uint256 ratePerSecond;\\n    uint256 maxLimit;\\n    uint256 currentLimit;\\n  }\\n\\n  /**\\n   * @notice Sets the lockbox address\\n   *\\n   * @param _lockbox The address of the lockbox\\n   */\\n  function setLockbox(address _lockbox) external;\\n\\n  /**\\n   * @notice Updates the limits of any bridge\\n   * @dev Can only be called by the owner\\n   * @param _mintingLimit The updated minting limit we are setting to the bridge\\n   * @param _burningLimit The updated burning limit we are setting to the bridge\\n   * @param _bridge The address of the bridge we are setting the limits too\\n   */\\n  function setLimits(address _bridge, uint256 _mintingLimit, uint256 _burningLimit) external;\\n\\n  /**\\n   * @notice Returns the max limit of a minter\\n   *\\n   * @param _minter The minter we are viewing the limits of\\n   *  @return _limit The limit the minter has\\n   */\\n  function mintingMaxLimitOf(address _minter) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the max limit of a bridge\\n   *\\n   * @param _bridge the bridge we are viewing the limits of\\n   * @return _limit The limit the bridge has\\n   */\\n  function burningMaxLimitOf(address _bridge) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the current limit of a minter\\n   *\\n   * @param _minter The minter we are viewing the limits of\\n   * @return _limit The limit the minter has\\n   */\\n  function mintingCurrentLimitOf(address _minter) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the current limit of a bridge\\n   *\\n   * @param _bridge the bridge we are viewing the limits of\\n   * @return _limit The limit the bridge has\\n   */\\n  function burningCurrentLimitOf(address _bridge) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Mints tokens for a user\\n   * @dev Can only be called by a minter\\n   * @param _user The address of the user who needs tokens minted\\n   * @param _amount The amount of tokens being minted\\n   */\\n  function mint(address _user, uint256 _amount) external;\\n\\n  /**\\n   * @notice Burns tokens for a user\\n   * @dev Can only be called by a minter\\n   * @param _user The address of the user who needs tokens burned\\n   * @param _amount The amount of tokens being burned\\n   */\\n  function burn(address _user, uint256 _amount) external;\\n}\",\"keccak256\":\"0xb858d39ae13483293e1b3e8ff3475f6f3a4d7c7fc44a2dbac7c20ad35cb9cc9f\",\"license\":\"UNLICENSED\"},\"contracts/bridge/xERC20LayerZero.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.22;\\n\\nimport { OApp, Origin, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IXERC20 } from \\\"./interface/IXERC20.sol\\\";\\n\\ncontract xERC20LayerZero is Ownable, OApp {\\n  uint256 public feeBps;\\n  mapping(address => mapping(uint32 => address)) public mappedTokens;\\n  mapping(uint32 => uint32) public chainIdToEid;\\n  mapping(uint32 => uint32) public eidToChainId;\\n\\n  event TokenMapped(address indexed _token, uint32 indexed _chainId, address indexed _dstToken);\\n  event ChainIdToEidSet(uint32 indexed _chainId, uint32 indexed _eid);\\n  event EidToChainIdSet(uint32 indexed _eid, uint32 indexed _chainId);\\n  event FeeBpsSet(uint256 indexed _feeBps);\\n  event TokenSent(\\n    address indexed _token,\\n    uint256 _amount,\\n    address indexed _to,\\n    uint32 indexed _dstChainId,\\n    bytes32 _guid\\n  );\\n  event TokenReceived(\\n    address indexed _token,\\n    uint256 _amount,\\n    address indexed _to,\\n    uint32 indexed _srcChainId,\\n    bytes32 _guid\\n  );\\n\\n  error TokenNotSet();\\n  error ChainIdNotSet();\\n  error OriginNotMirrorAdapter();\\n\\n  constructor(uint256 _feeBps, address _endpoint) OApp(_endpoint, msg.sender) Ownable() {\\n    feeBps = _feeBps;\\n\\n    // known chain ids\\n    // Set initial chain ID to EID mappings\\n    setChainIdToEid(8453, 30184); // base\\n    setChainIdToEid(10, 30111); // optimism\\n    setChainIdToEid(252, 30255); // fraxtal\\n    setChainIdToEid(60808, 30279); // bob\\n    setChainIdToEid(34443, 30260); // mode\\n\\n    // Set initial EID to chain ID mappings\\n    setEidToChainId(30184, 8453); // base\\n    setEidToChainId(30111, 10); // optimism\\n    setEidToChainId(30255, 252); // fraxtal\\n    setEidToChainId(30279, 60808); // bob\\n    setEidToChainId(30260, 34443); // mode\\n  }\\n\\n  // ADMIN FUNCTIONS\\n\\n  function setFeeBps(uint256 _feeBps) public onlyOwner {\\n    feeBps = _feeBps;\\n    emit FeeBpsSet(_feeBps);\\n  }\\n\\n  function setMappedToken(uint32 _chainId, address _srcToken, address _dstToken) public onlyOwner {\\n    mappedTokens[_srcToken][_chainId] = _dstToken;\\n    emit TokenMapped(_srcToken, _chainId, _dstToken);\\n  }\\n\\n  function setChainIdToEid(uint32 _chainId, uint32 _eid) public onlyOwner {\\n    chainIdToEid[_chainId] = _eid;\\n    emit ChainIdToEidSet(_chainId, _eid);\\n  }\\n\\n  function setEidToChainId(uint32 _eid, uint32 _chainId) public onlyOwner {\\n    eidToChainId[_eid] = _chainId;\\n    emit EidToChainIdSet(_eid, _chainId);\\n  }\\n\\n  // PUBLIC FUNCTIONS\\n  function quote(\\n    uint32 _dstChainId,\\n    address _token,\\n    uint256 _amount,\\n    address _to\\n  ) external view returns (uint256 nativeFee, uint256 zroFee) {\\n    return _quoteInternal(_dstChainId, _token, _amount, _to, bytes(\\\"\\\"), false);\\n  }\\n\\n  function quote(\\n    uint32 _dstChainId, // destination endpoint id\\n    address _token,\\n    uint256 _amount,\\n    address _to,\\n    bytes memory _options, // your message execution options\\n    bool _payInLzToken // boolean for which token to return fee in\\n  ) external view returns (uint256 nativeFee, uint256 zroFee) {\\n    return _quoteInternal(_dstChainId, _token, _amount, _to, _options, _payInLzToken);\\n  }\\n\\n  function send(\\n    address _token,\\n    uint256 _amount,\\n    address _to,\\n    uint32 _dstChainId\\n  ) external payable {\\n    _send(_dstChainId, _token, _amount, _to, bytes(\\\"\\\"));\\n  }\\n\\n  /**\\n   * @notice Sends tokens to a destination chain\\n   *\\n   * @param _token The token to send\\n   * @param _amount The amount of tokens to send\\n   * @param _to The address to send the tokens to\\n   * @param _dstChainId The destination chain id\\n   * @param _options The options to send the tokens with\\n   */\\n  function send(\\n    address _token,\\n    uint256 _amount,\\n    address _to,\\n    uint32 _dstChainId,\\n    bytes calldata _options\\n  ) external payable {\\n    _send(_dstChainId, _token, _amount, _to, _options);\\n  }\\n\\n  // INTERNAL FUNCTIONS\\n  function _quoteInternal(\\n    uint32 _dstChainId,\\n    address _token,\\n    uint256 _amount,\\n    address _to,\\n    bytes memory _options,\\n    bool _payInLzToken\\n  ) internal view returns (uint256 nativeFee, uint256 zroFee) {\\n    uint32 _dstEid = chainIdToEid[_dstChainId];\\n    if (_dstEid == 0) {\\n      revert ChainIdNotSet();\\n    }\\n    bytes memory _payload = abi.encode(_to, _token, _amount);\\n    MessagingFee memory fee = _quote(_dstEid, _payload, _options, _payInLzToken);\\n    return (fee.nativeFee, fee.lzTokenFee);\\n  }\\n\\n  function _send(\\n    uint32 _dstChainId,\\n    address _token,\\n    uint256 _amount,\\n    address _to,\\n    bytes memory _options\\n  ) internal {\\n    uint32 _dstEid = chainIdToEid[_dstChainId];\\n    if (_dstEid == 0) {\\n      revert ChainIdNotSet();\\n    }\\n\\n    // transfer tokens to this contract\\n    IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n\\n    // take fee and burn the tokens\\n    uint256 _amountAfterFee = (_amount * (10000 - feeBps)) / 10000;\\n    IXERC20(_token).burn(msg.sender, _amountAfterFee);\\n\\n    bytes memory _payload = abi.encode(_to, _token, _amountAfterFee);\\n    MessagingReceipt memory _receipt = _lzSend(\\n      _dstEid,\\n      _payload,\\n      _options,\\n      // Fee in native gas and ZRO token.\\n      MessagingFee(msg.value, 0),\\n      // Refund address in case of failed source message.\\n      payable(msg.sender)\\n    );\\n    emit TokenSent(_token, _amountAfterFee, _to, _dstChainId, _receipt.guid);\\n  }\\n\\n  // LAYERZERO FUNCTIONS\\n\\n  /**\\n   * @dev Called when data is received from the protocol. It overrides the equivalent function in the parent contract.\\n   * Protocol messages are defined as packets, comprised of the following parameters.\\n   * @param _origin A struct containing information about where the packet came from.\\n   * @param _guid A global unique identifier for tracking the packet.\\n   * @param payload Encoded message.\\n   */\\n  function _lzReceive(\\n    Origin calldata _origin,\\n    bytes32 _guid,\\n    bytes calldata payload,\\n    address, // Executor address as specified by the OApp.\\n    bytes calldata // Any extra data or options to trigger on receipt.\\n  ) internal override {\\n    // Decode the payload to get the message\\n    (address _to, address _srcToken, uint256 _amount) = abi.decode(payload, (address, address, uint256));\\n\\n    // get the mapped token using the current chain id and received source token\\n    address _dstToken = mappedTokens[_srcToken][eidToChainId[uint32(block.chainid)]];\\n    if (_dstToken == address(0)) {\\n      revert TokenNotSet();\\n    }\\n\\n    // mint the tokens to the destination address\\n    IXERC20(_srcToken).mint(_to, _amount);\\n    emit TokenReceived(_dstToken, _amount, _to, eidToChainId[_origin.srcEid], _guid);\\n  }\\n}\\n\",\"keccak256\":\"0x1e2d9457eaae5981a663c7c08ad5756d799424f2fb29176eb1397769eec99376\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001f8138038062001f818339810160408190526200003491620002e9565b80338181620000438162000182565b6001600160a01b0380831660805281166200007157604051632d618d8160e21b815260040160405180910390fd5b60805160405163ca5eb5e160e01b81526001600160a01b0383811660048301529091169063ca5eb5e190602401600060405180830381600087803b158015620000b957600080fd5b505af1158015620000ce573d6000803e3d6000fd5b505050600287905550620000ee935061210592506175e8915050620001d2565b620000fd600a61759f620001d2565b6200010c60fc61762f620001d2565b6200011c61ed88617647620001d2565b6200012c61868b617634620001d2565b6200013c6175e86121056200022d565b6200014b61759f600a6200022d565b6200015a61762f60fc6200022d565b6200016a61764761ed886200022d565b6200017a61763461868b6200022d565b505062000328565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620001dc62000288565b63ffffffff828116600081815260046020526040808220805463ffffffff19169486169485179055517fca3a427605227707d442b29ebfc079cbb4eed8504c9e91a9dc082383749a65ba9190a35050565b6200023762000288565b63ffffffff828116600081815260056020526040808220805463ffffffff19169486169485179055517fccdd25d4741ed2a08cec83b24a123c47cdf831230a4e029a6848164513d2632b9190a35050565b6000546001600160a01b03163314620002e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b60008060408385031215620002fd57600080fd5b825160208401519092506001600160a01b03811681146200031d57600080fd5b809150509250929050565b608051611c136200036e60003960008181610277015281816104fe015281816107fb01528181610e7b01528181610f790152818161107d01526111360152611c136000f3fe60806040526004361061014b5760003560e01c806372c27b62116100b6578063bb0b6a531161006f578063bb0b6a5314610429578063bda12a9514610456578063ca5eb5e114610489578063e6e36b9a146104a9578063f2fde38b146104bc578063ff7bd03d146104dc57600080fd5b806372c27b621461031a5780637d25a05e1461033a57806382413eac146103735780638b42babd146103a35780638da5cb5b146103eb578063a3af26d91461040957600080fd5b80634650c43f116101085780634650c43f146102255780634ae951fc146102455780635e280f11146102655780635fc984a9146102b15780636760111c146102c4578063715018a61461030557600080fd5b806313137d651461015057806317442b70146101655780631a3b21721461018c57806324a9d853146101c15780633400288b146101e55780633f6e82c314610205575b600080fd5b61016361015e366004611451565b6104fc565b005b34801561017157600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561019857600080fd5b506101ac6101a736600461156a565b6105bc565b60408051928352602083019190915201610183565b3480156101cd57600080fd5b506101d760025481565b604051908152602001610183565b3480156101f157600080fd5b5061016361020036600461164e565b6105dc565b34801561021157600080fd5b506101ac610220366004611678565b6105f2565b34801561023157600080fd5b506101636102403660046116c9565b610620565b34801561025157600080fd5b506101636102603660046116fc565b610679565b34801561027157600080fd5b506102997f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610183565b6101636102bf366004611745565b6106ec565b3480156102d057600080fd5b506102996102df366004611796565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b34801561031157600080fd5b5061016361070e565b34801561032657600080fd5b506101636103353660046117b4565b610722565b34801561034657600080fd5b5061035a61035536600461164e565b61075d565b60405167ffffffffffffffff9091168152602001610183565b34801561037f57600080fd5b5061039361038e3660046117cd565b610766565b6040519015158152602001610183565b3480156103af57600080fd5b506103d66103be366004611829565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610183565b3480156103f757600080fd5b506000546001600160a01b0316610299565b34801561041557600080fd5b506101636104243660046116c9565b61077b565b34801561043557600080fd5b506101d7610444366004611829565b60016020526000908152604090205481565b34801561046257600080fd5b506103d6610471366004611829565b60046020526000908152604090205463ffffffff1681565b34801561049557600080fd5b506101636104a436600461184b565b6107d4565b6101636104b7366004611868565b61085a565b3480156104c857600080fd5b506101636104d736600461184b565b6108a5565b3480156104e857600080fd5b506103936104f73660046118eb565b61091e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461054c576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061056690610561908a611829565b610954565b146105a4576105786020880188611829565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610543565b6105b387878787878787610990565b50505050505050565b6000806105cd888888888888610ae5565b91509150965096945050505050565b6105e4610b71565b6105ee8282610bcb565b5050565b60008061061386868686604051806020016040528060008152506000610ae5565b9150915094509492505050565b610628610b71565b63ffffffff828116600081815260046020526040808220805463ffffffff19169486169485179055517fca3a427605227707d442b29ebfc079cbb4eed8504c9e91a9dc082383749a65ba9190a35050565b610681610b71565b6001600160a01b03828116600081815260036020908152604080832063ffffffff8916808552925280832080546001600160a01b0319169587169586179055519092917f15b609c835edb2b4e866ce0b52ade03aa9fa21fab07383b0a0d7f3258c956a6391a4505050565b6107088185858560405180602001604052806000815250610c20565b50505050565b610716610b71565b6107206000610e15565b565b61072a610b71565b600281905560405181907f4f78c4ceb393a616bbd264a4584a9ad15d722042ce1e135e6a8380217f5cb42b90600090a250565b60005b92915050565b6001600160a01b03811630145b949350505050565b610783610b71565b63ffffffff828116600081815260056020526040808220805463ffffffff19169486169485179055517fccdd25d4741ed2a08cec83b24a123c47cdf831230a4e029a6848164513d2632b9190a35050565b6107dc610b71565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b5050505050565b61089d8387878786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c2092505050565b505050505050565b6108ad610b71565b6001600160a01b0381166109125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610543565b61091b81610e15565b50565b60006020820180359060019083906109369086611829565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806107605760405163f6ff4fb760e01b815263ffffffff84166004820152602401610543565b600080806109a087890189611907565b6001600160a01b03808316600090815260036020908152604080832063ffffffff46811685526005845282852054168452909152902054939650919450925016806109fe57604051634b62f01360e01b815260040160405180910390fd5b6040516340c10f1960e01b81526001600160a01b038581166004830152602482018490528416906340c10f1990604401600060405180830381600087803b158015610a4857600080fd5b505af1158015610a5c573d6000803e3d6000fd5b506005925060009150610a74905060208e018e611829565b63ffffffff908116825260208083019390935260409182016000205482518681529384018e905216916001600160a01b0380881692908516917f94d4076657c103b5c4c62e0537f4775b58368a87c57ee50a98b67424f63ff81d910160405180910390a45050505050505050505050565b63ffffffff8087166000908152600460205260408120549091829116808203610b21576040516373705e9160e11b815260040160405180910390fd5b6000868989604051602001610b3893929190611948565b60405160208183030381529060405290506000610b5783838989610e65565b8051602090910151909c909b509950505050505050505050565b6000546001600160a01b031633146107205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b63ffffffff80861660009081526004602052604081205490911690819003610c5b576040516373705e9160e11b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038616906323b872dd90610c8b90339030908990600401611948565b6020604051808303816000875af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce919061196c565b506000612710600254612710610ce4919061199f565b610cee90876119b2565b610cf891906119c9565b604051632770a7eb60e21b8152336004820152602481018290529091506001600160a01b03871690639dc29fac90604401600060405180830381600087803b158015610d4357600080fd5b505af1158015610d57573d6000803e3d6000fd5b505050506000848783604051602001610d7293929190611948565b60405160208183030381529060405290506000610da78483876040518060400160405280348152602001600081525033610f46565b90508863ffffffff16866001600160a01b0316896001600160a01b03167fa81fe4f47f4d57fa23a0adede4a96172fc2b54d7facdef004614e7ba3b18c356868560000151604051610e02929190918252602082015260400190565b60405180910390a4505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001610ec889610954565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401610efd929190611a3b565b6040805180830381865afa158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d9190611b03565b95945050505050565b610f4e611393565b6000610f5d8460000151611051565b602085015190915015610f7757610f778460200151611079565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff168152602001610fc78c610954565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401611003929190611a3b565b60806040518083038185885af1158015611021573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110469190611b1f565b979650505050505050565b6000813414611075576040516304fb820960e51b8152346004820152602401610543565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd9190611b91565b90506001600160a01b038116611126576040516329b99a9560e11b815260040160405180910390fd5b6105ee6001600160a01b038216337f000000000000000000000000000000000000000000000000000000000000000085610708846323b872dd60e01b85858560405160240161117793929190611948565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915260006111fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112809092919063ffffffff16565b80519091501561127b578080602001905181019061121c919061196c565b61127b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610543565b505050565b6060610773848460008585600080866001600160a01b031685876040516112a79190611bae565b60006040518083038185875af1925050503d80600081146112e4576040519150601f19603f3d011682016040523d82523d6000602084013e6112e9565b606091505b5091509150611046878383876060831561136457825160000361135d576001600160a01b0385163b61135d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610543565b5081610773565b61077383838151156113795781518083602001fd5b8060405162461bcd60e51b81526004016105439190611bca565b604051806060016040528060008019168152602001600067ffffffffffffffff1681526020016113d6604051806040016040528060008152602001600081525090565b905290565b6000606082840312156113ed57600080fd5b50919050565b60008083601f84011261140557600080fd5b50813567ffffffffffffffff81111561141d57600080fd5b60208301915083602082850101111561143557600080fd5b9250929050565b6001600160a01b038116811461091b57600080fd5b600080600080600080600060e0888a03121561146c57600080fd5b61147689896113db565b965060608801359550608088013567ffffffffffffffff8082111561149a57600080fd5b6114a68b838c016113f3565b909750955060a08a013591506114bb8261143c565b90935060c089013590808211156114d157600080fd5b506114de8a828b016113f3565b989b979a50959850939692959293505050565b803563ffffffff8116811461150557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156115495761154961150a565b604052919050565b801515811461091b57600080fd5b803561150581611551565b60008060008060008060c0878903121561158357600080fd5b61158c876114f1565b955060208088013561159d8161143c565b95506040880135945060608801356115b48161143c565b9350608088013567ffffffffffffffff808211156115d157600080fd5b818a0191508a601f8301126115e557600080fd5b8135818111156115f7576115f761150a565b611609601f8201601f19168501611520565b91508082528b8482850101111561161f57600080fd5b808484018584013760008482840101525080945050505061164260a0880161155f565b90509295509295509295565b6000806040838503121561166157600080fd5b61166a836114f1565b946020939093013593505050565b6000806000806080858703121561168e57600080fd5b611697856114f1565b935060208501356116a78161143c565b92506040850135915060608501356116be8161143c565b939692955090935050565b600080604083850312156116dc57600080fd5b6116e5836114f1565b91506116f3602084016114f1565b90509250929050565b60008060006060848603121561171157600080fd5b61171a846114f1565b9250602084013561172a8161143c565b9150604084013561173a8161143c565b809150509250925092565b6000806000806080858703121561175b57600080fd5b84356117668161143c565b935060208501359250604085013561177d8161143c565b915061178b606086016114f1565b905092959194509250565b600080604083850312156117a957600080fd5b82356116e58161143c565b6000602082840312156117c657600080fd5b5035919050565b60008060008060a085870312156117e357600080fd5b6117ed86866113db565b9350606085013567ffffffffffffffff81111561180957600080fd5b611815878288016113f3565b90945092505060808501356116be8161143c565b60006020828403121561183b57600080fd5b611844826114f1565b9392505050565b60006020828403121561185d57600080fd5b81356118448161143c565b60008060008060008060a0878903121561188157600080fd5b863561188c8161143c565b95506020870135945060408701356118a38161143c565b93506118b1606088016114f1565b9250608087013567ffffffffffffffff8111156118cd57600080fd5b6118d989828a016113f3565b979a9699509497509295939492505050565b6000606082840312156118fd57600080fd5b61184483836113db565b60008060006060848603121561191c57600080fd5b83356119278161143c565b925060208401356119378161143c565b929592945050506040919091013590565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561197e57600080fd5b815161184481611551565b634e487b7160e01b600052601160045260246000fd5b8181038181111561076057610760611989565b808202811582820484141761076057610760611989565b6000826119e657634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611a065781810151838201526020016119ee565b50506000910152565b60008151808452611a278160208601602086016119eb565b601f01601f19169290920160200192915050565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152611a7160e0840182611a0f565b90506060850151603f198483030160a0850152611a8e8282611a0f565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215611ac657600080fd5b6040516040810181811067ffffffffffffffff82111715611ae957611ae961150a565b604052825181526020928301519281019290925250919050565b600060408284031215611b1557600080fd5b6118448383611ab4565b600060808284031215611b3157600080fd5b6040516060810167ffffffffffffffff8282108183111715611b5557611b5561150a565b8160405284518352602085015191508082168214611b7257600080fd5b506020820152611b858460408501611ab4565b60408201529392505050565b600060208284031215611ba357600080fd5b81516118448161143c565b60008251611bc08184602087016119eb565b9190910192915050565b6020815260006118446020830184611a0f56fea26469706673582212207e829284742cdf0d9a6ca5a6a138f52315ba1f2bfbdafd157258f82a39408cc864736f6c63430008160033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c806372c27b62116100b6578063bb0b6a531161006f578063bb0b6a5314610429578063bda12a9514610456578063ca5eb5e114610489578063e6e36b9a146104a9578063f2fde38b146104bc578063ff7bd03d146104dc57600080fd5b806372c27b621461031a5780637d25a05e1461033a57806382413eac146103735780638b42babd146103a35780638da5cb5b146103eb578063a3af26d91461040957600080fd5b80634650c43f116101085780634650c43f146102255780634ae951fc146102455780635e280f11146102655780635fc984a9146102b15780636760111c146102c4578063715018a61461030557600080fd5b806313137d651461015057806317442b70146101655780631a3b21721461018c57806324a9d853146101c15780633400288b146101e55780633f6e82c314610205575b600080fd5b61016361015e366004611451565b6104fc565b005b34801561017157600080fd5b50604080516001815260026020820152015b60405180910390f35b34801561019857600080fd5b506101ac6101a736600461156a565b6105bc565b60408051928352602083019190915201610183565b3480156101cd57600080fd5b506101d760025481565b604051908152602001610183565b3480156101f157600080fd5b5061016361020036600461164e565b6105dc565b34801561021157600080fd5b506101ac610220366004611678565b6105f2565b34801561023157600080fd5b506101636102403660046116c9565b610620565b34801561025157600080fd5b506101636102603660046116fc565b610679565b34801561027157600080fd5b506102997f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610183565b6101636102bf366004611745565b6106ec565b3480156102d057600080fd5b506102996102df366004611796565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b34801561031157600080fd5b5061016361070e565b34801561032657600080fd5b506101636103353660046117b4565b610722565b34801561034657600080fd5b5061035a61035536600461164e565b61075d565b60405167ffffffffffffffff9091168152602001610183565b34801561037f57600080fd5b5061039361038e3660046117cd565b610766565b6040519015158152602001610183565b3480156103af57600080fd5b506103d66103be366004611829565b60056020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610183565b3480156103f757600080fd5b506000546001600160a01b0316610299565b34801561041557600080fd5b506101636104243660046116c9565b61077b565b34801561043557600080fd5b506101d7610444366004611829565b60016020526000908152604090205481565b34801561046257600080fd5b506103d6610471366004611829565b60046020526000908152604090205463ffffffff1681565b34801561049557600080fd5b506101636104a436600461184b565b6107d4565b6101636104b7366004611868565b61085a565b3480156104c857600080fd5b506101636104d736600461184b565b6108a5565b3480156104e857600080fd5b506103936104f73660046118eb565b61091e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461054c576040516391ac5e4f60e01b81523360048201526024015b60405180910390fd5b6020870180359061056690610561908a611829565b610954565b146105a4576105786020880188611829565b60405163309afaf360e21b815263ffffffff909116600482015260208801356024820152604401610543565b6105b387878787878787610990565b50505050505050565b6000806105cd888888888888610ae5565b91509150965096945050505050565b6105e4610b71565b6105ee8282610bcb565b5050565b60008061061386868686604051806020016040528060008152506000610ae5565b9150915094509492505050565b610628610b71565b63ffffffff828116600081815260046020526040808220805463ffffffff19169486169485179055517fca3a427605227707d442b29ebfc079cbb4eed8504c9e91a9dc082383749a65ba9190a35050565b610681610b71565b6001600160a01b03828116600081815260036020908152604080832063ffffffff8916808552925280832080546001600160a01b0319169587169586179055519092917f15b609c835edb2b4e866ce0b52ade03aa9fa21fab07383b0a0d7f3258c956a6391a4505050565b6107088185858560405180602001604052806000815250610c20565b50505050565b610716610b71565b6107206000610e15565b565b61072a610b71565b600281905560405181907f4f78c4ceb393a616bbd264a4584a9ad15d722042ce1e135e6a8380217f5cb42b90600090a250565b60005b92915050565b6001600160a01b03811630145b949350505050565b610783610b71565b63ffffffff828116600081815260056020526040808220805463ffffffff19169486169485179055517fccdd25d4741ed2a08cec83b24a123c47cdf831230a4e029a6848164513d2632b9190a35050565b6107dc610b71565b60405163ca5eb5e160e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ca5eb5e190602401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b5050505050565b61089d8387878786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c2092505050565b505050505050565b6108ad610b71565b6001600160a01b0381166109125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610543565b61091b81610e15565b50565b60006020820180359060019083906109369086611829565b63ffffffff1681526020810191909152604001600020541492915050565b63ffffffff8116600090815260016020526040812054806107605760405163f6ff4fb760e01b815263ffffffff84166004820152602401610543565b600080806109a087890189611907565b6001600160a01b03808316600090815260036020908152604080832063ffffffff46811685526005845282852054168452909152902054939650919450925016806109fe57604051634b62f01360e01b815260040160405180910390fd5b6040516340c10f1960e01b81526001600160a01b038581166004830152602482018490528416906340c10f1990604401600060405180830381600087803b158015610a4857600080fd5b505af1158015610a5c573d6000803e3d6000fd5b506005925060009150610a74905060208e018e611829565b63ffffffff908116825260208083019390935260409182016000205482518681529384018e905216916001600160a01b0380881692908516917f94d4076657c103b5c4c62e0537f4775b58368a87c57ee50a98b67424f63ff81d910160405180910390a45050505050505050505050565b63ffffffff8087166000908152600460205260408120549091829116808203610b21576040516373705e9160e11b815260040160405180910390fd5b6000868989604051602001610b3893929190611948565b60405160208183030381529060405290506000610b5783838989610e65565b8051602090910151909c909b509950505050505050505050565b6000546001600160a01b031633146107205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610543565b63ffffffff8216600081815260016020908152604091829020849055815192835282018390527f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b910160405180910390a15050565b63ffffffff80861660009081526004602052604081205490911690819003610c5b576040516373705e9160e11b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038616906323b872dd90610c8b90339030908990600401611948565b6020604051808303816000875af1158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce919061196c565b506000612710600254612710610ce4919061199f565b610cee90876119b2565b610cf891906119c9565b604051632770a7eb60e21b8152336004820152602481018290529091506001600160a01b03871690639dc29fac90604401600060405180830381600087803b158015610d4357600080fd5b505af1158015610d57573d6000803e3d6000fd5b505050506000848783604051602001610d7293929190611948565b60405160208183030381529060405290506000610da78483876040518060400160405280348152602001600081525033610f46565b90508863ffffffff16866001600160a01b0316896001600160a01b03167fa81fe4f47f4d57fa23a0adede4a96172fc2b54d7facdef004614e7ba3b18c356868560000151604051610e02929190918252602082015260400190565b60405180910390a4505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051808201909152600080825260208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ddc28c586040518060a001604052808863ffffffff168152602001610ec889610954565b8152602001878152602001868152602001851515815250306040518363ffffffff1660e01b8152600401610efd929190611a3b565b6040805180830381865afa158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d9190611b03565b95945050505050565b610f4e611393565b6000610f5d8460000151611051565b602085015190915015610f7757610f778460200151611079565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632637a450826040518060a001604052808b63ffffffff168152602001610fc78c610954565b81526020018a815260200189815260200160008960200151111515815250866040518463ffffffff1660e01b8152600401611003929190611a3b565b60806040518083038185885af1158015611021573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906110469190611b1f565b979650505050505050565b6000813414611075576040516304fb820960e51b8152346004820152602401610543565b5090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4fe1d946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd9190611b91565b90506001600160a01b038116611126576040516329b99a9560e11b815260040160405180910390fd5b6105ee6001600160a01b038216337f000000000000000000000000000000000000000000000000000000000000000085610708846323b872dd60e01b85858560405160240161117793929190611948565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915260006111fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112809092919063ffffffff16565b80519091501561127b578080602001905181019061121c919061196c565b61127b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610543565b505050565b6060610773848460008585600080866001600160a01b031685876040516112a79190611bae565b60006040518083038185875af1925050503d80600081146112e4576040519150601f19603f3d011682016040523d82523d6000602084013e6112e9565b606091505b5091509150611046878383876060831561136457825160000361135d576001600160a01b0385163b61135d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610543565b5081610773565b61077383838151156113795781518083602001fd5b8060405162461bcd60e51b81526004016105439190611bca565b604051806060016040528060008019168152602001600067ffffffffffffffff1681526020016113d6604051806040016040528060008152602001600081525090565b905290565b6000606082840312156113ed57600080fd5b50919050565b60008083601f84011261140557600080fd5b50813567ffffffffffffffff81111561141d57600080fd5b60208301915083602082850101111561143557600080fd5b9250929050565b6001600160a01b038116811461091b57600080fd5b600080600080600080600060e0888a03121561146c57600080fd5b61147689896113db565b965060608801359550608088013567ffffffffffffffff8082111561149a57600080fd5b6114a68b838c016113f3565b909750955060a08a013591506114bb8261143c565b90935060c089013590808211156114d157600080fd5b506114de8a828b016113f3565b989b979a50959850939692959293505050565b803563ffffffff8116811461150557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156115495761154961150a565b604052919050565b801515811461091b57600080fd5b803561150581611551565b60008060008060008060c0878903121561158357600080fd5b61158c876114f1565b955060208088013561159d8161143c565b95506040880135945060608801356115b48161143c565b9350608088013567ffffffffffffffff808211156115d157600080fd5b818a0191508a601f8301126115e557600080fd5b8135818111156115f7576115f761150a565b611609601f8201601f19168501611520565b91508082528b8482850101111561161f57600080fd5b808484018584013760008482840101525080945050505061164260a0880161155f565b90509295509295509295565b6000806040838503121561166157600080fd5b61166a836114f1565b946020939093013593505050565b6000806000806080858703121561168e57600080fd5b611697856114f1565b935060208501356116a78161143c565b92506040850135915060608501356116be8161143c565b939692955090935050565b600080604083850312156116dc57600080fd5b6116e5836114f1565b91506116f3602084016114f1565b90509250929050565b60008060006060848603121561171157600080fd5b61171a846114f1565b9250602084013561172a8161143c565b9150604084013561173a8161143c565b809150509250925092565b6000806000806080858703121561175b57600080fd5b84356117668161143c565b935060208501359250604085013561177d8161143c565b915061178b606086016114f1565b905092959194509250565b600080604083850312156117a957600080fd5b82356116e58161143c565b6000602082840312156117c657600080fd5b5035919050565b60008060008060a085870312156117e357600080fd5b6117ed86866113db565b9350606085013567ffffffffffffffff81111561180957600080fd5b611815878288016113f3565b90945092505060808501356116be8161143c565b60006020828403121561183b57600080fd5b611844826114f1565b9392505050565b60006020828403121561185d57600080fd5b81356118448161143c565b60008060008060008060a0878903121561188157600080fd5b863561188c8161143c565b95506020870135945060408701356118a38161143c565b93506118b1606088016114f1565b9250608087013567ffffffffffffffff8111156118cd57600080fd5b6118d989828a016113f3565b979a9699509497509295939492505050565b6000606082840312156118fd57600080fd5b61184483836113db565b60008060006060848603121561191c57600080fd5b83356119278161143c565b925060208401356119378161143c565b929592945050506040919091013590565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561197e57600080fd5b815161184481611551565b634e487b7160e01b600052601160045260246000fd5b8181038181111561076057610760611989565b808202811582820484141761076057610760611989565b6000826119e657634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611a065781810151838201526020016119ee565b50506000910152565b60008151808452611a278160208601602086016119eb565b601f01601f19169290920160200192915050565b6040815263ffffffff8351166040820152602083015160608201526000604084015160a06080840152611a7160e0840182611a0f565b90506060850151603f198483030160a0850152611a8e8282611a0f565b60809690960151151560c08501525050506001600160a01b039190911660209091015290565b600060408284031215611ac657600080fd5b6040516040810181811067ffffffffffffffff82111715611ae957611ae961150a565b604052825181526020928301519281019290925250919050565b600060408284031215611b1557600080fd5b6118448383611ab4565b600060808284031215611b3157600080fd5b6040516060810167ffffffffffffffff8282108183111715611b5557611b5561150a565b8160405284518352602085015191508082168214611b7257600080fd5b506020820152611b858460408501611ab4565b60408201529392505050565b600060208284031215611ba357600080fd5b81516118448161143c565b60008251611bc08184602087016119eb565b9190910192915050565b6020815260006118446020830184611a0f56fea26469706673582212207e829284742cdf0d9a6ca5a6a138f52315ba1f2bfbdafd157258f82a39408cc864736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "send(address,uint256,address,uint32,bytes)": {
        "params": {
          "_amount": "The amount of tokens to send",
          "_dstChainId": "The destination chain id",
          "_options": "The options to send the tokens with",
          "_to": "The address to send the tokens to",
          "_token": "The token to send"
        }
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "send(address,uint256,address,uint32,bytes)": {
        "notice": "Sends tokens to a destination chain"
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1326,
        "contract": "contracts/bridge/xERC20LayerZero.sol:xERC20LayerZero",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 785,
        "contract": "contracts/bridge/xERC20LayerZero.sol:xERC20LayerZero",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 2305,
        "contract": "contracts/bridge/xERC20LayerZero.sol:xERC20LayerZero",
        "label": "feeBps",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2311,
        "contract": "contracts/bridge/xERC20LayerZero.sol:xERC20LayerZero",
        "label": "mappedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_address))"
      },
      {
        "astId": 2315,
        "contract": "contracts/bridge/xERC20LayerZero.sol:xERC20LayerZero",
        "label": "chainIdToEid",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 2319,
        "contract": "contracts/bridge/xERC20LayerZero.sol:xERC20LayerZero",
        "label": "eidToChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_address)"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}