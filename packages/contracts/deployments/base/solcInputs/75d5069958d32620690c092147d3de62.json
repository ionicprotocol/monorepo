{
  "language": "Solidity",
  "sources": {
    "@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./OwnableUpgradeable.sol\";\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\r\n    function __Ownable2Step_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\r\n    }\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() external {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/ContextUpgradeable.sol\";\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20Upgradeable.sol\";\r\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\r\nimport \"../../utils/ContextUpgradeable.sol\";\r\nimport \"../../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[45] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20PermitUpgradeable {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20Upgradeable.sol\";\r\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\r\nimport \"../../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(\r\n        IERC20Upgradeable token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20Upgradeable token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20Upgradeable token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20PermitUpgradeable token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\r\n * `CREATE2` can be used to compute in advance the address where a smart\r\n * contract will be deployed, which allows for interesting new mechanisms known\r\n * as 'counterfactual interactions'.\r\n *\r\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\r\n * information.\r\n */\r\nlibrary Create2Upgradeable {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(\r\n        uint256 amount,\r\n        bytes32 salt,\r\n        bytes memory bytecode\r\n    ) internal returns (address addr) {\r\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(\r\n        bytes32 salt,\r\n        bytes32 bytecodeHash,\r\n        address deployer\r\n    ) internal pure returns (address addr) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40) // Get free memory pointer\r\n\r\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\r\n            // |-------------------|---------------------------------------------------------------------------|\r\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\r\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\r\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\r\n            // | 0xFF              |            FF                                                             |\r\n            // |-------------------|---------------------------------------------------------------------------|\r\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\r\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\r\n\r\n            mstore(add(ptr, 0x40), bytecodeHash)\r\n            mstore(add(ptr, 0x20), salt)\r\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\r\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\r\n            mstore8(start, 0xff)\r\n            addr := keccak256(start, 85)\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() external {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822Proxiable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../Proxy.sol\";\r\nimport \"./ERC1967Upgrade.sol\";\r\n\r\n/**\r\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\r\n * implementation address that can be changed. This address is stored in storage in the location specified by\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\r\n * implementation behind the proxy.\r\n */\r\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\r\n    /**\r\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\r\n     *\r\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\r\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\r\n     */\r\n    constructor(address _logic, bytes memory _data) payable {\r\n        _upgradeToAndCall(_logic, _data, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view virtual override returns (address impl) {\r\n        return ERC1967Upgrade._getImplementation();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../beacon/IBeacon.sol\";\r\nimport \"../../interfaces/draft-IERC1822.sol\";\r\nimport \"../../utils/Address.sol\";\r\nimport \"../../utils/StorageSlot.sol\";\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967Upgrade {\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            Address.isContract(IBeacon(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overridden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC1967/ERC1967Proxy.sol\";\r\n\r\n/**\r\n * @dev This contract implements a proxy that is upgradeable by an admin.\r\n *\r\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\r\n * clashing], which can potentially be used in an attack, this contract uses the\r\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\r\n * things that go hand in hand:\r\n *\r\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\r\n * that call matches one of the admin functions exposed by the proxy itself.\r\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\r\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\r\n * \"admin cannot fallback to proxy target\".\r\n *\r\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\r\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\r\n * to sudden errors when trying to call a function from the proxy implementation.\r\n *\r\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\r\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\r\n */\r\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\r\n    /**\r\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\r\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\r\n     */\r\n    constructor(\r\n        address _logic,\r\n        address admin_,\r\n        bytes memory _data\r\n    ) payable ERC1967Proxy(_logic, _data) {\r\n        _changeAdmin(admin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _getAdmin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\r\n     */\r\n    function admin() external ifAdmin returns (address admin_) {\r\n        admin_ = _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\r\n     */\r\n    function implementation() external ifAdmin returns (address implementation_) {\r\n        implementation_ = _implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\r\n     */\r\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\r\n        _changeAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\r\n     */\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\r\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\r\n     * proxied contract.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\r\n        _upgradeToAndCall(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _admin() internal view virtual returns (address) {\r\n        return _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\r\n     */\r\n    function _beforeFallback() internal virtual override {\r\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\r\n        super._beforeFallback();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "adrastia-periphery/rates/IHistoricalRates.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\nimport \"./RateLibrary.sol\";\n\n/**\n * @title IHistoricalRates\n * @notice An interface that defines a contract that stores historical rates.\n */\ninterface IHistoricalRates {\n    /// @notice Gets an rate for a token at a specific index.\n    /// @param token The address of the token to get the rates for.\n    /// @param index The index of the rate to get, where index 0 contains the latest rate, and the last\n    ///   index contains the oldest rate (uses reverse chronological ordering).\n    /// @return rate The rate for the token at the specified index.\n    function getRateAt(address token, uint256 index) external view returns (RateLibrary.Rate memory);\n\n    /// @notice Gets the latest rates for a token.\n    /// @param token The address of the token to get the rates for.\n    /// @param amount The number of rates to get.\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\n    function getRates(address token, uint256 amount) external view returns (RateLibrary.Rate[] memory);\n\n    /// @notice Gets the latest rates for a token.\n    /// @param token The address of the token to get the rates for.\n    /// @param amount The number of rates to get.\n    /// @param offset The index of the first rate to get (default: 0).\n    /// @param increment The increment between rates to get (default: 1).\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\n    function getRates(\n        address token,\n        uint256 amount,\n        uint256 offset,\n        uint256 increment\n    ) external view returns (RateLibrary.Rate[] memory);\n\n    /// @notice Gets the number of rates for a token.\n    /// @param token The address of the token to get the number of rates for.\n    /// @return count The number of rates for the token.\n    function getRatesCount(address token) external view returns (uint256);\n\n    /// @notice Gets the capacity of rates for a token.\n    /// @param token The address of the token to get the capacity of rates for.\n    /// @return capacity The capacity of rates for the token.\n    function getRatesCapacity(address token) external view returns (uint256);\n\n    /// @notice Sets the capacity of rates for a token.\n    /// @param token The address of the token to set the capacity of rates for.\n    /// @param amount The new capacity of rates for the token.\n    function setRatesCapacity(address token, uint256 amount) external;\n}\n"
    },
    "adrastia-periphery/rates/RateLibrary.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nlibrary RateLibrary {\n    struct Rate {\n        uint64 target;\n        uint64 current;\n        uint32 timestamp;\n    }\n}\n"
    },
    "contracts/adrastia/PrudentiaLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nlibrary PrudentiaLib {\r\n  struct PrudentiaConfig {\r\n    address controller; // Adrastia Prudentia controller address\r\n    uint8 offset; // Offset for delayed rate activation\r\n    int8 decimalShift; // Positive values scale the rate up (in powers of 10), negative values scale the rate down\r\n  }\r\n}\r\n"
    },
    "contracts/compound/CarefulMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title Careful Math\r\n * @author Compound\r\n * @notice Derived from OpenZeppelin's SafeMath library\r\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\ncontract CarefulMath {\r\n  /**\r\n   * @dev Possible error codes that we can return\r\n   */\r\n  enum MathError {\r\n    NO_ERROR,\r\n    DIVISION_BY_ZERO,\r\n    INTEGER_OVERFLOW,\r\n    INTEGER_UNDERFLOW\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, returns an error on overflow.\r\n   */\r\n  function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\r\n    if (a == 0) {\r\n      return (MathError.NO_ERROR, 0);\r\n    }\r\n\r\n    uint256 c;\r\n    unchecked {\r\n      c = a * b;\r\n    }\r\n\r\n    if (c / a != b) {\r\n      return (MathError.INTEGER_OVERFLOW, 0);\r\n    } else {\r\n      return (MathError.NO_ERROR, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   */\r\n  function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\r\n    if (b == 0) {\r\n      return (MathError.DIVISION_BY_ZERO, 0);\r\n    }\r\n\r\n    return (MathError.NO_ERROR, a / b);\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\r\n    if (b <= a) {\r\n      return (MathError.NO_ERROR, a - b);\r\n    } else {\r\n      return (MathError.INTEGER_UNDERFLOW, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, returns an error on overflow.\r\n   */\r\n  function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\r\n    uint256 c;\r\n    unchecked {\r\n      c = a + b;\r\n    }\r\n\r\n    if (c >= a) {\r\n      return (MathError.NO_ERROR, c);\r\n    } else {\r\n      return (MathError.INTEGER_OVERFLOW, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev add a and b and then subtract c\r\n   */\r\n  function addThenSubUInt(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 c\r\n  ) internal pure returns (MathError, uint256) {\r\n    (MathError err0, uint256 sum) = addUInt(a, b);\r\n\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, 0);\r\n    }\r\n\r\n    return subUInt(sum, c);\r\n  }\r\n}\r\n"
    },
    "contracts/compound/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\r\nimport { ComptrollerErrorReporter } from \"./ErrorReporter.sol\";\r\nimport { Exponential } from \"./Exponential.sol\";\r\nimport { BasePriceOracle } from \"../oracles/BasePriceOracle.sol\";\r\nimport { Unitroller } from \"./Unitroller.sol\";\r\nimport { IFeeDistributor } from \"./IFeeDistributor.sol\";\r\nimport { IIonicFlywheel } from \"../ionic/strategies/flywheel/IIonicFlywheel.sol\";\r\nimport { DiamondExtension, DiamondBase, LibDiamond } from \"../ionic/DiamondExtension.sol\";\r\nimport { ComptrollerExtensionInterface, ComptrollerBase, ComptrollerInterface } from \"./ComptrollerInterface.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\n/**\r\n * @title Compound's Comptroller Contract\r\n * @author Compound\r\n * @dev This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\r\n */\r\ncontract Comptroller is ComptrollerBase, ComptrollerInterface, ComptrollerErrorReporter, Exponential, DiamondExtension {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  /// @notice Emitted when an admin supports a market\r\n  event MarketListed(ICErc20 cToken);\r\n\r\n  /// @notice Emitted when an account enters a market\r\n  event MarketEntered(ICErc20 cToken, address account);\r\n\r\n  /// @notice Emitted when an account exits a market\r\n  event MarketExited(ICErc20 cToken, address account);\r\n\r\n  /// @notice Emitted when close factor is changed by admin\r\n  event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\r\n\r\n  /// @notice Emitted when a collateral factor is changed by admin\r\n  event NewCollateralFactor(ICErc20 cToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa);\r\n\r\n  /// @notice Emitted when liquidation incentive is changed by admin\r\n  event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\r\n\r\n  /// @notice Emitted when price oracle is changed\r\n  event NewPriceOracle(BasePriceOracle oldPriceOracle, BasePriceOracle newPriceOracle);\r\n\r\n  /// @notice Emitted when the whitelist enforcement is changed\r\n  event WhitelistEnforcementChanged(bool enforce);\r\n\r\n  /// @notice Emitted when a new RewardsDistributor contract is added to hooks\r\n  event AddedRewardsDistributor(address rewardsDistributor);\r\n\r\n  // closeFactorMantissa must be strictly greater than this value\r\n  uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\r\n\r\n  // closeFactorMantissa must not exceed this value\r\n  uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n  // No collateralFactorMantissa may exceed this value\r\n  uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n  // liquidationIncentiveMantissa must be no less than this value\r\n  uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\r\n\r\n  // liquidationIncentiveMantissa must be no greater than this value\r\n  uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\r\n\r\n  modifier isAuthorized() {\r\n    require(IFeeDistributor(ionicAdmin).canCall(address(this), msg.sender, address(this), msg.sig), \"not authorized\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveSupplyCaps(\r\n    address cToken\r\n  ) public view override(ComptrollerBase, ComptrollerInterface) returns (uint256 supplyCap) {\r\n    return ComptrollerBase.effectiveSupplyCaps(cToken);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveBorrowCaps(\r\n    address cToken\r\n  ) public view override(ComptrollerBase, ComptrollerInterface) returns (uint256 borrowCap) {\r\n    return ComptrollerBase.effectiveBorrowCaps(cToken);\r\n  }\r\n\r\n  /*** Assets You Are In ***/\r\n\r\n  /**\r\n   * @notice Returns the assets an account has entered\r\n   * @param account The address of the account to pull assets for\r\n   * @return A dynamic list with the assets the account has entered\r\n   */\r\n  function getAssetsIn(address account) external view returns (ICErc20[] memory) {\r\n    ICErc20[] memory assetsIn = accountAssets[account];\r\n\r\n    return assetsIn;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns whether the given account is entered in the given asset\r\n   * @param account The address of the account to check\r\n   * @param cToken The cToken to check\r\n   * @return True if the account is in the asset, otherwise false.\r\n   */\r\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool) {\r\n    return markets[address(cToken)].accountMembership[account];\r\n  }\r\n\r\n  /**\r\n   * @notice Add assets to be included in account liquidity calculation\r\n   * @param cTokens The list of addresses of the cToken markets to be enabled\r\n   * @return Success indicator for whether each corresponding market was entered\r\n   */\r\n  function enterMarkets(address[] memory cTokens) public override isAuthorized returns (uint256[] memory) {\r\n    uint256 len = cTokens.length;\r\n\r\n    uint256[] memory results = new uint256[](len);\r\n    for (uint256 i = 0; i < len; i++) {\r\n      ICErc20 cToken = ICErc20(cTokens[i]);\r\n\r\n      results[i] = uint256(addToMarketInternal(cToken, msg.sender));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\r\n   * @param cToken The market to enter\r\n   * @param borrower The address of the account to modify\r\n   * @return Success indicator for whether the market was entered\r\n   */\r\n  function addToMarketInternal(ICErc20 cToken, address borrower) internal returns (Error) {\r\n    Market storage marketToJoin = markets[address(cToken)];\r\n\r\n    if (!marketToJoin.isListed) {\r\n      // market is not listed, cannot join\r\n      return Error.MARKET_NOT_LISTED;\r\n    }\r\n\r\n    if (marketToJoin.accountMembership[borrower] == true) {\r\n      // already joined\r\n      return Error.NO_ERROR;\r\n    }\r\n\r\n    // survived the gauntlet, add to list\r\n    // NOTE: we store these somewhat redundantly as a significant optimization\r\n    //  this avoids having to iterate through the list for the most common use cases\r\n    //  that is, only when we need to perform liquidity checks\r\n    //  and not whenever we want to check if an account is in a particular market\r\n    marketToJoin.accountMembership[borrower] = true;\r\n    accountAssets[borrower].push(cToken);\r\n\r\n    // Add to allBorrowers\r\n    if (!borrowers[borrower]) {\r\n      allBorrowers.push(borrower);\r\n      borrowers[borrower] = true;\r\n      borrowerIndexes[borrower] = allBorrowers.length - 1;\r\n    }\r\n\r\n    emit MarketEntered(cToken, borrower);\r\n\r\n    return Error.NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Removes asset from sender's account liquidity calculation\r\n   * @dev Sender must not have an outstanding borrow balance in the asset,\r\n   *  or be providing necessary collateral for an outstanding borrow.\r\n   * @param cTokenAddress The address of the asset to be removed\r\n   * @return Whether or not the account successfully exited the market\r\n   */\r\n  function exitMarket(address cTokenAddress) external override isAuthorized returns (uint256) {\r\n    // TODO\r\n    require(markets[cTokenAddress].isListed, \"!Comptroller:exitMarket\");\r\n\r\n    ICErc20 cToken = ICErc20(cTokenAddress);\r\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\r\n    (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\r\n    require(oErr == 0, \"!exitMarket\"); // semi-opaque error code\r\n\r\n    /* Fail if the sender has a borrow balance */\r\n    if (amountOwed != 0) {\r\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\r\n    }\r\n\r\n    /* Fail if the sender is not permitted to redeem all of their tokens */\r\n    uint256 allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\r\n    if (allowed != 0) {\r\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\r\n    }\r\n\r\n    Market storage marketToExit = markets[cTokenAddress];\r\n\r\n    /* Return true if the sender is not already ‘in’ the market */\r\n    if (!marketToExit.accountMembership[msg.sender]) {\r\n      return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /* Set cToken account membership to false */\r\n    delete marketToExit.accountMembership[msg.sender];\r\n\r\n    /* Delete cToken from the account’s list of assets */\r\n    // load into memory for faster iteration\r\n    ICErc20[] memory userAssetList = accountAssets[msg.sender];\r\n    uint256 len = userAssetList.length;\r\n    uint256 assetIndex = len;\r\n    for (uint256 i = 0; i < len; i++) {\r\n      if (userAssetList[i] == ICErc20(cTokenAddress)) {\r\n        assetIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // We *must* have found the asset in the list or our redundant data structure is broken\r\n    assert(assetIndex < len);\r\n\r\n    // copy last item in list to location of item to be removed, reduce length by 1\r\n    ICErc20[] storage storedList = accountAssets[msg.sender];\r\n    storedList[assetIndex] = storedList[storedList.length - 1];\r\n    storedList.pop();\r\n\r\n    // If the user has exited all markets, remove them from the `allBorrowers` array\r\n    if (storedList.length == 0) {\r\n      allBorrowers[borrowerIndexes[msg.sender]] = allBorrowers[allBorrowers.length - 1]; // Copy last item in list to location of item to be removed\r\n      allBorrowers.pop(); // Reduce length by 1\r\n      borrowerIndexes[allBorrowers[borrowerIndexes[msg.sender]]] = borrowerIndexes[msg.sender]; // Set borrower index of moved item to correct index\r\n      borrowerIndexes[msg.sender] = 0; // Reset sender borrower index to 0 for a gas refund\r\n      borrowers[msg.sender] = false; // Tell the contract that the sender is no longer a borrower (so it knows to add the borrower back if they enter a market in the future)\r\n    }\r\n\r\n    emit MarketExited(ICErc20(cTokenAddress), msg.sender);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /*** Policy Hooks ***/\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to mint tokens in the given market\r\n   * @param cTokenAddress The market to verify the mint against\r\n   * @param minter The account which would get the minted tokens\r\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\r\n   * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function mintAllowed(address cTokenAddress, address minter, uint256 mintAmount) external override returns (uint256) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!mintGuardianPaused[cTokenAddress], \"!mint:paused\");\r\n\r\n    // Make sure market is listed\r\n    if (!markets[cTokenAddress].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Make sure minter is whitelisted\r\n    if (enforceWhitelist && !whitelist[minter]) {\r\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\r\n    }\r\n\r\n    uint256 supplyCap = effectiveSupplyCaps(cTokenAddress);\r\n\r\n    // Supply cap of 0 corresponds to unlimited supplying\r\n    if (supplyCap != 0 && !supplyCapWhitelist[cTokenAddress].contains(minter)) {\r\n      uint256 totalUnderlyingSupply = ICErc20(cTokenAddress).getTotalUnderlyingSupplied();\r\n      uint256 whitelistedSuppliersSupply = asComptrollerExtension().getWhitelistedSuppliersSupply(cTokenAddress);\r\n      uint256 nonWhitelistedTotalSupply;\r\n      if (whitelistedSuppliersSupply >= totalUnderlyingSupply) nonWhitelistedTotalSupply = 0;\r\n      else nonWhitelistedTotalSupply = totalUnderlyingSupply - whitelistedSuppliersSupply;\r\n\r\n      require(nonWhitelistedTotalSupply + mintAmount < supplyCap, \"!supply cap\");\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreSupplierAction(cTokenAddress, minter);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\r\n   * @param cToken The market to verify the redeem against\r\n   * @param redeemer The account which would redeem the tokens\r\n   * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\r\n   * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external override returns (uint256) {\r\n    uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\r\n    if (allowed != uint256(Error.NO_ERROR)) {\r\n      return allowed;\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreSupplierAction(cToken, redeemer);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  function redeemAllowedInternal(\r\n    address cToken,\r\n    address redeemer,\r\n    uint256 redeemTokens\r\n  ) internal view returns (uint256) {\r\n    if (!markets[cToken].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\r\n    if (!markets[cToken].accountMembership[redeemer]) {\r\n      return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\r\n    (Error err, , , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\r\n      redeemer,\r\n      ICErc20(cToken),\r\n      redeemTokens,\r\n      0,\r\n      0\r\n    );\r\n    if (err != Error.NO_ERROR) {\r\n      return uint256(err);\r\n    }\r\n    if (shortfall > 0) {\r\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\r\n    }\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates mint and reverts on rejection. May emit logs.\r\n   * @param cToken Asset being minted\r\n   * @param minter The address minting the tokens\r\n   * @param actualMintAmount The amount of the underlying asset being minted\r\n   * @param mintTokens The number of tokens being minted\r\n   */\r\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external {\r\n    // Add minter to suppliers mapping\r\n    suppliers[minter] = true;\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPostSupplierAction(cToken, minter);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates redeem and reverts on rejection. May emit logs.\r\n   * @param cToken Asset being redeemed\r\n   * @param redeemer The address redeeming the tokens\r\n   * @param redeemAmount The amount of the underlying asset being redeemed\r\n   * @param redeemTokens The number of tokens being redeemed\r\n   */\r\n  function redeemVerify(\r\n    address cToken,\r\n    address redeemer,\r\n    uint256 redeemAmount,\r\n    uint256 redeemTokens\r\n  ) external override {\r\n    require(markets[msg.sender].isListed, \"!market\");\r\n\r\n    // Require tokens is zero or amount is also zero\r\n    if (redeemTokens == 0 && redeemAmount > 0) {\r\n      revert(\"!zero\");\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPostSupplierAction(cToken, redeemer);\r\n  }\r\n\r\n  function getMaxRedeemOrBorrow(\r\n    address account,\r\n    ICErc20 cTokenModify,\r\n    bool isBorrow\r\n  ) external view override returns (uint256) {\r\n    address cToken = address(cTokenModify);\r\n    // Accrue interest\r\n    uint256 balanceOfUnderlying = cTokenModify.balanceOfUnderlying(account);\r\n\r\n    // Get account liquidity\r\n    (Error err, , uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\r\n      account,\r\n      isBorrow ? cTokenModify : ICErc20(address(0)),\r\n      0,\r\n      0,\r\n      0\r\n    );\r\n    require(err == Error.NO_ERROR, \"!liquidity\");\r\n    if (shortfall > 0) return 0; // Shortfall, so no more borrow/redeem\r\n\r\n    // Get max borrow/redeem\r\n    uint256 maxBorrowOrRedeemAmount;\r\n\r\n    if (!isBorrow && !markets[cToken].accountMembership[account]) {\r\n      // Max redeem = balance of underlying if not used as collateral\r\n      maxBorrowOrRedeemAmount = balanceOfUnderlying;\r\n    } else {\r\n      // Avoid \"stack too deep\" error by separating this logic\r\n      maxBorrowOrRedeemAmount = _getMaxRedeemOrBorrow(liquidity, cTokenModify, isBorrow);\r\n\r\n      // Redeem only: max out at underlying balance\r\n      if (!isBorrow && balanceOfUnderlying < maxBorrowOrRedeemAmount) maxBorrowOrRedeemAmount = balanceOfUnderlying;\r\n    }\r\n\r\n    // Get max borrow or redeem considering cToken liquidity\r\n    uint256 cTokenLiquidity = cTokenModify.getCash();\r\n\r\n    // Return the minimum of the two maximums\r\n    return maxBorrowOrRedeemAmount <= cTokenLiquidity ? maxBorrowOrRedeemAmount : cTokenLiquidity;\r\n  }\r\n\r\n  /**\r\n   * @dev Portion of the logic in `getMaxRedeemOrBorrow` above separated to avoid \"stack too deep\" errors.\r\n   */\r\n  function _getMaxRedeemOrBorrow(\r\n    uint256 liquidity,\r\n    ICErc20 cTokenModify,\r\n    bool isBorrow\r\n  ) internal view returns (uint256) {\r\n    if (liquidity == 0) return 0; // No available account liquidity, so no more borrow/redeem\r\n\r\n    // Get the normalized price of the asset\r\n    uint256 conversionFactor = oracle.getUnderlyingPrice(cTokenModify);\r\n    require(conversionFactor > 0, \"!oracle\");\r\n\r\n    // Pre-compute a conversion factor from tokens -> ether (normalized price value)\r\n    if (!isBorrow) {\r\n      uint256 collateralFactorMantissa = markets[address(cTokenModify)].collateralFactorMantissa;\r\n      conversionFactor = (collateralFactorMantissa * conversionFactor) / 1e18;\r\n    }\r\n\r\n    // Get max borrow or redeem considering excess account liquidity\r\n    return (liquidity * 1e18) / conversionFactor;\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\r\n   * @param cToken The market to verify the borrow against\r\n   * @param borrower The account which would borrow the asset\r\n   * @param borrowAmount The amount of underlying the account would borrow\r\n   * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external override returns (uint256) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!borrowGuardianPaused[cToken], \"!borrow:paused\");\r\n\r\n    // Make sure market is listed\r\n    if (!markets[cToken].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    if (!markets[cToken].accountMembership[borrower]) {\r\n      // only cTokens may call borrowAllowed if borrower not in market\r\n      require(msg.sender == cToken, \"!ctoken\");\r\n\r\n      // attempt to add borrower to the market\r\n      Error err = addToMarketInternal(ICErc20(msg.sender), borrower);\r\n      if (err != Error.NO_ERROR) {\r\n        return uint256(err);\r\n      }\r\n\r\n      // it should be impossible to break the important invariant\r\n      assert(markets[cToken].accountMembership[borrower]);\r\n    }\r\n\r\n    // Make sure oracle price is available\r\n    if (oracle.getUnderlyingPrice(ICErc20(cToken)) == 0) {\r\n      return uint256(Error.PRICE_ERROR);\r\n    }\r\n\r\n    // Make sure borrower is whitelisted\r\n    if (enforceWhitelist && !whitelist[borrower]) {\r\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\r\n    }\r\n\r\n    uint256 borrowCap = effectiveBorrowCaps(cToken);\r\n\r\n    // Borrow cap of 0 corresponds to unlimited borrowing\r\n    if (borrowCap != 0 && !borrowCapWhitelist[cToken].contains(borrower)) {\r\n      uint256 totalBorrows = ICErc20(cToken).totalBorrowsCurrent();\r\n      uint256 whitelistedBorrowersBorrows = asComptrollerExtension().getWhitelistedBorrowersBorrows(cToken);\r\n      uint256 nonWhitelistedTotalBorrows;\r\n      if (whitelistedBorrowersBorrows >= totalBorrows) nonWhitelistedTotalBorrows = 0;\r\n      else nonWhitelistedTotalBorrows = totalBorrows - whitelistedBorrowersBorrows;\r\n\r\n      require(nonWhitelistedTotalBorrows + borrowAmount < borrowCap, \"!borrow:cap\");\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreBorrowerAction(cToken, borrower);\r\n\r\n    // Perform a hypothetical liquidity check to guard against shortfall\r\n    (uint256 err, , , uint256 shortfall) = this.getHypotheticalAccountLiquidity(borrower, cToken, 0, borrowAmount, 0);\r\n    if (err != uint256(Error.NO_ERROR)) {\r\n      return err;\r\n    }\r\n    if (shortfall > 0) {\r\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\r\n    }\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates borrow the underlying asset of the given market\r\n   * @param cToken The market to verify the borrow against\r\n   * @param borrower The account which borrowed the asset\r\n   */\r\n  function borrowVerify(address cToken, address borrower) external override {\r\n    // Keep the flywheel moving\r\n    flywheelPostBorrowerAction(cToken, borrower);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\r\n   * @param cToken Asset whose underlying is being borrowed\r\n   * @param accountBorrowsNew The user's new borrow balance of the underlying asset\r\n   */\r\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view override returns (uint256) {\r\n    // Check if min borrow exists\r\n    uint256 minBorrowEth = IFeeDistributor(ionicAdmin).minBorrowEth();\r\n\r\n    if (minBorrowEth > 0) {\r\n      // Get new underlying borrow balance of account for this cToken\r\n      uint256 oraclePriceMantissa = oracle.getUnderlyingPrice(ICErc20(cToken));\r\n      if (oraclePriceMantissa == 0) return uint256(Error.PRICE_ERROR);\r\n      (MathError mathErr, uint256 borrowBalanceEth) = mulScalarTruncate(\r\n        Exp({ mantissa: oraclePriceMantissa }),\r\n        accountBorrowsNew\r\n      );\r\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\r\n\r\n      // Check against min borrow\r\n      if (borrowBalanceEth < minBorrowEth) return uint256(Error.BORROW_BELOW_MIN);\r\n    }\r\n\r\n    // Return no error\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\r\n   * @param cToken The market to verify the repay against\r\n   * @param payer The account which would repay the asset\r\n   * @param borrower The account which would borrowed the asset\r\n   * @param repayAmount The amount of the underlying asset the account would repay\r\n   * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function repayBorrowAllowed(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external override returns (uint256) {\r\n    // Make sure market is listed\r\n    if (!markets[cToken].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreBorrowerAction(cToken, borrower);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates that blacklisted balances are updated after borrow repayment\r\n   * @param cToken The market to verify the repay against\r\n   * @param payer The account which repayed the asset\r\n   * @param borrower The account which borrowed the asset\r\n   * @param repayAmount The amount of the underlying asset the account repayed\r\n   */\r\n  function repayBorrowVerify(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external override {\r\n    // Keep the flywheel moving\r\n    flywheelPostBorrowerAction(cToken, borrower);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the liquidation should be allowed to occur\r\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n   * @param liquidator The address repaying the borrow and seizing the collateral\r\n   * @param borrower The address of the borrower\r\n   * @param repayAmount The amount of underlying being repaid\r\n   */\r\n  function liquidateBorrowAllowed(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external override returns (uint256) {\r\n    // Make sure markets are listed\r\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Get borrowers' underlying borrow balance\r\n    uint256 borrowBalance = ICErc20(cTokenBorrowed).borrowBalanceCurrent(borrower);\r\n\r\n    /* allow accounts to be liquidated if the market is deprecated */\r\n    if (isDeprecated(ICErc20(cTokenBorrowed))) {\r\n      require(borrowBalance >= repayAmount, \"!borrow>repay\");\r\n    } else {\r\n      /* The borrower must have shortfall in order to be liquidateable */\r\n      (Error err, , , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\r\n        borrower,\r\n        ICErc20(address(0)),\r\n        0,\r\n        0,\r\n        0\r\n      );\r\n      if (err != Error.NO_ERROR) {\r\n        return uint256(err);\r\n      }\r\n\r\n      if (shortfall == 0) {\r\n        return uint256(Error.INSUFFICIENT_SHORTFALL);\r\n      }\r\n\r\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\r\n      uint256 maxClose = mul_ScalarTruncate(Exp({ mantissa: closeFactorMantissa }), borrowBalance);\r\n      if (repayAmount > maxClose) {\r\n        return uint256(Error.TOO_MUCH_REPAY);\r\n      }\r\n    }\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the seizing of assets should be allowed to occur\r\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n   * @param liquidator The address repaying the borrow and seizing the collateral\r\n   * @param borrower The address of the borrower\r\n   * @param seizeTokens The number of collateral tokens to seize\r\n   */\r\n  function seizeAllowed(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external override returns (uint256) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!seizeGuardianPaused, \"!seize:paused\");\r\n\r\n    // Make sure markets are listed\r\n    if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Make sure cToken Comptrollers are identical\r\n    if (ICErc20(cTokenCollateral).comptroller() != ICErc20(cTokenBorrowed).comptroller()) {\r\n      return uint256(Error.COMPTROLLER_MISMATCH);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreTransferAction(cTokenCollateral, borrower, liquidator);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates that blacklisted balances are updated after seizing of assets\r\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n   * @param liquidator The address repaying the borrow and seizing the collateral\r\n   * @param borrower The address of the borrower\r\n   * @param seizeTokens The number of collateral tokens to seize\r\n   */\r\n  function seizeVerify(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external override {\r\n    // Keep the flywheel moving\r\n    flywheelPostTransferAction(cTokenCollateral, borrower, liquidator);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\r\n   * @param cToken The market to verify the transfer against\r\n   * @param src The account which sources the tokens\r\n   * @param dst The account which receives the tokens\r\n   * @param transferTokens The number of cTokens to transfer\r\n   * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function transferAllowed(\r\n    address cToken,\r\n    address src,\r\n    address dst,\r\n    uint256 transferTokens\r\n  ) external override returns (uint256) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!transferGuardianPaused, \"!transfer:paused\");\r\n\r\n    // Currently the only consideration is whether or not\r\n    //  the src is allowed to redeem this many tokens\r\n    uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\r\n    if (allowed != uint256(Error.NO_ERROR)) {\r\n      return allowed;\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreTransferAction(cToken, src, dst);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Validates that blacklisted balances are updated after transfering assets\r\n   * @param cToken The market to verify the transfer against\r\n   * @param src The account which sources the tokens\r\n   * @param dst The account which receives the tokens\r\n   * @param transferTokens The number of cTokens to transfer\r\n   */\r\n  function transferVerify(\r\n    address cToken,\r\n    address src,\r\n    address dst,\r\n    uint256 transferTokens\r\n  ) external override {\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPostTransferAction(cToken, src, dst);\r\n  }\r\n\r\n  /*** Flywheel Hooks ***/\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\r\n   * @param cToken The relevant market\r\n   * @param supplier The minter/redeemer\r\n   */\r\n  function flywheelPreSupplierAction(address cToken, address supplier) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreSupplierAction(cToken, supplier);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving post-mint and post-redeem\r\n   * @param cToken The relevant market\r\n   * @param supplier The minter/redeemer\r\n   */\r\n  function flywheelPostSupplierAction(address cToken, address supplier) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPostSupplierAction(cToken, supplier);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\r\n   * @param cToken The relevant market\r\n   * @param borrower The borrower\r\n   */\r\n  function flywheelPreBorrowerAction(address cToken, address borrower) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreBorrowerAction(cToken, borrower);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving post-borrow and post-repay\r\n   * @param cToken The relevant market\r\n   * @param borrower The borrower\r\n   */\r\n  function flywheelPostBorrowerAction(address cToken, address borrower) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPostBorrowerAction(cToken, borrower);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving pre-transfer and pre-seize\r\n   * @param cToken The relevant market\r\n   * @param src The account which sources the tokens\r\n   * @param dst The account which receives the tokens\r\n   */\r\n  function flywheelPreTransferAction(address cToken, address src, address dst) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreTransferAction(cToken, src, dst);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving post-transfer and post-seize\r\n   * @param cToken The relevant market\r\n   * @param src The account which sources the tokens\r\n   * @param dst The account which receives the tokens\r\n   */\r\n  function flywheelPostTransferAction(address cToken, address src, address dst) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPostTransferAction(cToken, src, dst);\r\n  }\r\n\r\n  /*** Liquidity/Liquidation Calculations ***/\r\n\r\n  /**\r\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\r\n   *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\r\n   *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\r\n   */\r\n  struct AccountLiquidityLocalVars {\r\n    ICErc20 asset;\r\n    uint256 sumCollateral;\r\n    uint256 sumBorrowPlusEffects;\r\n    uint256 cTokenBalance;\r\n    uint256 borrowBalance;\r\n    uint256 exchangeRateMantissa;\r\n    uint256 oraclePriceMantissa;\r\n    Exp collateralFactor;\r\n    Exp exchangeRate;\r\n    Exp oraclePrice;\r\n    Exp tokensToDenom;\r\n    uint256 borrowCapForCollateral;\r\n    uint256 borrowedAssetPrice;\r\n    uint256 assetAsCollateralValueCap;\r\n  }\r\n\r\n  function getAccountLiquidity(address account) public view override returns (uint256, uint256, uint256, uint256) {\r\n    (\r\n      Error err,\r\n      uint256 collateralValue,\r\n      uint256 liquidity,\r\n      uint256 shortfall\r\n    ) = getHypotheticalAccountLiquidityInternal(account, ICErc20(address(0)), 0, 0, 0);\r\n    return (uint256(err), collateralValue, liquidity, shortfall);\r\n  }\r\n\r\n  /**\r\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @return (possible error code (semi-opaque),\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n  function getHypotheticalAccountLiquidity(\r\n    address account,\r\n    address cTokenModify,\r\n    uint256 redeemTokens,\r\n    uint256 borrowAmount,\r\n    uint256 repayAmount\r\n  ) public view returns (uint256, uint256, uint256, uint256) {\r\n    (\r\n      Error err,\r\n      uint256 collateralValue,\r\n      uint256 liquidity,\r\n      uint256 shortfall\r\n    ) = getHypotheticalAccountLiquidityInternal(\r\n        account,\r\n        ICErc20(cTokenModify),\r\n        redeemTokens,\r\n        borrowAmount,\r\n        repayAmount\r\n      );\r\n    return (uint256(err), collateralValue, liquidity, shortfall);\r\n  }\r\n\r\n  /**\r\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @return (possible error code,\r\n                hypothetical account collateral value,\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n  function getHypotheticalAccountLiquidityInternal(\r\n    address account,\r\n    ICErc20 cTokenModify,\r\n    uint256 redeemTokens,\r\n    uint256 borrowAmount,\r\n    uint256 repayAmount\r\n  ) internal view returns (Error, uint256, uint256, uint256) {\r\n    AccountLiquidityLocalVars memory vars; // Holds all our calculation results\r\n\r\n    if (address(cTokenModify) != address(0)) {\r\n      vars.borrowedAssetPrice = oracle.getUnderlyingPrice(cTokenModify);\r\n    }\r\n\r\n    // For each asset the account is in\r\n    for (uint256 i = 0; i < accountAssets[account].length; i++) {\r\n      vars.asset = accountAssets[account][i];\r\n\r\n      {\r\n        // Read the balances and exchange rate from the cToken\r\n        uint256 oErr;\r\n        (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = vars.asset.getAccountSnapshot(\r\n          account\r\n        );\r\n        if (oErr != 0) {\r\n          // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\r\n          return (Error.SNAPSHOT_ERROR, 0, 0, 0);\r\n        }\r\n      }\r\n      {\r\n        vars.collateralFactor = Exp({ mantissa: markets[address(vars.asset)].collateralFactorMantissa });\r\n        vars.exchangeRate = Exp({ mantissa: vars.exchangeRateMantissa });\r\n\r\n        // Get the normalized price of the asset\r\n        vars.oraclePriceMantissa = oracle.getUnderlyingPrice(vars.asset);\r\n        if (vars.oraclePriceMantissa == 0) {\r\n          return (Error.PRICE_ERROR, 0, 0, 0);\r\n        }\r\n        vars.oraclePrice = Exp({ mantissa: vars.oraclePriceMantissa });\r\n\r\n        // Pre-compute a conversion factor from tokens -> ether (normalized price value)\r\n        vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\r\n      }\r\n      {\r\n        // Exclude the asset-to-be-borrowed from the liquidity, except for when redeeming\r\n        vars.assetAsCollateralValueCap = asComptrollerExtension().getAssetAsCollateralValueCap(\r\n          vars.asset,\r\n          cTokenModify,\r\n          redeemTokens > 0,\r\n          account\r\n        );\r\n\r\n        // accumulate the collateral value to sumCollateral\r\n        uint256 assetCollateralValue = mul_ScalarTruncate(vars.tokensToDenom, vars.cTokenBalance);\r\n        if (assetCollateralValue > vars.assetAsCollateralValueCap)\r\n          assetCollateralValue = vars.assetAsCollateralValueCap;\r\n        vars.sumCollateral += assetCollateralValue;\r\n      }\r\n\r\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\r\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n        vars.oraclePrice,\r\n        vars.borrowBalance,\r\n        vars.sumBorrowPlusEffects\r\n      );\r\n\r\n      // Calculate effects of interacting with cTokenModify\r\n      if (vars.asset == cTokenModify) {\r\n        // redeem effect\r\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\r\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n          vars.tokensToDenom,\r\n          redeemTokens,\r\n          vars.sumBorrowPlusEffects\r\n        );\r\n\r\n        // borrow effect\r\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\r\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n          vars.oraclePrice,\r\n          borrowAmount,\r\n          vars.sumBorrowPlusEffects\r\n        );\r\n\r\n        uint256 repayEffect = mul_ScalarTruncate(vars.oraclePrice, repayAmount);\r\n        if (repayEffect >= vars.sumBorrowPlusEffects) {\r\n          vars.sumBorrowPlusEffects = 0;\r\n        } else {\r\n          vars.sumBorrowPlusEffects -= repayEffect;\r\n        }\r\n      }\r\n    }\r\n\r\n    // These are safe, as the underflow condition is checked first\r\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\r\n      return (Error.NO_ERROR, vars.sumCollateral, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\r\n    } else {\r\n      return (Error.NO_ERROR, vars.sumCollateral, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\r\n   * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\r\n   * @param cTokenBorrowed The address of the borrowed cToken\r\n   * @param cTokenCollateral The address of the collateral cToken\r\n   * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\r\n   * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\r\n   */\r\n  function liquidateCalculateSeizeTokens(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    uint256 actualRepayAmount\r\n  ) external view override returns (uint256, uint256) {\r\n    /* Read oracle prices for borrowed and collateral markets */\r\n    uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(ICErc20(cTokenBorrowed));\r\n    uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(ICErc20(cTokenCollateral));\r\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\r\n      return (uint256(Error.PRICE_ERROR), 0);\r\n    }\r\n\r\n    /*\r\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\r\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\r\n     *  seizeTokens = seizeAmount / exchangeRate\r\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\r\n     */\r\n    ICErc20 collateralCToken = ICErc20(cTokenCollateral);\r\n    uint256 exchangeRateMantissa = collateralCToken.exchangeRateCurrent();\r\n    uint256 seizeTokens;\r\n    Exp memory numerator;\r\n    Exp memory denominator;\r\n    Exp memory ratio;\r\n\r\n    uint256 protocolSeizeShareMantissa = collateralCToken.protocolSeizeShareMantissa();\r\n    uint256 feeSeizeShareMantissa = collateralCToken.feeSeizeShareMantissa();\r\n\r\n    /*\r\n     * The liquidation penalty includes\r\n     * - the liquidator incentive\r\n     * - the protocol fees (Ionic admin fees)\r\n     * - the market fee\r\n     */\r\n    Exp memory totalPenaltyMantissa = add_(\r\n      add_(Exp({ mantissa: liquidationIncentiveMantissa }), Exp({ mantissa: protocolSeizeShareMantissa })),\r\n      Exp({ mantissa: feeSeizeShareMantissa })\r\n    );\r\n\r\n    numerator = mul_(totalPenaltyMantissa, Exp({ mantissa: priceBorrowedMantissa }));\r\n    denominator = mul_(Exp({ mantissa: priceCollateralMantissa }), Exp({ mantissa: exchangeRateMantissa }));\r\n    ratio = div_(numerator, denominator);\r\n\r\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\r\n    return (uint256(Error.NO_ERROR), seizeTokens);\r\n  }\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n   * @notice Add a RewardsDistributor contracts.\r\n   * @dev Admin function to add a RewardsDistributor contract\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _addRewardsDistributor(address distributor) external returns (uint256) {\r\n    require(hasAdminRights(), \"!admin\");\r\n\r\n    // Check marker method\r\n    require(IIonicFlywheel(distributor).isRewardsDistributor(), \"!isRewardsDistributor\");\r\n\r\n    // Check for existing RewardsDistributor\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++) require(distributor != rewardsDistributors[i], \"!added\");\r\n\r\n    // Add RewardsDistributor to array\r\n    rewardsDistributors.push(distributor);\r\n    emit AddedRewardsDistributor(distributor);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the whitelist enforcement for the comptroller\r\n   * @dev Admin function to set a new whitelist enforcement boolean\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_ENFORCEMENT_OWNER_CHECK);\r\n    }\r\n\r\n    // Check if `enforceWhitelist` already equals `enforce`\r\n    if (enforceWhitelist == enforce) {\r\n      return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    // Set comptroller's `enforceWhitelist` to `enforce`\r\n    enforceWhitelist = enforce;\r\n\r\n    // Emit WhitelistEnforcementChanged(bool enforce);\r\n    emit WhitelistEnforcementChanged(enforce);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the whitelist `statuses` for `suppliers`\r\n   * @dev Admin function to set the whitelist `statuses` for `suppliers`\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_STATUS_OWNER_CHECK);\r\n    }\r\n\r\n    // Set whitelist statuses for suppliers\r\n    for (uint256 i = 0; i < suppliers.length; i++) {\r\n      address supplier = suppliers[i];\r\n\r\n      if (statuses[i]) {\r\n        // If not already whitelisted, add to whitelist\r\n        if (!whitelist[supplier]) {\r\n          whitelist[supplier] = true;\r\n          whitelistArray.push(supplier);\r\n          whitelistIndexes[supplier] = whitelistArray.length - 1;\r\n        }\r\n      } else {\r\n        // If whitelisted, remove from whitelist\r\n        if (whitelist[supplier]) {\r\n          whitelistArray[whitelistIndexes[supplier]] = whitelistArray[whitelistArray.length - 1]; // Copy last item in list to location of item to be removed\r\n          whitelistArray.pop(); // Reduce length by 1\r\n          whitelistIndexes[whitelistArray[whitelistIndexes[supplier]]] = whitelistIndexes[supplier]; // Set whitelist index of moved item to correct index\r\n          whitelistIndexes[supplier] = 0; // Reset supplier whitelist index to 0 for a gas refund\r\n          whitelist[supplier] = false; // Tell the contract that the supplier is no longer whitelisted\r\n        }\r\n      }\r\n    }\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets a new price oracle for the comptroller\r\n   * @dev Admin function to set a new price oracle\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _setPriceOracle(BasePriceOracle newOracle) public returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\r\n    }\r\n\r\n    // Track the old oracle for the comptroller\r\n    BasePriceOracle oldOracle = oracle;\r\n\r\n    // Set comptroller's oracle to newOracle\r\n    oracle = newOracle;\r\n\r\n    // Emit NewPriceOracle(oldOracle, newOracle)\r\n    emit NewPriceOracle(oldOracle, newOracle);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the closeFactor used when liquidating borrows\r\n   * @dev Admin function to set closeFactor\r\n   * @param newCloseFactorMantissa New close factor, scaled by 1e18\r\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n   */\r\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\r\n    }\r\n\r\n    // Check limits\r\n    Exp memory newCloseFactorExp = Exp({ mantissa: newCloseFactorMantissa });\r\n    Exp memory lowLimit = Exp({ mantissa: closeFactorMinMantissa });\r\n    if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\r\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\r\n    }\r\n\r\n    Exp memory highLimit = Exp({ mantissa: closeFactorMaxMantissa });\r\n    if (lessThanExp(highLimit, newCloseFactorExp)) {\r\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\r\n    }\r\n\r\n    // Set pool close factor to new close factor, remember old value\r\n    uint256 oldCloseFactorMantissa = closeFactorMantissa;\r\n    closeFactorMantissa = newCloseFactorMantissa;\r\n\r\n    // Emit event\r\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the collateralFactor for a market\r\n   * @dev Admin function to set per-market collateralFactor\r\n   * @param cToken The market to set the factor on\r\n   * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\r\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n   */\r\n  function _setCollateralFactor(ICErc20 cToken, uint256 newCollateralFactorMantissa) public returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\r\n    }\r\n\r\n    // Verify market is listed\r\n    Market storage market = markets[address(cToken)];\r\n    if (!market.isListed) {\r\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\r\n    }\r\n\r\n    Exp memory newCollateralFactorExp = Exp({ mantissa: newCollateralFactorMantissa });\r\n\r\n    // Check collateral factor <= 0.9\r\n    Exp memory highLimit = Exp({ mantissa: collateralFactorMaxMantissa });\r\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\r\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\r\n    }\r\n\r\n    // If collateral factor != 0, fail if price == 0\r\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\r\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\r\n    }\r\n\r\n    // Set market's collateral factor to new collateral factor, remember old value\r\n    uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\r\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\r\n\r\n    // Emit event with asset, old collateral factor, and new collateral factor\r\n    emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets liquidationIncentive\r\n   * @dev Admin function to set liquidationIncentive\r\n   * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\r\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n   */\r\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\r\n    }\r\n\r\n    // Check de-scaled min <= newLiquidationIncentive <= max\r\n    Exp memory newLiquidationIncentive = Exp({ mantissa: newLiquidationIncentiveMantissa });\r\n    Exp memory minLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMinMantissa });\r\n    if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\r\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\r\n    }\r\n\r\n    Exp memory maxLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMaxMantissa });\r\n    if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\r\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\r\n    }\r\n\r\n    // Save current value for use in log\r\n    uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\r\n\r\n    // Set liquidation incentive to new incentive\r\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\r\n\r\n    // Emit event with old incentive, new incentive\r\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Add the market to the markets mapping and set it as listed\r\n   * @dev Admin function to set isListed and add support for the market\r\n   * @param cToken The address of the market (token) to list\r\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n   */\r\n  function _supportMarket(ICErc20 cToken) internal returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\r\n    }\r\n\r\n    // Is market already listed?\r\n    if (markets[address(cToken)].isListed) {\r\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\r\n    }\r\n\r\n    // Check cToken.comptroller == this\r\n    require(address(cToken.comptroller()) == address(this), \"!comptroller\");\r\n\r\n    // Make sure market is not already listed\r\n    address underlying = ICErc20(address(cToken)).underlying();\r\n\r\n    if (address(cTokensByUnderlying[underlying]) != address(0)) {\r\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\r\n    }\r\n\r\n    // List market and emit event\r\n    Market storage market = markets[address(cToken)];\r\n    market.isListed = true;\r\n    market.collateralFactorMantissa = 0;\r\n    allMarkets.push(cToken);\r\n    cTokensByUnderlying[underlying] = cToken;\r\n    emit MarketListed(cToken);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\r\n   * @dev Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\r\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n   */\r\n  function _deployMarket(\r\n    uint8 delegateType,\r\n    bytes calldata constructorData,\r\n    bytes calldata becomeImplData,\r\n    uint256 collateralFactorMantissa\r\n  ) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\r\n    }\r\n\r\n    // Temporarily enable Ionic admin rights for asset deployment (storing the original value)\r\n    bool oldIonicAdminHasRights = ionicAdminHasRights;\r\n    ionicAdminHasRights = true;\r\n\r\n    // Deploy via Ionic admin\r\n    ICErc20 cToken = ICErc20(IFeeDistributor(ionicAdmin).deployCErc20(delegateType, constructorData, becomeImplData));\r\n    // Reset Ionic admin rights to the original value\r\n    ionicAdminHasRights = oldIonicAdminHasRights;\r\n    // Support market here in the Comptroller\r\n    uint256 err = _supportMarket(cToken);\r\n\r\n    IFeeDistributor(ionicAdmin).authoritiesRegistry().reconfigureAuthority(address(this));\r\n\r\n    // Set collateral factor\r\n    return err == uint256(Error.NO_ERROR) ? _setCollateralFactor(cToken, collateralFactorMantissa) : err;\r\n  }\r\n\r\n  function _becomeImplementation() external {\r\n    require(msg.sender == address(this), \"!self call\");\r\n\r\n    if (!_notEnteredInitialized) {\r\n      _notEntered = true;\r\n      _notEnteredInitialized = true;\r\n    }\r\n  }\r\n\r\n  /*** Helper Functions ***/\r\n\r\n  /**\r\n   * @notice Returns true if the given cToken market has been deprecated\r\n   * @dev All borrows in a deprecated cToken market can be immediately liquidated\r\n   * @param cToken The market to check if deprecated\r\n   */\r\n  function isDeprecated(ICErc20 cToken) public view returns (bool) {\r\n    return\r\n      markets[address(cToken)].collateralFactorMantissa == 0 &&\r\n      borrowGuardianPaused[address(cToken)] == true &&\r\n      add_(add_(cToken.reserveFactorMantissa(), cToken.adminFeeMantissa()), cToken.ionicFeeMantissa()) == 1e18;\r\n  }\r\n\r\n  function asComptrollerExtension() internal view returns (ComptrollerExtensionInterface) {\r\n    return ComptrollerExtensionInterface(address(this));\r\n  }\r\n\r\n  function _getExtensionFunctions() external pure virtual override returns (bytes4[] memory functionSelectors) {\r\n    uint8 fnsCount = 36;\r\n\r\n    functionSelectors = new bytes4[](fnsCount);\r\n\r\n    functionSelectors[--fnsCount] = this.isDeprecated.selector;\r\n    functionSelectors[--fnsCount] = this._deployMarket.selector;\r\n    functionSelectors[--fnsCount] = this.getAssetsIn.selector;\r\n    functionSelectors[--fnsCount] = this.checkMembership.selector;\r\n    functionSelectors[--fnsCount] = this._setPriceOracle.selector;\r\n    functionSelectors[--fnsCount] = this._setCloseFactor.selector;\r\n    functionSelectors[--fnsCount] = this._setCollateralFactor.selector;\r\n    functionSelectors[--fnsCount] = this._setLiquidationIncentive.selector;\r\n    functionSelectors[--fnsCount] = this._setWhitelistEnforcement.selector;\r\n    functionSelectors[--fnsCount] = this._setWhitelistStatuses.selector;\r\n    functionSelectors[--fnsCount] = this._addRewardsDistributor.selector;\r\n    functionSelectors[--fnsCount] = this.getHypotheticalAccountLiquidity.selector;\r\n    functionSelectors[--fnsCount] = this.getMaxRedeemOrBorrow.selector;\r\n    functionSelectors[--fnsCount] = this.enterMarkets.selector;\r\n    functionSelectors[--fnsCount] = this.exitMarket.selector;\r\n    functionSelectors[--fnsCount] = this.mintAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.redeemAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.redeemVerify.selector;\r\n    functionSelectors[--fnsCount] = this.borrowAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.borrowWithinLimits.selector;\r\n    functionSelectors[--fnsCount] = this.repayBorrowAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.liquidateBorrowAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.seizeAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.transferAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.mintVerify.selector;\r\n    functionSelectors[--fnsCount] = this.getAccountLiquidity.selector;\r\n    functionSelectors[--fnsCount] = this.liquidateCalculateSeizeTokens.selector;\r\n    functionSelectors[--fnsCount] = this._beforeNonReentrant.selector;\r\n    functionSelectors[--fnsCount] = this._afterNonReentrant.selector;\r\n    functionSelectors[--fnsCount] = this._becomeImplementation.selector;\r\n    functionSelectors[--fnsCount] = this.effectiveSupplyCaps.selector;\r\n    functionSelectors[--fnsCount] = this.effectiveBorrowCaps.selector;\r\n    functionSelectors[--fnsCount] = this.borrowVerify.selector;\r\n    functionSelectors[--fnsCount] = this.repayBorrowVerify.selector;\r\n    functionSelectors[--fnsCount] = this.seizeVerify.selector;\r\n    functionSelectors[--fnsCount] = this.transferVerify.selector;\r\n\r\n    require(fnsCount == 0, \"use the correct array length\");\r\n  }\r\n\r\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\r\n\r\n  /**\r\n   * @dev Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention.\r\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\r\n   */\r\n  function _beforeNonReentrant() external override {\r\n    require(markets[msg.sender].isListed, \"!Comptroller:_beforeNonReentrant\");\r\n    require(_notEntered, \"!reentered\");\r\n    _notEntered = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention.\r\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\r\n   */\r\n  function _afterNonReentrant() external override {\r\n    require(markets[msg.sender].isListed, \"!Comptroller:_afterNonReentrant\");\r\n    _notEntered = true; // get a gas-refund post-Istanbul\r\n  }\r\n}\r\n"
    },
    "contracts/compound/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { BasePriceOracle } from \"../oracles/BasePriceOracle.sol\";\r\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\r\nimport { DiamondExtension } from \"../ionic/DiamondExtension.sol\";\r\nimport { ComptrollerV4Storage } from \"../compound/ComptrollerStorage.sol\";\r\nimport { PrudentiaLib } from \"../adrastia/PrudentiaLib.sol\";\r\nimport { IHistoricalRates } from \"adrastia-periphery/rates/IHistoricalRates.sol\";\r\n\r\ninterface ComptrollerInterface {\r\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\r\n\r\n  function _becomeImplementation() external;\r\n\r\n  function _deployMarket(\r\n    uint8 delegateType,\r\n    bytes memory constructorData,\r\n    bytes calldata becomeImplData,\r\n    uint256 collateralFactorMantissa\r\n  ) external returns (uint256);\r\n\r\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\r\n\r\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\r\n\r\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\r\n\r\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\r\n\r\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\r\n\r\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\r\n\r\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\r\n\r\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\r\n\r\n  function _addRewardsDistributor(address distributor) external returns (uint256);\r\n\r\n  function getHypotheticalAccountLiquidity(\r\n    address account,\r\n    address cTokenModify,\r\n    uint256 redeemTokens,\r\n    uint256 borrowAmount,\r\n    uint256 repayAmount\r\n  ) external view returns (uint256, uint256, uint256, uint256);\r\n\r\n  function getMaxRedeemOrBorrow(address account, ICErc20 cToken, bool isBorrow) external view returns (uint256);\r\n\r\n  /*** Assets You Are In ***/\r\n\r\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n  function exitMarket(address cToken) external returns (uint256);\r\n\r\n  /*** Policy Hooks ***/\r\n\r\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\r\n\r\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256);\r\n\r\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\r\n\r\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256);\r\n\r\n  function borrowVerify(address cToken, address borrower) external;\r\n\r\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\r\n\r\n  function repayBorrowAllowed(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external returns (uint256);\r\n\r\n  function repayBorrowVerify(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external;\r\n\r\n  function liquidateBorrowAllowed(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external returns (uint256);\r\n\r\n  function seizeAllowed(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external returns (uint256);\r\n  \r\n  function seizeVerify(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external;\r\n\r\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external returns (uint256);\r\n  \r\n  function transferVerify(address cToken, address src, address dst, uint256 transferTokens) external;\r\n\r\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external;\r\n\r\n  /*** Liquidity/Liquidation Calculations ***/\r\n\r\n  function getAccountLiquidity(\r\n    address account\r\n  ) external view returns (uint256 error, uint256 collateralValue, uint256 liquidity, uint256 shortfall);\r\n\r\n  function liquidateCalculateSeizeTokens(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    uint256 repayAmount\r\n  ) external view returns (uint256, uint256);\r\n\r\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\r\n\r\n  function _beforeNonReentrant() external;\r\n\r\n  function _afterNonReentrant() external;\r\n\r\n  /*** New supply and borrow cap view functions ***/\r\n\r\n  /**\r\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveSupplyCaps(address cToken) external view returns (uint256 supplyCap);\r\n\r\n  /**\r\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveBorrowCaps(address cToken) external view returns (uint256 borrowCap);\r\n}\r\n\r\ninterface ComptrollerStorageInterface {\r\n  function admin() external view returns (address);\r\n\r\n  function adminHasRights() external view returns (bool);\r\n\r\n  function ionicAdmin() external view returns (address);\r\n\r\n  function ionicAdminHasRights() external view returns (bool);\r\n\r\n  function pendingAdmin() external view returns (address);\r\n\r\n  function oracle() external view returns (BasePriceOracle);\r\n\r\n  function pauseGuardian() external view returns (address);\r\n\r\n  function closeFactorMantissa() external view returns (uint256);\r\n\r\n  function liquidationIncentiveMantissa() external view returns (uint256);\r\n\r\n  function isUserOfPool(address user) external view returns (bool);\r\n\r\n  function whitelist(address account) external view returns (bool);\r\n\r\n  function enforceWhitelist() external view returns (bool);\r\n\r\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\r\n\r\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\r\n\r\n  function suppliers(address account) external view returns (bool);\r\n\r\n  function cTokensByUnderlying(address) external view returns (address);\r\n\r\n  /**\r\n   * Gets the supply cap of a cToken in the units of the underlying asset.\r\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the supply cap. Instead, use\r\n   * `effectiveSupplyCaps` to get the correct supply cap.\r\n   * @param cToken The address of the cToken.\r\n   * @return The supply cap in the units of the underlying asset.\r\n   */\r\n  function supplyCaps(address cToken) external view returns (uint256);\r\n\r\n  /**\r\n   * Gets the borrow cap of a cToken in the units of the underlying asset.\r\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the borrow cap. Instead, use\r\n   * `effectiveBorrowCaps` to get the correct borrow cap.\r\n   * @param cToken The address of the cToken.\r\n   * @return The borrow cap in the units of the underlying asset.\r\n   */\r\n  function borrowCaps(address cToken) external view returns (uint256);\r\n\r\n  function markets(address cToken) external view returns (bool, uint256);\r\n\r\n  function accountAssets(address, uint256) external view returns (address);\r\n\r\n  function borrowGuardianPaused(address cToken) external view returns (bool);\r\n\r\n  function mintGuardianPaused(address cToken) external view returns (bool);\r\n\r\n  function rewardsDistributors(uint256) external view returns (address);\r\n}\r\n\r\ninterface SFSRegister {\r\n  function register(address _recipient) external returns (uint256 tokenId);\r\n}\r\n\r\ninterface ComptrollerExtensionInterface {\r\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\r\n\r\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\r\n\r\n  function getAllMarkets() external view returns (ICErc20[] memory);\r\n\r\n  function getAllBorrowers() external view returns (address[] memory);\r\n\r\n  function getAllBorrowersCount() external view returns (uint256);\r\n\r\n  function getPaginatedBorrowers(\r\n    uint256 page,\r\n    uint256 pageSize\r\n  ) external view returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\r\n\r\n  function getRewardsDistributors() external view returns (address[] memory);\r\n\r\n  function getAccruingFlywheels() external view returns (address[] memory);\r\n\r\n  function _supplyCapWhitelist(address cToken, address account, bool whitelisted) external;\r\n\r\n  function _setBorrowCapForCollateral(address cTokenBorrow, address cTokenCollateral, uint256 borrowCap) external;\r\n\r\n  function _setBorrowCapForCollateralWhitelist(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    address account,\r\n    bool whitelisted\r\n  ) external;\r\n\r\n  function isBorrowCapForCollateralWhitelisted(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    address account\r\n  ) external view returns (bool);\r\n\r\n  function _blacklistBorrowingAgainstCollateral(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    bool blacklisted\r\n  ) external;\r\n\r\n  function _blacklistBorrowingAgainstCollateralWhitelist(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    address account,\r\n    bool whitelisted\r\n  ) external;\r\n\r\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    address account\r\n  ) external view returns (bool);\r\n\r\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\r\n\r\n  function _borrowCapWhitelist(address cToken, address account, bool whitelisted) external;\r\n\r\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\r\n\r\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\r\n\r\n  function getWhitelist() external view returns (address[] memory);\r\n\r\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\r\n\r\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\r\n\r\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\r\n\r\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\r\n\r\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\r\n\r\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\r\n\r\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\r\n\r\n  function _setTransferPaused(bool state) external returns (bool);\r\n\r\n  function _setSeizePaused(bool state) external returns (bool);\r\n\r\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\r\n\r\n  function getAssetAsCollateralValueCap(\r\n    ICErc20 collateral,\r\n    ICErc20 cTokenModify,\r\n    bool redeeming,\r\n    address account\r\n  ) external view returns (uint256);\r\n\r\n  function registerInSFS() external returns (uint256);\r\n}\r\n\r\ninterface ComptrollerPrudentiaCapsExtInterface {\r\n  /**\r\n   * @notice Retrieves Adrastia Prudentia borrow cap config from storage.\r\n   * @return The config.\r\n   */\r\n  function getBorrowCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\r\n\r\n  /**\r\n   * @notice Retrieves Adrastia Prudentia supply cap config from storage.\r\n   * @return The config.\r\n   */\r\n  function getSupplyCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\r\n\r\n  /**\r\n   * @notice Sets the Adrastia Prudentia supply cap config.\r\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native supply caps.\r\n   * @param newConfig The new config.\r\n   */\r\n  function _setSupplyCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\r\n\r\n  /**\r\n   * @notice Sets the Adrastia Prudentia supply cap config.\r\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native borrow caps.\r\n   * @param newConfig The new config.\r\n   */\r\n  function _setBorrowCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\r\n}\r\n\r\ninterface UnitrollerInterface {\r\n  function comptrollerImplementation() external view returns (address);\r\n\r\n  function _upgrade() external;\r\n\r\n  function _acceptAdmin() external returns (uint256);\r\n\r\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\r\n\r\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\r\n}\r\n\r\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\r\n\r\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\r\n\r\ninterface IonicComptroller is\r\n  ComptrollerInterface,\r\n  ComptrollerExtensionInterface,\r\n  UnitrollerInterface,\r\n  ComptrollerStorageInterface\r\n{\r\n\r\n}\r\n\r\nabstract contract ComptrollerBase is ComptrollerV4Storage {\r\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\r\n  bool public constant isComptroller = true;\r\n\r\n  /**\r\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveSupplyCaps(address cToken) public view virtual returns (uint256 supplyCap) {\r\n    PrudentiaLib.PrudentiaConfig memory capConfig = supplyCapConfig;\r\n\r\n    // Check if we're using Adrastia Prudentia for the supply cap\r\n    if (capConfig.controller != address(0)) {\r\n      // We have a controller, so we're using Adrastia Prudentia\r\n\r\n      address underlyingToken = ICErc20(cToken).underlying();\r\n\r\n      // Get the supply cap from Adrastia Prudentia\r\n      supplyCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\r\n\r\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\r\n      // must scale the supply cap to get the correct amount\r\n\r\n      int256 scaleByDecimals = 18;\r\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\r\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\"decimals()\"));\r\n      if (success && data.length == 32) {\r\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\r\n      }\r\n\r\n      scaleByDecimals += capConfig.decimalShift;\r\n\r\n      if (scaleByDecimals >= 0) {\r\n        // We're scaling up, so we need to multiply\r\n        supplyCap *= 10 ** uint256(scaleByDecimals);\r\n      } else {\r\n        // We're scaling down, so we need to divide\r\n        supplyCap /= 10 ** uint256(-scaleByDecimals);\r\n      }\r\n    } else {\r\n      // We don't have a controller, so we're using the local supply cap\r\n\r\n      // Get the supply cap from the local supply cap\r\n      supplyCap = supplyCaps[cToken];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveBorrowCaps(address cToken) public view virtual returns (uint256 borrowCap) {\r\n    PrudentiaLib.PrudentiaConfig memory capConfig = borrowCapConfig;\r\n\r\n    // Check if we're using Adrastia Prudentia for the borrow cap\r\n    if (capConfig.controller != address(0)) {\r\n      // We have a controller, so we're using Adrastia Prudentia\r\n\r\n      address underlyingToken = ICErc20(cToken).underlying();\r\n\r\n      // Get the borrow cap from Adrastia Prudentia\r\n      borrowCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\r\n\r\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\r\n      // must scale the supply cap to get the correct amount\r\n\r\n      int256 scaleByDecimals = 18;\r\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\r\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\"decimals()\"));\r\n      if (success && data.length == 32) {\r\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\r\n      }\r\n\r\n      scaleByDecimals += capConfig.decimalShift;\r\n\r\n      if (scaleByDecimals >= 0) {\r\n        // We're scaling up, so we need to multiply\r\n        borrowCap *= 10 ** uint256(scaleByDecimals);\r\n      } else {\r\n        // We're scaling down, so we need to divide\r\n        borrowCap /= 10 ** uint256(-scaleByDecimals);\r\n      }\r\n    } else {\r\n      // We don't have a controller, so we're using the local borrow cap\r\n      borrowCap = borrowCaps[cToken];\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/compound/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./IFeeDistributor.sol\";\r\nimport \"../oracles/BasePriceOracle.sol\";\r\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\r\nimport { PrudentiaLib } from \"../adrastia/PrudentiaLib.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ncontract UnitrollerAdminStorage {\r\n  /*\r\n   * Administrator for Ionic\r\n   */\r\n  address payable public ionicAdmin;\r\n\r\n  /**\r\n   * @notice Administrator for this contract\r\n   */\r\n  address public admin;\r\n\r\n  /**\r\n   * @notice Pending administrator for this contract\r\n   */\r\n  address public pendingAdmin;\r\n\r\n  /**\r\n   * @notice Whether or not the Ionic admin has admin rights\r\n   */\r\n  bool public ionicAdminHasRights = true;\r\n\r\n  /**\r\n   * @notice Whether or not the admin has admin rights\r\n   */\r\n  bool public adminHasRights = true;\r\n\r\n  /**\r\n   * @notice Returns a boolean indicating if the sender has admin rights\r\n   */\r\n  function hasAdminRights() internal view returns (bool) {\r\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\r\n  }\r\n}\r\n\r\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\r\n  /**\r\n   * @notice Oracle which gives the price of any given asset\r\n   */\r\n  BasePriceOracle public oracle;\r\n\r\n  /**\r\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\r\n   */\r\n  uint256 public closeFactorMantissa;\r\n\r\n  /**\r\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\r\n   */\r\n  uint256 public liquidationIncentiveMantissa;\r\n\r\n  /*\r\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\r\n   */\r\n  uint256 internal maxAssets;\r\n\r\n  /**\r\n   * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\r\n   */\r\n  mapping(address => ICErc20[]) public accountAssets;\r\n}\r\n\r\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\r\n  struct Market {\r\n    // Whether or not this market is listed\r\n    bool isListed;\r\n    // Multiplier representing the most one can borrow against their collateral in this market.\r\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\r\n    // Must be between 0 and 1, and stored as a mantissa.\r\n    uint256 collateralFactorMantissa;\r\n    // Per-market mapping of \"accounts in this asset\"\r\n    mapping(address => bool) accountMembership;\r\n  }\r\n\r\n  /**\r\n   * @notice Official mapping of cTokens -> Market metadata\r\n   * @dev Used e.g. to determine if a market is supported\r\n   */\r\n  mapping(address => Market) public markets;\r\n\r\n  /// @notice A list of all markets\r\n  ICErc20[] public allMarkets;\r\n\r\n  /**\r\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\r\n   */\r\n  mapping(address => bool) internal borrowers;\r\n\r\n  /// @notice A list of all borrowers who have entered markets\r\n  address[] public allBorrowers;\r\n\r\n  // Indexes of borrower account addresses in the `allBorrowers` array\r\n  mapping(address => uint256) internal borrowerIndexes;\r\n\r\n  /**\r\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\r\n   */\r\n  mapping(address => bool) public suppliers;\r\n\r\n  /// @notice All cTokens addresses mapped by their underlying token addresses\r\n  mapping(address => ICErc20) public cTokensByUnderlying;\r\n\r\n  /// @notice Whether or not the supplier whitelist is enforced\r\n  bool public enforceWhitelist;\r\n\r\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\r\n  mapping(address => bool) public whitelist;\r\n\r\n  /// @notice An array of all whitelisted accounts\r\n  address[] public whitelistArray;\r\n\r\n  // Indexes of account addresses in the `whitelistArray` array\r\n  mapping(address => uint256) internal whitelistIndexes;\r\n\r\n  /**\r\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\r\n   *  Actions which allow users to remove their own assets cannot be paused.\r\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\r\n   */\r\n  address public pauseGuardian;\r\n  bool public _mintGuardianPaused;\r\n  bool public _borrowGuardianPaused;\r\n  bool public transferGuardianPaused;\r\n  bool public seizeGuardianPaused;\r\n  mapping(address => bool) public mintGuardianPaused;\r\n  mapping(address => bool) public borrowGuardianPaused;\r\n}\r\n\r\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\r\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\r\n  /// @dev If Adrastia Prudentia is enabled, the values the borrow cap guardian sets are ignored.\r\n  address public borrowCapGuardian;\r\n\r\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\r\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveBorrowCaps` instead.\r\n  mapping(address => uint256) public borrowCaps;\r\n\r\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\r\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveSupplyCaps` instead.\r\n  mapping(address => uint256) public supplyCaps;\r\n\r\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\r\n  address[] public rewardsDistributors;\r\n\r\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\r\n  bool internal _notEntered;\r\n\r\n  /// @dev Whether or not _notEntered has been initialized\r\n  bool internal _notEnteredInitialized;\r\n\r\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\r\n  address[] public nonAccruingRewardsDistributors;\r\n\r\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\r\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\r\n\r\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\r\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\r\n\r\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\r\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\r\n\r\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\r\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\r\n    internal borrowingAgainstCollateralBlacklistWhitelist;\r\n\r\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\r\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\r\n\r\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\r\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\r\n}\r\n\r\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\r\n  /// @dev Adrastia Prudentia config for controlling borrow caps.\r\n  PrudentiaLib.PrudentiaConfig internal borrowCapConfig;\r\n\r\n  /// @dev Adrastia Prudentia config for controlling supply caps.\r\n  PrudentiaLib.PrudentiaConfig internal supplyCapConfig;\r\n}\r\n"
    },
    "contracts/compound/CTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { IonicComptroller } from \"./ComptrollerInterface.sol\";\r\nimport { InterestRateModel } from \"./InterestRateModel.sol\";\r\nimport { ComptrollerV3Storage } from \"./ComptrollerStorage.sol\";\r\nimport { AddressesProvider } from \"../ionic/AddressesProvider.sol\";\r\n\r\nabstract contract CTokenAdminStorage {\r\n  /*\r\n   * Administrator for Ionic\r\n   */\r\n  address payable public ionicAdmin;\r\n}\r\n\r\nabstract contract CErc20Storage is CTokenAdminStorage {\r\n  /**\r\n   * @dev Guard variable for re-entrancy checks\r\n   */\r\n  bool internal _notEntered;\r\n\r\n  /**\r\n   * @notice EIP-20 token name for this token\r\n   */\r\n  string public name;\r\n\r\n  /**\r\n   * @notice EIP-20 token symbol for this token\r\n   */\r\n  string public symbol;\r\n\r\n  /**\r\n   * @notice EIP-20 token decimals for this token\r\n   */\r\n  uint8 public decimals;\r\n\r\n  /*\r\n   * Maximum borrow rate that can ever be applied (.0005% / block)\r\n   */\r\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\r\n\r\n  /*\r\n   * Maximum fraction of interest that can be set aside for reserves + fees\r\n   */\r\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\r\n\r\n  /**\r\n   * @notice Contract which oversees inter-cToken operations\r\n   */\r\n  IonicComptroller public comptroller;\r\n\r\n  /**\r\n   * @notice Model which tells what the current interest rate should be\r\n   */\r\n  InterestRateModel public interestRateModel;\r\n\r\n  /*\r\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\r\n   */\r\n  uint256 internal initialExchangeRateMantissa;\r\n\r\n  /**\r\n   * @notice Fraction of interest currently set aside for admin fees\r\n   */\r\n  uint256 public adminFeeMantissa;\r\n\r\n  /**\r\n   * @notice Fraction of interest currently set aside for Ionic fees\r\n   */\r\n  uint256 public ionicFeeMantissa;\r\n\r\n  /**\r\n   * @notice Fraction of interest currently set aside for reserves\r\n   */\r\n  uint256 public reserveFactorMantissa;\r\n\r\n  /**\r\n   * @notice Block number that interest was last accrued at\r\n   */\r\n  uint256 public accrualBlockNumber;\r\n\r\n  /**\r\n   * @notice Accumulator of the total earned interest rate since the opening of the market\r\n   */\r\n  uint256 public borrowIndex;\r\n\r\n  /**\r\n   * @notice Total amount of outstanding borrows of the underlying in this market\r\n   */\r\n  uint256 public totalBorrows;\r\n\r\n  /**\r\n   * @notice Total amount of reserves of the underlying held in this market\r\n   */\r\n  uint256 public totalReserves;\r\n\r\n  /**\r\n   * @notice Total amount of admin fees of the underlying held in this market\r\n   */\r\n  uint256 public totalAdminFees;\r\n\r\n  /**\r\n   * @notice Total amount of Ionic fees of the underlying held in this market\r\n   */\r\n  uint256 public totalIonicFees;\r\n\r\n  /**\r\n   * @notice Total number of tokens in circulation\r\n   */\r\n  uint256 public totalSupply;\r\n\r\n  /*\r\n   * Official record of token balances for each account\r\n   */\r\n  mapping(address => uint256) internal accountTokens;\r\n\r\n  /*\r\n   * Approved token transfer amounts on behalf of others\r\n   */\r\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\r\n\r\n  /**\r\n   * @notice Container for borrow balance information\r\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\r\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\r\n   */\r\n  struct BorrowSnapshot {\r\n    uint256 principal;\r\n    uint256 interestIndex;\r\n  }\r\n\r\n  /*\r\n   * Mapping of account addresses to outstanding borrow balances\r\n   */\r\n  mapping(address => BorrowSnapshot) internal accountBorrows;\r\n\r\n  /*\r\n   * Share of seized collateral that is added to reserves\r\n   */\r\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\r\n\r\n  /*\r\n   * Share of seized collateral taken as fees\r\n   */\r\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\r\n\r\n  /**\r\n   * @notice Underlying asset for this CToken\r\n   */\r\n  address public underlying;\r\n\r\n  /**\r\n   * @notice Addresses Provider\r\n   */\r\n  AddressesProvider public ap;\r\n}\r\n\r\nabstract contract CTokenBaseEvents {\r\n  /* ERC20 */\r\n\r\n  /**\r\n   * @notice EIP20 Transfer event\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n  /*** Admin Events ***/\r\n\r\n  /**\r\n   * @notice Event emitted when interestRateModel is changed\r\n   */\r\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\r\n\r\n  /**\r\n   * @notice Event emitted when the reserve factor is changed\r\n   */\r\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\r\n\r\n  /**\r\n   * @notice Event emitted when the admin fee is changed\r\n   */\r\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\r\n\r\n  /**\r\n   * @notice Event emitted when the Ionic fee is changed\r\n   */\r\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\r\n\r\n  /**\r\n   * @notice EIP20 Approval event\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n  /**\r\n   * @notice Event emitted when interest is accrued\r\n   */\r\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\r\n}\r\n\r\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\r\n  event Flash(address receiver, uint256 amount);\r\n}\r\n\r\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\r\n  /*** Market Events ***/\r\n\r\n  /**\r\n   * @notice Event emitted when tokens are minted\r\n   */\r\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n\r\n  /**\r\n   * @notice Event emitted when tokens are redeemed\r\n   */\r\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n  /**\r\n   * @notice Event emitted when underlying is borrowed\r\n   */\r\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\r\n\r\n  /**\r\n   * @notice Event emitted when a borrow is repaid\r\n   */\r\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\r\n\r\n  /**\r\n   * @notice Event emitted when a borrow is liquidated\r\n   */\r\n  event LiquidateBorrow(\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 repayAmount,\r\n    address cTokenCollateral,\r\n    uint256 seizeTokens\r\n  );\r\n\r\n  /**\r\n   * @notice Event emitted when the reserves are added\r\n   */\r\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\r\n\r\n  /**\r\n   * @notice Event emitted when the reserves are reduced\r\n   */\r\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\r\n}\r\n\r\ninterface CTokenFirstExtensionInterface {\r\n  /*** User Interface ***/\r\n\r\n  function transfer(address dst, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address src,\r\n    address dst,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\r\n\r\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\r\n\r\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\r\n\r\n  function getAccountSnapshot(address account)\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function borrowRatePerBlock() external view returns (uint256);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256);\r\n\r\n  function exchangeRateCurrent() external view returns (uint256);\r\n\r\n  function accrueInterest() external returns (uint256);\r\n\r\n  function totalBorrowsCurrent() external view returns (uint256);\r\n\r\n  function borrowBalanceCurrent(address account) external view returns (uint256);\r\n\r\n  function getTotalUnderlyingSupplied() external view returns (uint256);\r\n\r\n  function balanceOfUnderlying(address owner) external view returns (uint256);\r\n\r\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\r\n\r\n  function flash(uint256 amount, bytes calldata data) external;\r\n\r\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\r\n\r\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\r\n\r\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\r\n\r\n  function registerInSFS() external returns (uint256);\r\n}\r\n\r\ninterface CTokenSecondExtensionInterface {\r\n  function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n  function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n  function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n  function liquidateBorrow(\r\n    address borrower,\r\n    uint256 repayAmount,\r\n    address cTokenCollateral\r\n  ) external returns (uint256);\r\n\r\n  function getCash() external view returns (uint256);\r\n\r\n  function seize(\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external returns (uint256);\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\r\n\r\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\r\n\r\n  function selfTransferOut(address to, uint256 amount) external;\r\n\r\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\r\n}\r\n\r\ninterface CDelegatorInterface {\r\n  function implementation() external view returns (address);\r\n\r\n  /**\r\n   * @notice Called by the admin to update the implementation of the delegator\r\n   * @param implementation_ The address of the new implementation for delegation\r\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n   */\r\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\r\n\r\n  /**\r\n   * @dev upgrades the implementation if necessary\r\n   */\r\n  function _upgrade() external;\r\n}\r\n\r\ninterface CDelegateInterface {\r\n  /**\r\n   * @notice Called by the delegator on a delegate to initialize it for duty\r\n   * @dev Should revert if any issues arise which make it unfit for delegation\r\n   * @param data The encoded bytes data for any initialization\r\n   */\r\n  function _becomeImplementation(bytes calldata data) external;\r\n\r\n  function delegateType() external pure returns (uint8);\r\n\r\n  function contractType() external pure returns (string memory);\r\n}\r\n\r\nabstract contract CErc20AdminBase is CErc20Storage {\r\n  /**\r\n   * @notice Returns a boolean indicating if the sender has admin rights\r\n   */\r\n  function hasAdminRights() internal view returns (bool) {\r\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\r\n    return\r\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\r\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\r\n  }\r\n}\r\n\r\nabstract contract CErc20FirstExtensionBase is\r\n  CErc20AdminBase,\r\n  CTokenFirstExtensionEvents,\r\n  CTokenFirstExtensionInterface\r\n{}\r\n\r\nabstract contract CTokenSecondExtensionBase is\r\n  CErc20AdminBase,\r\n  CTokenSecondExtensionEvents,\r\n  CTokenSecondExtensionInterface,\r\n  CDelegateInterface\r\n{}\r\n\r\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\r\n\r\ninterface CErc20StorageInterface {\r\n  function admin() external view returns (address);\r\n\r\n  function adminHasRights() external view returns (bool);\r\n\r\n  function ionicAdmin() external view returns (address);\r\n\r\n  function ionicAdminHasRights() external view returns (bool);\r\n\r\n  function comptroller() external view returns (IonicComptroller);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function adminFeeMantissa() external view returns (uint256);\r\n\r\n  function ionicFeeMantissa() external view returns (uint256);\r\n\r\n  function reserveFactorMantissa() external view returns (uint256);\r\n\r\n  function protocolSeizeShareMantissa() external view returns (uint256);\r\n\r\n  function feeSeizeShareMantissa() external view returns (uint256);\r\n\r\n  function totalReserves() external view returns (uint256);\r\n\r\n  function totalAdminFees() external view returns (uint256);\r\n\r\n  function totalIonicFees() external view returns (uint256);\r\n\r\n  function totalBorrows() external view returns (uint256);\r\n\r\n  function accrualBlockNumber() external view returns (uint256);\r\n\r\n  function underlying() external view returns (address);\r\n\r\n  function borrowIndex() external view returns (uint256);\r\n\r\n  function interestRateModel() external view returns (address);\r\n}\r\n\r\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\r\n  function plugin() external view returns (address);\r\n}\r\n\r\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\r\n  function approve(address, address) external;\r\n}\r\n\r\ninterface ICErc20 is\r\n  CErc20StorageInterface,\r\n  CTokenSecondExtensionInterface,\r\n  CTokenFirstExtensionInterface,\r\n  CDelegatorInterface,\r\n  CDelegateInterface\r\n{}\r\n\r\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\r\n  function _updatePlugin(address _plugin) external;\r\n}\r\n\r\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\r\n"
    },
    "contracts/compound/ErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\ncontract ComptrollerErrorReporter {\r\n  enum Error {\r\n    NO_ERROR,\r\n    UNAUTHORIZED,\r\n    COMPTROLLER_MISMATCH,\r\n    INSUFFICIENT_SHORTFALL,\r\n    INSUFFICIENT_LIQUIDITY,\r\n    INVALID_CLOSE_FACTOR,\r\n    INVALID_COLLATERAL_FACTOR,\r\n    INVALID_LIQUIDATION_INCENTIVE,\r\n    MARKET_NOT_LISTED,\r\n    MARKET_ALREADY_LISTED,\r\n    MATH_ERROR,\r\n    NONZERO_BORROW_BALANCE,\r\n    PRICE_ERROR,\r\n    REJECTION,\r\n    SNAPSHOT_ERROR,\r\n    TOO_MANY_ASSETS,\r\n    TOO_MUCH_REPAY,\r\n    SUPPLIER_NOT_WHITELISTED,\r\n    BORROW_BELOW_MIN,\r\n    SUPPLY_ABOVE_MAX,\r\n    NONZERO_TOTAL_SUPPLY\r\n  }\r\n\r\n  enum FailureInfo {\r\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\r\n    ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\r\n    EXIT_MARKET_BALANCE_OWED,\r\n    EXIT_MARKET_REJECTION,\r\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\r\n    TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\r\n    SET_CLOSE_FACTOR_OWNER_CHECK,\r\n    SET_CLOSE_FACTOR_VALIDATION,\r\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\r\n    SET_COLLATERAL_FACTOR_VALIDATION,\r\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\r\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\r\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\r\n    SET_PENDING_ADMIN_OWNER_CHECK,\r\n    SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\r\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\r\n    SET_PRICE_ORACLE_OWNER_CHECK,\r\n    SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\r\n    SET_WHITELIST_STATUS_OWNER_CHECK,\r\n    SUPPORT_MARKET_EXISTS,\r\n    SUPPORT_MARKET_OWNER_CHECK,\r\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\r\n    UNSUPPORT_MARKET_OWNER_CHECK,\r\n    UNSUPPORT_MARKET_DOES_NOT_EXIST,\r\n    UNSUPPORT_MARKET_IN_USE\r\n  }\r\n\r\n  /**\r\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n   **/\r\n  event Failure(uint256 error, uint256 info, uint256 detail);\r\n\r\n  /**\r\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n   */\r\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\r\n    emit Failure(uint256(err), uint256(info), 0);\r\n\r\n    return uint256(err);\r\n  }\r\n\r\n  /**\r\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n   */\r\n  function failOpaque(\r\n    Error err,\r\n    FailureInfo info,\r\n    uint256 opaqueError\r\n  ) internal returns (uint256) {\r\n    emit Failure(uint256(err), uint256(info), opaqueError);\r\n\r\n    return uint256(err);\r\n  }\r\n}\r\n\r\ncontract TokenErrorReporter {\r\n  enum Error {\r\n    NO_ERROR,\r\n    UNAUTHORIZED,\r\n    BAD_INPUT,\r\n    COMPTROLLER_REJECTION,\r\n    COMPTROLLER_CALCULATION_ERROR,\r\n    INTEREST_RATE_MODEL_ERROR,\r\n    INVALID_ACCOUNT_PAIR,\r\n    INVALID_CLOSE_AMOUNT_REQUESTED,\r\n    INVALID_COLLATERAL_FACTOR,\r\n    MATH_ERROR,\r\n    MARKET_NOT_FRESH,\r\n    MARKET_NOT_LISTED,\r\n    TOKEN_INSUFFICIENT_ALLOWANCE,\r\n    TOKEN_INSUFFICIENT_BALANCE,\r\n    TOKEN_INSUFFICIENT_CASH,\r\n    TOKEN_TRANSFER_IN_FAILED,\r\n    TOKEN_TRANSFER_OUT_FAILED,\r\n    UTILIZATION_ABOVE_MAX\r\n  }\r\n\r\n  /*\r\n   * Note: FailureInfo (but not Error) is kept in alphabetical order\r\n   *       This is because FailureInfo grows significantly faster, and\r\n   *       the order of Error has some meaning, while the order of FailureInfo\r\n   *       is entirely arbitrary.\r\n   */\r\n  enum FailureInfo {\r\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_TOTAL_IONIC_FEES_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\r\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n    BORROW_ACCRUE_INTEREST_FAILED,\r\n    BORROW_CASH_NOT_AVAILABLE,\r\n    BORROW_FRESHNESS_CHECK,\r\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\r\n    BORROW_MARKET_NOT_LISTED,\r\n    BORROW_COMPTROLLER_REJECTION,\r\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\r\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\r\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\r\n    LIQUIDATE_COMPTROLLER_REJECTION,\r\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\r\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\r\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\r\n    LIQUIDATE_FRESHNESS_CHECK,\r\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\r\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\r\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\r\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\r\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\r\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\r\n    LIQUIDATE_SEIZE_TOO_MUCH,\r\n    MINT_ACCRUE_INTEREST_FAILED,\r\n    MINT_COMPTROLLER_REJECTION,\r\n    MINT_EXCHANGE_CALCULATION_FAILED,\r\n    MINT_EXCHANGE_RATE_READ_FAILED,\r\n    MINT_FRESHNESS_CHECK,\r\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\r\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n    MINT_TRANSFER_IN_FAILED,\r\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\r\n    NEW_UTILIZATION_RATE_ABOVE_MAX,\r\n    REDEEM_ACCRUE_INTEREST_FAILED,\r\n    REDEEM_COMPTROLLER_REJECTION,\r\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\r\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\r\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\r\n    REDEEM_FRESHNESS_CHECK,\r\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\r\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\r\n    WITHDRAW_IONIC_FEES_ACCRUE_INTEREST_FAILED,\r\n    WITHDRAW_IONIC_FEES_CASH_NOT_AVAILABLE,\r\n    WITHDRAW_IONIC_FEES_FRESH_CHECK,\r\n    WITHDRAW_IONIC_FEES_VALIDATION,\r\n    WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\r\n    WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\r\n    WITHDRAW_ADMIN_FEES_FRESH_CHECK,\r\n    WITHDRAW_ADMIN_FEES_VALIDATION,\r\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\r\n    REDUCE_RESERVES_ADMIN_CHECK,\r\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\r\n    REDUCE_RESERVES_FRESH_CHECK,\r\n    REDUCE_RESERVES_VALIDATION,\r\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\r\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\r\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n    REPAY_BORROW_COMPTROLLER_REJECTION,\r\n    REPAY_BORROW_FRESHNESS_CHECK,\r\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\r\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\r\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n    SET_COLLATERAL_FACTOR_VALIDATION,\r\n    SET_COMPTROLLER_OWNER_CHECK,\r\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\r\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\r\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\r\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\r\n    SET_PENDING_ADMIN_OWNER_CHECK,\r\n    SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\r\n    SET_ADMIN_FEE_ADMIN_CHECK,\r\n    SET_ADMIN_FEE_FRESH_CHECK,\r\n    SET_ADMIN_FEE_BOUNDS_CHECK,\r\n    SET_IONIC_FEE_ACCRUE_INTEREST_FAILED,\r\n    SET_IONIC_FEE_FRESH_CHECK,\r\n    SET_IONIC_FEE_BOUNDS_CHECK,\r\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\r\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\r\n    SET_RESERVE_FACTOR_FRESH_CHECK,\r\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\r\n    TRANSFER_COMPTROLLER_REJECTION,\r\n    TRANSFER_NOT_ALLOWED,\r\n    TRANSFER_NOT_ENOUGH,\r\n    TRANSFER_TOO_MUCH,\r\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\r\n    ADD_RESERVES_FRESH_CHECK,\r\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\r\n  }\r\n\r\n  /**\r\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n   **/\r\n  event Failure(uint256 error, uint256 info, uint256 detail);\r\n\r\n  /**\r\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n   */\r\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\r\n    emit Failure(uint256(err), uint256(info), 0);\r\n\r\n    return uint256(err);\r\n  }\r\n\r\n  /**\r\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n   */\r\n  function failOpaque(\r\n    Error err,\r\n    FailureInfo info,\r\n    uint256 opaqueError\r\n  ) internal returns (uint256) {\r\n    emit Failure(uint256(err), uint256(info), opaqueError);\r\n\r\n    return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint256(err);\r\n  }\r\n}\r\n"
    },
    "contracts/compound/Exponential.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./CarefulMath.sol\";\r\nimport \"./ExponentialNoError.sol\";\r\n\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author Compound\r\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract Exponential is CarefulMath, ExponentialNoError {\r\n  /**\r\n   * @dev Creates an exponential from numerator and denominator values.\r\n   *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\r\n   *            or if `denom` is zero.\r\n   */\r\n  function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\r\n    (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\r\n    if (err1 != MathError.NO_ERROR) {\r\n      return (err1, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    return (MathError.NO_ERROR, Exp({ mantissa: rational }));\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two exponentials, returning a new exponential.\r\n   */\r\n  function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\r\n    (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\r\n\r\n    return (error, Exp({ mantissa: result }));\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two exponentials, returning a new exponential.\r\n   */\r\n  function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\r\n    (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\r\n\r\n    return (error, Exp({ mantissa: result }));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n   */\r\n  function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\r\n    (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n   */\r\n  function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\r\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n    if (err != MathError.NO_ERROR) {\r\n      return (err, 0);\r\n    }\r\n\r\n    return (MathError.NO_ERROR, truncate(product));\r\n  }\r\n\r\n  /**\r\n   * @dev Divide an Exp by a scalar, returning a new Exp.\r\n   */\r\n  function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\r\n    (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\r\n  }\r\n\r\n  /**\r\n   * @dev Divide a scalar by an Exp, returning a new Exp.\r\n   */\r\n  function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\r\n    /*\r\n          We are doing this as:\r\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\r\n\r\n          How it works:\r\n          Exp = a / b;\r\n          Scalar = s;\r\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\r\n        */\r\n    (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n    return getExp(numerator, divisor.mantissa);\r\n  }\r\n\r\n  /**\r\n   * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\r\n   */\r\n  function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\r\n    (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\r\n    if (err != MathError.NO_ERROR) {\r\n      return (err, 0);\r\n    }\r\n\r\n    return (MathError.NO_ERROR, truncate(fraction));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two exponentials, returning a new exponential.\r\n   */\r\n  function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\r\n    (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    // We add half the scale before dividing so that we get rounding instead of truncation.\r\n    //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\r\n    // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\r\n    (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\r\n    if (err1 != MathError.NO_ERROR) {\r\n      return (err1, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\r\n    // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\r\n    assert(err2 == MathError.NO_ERROR);\r\n\r\n    return (MathError.NO_ERROR, Exp({ mantissa: product }));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\r\n   */\r\n  function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\r\n    return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies three exponentials, returning a new exponential.\r\n   */\r\n  function mulExp3(\r\n    Exp memory a,\r\n    Exp memory b,\r\n    Exp memory c\r\n  ) internal pure returns (MathError, Exp memory) {\r\n    (MathError err, Exp memory ab) = mulExp(a, b);\r\n    if (err != MathError.NO_ERROR) {\r\n      return (err, ab);\r\n    }\r\n    return mulExp(ab, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two exponentials, returning a new exponential.\r\n   *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\r\n   *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\r\n   */\r\n  function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\r\n    return getExp(a.mantissa, b.mantissa);\r\n  }\r\n}\r\n"
    },
    "contracts/compound/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author Compound\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract ExponentialNoError {\r\n  uint256 constant expScale = 1e18;\r\n  uint256 constant doubleScale = 1e36;\r\n  uint256 constant halfExpScale = expScale / 2;\r\n  uint256 constant mantissaOne = expScale;\r\n\r\n  struct Exp {\r\n    uint256 mantissa;\r\n  }\r\n\r\n  struct Double {\r\n    uint256 mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Truncates the given exp to a whole number value.\r\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n   */\r\n  function truncate(Exp memory exp) internal pure returns (uint256) {\r\n    // Note: We are not using careful math here as we're performing a division that cannot fail\r\n    return exp.mantissa / expScale;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n   */\r\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\r\n    Exp memory product = mul_(a, scalar);\r\n    return truncate(product);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n   */\r\n  function mul_ScalarTruncateAddUInt(\r\n    Exp memory a,\r\n    uint256 scalar,\r\n    uint256 addend\r\n  ) internal pure returns (uint256) {\r\n    Exp memory product = mul_(a, scalar);\r\n    return add_(truncate(product), addend);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if first Exp is less than second Exp.\r\n   */\r\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\r\n    return left.mantissa < right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if left Exp <= right Exp.\r\n   */\r\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\r\n    return left.mantissa <= right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if left Exp > right Exp.\r\n   */\r\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\r\n    return left.mantissa > right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev returns true if Exp is exactly zero\r\n   */\r\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\r\n    return value.mantissa == 0;\r\n  }\r\n\r\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\r\n    require(n < 2**224, errorMessage);\r\n    return uint224(n);\r\n  }\r\n\r\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\r\n    require(n < 2**32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\r\n  }\r\n\r\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\r\n  }\r\n\r\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return add_(a, b, \"addition overflow\");\r\n  }\r\n\r\n  function add_(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\r\n  }\r\n\r\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\r\n  }\r\n\r\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub_(a, b, \"subtraction underflow\");\r\n  }\r\n\r\n  function sub_(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\r\n  }\r\n\r\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: mul_(a.mantissa, b) });\r\n  }\r\n\r\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\r\n    return mul_(a, b.mantissa) / expScale;\r\n  }\r\n\r\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\r\n  }\r\n\r\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: mul_(a.mantissa, b) });\r\n  }\r\n\r\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\r\n    return mul_(a, b.mantissa) / doubleScale;\r\n  }\r\n\r\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mul_(a, b, \"multiplication overflow\");\r\n  }\r\n\r\n  function mul_(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\r\n  }\r\n\r\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: div_(a.mantissa, b) });\r\n  }\r\n\r\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\r\n    return div_(mul_(a, expScale), b.mantissa);\r\n  }\r\n\r\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\r\n  }\r\n\r\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: div_(a.mantissa, b) });\r\n  }\r\n\r\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\r\n    return div_(mul_(a, doubleScale), b.mantissa);\r\n  }\r\n\r\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div_(a, b, \"divide by zero\");\r\n  }\r\n\r\n  function div_(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a / b;\r\n  }\r\n\r\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\r\n  }\r\n}\r\n"
    },
    "contracts/compound/IFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../ionic/AuthoritiesRegistry.sol\";\r\n\r\ninterface IFeeDistributor {\r\n  function minBorrowEth() external view returns (uint256);\r\n\r\n  function maxUtilizationRate() external view returns (uint256);\r\n\r\n  function interestFeeRate() external view returns (uint256);\r\n\r\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\r\n\r\n  function latestCErc20Delegate(uint8 delegateType)\r\n    external\r\n    view\r\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\r\n\r\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\r\n\r\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\r\n\r\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\r\n\r\n  function deployCErc20(\r\n    uint8 delegateType,\r\n    bytes calldata constructorData,\r\n    bytes calldata becomeImplData\r\n  ) external returns (address);\r\n\r\n  function canCall(\r\n    address pool,\r\n    address user,\r\n    address target,\r\n    bytes4 functionSig\r\n  ) external view returns (bool);\r\n\r\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\r\n\r\n  fallback() external payable;\r\n\r\n  receive() external payable;\r\n}\r\n"
    },
    "contracts/compound/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title Compound's InterestRateModel Interface\r\n * @author Compound\r\n */\r\nabstract contract InterestRateModel {\r\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\r\n  bool public constant isInterestRateModel = true;\r\n\r\n  /**\r\n   * @notice Calculates the current borrow interest rate per block\r\n   * @param cash The total amount of cash the market has\r\n   * @param borrows The total amount of borrows the market has outstanding\r\n   * @param reserves The total amount of reserves the market has\r\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\r\n   */\r\n  function getBorrowRate(\r\n    uint256 cash,\r\n    uint256 borrows,\r\n    uint256 reserves\r\n  ) public view virtual returns (uint256);\r\n\r\n  /**\r\n   * @notice Calculates the current supply interest rate per block\r\n   * @param cash The total amount of cash the market has\r\n   * @param borrows The total amount of borrows the market has outstanding\r\n   * @param reserves The total amount of reserves the market has\r\n   * @param reserveFactorMantissa The current reserve factor the market has\r\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n   */\r\n  function getSupplyRate(\r\n    uint256 cash,\r\n    uint256 borrows,\r\n    uint256 reserves,\r\n    uint256 reserveFactorMantissa\r\n  ) public view virtual returns (uint256);\r\n}\r\n"
    },
    "contracts/compound/Unitroller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./ComptrollerStorage.sol\";\r\nimport \"./Comptroller.sol\";\r\nimport { DiamondExtension, DiamondBase, LibDiamond } from \"../ionic/DiamondExtension.sol\";\r\n\r\n/**\r\n * @title Unitroller\r\n * @dev Storage for the comptroller is at this address, while execution is delegated via the Diamond Extensions\r\n * CTokens should reference this contract as their comptroller.\r\n */\r\ncontract Unitroller is ComptrollerV3Storage, ComptrollerErrorReporter, DiamondBase {\r\n  /**\r\n   * @notice Event emitted when the admin rights are changed\r\n   */\r\n  event AdminRightsToggled(bool hasRights);\r\n\r\n  /**\r\n   * @notice Emitted when pendingAdmin is changed\r\n   */\r\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n  /**\r\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n   */\r\n  event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n  constructor(address payable _ionicAdmin) {\r\n    admin = msg.sender;\r\n    ionicAdmin = _ionicAdmin;\r\n  }\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n   * @notice Toggles admin rights.\r\n   * @param hasRights Boolean indicating if the admin is to have rights.\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _toggleAdminRights(bool hasRights) external returns (uint256) {\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\r\n    }\r\n\r\n    // Check that rights have not already been set to the desired value\r\n    if (adminHasRights == hasRights) return uint256(Error.NO_ERROR);\r\n\r\n    adminHasRights = hasRights;\r\n    emit AdminRightsToggled(hasRights);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n   * @param newPendingAdmin New pending admin.\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\r\n    }\r\n\r\n    address oldPendingAdmin = pendingAdmin;\r\n    pendingAdmin = newPendingAdmin;\r\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n   * @dev Admin function for pending admin to accept role and update admin\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _acceptAdmin() public returns (uint256) {\r\n    // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\r\n    }\r\n\r\n    // Save current values for inclusion in log\r\n    address oldAdmin = admin;\r\n    address oldPendingAdmin = pendingAdmin;\r\n\r\n    admin = pendingAdmin;\r\n    pendingAdmin = address(0);\r\n\r\n    emit NewAdmin(oldAdmin, admin);\r\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  function comptrollerImplementation() public view returns (address) {\r\n    return LibDiamond.getExtensionForFunction(bytes4(keccak256(bytes(\"_deployMarket(uint8,bytes,bytes,uint256)\"))));\r\n  }\r\n\r\n  /**\r\n   * @dev upgrades the implementation if necessary\r\n   */\r\n  function _upgrade() external {\r\n    require(msg.sender == address(this) || hasAdminRights(), \"!self || !admin\");\r\n\r\n    address currentImplementation = comptrollerImplementation();\r\n    address latestComptrollerImplementation = IFeeDistributor(ionicAdmin).latestComptrollerImplementation(\r\n      currentImplementation\r\n    );\r\n\r\n    _updateExtensions(latestComptrollerImplementation);\r\n\r\n    if (currentImplementation != latestComptrollerImplementation) {\r\n      // reinitialize\r\n      _functionCall(address(this), abi.encodeWithSignature(\"_becomeImplementation()\"), \"!become impl\");\r\n    }\r\n  }\r\n\r\n  function _functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    (bool success, bytes memory returndata) = target.call(data);\r\n\r\n    if (!success) {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n\r\n    return returndata;\r\n  }\r\n\r\n  function _updateExtensions(address currentComptroller) internal {\r\n    address[] memory latestExtensions = IFeeDistributor(ionicAdmin).getComptrollerExtensions(currentComptroller);\r\n    address[] memory currentExtensions = LibDiamond.listExtensions();\r\n\r\n    // removed the current (old) extensions\r\n    for (uint256 i = 0; i < currentExtensions.length; i++) {\r\n      LibDiamond.removeExtension(DiamondExtension(currentExtensions[i]));\r\n    }\r\n    // add the new extensions\r\n    for (uint256 i = 0; i < latestExtensions.length; i++) {\r\n      LibDiamond.addExtension(DiamondExtension(latestExtensions[i]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev register a logic extension\r\n   * @param extensionToAdd the extension whose functions are to be added\r\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\r\n   */\r\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external override {\r\n    require(hasAdminRights(), \"!unauthorized\");\r\n    LibDiamond.registerExtension(extensionToAdd, extensionToReplace);\r\n  }\r\n}\r\n"
    },
    "contracts/EmissionsManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\nimport { SafeTransferLib } from \"solmate/utils/SafeTransferLib.sol\";\r\n\r\nimport { Ownable2StepUpgradeable } from \"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\";\r\nimport { IonicFlywheelCore } from \"./ionic/strategies/flywheel/IonicFlywheelCore.sol\";\r\nimport { IonicComptroller } from \"./compound/ComptrollerInterface.sol\";\r\nimport { BasePriceOracle } from \"./oracles/BasePriceOracle.sol\";\r\nimport { ICErc20 } from \"./compound/CTokenInterfaces.sol\";\r\nimport { PoolDirectory } from \"./PoolDirectory.sol\";\r\nimport { IEmissionsManager } from \"./IEmissionsManager.sol\";\r\nimport { IveION } from \"./veION/interfaces/IveION.sol\";\r\n\r\ninterface Oracle {\r\n  function getUnderlyingPrice(address) external returns (uint256);\r\n}\r\n\r\ncontract EmissionsManager is IEmissionsManager, Ownable2StepUpgradeable {\r\n  using SafeTransferLib for ERC20;\r\n\r\n  address public protocolAddress;\r\n  uint256 public collateralBp;\r\n  PoolDirectory public fpd;\r\n  ERC20 public rewardToken;\r\n  address public veION;\r\n\r\n  bytes public nonBlacklistableTargetBytecode;\r\n  mapping(address => bool) public isBlacklisted;\r\n  mapping(address => bool) public nonBlacklistable;\r\n\r\n  uint256 public constant MAXIMUM_BASIS_POINTS = 10_000;\r\n  uint256 public constant BLACKLISTER_SHARE = 80;\r\n  uint256 public constant PROTOCOL_SHARE = 20;\r\n\r\n  modifier onlyBlacklistableBytecode(address _addr) {\r\n    bytes memory code = _addr.code;\r\n    require(keccak256(code) != keccak256(nonBlacklistableTargetBytecode), \"Non-blacklistable bytecode\");\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    _disableInitializers(); // Locks the implementation contract from being initialized\r\n  }\r\n\r\n  function initialize(\r\n    PoolDirectory _fpd,\r\n    address _protocolAddress,\r\n    ERC20 _rewardToken,\r\n    uint256 _collateralBp,\r\n    bytes memory _nonBlacklistableTargetBytecode\r\n  ) public initializer {\r\n    if (address(_fpd) == address(0)) revert InvalidPoolDirectoryAaddress();\r\n    if (_protocolAddress == address(0)) revert InvalidProtocolAddress();\r\n    if (address(_rewardToken) == address(0)) revert InvalidRewardTokenAddress();\r\n    if (_collateralBp >= MAXIMUM_BASIS_POINTS) revert CollateralBasisPointsExceedMaximum();\r\n\r\n    __Ownable2Step_init();\r\n    protocolAddress = _protocolAddress;\r\n    fpd = _fpd;\r\n    rewardToken = _rewardToken;\r\n    collateralBp = _collateralBp;\r\n    nonBlacklistableTargetBytecode = _nonBlacklistableTargetBytecode;\r\n\r\n    emit Initialized(_protocolAddress, address(_rewardToken), _collateralBp, _nonBlacklistableTargetBytecode);\r\n  }\r\n\r\n  function setVeIon(IveION _veIon) external onlyOwner {\r\n    if (address(_veIon) == address(0)) revert InvalidVeIONAddress();\r\n    veION = address(_veIon);\r\n    emit VeIonSet(address(_veIon));\r\n  }\r\n\r\n  function setCollateralBp(uint256 _collateralBp) external onlyOwner {\r\n    if (_collateralBp >= MAXIMUM_BASIS_POINTS) revert MaximumLimitExceeded();\r\n    collateralBp = _collateralBp;\r\n    emit CollateralBpSet(_collateralBp);\r\n  }\r\n\r\n  function setNonBlacklistableAddress(address _user, bool _isNonBlacklistable) external onlyOwner {\r\n    nonBlacklistable[_user] = _isNonBlacklistable;\r\n    emit NonBlacklistableAddressSet(_user, _isNonBlacklistable);\r\n  }\r\n\r\n  function setNonBlacklistableTargetBytecode(bytes memory _newBytecode) external onlyOwner {\r\n    nonBlacklistableTargetBytecode = _newBytecode;\r\n    emit NonBlacklistableTargetBytecodeSet(_newBytecode);\r\n  }\r\n\r\n  function setProtocolAddress(address _newProtocolAddress) external onlyOwner {\r\n    require(_newProtocolAddress != address(0), \"Invalid address\");\r\n    protocolAddress = _newProtocolAddress;\r\n  }\r\n\r\n  function _getUserTotalCollateral(address _user) internal view returns (uint256) {\r\n    uint256 totalColateralInETH = 0;\r\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\r\n    uint256 poolsLength = pools.length;\r\n    for (uint256 i = 0; i < poolsLength; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\r\n      BasePriceOracle oracle = comptroller.oracle();\r\n      ICErc20[] memory cTokens = comptroller.getAllMarkets();\r\n      uint256 cTokensLength = cTokens.length;\r\n      for (uint256 j = 0; j < cTokensLength; j++) {\r\n        uint256 supplyBalance = cTokens[j].balanceOfUnderlying(_user);\r\n        if (supplyBalance > 0) {\r\n          uint256 collateralInETH = (supplyBalance * oracle.getUnderlyingPrice(cTokens[j])) / 1e18;\r\n          totalColateralInETH += collateralInETH;\r\n        }\r\n      }\r\n    }\r\n    return totalColateralInETH;\r\n  }\r\n\r\n  function getUserTotalCollateral(address _user) external view returns (uint256) {\r\n    return _getUserTotalCollateral(_user);\r\n  }\r\n\r\n  function _checkCollateralRatio(address _user) internal view returns (bool) {\r\n    uint256 userCollateralValue = _getUserTotalCollateral(_user);\r\n    if (userCollateralValue == 0) return true;\r\n    uint256 userLPValue = IveION(veION).getTotalEthValueOfTokens(_user);\r\n    if ((userLPValue * MAXIMUM_BASIS_POINTS) / userCollateralValue >= collateralBp) {\r\n      return true;\r\n    } else return false;\r\n  }\r\n\r\n  function reportUser(address _user) external onlyBlacklistableBytecode(_user) {\r\n    require(!nonBlacklistable[_user], \"Non-blacklistable user\");\r\n    require(!isBlacklisted[_user], \"Already blacklisted\");\r\n    require(!_checkCollateralRatio(_user), \"LP balance above threshold\");\r\n    isBlacklisted[_user] = true;\r\n    _blacklistUserAndClaimEmissions(_user);\r\n  }\r\n\r\n  function whitelistUser(address _user) external {\r\n    require(isBlacklisted[_user], \"Already whitelisted\");\r\n    require(_checkCollateralRatio(_user), \"LP balance below threshold\");\r\n    isBlacklisted[_user] = false;\r\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\r\n    uint256 poolsLength = pools.length;\r\n    for (uint256 i = 0; i < poolsLength; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\r\n      ICErc20[] memory cTokens = comptroller.getAllMarkets();\r\n      uint256 cTokensLength = cTokens.length;\r\n      for (uint256 j = 0; j < cTokensLength; j++) {\r\n        address[] memory flywheelAddresses = comptroller.getAccruingFlywheels();\r\n        uint256 flywheelAddressesLength = flywheelAddresses.length;\r\n        for (uint256 k = 0; k < flywheelAddressesLength; k++) {\r\n          IonicFlywheelCore flywheel = IonicFlywheelCore(flywheelAddresses[k]);\r\n          if (address(flywheel.rewardToken()) == address(rewardToken)) {\r\n            flywheel.whitelistUser(ERC20(address(cTokens[j])), _user);\r\n            flywheel.accrue(ERC20(address(cTokens[j])), _user);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function isUserBlacklisted(address _user) external view returns (bool) {\r\n    return isBlacklisted[_user];\r\n  }\r\n\r\n  function isUserBlacklistable(address _user) external view returns (bool) {\r\n    if (nonBlacklistable[_user] || keccak256(_user.code) == keccak256(nonBlacklistableTargetBytecode)) {\r\n      return false;\r\n    }\r\n    return !_checkCollateralRatio(_user) && !isBlacklisted[_user];\r\n  }\r\n\r\n  function _blacklistUserAndClaimEmissions(address user) internal {\r\n    uint256 balanceBefore = ERC20(rewardToken).balanceOf(address(this));\r\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\r\n    uint256 poolsLength = pools.length;\r\n    for (uint256 i = 0; i < poolsLength; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\r\n      ERC20[] memory markets;\r\n      {\r\n        ICErc20[] memory cerc20s = comptroller.getAllMarkets();\r\n        uint256 cerc20sLength = cerc20s.length;\r\n        markets = new ERC20[](cerc20sLength);\r\n        for (uint256 j = 0; j < cerc20sLength; j++) {\r\n          markets[j] = ERC20(address(cerc20s[j]));\r\n        }\r\n      }\r\n\r\n      address[] memory flywheelAddresses = comptroller.getAccruingFlywheels();\r\n      uint256 flywheelAddressesLength = flywheelAddresses.length;\r\n      for (uint256 k = 0; k < flywheelAddressesLength; k++) {\r\n        IonicFlywheelCore flywheel = IonicFlywheelCore(flywheelAddresses[k]);\r\n        if (address(flywheel.rewardToken()) == address(rewardToken)) {\r\n          uint256 marketsLength = markets.length;\r\n          for (uint256 m = 0; m < marketsLength; m++) {\r\n            flywheel.accrue(markets[m], user);\r\n            flywheel.updateBlacklistBalances(markets[m], user);\r\n          }\r\n          flywheel.takeRewardsFromUser(user, address(this));\r\n        }\r\n      }\r\n    }\r\n\r\n    uint256 balanceAfter = ERC20(rewardToken).balanceOf(address(this));\r\n    uint256 totalClaimed = balanceAfter - balanceBefore;\r\n    if (totalClaimed > 0) {\r\n      rewardToken.safeTransfer(msg.sender, (totalClaimed * BLACKLISTER_SHARE) / 100);\r\n      rewardToken.safeTransfer(protocolAddress, (totalClaimed * PROTOCOL_SHARE) / 100);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/external/compound/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./IPriceOracle.sol\";\r\nimport \"./ICToken.sol\";\r\nimport \"./IUnitroller.sol\";\r\nimport \"./IRewardsDistributor.sol\";\r\n\r\n/**\r\n * @title Compound's Comptroller Contract\r\n * @author Compound\r\n */\r\ninterface IComptroller {\r\n  function admin() external view returns (address);\r\n\r\n  function adminHasRights() external view returns (bool);\r\n\r\n  function ionicAdminHasRights() external view returns (bool);\r\n\r\n  function oracle() external view returns (IPriceOracle);\r\n\r\n  function pauseGuardian() external view returns (address);\r\n\r\n  function closeFactorMantissa() external view returns (uint256);\r\n\r\n  function liquidationIncentiveMantissa() external view returns (uint256);\r\n\r\n  function markets(address cToken) external view returns (bool, uint256);\r\n\r\n  function getAssetsIn(address account) external view returns (ICToken[] memory);\r\n\r\n  function checkMembership(address account, ICToken cToken) external view returns (bool);\r\n\r\n  function getHypotheticalAccountLiquidity(\r\n    address account,\r\n    address cTokenModify,\r\n    uint256 redeemTokens,\r\n    uint256 borrowAmount,\r\n    uint256 repayAmount\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function getAccountLiquidity(address account)\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function _setPriceOracle(IPriceOracle newOracle) external returns (uint256);\r\n\r\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\r\n\r\n  function _setCollateralFactor(ICToken market, uint256 newCollateralFactorMantissa) external returns (uint256);\r\n\r\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\r\n\r\n  function _become(IUnitroller unitroller) external;\r\n\r\n  function borrowGuardianPaused(address cToken) external view returns (bool);\r\n\r\n  function mintGuardianPaused(address cToken) external view returns (bool);\r\n\r\n  function getRewardsDistributors() external view returns (address[] memory);\r\n\r\n  function getAllMarkets() external view returns (ICToken[] memory);\r\n\r\n  function getAllBorrowers() external view returns (address[] memory);\r\n\r\n  function suppliers(address account) external view returns (bool);\r\n\r\n  function supplyCaps(address cToken) external view returns (uint256);\r\n\r\n  function borrowCaps(address cToken) external view returns (uint256);\r\n\r\n  function enforceWhitelist() external view returns (bool);\r\n\r\n  function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\r\n\r\n  function exitMarket(address cTokenAddress) external returns (uint256);\r\n\r\n  function autoImplementation() external view returns (bool);\r\n\r\n  function isUserOfPool(address user) external view returns (bool);\r\n\r\n  function whitelist(address account) external view returns (bool);\r\n\r\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\r\n\r\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\r\n\r\n  function _toggleAutoImplementations(bool enabled) external returns (uint256);\r\n\r\n  function _deployMarket(\r\n    bool isCEther,\r\n    bytes memory constructorData,\r\n    bytes calldata becomeImplData,\r\n    uint256 collateralFactorMantissa\r\n  ) external returns (uint256);\r\n\r\n  function getMaxRedeemOrBorrow(\r\n    address account,\r\n    ICToken cTokenModify,\r\n    bool isBorrow\r\n  ) external view returns (uint256);\r\n\r\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\r\n\r\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\r\n\r\n  function isDeprecated(ICToken cToken) external view returns (bool);\r\n\r\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\r\n\r\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\r\n}\r\n"
    },
    "contracts/external/compound/ICToken.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title Compound's CToken Contract\r\n * @notice Abstract base for CTokens\r\n * @author Compound\r\n */\r\ninterface ICToken {\r\n  function admin() external view returns (address);\r\n\r\n  function adminHasRights() external view returns (bool);\r\n\r\n  function ionicAdminHasRights() external view returns (bool);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function comptroller() external view returns (address);\r\n\r\n  function adminFeeMantissa() external view returns (uint256);\r\n\r\n  function ionicFeeMantissa() external view returns (uint256);\r\n\r\n  function reserveFactorMantissa() external view returns (uint256);\r\n\r\n  function totalReserves() external view returns (uint256);\r\n\r\n  function totalAdminFees() external view returns (uint256);\r\n\r\n  function totalIonicFees() external view returns (uint256);\r\n\r\n  function isCToken() external view returns (bool);\r\n\r\n  function isCEther() external view returns (bool);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n  function borrowRatePerBlock() external view returns (uint256);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256);\r\n\r\n  function totalBorrowsCurrent() external returns (uint256);\r\n\r\n  function totalBorrows() external view returns (uint256);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function borrowBalanceStored(address account) external view returns (uint256);\r\n\r\n  function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n  function exchangeRateCurrent() external returns (uint256);\r\n\r\n  function exchangeRateStored() external view returns (uint256);\r\n\r\n  function accrueInterest() external returns (uint256);\r\n\r\n  function getCash() external view returns (uint256);\r\n\r\n  function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n  function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n  function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n  function protocolSeizeShareMantissa() external view returns (uint256);\r\n\r\n  function feeSeizeShareMantissa() external view returns (uint256);\r\n\r\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\r\n\r\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\r\n}\r\n"
    },
    "contracts/external/compound/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./ICToken.sol\";\r\n\r\ninterface IPriceOracle {\r\n  /**\r\n   * @notice Get the underlying price of a cToken asset\r\n   * @param cToken The cToken to get the underlying price of\r\n   * @return The underlying asset price mantissa (scaled by 1e18).\r\n   *  Zero means the price is unavailable.\r\n   */\r\n  function getUnderlyingPrice(ICToken cToken) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/external/compound/IRewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./ICToken.sol\";\r\n\r\n/**\r\n * @title RewardsDistributor\r\n * @author Compound\r\n */\r\ninterface IRewardsDistributor {\r\n  /// @dev The token to reward (i.e., COMP)\r\n  function rewardToken() external view returns (address);\r\n\r\n  /// @notice The portion of compRate that each market currently receives\r\n  function compSupplySpeeds(address) external view returns (uint256);\r\n\r\n  /// @notice The portion of compRate that each market currently receives\r\n  function compBorrowSpeeds(address) external view returns (uint256);\r\n\r\n  /// @notice The COMP accrued but not yet transferred to each user\r\n  function compAccrued(address) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\r\n   * @dev Called by the Comptroller\r\n   * @param cToken The relevant market\r\n   * @param supplier The minter/redeemer\r\n   */\r\n  function flywheelPreSupplierAction(address cToken, address supplier) external;\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\r\n   * @dev Called by the Comptroller\r\n   * @param cToken The relevant market\r\n   * @param borrower The borrower\r\n   */\r\n  function flywheelPreBorrowerAction(address cToken, address borrower) external;\r\n\r\n  /**\r\n   * @notice Returns an array of all markets.\r\n   */\r\n  function getAllMarkets() external view returns (ICToken[] memory);\r\n}\r\n"
    },
    "contracts/external/compound/IUnitroller.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title ComptrollerCore\r\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\r\n * CTokens should reference this contract as their comptroller.\r\n */\r\ninterface IUnitroller {\r\n  function _setPendingImplementation(address newPendingImplementation) external returns (uint256);\r\n\r\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\r\n}\r\n"
    },
    "contracts/IEmissionsManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IEmissionsManager {\r\n  error InvalidPoolDirectoryAaddress();\r\n  error InvalidProtocolAddress();\r\n  error InvalidRewardTokenAddress();\r\n  error CollateralBasisPointsExceedMaximum();\r\n  error InvalidVeIONAddress();\r\n  error MaximumLimitExceeded();\r\n\r\n  event Initialized(\r\n    address indexed protocolAddress,\r\n    address indexed rewardToken,\r\n    uint256 collateralBp,\r\n    bytes nonBlacklistableTargetBytecode\r\n  );\r\n  event VeIonSet(address indexed veIon);\r\n  event CollateralBpSet(uint256 collateralBp);\r\n  event NonBlacklistableAddressSet(address indexed user, bool isNonBlacklistable);\r\n  event NonBlacklistableTargetBytecodeSet(bytes newBytecode);\r\n\r\n  function isUserBlacklisted(address _user) external view returns (bool);\r\n  function isUserBlacklistable(address _user) external view returns (bool);\r\n}\r\n"
    },
    "contracts/ionic/AddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\nimport { SafeOwnableUpgradeable } from \"../ionic/SafeOwnableUpgradeable.sol\";\r\n\r\n/**\r\n * @title AddressesProvider\r\n * @notice The Addresses Provider serves as a central storage of system internal and external\r\n *         contract addresses that change between deploys and across chains\r\n * @author Veliko Minkov <veliko@midascapital.xyz>\r\n */\r\ncontract AddressesProvider is SafeOwnableUpgradeable {\r\n  mapping(string => address) private _addresses;\r\n  mapping(address => Contract) public plugins;\r\n  mapping(address => Contract) public flywheelRewards;\r\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\r\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\r\n  JarvisPool[] public jarvisPoolsConfig;\r\n  CurveSwapPool[] public curveSwapPoolsConfig;\r\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\r\n\r\n  /// @dev Initializer to set the admin that can set and change contracts addresses\r\n  function initialize(address owner) public initializer {\r\n    __SafeOwnable_init(owner);\r\n  }\r\n\r\n  /**\r\n   * @dev The contract address and a string that uniquely identifies the contract's interface\r\n   */\r\n  struct Contract {\r\n    address addr;\r\n    string contractInterface;\r\n  }\r\n\r\n  struct RedemptionStrategy {\r\n    address addr;\r\n    string contractInterface;\r\n    address outputToken;\r\n  }\r\n\r\n  struct FundingStrategy {\r\n    address addr;\r\n    string contractInterface;\r\n    address inputToken;\r\n  }\r\n\r\n  struct JarvisPool {\r\n    address syntheticToken;\r\n    address collateralToken;\r\n    address liquidityPool;\r\n    uint256 expirationTime;\r\n  }\r\n\r\n  struct CurveSwapPool {\r\n    address poolAddress;\r\n    address[] coins;\r\n  }\r\n\r\n  /**\r\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\r\n   * @param rewardToken the reward token address\r\n   * @param flywheelRewardsModule the flywheel rewards module address\r\n   * @param contractInterface a string that uniquely identifies the contract's interface\r\n   */\r\n  function setFlywheelRewards(\r\n    address rewardToken,\r\n    address flywheelRewardsModule,\r\n    string calldata contractInterface\r\n  ) public onlyOwner {\r\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\r\n  }\r\n\r\n  /**\r\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\r\n   * @param asset the asset address\r\n   * @param plugin the ERC4626 plugin address\r\n   * @param contractInterface a string that uniquely identifies the contract's interface\r\n   */\r\n  function setPlugin(\r\n    address asset,\r\n    address plugin,\r\n    string calldata contractInterface\r\n  ) public onlyOwner {\r\n    plugins[asset] = Contract(plugin, contractInterface);\r\n  }\r\n\r\n  /**\r\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\r\n   * @param asset the asset address\r\n   * @param strategy redemption strategy address\r\n   * @param contractInterface a string that uniquely identifies the contract's interface\r\n   */\r\n  function setRedemptionStrategy(\r\n    address asset,\r\n    address strategy,\r\n    string calldata contractInterface,\r\n    address outputToken\r\n  ) public onlyOwner {\r\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\r\n  }\r\n\r\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\r\n    return redemptionStrategiesConfig[asset];\r\n  }\r\n\r\n  /**\r\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\r\n   * @param asset the asset address\r\n   * @param strategy funding strategy address\r\n   * @param contractInterface a string that uniquely identifies the contract's interface\r\n   */\r\n  function setFundingStrategy(\r\n    address asset,\r\n    address strategy,\r\n    string calldata contractInterface,\r\n    address inputToken\r\n  ) public onlyOwner {\r\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\r\n  }\r\n\r\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\r\n    return fundingStrategiesConfig[asset];\r\n  }\r\n\r\n  /**\r\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\r\n   * @param syntheticToken the synthetic token address\r\n   * @param collateralToken the collateral token address\r\n   * @param liquidityPool the liquidity pool address\r\n   * @param expirationTime the operation expiration time\r\n   */\r\n  function setJarvisPool(\r\n    address syntheticToken,\r\n    address collateralToken,\r\n    address liquidityPool,\r\n    uint256 expirationTime\r\n  ) public onlyOwner {\r\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\r\n  }\r\n\r\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\r\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\r\n  }\r\n\r\n  /**\r\n   * @dev Sets an address for an id replacing the address saved in the addresses map\r\n   * @param id The id\r\n   * @param newAddress The address to set\r\n   */\r\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\r\n    _addresses[id] = newAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an address by id\r\n   * @return The address\r\n   */\r\n  function getAddress(string calldata id) public view returns (address) {\r\n    return _addresses[id];\r\n  }\r\n\r\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\r\n    return curveSwapPoolsConfig;\r\n  }\r\n\r\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\r\n    return jarvisPoolsConfig;\r\n  }\r\n\r\n  function setBalancerPoolForTokens(\r\n    address inputToken,\r\n    address outputToken,\r\n    address pool\r\n  ) external onlyOwner {\r\n    balancerPoolForTokens[inputToken][outputToken] = pool;\r\n  }\r\n\r\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\r\n    return balancerPoolForTokens[inputToken][outputToken];\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/AuthoritiesRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { PoolRolesAuthority } from \"../ionic/PoolRolesAuthority.sol\";\r\nimport { SafeOwnableUpgradeable } from \"../ionic/SafeOwnableUpgradeable.sol\";\r\nimport { IonicComptroller } from \"../compound/ComptrollerInterface.sol\";\r\n\r\nimport { TransparentUpgradeableProxy } from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\r\n\r\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\r\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\r\n  PoolRolesAuthority public poolAuthLogic;\r\n  address public leveredPositionsFactory;\r\n  bool public noAuthRequired;\r\n\r\n  function initialize(address _leveredPositionsFactory) public initializer {\r\n    __SafeOwnable_init(msg.sender);\r\n    leveredPositionsFactory = _leveredPositionsFactory;\r\n    poolAuthLogic = new PoolRolesAuthority();\r\n  }\r\n\r\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\r\n    leveredPositionsFactory = _leveredPositionsFactory;\r\n    poolAuthLogic = new PoolRolesAuthority();\r\n    // for Neon the auth is not required\r\n    noAuthRequired = block.chainid == 245022934;\r\n  }\r\n\r\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\r\n    require(address(poolsAuthorities[pool]) == address(0), \"already created\");\r\n\r\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \"\");\r\n    auth = PoolRolesAuthority(address(proxy));\r\n    auth.initialize(address(this));\r\n    poolsAuthorities[pool] = auth;\r\n\r\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\r\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\r\n    // sets the registry owner as the auth owner\r\n    reconfigureAuthority(pool);\r\n  }\r\n\r\n  function reconfigureAuthority(address poolAddress) public {\r\n    IonicComptroller pool = IonicComptroller(poolAddress);\r\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\r\n\r\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\r\n      require(address(auth) != address(0), \"no such authority\");\r\n      require(msg.sender == owner() || msg.sender == poolAddress, \"not owner or pool\");\r\n\r\n      auth.configureRegistryCapabilities();\r\n      auth.configurePoolSupplierCapabilities(pool);\r\n      auth.configurePoolBorrowerCapabilities(pool);\r\n      // everyone can be a liquidator\r\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\r\n      auth.configureLeveredPositionCapabilities(pool);\r\n\r\n      if (auth.owner() != owner()) {\r\n        auth.setOwner(owner());\r\n      }\r\n    }\r\n  }\r\n\r\n  function canCall(\r\n    address pool,\r\n    address user,\r\n    address target,\r\n    bytes4 functionSig\r\n  ) external view returns (bool) {\r\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\r\n    if (address(authorityForPool) == address(0)) {\r\n      return noAuthRequired;\r\n    } else {\r\n      // allow only if an auth exists and it allows the action\r\n      return authorityForPool.canCall(user, target, functionSig);\r\n    }\r\n  }\r\n\r\n  function setUserRole(\r\n    address pool,\r\n    address user,\r\n    uint8 role,\r\n    bool enabled\r\n  ) external {\r\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\r\n\r\n    require(address(poolAuth) != address(0), \"auth does not exist\");\r\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \"not owner or factory\");\r\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \"only lev pos role\");\r\n\r\n    poolAuth.setUserRole(user, role, enabled);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/DiamondExtension.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @notice a base contract for logic extensions that use the diamond pattern storage\r\n * to map the functions when looking up the extension contract to delegate to.\r\n */\r\nabstract contract DiamondExtension {\r\n  /**\r\n   * @return a list of all the function selectors that this logic extension exposes\r\n   */\r\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\r\n}\r\n\r\n// When no function exists for function called\r\nerror FunctionNotFound(bytes4 _functionSelector);\r\n\r\n// When no extension exists for function called\r\nerror ExtensionNotFound(bytes4 _functionSelector);\r\n\r\n// When the function is already added\r\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\r\n\r\nabstract contract DiamondBase {\r\n  /**\r\n   * @dev register a logic extension\r\n   * @param extensionToAdd the extension whose functions are to be added\r\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\r\n   */\r\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\r\n\r\n  function _listExtensions() public view returns (address[] memory) {\r\n    return LibDiamond.listExtensions();\r\n  }\r\n\r\n  fallback() external {\r\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\r\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\r\n    // Execute external function from extension using delegatecall and return any value.\r\n    assembly {\r\n      // copy function selector and any arguments\r\n      calldatacopy(0, 0, calldatasize())\r\n      // execute function call using the extension\r\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\r\n      // get any return value\r\n      returndatacopy(0, 0, returndatasize())\r\n      // return any return value or error back to the caller\r\n      switch result\r\n      case 0 {\r\n        revert(0, returndatasize())\r\n      }\r\n      default {\r\n        return(0, returndatasize())\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @notice a library to use in a contract, whose logic is extended with diamond extension\r\n */\r\nlibrary LibDiamond {\r\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.extensions.diamond.storage\");\r\n\r\n  struct Function {\r\n    address extension;\r\n    bytes4 selector;\r\n  }\r\n\r\n  struct LogicStorage {\r\n    Function[] functions;\r\n    address[] extensions;\r\n  }\r\n\r\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\r\n    return getExtensionForSelector(msgSig, diamondStorage());\r\n  }\r\n\r\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\r\n    bytes32 position = DIAMOND_STORAGE_POSITION;\r\n    assembly {\r\n      ds.slot := position\r\n    }\r\n  }\r\n\r\n  function listExtensions() internal view returns (address[] memory) {\r\n    return diamondStorage().extensions;\r\n  }\r\n\r\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\r\n    if (address(extensionToReplace) != address(0)) {\r\n      removeExtension(extensionToReplace);\r\n    }\r\n    addExtension(extensionToAdd);\r\n  }\r\n\r\n  function removeExtension(DiamondExtension extension) internal {\r\n    LogicStorage storage ds = diamondStorage();\r\n    // remove all functions of the extension to replace\r\n    removeExtensionFunctions(extension);\r\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\r\n      if (ds.extensions[i] == address(extension)) {\r\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\r\n        ds.extensions.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  function addExtension(DiamondExtension extension) internal {\r\n    LogicStorage storage ds = diamondStorage();\r\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\r\n      require(ds.extensions[i] != address(extension), \"extension already added\");\r\n    }\r\n    addExtensionFunctions(extension);\r\n    ds.extensions.push(address(extension));\r\n  }\r\n\r\n  function removeExtensionFunctions(DiamondExtension extension) internal {\r\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\r\n    LogicStorage storage ds = diamondStorage();\r\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\r\n      bytes4 selectorToRemove = fnsToRemove[i];\r\n      // must never fail\r\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\r\n      // swap with the last element in the selectorAtIndex array and remove the last element\r\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\r\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\r\n      ds.functions.pop();\r\n    }\r\n  }\r\n\r\n  function addExtensionFunctions(DiamondExtension extension) internal {\r\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\r\n    LogicStorage storage ds = diamondStorage();\r\n    uint16 functionsCount = uint16(ds.functions.length);\r\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\r\n      bytes4 selector = fnsToAdd[functionsIndex];\r\n      address oldImplementation = getExtensionForSelector(selector, ds);\r\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\r\n      ds.functions.push(Function(address(extension), selector));\r\n      functionsCount++;\r\n    }\r\n  }\r\n\r\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\r\n    uint256 fnsLen = ds.functions.length;\r\n    for (uint256 i = 0; i < fnsLen; i++) {\r\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\r\n    }\r\n\r\n    return address(0);\r\n  }\r\n\r\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\r\n    uint16 fnsLen = uint16(ds.functions.length);\r\n    for (uint16 i = 0; i < fnsLen; i++) {\r\n      if (ds.functions[i].selector == selector) return i;\r\n    }\r\n\r\n    return type(uint16).max;\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/IFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\ninterface IFlashLoanReceiver {\r\n  function receiveFlashLoan(\r\n    address borrowedAsset,\r\n    uint256 borrowedAmount,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
    },
    "contracts/ionic/levered/ILeveredPositionFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\r\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\r\nimport { LeveredPosition } from \"./LeveredPosition.sol\";\r\nimport { IFeeDistributor } from \"../../compound/IFeeDistributor.sol\";\r\nimport { ILiquidatorsRegistry } from \"../../liquidators/registry/ILiquidatorsRegistry.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface ILeveredPositionFactoryStorage {\r\n  function feeDistributor() external view returns (IFeeDistributor);\r\n\r\n  function liquidatorsRegistry() external view returns (ILiquidatorsRegistry);\r\n\r\n  function blocksPerYear() external view returns (uint256);\r\n\r\n  function owner() external view returns (address);\r\n}\r\n\r\ninterface ILeveredPositionFactoryBase {\r\n  function _setLiquidatorsRegistry(ILiquidatorsRegistry _liquidatorsRegistry) external;\r\n\r\n  function _setPairWhitelisted(ICErc20 _collateralMarket, ICErc20 _stableMarket, bool _whitelisted) external;\r\n}\r\n\r\ninterface ILeveredPositionFactoryFirstExtension {\r\n  function getRedemptionStrategies(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external view returns (IRedemptionStrategy[] memory strategies, bytes[] memory strategiesData);\r\n\r\n  function getMinBorrowNative() external view returns (uint256);\r\n\r\n  function removeClosedPosition(address closedPosition) external returns (bool removed);\r\n\r\n  function closeAndRemoveUserPosition(LeveredPosition position) external returns (bool);\r\n\r\n  function getPositionsByAccount(address account) external view returns (address[] memory, bool[] memory);\r\n\r\n  function getAccountsWithOpenPositions() external view returns (address[] memory);\r\n\r\n  function getWhitelistedCollateralMarkets() external view returns (address[] memory);\r\n\r\n  function getBorrowableMarketsByCollateral(ICErc20 _collateralMarket) external view returns (address[] memory);\r\n\r\n  function getPositionsExtension(bytes4 msgSig) external view returns (address);\r\n\r\n  function _setPositionsExtension(bytes4 msgSig, address extension) external;\r\n}\r\n\r\ninterface ILeveredPositionFactorySecondExtension {\r\n  function createPosition(ICErc20 _collateralMarket, ICErc20 _stableMarket) external returns (LeveredPosition);\r\n\r\n  function createAndFundPosition(\r\n    ICErc20 _collateralMarket,\r\n    ICErc20 _stableMarket,\r\n    IERC20Upgradeable _fundingAsset,\r\n    uint256 _fundingAmount\r\n  ) external returns (LeveredPosition);\r\n\r\n  function createAndFundPositionAtRatio(\r\n    ICErc20 _collateralMarket,\r\n    ICErc20 _stableMarket,\r\n    IERC20Upgradeable _fundingAsset,\r\n    uint256 _fundingAmount,\r\n    uint256 _leverageRatio\r\n  ) external returns (LeveredPosition);\r\n}\r\n\r\ninterface ILeveredPositionFactoryExtension is\r\n  ILeveredPositionFactoryFirstExtension,\r\n  ILeveredPositionFactorySecondExtension\r\n{}\r\n\r\ninterface ILeveredPositionFactory is\r\n  ILeveredPositionFactoryStorage,\r\n  ILeveredPositionFactoryBase,\r\n  ILeveredPositionFactoryExtension\r\n{}\r\n"
    },
    "contracts/ionic/levered/LeveredPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\nimport { IonicComptroller } from \"../../compound/ComptrollerInterface.sol\";\r\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\r\nimport { BasePriceOracle } from \"../../oracles/BasePriceOracle.sol\";\r\nimport { IFundsConversionStrategy } from \"../../liquidators/IFundsConversionStrategy.sol\";\r\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\r\nimport { ILeveredPositionFactory } from \"./ILeveredPositionFactory.sol\";\r\nimport { IFlashLoanReceiver } from \"../IFlashLoanReceiver.sol\";\r\nimport { IonicFlywheel } from \"../../ionic/strategies/flywheel/IonicFlywheel.sol\";\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\nimport { LeveredPositionStorage } from \"./LeveredPositionStorage.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IFlywheelLensRouter_LP {\r\n  function claimAllRewardTokens(address user) external returns (address[] memory, uint256[] memory);\r\n}\r\n\r\ncontract LeveredPosition is LeveredPositionStorage, IFlashLoanReceiver {\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n  error OnlyWhenClosed();\r\n  error NotPositionOwner();\r\n  error OnlyFactoryOwner();\r\n  error AssetNotRescuable();\r\n  error RepayFlashLoanFailed(address asset, uint256 currentBalance, uint256 repayAmount);\r\n\r\n  error ConvertFundsFailed();\r\n  error ExitFailed(uint256 errorCode);\r\n  error RedeemFailed(uint256 errorCode);\r\n  error SupplyCollateralFailed(uint256 errorCode);\r\n  error BorrowStableFailed(uint256 errorCode);\r\n  error RepayBorrowFailed(uint256 errorCode);\r\n  error RedeemCollateralFailed(uint256 errorCode);\r\n  error ExtNotFound(bytes4 _functionSelector);\r\n\r\n  constructor(\r\n    address _positionOwner,\r\n    ICErc20 _collateralMarket,\r\n    ICErc20 _stableMarket\r\n  ) LeveredPositionStorage(_positionOwner) {\r\n    IonicComptroller collateralPool = _collateralMarket.comptroller();\r\n    IonicComptroller stablePool = _stableMarket.comptroller();\r\n    require(collateralPool == stablePool, \"markets pools differ\");\r\n    pool = collateralPool;\r\n\r\n    collateralMarket = _collateralMarket;\r\n    collateralAsset = IERC20Upgradeable(_collateralMarket.underlying());\r\n    stableMarket = _stableMarket;\r\n    stableAsset = IERC20Upgradeable(_stableMarket.underlying());\r\n\r\n    factory = ILeveredPositionFactory(msg.sender);\r\n  }\r\n\r\n  /*----------------------------------------------------------------\r\n                          Mutable Functions\r\n  ----------------------------------------------------------------*/\r\n\r\n  function fundPosition(IERC20Upgradeable fundingAsset, uint256 amount) public {\r\n    fundingAsset.safeTransferFrom(msg.sender, address(this), amount);\r\n    _supplyCollateral(fundingAsset);\r\n\r\n    if (!pool.checkMembership(address(this), collateralMarket)) {\r\n      address[] memory cTokens = new address[](1);\r\n      cTokens[0] = address(collateralMarket);\r\n      pool.enterMarkets(cTokens);\r\n    }\r\n  }\r\n\r\n  function closePosition() public returns (uint256) {\r\n    return closePosition(msg.sender);\r\n  }\r\n\r\n  function closePosition(address withdrawTo) public returns (uint256 withdrawAmount) {\r\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\r\n\r\n    _leverDown(1e18);\r\n\r\n    // calling accrue and exit allows to redeem the full underlying balance\r\n    collateralMarket.accrueInterest();\r\n    uint256 errorCode = pool.exitMarket(address(collateralMarket));\r\n    if (errorCode != 0) revert ExitFailed(errorCode);\r\n\r\n    // redeem all cTokens should leave no dust\r\n    errorCode = collateralMarket.redeem(collateralMarket.balanceOf(address(this)));\r\n    if (errorCode != 0) revert RedeemFailed(errorCode);\r\n\r\n    if (stableAsset.balanceOf(address(this)) > 0) {\r\n      // convert all overborrowed leftovers/profits to the collateral asset\r\n      convertAllTo(stableAsset, collateralAsset);\r\n    }\r\n\r\n    // withdraw the redeemed collateral\r\n    withdrawAmount = collateralAsset.balanceOf(address(this));\r\n    collateralAsset.safeTransfer(withdrawTo, withdrawAmount);\r\n  }\r\n\r\n  function adjustLeverageRatio(uint256 targetRatioMantissa) public returns (uint256) {\r\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\r\n\r\n    // anything under 1x means removing the leverage\r\n    if (targetRatioMantissa <= 1e18) _leverDown(1e18);\r\n\r\n    if (getCurrentLeverageRatio() < targetRatioMantissa) _leverUp(targetRatioMantissa);\r\n    else _leverDown(targetRatioMantissa);\r\n\r\n    // return the de facto achieved ratio\r\n    return getCurrentLeverageRatio();\r\n  }\r\n\r\n  function receiveFlashLoan(address assetAddress, uint256 borrowedAmount, bytes calldata data) external override {\r\n    if (msg.sender == address(collateralMarket)) {\r\n      // increasing the leverage ratio\r\n      uint256 stableBorrowAmount = abi.decode(data, (uint256));\r\n      _leverUpPostFL(stableBorrowAmount);\r\n      uint256 positionCollateralBalance = collateralAsset.balanceOf(address(this));\r\n      if (positionCollateralBalance < borrowedAmount)\r\n        revert RepayFlashLoanFailed(address(collateralAsset), positionCollateralBalance, borrowedAmount);\r\n    } else if (msg.sender == address(stableMarket)) {\r\n      // decreasing the leverage ratio\r\n      uint256 amountToRedeem = abi.decode(data, (uint256));\r\n      _leverDownPostFL(borrowedAmount, amountToRedeem);\r\n      uint256 positionStableBalance = stableAsset.balanceOf(address(this));\r\n      if (positionStableBalance < borrowedAmount)\r\n        revert RepayFlashLoanFailed(address(stableAsset), positionStableBalance, borrowedAmount);\r\n    } else {\r\n      revert(\"!fl not from either markets\");\r\n    }\r\n\r\n    // repay FL\r\n    IERC20Upgradeable(assetAddress).approve(msg.sender, borrowedAmount);\r\n  }\r\n\r\n  function withdrawStableLeftovers(address withdrawTo) public returns (uint256) {\r\n    if (msg.sender != positionOwner) revert NotPositionOwner();\r\n    if (!isPositionClosed()) revert OnlyWhenClosed();\r\n\r\n    uint256 stableLeftovers = stableAsset.balanceOf(address(this));\r\n    stableAsset.safeTransfer(withdrawTo, stableLeftovers);\r\n    return stableLeftovers;\r\n  }\r\n\r\n  function claimRewards() public {\r\n    claimRewards(msg.sender);\r\n  }\r\n\r\n  function claimRewards(address withdrawTo) public {\r\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\r\n\r\n    address[] memory flywheels = pool.getRewardsDistributors();\r\n\r\n    for (uint256 i = 0; i < flywheels.length; i++) {\r\n      IonicFlywheel fw = IonicFlywheel(flywheels[i]);\r\n      fw.accrue(ERC20(address(collateralMarket)), address(this));\r\n      fw.accrue(ERC20(address(stableMarket)), address(this));\r\n      fw.claimRewards(address(this));\r\n      ERC20 rewardToken = fw.rewardToken();\r\n      uint256 rewardsAccrued = rewardToken.balanceOf(address(this));\r\n      if (rewardsAccrued > 0) {\r\n        rewardToken.transfer(withdrawTo, rewardsAccrued);\r\n      }\r\n    }\r\n  }\r\n\r\n  function rescueTokens(IERC20Upgradeable asset) external {\r\n    if (msg.sender != factory.owner()) revert OnlyFactoryOwner();\r\n    if (asset == stableAsset || asset == collateralAsset) revert AssetNotRescuable();\r\n\r\n    asset.transfer(positionOwner, asset.balanceOf(address(this)));\r\n  }\r\n\r\n  function claimRewardsFromRouter(address _flr) external returns (address[] memory, uint256[] memory) {\r\n    IFlywheelLensRouter_LP flr = IFlywheelLensRouter_LP(_flr);\r\n    (address[] memory rewardTokens, uint256[] memory rewards) = flr.claimAllRewardTokens(address(this));\r\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n      IERC20Upgradeable(rewardTokens[i]).safeTransfer(positionOwner, rewards[i]);\r\n    }\r\n    return (rewardTokens, rewards);\r\n  }\r\n\r\n  fallback() external {\r\n    address extension = factory.getPositionsExtension(msg.sig);\r\n    if (extension == address(0)) revert ExtNotFound(msg.sig);\r\n    // Execute external function from extension using delegatecall and return any value.\r\n    assembly {\r\n      // copy function selector and any arguments\r\n      calldatacopy(0, 0, calldatasize())\r\n      // execute function call using the extension\r\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\r\n      // get any return value\r\n      returndatacopy(0, 0, returndatasize())\r\n      // return any return value or error back to the caller\r\n      switch result\r\n      case 0 {\r\n        revert(0, returndatasize())\r\n      }\r\n      default {\r\n        return(0, returndatasize())\r\n      }\r\n    }\r\n  }\r\n\r\n  /*----------------------------------------------------------------\r\n                          View Functions\r\n  ----------------------------------------------------------------*/\r\n\r\n  /// @notice this is a lens fn, it is not intended to be used on-chain\r\n  function getAccruedRewards()\r\n    external\r\n    returns (\r\n      /*view*/\r\n      ERC20[] memory rewardTokens,\r\n      uint256[] memory amounts\r\n    )\r\n  {\r\n    address[] memory flywheels = pool.getRewardsDistributors();\r\n\r\n    rewardTokens = new ERC20[](flywheels.length);\r\n    amounts = new uint256[](flywheels.length);\r\n\r\n    for (uint256 i = 0; i < flywheels.length; i++) {\r\n      IonicFlywheel fw = IonicFlywheel(flywheels[i]);\r\n      fw.accrue(ERC20(address(collateralMarket)), address(this));\r\n      fw.accrue(ERC20(address(stableMarket)), address(this));\r\n      rewardTokens[i] = fw.rewardToken();\r\n      amounts[i] = fw.rewardsAccrued(address(this));\r\n    }\r\n  }\r\n\r\n  function getCurrentLeverageRatio() public view returns (uint256) {\r\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\r\n    if (positionSupplyAmount == 0) return 0;\r\n\r\n    BasePriceOracle oracle = pool.oracle();\r\n\r\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\r\n    uint256 positionValue = (collateralAssetPrice * positionSupplyAmount) / 1e18;\r\n\r\n    uint256 debtValue = 0;\r\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\r\n    if (debtAmount > 0) {\r\n      uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\r\n      debtValue = (borrowedAssetPrice * debtAmount) / 1e18;\r\n    }\r\n\r\n    // TODO check if positionValue > debtValue\r\n    // s / ( s - b )\r\n    return (positionValue * 1e18) / (positionValue - debtValue);\r\n  }\r\n\r\n  function getMinLeverageRatio() public view returns (uint256) {\r\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\r\n    if (positionSupplyAmount == 0) return 0;\r\n\r\n    BasePriceOracle oracle = pool.oracle();\r\n    uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\r\n    uint256 minStableBorrowAmount = (factory.getMinBorrowNative() * 1e18) / borrowedAssetPrice;\r\n    return _getLeverageRatioAfterBorrow(minStableBorrowAmount, positionSupplyAmount, 0);\r\n  }\r\n\r\n  function getMaxLeverageRatio() public view returns (uint256) {\r\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\r\n    if (positionSupplyAmount == 0) return 0;\r\n\r\n    uint256 maxBorrow = pool.getMaxRedeemOrBorrow(address(this), stableMarket, true);\r\n    uint256 positionBorrowAmount = stableMarket.borrowBalanceCurrent(address(this));\r\n    return _getLeverageRatioAfterBorrow(maxBorrow, positionSupplyAmount, positionBorrowAmount);\r\n  }\r\n\r\n  function _getLeverageRatioAfterBorrow(\r\n    uint256 newBorrowsAmount,\r\n    uint256 positionSupplyAmount,\r\n    uint256 positionBorrowAmount\r\n  ) internal view returns (uint256 r) {\r\n    BasePriceOracle oracle = pool.oracle();\r\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\r\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\r\n\r\n    uint256 currentBorrowsValue = (positionBorrowAmount * stableAssetPrice) / 1e18;\r\n    uint256 newBorrowsValue = (newBorrowsAmount * stableAssetPrice) / 1e18;\r\n    uint256 positionValue = (positionSupplyAmount * collateralAssetPrice) / 1e18;\r\n\r\n    // accounting for swaps slippage\r\n    uint256 assumedSlippage = factory.liquidatorsRegistry().getSlippage(stableAsset, collateralAsset);\r\n    {\r\n      // add 10 bps just to not go under the min borrow value\r\n      assumedSlippage += 10;\r\n    }\r\n    uint256 topUpCollateralValue = (newBorrowsValue * 10000) / (10000 + assumedSlippage);\r\n\r\n    int256 s = int256(positionValue);\r\n    int256 b = int256(currentBorrowsValue);\r\n    int256 x = int256(topUpCollateralValue);\r\n\r\n    r = uint256(((s + x) * 1e18) / (s + x - b - int256(newBorrowsValue)));\r\n  }\r\n\r\n  function isPositionClosed() public view returns (bool) {\r\n    return collateralMarket.balanceOfUnderlying(address(this)) == 0;\r\n  }\r\n\r\n  function getEquityAmount() external view returns (uint256 equityAmount) {\r\n    BasePriceOracle oracle = pool.oracle();\r\n    uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\r\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\r\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\r\n    uint256 positionValue = (collateralAssetPrice * positionSupplyAmount) / 1e18;\r\n\r\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\r\n    uint256 debtValue = (borrowedAssetPrice * debtAmount) / 1e18;\r\n\r\n    uint256 equityValue = positionValue - debtValue;\r\n    equityAmount = (equityValue * 1e18) / collateralAssetPrice;\r\n  }\r\n\r\n  function getSupplyAmountDelta(uint256 targetRatio) public view returns (uint256, uint256) {\r\n    BasePriceOracle oracle = pool.oracle();\r\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\r\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\r\n\r\n    uint256 currentRatio = getCurrentLeverageRatio();\r\n    bool up = targetRatio > currentRatio;\r\n    return _getSupplyAmountDelta(up, targetRatio, collateralAssetPrice, stableAssetPrice);\r\n  }\r\n\r\n  function _getSupplyAmountDelta(\r\n    bool up,\r\n    uint256 targetRatio,\r\n    uint256 collateralAssetPrice,\r\n    uint256 borrowedAssetPrice\r\n  ) internal view returns (uint256 supplyDelta, uint256 borrowsDelta) {\r\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\r\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\r\n    uint256 assumedSlippage;\r\n    if (up) assumedSlippage = factory.liquidatorsRegistry().getSlippage(stableAsset, collateralAsset);\r\n    else assumedSlippage = factory.liquidatorsRegistry().getSlippage(collateralAsset, stableAsset);\r\n    uint256 slippageFactor = (1e18 * (10000 + assumedSlippage)) / 10000;\r\n\r\n    uint256 supplyValueDeltaAbs;\r\n    {\r\n      // s = supply value before\r\n      // b = borrow value before\r\n      // r = target ratio after\r\n      // c = borrow value coefficient to account for the slippage\r\n      int256 s = int256((collateralAssetPrice * positionSupplyAmount) / 1e18);\r\n      int256 b = int256((borrowedAssetPrice * debtAmount) / 1e18);\r\n      int256 r = int256(targetRatio);\r\n      int256 r1 = r - 1e18;\r\n      int256 c = int256(slippageFactor);\r\n\r\n      // some math magic here\r\n      // https://www.wolframalpha.com/input?i2d=true&i=r%3D%5C%2840%29Divide%5B%5C%2840%29s%2Bx%5C%2841%29%2C%5C%2840%29s%2Bx-b-c*x%5C%2841%29%5D+%5C%2841%29+solve+for+x\r\n\r\n      // x = supplyValueDelta\r\n      int256 supplyValueDelta = (((r1 * s) - (b * r)) * 1e18) / ((c * r) - (1e18 * r1));\r\n      supplyValueDeltaAbs = uint256((supplyValueDelta < 0) ? -supplyValueDelta : supplyValueDelta);\r\n    }\r\n\r\n    supplyDelta = (supplyValueDeltaAbs * 1e18) / collateralAssetPrice;\r\n    borrowsDelta = (supplyValueDeltaAbs * 1e18) / borrowedAssetPrice;\r\n\r\n    if (up) {\r\n      // stables to borrow = c * x\r\n      borrowsDelta = (borrowsDelta * slippageFactor) / 1e18;\r\n    } else {\r\n      // amount to redeem = c * x\r\n      supplyDelta = (supplyDelta * slippageFactor) / 1e18;\r\n    }\r\n  }\r\n\r\n  /*----------------------------------------------------------------\r\n                            Internal Functions\r\n  ----------------------------------------------------------------*/\r\n\r\n  function _supplyCollateral(IERC20Upgradeable fundingAsset) internal returns (uint256 amountToSupply) {\r\n    // in case the funding is with a different asset\r\n    if (address(collateralAsset) != address(fundingAsset)) {\r\n      // swap for collateral asset\r\n      convertAllTo(fundingAsset, collateralAsset);\r\n    }\r\n\r\n    // supply the collateral\r\n    amountToSupply = collateralAsset.balanceOf(address(this));\r\n    collateralAsset.approve(address(collateralMarket), amountToSupply);\r\n    uint256 errorCode = collateralMarket.mint(amountToSupply);\r\n    if (errorCode != 0) revert SupplyCollateralFailed(errorCode);\r\n  }\r\n\r\n  // @dev flash loan the needed amount, then borrow stables and swap them for the amount needed to repay the FL\r\n  function _leverUp(uint256 targetRatio) internal {\r\n    BasePriceOracle oracle = pool.oracle();\r\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\r\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\r\n\r\n    (uint256 flashLoanCollateralAmount, uint256 stableToBorrow) = _getSupplyAmountDelta(\r\n      true,\r\n      targetRatio,\r\n      collateralAssetPrice,\r\n      stableAssetPrice\r\n    );\r\n\r\n    collateralMarket.flash(flashLoanCollateralAmount, abi.encode(stableToBorrow));\r\n    // the execution will first receive a callback to receiveFlashLoan()\r\n    // then it continues from here\r\n\r\n    // all stables are swapped for collateral to repay the FL\r\n    uint256 collateralLeftovers = collateralAsset.balanceOf(address(this));\r\n    if (collateralLeftovers > 0) {\r\n      collateralAsset.approve(address(collateralMarket), collateralLeftovers);\r\n      collateralMarket.mint(collateralLeftovers);\r\n    }\r\n  }\r\n\r\n  // @dev supply the flash loaned collateral and then borrow stables with it\r\n  function _leverUpPostFL(uint256 stableToBorrow) internal {\r\n    // supply the flash loaned collateral\r\n    _supplyCollateral(collateralAsset);\r\n\r\n    // borrow stables that will be swapped to repay the FL\r\n    uint256 errorCode = stableMarket.borrow(stableToBorrow);\r\n    if (errorCode != 0) revert BorrowStableFailed(errorCode);\r\n\r\n    // swap for the FL asset\r\n    convertAllTo(stableAsset, collateralAsset);\r\n  }\r\n\r\n  // @dev redeems the supplied collateral by first repaying the debt with which it was levered\r\n  function _leverDown(uint256 targetRatio) internal {\r\n    uint256 amountToRedeem;\r\n    uint256 borrowsToRepay;\r\n\r\n    BasePriceOracle oracle = pool.oracle();\r\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\r\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\r\n\r\n    if (targetRatio <= 1e18) {\r\n      // if max levering down, then derive the amount to redeem from the debt to be repaid\r\n      borrowsToRepay = stableMarket.borrowBalanceCurrent(address(this));\r\n      uint256 borrowsToRepayValueScaled = borrowsToRepay * stableAssetPrice;\r\n      // accounting for swaps slippage\r\n      uint256 assumedSlippage = factory.liquidatorsRegistry().getSlippage(collateralAsset, stableAsset);\r\n      uint256 amountToRedeemValueScaled = (borrowsToRepayValueScaled * (10000 + assumedSlippage)) / 10000;\r\n      amountToRedeem = amountToRedeemValueScaled / collateralAssetPrice;\r\n      // round up when dividing in order to redeem enough (otherwise calcs could be exploited)\r\n      if (amountToRedeemValueScaled % collateralAssetPrice > 0) amountToRedeem += 1;\r\n    } else {\r\n      // else derive the debt to be repaid from the amount to redeem\r\n      (amountToRedeem, borrowsToRepay) = _getSupplyAmountDelta(\r\n        false,\r\n        targetRatio,\r\n        collateralAssetPrice,\r\n        stableAssetPrice\r\n      );\r\n      // the slippage is already accounted for in _getSupplyAmountDelta\r\n    }\r\n\r\n    if (borrowsToRepay > 0) {\r\n      ICErc20(address(stableMarket)).flash(borrowsToRepay, abi.encode(amountToRedeem));\r\n      // the execution will first receive a callback to receiveFlashLoan()\r\n      // then it continues from here\r\n    }\r\n\r\n    // all the redeemed collateral is swapped for stables to repay the FL\r\n    uint256 stableLeftovers = stableAsset.balanceOf(address(this));\r\n    if (stableLeftovers > 0) {\r\n      uint256 borrowBalance = stableMarket.borrowBalanceCurrent(address(this));\r\n      if (borrowBalance > 0) {\r\n        // whatever is smaller\r\n        uint256 amountToRepay = borrowBalance > stableLeftovers ? stableLeftovers : borrowBalance;\r\n        stableAsset.approve(address(stableMarket), amountToRepay);\r\n        stableMarket.repayBorrow(amountToRepay);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _leverDownPostFL(uint256 _flashLoanedCollateral, uint256 _amountToRedeem) internal {\r\n    // repay the borrows\r\n    uint256 borrowBalance = stableMarket.borrowBalanceCurrent(address(this));\r\n    uint256 repayAmount = _flashLoanedCollateral < borrowBalance ? _flashLoanedCollateral : borrowBalance;\r\n    stableAsset.approve(address(stableMarket), repayAmount);\r\n    uint256 errorCode = stableMarket.repayBorrow(repayAmount);\r\n    if (errorCode != 0) revert RepayBorrowFailed(errorCode);\r\n\r\n    // redeem the corresponding amount needed to repay the FL\r\n    errorCode = collateralMarket.redeemUnderlying(_amountToRedeem);\r\n    if (errorCode != 0) revert RedeemCollateralFailed(errorCode);\r\n\r\n    // swap for the FL asset\r\n    convertAllTo(collateralAsset, stableAsset);\r\n  }\r\n\r\n  function convertAllTo(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) private returns (uint256 outputAmount) {\r\n    uint256 inputAmount = inputToken.balanceOf(address(this));\r\n    (IRedemptionStrategy[] memory redemptionStrategies, bytes[] memory strategiesData) = factory\r\n      .getRedemptionStrategies(inputToken, outputToken);\r\n\r\n    if (redemptionStrategies.length == 0) revert ConvertFundsFailed();\r\n\r\n    for (uint256 i = 0; i < redemptionStrategies.length; i++) {\r\n      IRedemptionStrategy redemptionStrategy = redemptionStrategies[i];\r\n      bytes memory strategyData = strategiesData[i];\r\n      (outputToken, outputAmount) = convertCustomFunds(inputToken, inputAmount, redemptionStrategy, strategyData);\r\n      inputAmount = outputAmount;\r\n      inputToken = outputToken;\r\n    }\r\n  }\r\n\r\n  function convertCustomFunds(\r\n    IERC20Upgradeable inputToken,\r\n    uint256 inputAmount,\r\n    IRedemptionStrategy strategy,\r\n    bytes memory strategyData\r\n  ) private returns (IERC20Upgradeable, uint256) {\r\n    bytes memory returndata = _functionDelegateCall(\r\n      address(strategy),\r\n      abi.encodeWithSelector(strategy.redeem.selector, inputToken, inputAmount, strategyData)\r\n    );\r\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\r\n  }\r\n\r\n  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\r\n    require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return _verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\r\n  }\r\n\r\n  function _verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      if (returndata.length > 0) {\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/levered/LeveredPositionFactoryFirstExtension.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\nimport \"../../ionic/DiamondExtension.sol\";\r\nimport { LeveredPositionFactoryStorage } from \"./LeveredPositionFactoryStorage.sol\";\r\nimport { ILeveredPositionFactoryFirstExtension } from \"./ILeveredPositionFactory.sol\";\r\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\r\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\r\nimport { LeveredPosition } from \"./LeveredPosition.sol\";\r\nimport { IComptroller, IPriceOracle } from \"../../external/compound/IComptroller.sol\";\r\nimport { ILiquidatorsRegistry } from \"../../liquidators/registry/ILiquidatorsRegistry.sol\";\r\nimport { AuthoritiesRegistry } from \"../AuthoritiesRegistry.sol\";\r\nimport { PoolRolesAuthority } from \"../PoolRolesAuthority.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ncontract LeveredPositionFactoryFirstExtension is\r\n  LeveredPositionFactoryStorage,\r\n  DiamondExtension,\r\n  ILeveredPositionFactoryFirstExtension\r\n{\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  error PairNotWhitelisted();\r\n  error NoSuchPosition();\r\n  error PositionNotClosed();\r\n\r\n  function _getExtensionFunctions() external pure override returns (bytes4[] memory) {\r\n    uint8 fnsCount = 10;\r\n    bytes4[] memory functionSelectors = new bytes4[](fnsCount);\r\n    functionSelectors[--fnsCount] = this.removeClosedPosition.selector;\r\n    functionSelectors[--fnsCount] = this.closeAndRemoveUserPosition.selector;\r\n    functionSelectors[--fnsCount] = this.getMinBorrowNative.selector;\r\n    functionSelectors[--fnsCount] = this.getRedemptionStrategies.selector;\r\n    functionSelectors[--fnsCount] = this.getBorrowableMarketsByCollateral.selector;\r\n    functionSelectors[--fnsCount] = this.getWhitelistedCollateralMarkets.selector;\r\n    functionSelectors[--fnsCount] = this.getAccountsWithOpenPositions.selector;\r\n    functionSelectors[--fnsCount] = this.getPositionsByAccount.selector;\r\n    functionSelectors[--fnsCount] = this.getPositionsExtension.selector;\r\n    functionSelectors[--fnsCount] = this._setPositionsExtension.selector;\r\n\r\n    require(fnsCount == 0, \"use the correct array length\");\r\n    return functionSelectors;\r\n  }\r\n\r\n  /*----------------------------------------------------------------\r\n                          Mutable Functions\r\n  ----------------------------------------------------------------*/\r\n\r\n  // @return true if removed, otherwise false\r\n  function removeClosedPosition(address closedPosition) external returns (bool) {\r\n    return _removeClosedPosition(closedPosition, msg.sender);\r\n  }\r\n\r\n  function closeAndRemoveUserPosition(LeveredPosition position) external onlyOwner returns (bool) {\r\n    address positionOwner = position.positionOwner();\r\n    position.closePosition(positionOwner);\r\n    return _removeClosedPosition(address(position), positionOwner);\r\n  }\r\n\r\n  function _removeClosedPosition(address closedPosition, address positionOwner) internal returns (bool removed) {\r\n    EnumerableSet.AddressSet storage userPositions = positionsByAccount[positionOwner];\r\n    if (!userPositions.contains(closedPosition)) revert NoSuchPosition();\r\n    if (!LeveredPosition(closedPosition).isPositionClosed()) revert PositionNotClosed();\r\n\r\n    removed = userPositions.remove(closedPosition);\r\n    if (userPositions.length() == 0) accountsWithOpenPositions.remove(positionOwner);\r\n  }\r\n\r\n  function _setPositionsExtension(bytes4 msgSig, address extension) external onlyOwner {\r\n    _positionsExtensions[msgSig] = extension;\r\n  }\r\n\r\n  /*----------------------------------------------------------------\r\n                            View Functions\r\n  ----------------------------------------------------------------*/\r\n\r\n  function getMinBorrowNative() external view returns (uint256) {\r\n    return feeDistributor.minBorrowEth();\r\n  }\r\n\r\n  function getRedemptionStrategies(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external view returns (IRedemptionStrategy[] memory strategies, bytes[] memory strategiesData) {\r\n    return liquidatorsRegistry.getRedemptionStrategies(inputToken, outputToken);\r\n  }\r\n\r\n  function getPositionsByAccount(\r\n    address account\r\n  ) external view returns (address[] memory positions, bool[] memory closed) {\r\n    positions = positionsByAccount[account].values();\r\n    closed = new bool[](positions.length);\r\n    for (uint256 i = 0; i < positions.length; i++) {\r\n      closed[i] = LeveredPosition(positions[i]).isPositionClosed();\r\n    }\r\n  }\r\n\r\n  function getAccountsWithOpenPositions() external view returns (address[] memory) {\r\n    return accountsWithOpenPositions.values();\r\n  }\r\n\r\n  function getWhitelistedCollateralMarkets() external view returns (address[] memory) {\r\n    return collateralMarkets.values();\r\n  }\r\n\r\n  function getBorrowableMarketsByCollateral(ICErc20 _collateralMarket) external view returns (address[] memory) {\r\n    return borrowableMarketsByCollateral[_collateralMarket].values();\r\n  }\r\n\r\n  function getPositionsExtension(bytes4 msgSig) external view returns (address) {\r\n    return _positionsExtensions[msgSig];\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/levered/LeveredPositionFactorySecondExtension.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\nimport \"../../ionic/DiamondExtension.sol\";\r\nimport { LeveredPositionFactoryStorage } from \"./LeveredPositionFactoryStorage.sol\";\r\nimport { ILeveredPositionFactorySecondExtension } from \"./ILeveredPositionFactory.sol\";\r\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\r\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\r\nimport { LeveredPosition } from \"./LeveredPosition.sol\";\r\nimport { IComptroller, IPriceOracle } from \"../../external/compound/IComptroller.sol\";\r\nimport { ILiquidatorsRegistry } from \"../../liquidators/registry/ILiquidatorsRegistry.sol\";\r\nimport { AuthoritiesRegistry } from \"../AuthoritiesRegistry.sol\";\r\nimport { PoolRolesAuthority } from \"../PoolRolesAuthority.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ncontract LeveredPositionFactorySecondExtension is\r\n  LeveredPositionFactoryStorage,\r\n  DiamondExtension,\r\n  ILeveredPositionFactorySecondExtension\r\n{\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  error PairNotWhitelisted();\r\n\r\n  function _getExtensionFunctions() external pure override returns (bytes4[] memory) {\r\n    uint8 fnsCount = 3;\r\n    bytes4[] memory functionSelectors = new bytes4[](fnsCount);\r\n    functionSelectors[--fnsCount] = this.createPosition.selector;\r\n    functionSelectors[--fnsCount] = this.createAndFundPosition.selector;\r\n    functionSelectors[--fnsCount] = this.createAndFundPositionAtRatio.selector;\r\n    require(fnsCount == 0, \"use the correct array length\");\r\n    return functionSelectors;\r\n  }\r\n\r\n  /*----------------------------------------------------------------\r\n                          Mutable Functions\r\n  ----------------------------------------------------------------*/\r\n\r\n  function createPosition(ICErc20 _collateralMarket, ICErc20 _stableMarket) public returns (LeveredPosition) {\r\n    if (!borrowableMarketsByCollateral[_collateralMarket].contains(address(_stableMarket))) revert PairNotWhitelisted();\r\n\r\n    LeveredPosition position = new LeveredPosition(msg.sender, _collateralMarket, _stableMarket);\r\n\r\n    accountsWithOpenPositions.add(msg.sender);\r\n    positionsByAccount[msg.sender].add(address(position));\r\n\r\n    AuthoritiesRegistry authoritiesRegistry = feeDistributor.authoritiesRegistry();\r\n    address poolAddress = address(_collateralMarket.comptroller());\r\n    PoolRolesAuthority poolAuth = authoritiesRegistry.poolsAuthorities(poolAddress);\r\n    if (address(poolAuth) != address(0)) {\r\n      authoritiesRegistry.setUserRole(poolAddress, address(position), poolAuth.LEVERED_POSITION_ROLE(), true);\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  function createAndFundPosition(\r\n    ICErc20 _collateralMarket,\r\n    ICErc20 _stableMarket,\r\n    IERC20Upgradeable _fundingAsset,\r\n    uint256 _fundingAmount\r\n  ) public returns (LeveredPosition) {\r\n    LeveredPosition position = createPosition(_collateralMarket, _stableMarket);\r\n    _fundingAsset.safeTransferFrom(msg.sender, address(this), _fundingAmount);\r\n    _fundingAsset.approve(address(position), _fundingAmount);\r\n    position.fundPosition(_fundingAsset, _fundingAmount);\r\n    return position;\r\n  }\r\n\r\n  function createAndFundPositionAtRatio(\r\n    ICErc20 _collateralMarket,\r\n    ICErc20 _stableMarket,\r\n    IERC20Upgradeable _fundingAsset,\r\n    uint256 _fundingAmount,\r\n    uint256 _leverageRatio\r\n  ) external returns (LeveredPosition) {\r\n    LeveredPosition position = createAndFundPosition(_collateralMarket, _stableMarket, _fundingAsset, _fundingAmount);\r\n    if (_leverageRatio > 1e18) {\r\n      position.adjustLeverageRatio(_leverageRatio);\r\n    }\r\n    return position;\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/levered/LeveredPositionFactoryStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\nimport { SafeOwnable } from \"../../ionic/SafeOwnable.sol\";\r\nimport { IFeeDistributor } from \"../../compound/IFeeDistributor.sol\";\r\nimport { ILiquidatorsRegistry } from \"../../liquidators/registry/ILiquidatorsRegistry.sol\";\r\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nabstract contract LeveredPositionFactoryStorage is SafeOwnable {\r\n  EnumerableSet.AddressSet internal accountsWithOpenPositions;\r\n  mapping(address => EnumerableSet.AddressSet) internal positionsByAccount;\r\n  EnumerableSet.AddressSet internal collateralMarkets;\r\n  mapping(ICErc20 => EnumerableSet.AddressSet) internal borrowableMarketsByCollateral;\r\n\r\n  mapping(IERC20Upgradeable => mapping(IERC20Upgradeable => uint256)) private __unused;\r\n\r\n  IFeeDistributor public feeDistributor;\r\n  ILiquidatorsRegistry public liquidatorsRegistry;\r\n  uint256 public blocksPerYear;\r\n\r\n  mapping(bytes4 => address) internal _positionsExtensions;\r\n}\r\n"
    },
    "contracts/ionic/levered/LeveredPositionsLens.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\nimport { ILeveredPositionFactory } from \"./ILeveredPositionFactory.sol\";\r\nimport { LeveredPosition } from \"./LeveredPosition.sol\";\r\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\r\nimport { IonicComptroller } from \"../../compound/ComptrollerInterface.sol\";\r\nimport { BasePriceOracle } from \"../../oracles/BasePriceOracle.sol\";\r\nimport { Initializable } from \"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\r\n\r\ncontract LeveredPositionsLens is Initializable {\r\n  ILeveredPositionFactory public factory;\r\n\r\n  function initialize(ILeveredPositionFactory _factory) external initializer {\r\n    factory = _factory;\r\n  }\r\n\r\n  function reinitialize(ILeveredPositionFactory _factory) external reinitializer(2) {\r\n    factory = _factory;\r\n  }\r\n\r\n  /// @notice this is a lens fn, it is not intended to be used on-chain\r\n  /// @dev returns lists of the market addresses, names and symbols of the underlying assets of those collateral markets that are whitelisted\r\n  function getCollateralMarkets()\r\n    external\r\n    view\r\n    returns (\r\n      address[] memory markets,\r\n      IonicComptroller[] memory poolOfMarket,\r\n      address[] memory underlyings,\r\n      uint256[] memory underlyingPrices,\r\n      string[] memory names,\r\n      string[] memory symbols,\r\n      uint8[] memory decimals,\r\n      uint256[] memory totalUnderlyingSupplied,\r\n      uint256[] memory ratesPerBlock\r\n    )\r\n  {\r\n    markets = factory.getWhitelistedCollateralMarkets();\r\n    poolOfMarket = new IonicComptroller[](markets.length);\r\n    underlyings = new address[](markets.length);\r\n    underlyingPrices = new uint256[](markets.length);\r\n    names = new string[](markets.length);\r\n    symbols = new string[](markets.length);\r\n    totalUnderlyingSupplied = new uint256[](markets.length);\r\n    decimals = new uint8[](markets.length);\r\n    ratesPerBlock = new uint256[](markets.length);\r\n    for (uint256 i = 0; i < markets.length; i++) {\r\n      ICErc20 market = ICErc20(markets[i]);\r\n      poolOfMarket[i] = market.comptroller();\r\n      underlyingPrices[i] = BasePriceOracle(poolOfMarket[i].oracle()).getUnderlyingPrice(market);\r\n      underlyings[i] = market.underlying();\r\n      ERC20Upgradeable underlying = ERC20Upgradeable(underlyings[i]);\r\n      names[i] = underlying.name();\r\n      symbols[i] = underlying.symbol();\r\n      decimals[i] = underlying.decimals();\r\n      totalUnderlyingSupplied[i] = market.getTotalUnderlyingSupplied();\r\n      ratesPerBlock[i] = market.supplyRatePerBlock();\r\n    }\r\n  }\r\n\r\n  /// @notice this is a lens fn, it is not intended to be used on-chain\r\n  /// @dev returns the Rate for the chosen borrowable at the specified leverage ratio and supply amount\r\n  function getBorrowRateAtRatio(\r\n    ICErc20 _collateralMarket,\r\n    ICErc20 _stableMarket,\r\n    uint256 _equityAmount,\r\n    uint256 _targetLeverageRatio\r\n  ) external view returns (uint256) {\r\n    IonicComptroller pool = IonicComptroller(_stableMarket.comptroller());\r\n    BasePriceOracle oracle = pool.oracle();\r\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(_stableMarket);\r\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(_collateralMarket);\r\n\r\n    uint256 borrowAmount = ((_targetLeverageRatio - 1e18) * _equityAmount * collateralAssetPrice) /\r\n      (stableAssetPrice * 1e18);\r\n    return _stableMarket.borrowRatePerBlockAfterBorrow(borrowAmount) * factory.blocksPerYear();\r\n  }\r\n\r\n  /// @notice this is a lens fn, it is not intended to be used on-chain\r\n  /// @dev returns lists of the market addresses, names, symbols and the current Rate for each Borrowable asset\r\n  function getBorrowableMarketsAndRates(\r\n    ICErc20 _collateralMarket\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      address[] memory markets,\r\n      address[] memory underlyings,\r\n      uint256[] memory underlyingsPrices,\r\n      string[] memory names,\r\n      string[] memory symbols,\r\n      uint256[] memory rates,\r\n      uint8[] memory decimals\r\n    )\r\n  {\r\n    markets = factory.getBorrowableMarketsByCollateral(_collateralMarket);\r\n    underlyings = new address[](markets.length);\r\n    names = new string[](markets.length);\r\n    symbols = new string[](markets.length);\r\n    rates = new uint256[](markets.length);\r\n    decimals = new uint8[](markets.length);\r\n    underlyingsPrices = new uint256[](markets.length);\r\n    for (uint256 i = 0; i < markets.length; i++) {\r\n      ICErc20 market = ICErc20(markets[i]);\r\n      address underlyingAddress = market.underlying();\r\n      underlyings[i] = underlyingAddress;\r\n      ERC20Upgradeable underlying = ERC20Upgradeable(underlyingAddress);\r\n      names[i] = underlying.name();\r\n      symbols[i] = underlying.symbol();\r\n      rates[i] = market.borrowRatePerBlock();\r\n      decimals[i] = underlying.decimals();\r\n      underlyingsPrices[i] = market.comptroller().oracle().getUnderlyingPrice(market);\r\n    }\r\n  }\r\n\r\n  /// @notice this is a lens fn, it is not intended to be used on-chain\r\n  function getNetAPY(\r\n    uint256 _supplyAPY,\r\n    uint256 _supplyAmount,\r\n    ICErc20 _collateralMarket,\r\n    ICErc20 _stableMarket,\r\n    uint256 _targetLeverageRatio\r\n  ) public view returns (int256 netAPY) {\r\n    if (_supplyAmount == 0 || _targetLeverageRatio <= 1e18) return 0;\r\n\r\n    IonicComptroller pool = IonicComptroller(_collateralMarket.comptroller());\r\n    BasePriceOracle oracle = pool.oracle();\r\n    // TODO the calcs can be implemented without using collateralAssetPrice\r\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(_collateralMarket);\r\n\r\n    // total collateral = base collateral + levered collateral\r\n    uint256 totalCollateral = (_supplyAmount * _targetLeverageRatio) / 1e18;\r\n    uint256 yieldFromTotalSupplyScaled = _supplyAPY * totalCollateral;\r\n    int256 yieldValueScaled = int256((yieldFromTotalSupplyScaled * collateralAssetPrice) / 1e18);\r\n\r\n    uint256 borrowedValueScaled = (totalCollateral - _supplyAmount) * collateralAssetPrice;\r\n    uint256 _borrowRate = _stableMarket.borrowRatePerBlock() * factory.blocksPerYear();\r\n    int256 borrowInterestValueScaled = int256((_borrowRate * borrowedValueScaled) / 1e18);\r\n\r\n    int256 netValueDiffScaled = yieldValueScaled - borrowInterestValueScaled;\r\n\r\n    netAPY = ((netValueDiffScaled / int256(collateralAssetPrice)) * 1e18) / int256(_supplyAmount);\r\n  }\r\n\r\n  function getPositionsInfo(\r\n    LeveredPosition[] calldata positions,\r\n    uint256[] calldata supplyApys\r\n  ) external view returns (PositionInfo[] memory infos) {\r\n    infos = new PositionInfo[](positions.length);\r\n    for (uint256 i = 0; i < positions.length; i++) {\r\n      infos[i] = getPositionInfo(positions[i], supplyApys[i]);\r\n    }\r\n  }\r\n\r\n  function getLeverageRatioAfterFunding(LeveredPosition pos, uint256 newFunding) public view returns (uint256) {\r\n    uint256 equityAmount = pos.getEquityAmount();\r\n    if (equityAmount == 0 && newFunding == 0) return 0;\r\n\r\n    uint256 suppliedCollateralCurrent = pos.collateralMarket().balanceOfUnderlying(address(pos));\r\n    return ((suppliedCollateralCurrent + newFunding) * 1e18) / (equityAmount + newFunding);\r\n  }\r\n\r\n  function getNetApyForPositionAfterFunding(\r\n    LeveredPosition pos,\r\n    uint256 supplyAPY,\r\n    uint256 newFunding\r\n  ) public view returns (int256) {\r\n    return\r\n      getNetAPY(\r\n        supplyAPY,\r\n        pos.getEquityAmount() + newFunding,\r\n        pos.collateralMarket(),\r\n        pos.stableMarket(),\r\n        getLeverageRatioAfterFunding(pos, newFunding)\r\n      );\r\n  }\r\n\r\n  function getNetApyForPosition(LeveredPosition pos, uint256 supplyAPY) public view returns (int256) {\r\n    return getNetApyForPositionAfterFunding(pos, supplyAPY, 0);\r\n  }\r\n\r\n  struct PositionInfo {\r\n    uint256 collateralAssetPrice;\r\n    uint256 borrowedAssetPrice;\r\n    uint256 positionSupplyAmount;\r\n    uint256 positionValue;\r\n    uint256 debtAmount;\r\n    uint256 debtValue;\r\n    uint256 equityAmount;\r\n    uint256 equityValue;\r\n    int256 currentApy;\r\n    uint256 debtRatio;\r\n    uint256 liquidationThreshold;\r\n    uint256 safetyBuffer;\r\n  }\r\n\r\n  function getPositionInfo(LeveredPosition pos, uint256 supplyApy) public view returns (PositionInfo memory info) {\r\n    ICErc20 collateralMarket = pos.collateralMarket();\r\n    IonicComptroller pool = pos.pool();\r\n    info.collateralAssetPrice = pool.oracle().getUnderlyingPrice(collateralMarket);\r\n    {\r\n      info.positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(pos));\r\n      info.positionValue = (info.collateralAssetPrice * info.positionSupplyAmount) / 1e18;\r\n      info.currentApy = getNetApyForPosition(pos, supplyApy);\r\n    }\r\n\r\n    {\r\n      ICErc20 stableMarket = pos.stableMarket();\r\n      info.borrowedAssetPrice = pool.oracle().getUnderlyingPrice(stableMarket);\r\n      info.debtAmount = stableMarket.borrowBalanceCurrent(address(pos));\r\n      info.debtValue = (info.borrowedAssetPrice * info.debtAmount) / 1e18;\r\n      info.equityValue = info.positionValue - info.debtValue;\r\n      info.debtRatio = info.positionValue == 0 ? 0 : (info.debtValue * 1e18) / info.positionValue;\r\n      info.equityAmount = (info.equityValue * 1e18) / info.collateralAssetPrice;\r\n    }\r\n\r\n    {\r\n      (, uint256 collateralFactor) = pool.markets(address(collateralMarket));\r\n      info.liquidationThreshold = collateralFactor;\r\n      info.safetyBuffer = collateralFactor - info.debtRatio;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/levered/LeveredPositionStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.10;\r\n\r\nimport { ILeveredPositionFactory } from \"./ILeveredPositionFactory.sol\";\r\nimport { IonicComptroller } from \"../../compound/ComptrollerInterface.sol\";\r\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ncontract LeveredPositionStorage {\r\n  address public immutable positionOwner;\r\n  ILeveredPositionFactory public factory;\r\n\r\n  ICErc20 public collateralMarket;\r\n  ICErc20 public stableMarket;\r\n  IonicComptroller public pool;\r\n\r\n  IERC20Upgradeable public collateralAsset;\r\n  IERC20Upgradeable public stableAsset;\r\n\r\n  constructor(address _positionOwner) {\r\n    positionOwner = _positionOwner;\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/PoolRolesAuthority.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { IonicComptroller, ComptrollerInterface } from \"../compound/ComptrollerInterface.sol\";\r\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \"../compound/CTokenInterfaces.sol\";\r\n\r\nimport { RolesAuthority, Authority } from \"solmate/auth/authorities/RolesAuthority.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\r\n\r\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\r\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\r\n    _disableInitializers();\r\n  }\r\n\r\n  function initialize(address _owner) public initializer {\r\n    owner = _owner;\r\n    authority = this;\r\n  }\r\n\r\n  // up to 256 roles\r\n  uint8 public constant REGISTRY_ROLE = 0;\r\n  uint8 public constant SUPPLIER_ROLE = 1;\r\n  uint8 public constant BORROWER_ROLE = 2;\r\n  uint8 public constant LIQUIDATOR_ROLE = 3;\r\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\r\n\r\n  function configureRegistryCapabilities() external requiresAuth {\r\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\r\n  }\r\n\r\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _setPublicPoolSupplierCapabilities(pool, true);\r\n  }\r\n\r\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _setPublicPoolSupplierCapabilities(pool, false);\r\n  }\r\n\r\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\r\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\r\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      bytes4[] memory selectors = getSupplierMarketSelectors();\r\n      for (uint256 j = 0; j < selectors.length; j++) {\r\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\r\n      }\r\n    }\r\n  }\r\n\r\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\r\n  }\r\n\r\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\r\n    uint8 fnsCount = 6;\r\n    selectors = new bytes4[](fnsCount);\r\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\r\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\r\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\r\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\r\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\r\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\r\n\r\n    require(fnsCount == 0, \"use the correct array length\");\r\n    return selectors;\r\n  }\r\n\r\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\r\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\r\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      bytes4[] memory selectors = getSupplierMarketSelectors();\r\n      for (uint256 j = 0; j < selectors.length; j++) {\r\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\r\n      }\r\n    }\r\n  }\r\n\r\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _setPublicPoolBorrowerCapabilities(pool, true);\r\n  }\r\n\r\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _setPublicPoolBorrowerCapabilities(pool, false);\r\n  }\r\n\r\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\r\n    }\r\n  }\r\n\r\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\r\n    // borrowers have the SUPPLIER_ROLE capabilities by default\r\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\r\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\r\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\r\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\r\n    }\r\n  }\r\n\r\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\r\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\r\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\r\n    }\r\n  }\r\n\r\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\r\n      // TODO this leaves redeeming open for everyone\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\r\n    }\r\n  }\r\n\r\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\r\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\r\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\r\n\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/SafeOwnable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\r\n\r\nabstract contract SafeOwnable is Ownable2Step {\r\n  function renounceOwnership() public override onlyOwner {\r\n    revert(\"renounce ownership not allowed\");\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/SafeOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\r\n\r\n/**\r\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\r\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\r\n * that will shift the other.\r\n */\r\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\r\n  /**\r\n   * @notice Pending owner of this contract\r\n   */\r\n  address public pendingOwner;\r\n\r\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\r\n    __Ownable_init();\r\n    _transferOwnership(owner_);\r\n  }\r\n\r\n  struct AddressSlot {\r\n    address value;\r\n  }\r\n\r\n  modifier onlyOwnerOrAdmin() {\r\n    bool isOwner = owner() == _msgSender();\r\n    if (!isOwner) {\r\n      address admin = _getProxyAdmin();\r\n      bool isAdmin = admin == _msgSender();\r\n      require(isAdmin, \"Ownable: caller is neither the owner nor the admin\");\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Emitted when pendingOwner is changed\r\n   */\r\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\r\n\r\n  /**\r\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\r\n   */\r\n  event NewOwner(address oldOwner, address newOwner);\r\n\r\n  /**\r\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\r\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\r\n   * @param newPendingOwner New pending owner.\r\n   */\r\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\r\n    // Save current value, if any, for inclusion in log\r\n    address oldPendingOwner = pendingOwner;\r\n\r\n    // Store pendingOwner with value newPendingOwner\r\n    pendingOwner = newPendingOwner;\r\n\r\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\r\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\r\n  }\r\n\r\n  /**\r\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\r\n   * @dev Owner function for pending owner to accept role and update owner\r\n   */\r\n  function _acceptOwner() public {\r\n    // Check caller is pendingOwner and pendingOwner ≠ address(0)\r\n    require(msg.sender == pendingOwner, \"not the pending owner\");\r\n\r\n    // Save current values for inclusion in log\r\n    address oldOwner = owner();\r\n    address oldPendingOwner = pendingOwner;\r\n\r\n    // Store owner with value pendingOwner\r\n    _transferOwnership(pendingOwner);\r\n\r\n    // Clear the pending value\r\n    pendingOwner = address(0);\r\n\r\n    emit NewOwner(oldOwner, pendingOwner);\r\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\r\n  }\r\n\r\n  function renounceOwnership() public override onlyOwner {\r\n    // do not remove this overriding fn\r\n    revert(\"not used anymore\");\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public override onlyOwner {\r\n    emit NewPendingOwner(pendingOwner, newOwner);\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  function _getProxyAdmin() internal view returns (address admin) {\r\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n    AddressSlot storage adminSlot;\r\n    assembly {\r\n      adminSlot.slot := _ADMIN_SLOT\r\n    }\r\n    admin = adminSlot.value;\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/FlywheelCore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\r\nimport {Auth, Authority} from \"solmate/auth/Auth.sol\";\r\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\r\nimport {SafeCastLib} from \"solmate/utils/SafeCastLib.sol\";\r\n\r\nimport {IFlywheelRewards} from \"./rewards/IFlywheelRewards.sol\";\r\nimport {IFlywheelBooster} from \"./IFlywheelBooster.sol\";\r\n\r\n/**\r\n @title Flywheel Core Incentives Manager\r\n @notice Flywheel is a general framework for managing token incentives.\r\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\r\n\r\n         The Core contract maintains three important pieces of state:\r\n         * the rewards index which determines how many rewards are owed per token per strategy. User indexes track how far behind the strategy they are to lazily calculate all catch-up rewards.\r\n         * the accrued (unclaimed) rewards per user.\r\n         * references to the booster and rewards module described below.\r\n\r\n         Core does not manage any tokens directly. The rewards module maintains token balances, and approves core to pull transfer them to users when they claim.\r\n\r\n         SECURITY NOTE: For maximum accuracy and to avoid exploits, rewards accrual should be notified atomically through the accrue hook. \r\n         Accrue should be called any time tokens are transferred, minted, or burned.\r\n */\r\ncontract FlywheelCore is Auth {\r\n    using SafeTransferLib for ERC20;\r\n    using SafeCastLib for uint256;\r\n\r\n    /// @notice The token to reward\r\n    ERC20 public immutable rewardToken;\r\n\r\n    /// @notice append-only list of strategies added\r\n    ERC20[] public allStrategies;\r\n\r\n    /// @notice the rewards contract for managing streams\r\n    IFlywheelRewards public flywheelRewards;\r\n\r\n    /// @notice optional booster module for calculating virtual balances on strategies\r\n    IFlywheelBooster public flywheelBooster;\r\n\r\n    constructor(\r\n        ERC20 _rewardToken,\r\n        IFlywheelRewards _flywheelRewards,\r\n        IFlywheelBooster _flywheelBooster,\r\n        address _owner,\r\n        Authority _authority\r\n    ) Auth(_owner, _authority) {\r\n        rewardToken = _rewardToken;\r\n        flywheelRewards = _flywheelRewards;\r\n        flywheelBooster = _flywheelBooster;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                        ACCRUE/CLAIM LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /** \r\n      @notice Emitted when a user's rewards accrue to a given strategy.\r\n      @param strategy the updated rewards strategy\r\n      @param user the user of the rewards\r\n      @param rewardsDelta how many new rewards accrued to the user\r\n      @param rewardsIndex the market index for rewards per token accrued\r\n    */\r\n    event AccrueRewards(ERC20 indexed strategy, address indexed user, uint256 rewardsDelta, uint256 rewardsIndex);\r\n\r\n    /** \r\n      @notice Emitted when a user claims accrued rewards.\r\n      @param user the user of the rewards\r\n      @param amount the amount of rewards claimed\r\n    */\r\n    event ClaimRewards(address indexed user, uint256 amount);\r\n\r\n    /// @notice The accrued but not yet transferred rewards for each user\r\n    mapping(address => uint256) public rewardsAccrued;\r\n\r\n    /** \r\n      @notice accrue rewards for a single user on a strategy\r\n      @param strategy the strategy to accrue a user's rewards on\r\n      @param user the user to be accrued\r\n      @return the cumulative amount of rewards accrued to user (including prior)\r\n    */\r\n    function accrue(ERC20 strategy, address user) public returns (uint256) {\r\n        RewardsState memory state = strategyState[strategy];\r\n\r\n        if (state.index == 0) return 0;\r\n\r\n        state = accrueStrategy(strategy, state);\r\n        return accrueUser(strategy, user, state);\r\n    }\r\n\r\n    /** \r\n      @notice accrue rewards for a two users on a strategy\r\n      @param strategy the strategy to accrue a user's rewards on\r\n      @param user the first user to be accrued\r\n      @param user the second user to be accrued\r\n      @return the cumulative amount of rewards accrued to the first user (including prior)\r\n      @return the cumulative amount of rewards accrued to the second user (including prior)\r\n    */\r\n    function accrue(\r\n        ERC20 strategy,\r\n        address user,\r\n        address secondUser\r\n    ) public returns (uint256, uint256) {\r\n        RewardsState memory state = strategyState[strategy];\r\n\r\n        if (state.index == 0) return (0, 0);\r\n\r\n        state = accrueStrategy(strategy, state);\r\n        return (accrueUser(strategy, user, state), accrueUser(strategy, secondUser, state));\r\n    }\r\n\r\n    /** \r\n      @notice claim rewards for a given user\r\n      @param user the user claiming rewards\r\n      @dev this function is public, and all rewards transfer to the user\r\n    */\r\n    function claimRewards(address user) external {\r\n        uint256 accrued = rewardsAccrued[user];\r\n\r\n        if (accrued != 0) {\r\n            rewardsAccrued[user] = 0;\r\n\r\n            rewardToken.safeTransferFrom(address(flywheelRewards), user, accrued);\r\n\r\n            emit ClaimRewards(user, accrued);\r\n        }\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                          ADMIN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /** \r\n      @notice Emitted when a new strategy is added to flywheel by the admin\r\n      @param newStrategy the new added strategy\r\n    */\r\n    event AddStrategy(address indexed newStrategy);\r\n\r\n    /// @notice initialize a new strategy\r\n    function addStrategyForRewards(ERC20 strategy) external requiresAuth {\r\n        _addStrategyForRewards(strategy);\r\n    }\r\n\r\n    function _addStrategyForRewards(ERC20 strategy) internal {\r\n        require(strategyState[strategy].index == 0, \"strategy\");\r\n        strategyState[strategy] = RewardsState({index: ONE, lastUpdatedTimestamp: block.timestamp.safeCastTo32()});\r\n\r\n        allStrategies.push(strategy);\r\n        emit AddStrategy(address(strategy));\r\n    }\r\n\r\n    function getAllStrategies() external view returns (ERC20[] memory) {\r\n        return allStrategies;\r\n    }\r\n\r\n    /** \r\n      @notice Emitted when the rewards module changes\r\n      @param newFlywheelRewards the new rewards module\r\n    */\r\n    event FlywheelRewardsUpdate(address indexed newFlywheelRewards);\r\n\r\n    /// @notice swap out the flywheel rewards contract\r\n    function setFlywheelRewards(IFlywheelRewards newFlywheelRewards) external requiresAuth {\r\n        uint256 oldRewardBalance = rewardToken.balanceOf(address(flywheelRewards));\r\n        if (oldRewardBalance > 0) {\r\n            rewardToken.safeTransferFrom(address(flywheelRewards), address(newFlywheelRewards), oldRewardBalance);\r\n        }\r\n\r\n        flywheelRewards = newFlywheelRewards;\r\n\r\n        emit FlywheelRewardsUpdate(address(newFlywheelRewards));\r\n    }\r\n\r\n    /** \r\n      @notice Emitted when the booster module changes\r\n      @param newBooster the new booster module\r\n    */\r\n    event FlywheelBoosterUpdate(address indexed newBooster);\r\n\r\n    /// @notice swap out the flywheel booster contract\r\n    function setBooster(IFlywheelBooster newBooster) external requiresAuth {\r\n        flywheelBooster = newBooster;\r\n\r\n        emit FlywheelBoosterUpdate(address(newBooster));\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                    INTERNAL ACCOUNTING LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    struct RewardsState {\r\n        /// @notice The strategy's last updated index\r\n        uint224 index;\r\n        /// @notice The timestamp the index was last updated at\r\n        uint32 lastUpdatedTimestamp;\r\n    }\r\n\r\n    /// @notice the fixed point factor of flywheel\r\n    uint224 public constant ONE = 1e18;\r\n\r\n    /// @notice The strategy index and last updated per strategy\r\n    mapping(ERC20 => RewardsState) public strategyState;\r\n\r\n    /// @notice user index per strategy\r\n    mapping(ERC20 => mapping(address => uint224)) public userIndex;\r\n\r\n    /// @notice accumulate global rewards on a strategy\r\n    function accrueStrategy(ERC20 strategy, RewardsState memory state)\r\n        private\r\n        returns (RewardsState memory rewardsState)\r\n    {\r\n        // calculate accrued rewards through module\r\n        uint256 strategyRewardsAccrued = flywheelRewards.getAccruedRewards(strategy, state.lastUpdatedTimestamp);\r\n\r\n        rewardsState = state;\r\n        if (strategyRewardsAccrued > 0) {\r\n            // use the booster or token supply to calculate reward index denominator\r\n            uint256 supplyTokens = address(flywheelBooster) != address(0)\r\n                ? flywheelBooster.boostedTotalSupply(strategy)\r\n                : strategy.totalSupply();\r\n\r\n            uint224 deltaIndex;\r\n\r\n            if (supplyTokens != 0) deltaIndex = ((strategyRewardsAccrued * ONE) / supplyTokens).safeCastTo224();\r\n\r\n            // accumulate rewards per token onto the index, multiplied by fixed-point factor\r\n            rewardsState = RewardsState({\r\n                index: state.index + deltaIndex,\r\n                lastUpdatedTimestamp: block.timestamp.safeCastTo32()\r\n            });\r\n            strategyState[strategy] = rewardsState;\r\n        }\r\n    }\r\n\r\n    /// @notice accumulate rewards on a strategy for a specific user\r\n    function accrueUser(\r\n        ERC20 strategy,\r\n        address user,\r\n        RewardsState memory state\r\n    ) private returns (uint256) {\r\n        // load indices\r\n        uint224 strategyIndex = state.index;\r\n        uint224 supplierIndex = userIndex[strategy][user];\r\n\r\n        // sync user index to global\r\n        userIndex[strategy][user] = strategyIndex;\r\n\r\n        // if user hasn't yet accrued rewards, grant them interest from the strategy beginning if they have a balance\r\n        // zero balances will have no effect other than syncing to global index\r\n        if (supplierIndex == 0) {\r\n            supplierIndex = ONE;\r\n        }\r\n\r\n        uint224 deltaIndex = strategyIndex - supplierIndex;\r\n        // use the booster or token balance to calculate reward balance multiplier\r\n        uint256 supplierTokens = address(flywheelBooster) != address(0)\r\n            ? flywheelBooster.boostedBalanceOf(strategy, user)\r\n            : strategy.balanceOf(user);\r\n\r\n        // accumulate rewards by multiplying user tokens by rewardsPerToken index and adding on unclaimed\r\n        uint256 supplierDelta = (supplierTokens * deltaIndex) / ONE;\r\n        uint256 supplierAccrued = rewardsAccrued[user] + supplierDelta;\r\n\r\n        rewardsAccrued[user] = supplierAccrued;\r\n\r\n        emit AccrueRewards(strategy, user, supplierDelta, strategyIndex);\r\n\r\n        return supplierAccrued;\r\n    }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/IFlywheelBooster.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\r\n\r\n/**\r\n @title Balance Booster Module for Flywheel\r\n @notice Flywheel is a general framework for managing token incentives.\r\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\r\n\r\n         The Booster module is an optional module for virtually boosting or otherwise transforming user balances. \r\n         If a booster is not configured, the strategies ERC-20 balanceOf/totalSupply will be used instead.\r\n        \r\n         Boosting logic can be associated with referrals, vote-escrow, or other strategies.\r\n\r\n         SECURITY NOTE: similar to how Core needs to be notified any time the strategy user composition changes, the booster would need to be notified of any conditions which change the boosted balances atomically.\r\n         This prevents gaming of the reward calculation function by using manipulated balances when accruing.\r\n*/\r\ninterface IFlywheelBooster {\r\n    /**\r\n      @notice calculate the boosted supply of a strategy.\r\n      @param strategy the strategy to calculate boosted supply of\r\n      @return the boosted supply\r\n     */\r\n    function boostedTotalSupply(ERC20 strategy) external view returns (uint256);\r\n\r\n    /**\r\n      @notice calculate the boosted balance of a user in a given strategy.\r\n      @param strategy the strategy to calculate boosted balance of\r\n      @param user the user to calculate boosted balance of\r\n      @return the boosted balance\r\n     */\r\n    function boostedBalanceOf(ERC20 strategy, address user) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/IIonicFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\n\r\ninterface IIonicFlywheel {\r\n  function isRewardsDistributor() external returns (bool);\r\n\r\n  function isFlywheel() external returns (bool);\r\n\r\n  function flywheelPreSupplierAction(address market, address supplier) external;\r\n\r\n  function flywheelPostSupplierAction(address market, address supplier) external;\r\n\r\n  function flywheelPreBorrowerAction(address market, address borrower) external;\r\n\r\n  function flywheelPostBorrowerAction(address market, address borrower) external;\r\n\r\n  function flywheelPreTransferAction(address market, address src, address dst) external;\r\n\r\n  function flywheelPostTransferAction(address market, address src, address dst) external;\r\n\r\n  function compAccrued(address user) external view returns (uint256);\r\n\r\n  function addMarketForRewards(ERC20 strategy) external;\r\n\r\n  function marketState(ERC20 strategy) external view returns (uint224 index, uint32 lastUpdatedTimestamp);\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\nimport { IonicFlywheelCore } from \"./IonicFlywheelCore.sol\";\r\nimport \"./IIonicFlywheel.sol\";\r\n\r\ncontract IonicFlywheel is IonicFlywheelCore, IIonicFlywheel {\r\n  bool public constant isRewardsDistributor = true;\r\n  bool public constant isFlywheel = true;\r\n\r\n  function flywheelPreSupplierAction(address market, address supplier) external {\r\n    accrue(ERC20(market), supplier);\r\n  }\r\n\r\n  function flywheelPostSupplierAction(address market, address supplier) external {\r\n    _updateBlacklistBalances(ERC20(market), supplier);\r\n  }\r\n\r\n  function flywheelPreBorrowerAction(address market, address borrower) external {}\r\n\r\n  function flywheelPostBorrowerAction(address market, address borrower) external {}\r\n\r\n  function flywheelPreTransferAction(address market, address src, address dst) external {\r\n    accrue(ERC20(market), src, dst);\r\n  }\r\n\r\n  function flywheelPostTransferAction(address market, address src, address dst) external {\r\n    _updateBlacklistBalances(ERC20(market), src);\r\n    _updateBlacklistBalances(ERC20(market), dst);\r\n  }\r\n\r\n  function compAccrued(address user) external view returns (uint256) {\r\n    return _rewardsAccrued[user];\r\n  }\r\n\r\n  function addMarketForRewards(ERC20 strategy) external onlyOwner {\r\n    _addStrategyForRewards(strategy);\r\n  }\r\n\r\n  function marketState(ERC20 strategy) external view returns (uint224, uint32) {\r\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheelBorrow.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\nimport { IonicFlywheelCore } from \"./IonicFlywheelCore.sol\";\r\nimport \"./IIonicFlywheel.sol\";\r\n\r\ncontract IonicFlywheelBorrow is IonicFlywheelCore, IIonicFlywheel {\r\n  bool public constant isRewardsDistributor = true;\r\n  bool public constant isFlywheel = true;\r\n\r\n  function flywheelPreSupplierAction(address market, address supplier) external {}\r\n\r\n  function flywheelPostSupplierAction(address market, address supplier) external {}\r\n\r\n  function flywheelPreBorrowerAction(address market, address borrower) external {\r\n    accrue(ERC20(market), borrower);\r\n  }\r\n\r\n  function flywheelPostBorrowerAction(address market, address borrower) external {\r\n    _updateBlacklistBalances(ERC20(market), borrower);\r\n  }\r\n\r\n  function flywheelPreTransferAction(address market, address src, address dst) external {}\r\n\r\n  function flywheelPostTransferAction(address market, address src, address dst) external {}\r\n\r\n  function compAccrued(address user) external view returns (uint256) {\r\n    return _rewardsAccrued[user];\r\n  }\r\n\r\n  function addMarketForRewards(ERC20 strategy) external onlyOwner {\r\n    _addStrategyForRewards(strategy);\r\n  }\r\n\r\n  function marketState(ERC20 strategy) external view returns (uint224, uint32) {\r\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheelCore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\nimport { SafeTransferLib } from \"solmate/utils/SafeTransferLib.sol\";\r\nimport { SafeCastLib } from \"solmate/utils/SafeCastLib.sol\";\r\n\r\nimport { IFlywheelRewards } from \"./rewards/IFlywheelRewards.sol\";\r\nimport { IFlywheelBooster } from \"./IFlywheelBooster.sol\";\r\nimport { IEmissionsManager } from \"../../../IEmissionsManager.sol\";\r\nimport { Ownable2StepUpgradeable } from \"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\";\r\n\r\ncontract IonicFlywheelCore is Ownable2StepUpgradeable {\r\n  using SafeTransferLib for ERC20;\r\n  using SafeCastLib for uint256;\r\n\r\n  /// @notice How much rewardsToken will be send to treasury\r\n  uint256 public performanceFee;\r\n\r\n  /// @notice Address that gets rewardsToken accrued by performanceFee\r\n  address public feeRecipient;\r\n\r\n  /// @notice The token to reward\r\n  ERC20 public rewardToken;\r\n\r\n  /// @notice append-only list of strategies added\r\n  ERC20[] public allStrategies;\r\n\r\n  /// @notice the rewards contract for managing streams\r\n  IFlywheelRewards public flywheelRewards;\r\n\r\n  /// @notice optional booster module for calculating virtual balances on strategies\r\n  IFlywheelBooster public flywheelBooster;\r\n\r\n  IEmissionsManager public emissionsManager;\r\n\r\n  /// @notice The accrued but not yet transferred rewards for each user\r\n  mapping(address => uint256) internal _rewardsAccrued;\r\n\r\n  /// @notice The strategy index and last updated per strategy\r\n  mapping(ERC20 => RewardsState) internal _strategyState;\r\n\r\n  /// @notice user index per strategy\r\n  mapping(ERC20 => mapping(address => uint224)) internal _userIndex;\r\n\r\n  /// @notice user blacklisted supply per strategy\r\n  mapping(ERC20 => mapping(address => uint256)) public userBlacklistedSupply;\r\n\r\n  /// @notice blacklisted supply per strategy\r\n  mapping(ERC20 => uint256) public blacklistedSupply;\r\n\r\n  modifier onlyEmissionsManager() {\r\n    require(address(emissionsManager) == msg.sender, \"!emissionsManager\");\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    _disableInitializers(); // Locks the implementation contract from being initialized\r\n  }\r\n\r\n  function initialize(\r\n    ERC20 _rewardToken,\r\n    IFlywheelRewards _flywheelRewards,\r\n    IFlywheelBooster _flywheelBooster,\r\n    address _owner\r\n  ) public initializer {\r\n    __Ownable2Step_init();\r\n\r\n    rewardToken = _rewardToken;\r\n    flywheelRewards = _flywheelRewards;\r\n    flywheelBooster = _flywheelBooster;\r\n\r\n    performanceFee = 10e16; // 10%\r\n    feeRecipient = _owner;\r\n  }\r\n\r\n  /*----------------------------------------------------------------\r\n                        ACCRUE/CLAIM LOGIC\r\n    ----------------------------------------------------------------*/\r\n\r\n  /** \r\n      @notice Emitted when a user's rewards accrue to a given strategy.\r\n      @param strategy the updated rewards strategy\r\n      @param user the user of the rewards\r\n      @param rewardsDelta how many new rewards accrued to the user\r\n      @param rewardsIndex the market index for rewards per token accrued\r\n    */\r\n  event AccrueRewards(ERC20 indexed strategy, address indexed user, uint256 rewardsDelta, uint256 rewardsIndex);\r\n\r\n  /** \r\n      @notice Emitted when a user claims accrued rewards.\r\n      @param user the user of the rewards\r\n      @param amount the amount of rewards claimed\r\n    */\r\n  event ClaimRewards(address indexed user, uint256 amount);\r\n\r\n  /** \r\n      @notice accrue rewards for a single user on a strategy\r\n      @param strategy the strategy to accrue a user's rewards on\r\n      @param user the user to be accrued\r\n      @return the cumulative amount of rewards accrued to user (including prior)\r\n    */\r\n  function accrue(ERC20 strategy, address user) public returns (uint256) {\r\n    (uint224 index, uint32 ts) = strategyState(strategy);\r\n    RewardsState memory state = RewardsState(index, ts);\r\n\r\n    if (state.index == 0) return 0;\r\n\r\n    state = accrueStrategy(strategy, state);\r\n    return accrueUser(strategy, user, state);\r\n  }\r\n\r\n  /** \r\n      @notice accrue rewards for a two users on a strategy\r\n      @param strategy the strategy to accrue a user's rewards on\r\n      @param user the first user to be accrued\r\n      @param user the second user to be accrued\r\n      @return the cumulative amount of rewards accrued to the first user (including prior)\r\n      @return the cumulative amount of rewards accrued to the second user (including prior)\r\n    */\r\n  function accrue(ERC20 strategy, address user, address secondUser) public returns (uint256, uint256) {\r\n    (uint224 index, uint32 ts) = strategyState(strategy);\r\n    RewardsState memory state = RewardsState(index, ts);\r\n\r\n    if (state.index == 0) return (0, 0);\r\n\r\n    state = accrueStrategy(strategy, state);\r\n    return (accrueUser(strategy, user, state), accrueUser(strategy, secondUser, state));\r\n  }\r\n\r\n  /** \r\n      @notice claim rewards for a given user\r\n      @param user the user claiming rewards\r\n      @dev this function is public, and all rewards transfer to the user\r\n    */\r\n  function claimRewards(address user) external {\r\n    require(!emissionsManager.isUserBlacklisted(user), \"blacklisted\");\r\n    require(!emissionsManager.isUserBlacklistable(user), \"blacklistable\");\r\n    uint256 accrued = rewardsAccrued(user);\r\n\r\n    if (accrued != 0) {\r\n      _rewardsAccrued[user] = 0;\r\n\r\n      rewardToken.safeTransferFrom(address(flywheelRewards), user, accrued);\r\n\r\n      emit ClaimRewards(user, accrued);\r\n    }\r\n  }\r\n\r\n  /** \r\n      @notice take rewards for a given user\r\n      @param user the user claiming rewards\r\n      @param receiver the address that receives the rewards\r\n      @dev this function is public, and all rewards transfer to the receiver\r\n    */\r\n  function takeRewardsFromUser(address user, address receiver) external onlyEmissionsManager {\r\n    uint256 accrued = rewardsAccrued(user);\r\n\r\n    if (accrued != 0) {\r\n      _rewardsAccrued[user] = 0;\r\n\r\n      rewardToken.safeTransferFrom(address(flywheelRewards), receiver, accrued);\r\n\r\n      emit ClaimRewards(user, accrued);\r\n    }\r\n  }\r\n\r\n  /** \r\n      @notice set user balances to zero\r\n      @param strategy strategy to whitelist user for\r\n      @param user the user to be whitelisted\r\n      @dev this function is public, and all user and strategy blacklisted supplies are reset\r\n    */\r\n  function whitelistUser(ERC20 strategy, address user) external onlyEmissionsManager {\r\n    blacklistedSupply[strategy] -= userBlacklistedSupply[strategy][user];\r\n    userBlacklistedSupply[strategy][user] = 0;\r\n    (uint224 index, uint32 ts) = strategyState(strategy);\r\n    RewardsState memory state = RewardsState(index, ts);\r\n    state = accrueStrategy(strategy, state);\r\n    _userIndex[strategy][user] = state.index;\r\n  }\r\n\r\n  /** \r\n      @notice update user blacklisted balances\r\n      @param strategy strategy to update blacklisted balances\r\n      @param user the user to be blacklisted\r\n      @dev this function is public\r\n    */\r\n  function updateBlacklistBalances(ERC20 strategy, address user) external onlyEmissionsManager {\r\n    _updateBlacklistBalances(strategy, user);\r\n  }\r\n\r\n  /** \r\n      @notice update user blacklisted balances\r\n      @param strategy strategy to update blacklisted balances\r\n      @param user the user to be blacklisted\r\n      @dev this function is private\r\n    */\r\n  function _updateBlacklistBalances(ERC20 strategy, address user) internal {\r\n    if (emissionsManager.isUserBlacklisted(user)) {\r\n      uint256 _oldUserBlacklistedSupply = userBlacklistedSupply[strategy][user];\r\n      uint256 supplierTokens = address(flywheelBooster) != address(0)\r\n        ? flywheelBooster.boostedBalanceOf(ERC20(strategy), user)\r\n        : ERC20(strategy).balanceOf(user);\r\n\r\n      if (supplierTokens >= _oldUserBlacklistedSupply) {\r\n        blacklistedSupply[strategy] += supplierTokens - _oldUserBlacklistedSupply;\r\n        userBlacklistedSupply[strategy][user] = supplierTokens;\r\n      } else {\r\n        blacklistedSupply[strategy] -= _oldUserBlacklistedSupply - supplierTokens;\r\n        userBlacklistedSupply[strategy][user] = supplierTokens;\r\n      }\r\n    }\r\n  }\r\n  /*----------------------------------------------------------------\r\n                          ADMIN LOGIC\r\n    ----------------------------------------------------------------*/\r\n\r\n  /** \r\n      @notice Emitted when a new strategy is added to flywheel by the admin\r\n      @param newStrategy the new added strategy\r\n    */\r\n  event AddStrategy(address indexed newStrategy);\r\n\r\n  /// @notice initialize a new strategy\r\n  function setEmissionsManager(IEmissionsManager _emissionsManager) external onlyOwner {\r\n    emissionsManager = _emissionsManager;\r\n  }\r\n\r\n  /// @notice initialize a new strategy\r\n  function addStrategyForRewards(ERC20 strategy) external onlyOwner {\r\n    _addStrategyForRewards(strategy);\r\n  }\r\n\r\n  function _addStrategyForRewards(ERC20 strategy) internal {\r\n    (uint224 index, ) = strategyState(strategy);\r\n    require(index == 0, \"strategy\");\r\n    _strategyState[strategy] = RewardsState({\r\n      index: (10 ** rewardToken.decimals()).safeCastTo224(),\r\n      lastUpdatedTimestamp: block.timestamp.safeCastTo32()\r\n    });\r\n\r\n    allStrategies.push(strategy);\r\n    emit AddStrategy(address(strategy));\r\n  }\r\n\r\n  function getAllStrategies() external view returns (ERC20[] memory) {\r\n    return allStrategies;\r\n  }\r\n\r\n  /** \r\n      @notice Emitted when the rewards module changes\r\n      @param newFlywheelRewards the new rewards module\r\n    */\r\n  event FlywheelRewardsUpdate(address indexed newFlywheelRewards);\r\n\r\n  /// @notice swap out the flywheel rewards contract\r\n  function setFlywheelRewards(IFlywheelRewards newFlywheelRewards) external onlyOwner {\r\n    if (address(flywheelRewards) != address(0)) {\r\n      uint256 oldRewardBalance = rewardToken.balanceOf(address(flywheelRewards));\r\n      if (oldRewardBalance > 0) {\r\n        rewardToken.safeTransferFrom(address(flywheelRewards), address(newFlywheelRewards), oldRewardBalance);\r\n      }\r\n    }\r\n\r\n    flywheelRewards = newFlywheelRewards;\r\n\r\n    emit FlywheelRewardsUpdate(address(newFlywheelRewards));\r\n  }\r\n\r\n  /** \r\n      @notice Emitted when the booster module changes\r\n      @param newBooster the new booster module\r\n    */\r\n  event FlywheelBoosterUpdate(address indexed newBooster);\r\n\r\n  /// @notice swap out the flywheel booster contract\r\n  function setBooster(IFlywheelBooster newBooster) external onlyOwner {\r\n    flywheelBooster = newBooster;\r\n\r\n    emit FlywheelBoosterUpdate(address(newBooster));\r\n  }\r\n\r\n  event UpdatedFeeSettings(\r\n    uint256 oldPerformanceFee,\r\n    uint256 newPerformanceFee,\r\n    address oldFeeRecipient,\r\n    address newFeeRecipient\r\n  );\r\n\r\n  /**\r\n   * @notice Update performanceFee and/or feeRecipient\r\n   * @dev Claim rewards first from the previous feeRecipient before changing it\r\n   */\r\n  function updateFeeSettings(uint256 _performanceFee, address _feeRecipient) external onlyOwner {\r\n    _updateFeeSettings(_performanceFee, _feeRecipient);\r\n  }\r\n\r\n  function _updateFeeSettings(uint256 _performanceFee, address _feeRecipient) internal {\r\n    emit UpdatedFeeSettings(performanceFee, _performanceFee, feeRecipient, _feeRecipient);\r\n\r\n    if (feeRecipient != _feeRecipient) {\r\n      _rewardsAccrued[_feeRecipient] += rewardsAccrued(feeRecipient);\r\n      _rewardsAccrued[feeRecipient] = 0;\r\n    }\r\n    performanceFee = _performanceFee;\r\n    feeRecipient = _feeRecipient;\r\n  }\r\n\r\n  /*----------------------------------------------------------------\r\n                    INTERNAL ACCOUNTING LOGIC\r\n    ----------------------------------------------------------------*/\r\n\r\n  struct RewardsState {\r\n    /// @notice The strategy's last updated index\r\n    uint224 index;\r\n    /// @notice The timestamp the index was last updated at\r\n    uint32 lastUpdatedTimestamp;\r\n  }\r\n\r\n  /// @notice accumulate global rewards on a strategy\r\n  function accrueStrategy(\r\n    ERC20 strategy,\r\n    RewardsState memory state\r\n  ) private returns (RewardsState memory rewardsState) {\r\n    // calculate accrued rewards through module\r\n    uint256 strategyRewardsAccrued = flywheelRewards.getAccruedRewards(strategy, state.lastUpdatedTimestamp);\r\n\r\n    rewardsState = state;\r\n\r\n    if (strategyRewardsAccrued > 0) {\r\n      // use the booster or token supply to calculate reward index denominator\r\n      uint256 supplyTokens = address(flywheelBooster) != address(0)\r\n        ? flywheelBooster.boostedTotalSupply(strategy) - blacklistedSupply[strategy]\r\n        : strategy.totalSupply() - blacklistedSupply[strategy];\r\n\r\n      // 100% = 100e16\r\n      uint256 accruedFees = (strategyRewardsAccrued * performanceFee) / uint224(100e16);\r\n\r\n      _rewardsAccrued[feeRecipient] += accruedFees;\r\n      strategyRewardsAccrued -= accruedFees;\r\n\r\n      uint224 deltaIndex;\r\n\r\n      if (supplyTokens != 0)\r\n        deltaIndex = ((strategyRewardsAccrued * (10 ** strategy.decimals())) / supplyTokens).safeCastTo224();\r\n\r\n      // accumulate rewards per token onto the index, multiplied by fixed-point factor\r\n      rewardsState = RewardsState({\r\n        index: state.index + deltaIndex,\r\n        lastUpdatedTimestamp: block.timestamp.safeCastTo32()\r\n      });\r\n      _strategyState[strategy] = rewardsState;\r\n    }\r\n  }\r\n\r\n  /// @notice accumulate rewards on a strategy for a specific user\r\n  function accrueUser(ERC20 strategy, address user, RewardsState memory state) private returns (uint256) {\r\n    // load indices\r\n    uint224 strategyIndex = state.index;\r\n    uint224 supplierIndex = userIndex(strategy, user);\r\n\r\n    // sync user index to global\r\n    _userIndex[strategy][user] = strategyIndex;\r\n\r\n    // if user hasn't yet accrued rewards, grant them interest from the strategy beginning if they have a balance\r\n    // zero balances will have no effect other than syncing to global index\r\n    if (supplierIndex == 0) {\r\n      supplierIndex = (10 ** rewardToken.decimals()).safeCastTo224();\r\n    }\r\n\r\n    uint224 deltaIndex = strategyIndex - supplierIndex;\r\n    // use the booster or token balance to calculate reward balance multiplier\r\n    uint256 supplierTokens = address(flywheelBooster) != address(0)\r\n      ? flywheelBooster.boostedBalanceOf(strategy, user) - userBlacklistedSupply[strategy][user]\r\n      : strategy.balanceOf(user) - userBlacklistedSupply[strategy][user];\r\n\r\n    // accumulate rewards by multiplying user tokens by rewardsPerToken index and adding on unclaimed\r\n    uint256 supplierDelta = (deltaIndex * supplierTokens) / (10 ** strategy.decimals());\r\n    uint256 supplierAccrued = rewardsAccrued(user) + supplierDelta;\r\n\r\n    _rewardsAccrued[user] = supplierAccrued;\r\n\r\n    emit AccrueRewards(strategy, user, supplierDelta, strategyIndex);\r\n\r\n    return supplierAccrued;\r\n  }\r\n\r\n  function rewardsAccrued(address user) public virtual returns (uint256) {\r\n    return _rewardsAccrued[user];\r\n  }\r\n\r\n  function userIndex(ERC20 strategy, address user) public virtual returns (uint224) {\r\n    return _userIndex[strategy][user];\r\n  }\r\n\r\n  function strategyState(ERC20 strategy) public virtual returns (uint224 index, uint32 lastUpdatedTimestamp) {\r\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheelLensRouter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\n\r\nimport { IonicFlywheelCore } from \"./IonicFlywheelCore.sol\";\r\nimport { IonicComptroller } from \"../../../compound/ComptrollerInterface.sol\";\r\nimport { ICErc20 } from \"../../../compound/CTokenInterfaces.sol\";\r\nimport { BasePriceOracle } from \"../../../oracles/BasePriceOracle.sol\";\r\nimport { PoolDirectory } from \"../../../PoolDirectory.sol\";\r\n\r\ninterface IPriceOracle_IFLR {\r\n  function getUnderlyingPrice(ERC20 cToken) external view returns (uint256);\r\n\r\n  function price(address underlying) external view returns (uint256);\r\n}\r\n\r\ncontract IonicFlywheelLensRouter {\r\n  PoolDirectory public fpd;\r\n\r\n  constructor(PoolDirectory _fpd) {\r\n    fpd = _fpd;\r\n  }\r\n\r\n  struct MarketRewardsInfo {\r\n    /// @dev comptroller oracle price of market underlying\r\n    uint256 underlyingPrice;\r\n    ICErc20 market;\r\n    RewardsInfo[] rewardsInfo;\r\n  }\r\n\r\n  struct RewardsInfo {\r\n    /// @dev rewards in `rewardToken` paid per underlying staked token in `market` per second\r\n    uint256 rewardSpeedPerSecondPerToken;\r\n    /// @dev comptroller oracle price of reward token\r\n    uint256 rewardTokenPrice;\r\n    /// @dev APR scaled by 1e18. Calculated as rewardSpeedPerSecondPerToken * rewardTokenPrice * 365.25 days / underlyingPrice * 1e18 / market.exchangeRate\r\n    uint256 formattedAPR;\r\n    address flywheel;\r\n    address rewardToken;\r\n  }\r\n\r\n  function getPoolMarketRewardsInfo(IonicComptroller comptroller) external returns (MarketRewardsInfo[] memory) {\r\n    ICErc20[] memory markets = comptroller.getAllMarkets();\r\n    return _getMarketRewardsInfo(markets, comptroller);\r\n  }\r\n\r\n  function getMarketRewardsInfo(ICErc20[] memory markets) external returns (MarketRewardsInfo[] memory) {\r\n    IonicComptroller pool;\r\n    for (uint256 i = 0; i < markets.length; i++) {\r\n      ICErc20 asMarket = ICErc20(address(markets[i]));\r\n      if (address(pool) == address(0)) pool = asMarket.comptroller();\r\n      else require(asMarket.comptroller() == pool);\r\n    }\r\n    return _getMarketRewardsInfo(markets, pool);\r\n  }\r\n\r\n  function _getMarketRewardsInfo(ICErc20[] memory markets, IonicComptroller comptroller)\r\n    internal\r\n    returns (MarketRewardsInfo[] memory)\r\n  {\r\n    if (address(comptroller) == address(0) || markets.length == 0) return new MarketRewardsInfo[](0);\r\n\r\n    address[] memory flywheels = comptroller.getAccruingFlywheels();\r\n    address[] memory rewardTokens = new address[](flywheels.length);\r\n    uint256[] memory rewardTokenPrices = new uint256[](flywheels.length);\r\n    uint256[] memory rewardTokenDecimals = new uint256[](flywheels.length);\r\n    BasePriceOracle oracle = comptroller.oracle();\r\n\r\n    MarketRewardsInfo[] memory infoList = new MarketRewardsInfo[](markets.length);\r\n    for (uint256 i = 0; i < markets.length; i++) {\r\n      RewardsInfo[] memory rewardsInfo = new RewardsInfo[](flywheels.length);\r\n\r\n      ICErc20 market = ICErc20(address(markets[i]));\r\n      uint256 price = oracle.price(market.underlying()); // scaled to 1e18\r\n\r\n      if (i == 0) {\r\n        for (uint256 j = 0; j < flywheels.length; j++) {\r\n          ERC20 rewardToken = IonicFlywheelCore(flywheels[j]).rewardToken();\r\n          rewardTokens[j] = address(rewardToken);\r\n          rewardTokenPrices[j] = oracle.price(address(rewardToken)); // scaled to 1e18\r\n          rewardTokenDecimals[j] = uint256(rewardToken.decimals());\r\n        }\r\n      }\r\n\r\n      for (uint256 j = 0; j < flywheels.length; j++) {\r\n        IonicFlywheelCore flywheel = IonicFlywheelCore(flywheels[j]);\r\n\r\n        uint256 rewardSpeedPerSecondPerToken = getRewardSpeedPerSecondPerToken(\r\n          flywheel,\r\n          market,\r\n          rewardTokenDecimals[j]\r\n        );\r\n        uint256 apr = getApr(\r\n          rewardSpeedPerSecondPerToken,\r\n          rewardTokenPrices[j],\r\n          price, \r\n          market.exchangeRateCurrent(),\r\n          address(flywheel.flywheelBooster()) != address(0)\r\n        );\r\n\r\n        rewardsInfo[j] = RewardsInfo({\r\n          rewardSpeedPerSecondPerToken: rewardSpeedPerSecondPerToken, // scaled in 1e18\r\n          rewardTokenPrice: rewardTokenPrices[j],\r\n          formattedAPR: apr, // scaled in 1e18\r\n          flywheel: address(flywheel),\r\n          rewardToken: rewardTokens[j]\r\n        });\r\n      }\r\n\r\n      infoList[i] = MarketRewardsInfo({ market: market, rewardsInfo: rewardsInfo, underlyingPrice: price });\r\n    }\r\n\r\n    return infoList;\r\n  }\r\n\r\n  function scaleIndexDiff(uint256 indexDiff, uint256 decimals) internal pure returns (uint256) {\r\n    return decimals <= 18 ? uint256(indexDiff) * (10**(18 - decimals)) : uint256(indexDiff) / (10**(decimals - 18));\r\n  }\r\n\r\n  function getRewardSpeedPerSecondPerToken(\r\n    IonicFlywheelCore flywheel,\r\n    ICErc20 market,\r\n    uint256 decimals\r\n  ) internal returns (uint256 rewardSpeedPerSecondPerToken) {\r\n    ERC20 strategy = ERC20(address(market));\r\n    (uint224 indexBefore, uint32 lastUpdatedTimestampBefore) = flywheel.strategyState(strategy);\r\n    flywheel.accrue(strategy, address(0));\r\n    (uint224 indexAfter, uint32 lastUpdatedTimestampAfter) = flywheel.strategyState(strategy);\r\n    if (lastUpdatedTimestampAfter > lastUpdatedTimestampBefore) {\r\n      rewardSpeedPerSecondPerToken =\r\n        scaleIndexDiff((indexAfter - indexBefore), decimals) /\r\n        (lastUpdatedTimestampAfter - lastUpdatedTimestampBefore);\r\n    }\r\n  }\r\n\r\n  function getApr(\r\n    uint256 rewardSpeedPerSecondPerToken,\r\n    uint256 rewardTokenPrice,\r\n    uint256 underlyingPrice,\r\n    uint256 exchangeRate,\r\n    bool isBorrow\r\n  ) internal pure returns (uint256) {\r\n    if (rewardSpeedPerSecondPerToken == 0) return 0;\r\n    uint256 nativeSpeedPerSecondPerCToken = rewardSpeedPerSecondPerToken * rewardTokenPrice; // scaled to 1e36\r\n    uint256 nativeSpeedPerYearPerCToken = nativeSpeedPerSecondPerCToken * 365.25 days; // scaled to 1e36\r\n    uint256 assetSpeedPerYearPerCToken = nativeSpeedPerYearPerCToken / underlyingPrice; // scaled to 1e18\r\n    uint256 assetSpeedPerYearPerCTokenScaled = assetSpeedPerYearPerCToken * 1e18; // scaled to 1e36\r\n    uint256 apr = assetSpeedPerYearPerCTokenScaled;\r\n    if (!isBorrow) {\r\n      // if not borrowing, use exchange rate to scale\r\n      apr = assetSpeedPerYearPerCTokenScaled / exchangeRate; // scaled to 1e18\r\n    } else {\r\n      apr = assetSpeedPerYearPerCTokenScaled / 1e18; // scaled to 1e18\r\n    }\r\n    return apr;\r\n  }\r\n\r\n  function getRewardsAprForMarket(ICErc20 market) internal returns (int256 totalMarketRewardsApr) {\r\n    IonicComptroller comptroller = market.comptroller();\r\n    BasePriceOracle oracle = comptroller.oracle();\r\n    uint256 underlyingPrice = oracle.getUnderlyingPrice(market);\r\n\r\n    address[] memory flywheels = comptroller.getAccruingFlywheels();\r\n    for (uint256 j = 0; j < flywheels.length; j++) {\r\n      IonicFlywheelCore flywheel = IonicFlywheelCore(flywheels[j]);\r\n      ERC20 rewardToken = flywheel.rewardToken();\r\n\r\n      uint256 rewardSpeedPerSecondPerToken = getRewardSpeedPerSecondPerToken(\r\n        flywheel,\r\n        market,\r\n        uint256(rewardToken.decimals())\r\n      );\r\n\r\n      uint256 marketApr = getApr(\r\n        rewardSpeedPerSecondPerToken,\r\n        oracle.price(address(rewardToken)),\r\n        underlyingPrice,\r\n        market.exchangeRateCurrent(),\r\n        address(flywheel.flywheelBooster()) != address(0)\r\n      );\r\n\r\n      totalMarketRewardsApr += int256(marketApr);\r\n    }\r\n  }\r\n\r\n  function getUserNetValueDeltaForMarket(\r\n    address user,\r\n    ICErc20 market,\r\n    int256 offchainApr,\r\n    int256 blocksPerYear\r\n  ) internal returns (int256) {\r\n    IonicComptroller comptroller = market.comptroller();\r\n    BasePriceOracle oracle = comptroller.oracle();\r\n    int256 netApr = getRewardsAprForMarket(market) +\r\n      getUserInterestAprForMarket(user, market, blocksPerYear) +\r\n      offchainApr;\r\n    return (netApr * int256(market.balanceOfUnderlying(user)) * int256(oracle.getUnderlyingPrice(market))) / 1e36;\r\n  }\r\n\r\n  function getUserInterestAprForMarket(\r\n    address user,\r\n    ICErc20 market,\r\n    int256 blocksPerYear\r\n  ) internal returns (int256) {\r\n    uint256 borrows = market.borrowBalanceCurrent(user);\r\n    uint256 supplied = market.balanceOfUnderlying(user);\r\n    uint256 supplyRatePerBlock = market.supplyRatePerBlock();\r\n    uint256 borrowRatePerBlock = market.borrowRatePerBlock();\r\n\r\n    IonicComptroller comptroller = market.comptroller();\r\n    BasePriceOracle oracle = comptroller.oracle();\r\n    uint256 assetPrice = oracle.getUnderlyingPrice(market);\r\n    uint256 collateralValue = (supplied * assetPrice) / 1e18;\r\n    uint256 borrowsValue = (borrows * assetPrice) / 1e18;\r\n\r\n    uint256 yieldValuePerBlock = collateralValue * supplyRatePerBlock;\r\n    uint256 interestOwedValuePerBlock = borrowsValue * borrowRatePerBlock;\r\n\r\n    if (collateralValue == 0) return 0;\r\n    return ((int256(yieldValuePerBlock) - int256(interestOwedValuePerBlock)) * blocksPerYear) / int256(collateralValue);\r\n  }\r\n\r\n  struct AdjustedUserNetAprVars {\r\n    int256 userNetAssetsValue;\r\n    int256 userNetValueDelta;\r\n    BasePriceOracle oracle;\r\n    ICErc20[] markets;\r\n    IonicComptroller pool;\r\n  }\r\n\r\n  function getAdjustedUserNetApr(\r\n    address user,\r\n    int256 blocksPerYear,\r\n    address[] memory offchainRewardsAprMarkets,\r\n    int256[] memory offchainRewardsAprs\r\n  ) public returns (int256) {\r\n    AdjustedUserNetAprVars memory vars;\r\n\r\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\r\n      vars.oracle = pool.oracle();\r\n      vars.markets = pool.getAllMarkets();\r\n      for (uint256 j = 0; j < vars.markets.length; j++) {\r\n        int256 offchainRewardsApr = 0;\r\n        for (uint256 k = 0; k < offchainRewardsAprMarkets.length; k++) {\r\n          if (offchainRewardsAprMarkets[k] == address(vars.markets[j])) offchainRewardsApr = offchainRewardsAprs[k];\r\n        }\r\n        vars.userNetAssetsValue +=\r\n          int256(vars.markets[j].balanceOfUnderlying(user) * vars.oracle.getUnderlyingPrice(vars.markets[j])) /\r\n          1e18;\r\n        vars.userNetValueDelta += getUserNetValueDeltaForMarket(\r\n          user,\r\n          vars.markets[j],\r\n          offchainRewardsApr,\r\n          blocksPerYear\r\n        );\r\n      }\r\n    }\r\n\r\n    if (vars.userNetAssetsValue == 0) return 0;\r\n    else return (vars.userNetValueDelta * 1e18) / vars.userNetAssetsValue;\r\n  }\r\n\r\n  function getUserNetApr(address user, int256 blocksPerYear) external returns (int256) {\r\n    address[] memory emptyAddrArray = new address[](0);\r\n    int256[] memory emptyIntArray = new int256[](0);\r\n    return getAdjustedUserNetApr(user, blocksPerYear, emptyAddrArray, emptyIntArray);\r\n  }\r\n\r\n  function getAllRewardTokens() public view returns (address[] memory uniqueRewardTokens) {\r\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\r\n\r\n    uint256 rewardTokensCounter;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\r\n      address[] memory fws = pool.getRewardsDistributors();\r\n\r\n      rewardTokensCounter += fws.length;\r\n    }\r\n\r\n    address[] memory rewardTokens = new address[](rewardTokensCounter);\r\n\r\n    uint256 uniqueRewardTokensCounter = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\r\n      address[] memory fws = pool.getRewardsDistributors();\r\n\r\n      for (uint256 j = 0; j < fws.length; j++) {\r\n        address rwToken = address(IonicFlywheelCore(fws[j]).rewardToken());\r\n        if (rwToken == address(0)) break;\r\n\r\n        bool added;\r\n        for (uint256 k = 0; k < rewardTokens.length; k++) {\r\n          if (rwToken == rewardTokens[k]) {\r\n            added = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!added) rewardTokens[uniqueRewardTokensCounter++] = rwToken;\r\n      }\r\n    }\r\n\r\n    uniqueRewardTokens = new address[](uniqueRewardTokensCounter);\r\n    for (uint256 i = 0; i < uniqueRewardTokensCounter; i++) {\r\n      uniqueRewardTokens[i] = rewardTokens[i];\r\n    }\r\n  }\r\n\r\n  function claimAllRewardTokens(address user) external returns (address[] memory, uint256[] memory) {\r\n    address[] memory rewardTokens = getAllRewardTokens();\r\n    uint256[] memory rewardsClaimedForToken = new uint256[](rewardTokens.length);\r\n\r\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n      rewardsClaimedForToken[i] = claimRewardsOfRewardToken(user, rewardTokens[i]);\r\n    }\r\n\r\n    return (rewardTokens, rewardsClaimedForToken);\r\n  }\r\n\r\n  function claimRewardsOfRewardToken(address user, address rewardToken) public returns (uint256 rewardsClaimed) {\r\n    uint256 balanceBefore = ERC20(rewardToken).balanceOf(user);\r\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\r\n      ERC20[] memory markets;\r\n      {\r\n        ICErc20[] memory cerc20s = pool.getAllMarkets();\r\n        markets = new ERC20[](cerc20s.length);\r\n        for (uint256 j = 0; j < cerc20s.length; j++) {\r\n          markets[j] = ERC20(address(cerc20s[j]));\r\n        }\r\n      }\r\n\r\n      address[] memory flywheelAddresses = pool.getAccruingFlywheels();\r\n      for (uint256 k = 0; k < flywheelAddresses.length; k++) {\r\n        IonicFlywheelCore flywheel = IonicFlywheelCore(flywheelAddresses[k]);\r\n        if (address(flywheel.rewardToken()) == rewardToken) {\r\n          for (uint256 m = 0; m < markets.length; m++) {\r\n            flywheel.accrue(markets[m], user);\r\n          }\r\n          flywheel.claimRewards(user);\r\n        }\r\n      }\r\n    }\r\n\r\n    uint256 balanceAfter = ERC20(rewardToken).balanceOf(user);\r\n    return balanceAfter - balanceBefore;\r\n  }\r\n\r\n  function claimRewardsForMarket(\r\n    address user,\r\n    ERC20 market,\r\n    IonicFlywheelCore[] calldata flywheels,\r\n    bool[] calldata accrue\r\n  )\r\n    external\r\n    returns (\r\n      IonicFlywheelCore[] memory,\r\n      address[] memory rewardTokens,\r\n      uint256[] memory rewards\r\n    )\r\n  {\r\n    uint256 size = flywheels.length;\r\n    rewards = new uint256[](size);\r\n    rewardTokens = new address[](size);\r\n\r\n    for (uint256 i = 0; i < size; i++) {\r\n      uint256 newRewards;\r\n      if (accrue[i]) {\r\n        newRewards = flywheels[i].accrue(market, user);\r\n      } else {\r\n        newRewards = flywheels[i].rewardsAccrued(user);\r\n      }\r\n\r\n      // Take the max, because rewards are cumulative.\r\n      rewards[i] = rewards[i] >= newRewards ? rewards[i] : newRewards;\r\n\r\n      flywheels[i].claimRewards(user);\r\n      rewardTokens[i] = address(flywheels[i].rewardToken());\r\n    }\r\n\r\n    return (flywheels, rewardTokens, rewards);\r\n  }\r\n\r\n  function claimRewardsForPool(address user, IonicComptroller comptroller)\r\n    public\r\n    returns (\r\n      IonicFlywheelCore[] memory,\r\n      address[] memory,\r\n      uint256[] memory\r\n    )\r\n  {\r\n    ICErc20[] memory cerc20s = comptroller.getAllMarkets();\r\n    ERC20[] memory markets = new ERC20[](cerc20s.length);\r\n    address[] memory flywheelAddresses = comptroller.getAccruingFlywheels();\r\n    IonicFlywheelCore[] memory flywheels = new IonicFlywheelCore[](flywheelAddresses.length);\r\n    bool[] memory accrue = new bool[](flywheelAddresses.length);\r\n\r\n    for (uint256 j = 0; j < flywheelAddresses.length; j++) {\r\n      flywheels[j] = IonicFlywheelCore(flywheelAddresses[j]);\r\n      accrue[j] = true;\r\n    }\r\n\r\n    for (uint256 j = 0; j < cerc20s.length; j++) {\r\n      markets[j] = ERC20(address(cerc20s[j]));\r\n    }\r\n\r\n    return claimRewardsForMarkets(user, markets, flywheels, accrue);\r\n  }\r\n\r\n  function claimRewardsForMarkets(\r\n    address user,\r\n    ERC20[] memory markets,\r\n    IonicFlywheelCore[] memory flywheels,\r\n    bool[] memory accrue\r\n  )\r\n    public\r\n    returns (\r\n      IonicFlywheelCore[] memory,\r\n      address[] memory rewardTokens,\r\n      uint256[] memory rewards\r\n    )\r\n  {\r\n    rewards = new uint256[](flywheels.length);\r\n    rewardTokens = new address[](flywheels.length);\r\n\r\n    for (uint256 i = 0; i < flywheels.length; i++) {\r\n      for (uint256 j = 0; j < markets.length; j++) {\r\n        ERC20 market = markets[j];\r\n\r\n        uint256 newRewards;\r\n        if (accrue[i]) {\r\n          newRewards = flywheels[i].accrue(market, user);\r\n        } else {\r\n          newRewards = flywheels[i].rewardsAccrued(user);\r\n        }\r\n\r\n        // Take the max, because rewards are cumulative.\r\n        rewards[i] = rewards[i] >= newRewards ? rewards[i] : newRewards;\r\n      }\r\n\r\n      flywheels[i].claimRewards(user);\r\n      rewardTokens[i] = address(flywheels[i].rewardToken());\r\n    }\r\n\r\n    return (flywheels, rewardTokens, rewards);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/IonicReplacingFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./IonicFlywheel.sol\";\r\n\r\nimport { IFlywheelRewards } from \"./rewards/IFlywheelRewards.sol\";\r\nimport { IFlywheelBooster } from \"./IFlywheelBooster.sol\";\r\n\r\ncontract IonicReplacingFlywheel is IonicFlywheel {\r\n  IonicFlywheelCore public flywheelToReplace;\r\n  mapping(address => bool) private rewardsTransferred;\r\n\r\n  function reinitialize(IonicFlywheelCore _flywheelToReplace) public onlyOwner {\r\n    flywheelToReplace = _flywheelToReplace;\r\n  }\r\n\r\n  function rewardsAccrued(address user) public override returns (uint256) {\r\n    if (address(flywheelToReplace) != address(0)) {\r\n      if (_rewardsAccrued[user] == 0 && !rewardsTransferred[user]) {\r\n        uint256 oldStateRewardsAccrued = flywheelToReplace.rewardsAccrued(user);\r\n        if (oldStateRewardsAccrued != 0) {\r\n          rewardsTransferred[user] = true;\r\n          _rewardsAccrued[user] = oldStateRewardsAccrued;\r\n        }\r\n      }\r\n    }\r\n    return _rewardsAccrued[user];\r\n  }\r\n\r\n  function strategyState(ERC20 strategy) public override returns (uint224, uint32) {\r\n    if (address(flywheelToReplace) != address(0)) {\r\n      RewardsState memory newStateStrategyState = _strategyState[strategy];\r\n      if (newStateStrategyState.index == 0) {\r\n        (uint224 index, uint32 ts) = flywheelToReplace.strategyState(strategy);\r\n        if (index != 0) {\r\n          _strategyState[strategy] = RewardsState(index, ts);\r\n        }\r\n      }\r\n    }\r\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\r\n  }\r\n\r\n  function userIndex(ERC20 strategy, address user) public override returns (uint224) {\r\n    if (address(flywheelToReplace) != address(0)) {\r\n      if (_userIndex[strategy][user] == 0) {\r\n        uint224 oldStateUserIndex = flywheelToReplace.userIndex(strategy, user);\r\n        if (oldStateUserIndex != 0) {\r\n          _userIndex[strategy][user] = oldStateUserIndex;\r\n        }\r\n      }\r\n    }\r\n    return _userIndex[strategy][user];\r\n  }\r\n\r\n  function addInitializedStrategy(ERC20 strategy) public onlyOwner {\r\n    (uint224 index, ) = strategyState(strategy);\r\n    if (index > 0) {\r\n      ERC20[] memory strategies = this.getAllStrategies();\r\n      for (uint8 i = 0; i < strategies.length; i++) {\r\n        require(address(strategy) != address(strategies[i]), \"!added\");\r\n      }\r\n\r\n      allStrategies.push(strategy);\r\n      emit AddStrategy(address(strategy));\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/BaseFlywheelRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport {SafeTransferLib, ERC20} from \"solmate/utils/SafeTransferLib.sol\";\r\nimport {IFlywheelRewards} from \"./IFlywheelRewards.sol\";\r\nimport {IonicFlywheelCore} from \"../IonicFlywheelCore.sol\";\r\n\r\n/** \r\n @title Flywheel Reward Module\r\n @notice Determines how many rewards accrue to each strategy globally over a given time period.\r\n @dev approves the flywheel core for the reward token to allow balances to be managed by the module but claimed from core.\r\n*/\r\nabstract contract BaseFlywheelRewards is IFlywheelRewards {\r\n    using SafeTransferLib for ERC20;\r\n\r\n    /// @notice thrown when caller is not the flywheel\r\n    error FlywheelError();\r\n\r\n    /// @notice the reward token paid\r\n    ERC20 public immutable override rewardToken;\r\n\r\n    /// @notice the flywheel core contract\r\n    IonicFlywheelCore public immutable override flywheel;\r\n\r\n    constructor(IonicFlywheelCore _flywheel) {\r\n        flywheel = _flywheel;\r\n        ERC20 _rewardToken = _flywheel.rewardToken();\r\n        rewardToken = _rewardToken;\r\n\r\n        _rewardToken.safeApprove(address(_flywheel), type(uint256).max);\r\n    }\r\n\r\n    modifier onlyFlywheel() {\r\n        if (msg.sender != address(flywheel)) revert FlywheelError();\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/FlywheelDynamicRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport {BaseFlywheelRewards} from \"./BaseFlywheelRewards.sol\";\r\nimport {IonicFlywheelCore} from \"../IonicFlywheelCore.sol\";\r\nimport {SafeTransferLib, ERC20} from \"solmate/utils/SafeTransferLib.sol\";\r\nimport {SafeCastLib} from \"solmate/utils/SafeCastLib.sol\";\r\n\r\n/** \r\n @title Flywheel Dynamic Reward Stream\r\n @notice Determines rewards based on a dynamic reward stream.\r\n         Rewards are transferred linearly over a \"rewards cycle\" to prevent gaming the reward distribution. \r\n         The reward source can be arbitrary logic, but most common is to \"pass through\" rewards from some other source.\r\n         The getNextCycleRewards() hook should also transfer the next cycle's rewards to this contract to ensure proper accounting.\r\n*/\r\nabstract contract FlywheelDynamicRewards is BaseFlywheelRewards {\r\n    using SafeTransferLib for ERC20;\r\n    using SafeCastLib for uint256;\r\n\r\n    event NewRewardsCycle(uint32 indexed start, uint32 indexed end, uint192 reward);\r\n\r\n    /// @notice the length of a rewards cycle\r\n    uint32 public immutable rewardsCycleLength;\r\n\r\n    struct RewardsCycle {\r\n        uint32 start;\r\n        uint32 end;\r\n        uint192 reward;\r\n    }\r\n\r\n    mapping(ERC20 => RewardsCycle) public rewardsCycle;\r\n\r\n    constructor(IonicFlywheelCore _flywheel, uint32 _rewardsCycleLength) BaseFlywheelRewards(_flywheel) {\r\n        rewardsCycleLength = _rewardsCycleLength;\r\n    }\r\n\r\n    /**\r\n     @notice calculate and transfer accrued rewards to flywheel core\r\n     @param strategy the strategy to accrue rewards for\r\n     @return amount the amount of tokens accrued and transferred\r\n     */\r\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp)\r\n        external\r\n        override\r\n        onlyFlywheel\r\n        returns (uint256 amount)\r\n    {\r\n        RewardsCycle memory cycle = rewardsCycle[strategy];\r\n\r\n        uint32 timestamp = block.timestamp.safeCastTo32();\r\n\r\n        uint32 latest = timestamp >= cycle.end ? cycle.end : timestamp;\r\n        uint32 earliest = lastUpdatedTimestamp <= cycle.start ? cycle.start : lastUpdatedTimestamp;\r\n        if (cycle.end != 0) {\r\n            amount = (cycle.reward * (latest - earliest)) / (cycle.end - cycle.start);\r\n            assert(amount <= cycle.reward); // should never happen because latest <= cycle.end and earliest >= cycle.start\r\n        }\r\n        // if cycle has ended, reset cycle and transfer all available\r\n        if (timestamp >= cycle.end) {\r\n            uint32 end = ((timestamp + rewardsCycleLength) / rewardsCycleLength) * rewardsCycleLength;\r\n            uint192 rewards = getNextCycleRewards(strategy);\r\n\r\n            // reset for next cycle\r\n            rewardsCycle[strategy] = RewardsCycle({start: timestamp, end: end, reward: rewards});\r\n\r\n            emit NewRewardsCycle(timestamp, end, rewards);\r\n        }\r\n    }\r\n\r\n    function getNextCycleRewards(ERC20 strategy) internal virtual returns (uint192);\r\n}"
    },
    "contracts/ionic/strategies/flywheel/rewards/FlywheelStaticRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport {Auth, Authority} from \"solmate/auth/Auth.sol\";\r\nimport {BaseFlywheelRewards} from \"./BaseFlywheelRewards.sol\";\r\nimport {ERC20} from \"solmate/utils/SafeTransferLib.sol\";\r\nimport {IonicFlywheelCore} from \"../IonicFlywheelCore.sol\";\r\n\r\n/** \r\n @title Flywheel Static Reward Stream\r\n @notice Determines rewards per strategy based on a fixed reward rate per second\r\n*/\r\ncontract FlywheelStaticRewards is Auth, BaseFlywheelRewards {\r\n    event RewardsInfoUpdate(ERC20 indexed strategy, uint224 rewardsPerSecond, uint32 rewardsEndTimestamp);\r\n\r\n    struct RewardsInfo {\r\n        /// @notice Rewards per second\r\n        uint224 rewardsPerSecond;\r\n        /// @notice The timestamp the rewards end at\r\n        /// @dev use 0 to specify no end\r\n        uint32 rewardsEndTimestamp;\r\n    }\r\n\r\n    /// @notice rewards info per strategy\r\n    mapping(ERC20 => RewardsInfo) public rewardsInfo;\r\n\r\n    constructor(\r\n        IonicFlywheelCore _flywheel,\r\n        address _owner,\r\n        Authority _authority\r\n    ) Auth(_owner, _authority) BaseFlywheelRewards(_flywheel) {}\r\n\r\n    /**\r\n     @notice set rewards per second and rewards end time for Fei Rewards\r\n     @param strategy the strategy to accrue rewards for\r\n     @param rewards the rewards info for the strategy\r\n     */\r\n    function setRewardsInfo(ERC20 strategy, RewardsInfo calldata rewards) external requiresAuth {\r\n        rewardsInfo[strategy] = rewards;\r\n        emit RewardsInfoUpdate(strategy, rewards.rewardsPerSecond, rewards.rewardsEndTimestamp);\r\n    }\r\n\r\n    /**\r\n     @notice calculate and transfer accrued rewards to flywheel core\r\n     @param strategy the strategy to accrue rewards for\r\n     @param lastUpdatedTimestamp the last updated time for strategy\r\n     @return amount the amount of tokens accrued and transferred\r\n     */\r\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp)\r\n        external\r\n        view\r\n        override\r\n        onlyFlywheel\r\n        returns (uint256 amount)\r\n    {\r\n        RewardsInfo memory rewards = rewardsInfo[strategy];\r\n\r\n        uint256 elapsed;\r\n        if (rewards.rewardsEndTimestamp == 0 || rewards.rewardsEndTimestamp > block.timestamp) {\r\n            elapsed = block.timestamp - lastUpdatedTimestamp;\r\n        } else if (rewards.rewardsEndTimestamp > lastUpdatedTimestamp) {\r\n            elapsed = rewards.rewardsEndTimestamp - lastUpdatedTimestamp;\r\n        }\r\n\r\n        amount = rewards.rewardsPerSecond * elapsed;\r\n    }\r\n}"
    },
    "contracts/ionic/strategies/flywheel/rewards/IFlywheelRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\r\nimport {IonicFlywheelCore} from \"../IonicFlywheelCore.sol\";\r\n\r\n/**\r\n @title Rewards Module for Flywheel\r\n @notice Flywheel is a general framework for managing token incentives.\r\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\r\n\r\n         The Rewards module is responsible for:\r\n         * determining the ongoing reward amounts to entire strategies (core handles the logic for dividing among users)\r\n         * actually holding rewards that are yet to be claimed\r\n\r\n         The reward stream can follow arbitrary logic as long as the amount of rewards passed to flywheel core has been sent to this contract.\r\n\r\n         Different module strategies include:\r\n         * a static reward rate per second\r\n         * a decaying reward rate\r\n         * a dynamic just-in-time reward stream\r\n         * liquid governance reward delegation (Curve Gauge style)\r\n\r\n         SECURITY NOTE: The rewards strategy should be smooth and continuous, to prevent gaming the reward distribution by frontrunning.\r\n */\r\ninterface IFlywheelRewards {\r\n    /**\r\n     @notice calculate the rewards amount accrued to a strategy since the last update.\r\n     @param strategy the strategy to accrue rewards for.\r\n     @param lastUpdatedTimestamp the last time rewards were accrued for the strategy.\r\n     @return rewards the amount of rewards accrued to the market\r\n    */\r\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp) external returns (uint256 rewards);\r\n\r\n    /// @notice return the flywheel core address\r\n    function flywheel() external view returns (IonicFlywheelCore);\r\n\r\n    /// @notice return the reward token associated with flywheel core.\r\n    function rewardToken() external view returns (ERC20);\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/IonicFlywheelDynamicRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { FlywheelDynamicRewards } from \"./FlywheelDynamicRewards.sol\";\r\nimport { IonicFlywheelCore } from \"../IonicFlywheelCore.sol\";\r\nimport { SafeTransferLib, ERC20 } from \"solmate/utils/SafeTransferLib.sol\";\r\n\r\ncontract IonicFlywheelDynamicRewards is FlywheelDynamicRewards {\r\n    using SafeTransferLib for ERC20;\r\n\r\n    address public owner;\r\n    mapping(address => address) public rewardAccumulators;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(IonicFlywheelCore _flywheel, uint32 _cycleLength)\r\n        FlywheelDynamicRewards(_flywheel, _cycleLength)\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setRewardAccumulators(address[] memory _strategies, address[] memory _rewardAccumulators) external onlyOwner {\r\n        uint256 _length = _strategies.length;\r\n        require(_rewardAccumulators.length == _length, \"parameters\");\r\n        for (uint256 i = 0; i < _length; i++) {\r\n            rewardAccumulators[_strategies[i]] = _rewardAccumulators[i];\r\n        }\r\n    }\r\n\r\n    function getNextCycleRewards(ERC20 strategy)\r\n        internal\r\n        override\r\n        returns (uint192)\r\n    {\r\n        address rewardAccumulator = rewardAccumulators[address(strategy)];\r\n        uint256 rewardAmount = rewardToken.balanceOf(rewardAccumulator);\r\n        if (rewardAmount != 0) {\r\n            rewardToken.safeTransferFrom(\r\n                rewardAccumulator,\r\n                address(this),\r\n                rewardAmount\r\n            );\r\n        }\r\n        return uint192(rewardAmount);\r\n    }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/IonicFlywheelDynamicRewardsPlugin.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./FlywheelDynamicRewards.sol\";\r\n\r\ninterface ICERC20 {\r\n    function plugin() external returns (address);\r\n}\r\n\r\ninterface IPlugin_FDR {\r\n    function claimRewards() external;\r\n}\r\n\r\n/** \r\n @title Ionic Flywheel Dynamic Reward Stream\r\n @notice Determines rewards based on reward cycle\r\n Each cycle, claims rewards on the plugin before getting the reward amount\r\n*/\r\ncontract IonicFlywheelDynamicRewardsPlugin is FlywheelDynamicRewards {\r\n    using SafeTransferLib for ERC20;\r\n\r\n    constructor(IonicFlywheelCore _flywheel, uint32 _cycleLength)\r\n        FlywheelDynamicRewards(_flywheel, _cycleLength)\r\n    {}\r\n\r\n    function getNextCycleRewards(ERC20 strategy)\r\n        internal\r\n        override\r\n        returns (uint192)\r\n    {\r\n        IPlugin_FDR plugin = IPlugin_FDR(ICERC20(address(strategy)).plugin());\r\n        try plugin.claimRewards() {} catch {}\r\n\r\n        uint256 rewardAmount = rewardToken.balanceOf(address(strategy));\r\n        if (rewardAmount != 0) {\r\n            rewardToken.safeTransferFrom(\r\n                address(strategy),\r\n                address(this),\r\n                rewardAmount\r\n            );\r\n        }\r\n        return uint192(rewardAmount);\r\n    }\r\n}"
    },
    "contracts/ionic/strategies/flywheel/rewards/ReplacingFlywheelDynamicRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { FlywheelDynamicRewards } from \"./FlywheelDynamicRewards.sol\";\r\nimport { IonicFlywheelCore } from \"../IonicFlywheelCore.sol\";\r\nimport { Auth, Authority } from \"solmate/auth/Auth.sol\";\r\nimport { SafeTransferLib, ERC20 } from \"solmate/utils/SafeTransferLib.sol\";\r\n\r\ninterface ICERC20_RFDR {\r\n  function plugin() external returns (address);\r\n}\r\n\r\ninterface IPlugin_RFDR {\r\n  function claimRewards() external;\r\n}\r\n\r\ncontract ReplacingFlywheelDynamicRewards is FlywheelDynamicRewards {\r\n  using SafeTransferLib for ERC20;\r\n\r\n  IonicFlywheelCore public replacedFlywheel;\r\n\r\n  constructor(\r\n    IonicFlywheelCore _replacedFlywheel,\r\n    IonicFlywheelCore _flywheel,\r\n    uint32 _cycleLength\r\n  ) FlywheelDynamicRewards(_flywheel, _cycleLength) {\r\n    replacedFlywheel = _replacedFlywheel;\r\n    // rewardToken.safeApprove(address(_replacedFlywheel), type(uint256).max);\r\n  }\r\n\r\n  function getNextCycleRewards(ERC20 strategy) internal override returns (uint192) {\r\n    if (msg.sender == address(replacedFlywheel)) {\r\n      return 0;\r\n    } else {\r\n      // make it work for both pulled (claimed) and pushed (transferred some other way) rewards\r\n      try ICERC20_RFDR(address(strategy)).plugin() returns (address plugin) {\r\n        try IPlugin_RFDR(plugin).claimRewards() {} catch {}\r\n      } catch {}\r\n\r\n      uint256 rewardAmount = rewardToken.balanceOf(address(strategy));\r\n      if (rewardAmount != 0) {\r\n        rewardToken.safeTransferFrom(address(strategy), address(this), rewardAmount);\r\n      }\r\n      return uint192(rewardAmount);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/ReplacingFlywheelStaticRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { FlywheelStaticRewards } from \"./FlywheelStaticRewards.sol\";\r\nimport { IonicFlywheelCore } from \"../IonicFlywheelCore.sol\";\r\nimport { Auth, Authority } from \"solmate/auth/Auth.sol\";\r\nimport { SafeTransferLib, ERC20 } from \"solmate/utils/SafeTransferLib.sol\";\r\n\r\ncontract ReplacingFlywheelStaticRewards is FlywheelStaticRewards {\r\n  using SafeTransferLib for ERC20;\r\n\r\n  IonicFlywheelCore public replacedFlywheel;\r\n\r\n  constructor(\r\n    IonicFlywheelCore _replacedFlywheel,\r\n    IonicFlywheelCore _flywheel,\r\n    address _owner,\r\n    Authority _authority\r\n  ) FlywheelStaticRewards(_flywheel, _owner, _authority) {\r\n    ERC20 _rewardToken = _flywheel.rewardToken();\r\n    _rewardToken.safeApprove(address(_replacedFlywheel), type(uint256).max);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/WithdrawableFlywheelStaticRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { FlywheelStaticRewards } from \"./FlywheelStaticRewards.sol\";\r\nimport { IonicFlywheelCore } from \"../IonicFlywheelCore.sol\";\r\nimport { Auth, Authority } from \"solmate/auth/Auth.sol\";\r\nimport { SafeTransferLib, ERC20 } from \"solmate/utils/SafeTransferLib.sol\";\r\n\r\ncontract WithdrawableFlywheelStaticRewards is FlywheelStaticRewards {\r\n  using SafeTransferLib for ERC20;\r\n\r\n  constructor(\r\n    IonicFlywheelCore _flywheel,\r\n    address _owner,\r\n    Authority _authority\r\n  ) FlywheelStaticRewards(_flywheel, _owner, _authority) {}\r\n\r\n  function withdraw(uint256 amount) external {\r\n    require(msg.sender == flywheel.owner());\r\n    rewardToken.safeTransfer(address(flywheel.owner()), amount);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/MockERC4626Dynamic.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\n\r\nimport { ERC4626 } from \"solmate/mixins/ERC4626.sol\";\r\nimport { FixedPointMathLib } from \"solmate/utils/FixedPointMathLib.sol\";\r\nimport { IonicFlywheelCore } from \"./flywheel/IonicFlywheelCore.sol\";\r\n\r\n/**\r\n * @title Mock ERC4626 Contract\r\n * @notice ERC4626 wrapper for Tribe Token\r\n * @author carlomazzaferro\r\n *\r\n */\r\ncontract MockERC4626Dynamic is ERC4626 {\r\n  using FixedPointMathLib for uint256;\r\n\r\n  /* ========== STATE VARIABLES ========== */\r\n  IonicFlywheelCore public immutable flywheel;\r\n\r\n  /* ========== INITIALIZER ========== */\r\n\r\n  /**\r\n     @notice Initializes the Vault.\r\n     @param _asset The ERC20 compliant token the Vault should accept.\r\n     @param _flywheel Flywheel to pull in rewardsToken\r\n    */\r\n  constructor(ERC20 _asset, IonicFlywheelCore _flywheel)\r\n    ERC4626(\r\n      _asset,\r\n      string(abi.encodePacked(\"Midas \", _asset.name(), \" Vault\")),\r\n      string(abi.encodePacked(\"mv\", _asset.symbol()))\r\n    )\r\n  {\r\n    flywheel = _flywheel;\r\n  }\r\n\r\n  /* ========== VIEWS ========== */\r\n\r\n  /// @notice Calculates the total amount of underlying tokens the Vault holds.\r\n  /// @return The total amount of underlying tokens the Vault holds.\r\n  function totalAssets() public view override returns (uint256) {\r\n    return asset.balanceOf(address(this));\r\n  }\r\n\r\n  /// @notice Calculates the total amount of underlying tokens the user holds.\r\n  /// @return The total amount of underlying tokens the user holds.\r\n  function balanceOfUnderlying(address account) public view returns (uint256) {\r\n    return convertToAssets(balanceOf[account]);\r\n  }\r\n\r\n  /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n  function afterDeposit(uint256 amount, uint256) internal override {}\r\n\r\n  function beforeWithdraw(uint256, uint256 shares) internal override {}\r\n}\r\n"
    },
    "contracts/liquidators/IFundsConversionStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./IRedemptionStrategy.sol\";\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface IFundsConversionStrategy is IRedemptionStrategy {\r\n  function convert(\r\n    IERC20Upgradeable inputToken,\r\n    uint256 inputAmount,\r\n    bytes memory strategyData\r\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\r\n\r\n  function estimateInputAmount(\r\n    uint256 outputAmount,\r\n    bytes memory strategyData\r\n  ) external view returns (IERC20Upgradeable inputToken, uint256 inputAmount);\r\n}\r\n"
    },
    "contracts/liquidators/IRedemptionStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\n/**\r\n * @title IRedemptionStrategy\r\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\r\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\r\n */\r\ninterface IRedemptionStrategy {\r\n  /**\r\n   * @notice Redeems custom collateral `token` for an underlying token.\r\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\r\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\r\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\r\n   * @return outputToken The underlying ERC20 token outputted.\r\n   * @return outputAmount The quantity of underlying tokens outputted.\r\n   */\r\n  function redeem(\r\n    IERC20Upgradeable inputToken,\r\n    uint256 inputAmount,\r\n    bytes memory strategyData\r\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\r\n\r\n  function name() external view returns (string memory);\r\n}\r\n"
    },
    "contracts/liquidators/registry/ILiquidatorsRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\ninterface ILiquidatorsRegistryStorage {\r\n  function redemptionStrategiesByName(string memory name) external view returns (IRedemptionStrategy);\r\n\r\n  function redemptionStrategiesByTokens(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external view returns (IRedemptionStrategy);\r\n\r\n  function defaultOutputToken(IERC20Upgradeable inputToken) external view returns (IERC20Upgradeable);\r\n\r\n  function owner() external view returns (address);\r\n\r\n  function uniswapV3Fees(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external view returns (uint24);\r\n\r\n  function customUniV3Router(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external view returns (address);\r\n}\r\n\r\ninterface ILiquidatorsRegistryExtension {\r\n  function getInputTokensByOutputToken(IERC20Upgradeable outputToken) external view returns (address[] memory);\r\n\r\n  function getRedemptionStrategies(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external view returns (IRedemptionStrategy[] memory strategies, bytes[] memory strategiesData);\r\n\r\n  function getRedemptionStrategy(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external view returns (IRedemptionStrategy strategy, bytes memory strategyData);\r\n\r\n  function getAllRedemptionStrategies() external view returns (address[] memory);\r\n\r\n  function getSlippage(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external view returns (uint256 slippage);\r\n\r\n  function swap(\r\n    IERC20Upgradeable inputToken,\r\n    uint256 inputAmount,\r\n    IERC20Upgradeable outputToken\r\n  ) external returns (uint256);\r\n\r\n  function amountOutAndSlippageOfSwap(\r\n    IERC20Upgradeable inputToken,\r\n    uint256 inputAmount,\r\n    IERC20Upgradeable outputToken\r\n  ) external returns (uint256 outputAmount, uint256 slippage);\r\n}\r\n\r\ninterface ILiquidatorsRegistrySecondExtension {\r\n  function getAllPairsStrategies()\r\n    external\r\n    view\r\n    returns (\r\n      IRedemptionStrategy[] memory strategies,\r\n      IERC20Upgradeable[] memory inputTokens,\r\n      IERC20Upgradeable[] memory outputTokens\r\n    );\r\n\r\n  function pairsStrategiesMatch(\r\n    IRedemptionStrategy[] calldata configStrategies,\r\n    IERC20Upgradeable[] calldata configInputTokens,\r\n    IERC20Upgradeable[] calldata configOutputTokens\r\n  ) external view returns (bool);\r\n\r\n  function uniswapPairsFeesMatch(\r\n    IERC20Upgradeable[] calldata configInputTokens,\r\n    IERC20Upgradeable[] calldata configOutputTokens,\r\n    uint256[] calldata configFees\r\n  ) external view returns (bool);\r\n\r\n  function uniswapPairsRoutersMatch(\r\n    IERC20Upgradeable[] calldata configInputTokens,\r\n    IERC20Upgradeable[] calldata configOutputTokens,\r\n    address[] calldata configRouters\r\n  ) external view returns (bool);\r\n\r\n  function _setRedemptionStrategy(\r\n    IRedemptionStrategy strategy,\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external;\r\n\r\n  function _setRedemptionStrategies(\r\n    IRedemptionStrategy[] calldata strategies,\r\n    IERC20Upgradeable[] calldata inputTokens,\r\n    IERC20Upgradeable[] calldata outputTokens\r\n  ) external;\r\n\r\n  function _resetRedemptionStrategies(\r\n    IRedemptionStrategy[] calldata strategies,\r\n    IERC20Upgradeable[] calldata inputTokens,\r\n    IERC20Upgradeable[] calldata outputTokens\r\n  ) external;\r\n\r\n  function _removeRedemptionStrategy(IRedemptionStrategy strategyToRemove) external;\r\n\r\n  function _setDefaultOutputToken(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external;\r\n\r\n  function _setUniswapV3Fees(\r\n    IERC20Upgradeable[] calldata inputTokens,\r\n    IERC20Upgradeable[] calldata outputTokens,\r\n    uint24[] calldata fees\r\n  ) external;\r\n\r\n  function _setUniswapV3Routers(\r\n    IERC20Upgradeable[] calldata inputTokens,\r\n    IERC20Upgradeable[] calldata outputTokens,\r\n    address[] calldata routers\r\n  ) external;\r\n\r\n  function _setSlippages(\r\n    IERC20Upgradeable[] calldata inputTokens,\r\n    IERC20Upgradeable[] calldata outputTokens,\r\n    uint256[] calldata slippages\r\n  ) external;\r\n\r\n  function optimalSwapPath(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken\r\n  ) external view returns (IERC20Upgradeable[] memory);\r\n\r\n  function _setOptimalSwapPath(\r\n    IERC20Upgradeable inputToken,\r\n    IERC20Upgradeable outputToken,\r\n    IERC20Upgradeable[] calldata optimalPath\r\n  ) external;\r\n\r\n  function wrappedToUnwrapped4626(address wrapped) external view returns (address);\r\n\r\n  function _setWrappedToUnwrapped4626(address wrapped, address unwrapped) external;\r\n\r\n  function aeroCLTickSpacings(address inputToken, address outputToken) external view returns (int24);\r\n\r\n  function _setAeroCLTickSpacings(address inputToken, address outputToken, int24 tickSpacing) external;\r\n\r\n  function aeroV2IsStable(address inputToken, address outputToken) external view returns (bool);\r\n\r\n  function _setAeroV2IsStable(address inputToken, address outputToken, bool isStable) external;\r\n}\r\n\r\ninterface ILiquidatorsRegistry is\r\n  ILiquidatorsRegistryExtension,\r\n  ILiquidatorsRegistrySecondExtension,\r\n  ILiquidatorsRegistryStorage\r\n{}\r\n"
    },
    "contracts/oracles/BasePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../compound/CTokenInterfaces.sol\";\r\n\r\n/**\r\n * @title BasePriceOracle\r\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\r\n * @dev Implements the `PriceOracle` interface.\r\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\r\n */\r\ninterface BasePriceOracle {\r\n  /**\r\n   * @notice Get the price of an underlying asset.\r\n   * @param underlying The underlying asset to get the price of.\r\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\r\n   * Zero means the price is unavailable.\r\n   */\r\n  function price(address underlying) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the underlying price of a cToken asset\r\n   * @param cToken The cToken to get the underlying price of\r\n   * @return The underlying asset price mantissa (scaled by 1e18).\r\n   *  Zero means the price is unavailable.\r\n   */\r\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/PoolDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol\";\r\n\r\nimport { IonicComptroller } from \"./compound/ComptrollerInterface.sol\";\r\nimport { BasePriceOracle } from \"./oracles/BasePriceOracle.sol\";\r\nimport { Unitroller } from \"./compound/Unitroller.sol\";\r\nimport \"./ionic/SafeOwnableUpgradeable.sol\";\r\nimport \"./ionic/DiamondExtension.sol\";\r\n\r\n/**\r\n * @title PoolDirectory\r\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\r\n * @notice PoolDirectory is a directory for Ionic interest rate pools.\r\n */\r\ncontract PoolDirectory is SafeOwnableUpgradeable {\r\n  /**\r\n   * @dev Initializes a deployer whitelist if desired.\r\n   * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\r\n   * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\r\n   */\r\n  function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\r\n    __SafeOwnable_init(msg.sender);\r\n    enforceDeployerWhitelist = _enforceDeployerWhitelist;\r\n    for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Struct for a Ionic interest rate pool.\r\n   */\r\n  struct Pool {\r\n    string name;\r\n    address creator;\r\n    address comptroller;\r\n    uint256 blockPosted;\r\n    uint256 timestampPosted;\r\n  }\r\n\r\n  /**\r\n   * @dev Array of Ionic interest rate pools.\r\n   */\r\n  Pool[] public pools;\r\n\r\n  /**\r\n   * @dev Maps Ethereum accounts to arrays of Ionic pool indexes.\r\n   */\r\n  mapping(address => uint256[]) private _poolsByAccount;\r\n\r\n  /**\r\n   * @dev Maps Ionic pool Comptroller addresses to bools indicating if they have been registered via the directory.\r\n   */\r\n  mapping(address => bool) public poolExists;\r\n\r\n  /**\r\n   * @dev Emitted when a new Ionic pool is added to the directory.\r\n   */\r\n  event PoolRegistered(uint256 index, Pool pool);\r\n\r\n  /**\r\n   * @dev Booleans indicating if the deployer whitelist is enforced.\r\n   */\r\n  bool public enforceDeployerWhitelist;\r\n\r\n  /**\r\n   * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\r\n   */\r\n  mapping(address => bool) public deployerWhitelist;\r\n\r\n  /**\r\n   * @dev Controls if the deployer whitelist is to be enforced.\r\n   * @param enforce Boolean indicating if the deployer whitelist is to be enforced.\r\n   */\r\n  function _setDeployerWhitelistEnforcement(bool enforce) external onlyOwner {\r\n    enforceDeployerWhitelist = enforce;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds/removes Ethereum accounts to the deployer whitelist.\r\n   * @param deployers Array of Ethereum accounts to be whitelisted.\r\n   * @param status Whether to add or remove the accounts.\r\n   */\r\n  function _editDeployerWhitelist(address[] calldata deployers, bool status) external onlyOwner {\r\n    require(deployers.length > 0, \"No deployers supplied.\");\r\n    for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = status;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds a new Ionic pool to the directory (without checking msg.sender).\r\n   * @param name The name of the pool.\r\n   * @param comptroller The pool's Comptroller proxy contract address.\r\n   * @return The index of the registered Ionic pool.\r\n   */\r\n  function _registerPool(string memory name, address comptroller) internal returns (uint256) {\r\n    require(!poolExists[comptroller], \"Pool already exists in the directory.\");\r\n    require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \"Sender is not on deployer whitelist.\");\r\n    require(bytes(name).length <= 100, \"No pool name supplied.\");\r\n    Pool memory pool = Pool(name, msg.sender, comptroller, block.number, block.timestamp);\r\n    pools.push(pool);\r\n    _poolsByAccount[msg.sender].push(pools.length - 1);\r\n    poolExists[comptroller] = true;\r\n    emit PoolRegistered(pools.length - 1, pool);\r\n    return pools.length - 1;\r\n  }\r\n\r\n  function _deprecatePool(address comptroller) external onlyOwner {\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller == comptroller) {\r\n        _deprecatePool(i);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _deprecatePool(uint256 index) public onlyOwner {\r\n    Pool storage ionicPool = pools[index];\r\n\r\n    require(ionicPool.comptroller != address(0), \"pool already deprecated\");\r\n\r\n    // swap with the last pool of the creator and delete\r\n    uint256[] storage creatorPools = _poolsByAccount[ionicPool.creator];\r\n    for (uint256 i = 0; i < creatorPools.length; i++) {\r\n      if (creatorPools[i] == index) {\r\n        creatorPools[i] = creatorPools[creatorPools.length - 1];\r\n        creatorPools.pop();\r\n        break;\r\n      }\r\n    }\r\n\r\n    // leave it to true to deny the re-registering of the same pool\r\n    poolExists[ionicPool.comptroller] = true;\r\n\r\n    // nullify the storage\r\n    ionicPool.comptroller = address(0);\r\n    ionicPool.creator = address(0);\r\n    ionicPool.name = \"\";\r\n    ionicPool.blockPosted = 0;\r\n    ionicPool.timestampPosted = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Deploys a new Ionic pool and adds to the directory.\r\n   * @param name The name of the pool.\r\n   * @param implementation The Comptroller implementation contract address.\r\n   * @param constructorData Encoded construction data for `Unitroller constructor()`\r\n   * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\r\n   * @param closeFactor The pool's close factor (scaled by 1e18).\r\n   * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\r\n   * @param priceOracle The pool's PriceOracle contract address.\r\n   * @return Index of the registered Ionic pool and the Unitroller proxy address.\r\n   */\r\n  function deployPool(\r\n    string memory name,\r\n    address implementation,\r\n    bytes calldata constructorData,\r\n    bool enforceWhitelist,\r\n    uint256 closeFactor,\r\n    uint256 liquidationIncentive,\r\n    address priceOracle\r\n  ) external returns (uint256, address) {\r\n    // Input validation\r\n    require(implementation != address(0), \"No Comptroller implementation contract address specified.\");\r\n    require(priceOracle != address(0), \"No PriceOracle contract address specified.\");\r\n\r\n    // Deploy Unitroller using msg.sender, name, and block.number as a salt\r\n    bytes memory unitrollerCreationCode = abi.encodePacked(type(Unitroller).creationCode, constructorData);\r\n    address proxy = Create2Upgradeable.deploy(\r\n      0,\r\n      keccak256(abi.encodePacked(msg.sender, name, ++poolsCounter)),\r\n      unitrollerCreationCode\r\n    );\r\n\r\n    // Setup the pool\r\n    IonicComptroller comptrollerProxy = IonicComptroller(proxy);\r\n    // Set up the extensions\r\n    comptrollerProxy._upgrade();\r\n\r\n    // Set pool parameters\r\n    require(comptrollerProxy._setCloseFactor(closeFactor) == 0, \"Failed to set pool close factor.\");\r\n    require(\r\n      comptrollerProxy._setLiquidationIncentive(liquidationIncentive) == 0,\r\n      \"Failed to set pool liquidation incentive.\"\r\n    );\r\n    require(comptrollerProxy._setPriceOracle(BasePriceOracle(priceOracle)) == 0, \"Failed to set pool price oracle.\");\r\n\r\n    // Whitelist\r\n    if (enforceWhitelist)\r\n      require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \"Failed to enforce supplier/borrower whitelist.\");\r\n\r\n    // Make msg.sender the admin\r\n    require(comptrollerProxy._setPendingAdmin(msg.sender) == 0, \"Failed to set pending admin on Unitroller.\");\r\n\r\n    // Register the pool with this PoolDirectory\r\n    return (_registerPool(name, proxy), proxy);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns `ids` and directory information of all non-deprecated Ionic pools.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getActivePools() public view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 count = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller != address(0)) count++;\r\n    }\r\n\r\n    Pool[] memory activePools = new Pool[](count);\r\n    uint256[] memory poolIds = new uint256[](count);\r\n\r\n    uint256 index = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller != address(0)) {\r\n        poolIds[index] = i;\r\n        activePools[index] = pools[i];\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return (poolIds, activePools);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all Ionic pools' data.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getAllPools() public view returns (Pool[] memory) {\r\n    uint256 count = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller != address(0)) count++;\r\n    }\r\n\r\n    Pool[] memory result = new Pool[](count);\r\n\r\n    uint256 index = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller != address(0)) {\r\n        result[index++] = pools[i];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all public Ionic pool indexes and data.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getPublicPools() external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 arrayLength = 0;\r\n\r\n    (, Pool[] memory activePools) = getActivePools();\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      try IonicComptroller(activePools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\r\n        if (enforceWhitelist) continue;\r\n      } catch {}\r\n\r\n      arrayLength++;\r\n    }\r\n\r\n    uint256[] memory indexes = new uint256[](arrayLength);\r\n    Pool[] memory publicPools = new Pool[](arrayLength);\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      try IonicComptroller(activePools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\r\n        if (enforceWhitelist) continue;\r\n      } catch {}\r\n\r\n      indexes[index] = i;\r\n      publicPools[index] = activePools[i];\r\n      index++;\r\n    }\r\n\r\n    return (indexes, publicPools);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all public Ionic pool indexes and data.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getPoolsOfUser(address user) external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 arrayLength = 0;\r\n\r\n    (, Pool[] memory activePools) = getActivePools();\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      try IonicComptroller(activePools[i].comptroller).isUserOfPool(user) returns (bool isUsing) {\r\n        if (!isUsing) continue;\r\n      } catch {}\r\n\r\n      arrayLength++;\r\n    }\r\n\r\n    uint256[] memory indexes = new uint256[](arrayLength);\r\n    Pool[] memory poolsOfUser = new Pool[](arrayLength);\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      try IonicComptroller(activePools[i].comptroller).isUserOfPool(user) returns (bool isUsing) {\r\n        if (!isUsing) continue;\r\n      } catch {}\r\n\r\n      indexes[index] = i;\r\n      poolsOfUser[index] = activePools[i];\r\n      index++;\r\n    }\r\n\r\n    return (indexes, poolsOfUser);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of Ionic pool indexes and data created by `account`.\r\n   */\r\n  function getPoolsByAccount(address account) external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\r\n    Pool[] memory accountPools = new Pool[](_poolsByAccount[account].length);\r\n    (, Pool[] memory activePools) = getActivePools();\r\n\r\n    for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\r\n      indexes[i] = _poolsByAccount[account][i];\r\n      accountPools[i] = activePools[_poolsByAccount[account][i]];\r\n    }\r\n\r\n    return (indexes, accountPools);\r\n  }\r\n\r\n  /**\r\n   * @notice Modify existing Ionic pool name.\r\n   */\r\n  function setPoolName(uint256 index, string calldata name) external {\r\n    IonicComptroller _comptroller = IonicComptroller(pools[index].comptroller);\r\n    require(\r\n      (msg.sender == _comptroller.admin() && _comptroller.adminHasRights()) || msg.sender == owner(),\r\n      \"!permission\"\r\n    );\r\n    pools[index].name = name;\r\n  }\r\n\r\n  /**\r\n   * @dev Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\r\n   */\r\n  mapping(address => bool) public adminWhitelist;\r\n\r\n  /**\r\n   * @dev used as salt for the creation of new pools\r\n   */\r\n  uint256 public poolsCounter;\r\n\r\n  /**\r\n   * @dev Event emitted when the admin whitelist is updated.\r\n   */\r\n  event AdminWhitelistUpdated(address[] admins, bool status);\r\n\r\n  /**\r\n   * @dev Adds/removes Ethereum accounts to the admin whitelist.\r\n   * @param admins Array of Ethereum accounts to be whitelisted.\r\n   * @param status Whether to add or remove the accounts.\r\n   */\r\n  function _editAdminWhitelist(address[] calldata admins, bool status) external onlyOwner {\r\n    require(admins.length > 0, \"No admins supplied.\");\r\n    for (uint256 i = 0; i < admins.length; i++) adminWhitelist[admins[i]] = status;\r\n    emit AdminWhitelistUpdated(admins, status);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all Ionic pool indexes and data with whitelisted admins.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getPublicPoolsByVerification(bool whitelistedAdmin) external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 arrayLength = 0;\r\n\r\n    (, Pool[] memory activePools) = getActivePools();\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\r\n\r\n      try comptroller.admin() returns (address admin) {\r\n        if (whitelistedAdmin != adminWhitelist[admin]) continue;\r\n      } catch {}\r\n\r\n      arrayLength++;\r\n    }\r\n\r\n    uint256[] memory indexes = new uint256[](arrayLength);\r\n    Pool[] memory publicPools = new Pool[](arrayLength);\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\r\n\r\n      try comptroller.admin() returns (address admin) {\r\n        if (whitelistedAdmin != adminWhitelist[admin]) continue;\r\n      } catch {}\r\n\r\n      indexes[index] = i;\r\n      publicPools[index] = activePools[i];\r\n      index++;\r\n    }\r\n\r\n    return (indexes, publicPools);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all verified Ionic pool indexes and data for which the account is whitelisted\r\n   * @param account who is whitelisted in the returned verified whitelist-enabled pools.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getVerifiedPoolsOfWhitelistedAccount(\r\n    address account\r\n  ) external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 arrayLength = 0;\r\n    (, Pool[] memory activePools) = getActivePools();\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\r\n\r\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\r\n        if (!enforceWhitelist || !comptroller.whitelist(account)) continue;\r\n      } catch {}\r\n\r\n      arrayLength++;\r\n    }\r\n\r\n    uint256[] memory indexes = new uint256[](arrayLength);\r\n    Pool[] memory accountWhitelistedPools = new Pool[](arrayLength);\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\r\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\r\n        if (!enforceWhitelist || !comptroller.whitelist(account)) continue;\r\n      } catch {}\r\n\r\n      indexes[index] = i;\r\n      accountWhitelistedPools[index] = activePools[i];\r\n      index++;\r\n    }\r\n\r\n    return (indexes, accountWhitelistedPools);\r\n  }\r\n}\r\n"
    },
    "contracts/test/EmissionsManager/mocks/MockIonicComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport { ICErc20 } from \"../../../compound/CTokenInterfaces.sol\";\r\nimport { IonicFlywheelCore } from \"../../../ionic/strategies/flywheel/IonicFlywheelCore.sol\";\r\n\r\ncontract MockIonicComptroller {\r\n    address public oracle;\r\n    address public asset;\r\n    address public flywheel;\r\n\r\n    // Allows setting mock eth values for testing purposes\r\n    function setOracle(address _oracle) external {\r\n        oracle = _oracle;\r\n    }\r\n\r\n    function setAssetsIn(address _asset) external {\r\n        asset = _asset;\r\n    }\r\n\r\n    function setFlywheel(address _flywheel) external {\r\n        flywheel = _flywheel;\r\n    }\r\n    function getAssetsIn(address _user) public view returns (ICErc20[] memory)  {\r\n        ICErc20[] memory assets = new ICErc20[](1);    \r\n        assets[0] = ICErc20(asset); \r\n        return assets;\r\n    }\r\n\r\n    function getAllMarkets() public view returns (ICErc20[] memory)  {\r\n        ICErc20[] memory assets = new ICErc20[](1);    \r\n        assets[0] = ICErc20(asset); \r\n        return assets;\r\n    }\r\n\r\n    function getAccruingFlywheels() public view returns (IonicFlywheelCore[] memory)  {\r\n        IonicFlywheelCore[] memory flywheels = new IonicFlywheelCore[](1);    \r\n        flywheels[0] = IonicFlywheelCore(flywheel); \r\n        return flywheels;\r\n    }\r\n}"
    },
    "contracts/test/IonicFlywheel/lib/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"
    },
    "contracts/test/IonicFlywheel/mocks/MockRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport \"../../../ionic/strategies/flywheel/rewards/BaseFlywheelRewards.sol\";\r\n\r\ncontract MockRewards is BaseFlywheelRewards {\r\n    /// @notice rewards amount per strategy\r\n    mapping(ERC20 => uint256) public rewardsAmount;\r\n\r\n    constructor(IonicFlywheelCore _flywheel) BaseFlywheelRewards(_flywheel) {}\r\n\r\n    function setRewardsAmount(ERC20 strategy, uint256 amount) external {\r\n        rewardsAmount[strategy] = amount;\r\n    }\r\n\r\n    function getAccruedRewards(ERC20 strategy, uint32) external view override onlyFlywheel returns (uint256 amount) {\r\n        return rewardsAmount[strategy];\r\n    }\r\n}\r\n"
    },
    "contracts/test/IonicFlywheel/token/ERC20Gauges.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"solmate/auth/Auth.sol\";\r\nimport \"solmate/tokens/ERC20.sol\";\r\nimport \"solmate/utils/SafeCastLib.sol\";\r\nimport \"../lib/EnumerableSet.sol\";\r\n\r\ninterface Errors_ERC20Gauges {\r\n    /// @notice thrown when attempting to approve an EOA that must be a contract\r\n    error NonContractError();\r\n}\r\n\r\n/** \r\n @title  An ERC20 with an embedded \"Gauge\" style vote with liquid weights\r\n @author Tribe DAO\r\n @notice This contract is meant to be used to support gauge style votes with weights associated with resource allocation.\r\n         Holders can allocate weight in any proportion to supported gauges.\r\n         A \"gauge\" is represented by an address which would receive the resources periodically or continuously.\r\n\r\n         For example, gauges can be used to direct token emissions, similar to Curve or Tokemak.\r\n         Alternatively, gauges can be used to direct another quantity such as relative access to a line of credit.\r\n\r\n         The contract's Authority <https://github.com/Rari-Capital/solmate/blob/main/src/auth/Auth.sol> manages the gauge set and cap.\r\n         \"Live\" gauges are in the set.  \r\n         Users can only add weight to live gauges but can remove weight from live or deprecated gauges.\r\n         Gauges can be deprecated and reinstated, and will maintain any non-removed weight from before.\r\n\r\n @dev    SECURITY NOTES: `maxGauges` is a critical variable to protect against gas DOS attacks upon token transfer. \r\n         This must be low enough to allow complicated transactions to fit in a block.\r\n \r\n         Weight state is preserved on the gauge and user level even when a gauge is removed, in case it is re-added. \r\n         This maintains state efficiently, and global accounting is managed only on the `_totalWeight`\r\n*/\r\nabstract contract ERC20Gauges is ERC20, Auth {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeCastLib for *;\r\n\r\n    constructor(uint32 _gaugeCycleLength, uint32 _incrementFreezeWindow) {\r\n        if (_incrementFreezeWindow >= _gaugeCycleLength) revert IncrementFreezeError();\r\n        gaugeCycleLength = _gaugeCycleLength;\r\n        incrementFreezeWindow = _incrementFreezeWindow;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                        GAUGE STATE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice the length of a gauge cycle\r\n    uint32 public immutable gaugeCycleLength;\r\n\r\n    /// @notice the period at the end of a cycle where votes cannot increment\r\n    uint32 public immutable incrementFreezeWindow;\r\n\r\n    struct Weight {\r\n        uint112 storedWeight;\r\n        uint112 currentWeight;\r\n        uint32 currentCycle;\r\n    }\r\n\r\n    /// @notice a mapping from users to gauges to a user's allocated weight to that gauge\r\n    mapping(address => mapping(address => uint112)) public getUserGaugeWeight;\r\n\r\n    /// @notice a mapping from a user to their total allocated weight across all gauges\r\n    /// @dev NOTE this may contain weights for deprecated gauges\r\n    mapping(address => uint112) public getUserWeight;\r\n\r\n    /// @notice a mapping from a gauge to the total weight allocated to it\r\n    /// @dev NOTE this may contain weights for deprecated gauges\r\n    mapping(address => Weight) internal _getGaugeWeight;\r\n\r\n    /// @notice the total global allocated weight ONLY of live gauges\r\n    Weight internal _totalWeight;\r\n\r\n    mapping(address => EnumerableSet.AddressSet) internal _userGauges;\r\n\r\n    EnumerableSet.AddressSet internal _gauges;\r\n\r\n    // Store deprecated gauges in case a user needs to free dead weight\r\n    EnumerableSet.AddressSet internal _deprecatedGauges;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              VIEW HELPERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice return the end of the current cycle. This is the next unix timestamp which evenly divides `gaugeCycleLength`\r\n    function getGaugeCycleEnd() public view returns (uint32) {\r\n        return _getGaugeCycleEnd();\r\n    }\r\n\r\n    /// @notice see `getGaugeCycleEnd()`\r\n    function _getGaugeCycleEnd() internal view returns (uint32) {\r\n        uint32 nowPlusOneCycle = block.timestamp.safeCastTo32() + gaugeCycleLength;\r\n        unchecked {\r\n            return (nowPlusOneCycle / gaugeCycleLength) * gaugeCycleLength; // cannot divide by zero and always <= nowPlusOneCycle so no overflow\r\n        }\r\n    }\r\n\r\n    /// @notice returns the current weight of a given gauge\r\n    function getGaugeWeight(address gauge) public view returns (uint112) {\r\n        return _getGaugeWeight[gauge].currentWeight;\r\n    }\r\n\r\n    /// @notice returns the stored weight of a given gauge. This is the snapshotted weight as-of the end of the last cycle.\r\n    function getStoredGaugeWeight(address gauge) public view returns (uint112) {\r\n        if (_deprecatedGauges.contains(gauge)) return 0;\r\n        return _getStoredWeight(_getGaugeWeight[gauge], _getGaugeCycleEnd());\r\n    }\r\n\r\n    /// @notice see `getStoredGaugeWeight()`\r\n    function _getStoredWeight(Weight storage gaugeWeight, uint32 currentCycle) internal view returns (uint112) {\r\n        return gaugeWeight.currentCycle < currentCycle ? gaugeWeight.currentWeight : gaugeWeight.storedWeight;\r\n    }\r\n\r\n    /// @notice returns the current total allocated weight\r\n    function totalWeight() external view returns (uint112) {\r\n        return _totalWeight.currentWeight;\r\n    }\r\n\r\n    /// @notice returns the stored total allocated weight\r\n    function storedTotalWeight() external view returns (uint112) {\r\n        return _getStoredWeight(_totalWeight, _getGaugeCycleEnd());\r\n    }\r\n\r\n    /// @notice returns the set of live gauges\r\n    function gauges() external view returns (address[] memory) {\r\n        return _gauges.values();\r\n    }\r\n\r\n    /** \r\n      @notice returns a paginated subset of live gauges\r\n      @param offset the index of the first gauge element to read\r\n      @param num the number of gauges to return\r\n    */\r\n    function gauges(uint256 offset, uint256 num) external view returns (address[] memory values) {\r\n        values = new address[](num);\r\n        for (uint256 i = 0; i < num; ) {\r\n            unchecked {\r\n                values[i] = _gauges.at(offset + i); // will revert if out of bounds\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice returns true if `gauge` is not in deprecated gauges\r\n    function isGauge(address gauge) external view returns (bool) {\r\n        return _gauges.contains(gauge) && !_deprecatedGauges.contains(gauge);\r\n    }\r\n\r\n    /// @notice returns the number of live gauges\r\n    function numGauges() external view returns (uint256) {\r\n        return _gauges.length();\r\n    }\r\n\r\n    /// @notice returns the set of previously live but now deprecated gauges\r\n    function deprecatedGauges() external view returns (address[] memory) {\r\n        return _deprecatedGauges.values();\r\n    }\r\n\r\n    /// @notice returns the number of live gauges\r\n    function numDeprecatedGauges() external view returns (uint256) {\r\n        return _deprecatedGauges.length();\r\n    }\r\n\r\n    /// @notice returns the set of gauges the user has allocated to, may be live or deprecated.\r\n    function userGauges(address user) external view returns (address[] memory) {\r\n        return _userGauges[user].values();\r\n    }\r\n\r\n    /// @notice returns true if `gauge` is in user gauges\r\n    function isUserGauge(address user, address gauge) external view returns (bool) {\r\n        return _userGauges[user].contains(gauge);\r\n    }\r\n\r\n    /** \r\n      @notice returns a paginated subset of gauges the user has allocated to, may be live or deprecated.\r\n      @param user the user to return gauges from.\r\n      @param offset the index of the first gauge element to read.\r\n      @param num the number of gauges to return.\r\n    */\r\n    function userGauges(\r\n        address user,\r\n        uint256 offset,\r\n        uint256 num\r\n    ) external view returns (address[] memory values) {\r\n        values = new address[](num);\r\n        for (uint256 i = 0; i < num; ) {\r\n            unchecked {\r\n                values[i] = _userGauges[user].at(offset + i); // will revert if out of bounds\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice returns the number of user gauges\r\n    function numUserGauges(address user) external view returns (uint256) {\r\n        return _userGauges[user].length();\r\n    }\r\n\r\n    /// @notice helper function exposing the amount of weight available to allocate for a user\r\n    function userUnusedWeight(address user) external view returns (uint256) {\r\n        return balanceOf[user] - getUserWeight[user];\r\n    }\r\n\r\n    /** \r\n     @notice helper function for calculating the proportion of a `quantity` allocated to a gauge\r\n     @param gauge the gauge to calculate allocation of\r\n     @param quantity a representation of a resource to be shared among all gauges\r\n     @return the proportion of `quantity` allocated to `gauge`. Returns 0 if gauge is not live, even if it has weight.\r\n    */\r\n    function calculateGaugeAllocation(address gauge, uint256 quantity) external view returns (uint256) {\r\n        if (_deprecatedGauges.contains(gauge)) return 0;\r\n        uint32 currentCycle = _getGaugeCycleEnd();\r\n\r\n        uint112 total = _getStoredWeight(_totalWeight, currentCycle);\r\n        uint112 weight = _getStoredWeight(_getGaugeWeight[gauge], currentCycle);\r\n        return (quantity * weight) / total;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                        USER GAUGE OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice thrown when trying to increment/decrement a mismatched number of gauges and weights.\r\n    error SizeMismatchError();\r\n\r\n    /// @notice thrown when trying to increment over the max allowed gauges.\r\n    error MaxGaugeError();\r\n\r\n    /// @notice thrown when incrementing over a users free weight.\r\n    error OverWeightError();\r\n\r\n    /// @notice thrown when incremending during the freeze window.\r\n    error IncrementFreezeError();\r\n\r\n    /// @notice emitted when incrementing a gauge\r\n    event IncrementGaugeWeight(address indexed user, address indexed gauge, uint256 weight, uint32 cycleEnd);\r\n\r\n    /// @notice emitted when decrementing a gauge\r\n    event DecrementGaugeWeight(address indexed user, address indexed gauge, uint256 weight, uint32 cycleEnd);\r\n\r\n    /** \r\n     @notice increment a gauge with some weight for the caller\r\n     @param gauge the gauge to increment\r\n     @param weight the amount of weight to increment on gauge\r\n     @return newUserWeight the new user weight\r\n    */\r\n    function incrementGauge(address gauge, uint112 weight) external returns (uint112 newUserWeight) {\r\n        uint32 currentCycle = _getGaugeCycleEnd();\r\n        _incrementGaugeWeight(msg.sender, gauge, weight, currentCycle);\r\n        return _incrementUserAndGlobalWeights(msg.sender, weight, currentCycle);\r\n    }\r\n\r\n    function _incrementGaugeWeight(\r\n        address user,\r\n        address gauge,\r\n        uint112 weight,\r\n        uint32 cycle\r\n    ) internal {\r\n        if (_deprecatedGauges.contains(gauge)) revert InvalidGaugeError();\r\n        unchecked {\r\n            if (cycle - block.timestamp <= incrementFreezeWindow) revert IncrementFreezeError();\r\n        }\r\n\r\n        bool added = _userGauges[user].add(gauge); // idempotent add\r\n        if (added && _userGauges[user].length() > maxGauges && !canContractExceedMaxGauges[user])\r\n            revert MaxGaugeError();\r\n\r\n        getUserGaugeWeight[user][gauge] += weight;\r\n\r\n        _writeGaugeWeight(_getGaugeWeight[gauge], _add, weight, cycle);\r\n\r\n        emit IncrementGaugeWeight(user, gauge, weight, cycle);\r\n    }\r\n\r\n    function _incrementUserAndGlobalWeights(\r\n        address user,\r\n        uint112 weight,\r\n        uint32 cycle\r\n    ) internal returns (uint112 newUserWeight) {\r\n        newUserWeight = getUserWeight[user] + weight;\r\n        // Ensure under weight\r\n        if (newUserWeight > balanceOf[user]) revert OverWeightError();\r\n\r\n        // Update gauge state\r\n        getUserWeight[user] = newUserWeight;\r\n\r\n        _writeGaugeWeight(_totalWeight, _add, weight, cycle);\r\n    }\r\n\r\n    /** \r\n     @notice increment a list of gauges with some weights for the caller\r\n     @param gaugeList the gauges to increment\r\n     @param weights the weights to increment by\r\n     @return newUserWeight the new user weight\r\n    */\r\n    function incrementGauges(address[] calldata gaugeList, uint112[] calldata weights)\r\n        external\r\n        returns (uint256 newUserWeight)\r\n    {\r\n        uint256 size = gaugeList.length;\r\n        if (weights.length != size) revert SizeMismatchError();\r\n\r\n        // store total in summary for batch update on user/global state\r\n        uint112 weightsSum;\r\n\r\n        uint32 currentCycle = _getGaugeCycleEnd();\r\n\r\n        // Update gauge specific state\r\n        for (uint256 i = 0; i < size; ) {\r\n            address gauge = gaugeList[i];\r\n            uint112 weight = weights[i];\r\n            weightsSum += weight;\r\n\r\n            _incrementGaugeWeight(msg.sender, gauge, weight, currentCycle);\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        return _incrementUserAndGlobalWeights(msg.sender, weightsSum, currentCycle);\r\n    }\r\n\r\n    /** \r\n     @notice decrement a gauge with some weight for the caller\r\n     @param gauge the gauge to decrement\r\n     @param weight the amount of weight to decrement on gauge\r\n     @return newUserWeight the new user weight\r\n    */\r\n    function decrementGauge(address gauge, uint112 weight) external returns (uint112 newUserWeight) {\r\n        uint32 currentCycle = _getGaugeCycleEnd();\r\n\r\n        // All operations will revert on underflow, protecting against bad inputs\r\n        _decrementGaugeWeight(msg.sender, gauge, weight, currentCycle);\r\n        return _decrementUserAndGlobalWeights(msg.sender, weight, currentCycle);\r\n    }\r\n\r\n    function _decrementGaugeWeight(\r\n        address user,\r\n        address gauge,\r\n        uint112 weight,\r\n        uint32 cycle\r\n    ) internal {\r\n        uint112 oldWeight = getUserGaugeWeight[user][gauge];\r\n\r\n        getUserGaugeWeight[user][gauge] = oldWeight - weight;\r\n        if (oldWeight == weight) {\r\n            // If removing all weight, remove gauge from user list.\r\n            require(_userGauges[user].remove(gauge));\r\n        }\r\n\r\n        _writeGaugeWeight(_getGaugeWeight[gauge], _subtract, weight, cycle);\r\n\r\n        emit DecrementGaugeWeight(user, gauge, weight, cycle);\r\n    }\r\n\r\n    function _decrementUserAndGlobalWeights(\r\n        address user,\r\n        uint112 weight,\r\n        uint32 cycle\r\n    ) internal returns (uint112 newUserWeight) {\r\n        newUserWeight = getUserWeight[user] - weight;\r\n\r\n        getUserWeight[user] = newUserWeight;\r\n        _writeGaugeWeight(_totalWeight, _subtract, weight, cycle);\r\n    }\r\n\r\n    /** \r\n     @notice decrement a list of gauges with some weights for the caller\r\n     @param gaugeList the gauges to decrement\r\n     @param weights the list of weights to decrement on the gauges\r\n     @return newUserWeight the new user weight\r\n    */\r\n    function decrementGauges(address[] calldata gaugeList, uint112[] calldata weights)\r\n        external\r\n        returns (uint112 newUserWeight)\r\n    {\r\n        uint256 size = gaugeList.length;\r\n        if (weights.length != size) revert SizeMismatchError();\r\n\r\n        // store total in summary for batch update on user/global state\r\n        uint112 weightsSum;\r\n\r\n        uint32 currentCycle = _getGaugeCycleEnd();\r\n\r\n        // Update gauge specific state\r\n        // All operations will revert on underflow, protecting against bad inputs\r\n        for (uint256 i = 0; i < size; ) {\r\n            address gauge = gaugeList[i];\r\n            uint112 weight = weights[i];\r\n            weightsSum += weight;\r\n\r\n            _decrementGaugeWeight(msg.sender, gauge, weight, currentCycle);\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        return _decrementUserAndGlobalWeights(msg.sender, weightsSum, currentCycle);\r\n    }\r\n\r\n    /**\r\n     @dev this function is the key to the entire contract.\r\n     The storage weight it operates on is either a global or gauge-specific weight.\r\n     The operation applied is either addition for incrementing gauges or subtraction for decrementing a gauge.\r\n    */\r\n    function _writeGaugeWeight(\r\n        Weight storage weight,\r\n        function(uint112, uint112) view returns (uint112) op,\r\n        uint112 delta,\r\n        uint32 cycle\r\n    ) private {\r\n        uint112 currentWeight = weight.currentWeight;\r\n        // If the last cycle of the weight is before the current cycle, use the current weight as the stored.\r\n        uint112 stored = weight.currentCycle < cycle ? currentWeight : weight.storedWeight;\r\n        uint112 newWeight = op(currentWeight, delta);\r\n\r\n        weight.storedWeight = stored;\r\n        weight.currentWeight = newWeight;\r\n        weight.currentCycle = cycle;\r\n    }\r\n\r\n    function _add(uint112 a, uint112 b) private pure returns (uint112) {\r\n        return a + b;\r\n    }\r\n\r\n    function _subtract(uint112 a, uint112 b) private pure returns (uint112) {\r\n        return a - b;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                        ADMIN GAUGE OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// @notice thrown when trying to increment or remove a non-live gauge, or add a live gauge.\r\n    error InvalidGaugeError();\r\n\r\n    /// @notice emitted when adding a new gauge to the live set.\r\n    event AddGauge(address indexed gauge);\r\n\r\n    /// @notice emitted when removing a gauge from the live set.\r\n    event RemoveGauge(address indexed gauge);\r\n\r\n    /// @notice emitted when updating the max number of gauges a user can delegate to.\r\n    event MaxGaugesUpdate(uint256 oldMaxGauges, uint256 newMaxGauges);\r\n\r\n    /// @notice emitted when changing a contract's approval to go over the max gauges.\r\n    event CanContractExceedMaxGaugesUpdate(address indexed account, bool canContractExceedMaxGauges);\r\n\r\n    /// @notice the default maximum amount of gauges a user can allocate to.\r\n    /// @dev if this number is ever lowered, or a contract has an override, then existing addresses MAY have more gauges allocated to. Use `numUserGauges` to check this.\r\n    uint256 public maxGauges;\r\n\r\n    /// @notice an approve list for contracts to go above the max gauge limit.\r\n    mapping(address => bool) public canContractExceedMaxGauges;\r\n\r\n    /// @notice add a new gauge. Requires auth by `authority`.\r\n    function addGauge(address gauge) external requiresAuth returns (uint112) {\r\n        return _addGauge(gauge);\r\n    }\r\n\r\n    function _addGauge(address gauge) internal returns (uint112 weight) {\r\n        bool newAdd = _gauges.add(gauge);\r\n        bool previouslyDeprecated = _deprecatedGauges.remove(gauge);\r\n        // add and fail loud if zero address or already present and not deprecated\r\n        if (gauge == address(0) || !(newAdd || previouslyDeprecated)) revert InvalidGaugeError();\r\n\r\n        uint32 currentCycle = _getGaugeCycleEnd();\r\n\r\n        // Check if some previous weight exists and re-add to total. Gauge and user weights are preserved.\r\n        weight = _getGaugeWeight[gauge].currentWeight;\r\n        if (weight > 0) {\r\n            _writeGaugeWeight(_totalWeight, _add, weight, currentCycle);\r\n        }\r\n\r\n        emit AddGauge(gauge);\r\n    }\r\n\r\n    /// @notice remove a new gauge. Requires auth by `authority`.\r\n    function removeGauge(address gauge) external requiresAuth {\r\n        _removeGauge(gauge);\r\n    }\r\n\r\n    function _removeGauge(address gauge) internal {\r\n        // add to deprecated and fail loud if not present\r\n        if (!_deprecatedGauges.add(gauge)) revert InvalidGaugeError();\r\n\r\n        uint32 currentCycle = _getGaugeCycleEnd();\r\n\r\n        // Remove weight from total but keep the gauge and user weights in storage in case gauge is re-added.\r\n        uint112 weight = _getGaugeWeight[gauge].currentWeight;\r\n        if (weight > 0) {\r\n            _writeGaugeWeight(_totalWeight, _subtract, weight, currentCycle);\r\n        }\r\n\r\n        emit RemoveGauge(gauge);\r\n    }\r\n\r\n    /// @notice replace a gauge. Requires auth by `authority`.\r\n    function replaceGauge(address oldGauge, address newGauge) external requiresAuth {\r\n        _removeGauge(oldGauge);\r\n        _addGauge(newGauge);\r\n    }\r\n\r\n    /// @notice set the new max gauges. Requires auth by `authority`.\r\n    /// @dev if this is set to a lower number than the current max, users MAY have more gauges active than the max. Use `numUserGauges` to check this.\r\n    function setMaxGauges(uint256 newMax) external requiresAuth {\r\n        uint256 oldMax = maxGauges;\r\n        maxGauges = newMax;\r\n\r\n        emit MaxGaugesUpdate(oldMax, newMax);\r\n    }\r\n\r\n    /// @notice set the canContractExceedMaxGauges flag for an account.\r\n    function setContractExceedMaxGauges(address account, bool canExceedMax) external requiresAuth {\r\n        if (canExceedMax && account.code.length == 0) revert Errors_ERC20Gauges.NonContractError(); // can only approve contracts\r\n\r\n        canContractExceedMaxGauges[account] = canExceedMax;\r\n\r\n        emit CanContractExceedMaxGaugesUpdate(account, canExceedMax);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /// NOTE: any \"removal\" of tokens from a user requires userUnusedWeight < amount.\r\n    /// _decrementWeightUntilFree is called as a greedy algorithm to free up weight.\r\n    /// It may be more gas efficient to free weight before burning or transferring tokens.\r\n\r\n    function _burn(address from, uint256 amount) internal virtual override {\r\n        _decrementWeightUntilFree(from, amount);\r\n        super._burn(from, amount);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        _decrementWeightUntilFree(msg.sender, amount);\r\n        return super.transfer(to, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _decrementWeightUntilFree(from, amount);\r\n        return super.transferFrom(from, to, amount);\r\n    }\r\n\r\n    /// a greedy algorithm for freeing weight before a token burn/transfer\r\n    /// frees up entire gauges, so likely will free more than `weight`\r\n    function _decrementWeightUntilFree(address user, uint256 weight) internal {\r\n        uint256 userFreeWeight = balanceOf[user] - getUserWeight[user];\r\n\r\n        // early return if already free\r\n        if (userFreeWeight >= weight) return;\r\n\r\n        uint32 currentCycle = _getGaugeCycleEnd();\r\n\r\n        // cache totals for batch updates\r\n        uint112 userFreed;\r\n        uint112 totalFreed;\r\n\r\n        // Loop through all user gauges, live and deprecated\r\n        address[] memory gaugeList = _userGauges[user].values();\r\n\r\n        // Free gauges until through entire list or under weight\r\n        uint256 size = gaugeList.length;\r\n        for (uint256 i = 0; i < size && (userFreeWeight + totalFreed) < weight; ) {\r\n            address gauge = gaugeList[i];\r\n            uint112 userGaugeWeight = getUserGaugeWeight[user][gauge];\r\n            if (userGaugeWeight != 0) {\r\n                // If the gauge is live (not deprecated), include its weight in the total to remove\r\n                if (!_deprecatedGauges.contains(gauge)) {\r\n                    totalFreed += userGaugeWeight;\r\n                }\r\n                userFreed += userGaugeWeight;\r\n                _decrementGaugeWeight(user, gauge, userGaugeWeight, currentCycle);\r\n\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        getUserWeight[user] -= userFreed;\r\n        _writeGaugeWeight(_totalWeight, _subtract, totalFreed, currentCycle);\r\n    }\r\n}"
    },
    "contracts/test/IonicFlywheel/token/FlywheelGaugeRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport {Auth, Authority} from \"solmate/auth/Auth.sol\";\r\nimport {SafeCastLib} from \"solmate/utils/SafeCastLib.sol\";\r\n\r\nimport \"../../../ionic/strategies/flywheel/rewards/BaseFlywheelRewards.sol\";\r\nimport {ERC20Gauges} from \"../token/ERC20Gauges.sol\";\r\n\r\n/// @notice a contract which streams reward tokens to the FlywheelRewards module\r\ninterface IRewardsStream {\r\n    /// @notice read and transfer reward token chunk to FlywheelRewards module\r\n    function getRewards() external returns (uint256);\r\n}\r\n\r\n/**\r\n @title Flywheel Gauge Reward Stream\r\n @notice Distributes rewards from a stream based on gauge weights\r\n\r\n The contract assumes an arbitrary stream of rewards `S` of rewardToken. It chunks the rewards into cycles of length `l`.\r\n\r\n The allocation function for each cycle A(g, S) proportions the stream to each gauge such that SUM(A(g, S)) over all gauges <= S.\r\n NOTE it should be approximately S, but may be less due to truncation.\r\n\r\n Rewards are accumulated every time a new rewards cycle begins, and all prior rewards are cached in the previous cycle.\r\n When the Flywheel Core requests accrued rewards for a specific gauge:\r\n 1. All prior rewards before this cycle are distributed\r\n 2. Rewards for the current cycle are distributed proportionally to the remaining time in the cycle.\r\n    If `e` is the cycle end, `t` is the min of e and current timestamp, and `p` is the prior updated time:\r\n    For `A` accrued rewards over the cycle, distribute `min(A * (t-p)/(e-p), A)`.\r\n*/\r\ncontract FlywheelGaugeRewards is Auth, BaseFlywheelRewards {\r\n    using SafeTransferLib for ERC20;\r\n    using SafeCastLib for uint256;\r\n\r\n    /// @notice thrown when trying to queue a new cycle during an old one.\r\n    error CycleError();\r\n\r\n    /// @notice thrown when trying to queue with 0 gauges\r\n    error EmptyGaugesError();\r\n\r\n    /// @notice emitted when a cycle has completely queued and started\r\n    event CycleStart(uint32 indexed cycleStart, uint256 rewardAmount);\r\n\r\n    /// @notice emitted when a single gauge is queued. May be emitted before the cycle starts if the queue is done via pagination.\r\n    event QueueRewards(address indexed gauge, uint32 indexed cycleStart, uint256 rewardAmount);\r\n\r\n    /// @notice the start of the current cycle\r\n    uint32 public gaugeCycle;\r\n\r\n    /// @notice the length of a rewards cycle\r\n    uint32 public immutable gaugeCycleLength;\r\n\r\n    /// @notice the start of the next cycle being partially queued\r\n    uint32 internal nextCycle;\r\n\r\n    // rewards that made it into a partial queue but didn't get completed\r\n    uint112 internal nextCycleQueuedRewards;\r\n\r\n    // the offset during pagination of the queue\r\n    uint32 internal paginationOffset;\r\n\r\n    /// @notice rewards queued from prior and current cycles\r\n    struct QueuedRewards {\r\n        uint112 priorCycleRewards;\r\n        uint112 cycleRewards;\r\n        uint32 storedCycle;\r\n    }\r\n\r\n    /// @notice mapping from gauges to queued rewards\r\n    mapping(ERC20 => QueuedRewards) public gaugeQueuedRewards;\r\n\r\n    /// @notice the gauge token for determining gauge allocations of the rewards stream\r\n    ERC20Gauges public immutable gaugeToken;\r\n\r\n    /// @notice contract to pull reward tokens from\r\n    IRewardsStream public rewardsStream;\r\n\r\n    constructor(\r\n        IonicFlywheelCore _flywheel,\r\n        address _owner,\r\n        Authority _authority,\r\n        ERC20Gauges _gaugeToken,\r\n        IRewardsStream _rewardsStream\r\n    ) BaseFlywheelRewards(_flywheel) Auth(_owner, _authority) {\r\n        gaugeCycleLength = _gaugeToken.gaugeCycleLength();\r\n\r\n        // seed initial gaugeCycle\r\n        gaugeCycle = (block.timestamp.safeCastTo32() / gaugeCycleLength) * gaugeCycleLength;\r\n\r\n        gaugeToken = _gaugeToken;\r\n\r\n        rewardsStream = _rewardsStream;\r\n    }\r\n\r\n    /**\r\n        @notice Iterates over all live gauges and queues up the rewards for the cycle\r\n        @return totalQueuedForCycle the max amount of rewards to be distributed over the cycle\r\n    */\r\n    function queueRewardsForCycle() external requiresAuth returns (uint256 totalQueuedForCycle) {\r\n        // next cycle is always the next even divisor of the cycle length above current block timestamp.\r\n        uint32 currentCycle = (block.timestamp.safeCastTo32() / gaugeCycleLength) * gaugeCycleLength;\r\n        uint32 lastCycle = gaugeCycle;\r\n\r\n        // ensure new cycle has begun\r\n        if (currentCycle <= lastCycle) revert CycleError();\r\n\r\n        gaugeCycle = currentCycle;\r\n\r\n        // queue the rewards stream and sanity check the tokens were received\r\n        uint256 balanceBefore = rewardToken.balanceOf(address(this));\r\n        totalQueuedForCycle = rewardsStream.getRewards();\r\n        require(rewardToken.balanceOf(address(this)) - balanceBefore >= totalQueuedForCycle);\r\n\r\n        // include uncompleted cycle\r\n        totalQueuedForCycle += nextCycleQueuedRewards;\r\n\r\n        // iterate over all gauges and update the rewards allocations\r\n        address[] memory gauges = gaugeToken.gauges();\r\n\r\n        _queueRewards(gauges, currentCycle, lastCycle, totalQueuedForCycle);\r\n\r\n        nextCycleQueuedRewards = 0;\r\n        paginationOffset = 0;\r\n\r\n        emit CycleStart(currentCycle, totalQueuedForCycle);\r\n    }\r\n\r\n    /**\r\n        @notice Iterates over all live gauges and queues up the rewards for the cycle\r\n    */\r\n    function queueRewardsForCyclePaginated(uint256 numRewards) external requiresAuth {\r\n        // next cycle is always the next even divisor of the cycle length above current block timestamp.\r\n        uint32 currentCycle = (block.timestamp.safeCastTo32() / gaugeCycleLength) * gaugeCycleLength;\r\n        uint32 lastCycle = gaugeCycle;\r\n\r\n        // ensure new cycle has begun\r\n        if (currentCycle <= lastCycle) revert CycleError();\r\n\r\n        if (currentCycle > nextCycle) {\r\n            nextCycle = currentCycle;\r\n            paginationOffset = 0;\r\n        }\r\n\r\n        uint32 offset = paginationOffset;\r\n\r\n        // important to only calculate the reward amount once to prevent each page from having a different reward amount\r\n        if (offset == 0) {\r\n            // queue the rewards stream and sanity check the tokens were received\r\n            uint256 balanceBefore = rewardToken.balanceOf(address(this));\r\n            uint256 newRewards = rewardsStream.getRewards();\r\n            require(rewardToken.balanceOf(address(this)) - balanceBefore >= newRewards);\r\n            require(newRewards <= type(uint112).max); // safe cast\r\n            nextCycleQueuedRewards += uint112(newRewards); // in case a previous incomplete cycle had rewards, add on\r\n        }\r\n\r\n        uint112 queued = nextCycleQueuedRewards;\r\n\r\n        uint256 remaining = gaugeToken.numGauges() - offset;\r\n\r\n        // Important to do non-strict inequality to include the case where the numRewards is just enough to complete the cycle\r\n        if (remaining <= numRewards) {\r\n            numRewards = remaining;\r\n            gaugeCycle = currentCycle;\r\n            nextCycleQueuedRewards = 0;\r\n            paginationOffset = 0;\r\n            emit CycleStart(currentCycle, queued);\r\n        } else {\r\n            paginationOffset = offset + numRewards.safeCastTo32();\r\n        }\r\n\r\n        // iterate over all gauges and update the rewards allocations\r\n        address[] memory gauges = gaugeToken.gauges(offset, numRewards);\r\n\r\n        _queueRewards(gauges, currentCycle, lastCycle, queued);\r\n    }\r\n\r\n    function _queueRewards(\r\n        address[] memory gauges,\r\n        uint32 currentCycle,\r\n        uint32 lastCycle,\r\n        uint256 totalQueuedForCycle\r\n    ) internal {\r\n        uint256 size = gauges.length;\r\n\r\n        if (size == 0) revert EmptyGaugesError();\r\n\r\n        for (uint256 i = 0; i < size; i++) {\r\n            ERC20 gauge = ERC20(gauges[i]);\r\n\r\n            QueuedRewards memory queuedRewards = gaugeQueuedRewards[gauge];\r\n\r\n            // Cycle queue already started\r\n            require(queuedRewards.storedCycle < currentCycle);\r\n            assert(queuedRewards.storedCycle == 0 || queuedRewards.storedCycle >= lastCycle);\r\n\r\n            uint112 completedRewards = queuedRewards.storedCycle == lastCycle ? queuedRewards.cycleRewards : 0;\r\n            uint256 nextRewards = gaugeToken.calculateGaugeAllocation(address(gauge), totalQueuedForCycle);\r\n            require(nextRewards <= type(uint112).max); // safe cast\r\n\r\n            gaugeQueuedRewards[gauge] = QueuedRewards({\r\n                priorCycleRewards: queuedRewards.priorCycleRewards + completedRewards,\r\n                cycleRewards: uint112(nextRewards),\r\n                storedCycle: currentCycle\r\n            });\r\n\r\n            emit QueueRewards(address(gauge), currentCycle, nextRewards);\r\n        }\r\n    }\r\n\r\n    /**\r\n     @notice calculate and transfer accrued rewards to flywheel core\r\n     @param gauge the gauge to accrue rewards for\r\n     @param lastUpdatedTimestamp the last updated time for gauge\r\n     @return accruedRewards the amount of reward tokens accrued.\r\n    */\r\n    function getAccruedRewards(ERC20 gauge, uint32 lastUpdatedTimestamp)\r\n        external\r\n        override\r\n        onlyFlywheel\r\n        returns (uint256 accruedRewards)\r\n    {\r\n        QueuedRewards memory queuedRewards = gaugeQueuedRewards[gauge];\r\n\r\n        uint32 cycle = gaugeCycle;\r\n        bool incompleteCycle = queuedRewards.storedCycle > cycle;\r\n\r\n        // no rewards\r\n        if (queuedRewards.priorCycleRewards == 0 && (queuedRewards.cycleRewards == 0 || incompleteCycle)) {\r\n            return 0;\r\n        }\r\n\r\n        // if stored cycle != 0 it must be >= the last queued cycle\r\n        assert(queuedRewards.storedCycle >= cycle);\r\n\r\n        uint32 cycleEnd = cycle + gaugeCycleLength;\r\n\r\n        // always accrue prior rewards\r\n        accruedRewards = queuedRewards.priorCycleRewards;\r\n        uint112 cycleRewardsNext = queuedRewards.cycleRewards;\r\n\r\n        if (incompleteCycle) {\r\n            // If current cycle queue incomplete, do nothing to current cycle rewards or accrued\r\n        } else if (block.timestamp >= cycleEnd) {\r\n            // If cycle ended, accrue all rewards\r\n            accruedRewards += cycleRewardsNext;\r\n            cycleRewardsNext = 0;\r\n        } else {\r\n            uint32 beginning = lastUpdatedTimestamp > cycle ? lastUpdatedTimestamp : cycle;\r\n\r\n            // otherwise, return proportion of remaining rewards in cycle\r\n            uint32 elapsed = block.timestamp.safeCastTo32() - beginning;\r\n            uint32 remaining = cycleEnd - beginning;\r\n\r\n            // Casted up to avoid intermediate overflow\r\n            // cannot end in an overflow of uint112 because elapsed <= remaining and cycleRewards <= uint112.max\r\n            uint256 currentAccrued = (uint256(queuedRewards.cycleRewards) * elapsed) / remaining;\r\n\r\n            // add proportion of current cycle to accrued rewards\r\n            accruedRewards += currentAccrued;\r\n            cycleRewardsNext -= uint112(currentAccrued);\r\n        }\r\n\r\n        gaugeQueuedRewards[gauge] = QueuedRewards({\r\n            priorCycleRewards: 0,\r\n            cycleRewards: cycleRewardsNext,\r\n            storedCycle: queuedRewards.storedCycle\r\n        });\r\n    }\r\n\r\n    /// @notice set the rewards stream contract\r\n    function setRewardsStream(IRewardsStream newRewardsStream) external requiresAuth {\r\n        rewardsStream = newRewardsStream;\r\n    }\r\n}"
    },
    "contracts/veION/interfaces/IveION.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport \"../stake/IStakeStrategy.sol\";\r\nimport \"./IveIONCore.sol\";\r\nimport \"./IveIONFirstExtension.sol\";\r\nimport \"./IveIONSecondExtension.sol\";\r\n\r\n/// @title IveION Interface\r\n/// @notice Interface for veION contract\r\ninterface IveION is IveIONStructsEnumsErrorsEvents, IveIONCore, IveIONFirstExtension, IveIONSecondExtension {\r\n  // Constants\r\n  function PRECISION() external view returns (uint256);\r\n\r\n  // State Variables\r\n  function s_tokenId() external view returns (uint256);\r\n  function s_limitedBoost() external view returns (uint256);\r\n  function s_limitedBoostActive() external view returns (bool);\r\n  function s_veAERO() external view returns (address);\r\n  function s_aeroVoting() external view returns (address);\r\n  function s_ionicPool() external view returns (address);\r\n  function s_voter() external view returns (address);\r\n  function s_aeroVoterBoost() external view returns (uint256);\r\n  function s_minimumLockDuration() external view returns (uint256);\r\n  function s_maxEarlyWithdrawFee() external view returns (uint256);\r\n  function ap() external view returns (address);\r\n  function implementation() external view returns (address);\r\n\r\n  // Mappings\r\n  function s_minimumLockAmount(LpTokenType lpTokenType) external view returns (uint256);\r\n  function s_whitelistedToken(address token) external view returns (bool);\r\n  function s_lpType(address token) external view returns (LpTokenType);\r\n  function s_canSplit(address user) external view returns (bool);\r\n  function s_locked(uint256 tokenId, LpTokenType lpTokenType) external view returns (LockedBalance memory);\r\n  function s_userPointEpoch(uint256 tokenId, LpTokenType lpTokenType) external view returns (uint256);\r\n  function s_userPointHistory(\r\n    uint256 tokenId,\r\n    LpTokenType lpTokenType,\r\n    uint256 epoch\r\n  ) external view returns (UserPoint memory);\r\n  function s_voted(uint256 tokenId) external view returns (bool);\r\n  function s_supply(LpTokenType lpTokenType) external view returns (uint256);\r\n  function s_permanentLockBalance(LpTokenType lpTokenType) external view returns (uint256);\r\n  function s_stakeStrategy(LpTokenType lpTokenType) external view returns (address);\r\n  function s_underlyingStake(uint256 tokenId, address token) external view returns (uint256);\r\n  function s_protocolFees(LpTokenType lpTokenType) external view returns (uint256);\r\n  function s_distributedFees(LpTokenType lpTokenType) external view returns (uint256);\r\n  function s_delegations(\r\n    uint256 delegatorTokenId,\r\n    uint256 delegateeTokenId,\r\n    LpTokenType lpTokenType\r\n  ) external view returns (uint256);\r\n  function s_userCumulativeAssetValues(address user, address token) external view returns (uint256);\r\n  function s_delegatorsBlocked(uint256 tokenId, address token) external view returns (bool);\r\n\r\n  // Openzeppelin functions\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n  function ownerOf(uint256 tokenId) external returns (address);\r\n  function owner() external returns (address);\r\n  function balanceOf(address owner) external returns (uint256);\r\n}\r\n"
    },
    "contracts/veION/interfaces/IveIONCore.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport \"../stake/IStakeStrategy.sol\";\r\n\r\n/// @title IveION Interface\r\n/// @notice Interface for veION contract\r\ninterface IveIONCore {\r\n  /**\r\n   * @notice Creates a new lock for multiple tokens and assigns it to a specified address\r\n   * @param _tokenAddress Array of token addresses to lock\r\n   * @param _tokenAmount Array of token amounts to lock\r\n   * @param _duration Array of lock durations\r\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\r\n   * @param _to Address to assign the lock to\r\n   * @return The ID of the newly created veNFT\r\n   */\r\n  function createLockFor(\r\n    address[] memory _tokenAddress,\r\n    uint256[] memory _tokenAmount,\r\n    uint256[] memory _duration,\r\n    bool[] memory _stakeUnderlying,\r\n    address _to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Creates a new lock for multiple tokens\r\n   * @param _tokenAddress Array of token addresses to lock\r\n   * @param _tokenAmount Array of token amounts to lock\r\n   * @param _duration Array of lock durations\r\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\r\n   * @return The ID of the newly created veNFT\r\n   */\r\n  function createLock(\r\n    address[] calldata _tokenAddress,\r\n    uint256[] calldata _tokenAmount,\r\n    uint256[] calldata _duration,\r\n    bool[] memory _stakeUnderlying\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Increases the amount of tokens locked for a specific veNFT\r\n   * @param _tokenAddress Address of the token to increase lock amount for\r\n   * @param _tokenId ID of the veNFT\r\n   * @param _tokenAmount Amount of tokens to add to the lock\r\n   * @param _stakeUnderlying Whether to stake the underlying tokens\r\n   */\r\n  function increaseAmount(\r\n    address _tokenAddress,\r\n    uint256 _tokenId,\r\n    uint256 _tokenAmount,\r\n    bool _stakeUnderlying\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Locks additional asset type for an existing veNFT\r\n   * @param _tokenAddress Address of the new token to lock\r\n   * @param _tokenAmount Amount of tokens to lock\r\n   * @param _tokenId ID of the veNFT\r\n   * @param _duration Duration of the lock\r\n   * @param _stakeUnderlying Whether to stake the underlying tokens\r\n   */\r\n  function lockAdditionalAsset(\r\n    address _tokenAddress,\r\n    uint256 _tokenAmount,\r\n    uint256 _tokenId,\r\n    uint256 _duration,\r\n    bool _stakeUnderlying\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Increases the lock duration for a specific token in a veNFT\r\n   * @param _tokenAddress Address of the token\r\n   * @param _tokenId ID of the veNFT\r\n   * @param _lockDuration New lock duration to extend to\r\n   */\r\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external;\r\n\r\n  /**\r\n   * @notice Delegates voting power from one veNFT to another.\r\n   * @param fromTokenId The ID of the veNFT from which voting power is delegated.\r\n   * @param toTokenId The ID of the veNFT to which voting power is delegated.\r\n   * @param lpToken The address of the LP token associated with the delegation.\r\n   * @param amount The amount of voting power to delegate.\r\n   */\r\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external;\r\n\r\n  /**\r\n   * @notice Removes delegatees from a specific veNFT\r\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\r\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\r\n   * @param lpToken Address of the LP token associated with the delegation\r\n   * @param amounts Array of amounts of voting power to remove from each delegatee\r\n   */\r\n  function removeDelegatees(\r\n    uint256 fromTokenId,\r\n    uint256[] memory toTokenIds,\r\n    address lpToken,\r\n    uint256[] memory amounts\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Removes delegators from a specific veNFT\r\n   * @param fromTokenIds Array of veNFT IDs that are delegators to be removed\r\n   * @param toTokenId ID of the veNFT from which delegators are removed\r\n   * @param lpToken Address of the LP token associated with the delegation\r\n   * @param amounts Array of amounts of voting power to remove from each delegator\r\n   */\r\n  function removeDelegators(\r\n    uint256[] memory fromTokenIds,\r\n    uint256 toTokenId,\r\n    address lpToken,\r\n    uint256[] memory amounts\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Locks a token permanently.\r\n   * @param _tokenAddress The address of the token to lock.\r\n   * @param _tokenId The ID of the token to lock.\r\n   */\r\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Unlocks a permanently locked token.\r\n   * @param _tokenAddress The address of the token to unlock.\r\n   * @param _tokenId The ID of the token to unlock.\r\n   */\r\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Updates voting status for a veNFT\r\n   * @param _tokenId ID of the veNFT\r\n   * @param _voting Voting status\r\n   */\r\n  function voting(uint256 _tokenId, bool _voting) external;\r\n\r\n  /**\r\n   * @notice Sets the implementation addresses for the veION contract extensions.\r\n   * @dev This function can only be called by authorized entities.\r\n   * @param _veIONFirstExtension The address of the first extension contract.\r\n   * @param _veIONSecondExtension The address of the second extension contract.\r\n   */\r\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external;\r\n}\r\n\r\n/// @title IAeroVotingEscrow Interface\r\n/// @notice Interface for Aero Voting Escrow contract\r\ninterface IAeroVotingEscrow {\r\n  /**\r\n   * @notice Returns the balance of the specified owner.\r\n   * @param _owner The address of the owner.\r\n   * @return The balance of the owner.\r\n   */\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Retrieves the token ID at a specific index for a given owner.\r\n   * @param _owner The address of the owner.\r\n   * @param _index The index of the token ID in the owner's list.\r\n   * @return The token ID at the specified index.\r\n   */\r\n  function ownerToNFTokenIdList(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\n/// @title IAeroVoter Interface\r\n/// @notice Interface for Aero Voter contract\r\ninterface IAeroVoter {\r\n  /**\r\n   * @notice Returns the list of pools voted for by a specific token ID.\r\n   * @param tokenId The ID of the token.\r\n   * @return An array of addresses representing the pools voted for.\r\n   */\r\n  function poolVote(uint256 tokenId) external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Retrieves the weight of a specific pool.\r\n   * @param pool The address of the pool.\r\n   * @return The weight of the pool.\r\n   */\r\n  function weights(address pool) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the number of votes a specific token ID has for a given pool.\r\n   * @param tokenId The ID of the token.\r\n   * @param pool The address of the pool.\r\n   * @return The number of votes for the pool.\r\n   */\r\n  function votes(uint256 tokenId, address pool) external view returns (uint256);\r\n}\r\n\r\ninterface IAddressesProvider {\r\n  function getAddress(string calldata id) external view returns (address);\r\n}\r\n\r\ninterface IMasterPriceOracle {\r\n  function price(address underlying) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/veION/interfaces/IveIONFirstExtension.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport \"../stake/IStakeStrategy.sol\";\r\nimport { IveIONStructsEnumsErrorsEvents } from \"./IveIONStructsEnumsErrorsEvents.sol\";\r\n\r\n/// @title IveION Interface First Extensions\r\n/// @notice Interface for veION contract\r\ninterface IveIONFirstExtension is IveIONStructsEnumsErrorsEvents {\r\n  /**\r\n   * @notice Withdraws tokens associated with a specific token ID.\r\n   * @param _tokenAddress The address of the token to withdraw.\r\n   * @param _tokenId The ID of the token to withdraw.\r\n   */\r\n  function withdraw(address _tokenAddress, uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Merges two token IDs into one.\r\n   * @param _from The ID of the token to merge from.\r\n   * @param _to The ID of the token to merge into.\r\n   */\r\n  function merge(uint256 _from, uint256 _to) external;\r\n\r\n  /**\r\n   * @notice Splits a token into two separate tokens.\r\n   * @param _tokenAddress The address of the token to split.\r\n   * @param _from The ID of the token to split.\r\n   * @param _splitAmount The amount to split from the original token.\r\n   * @return _tokenId1 The ID of the first resulting token.\r\n   * @return _tokenId2 The ID of the second resulting token.\r\n   */\r\n  function split(\r\n    address _tokenAddress,\r\n    uint256 _from,\r\n    uint256 _splitAmount\r\n  ) external returns (uint256 _tokenId1, uint256 _tokenId2);\r\n\r\n  /**\r\n   * @notice Claims emissions for a specific token.\r\n   * @param _tokenAddress The address of the token for which to claim emissions.\r\n   */\r\n  function claimEmissions(address _tokenAddress) external;\r\n\r\n  /**\r\n   * @notice Allows or blocks delegators for a specific token ID.\r\n   * @param _tokenId The ID of the token.\r\n   * @param _tokenAddress The address of the token.\r\n   * @param _blocked Boolean indicating if delegators are blocked.\r\n   */\r\n  function allowDelegators(uint256 _tokenId, address _tokenAddress, bool _blocked) external;\r\n\r\n  /**\r\n   * @notice Retrieves the balance of a specific NFT.\r\n   * @param _tokenId The ID of the NFT.\r\n   * @return _assets An array of asset addresses.\r\n   * @return _balances An array of balances for each asset.\r\n   * @return _boosts An array of boost values for each asset.\r\n   */\r\n  function balanceOfNFT(\r\n    uint256 _tokenId\r\n  ) external view returns (address[] memory _assets, uint256[] memory _balances, uint256[] memory _boosts);\r\n\r\n  /**\r\n   * @notice Retrieves the total ETH value of tokens owned by a specific address.\r\n   * @param _owner The address of the owner.\r\n   * @return totalValue The total ETH value of the tokens.\r\n   */\r\n  function getTotalEthValueOfTokens(address _owner) external view returns (uint256 totalValue);\r\n}\r\n"
    },
    "contracts/veION/interfaces/IveIONSecondExtension.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport \"../stake/IStakeStrategy.sol\";\r\nimport { IveIONStructsEnumsErrorsEvents } from \"./IveIONStructsEnumsErrorsEvents.sol\";\r\n\r\n/// @title IveION Interface Second Extension\r\n/// @notice Interface for veION contract\r\ninterface IveIONSecondExtension is IveIONStructsEnumsErrorsEvents {\r\n  /**\r\n   * @notice Whitelists or removes tokens from the whitelist.\r\n   * @param _tokens An array of token addresses to be whitelisted or removed.\r\n   * @param _isWhitelisted An array of booleans indicating the whitelist status for each token.\r\n   */\r\n  function whitelistTokens(address[] memory _tokens, bool[] memory _isWhitelisted) external;\r\n\r\n  /**\r\n   * @notice Withdraws protocol fees for a specific token to a recipient address.\r\n   * @param _tokenAddress The address of the token for which protocol fees are to be withdrawn.\r\n   * @param _recipient The address to which the protocol fees will be sent.\r\n   */\r\n  function withdrawProtocolFees(address _tokenAddress, address _recipient) external;\r\n\r\n  /**\r\n   * @notice Withdraws distributed fees for a specific token to a recipient address.\r\n   * @param _tokenAddress The address of the token for which distributed fees are to be withdrawn.\r\n   * @param _recipient The address to which the distributed fees will be sent.\r\n   */\r\n  function withdrawDistributedFees(address _tokenAddress, address _recipient) external;\r\n\r\n  /**\r\n   * @notice Toggles the ability to split tokens for a specific account.\r\n   * @param _account The address of the account.\r\n   * @param _isAllowed Boolean indicating if splitting is allowed.\r\n   */\r\n  function toggleSplit(address _account, bool _isAllowed) external;\r\n\r\n  /**\r\n   * @notice Toggles the limited boost feature.\r\n   * @param _isBoosted Boolean indicating if the boost is active.\r\n   */\r\n  function toggleLimitedBoost(bool _isBoosted) external;\r\n\r\n  /**\r\n   * @notice Sets the amount for a limited time boost.\r\n   * @param _boostAmount The amount of the boost.\r\n   */\r\n  function setLimitedTimeBoost(uint256 _boostAmount) external;\r\n\r\n  /**\r\n   * @notice Sets the address of the voter.\r\n   * @param _voter The address of the voter.\r\n   */\r\n  function setVoter(address _voter) external;\r\n\r\n  /**\r\n   * @notice Sets the minimum lock amount for a specific token.\r\n   * @param _tokenAddress The address of the token.\r\n   * @param _minimumAmount The minimum amount to lock.\r\n   */\r\n  function setMinimumLockAmount(address _tokenAddress, uint256 _minimumAmount) external;\r\n\r\n  /**\r\n   * @notice Sets the minimum lock duration.\r\n   * @param _minimumLockDuration The minimum duration for locking.\r\n   */\r\n  function setMinimumLockDuration(uint256 _minimumLockDuration) external;\r\n\r\n  /**\r\n   * @notice Sets the address of the Ionic Pool.\r\n   * @param _ionicPool The address of the Ionic Pool.\r\n   */\r\n  function setIonicPool(address _ionicPool) external;\r\n\r\n  /**\r\n   * @notice Sets the address of the Aero Voting contract.\r\n   * @param _aeroVoting The address of the Aero Voting contract.\r\n   */\r\n  function setAeroVoting(address _aeroVoting) external;\r\n\r\n  /**\r\n   * @notice Sets the boost amount for Aero Voter.\r\n   * @param _aeroVoterBoost The boost amount for Aero Voter.\r\n   */\r\n  function setAeroVoterBoost(uint256 _aeroVoterBoost) external;\r\n\r\n  /**\r\n   * @notice Sets the maximum early withdrawal fee.\r\n   * @param _maxEarlyWithdrawFee The maximum fee for early withdrawal.\r\n   */\r\n  function setMaxEarlyWithdrawFee(uint256 _maxEarlyWithdrawFee) external;\r\n\r\n  /**\r\n   * @notice Sets the LP token type for a specific token.\r\n   * @param _token The address of the token.\r\n   * @param _type The LP token type.\r\n   */\r\n  function setLpTokenType(address _token, LpTokenType _type) external;\r\n\r\n  /**\r\n   * @notice Sets the stake strategy for a specific LP token type.\r\n   * @param _lpType The LP token type.\r\n   * @param _strategy The stake strategy.\r\n   */\r\n  function setStakeStrategy(LpTokenType _lpType, IStakeStrategy _strategy) external;\r\n\r\n  /**\r\n   * @notice Sets the address of the veAERO contract.\r\n   * @param _veAERO The address of the veAERO contract.\r\n   */\r\n  function setVeAERO(address _veAERO) external;\r\n\r\n  /**\r\n   * @notice Retrieves the lock information for a specific user.\r\n   * @param _tokenId The ID of the token.\r\n   * @param _lpType The LP token type.\r\n   * @return A LockedBalance struct containing lock details.\r\n   */\r\n  function getUserLock(uint256 _tokenId, LpTokenType _lpType) external view returns (LockedBalance memory);\r\n\r\n  /**\r\n   * @notice Retrieves the token IDs owned by a specific address.\r\n   * @param _owner The address of the owner.\r\n   * @return An array of token IDs owned by the address.\r\n   */\r\n  function getOwnedTokenIds(address _owner) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @notice Retrieves the assets locked for a specific token ID.\r\n   * @param _tokenId The ID of the token.\r\n   * @return An array of addresses representing the locked assets.\r\n   */\r\n  function getAssetsLocked(uint256 _tokenId) external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Retrieves the delegatees for a specific token ID and LP token type.\r\n   * @param _tokenId The ID of the token.\r\n   * @param _lpType The LP token type.\r\n   * @return An array of delegatee IDs.\r\n   */\r\n  function getDelegatees(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @notice Retrieves the delegators for a specific token ID and LP token type.\r\n   * @param _tokenId The ID of the token.\r\n   * @param _lpType The LP token type.\r\n   * @return An array of delegator IDs.\r\n   */\r\n  function getDelegators(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @notice Retrieves the user point for a specific token ID, LP token type, and epoch.\r\n   * @param _tokenId The ID of the token.\r\n   * @param _lpType The LP token type.\r\n   * @param _epoch The epoch number.\r\n   * @return A UserPoint struct containing user point details.\r\n   */\r\n  function getUserPoint(uint256 _tokenId, LpTokenType _lpType, uint256 _epoch) external view returns (UserPoint memory);\r\n}\r\n"
    },
    "contracts/veION/interfaces/IveIONStructsEnumsErrorsEvents.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\ninterface IveIONStructsEnumsErrorsEvents {\r\n  /**\r\n   * @notice Structure representing a locked balance\r\n   * @param tokenAddress Address of the token\r\n   * @param amount Amount of tokens locked\r\n   * @param delegateAmount Amount of tokens delegated\r\n   * @param start Start time of the lock\r\n   * @param end End time of the lock\r\n   * @param isPermanent Indicates if the lock is permanent\r\n   * @param boost Boost value for the lock\r\n   */\r\n  struct LockedBalance {\r\n    address tokenAddress;\r\n    uint256 amount;\r\n    uint256 delegateAmount;\r\n    uint256 start;\r\n    uint256 end;\r\n    bool isPermanent;\r\n    uint256 boost;\r\n  }\r\n\r\n  /**\r\n   * @notice Structure representing a delegation\r\n   * @param amount Amount of tokens delegated\r\n   * @param delegatee ID of the delegatee\r\n   */\r\n  struct Delegation {\r\n    uint256 amount;\r\n    uint256 delegatee;\r\n  }\r\n\r\n  /**\r\n   * @notice Structure representing a user point\r\n   * @param bias Bias value\r\n   * @param slope Slope value, representing -dweight / dt\r\n   * @param ts Timestamp of the point\r\n   * @param blk Block number of the point\r\n   * @param permanent Permanent value\r\n   * @param permanentDelegate Permanent delegate value\r\n   */\r\n  struct UserPoint {\r\n    uint256 bias;\r\n    uint256 slope;\r\n    uint256 ts;\r\n    uint256 blk;\r\n    uint256 permanent;\r\n    uint256 permanentDelegate;\r\n  }\r\n\r\n  /**\r\n   * @notice Structure representing a global point\r\n   * @param bias Bias value\r\n   * @param slope Slope value, representing -dweight / dt\r\n   * @param ts Timestamp of the point\r\n   * @param blk Block number of the point\r\n   * @param permanentLockBalance Permanent lock balance\r\n   */\r\n  struct GlobalPoint {\r\n    int128 bias;\r\n    int128 slope;\r\n    uint256 ts;\r\n    uint256 blk;\r\n    uint256 permanentLockBalance;\r\n  }\r\n\r\n  /**\r\n   * @notice Structure representing a checkpoint\r\n   * @param fromTimestamp Timestamp from which the checkpoint is valid\r\n   * @param owner Address of the owner\r\n   * @param delegatedBalance Balance that has been delegated\r\n   * @param delegatee ID of the delegatee\r\n   */\r\n  struct Checkpoint {\r\n    uint256 fromTimestamp;\r\n    address owner;\r\n    uint256 delegatedBalance;\r\n    uint256 delegatee;\r\n  }\r\n\r\n  /**\r\n   * @notice Enum representing deposit types\r\n   */\r\n  enum DepositType {\r\n    DEPOSIT_FOR_TYPE,\r\n    CREATE_LOCK_TYPE,\r\n    INCREASE_LOCK_AMOUNT,\r\n    INCREASE_UNLOCK_TIME,\r\n    LOCK_ADDITIONAL\r\n  }\r\n\r\n  /**\r\n   * @notice Enum representing LP token types\r\n   */\r\n  enum LpTokenType {\r\n    Mode_Velodrome_5050_ION_MODE,\r\n    Mode_Balancer_8020_ION_ETH,\r\n    Base_Aerodrome_5050_ION_wstETH,\r\n    Base_Balancer_8020_ION_ETH,\r\n    Optimism_Velodrome_5050_ION_OP,\r\n    Optimism_Balancer_8020_ION_ETH\r\n  }\r\n\r\n  error LockDurationNotInFuture();\r\n  error ZeroAmount();\r\n  error LockDurationTooLong();\r\n  error TokenNotWhitelisted();\r\n  error NotOwner();\r\n  error AlreadyVoted();\r\n  error PermanentLock();\r\n  error NoLockFound();\r\n  error LockExpired();\r\n  error SameNFT();\r\n  error SplitNotAllowed();\r\n  error AmountTooBig();\r\n  error NotPermanentLock();\r\n  error TokenHasDelegatees();\r\n  error TokenHasDelegators();\r\n  error NotVoter();\r\n  error MinimumNotMet();\r\n  error ArrayMismatch();\r\n  error LockDurationTooShort();\r\n  error DuplicateAsset();\r\n  error SplitTooSmall();\r\n  error NotEnoughRemainingAfterSplit();\r\n  error NoDelegationBetweenTokens(uint256 _tokenId1, uint256 _tokenId2);\r\n  error NoUnderlyingStake();\r\n  error NotAcceptingDelegators();\r\n  error BoostAmountMustBeGreaterThanZero();\r\n  error InvalidAddress();\r\n  error MinimumAmountMustBeGreaterThanZero();\r\n  error MinimumLockDurationMustBeGreaterThanZero();\r\n  error AeroBoostAmountMustBeGreaterThanZero();\r\n  error MaxEarlyWithdrawFeeMustBeGreaterThanZero();\r\n  error InvalidTokenAddress();\r\n  error InvalidStrategyAddress();\r\n  error InvalidVeAEROAddress();\r\n\r\n  event Deposit(\r\n    address indexed provider,\r\n    uint256 indexed tokenId,\r\n    DepositType indexed depositType,\r\n    uint256 value,\r\n    uint256 locktime,\r\n    uint256 ts\r\n  );\r\n  event Withdraw(address indexed provider, uint256 indexed tokenId, uint256 value, uint256 ts);\r\n  event Supply(uint256 prevSupply, uint256 supply);\r\n  event Delegated(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\r\n  event DelegationRemoved(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\r\n  event ProtocolFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\r\n  event DistributedFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\r\n  event SplitToggle(address indexed account, bool isAllowed);\r\n  event LimitedBoostToggled(bool isBoosted);\r\n  event LimitedTimeBoostSet(uint256 boostAmount);\r\n  event VoterSet(address indexed newVoter);\r\n  event AeroVotingSet(address indexed newAeroVoting);\r\n  event AeroVoterBoostSet(uint256 newAeroVoterBoost);\r\n  event TokensWhitelisted(address[] token, bool[] isWhitelisted);\r\n  event LpTokenTypeSet(address indexed token, LpTokenType lpTokenType);\r\n  event VeAEROSet(address indexed veAERO);\r\n  event StakeStrategySet(LpTokenType indexed lpTokenType, address indexed strategy);\r\n  event MinimumLockAmountSet(address indexed tokenAddress, uint256 minimumAmount);\r\n  event MinimumLockDurationSet(uint256 minimumDuration);\r\n  event IonicPoolSet(address indexed newIonicPool);\r\n  event SplitCompleted(\r\n    uint256 indexed fromTokenId,\r\n    uint256 indexed tokenId1,\r\n    uint256 indexed tokenId2,\r\n    uint256 splitAmount,\r\n    address tokenAddress\r\n  );\r\n  event MergeCompleted(\r\n    uint256 indexed fromTokenId,\r\n    uint256 indexed toTokenId,\r\n    address[] assetsLocked,\r\n    uint256 lengthOfAssets\r\n  );\r\n  event EmissionsClaimed(address indexed claimant, address indexed tokenAddress);\r\n  event MaxEarlyWithdrawFeeSet(uint256 maxEarlyWithdrawFee);\r\n  event PermanentLockCreated(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\r\n  event PermanentLockRemoved(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\r\n  event Voted(uint256 _tokenId, bool _voting);\r\n  event DelegatorsBlocked(uint256 indexed _tokenId, address indexed _lpToken, bool _blocked);\r\n  event Initialized(address indexed addressesProvider);\r\n  event ExtensionsSet(address indexed _firstExtension, address indexed _secondExtension);\r\n}\r\n"
    },
    "contracts/veION/stake/IStakeStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\n/**\r\n * @title IStakeStrategy\r\n * @notice Interface for the VeloIonModeStakingModeReward contract.\r\n */\r\ninterface IStakeStrategy {\r\n  /// @notice Emitted when the contract is initialized\r\n  event Initialized(\r\n    address indexed escrow,\r\n    address indexed stakingToken,\r\n    address indexed stakingContract,\r\n    address stakingWalletImplementation\r\n  );\r\n\r\n  /// @notice Emitted when tokens are staked\r\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\r\n\r\n  /// @notice Emitted when rewards are claimed\r\n  event Claimed(address indexed from, address indexed veloWallet);\r\n\r\n  /// @notice Emitted when tokens are withdrawn\r\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\r\n\r\n  /// @notice Emitted when staking wallet is transferred\r\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\r\n\r\n  /// @notice Emitted when escrow is set\r\n  event EscrowSet(address indexed newEscrow);\r\n\r\n  /// @notice Emitted when staking token is set\r\n  event StakingTokenSet(address indexed newStakingToken);\r\n\r\n  /// @notice Emitted when staking contract is set\r\n  event StakingContractSet(address indexed newStakingContract);\r\n\r\n  /// @notice Emitted when upgradeable beacon is set\r\n  event UpgradeableBeaconSet(address indexed newBeacon);\r\n\r\n  /**\r\n   * @notice Stakes a specified amount of tokens from a given address.\r\n   * @param _from The address from which tokens will be staked.\r\n   * @param _amount The amount of tokens to stake.\r\n   * @param _data Additional data that might be needed for staking.\r\n   */\r\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\r\n\r\n  /**\r\n   * @notice Claims rewards for a given address.\r\n   * @param _from The address for which to claim rewards.\r\n   */\r\n  function claim(address _from) external;\r\n\r\n  /**\r\n   * @notice Withdraws a specified amount of tokens for a given address.\r\n   * @param _owner The address from which tokens will be withdrawn.\r\n   * @param _amount The amount of tokens to withdraw.\r\n   */\r\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\r\n\r\n  /**\r\n   * @notice Returns the current reward rate for the staking strategy.\r\n   * @return The reward rate as a uint256.\r\n   */\r\n  function rewardRate() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the period finish time for the staking strategy.\r\n   * @return The period finish time as a uint256.\r\n   */\r\n  function periodFinish() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the balance of a specific address.\r\n   * @param account The address to query the balance of.\r\n   * @return The balance as a uint256.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the total supply of staked tokens.\r\n   * @return The total supply as a uint256.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the address of the reward token for the staking strategy.\r\n   * @return The address of the reward token.\r\n   */\r\n  function rewardToken() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the staking contract.\r\n   * @return The address of the staking contract.\r\n   */\r\n  function stakingContract() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the staking token.\r\n   * @return The address of the staking token.\r\n   */\r\n  function stakingToken() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the staking wallet address for a specific user.\r\n   * @param user The address of the user.\r\n   * @return The address of the user's staking wallet.\r\n   */\r\n  function userStakingWallet(address user) external view returns (address);\r\n\r\n  /**\r\n   * @notice Transfers the staking wallet from one user to another.\r\n   * @param from The current owner of the staking wallet.\r\n   * @param to The new owner of the staking wallet.\r\n   */\r\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\r\n\r\n  /**\r\n   * @notice Sets the escrow address.\r\n   * @param _escrow The address of the new escrow.\r\n   */\r\n  function setEscrow(address _escrow) external;\r\n\r\n  /**\r\n   * @notice Sets the staking token address.\r\n   * @param _stakingToken The address of the new staking token.\r\n   */\r\n  function setStakingToken(address _stakingToken) external;\r\n\r\n  /**\r\n   * @notice Sets the staking contract address.\r\n   * @param _stakingContract The address of the new staking contract.\r\n   */\r\n  function setStakingContract(address _stakingContract) external;\r\n\r\n  /**\r\n   * @notice Sets the address of the  beacon.\r\n   * @param _beacon The address of the new beacon contract.\r\n   */\r\n  function setUpgradeableBeacon(address _beacon) external;\r\n}\r\n"
    },
    "solmate/auth/Auth.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\r\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\r\nabstract contract Auth {\r\n    event OwnerUpdated(address indexed user, address indexed newOwner);\r\n\r\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\r\n\r\n    address public owner;\r\n\r\n    Authority public authority;\r\n\r\n    constructor(address _owner, Authority _authority) {\r\n        owner = _owner;\r\n        authority = _authority;\r\n\r\n        emit OwnerUpdated(msg.sender, _owner);\r\n        emit AuthorityUpdated(msg.sender, _authority);\r\n    }\r\n\r\n    modifier requiresAuth() virtual {\r\n        require(isAuthorized(msg.sender, msg.sig), \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\r\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\r\n\r\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\r\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\r\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\r\n    }\r\n\r\n    function setAuthority(Authority newAuthority) public virtual {\r\n        // We check if the caller is the owner first because we want to ensure they can\r\n        // always swap out the authority even if it's reverting or using up a lot of gas.\r\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\r\n\r\n        authority = newAuthority;\r\n\r\n        emit AuthorityUpdated(msg.sender, newAuthority);\r\n    }\r\n\r\n    function setOwner(address newOwner) public virtual requiresAuth {\r\n        owner = newOwner;\r\n\r\n        emit OwnerUpdated(msg.sender, newOwner);\r\n    }\r\n}\r\n\r\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\r\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\r\ninterface Authority {\r\n    function canCall(\r\n        address user,\r\n        address target,\r\n        bytes4 functionSig\r\n    ) external view returns (bool);\r\n}\r\n"
    },
    "solmate/auth/authorities/RolesAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\nimport {Auth, Authority} from \"../Auth.sol\";\r\n\r\n/// @notice Role based Authority that supports up to 256 roles.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\r\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\r\ncontract RolesAuthority is Auth, Authority {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\r\n\r\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\r\n\r\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            ROLE/USER STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(address => bytes32) public getUserRoles;\r\n\r\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\r\n\r\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\r\n\r\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\r\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\r\n    }\r\n\r\n    function doesRoleHaveCapability(\r\n        uint8 role,\r\n        address target,\r\n        bytes4 functionSig\r\n    ) public view virtual returns (bool) {\r\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           AUTHORIZATION LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function canCall(\r\n        address user,\r\n        address target,\r\n        bytes4 functionSig\r\n    ) public view virtual override returns (bool) {\r\n        return\r\n            isCapabilityPublic[target][functionSig] ||\r\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                   ROLE CAPABILITY CONFIGURATION LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setPublicCapability(\r\n        address target,\r\n        bytes4 functionSig,\r\n        bool enabled\r\n    ) public virtual requiresAuth {\r\n        isCapabilityPublic[target][functionSig] = enabled;\r\n\r\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\r\n    }\r\n\r\n    function setRoleCapability(\r\n        uint8 role,\r\n        address target,\r\n        bytes4 functionSig,\r\n        bool enabled\r\n    ) public virtual requiresAuth {\r\n        if (enabled) {\r\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\r\n        } else {\r\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\r\n        }\r\n\r\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                       USER ROLE ASSIGNMENT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setUserRole(\r\n        address user,\r\n        uint8 role,\r\n        bool enabled\r\n    ) public virtual requiresAuth {\r\n        if (enabled) {\r\n            getUserRoles[user] |= bytes32(1 << role);\r\n        } else {\r\n            getUserRoles[user] &= ~bytes32(1 << role);\r\n        }\r\n\r\n        emit UserRoleUpdated(user, role, enabled);\r\n    }\r\n}\r\n"
    },
    "solmate/mixins/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\nimport {ERC20} from \"../tokens/ERC20.sol\";\r\nimport {SafeTransferLib} from \"../utils/SafeTransferLib.sol\";\r\nimport {FixedPointMathLib} from \"../utils/FixedPointMathLib.sol\";\r\n\r\n/// @notice Minimal ERC4626 tokenized Vault implementation.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\r\nabstract contract ERC4626 is ERC20 {\r\n    using SafeTransferLib for ERC20;\r\n    using FixedPointMathLib for uint256;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\r\n\r\n    event Withdraw(\r\n        address indexed caller,\r\n        address indexed receiver,\r\n        address indexed owner,\r\n        uint256 assets,\r\n        uint256 shares\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               IMMUTABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    ERC20 public immutable asset;\r\n\r\n    constructor(\r\n        ERC20 _asset,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) ERC20(_name, _symbol, _asset.decimals()) {\r\n        asset = _asset;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        DEPOSIT/WITHDRAWAL LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\r\n        // Check for rounding error since we round down in previewDeposit.\r\n        require((shares = previewDeposit(assets)) != 0, \"ZERO_SHARES\");\r\n\r\n        // Need to transfer before minting or ERC777s could reenter.\r\n        asset.safeTransferFrom(msg.sender, address(this), assets);\r\n\r\n        _mint(receiver, shares);\r\n\r\n        emit Deposit(msg.sender, receiver, assets, shares);\r\n\r\n        afterDeposit(assets, shares);\r\n    }\r\n\r\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\r\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\r\n\r\n        // Need to transfer before minting or ERC777s could reenter.\r\n        asset.safeTransferFrom(msg.sender, address(this), assets);\r\n\r\n        _mint(receiver, shares);\r\n\r\n        emit Deposit(msg.sender, receiver, assets, shares);\r\n\r\n        afterDeposit(assets, shares);\r\n    }\r\n\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner\r\n    ) public virtual returns (uint256 shares) {\r\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\r\n\r\n        if (msg.sender != owner) {\r\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\r\n\r\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\r\n        }\r\n\r\n        beforeWithdraw(assets, shares);\r\n\r\n        _burn(owner, shares);\r\n\r\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\r\n\r\n        asset.safeTransfer(receiver, assets);\r\n    }\r\n\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner\r\n    ) public virtual returns (uint256 assets) {\r\n        if (msg.sender != owner) {\r\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\r\n\r\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\r\n        }\r\n\r\n        // Check for rounding error since we round down in previewRedeem.\r\n        require((assets = previewRedeem(shares)) != 0, \"ZERO_ASSETS\");\r\n\r\n        beforeWithdraw(assets, shares);\r\n\r\n        _burn(owner, shares);\r\n\r\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\r\n\r\n        asset.safeTransfer(receiver, assets);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            ACCOUNTING LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function totalAssets() public view virtual returns (uint256);\r\n\r\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\r\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\r\n\r\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\r\n    }\r\n\r\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\r\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\r\n\r\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\r\n    }\r\n\r\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\r\n        return convertToShares(assets);\r\n    }\r\n\r\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\r\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\r\n\r\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\r\n    }\r\n\r\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\r\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\r\n\r\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\r\n    }\r\n\r\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\r\n        return convertToAssets(shares);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function maxDeposit(address) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    function maxMint(address) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\r\n        return convertToAssets(balanceOf[owner]);\r\n    }\r\n\r\n    function maxRedeem(address owner) public view virtual returns (uint256) {\r\n        return balanceOf[owner];\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                          INTERNAL HOOKS LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\r\n\r\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\r\n}\r\n"
    },
    "solmate/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            address recoveredAddress = ecrecover(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19\\x01\",\r\n                        DOMAIN_SEPARATOR(),\r\n                        keccak256(\r\n                            abi.encode(\r\n                                keccak256(\r\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n                                ),\r\n                                owner,\r\n                                spender,\r\n                                value,\r\n                                nonces[owner]++,\r\n                                deadline\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n                v,\r\n                r,\r\n                s\r\n            );\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n"
    },
    "solmate/utils/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Arithmetic library with operations for fixed-point numbers.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\r\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\r\nlibrary FixedPointMathLib {\r\n    /*//////////////////////////////////////////////////////////////\r\n                    SIMPLIFIED FIXED POINT OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\r\n\r\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\r\n    }\r\n\r\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\r\n    }\r\n\r\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\r\n    }\r\n\r\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    LOW LEVEL FIXED POINT OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function mulDivDown(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 z) {\r\n        assembly {\r\n            // Store x * y in z for now.\r\n            z := mul(x, y)\r\n\r\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\r\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\r\n                revert(0, 0)\r\n            }\r\n\r\n            // Divide z by the denominator.\r\n            z := div(z, denominator)\r\n        }\r\n    }\r\n\r\n    function mulDivUp(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 z) {\r\n        assembly {\r\n            // Store x * y in z for now.\r\n            z := mul(x, y)\r\n\r\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\r\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\r\n                revert(0, 0)\r\n            }\r\n\r\n            // First, divide z - 1 by the denominator and add 1.\r\n            // We allow z - 1 to underflow if z is 0, because we multiply the\r\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\r\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\r\n        }\r\n    }\r\n\r\n    function rpow(\r\n        uint256 x,\r\n        uint256 n,\r\n        uint256 scalar\r\n    ) internal pure returns (uint256 z) {\r\n        assembly {\r\n            switch x\r\n            case 0 {\r\n                switch n\r\n                case 0 {\r\n                    // 0 ** 0 = 1\r\n                    z := scalar\r\n                }\r\n                default {\r\n                    // 0 ** n = 0\r\n                    z := 0\r\n                }\r\n            }\r\n            default {\r\n                switch mod(n, 2)\r\n                case 0 {\r\n                    // If n is even, store scalar in z for now.\r\n                    z := scalar\r\n                }\r\n                default {\r\n                    // If n is odd, store x in z for now.\r\n                    z := x\r\n                }\r\n\r\n                // Shifting right by 1 is like dividing by 2.\r\n                let half := shr(1, scalar)\r\n\r\n                for {\r\n                    // Shift n right by 1 before looping to halve it.\r\n                    n := shr(1, n)\r\n                } n {\r\n                    // Shift n right by 1 each iteration to halve it.\r\n                    n := shr(1, n)\r\n                } {\r\n                    // Revert immediately if x ** 2 would overflow.\r\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\r\n                    if shr(128, x) {\r\n                        revert(0, 0)\r\n                    }\r\n\r\n                    // Store x squared.\r\n                    let xx := mul(x, x)\r\n\r\n                    // Round to the nearest number.\r\n                    let xxRound := add(xx, half)\r\n\r\n                    // Revert if xx + half overflowed.\r\n                    if lt(xxRound, xx) {\r\n                        revert(0, 0)\r\n                    }\r\n\r\n                    // Set x to scaled xxRound.\r\n                    x := div(xxRound, scalar)\r\n\r\n                    // If n is even:\r\n                    if mod(n, 2) {\r\n                        // Compute z * x.\r\n                        let zx := mul(z, x)\r\n\r\n                        // If z * x overflowed:\r\n                        if iszero(eq(div(zx, x), z)) {\r\n                            // Revert if x is non-zero.\r\n                            if iszero(iszero(x)) {\r\n                                revert(0, 0)\r\n                            }\r\n                        }\r\n\r\n                        // Round to the nearest number.\r\n                        let zxRound := add(zx, half)\r\n\r\n                        // Revert if zx + half overflowed.\r\n                        if lt(zxRound, zx) {\r\n                            revert(0, 0)\r\n                        }\r\n\r\n                        // Return properly scaled zxRound.\r\n                        z := div(zxRound, scalar)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        GENERAL NUMBER UTILITIES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\r\n        assembly {\r\n            let y := x // We start y at x, which will help us make our initial estimate.\r\n\r\n            z := 181 // The \"correct\" value is 1, but this saves a multiplication later.\r\n\r\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\r\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\r\n\r\n            // We check y >= 2^(k + 8) but shift right by k bits\r\n            // each branch to ensure that if x >= 256, then y >= 256.\r\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\r\n                y := shr(128, y)\r\n                z := shl(64, z)\r\n            }\r\n            if iszero(lt(y, 0x1000000000000000000)) {\r\n                y := shr(64, y)\r\n                z := shl(32, z)\r\n            }\r\n            if iszero(lt(y, 0x10000000000)) {\r\n                y := shr(32, y)\r\n                z := shl(16, z)\r\n            }\r\n            if iszero(lt(y, 0x1000000)) {\r\n                y := shr(16, y)\r\n                z := shl(8, z)\r\n            }\r\n\r\n            // Goal was to get z*z*y within a small factor of x. More iterations could\r\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\r\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\r\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\r\n\r\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\r\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\r\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\r\n\r\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\r\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\r\n\r\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\r\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\r\n\r\n            // There is no overflow risk here since y < 2^136 after the first branch above.\r\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\r\n\r\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\r\n            z := shr(1, add(z, div(x, z)))\r\n            z := shr(1, add(z, div(x, z)))\r\n            z := shr(1, add(z, div(x, z)))\r\n            z := shr(1, add(z, div(x, z)))\r\n            z := shr(1, add(z, div(x, z)))\r\n            z := shr(1, add(z, div(x, z)))\r\n            z := shr(1, add(z, div(x, z)))\r\n\r\n            // If x+1 is a perfect square, the Babylonian method cycles between\r\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\r\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\r\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\r\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\r\n            z := sub(z, lt(div(x, z), z))\r\n        }\r\n    }\r\n\r\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        assembly {\r\n            // Mod x by y. Note this will return\r\n            // 0 instead of reverting if y is zero.\r\n            z := mod(x, y)\r\n        }\r\n    }\r\n\r\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\r\n        assembly {\r\n            // Divide x by y. Note this will return\r\n            // 0 instead of reverting if y is zero.\r\n            r := div(x, y)\r\n        }\r\n    }\r\n\r\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        assembly {\r\n            // Add 1 to x * y if x % y > 0. Note this will\r\n            // return 0 instead of reverting if y is zero.\r\n            z := add(gt(mod(x, y), 0), div(x, y))\r\n        }\r\n    }\r\n}\r\n"
    },
    "solmate/utils/SafeCastLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Safe unsigned integer casting library that reverts on overflow.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeCastLib.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\r\nlibrary SafeCastLib {\r\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\r\n        require(x < 1 << 248);\r\n\r\n        y = uint248(x);\r\n    }\r\n\r\n    function safeCastTo224(uint256 x) internal pure returns (uint224 y) {\r\n        require(x < 1 << 224);\r\n\r\n        y = uint224(x);\r\n    }\r\n\r\n    function safeCastTo192(uint256 x) internal pure returns (uint192 y) {\r\n        require(x < 1 << 192);\r\n\r\n        y = uint192(x);\r\n    }\r\n\r\n    function safeCastTo160(uint256 x) internal pure returns (uint160 y) {\r\n        require(x < 1 << 160);\r\n\r\n        y = uint160(x);\r\n    }\r\n\r\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\r\n        require(x < 1 << 128);\r\n\r\n        y = uint128(x);\r\n    }\r\n\r\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\r\n        require(x < 1 << 96);\r\n\r\n        y = uint96(x);\r\n    }\r\n\r\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\r\n        require(x < 1 << 64);\r\n\r\n        y = uint64(x);\r\n    }\r\n\r\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\r\n        require(x < 1 << 32);\r\n\r\n        y = uint32(x);\r\n    }\r\n\r\n    function safeCastTo24(uint256 x) internal pure returns (uint24 y) {\r\n        require(x < 1 << 24);\r\n\r\n        y = uint24(x);\r\n    }\r\n\r\n    function safeCastTo16(uint256 x) internal pure returns (uint16 y) {\r\n        require(x < 1 << 16);\r\n\r\n        y = uint16(x);\r\n    }\r\n\r\n    function safeCastTo8(uint256 x) internal pure returns (uint8 y) {\r\n        require(x < 1 << 8);\r\n\r\n        y = uint8(x);\r\n    }\r\n}\r\n"
    },
    "solmate/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\nimport {ERC20} from \"../tokens/ERC20.sol\";\r\n\r\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\r\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\r\nlibrary SafeTransferLib {\r\n    /*//////////////////////////////////////////////////////////////\r\n                             ETH OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Transfer the ETH and store if it succeeded or not.\r\n            success := call(gas(), to, amount, 0, 0, 0, 0)\r\n        }\r\n\r\n        require(success, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            ERC20 OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\r\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\r\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\r\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\r\n\r\n            success := and(\r\n                // Set success to whether the call reverted, if not we check it either\r\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\r\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\r\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\r\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\r\n                // Counterintuitively, this call must be positioned second to the or() call in the\r\n                // surrounding and() call or else returndatasize() will be zero during the computation.\r\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\r\n            )\r\n        }\r\n\r\n        require(success, \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\r\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\r\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\r\n\r\n            success := and(\r\n                // Set success to whether the call reverted, if not we check it either\r\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\r\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\r\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\r\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\r\n                // Counterintuitively, this call must be positioned second to the or() call in the\r\n                // surrounding and() call or else returndatasize() will be zero during the computation.\r\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\r\n            )\r\n        }\r\n\r\n        require(success, \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool success;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\r\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\r\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\r\n\r\n            success := and(\r\n                // Set success to whether the call reverted, if not we check it either\r\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\r\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\r\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\r\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\r\n                // Counterintuitively, this call must be positioned second to the or() call in the\r\n                // surrounding and() call or else returndatasize() will be zero during the computation.\r\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\r\n            )\r\n        }\r\n\r\n        require(success, \"APPROVE_FAILED\");\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}