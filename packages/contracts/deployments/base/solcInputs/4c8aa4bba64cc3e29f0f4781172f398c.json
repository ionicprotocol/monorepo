{
  "language": "Solidity",
  "sources": {
    "@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./OwnableUpgradeable.sol\";\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\r\n    function __Ownable2Step_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\r\n    }\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() external {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/ContextUpgradeable.sol\";\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC721Upgradeable.sol\";\r\nimport \"./IERC721ReceiverUpgradeable.sol\";\r\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\r\nimport \"../../utils/AddressUpgradeable.sol\";\r\nimport \"../../utils/ContextUpgradeable.sol\";\r\nimport \"../../utils/StringsUpgradeable.sol\";\r\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\r\nimport \"../../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\r\n    using AddressUpgradeable for address;\r\n    using StringsUpgradeable for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        __ERC721_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\r\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _ownerOf(tokenId);\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not token owner or approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\r\n     */\r\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\r\n        return _owners[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _ownerOf(tokenId) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        unchecked {\r\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\r\n            // Given that tokens are minted one by one, it is impossible in practice that\r\n            // this ever happens. Might change if we allow batch minting.\r\n            // The ERC fails to describe this case.\r\n            _balances[to] += 1;\r\n        }\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\r\n        owner = ERC721Upgradeable.ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // Cannot overflow, as that would require more tokens to be burned/transferred\r\n            // out than the owner initially received through minting and transferring in.\r\n            _balances[owner] -= 1;\r\n        }\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\r\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n\r\n        // Clear approvals from the previous owner\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\r\n            // `from`'s balance is the number of token held, which is at least one before the current\r\n            // transfer.\r\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\r\n            // all 2**256 token ids to be minted, which in practice is impossible.\r\n            _balances[from] -= 1;\r\n            _balances[to] += 1;\r\n        }\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the `tokenId` has not been minted yet.\r\n     */\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\r\n     * See {_beforeConsecutiveTokenTransfer}.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\r\n     * See {_afterConsecutiveTokenTransfer}.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called before \"consecutive token transfers\" as defined in ERC2309 and implemented in\r\n     * {ERC721Consecutive}.\r\n     * Calling conditions are similar to {_beforeTokenTransfer}.\r\n     */\r\n    function _beforeConsecutiveTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256, /*first*/\r\n        uint96 size\r\n    ) internal virtual {\r\n        if (from != address(0)) {\r\n            _balances[from] -= size;\r\n        }\r\n        if (to != address(0)) {\r\n            _balances[to] += size;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called after \"consecutive token transfers\" as defined in ERC2309 and implemented in\r\n     * {ERC721Consecutive}.\r\n     * Calling conditions are similar to {_afterTokenTransfer}.\r\n     */\r\n    function _afterConsecutiveTokenTransfer(\r\n        address, /*from*/\r\n        address, /*to*/\r\n        uint256, /*first*/\r\n        uint96 /*size*/\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[44] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC721Upgradeable.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721ReceiverUpgradeable {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721Upgradeable is IERC165Upgradeable {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165Upgradeable.sol\";\r\nimport \"../../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal onlyInitializing {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./math/MathUpgradeable.sol\";\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = MathUpgradeable.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\nimport \"../extensions/draft-IERC20Permit.sol\";\r\nimport \"../../../utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "contracts/veION/interfaces/IveIONCore.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport \"../stake/IStakeStrategy.sol\";\r\n\r\n/// @title IveION Interface\r\n/// @notice Interface for veION contract\r\ninterface IveIONCore {\r\n  /**\r\n   * @notice Creates a new lock for multiple tokens and assigns it to a specified address\r\n   * @param _tokenAddress Array of token addresses to lock\r\n   * @param _tokenAmount Array of token amounts to lock\r\n   * @param _duration Array of lock durations\r\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\r\n   * @param _to Address to assign the lock to\r\n   * @return The ID of the newly created veNFT\r\n   */\r\n  function createLockFor(\r\n    address[] memory _tokenAddress,\r\n    uint256[] memory _tokenAmount,\r\n    uint256[] memory _duration,\r\n    bool[] memory _stakeUnderlying,\r\n    address _to\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Creates a new lock for multiple tokens\r\n   * @param _tokenAddress Array of token addresses to lock\r\n   * @param _tokenAmount Array of token amounts to lock\r\n   * @param _duration Array of lock durations\r\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\r\n   * @return The ID of the newly created veNFT\r\n   */\r\n  function createLock(\r\n    address[] calldata _tokenAddress,\r\n    uint256[] calldata _tokenAmount,\r\n    uint256[] calldata _duration,\r\n    bool[] memory _stakeUnderlying\r\n  ) external returns (uint256);\r\n\r\n  /**\r\n   * @notice Increases the amount of tokens locked for a specific veNFT\r\n   * @param _tokenAddress Address of the token to increase lock amount for\r\n   * @param _tokenId ID of the veNFT\r\n   * @param _tokenAmount Amount of tokens to add to the lock\r\n   * @param _stakeUnderlying Whether to stake the underlying tokens\r\n   */\r\n  function increaseAmount(\r\n    address _tokenAddress,\r\n    uint256 _tokenId,\r\n    uint256 _tokenAmount,\r\n    bool _stakeUnderlying\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Locks additional asset type for an existing veNFT\r\n   * @param _tokenAddress Address of the new token to lock\r\n   * @param _tokenAmount Amount of tokens to lock\r\n   * @param _tokenId ID of the veNFT\r\n   * @param _duration Duration of the lock\r\n   * @param _stakeUnderlying Whether to stake the underlying tokens\r\n   */\r\n  function lockAdditionalAsset(\r\n    address _tokenAddress,\r\n    uint256 _tokenAmount,\r\n    uint256 _tokenId,\r\n    uint256 _duration,\r\n    bool _stakeUnderlying\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Increases the lock duration for a specific token in a veNFT\r\n   * @param _tokenAddress Address of the token\r\n   * @param _tokenId ID of the veNFT\r\n   * @param _lockDuration New lock duration to extend to\r\n   */\r\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external;\r\n\r\n  /**\r\n   * @notice Delegates voting power from one veNFT to another.\r\n   * @param fromTokenId The ID of the veNFT from which voting power is delegated.\r\n   * @param toTokenId The ID of the veNFT to which voting power is delegated.\r\n   * @param lpToken The address of the LP token associated with the delegation.\r\n   * @param amount The amount of voting power to delegate.\r\n   */\r\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external;\r\n\r\n  /**\r\n   * @notice Removes delegatees from a specific veNFT\r\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\r\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\r\n   * @param lpToken Address of the LP token associated with the delegation\r\n   * @param amounts Array of amounts of voting power to remove from each delegatee\r\n   */\r\n  function removeDelegatees(\r\n    uint256 fromTokenId,\r\n    uint256[] memory toTokenIds,\r\n    address lpToken,\r\n    uint256[] memory amounts\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Removes delegators from a specific veNFT\r\n   * @param fromTokenIds Array of veNFT IDs that are delegators to be removed\r\n   * @param toTokenId ID of the veNFT from which delegators are removed\r\n   * @param lpToken Address of the LP token associated with the delegation\r\n   * @param amounts Array of amounts of voting power to remove from each delegator\r\n   */\r\n  function removeDelegators(\r\n    uint256[] memory fromTokenIds,\r\n    uint256 toTokenId,\r\n    address lpToken,\r\n    uint256[] memory amounts\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Locks a token permanently.\r\n   * @param _tokenAddress The address of the token to lock.\r\n   * @param _tokenId The ID of the token to lock.\r\n   */\r\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Unlocks a permanently locked token.\r\n   * @param _tokenAddress The address of the token to unlock.\r\n   * @param _tokenId The ID of the token to unlock.\r\n   */\r\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Updates voting status for a veNFT\r\n   * @param _tokenId ID of the veNFT\r\n   * @param _voting Voting status\r\n   */\r\n  function voting(uint256 _tokenId, bool _voting) external;\r\n\r\n  /**\r\n   * @notice Sets the implementation addresses for the veION contract extensions.\r\n   * @dev This function can only be called by authorized entities.\r\n   * @param _veIONFirstExtension The address of the first extension contract.\r\n   * @param _veIONSecondExtension The address of the second extension contract.\r\n   */\r\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external;\r\n}\r\n\r\n/// @title IAeroVotingEscrow Interface\r\n/// @notice Interface for Aero Voting Escrow contract\r\ninterface IAeroVotingEscrow {\r\n  /**\r\n   * @notice Returns the balance of the specified owner.\r\n   * @param _owner The address of the owner.\r\n   * @return The balance of the owner.\r\n   */\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Retrieves the token ID at a specific index for a given owner.\r\n   * @param _owner The address of the owner.\r\n   * @param _index The index of the token ID in the owner's list.\r\n   * @return The token ID at the specified index.\r\n   */\r\n  function ownerToNFTokenIdList(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\n/// @title IAeroVoter Interface\r\n/// @notice Interface for Aero Voter contract\r\ninterface IAeroVoter {\r\n  /**\r\n   * @notice Returns the list of pools voted for by a specific token ID.\r\n   * @param tokenId The ID of the token.\r\n   * @return An array of addresses representing the pools voted for.\r\n   */\r\n  function poolVote(uint256 tokenId) external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Retrieves the weight of a specific pool.\r\n   * @param pool The address of the pool.\r\n   * @return The weight of the pool.\r\n   */\r\n  function weights(address pool) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the number of votes a specific token ID has for a given pool.\r\n   * @param tokenId The ID of the token.\r\n   * @param pool The address of the pool.\r\n   * @return The number of votes for the pool.\r\n   */\r\n  function votes(uint256 tokenId, address pool) external view returns (uint256);\r\n}\r\n\r\ninterface IAddressesProvider {\r\n  function getAddress(string calldata id) external view returns (address);\r\n}\r\n\r\ninterface IMasterPriceOracle {\r\n  function price(address underlying) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/veION/interfaces/IveIONStructsEnumsErrorsEvents.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\ninterface IveIONStructsEnumsErrorsEvents {\r\n  /**\r\n   * @notice Structure representing a locked balance\r\n   * @param tokenAddress Address of the token\r\n   * @param amount Amount of tokens locked\r\n   * @param delegateAmount Amount of tokens delegated\r\n   * @param start Start time of the lock\r\n   * @param end End time of the lock\r\n   * @param isPermanent Indicates if the lock is permanent\r\n   * @param boost Boost value for the lock\r\n   */\r\n  struct LockedBalance {\r\n    address tokenAddress;\r\n    uint256 amount;\r\n    uint256 delegateAmount;\r\n    uint256 start;\r\n    uint256 end;\r\n    bool isPermanent;\r\n    uint256 boost;\r\n  }\r\n\r\n  /**\r\n   * @notice Structure representing a delegation\r\n   * @param amount Amount of tokens delegated\r\n   * @param delegatee ID of the delegatee\r\n   */\r\n  struct Delegation {\r\n    uint256 amount;\r\n    uint256 delegatee;\r\n  }\r\n\r\n  /**\r\n   * @notice Structure representing a user point\r\n   * @param bias Bias value\r\n   * @param slope Slope value, representing -dweight / dt\r\n   * @param ts Timestamp of the point\r\n   * @param blk Block number of the point\r\n   * @param permanent Permanent value\r\n   * @param permanentDelegate Permanent delegate value\r\n   */\r\n  struct UserPoint {\r\n    uint256 bias;\r\n    uint256 slope;\r\n    uint256 ts;\r\n    uint256 blk;\r\n    uint256 permanent;\r\n    uint256 permanentDelegate;\r\n  }\r\n\r\n  /**\r\n   * @notice Structure representing a global point\r\n   * @param bias Bias value\r\n   * @param slope Slope value, representing -dweight / dt\r\n   * @param ts Timestamp of the point\r\n   * @param blk Block number of the point\r\n   * @param permanentLockBalance Permanent lock balance\r\n   */\r\n  struct GlobalPoint {\r\n    int128 bias;\r\n    int128 slope;\r\n    uint256 ts;\r\n    uint256 blk;\r\n    uint256 permanentLockBalance;\r\n  }\r\n\r\n  /**\r\n   * @notice Structure representing a checkpoint\r\n   * @param fromTimestamp Timestamp from which the checkpoint is valid\r\n   * @param owner Address of the owner\r\n   * @param delegatedBalance Balance that has been delegated\r\n   * @param delegatee ID of the delegatee\r\n   */\r\n  struct Checkpoint {\r\n    uint256 fromTimestamp;\r\n    address owner;\r\n    uint256 delegatedBalance;\r\n    uint256 delegatee;\r\n  }\r\n\r\n  /**\r\n   * @notice Enum representing deposit types\r\n   */\r\n  enum DepositType {\r\n    DEPOSIT_FOR_TYPE,\r\n    CREATE_LOCK_TYPE,\r\n    INCREASE_LOCK_AMOUNT,\r\n    INCREASE_UNLOCK_TIME,\r\n    LOCK_ADDITIONAL\r\n  }\r\n\r\n  /**\r\n   * @notice Enum representing LP token types\r\n   */\r\n  enum LpTokenType {\r\n    Mode_Velodrome_5050_ION_MODE,\r\n    Mode_Balancer_8020_ION_ETH,\r\n    Base_Aerodrome_5050_ION_wstETH,\r\n    Base_Balancer_8020_ION_ETH,\r\n    Optimism_Velodrome_5050_ION_OP,\r\n    Optimism_Balancer_8020_ION_ETH\r\n  }\r\n\r\n  error LockDurationNotInFuture();\r\n  error ZeroAmount();\r\n  error LockDurationTooLong();\r\n  error TokenNotWhitelisted();\r\n  error NotOwner();\r\n  error AlreadyVoted();\r\n  error PermanentLock();\r\n  error NoLockFound();\r\n  error LockExpired();\r\n  error SameNFT();\r\n  error SplitNotAllowed();\r\n  error AmountTooBig();\r\n  error NotPermanentLock();\r\n  error TokenHasDelegatees();\r\n  error TokenHasDelegators();\r\n  error NotVoter();\r\n  error MinimumNotMet();\r\n  error ArrayMismatch();\r\n  error LockDurationTooShort();\r\n  error DuplicateAsset();\r\n  error SplitTooSmall();\r\n  error NotEnoughRemainingAfterSplit();\r\n  error NoDelegationBetweenTokens(uint256 _tokenId1, uint256 _tokenId2);\r\n  error NoUnderlyingStake();\r\n  error NotAcceptingDelegators();\r\n  error BoostAmountMustBeGreaterThanZero();\r\n  error InvalidAddress();\r\n  error MinimumAmountMustBeGreaterThanZero();\r\n  error MinimumLockDurationMustBeGreaterThanZero();\r\n  error AeroBoostAmountMustBeGreaterThanZero();\r\n  error MaxEarlyWithdrawFeeMustBeGreaterThanZero();\r\n  error InvalidTokenAddress();\r\n  error InvalidStrategyAddress();\r\n  error InvalidVeAEROAddress();\r\n\r\n  event Deposit(\r\n    address indexed provider,\r\n    uint256 indexed tokenId,\r\n    DepositType indexed depositType,\r\n    uint256 value,\r\n    uint256 locktime,\r\n    uint256 ts\r\n  );\r\n  event Withdraw(address indexed provider, uint256 indexed tokenId, uint256 value, uint256 ts);\r\n  event Supply(uint256 prevSupply, uint256 supply);\r\n  event Delegated(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\r\n  event DelegationRemoved(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\r\n  event ProtocolFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\r\n  event DistributedFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\r\n  event SplitToggle(address indexed account, bool isAllowed);\r\n  event LimitedBoostToggled(bool isBoosted);\r\n  event LimitedTimeBoostSet(uint256 boostAmount);\r\n  event VoterSet(address indexed newVoter);\r\n  event AeroVotingSet(address indexed newAeroVoting);\r\n  event AeroVoterBoostSet(uint256 newAeroVoterBoost);\r\n  event TokensWhitelisted(address[] token, bool[] isWhitelisted);\r\n  event LpTokenTypeSet(address indexed token, LpTokenType lpTokenType);\r\n  event VeAEROSet(address indexed veAERO);\r\n  event StakeStrategySet(LpTokenType indexed lpTokenType, address indexed strategy);\r\n  event MinimumLockAmountSet(address indexed tokenAddress, uint256 minimumAmount);\r\n  event MinimumLockDurationSet(uint256 minimumDuration);\r\n  event IonicPoolSet(address indexed newIonicPool);\r\n  event SplitCompleted(\r\n    uint256 indexed fromTokenId,\r\n    uint256 indexed tokenId1,\r\n    uint256 indexed tokenId2,\r\n    uint256 splitAmount,\r\n    address tokenAddress\r\n  );\r\n  event MergeCompleted(\r\n    uint256 indexed fromTokenId,\r\n    uint256 indexed toTokenId,\r\n    address[] assetsLocked,\r\n    uint256 lengthOfAssets\r\n  );\r\n  event EmissionsClaimed(address indexed claimant, address indexed tokenAddress);\r\n  event MaxEarlyWithdrawFeeSet(uint256 maxEarlyWithdrawFee);\r\n  event PermanentLockCreated(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\r\n  event PermanentLockRemoved(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\r\n  event Voted(uint256 _tokenId, bool _voting);\r\n  event DelegatorsBlocked(uint256 indexed _tokenId, address indexed _lpToken, bool _blocked);\r\n  event Initialized(address indexed addressesProvider);\r\n  event ExtensionsSet(address indexed _firstExtension, address indexed _secondExtension);\r\n}\r\n"
    },
    "contracts/veION/interfaces/IVoter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\n/**\r\n * @title IVoter\r\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\r\n */\r\ninterface IVoter {\r\n  /// @notice Error thrown when a user has already voted or deposited.\r\n  error AlreadyVotedOrDeposited();\r\n\r\n  /// @notice Error thrown when an action is attempted outside the distribution window.\r\n  error DistributeWindow();\r\n\r\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\r\n  error RewardAccumulatorDoesNotExist(address _pool);\r\n\r\n  /// @notice Error thrown when a reward accumulator is not alive.\r\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\r\n\r\n  /// @notice Error thrown when a market already exists.\r\n  error MarketAlreadyExists();\r\n\r\n  /// @notice Error thrown when the maximum voting number is too low.\r\n  error MaximumVotingNumberTooLow();\r\n\r\n  /// @notice Error thrown when array lengths do not match.\r\n  error MismatchedArrayLengths();\r\n\r\n  /// @notice Error thrown when there are non-zero votes.\r\n  error NonZeroVotes();\r\n\r\n  /// @notice Error thrown when the caller is not the owner.\r\n  error NotOwner();\r\n\r\n  /// @notice Error thrown when an action is attempted outside the distribution window.\r\n  error NotDistributeWindow();\r\n\r\n  /// @notice Error thrown when the caller is not the governor.\r\n  error NotGovernor();\r\n\r\n  /// @notice Error thrown when an NFT is not whitelisted.\r\n  error NotWhitelistedNFT();\r\n\r\n  /// @notice Error thrown when the same value is provided.\r\n  error SameValue();\r\n\r\n  /// @notice Error thrown when there are too many pools.\r\n  error TooManyPools();\r\n\r\n  /// @notice Error thrown when array lengths are unequal.\r\n  error UnequalLengths();\r\n\r\n  /// @notice Error thrown when an address is zero.\r\n  error ZeroAddress();\r\n\r\n  /// @notice Error thrown when the tokens array is empty.\r\n  error TokensArrayEmpty();\r\n\r\n  /// @notice Error thrown when the weight is zero.\r\n  error ZeroWeight();\r\n\r\n  /**\r\n   * @notice Struct to store vote details.\r\n   * @param marketVotes Array of market addresses voted for.\r\n   * @param marketVoteSides Array of market sides voted for.\r\n   * @param votes Array of vote weights.\r\n   * @param usedWeight Total weight used in voting.\r\n   */\r\n  struct VoteDetails {\r\n    address[] marketVotes;\r\n    MarketSide[] marketVoteSides;\r\n    uint256[] votes;\r\n    uint256 usedWeight;\r\n  }\r\n\r\n  /**\r\n   * @notice Struct to store market information.\r\n   * @param marketAddress Address of the market.\r\n   * @param side Side of the market (Supply or Borrow).\r\n   */\r\n  struct Market {\r\n    address marketAddress;\r\n    MarketSide side;\r\n  }\r\n\r\n  /**\r\n   * @notice Struct to store variables used in voting.\r\n   * @param totalWeight Total weight available for voting.\r\n   * @param usedWeight Weight used in voting.\r\n   * @param market Address of the market.\r\n   * @param marketSide Side of the market.\r\n   * @param rewardAccumulator Address of the reward accumulator.\r\n   * @param marketWeight Weight of the market.\r\n   * @param bribes Address of the bribes.\r\n   */\r\n  struct VoteVars {\r\n    uint256 totalWeight;\r\n    uint256 usedWeight;\r\n    address market;\r\n    MarketSide marketSide;\r\n    address rewardAccumulator;\r\n    uint256 marketWeight;\r\n    address bribes;\r\n  }\r\n\r\n  /**\r\n   * @notice Struct to store local variables used in voting.\r\n   * @param sender Address of the sender.\r\n   * @param timestamp Timestamp of the vote.\r\n   * @param votingLPs Array of voting LP addresses.\r\n   * @param votingLPBalances Array of voting LP balances.\r\n   * @param boosts Array of boosts.\r\n   */\r\n  struct VoteLocalVars {\r\n    address sender;\r\n    uint256 timestamp;\r\n    address[] votingLPs;\r\n    uint256[] votingLPBalances;\r\n    uint256[] boosts;\r\n  }\r\n\r\n  /**\r\n   * @notice Enum to represent the side of a market.\r\n   */\r\n  enum MarketSide {\r\n    Supply,\r\n    Borrow\r\n  }\r\n\r\n  /**\r\n   * @notice Event emitted when a vote is cast.\r\n   * @param voter Address of the voter.\r\n   * @param pool Address of the pool.\r\n   * @param tokenId ID of the token.\r\n   * @param weight Weight of the vote.\r\n   * @param totalWeight Total weight of the vote.\r\n   * @param timestamp Timestamp of the vote.\r\n   */\r\n  event Voted(\r\n    address indexed voter,\r\n    address indexed pool,\r\n    uint256 indexed tokenId,\r\n    uint256 weight,\r\n    uint256 totalWeight,\r\n    uint256 timestamp\r\n  );\r\n\r\n  /**\r\n   * @notice Event emitted when a vote is abstained.\r\n   * @param voter Address of the voter.\r\n   * @param pool Address of the pool.\r\n   * @param tokenId ID of the token.\r\n   * @param weight Weight of the vote.\r\n   * @param totalWeight Total weight of the vote.\r\n   * @param timestamp Timestamp of the vote.\r\n   */\r\n  event Abstained(\r\n    address indexed voter,\r\n    address indexed pool,\r\n    uint256 indexed tokenId,\r\n    uint256 weight,\r\n    uint256 totalWeight,\r\n    uint256 timestamp\r\n  );\r\n\r\n  /**\r\n   * @notice Event emitted when a reward is notified.\r\n   * @param sender Address of the sender.\r\n   * @param reward Address of the reward.\r\n   * @param amount Amount of the reward.\r\n   */\r\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\r\n\r\n  /**\r\n   * @notice Event emitted when a token is whitelisted.\r\n   * @param whitelister Address of the whitelister.\r\n   * @param token Address of the token.\r\n   * @param _bool Boolean indicating whitelist status.\r\n   */\r\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\r\n\r\n  /**\r\n   * @notice Event emitted when an NFT is whitelisted.\r\n   * @param whitelister Address of the whitelister.\r\n   * @param tokenId ID of the token.\r\n   * @param _bool Boolean indicating whitelist status.\r\n   */\r\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\r\n\r\n  event LpTokensSet(address[] indexed lpTokens);\r\n  event MpoSet(address indexed mpo);\r\n  event GovernorSet(address indexed governor);\r\n  event MarketsAdded(Market[] markets);\r\n  event MarketRewardAccumulatorsSet(\r\n    address[] indexed markets,\r\n    MarketSide[] indexed marketSides,\r\n    address[] indexed rewardAccumulators\r\n  );\r\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\r\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\r\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\r\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\r\n\r\n  /**\r\n   * @notice Get the weight of a market.\r\n   * @param market Address of the market.\r\n   * @param marketSide Side of the market.\r\n   * @param lpToken Address of the LP token.\r\n   * @return The weight of the market.\r\n   */\r\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the votes for a token.\r\n   * @param tokenId ID of the token.\r\n   * @param market Address of the market.\r\n   * @param marketSide Side of the market.\r\n   * @param lpToken Address of the LP token.\r\n   * @return The votes for the token.\r\n   */\r\n  function votes(\r\n    uint256 tokenId,\r\n    address market,\r\n    MarketSide marketSide,\r\n    address lpToken\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the used weights for a token.\r\n   * @param tokenId ID of the token.\r\n   * @param lpToken Address of the LP token.\r\n   * @return The used weights for the token.\r\n   */\r\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the last voted timestamp for a token.\r\n   * @param tokenId ID of the token.\r\n   * @return The last voted timestamp for the token.\r\n   */\r\n  function lastVoted(uint256 tokenId) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Check if a token is whitelisted.\r\n   * @param token Address of the token.\r\n   * @return True if the token is whitelisted, false otherwise.\r\n   */\r\n  function isWhitelistedToken(address token) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Check if an NFT is whitelisted.\r\n   * @param tokenId ID of the token.\r\n   * @return True if the NFT is whitelisted, false otherwise.\r\n   */\r\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Get the address of the ve contract.\r\n   * @return The address of the ve contract.\r\n   */\r\n  function ve() external view returns (address);\r\n\r\n  /**\r\n   * @notice Get the address of the governor.\r\n   * @return The address of the governor.\r\n   */\r\n  function governor() external view returns (address);\r\n\r\n  /**\r\n   * @notice Update voting balances in voting rewards contracts.\r\n   * @param _tokenId ID of veNFT whose balance you wish to update.\r\n   */\r\n  function poke(uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\r\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\r\n   *      Can only vote for gauges that have not been killed.\r\n   *      Throws if length of _poolVote and _weights do not match.\r\n   * @param _tokenId ID of veNFT you are voting with.\r\n   * @param _poolVote Array of pools you are voting for.\r\n   * @param _marketVoteSide Array of market vote sides you are voting for.\r\n   * @param _weights Weights of pools.\r\n   */\r\n  function vote(\r\n    uint256 _tokenId,\r\n    address[] calldata _poolVote,\r\n    MarketSide[] calldata _marketVoteSide,\r\n    uint256[] calldata _weights\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\r\n   * @dev Cannot reset in the same epoch that you voted in.\r\n   *      Can vote or deposit into a managed NFT again after reset.\r\n   * @param _tokenId ID of veNFT that you are resetting.\r\n   */\r\n  function reset(uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Distributes rewards to eligible markets.\r\n   */\r\n  function distributeRewards() external;\r\n\r\n  /**\r\n   * @notice Claim bribes for a given NFT.\r\n   * @dev Utility to help batch bribe claims.\r\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\r\n   * @param _tokens Array of tokens that are used as bribes.\r\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\r\n   */\r\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\r\n   * @dev Throws if not called by governor.\r\n   * @param _token Address of the token.\r\n   * @param _bool Boolean indicating whitelist status.\r\n   */\r\n  function whitelistToken(address _token, bool _bool) external;\r\n\r\n  /**\r\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\r\n   * @dev Throws if not called by governor.\r\n   *      Throws if already whitelisted.\r\n   * @param _tokenId ID of the token.\r\n   * @param _bool Boolean indicating whitelist status.\r\n   */\r\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\r\n\r\n  /**\r\n   * @notice Set the LP tokens.\r\n   * @param _lpTokens Array of LP token addresses.\r\n   */\r\n  function setLpTokens(address[] memory _lpTokens) external;\r\n\r\n  /**\r\n   * @notice Set the Master Price Oracle (MPO) address.\r\n   * @param _mpo Address of the Master Price Oracle.\r\n   */\r\n  function setMpo(address _mpo) external;\r\n\r\n  /**\r\n   * @notice Set a new governor.\r\n   * @param _governor Address of the new governor.\r\n   */\r\n  function setGovernor(address _governor) external;\r\n\r\n  /**\r\n   * @notice Add new markets.\r\n   * @param _markets Array of Market structs to be added.\r\n   */\r\n  function addMarkets(Market[] calldata _markets) external;\r\n\r\n  /**\r\n   * @notice Set reward accumulators for markets.\r\n   * @param _markets Array of market addresses.\r\n   * @param _marketSides Array of market sides.\r\n   * @param _rewardAccumulators Array of reward accumulator addresses.\r\n   */\r\n  function setMarketRewardAccumulators(\r\n    address[] calldata _markets,\r\n    MarketSide[] calldata _marketSides,\r\n    address[] calldata _rewardAccumulators\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Set bribes for reward accumulators.\r\n   * @param _rewardAccumulators Array of reward accumulator addresses.\r\n   * @param _bribes Array of bribe addresses.\r\n   */\r\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\r\n\r\n  /**\r\n   * @notice Set the maximum number of votes.\r\n   * @param _maxVotingNum Maximum number of votes allowed.\r\n   */\r\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\r\n\r\n  /**\r\n   * @notice Toggle the alive status of a reward accumulator.\r\n   * @param _market Address of the market.\r\n   * @param _marketSide Side of the market.\r\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\r\n   */\r\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\r\n\r\n  /**\r\n   * @notice Get the start of the epoch for a given timestamp.\r\n   * @param _timestamp The timestamp to calculate the epoch start for.\r\n   * @return The start of the epoch.\r\n   */\r\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the next epoch for a given timestamp.\r\n   * @param _timestamp The timestamp to calculate the next epoch for.\r\n   * @return The next epoch.\r\n   */\r\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the start of the voting period for a given timestamp.\r\n   * @param _timestamp The timestamp to calculate the voting start for.\r\n   * @return The start of the voting period.\r\n   */\r\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the end of the voting period for a given timestamp.\r\n   * @param _timestamp The timestamp to calculate the voting end for.\r\n   * @return The end of the voting period.\r\n   */\r\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the number of markets.\r\n   * @return The number of markets.\r\n   */\r\n  function marketsLength() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get all LP reward tokens.\r\n   * @return An array of addresses representing all LP reward tokens.\r\n   */\r\n  function getAllLpRewardTokens() external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Get vote details for a specific token ID and LP asset.\r\n   * @param _tokenId The ID of the token.\r\n   * @param _lpAsset The address of the LP asset.\r\n   * @return A struct containing vote details.\r\n   */\r\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\r\n}\r\n"
    },
    "contracts/veION/stake/IStakeStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\n/**\r\n * @title IStakeStrategy\r\n * @notice Interface for the VeloIonModeStakingModeReward contract.\r\n */\r\ninterface IStakeStrategy {\r\n  /// @notice Emitted when the contract is initialized\r\n  event Initialized(\r\n    address indexed escrow,\r\n    address indexed stakingToken,\r\n    address indexed stakingContract,\r\n    address stakingWalletImplementation\r\n  );\r\n\r\n  /// @notice Emitted when tokens are staked\r\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\r\n\r\n  /// @notice Emitted when rewards are claimed\r\n  event Claimed(address indexed from, address indexed veloWallet);\r\n\r\n  /// @notice Emitted when tokens are withdrawn\r\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\r\n\r\n  /// @notice Emitted when staking wallet is transferred\r\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\r\n\r\n  /// @notice Emitted when escrow is set\r\n  event EscrowSet(address indexed newEscrow);\r\n\r\n  /// @notice Emitted when staking token is set\r\n  event StakingTokenSet(address indexed newStakingToken);\r\n\r\n  /// @notice Emitted when staking contract is set\r\n  event StakingContractSet(address indexed newStakingContract);\r\n\r\n  /// @notice Emitted when upgradeable beacon is set\r\n  event UpgradeableBeaconSet(address indexed newBeacon);\r\n\r\n  /**\r\n   * @notice Stakes a specified amount of tokens from a given address.\r\n   * @param _from The address from which tokens will be staked.\r\n   * @param _amount The amount of tokens to stake.\r\n   * @param _data Additional data that might be needed for staking.\r\n   */\r\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\r\n\r\n  /**\r\n   * @notice Claims rewards for a given address.\r\n   * @param _from The address for which to claim rewards.\r\n   */\r\n  function claim(address _from) external;\r\n\r\n  /**\r\n   * @notice Withdraws a specified amount of tokens for a given address.\r\n   * @param _owner The address from which tokens will be withdrawn.\r\n   * @param _amount The amount of tokens to withdraw.\r\n   */\r\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\r\n\r\n  /**\r\n   * @notice Returns the current reward rate for the staking strategy.\r\n   * @return The reward rate as a uint256.\r\n   */\r\n  function rewardRate() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the period finish time for the staking strategy.\r\n   * @return The period finish time as a uint256.\r\n   */\r\n  function periodFinish() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the balance of a specific address.\r\n   * @param account The address to query the balance of.\r\n   * @return The balance as a uint256.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the total supply of staked tokens.\r\n   * @return The total supply as a uint256.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Returns the address of the reward token for the staking strategy.\r\n   * @return The address of the reward token.\r\n   */\r\n  function rewardToken() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the staking contract.\r\n   * @return The address of the staking contract.\r\n   */\r\n  function stakingContract() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the address of the staking token.\r\n   * @return The address of the staking token.\r\n   */\r\n  function stakingToken() external view returns (address);\r\n\r\n  /**\r\n   * @notice Returns the staking wallet address for a specific user.\r\n   * @param user The address of the user.\r\n   * @return The address of the user's staking wallet.\r\n   */\r\n  function userStakingWallet(address user) external view returns (address);\r\n\r\n  /**\r\n   * @notice Transfers the staking wallet from one user to another.\r\n   * @param from The current owner of the staking wallet.\r\n   * @param to The new owner of the staking wallet.\r\n   */\r\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\r\n\r\n  /**\r\n   * @notice Sets the escrow address.\r\n   * @param _escrow The address of the new escrow.\r\n   */\r\n  function setEscrow(address _escrow) external;\r\n\r\n  /**\r\n   * @notice Sets the staking token address.\r\n   * @param _stakingToken The address of the new staking token.\r\n   */\r\n  function setStakingToken(address _stakingToken) external;\r\n\r\n  /**\r\n   * @notice Sets the staking contract address.\r\n   * @param _stakingContract The address of the new staking contract.\r\n   */\r\n  function setStakingContract(address _stakingContract) external;\r\n\r\n  /**\r\n   * @notice Sets the address of the  beacon.\r\n   * @param _beacon The address of the new beacon contract.\r\n   */\r\n  function setUpgradeableBeacon(address _beacon) external;\r\n}\r\n"
    },
    "contracts/veION/veION.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport { ERC721Upgradeable } from \"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\";\r\nimport { Ownable2StepUpgradeable } from \"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\";\r\nimport { IveIONCore, IMasterPriceOracle, IAeroVotingEscrow, IAeroVoter } from \"./interfaces/IveIONCore.sol\";\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport { IVoter } from \"./interfaces/IVoter.sol\";\r\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\";\r\nimport { veIONStorage } from \"./veIONStorage.sol\";\r\nimport { EnumerableSet } from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport { IAddressesProvider } from \"./interfaces/IveIONCore.sol\";\r\nimport { IStakeStrategy } from \"./stake/IStakeStrategy.sol\";\r\n\r\n/**\r\n * @title veION Contract\r\n * @notice This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\r\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\r\n */\r\ncontract veION is Ownable2StepUpgradeable, ERC721Upgradeable, ReentrancyGuardUpgradeable, veIONStorage, IveIONCore {\r\n  using EnumerableSet for EnumerableSet.UintSet;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n  using SafeERC20 for IERC20;\r\n\r\n  constructor() {\r\n    _disableInitializers(); // Locks the implementation contract from being initialized\r\n  }\r\n\r\n  /**\r\n   * @notice Initializes the veION contract with the given AddressesProvider.\r\n   * @dev This function is called only once during the contract deployment.\r\n   * It initializes the Ownable, ERC721, and ReentrancyGuard modules.\r\n   * @param _ap The AddressesProvider contract used for address management.\r\n   */\r\n  function initialize(IAddressesProvider _ap) public initializer {\r\n    __Ownable2Step_init();\r\n    __ERC721_init(\"veION\", \"veION\");\r\n    __ReentrancyGuard_init();\r\n    ap = _ap;\r\n    emit Initialized(address(_ap));\r\n  }\r\n\r\n  // ╔═══════════════════════════════════════════════════════════════════════════╗\r\n  // ║                           External Functions                              ║\r\n  // ╚═══════════════════════════════════════════════════════════════════════════╝\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function createLockFor(\r\n    address[] calldata _tokenAddress,\r\n    uint256[] calldata _tokenAmount,\r\n    uint256[] calldata _duration,\r\n    bool[] memory _stakeUnderlying,\r\n    address _to\r\n  ) external override nonReentrant returns (uint256) {\r\n    return _createLock(_tokenAddress, _tokenAmount, _duration, _stakeUnderlying, _to);\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function createLock(\r\n    address[] calldata _tokenAddress,\r\n    uint256[] calldata _tokenAmount,\r\n    uint256[] calldata _duration,\r\n    bool[] memory _stakeUnderlying\r\n  ) external override nonReentrant returns (uint256) {\r\n    return _createLock(_tokenAddress, _tokenAmount, _duration, _stakeUnderlying, _msgSender());\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function increaseAmount(\r\n    address _tokenAddress,\r\n    uint256 _tokenId,\r\n    uint256 _tokenAmount,\r\n    bool _stakeUnderlying\r\n  ) external nonReentrant {\r\n    LpTokenType _lpType = s_lpType[_tokenAddress];\r\n    LockedBalance memory oldLocked = s_locked[_tokenId][_lpType];\r\n\r\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\r\n    if (_tokenAmount == 0) revert ZeroAmount();\r\n    if (oldLocked.amount == 0) revert NoLockFound();\r\n    if (oldLocked.end <= block.timestamp && !oldLocked.isPermanent) revert LockExpired();\r\n\r\n    if (oldLocked.isPermanent) s_permanentLockBalance[_lpType] += _tokenAmount;\r\n\r\n    _depositFor(\r\n      _tokenAddress,\r\n      _tokenId,\r\n      _tokenAmount,\r\n      0,\r\n      _stakeUnderlying,\r\n      oldLocked,\r\n      DepositType.INCREASE_LOCK_AMOUNT,\r\n      _lpType,\r\n      _msgSender()\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function lockAdditionalAsset(\r\n    address _tokenAddress,\r\n    uint256 _tokenAmount,\r\n    uint256 _tokenId,\r\n    uint256 _duration,\r\n    bool _stakeUnderlying\r\n  ) external nonReentrant {\r\n    LpTokenType lpType = s_lpType[_tokenAddress];\r\n    LockedBalance storage lockedBalance = s_locked[_tokenId][lpType];\r\n    uint256 unlockTime = ((block.timestamp + _duration) / _WEEK) * _WEEK;\r\n\r\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\r\n    if (_tokenAmount == 0) revert ZeroAmount();\r\n    if (s_voted[_tokenId]) revert AlreadyVoted();\r\n    if (!s_assetsLocked[_tokenId].add(_tokenAddress)) revert DuplicateAsset();\r\n    if (_tokenAmount < s_minimumLockAmount[lpType]) revert MinimumNotMet();\r\n    if (unlockTime > block.timestamp + _MAXTIME) revert LockDurationTooLong();\r\n    if (_duration < s_minimumLockDuration) revert LockDurationTooShort();\r\n\r\n    if (lockedBalance.isPermanent) s_permanentLockBalance[lpType] += _tokenAmount;\r\n\r\n    _depositFor(\r\n      _tokenAddress,\r\n      _tokenId,\r\n      _tokenAmount,\r\n      unlockTime,\r\n      _stakeUnderlying,\r\n      lockedBalance,\r\n      DepositType.LOCK_ADDITIONAL,\r\n      lpType,\r\n      _msgSender()\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external nonReentrant {\r\n    LpTokenType _lpType = s_lpType[_tokenAddress];\r\n    LockedBalance memory oldLocked = s_locked[_tokenId][_lpType];\r\n    uint256 unlockTime = ((block.timestamp + _lockDuration) / _WEEK) * _WEEK; // Locktime is rounded down to weeks\r\n\r\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\r\n    if (oldLocked.isPermanent) revert PermanentLock();\r\n    if (oldLocked.end <= block.timestamp) revert LockExpired();\r\n    if (oldLocked.amount <= 0) revert NoLockFound();\r\n    if (unlockTime <= oldLocked.end) revert LockDurationNotInFuture();\r\n    if (unlockTime > block.timestamp + _MAXTIME) revert LockDurationTooLong();\r\n\r\n    _depositFor(\r\n      _tokenAddress,\r\n      _tokenId,\r\n      0,\r\n      unlockTime,\r\n      false,\r\n      oldLocked,\r\n      DepositType.INCREASE_UNLOCK_TIME,\r\n      _lpType,\r\n      _msgSender()\r\n    );\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external nonReentrant {\r\n    LpTokenType lpType = s_lpType[lpToken];\r\n    LockedBalance memory fromLocked = s_locked[fromTokenId][lpType];\r\n    LockedBalance memory toLocked = s_locked[toTokenId][lpType];\r\n\r\n    if (ownerOf(fromTokenId) != _msgSender()) revert NotOwner();\r\n    if (amount > fromLocked.amount) revert AmountTooBig();\r\n    if (!fromLocked.isPermanent) revert NotPermanentLock();\r\n    if (!toLocked.isPermanent) revert NotPermanentLock();\r\n    if (s_delegatorsBlocked[toTokenId][lpToken]) revert NotAcceptingDelegators();\r\n\r\n    fromLocked.amount -= amount;\r\n    toLocked.delegateAmount += amount;\r\n\r\n    if (s_delegations[fromTokenId][toTokenId][lpType] == 0) {\r\n      s_delegatees[fromTokenId][lpType].add(toTokenId);\r\n      s_delegators[toTokenId][lpType].add(fromTokenId);\r\n    }\r\n\r\n    s_delegations[fromTokenId][toTokenId][lpType] += amount;\r\n\r\n    s_locked[fromTokenId][lpType] = fromLocked;\r\n    s_locked[toTokenId][lpType] = toLocked;\r\n    _checkpoint(fromTokenId, s_locked[fromTokenId][lpType], lpType);\r\n    _checkpoint(toTokenId, s_locked[toTokenId][lpType], lpType);\r\n\r\n    if (s_voted[toTokenId]) IVoter(s_voter).poke(toTokenId);\r\n    if (s_voted[fromTokenId]) IVoter(s_voter).poke(fromTokenId);\r\n\r\n    emit Delegated(fromTokenId, toTokenId, lpToken, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a delegation between two veNFTs.\r\n   * @param fromTokenId ID of the veNFT from which delegation is being removed.\r\n   * @param toTokenId ID of the veNFT to which delegation is being removed.\r\n   * @param lpToken Address of the LP token associated with the delegation.\r\n   * @param amount Amount of delegation to remove.\r\n   */\r\n  function _removeDelegation(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) internal {\r\n    LpTokenType lpType = s_lpType[lpToken];\r\n    LockedBalance memory fromLocked = s_locked[fromTokenId][lpType];\r\n    LockedBalance memory toLocked = s_locked[toTokenId][lpType];\r\n\r\n    if (ownerOf(fromTokenId) != _msgSender() && ownerOf(toTokenId) != _msgSender()) revert NotOwner();\r\n    if (s_delegations[fromTokenId][toTokenId][lpType] == 0) revert NoDelegationBetweenTokens(fromTokenId, toTokenId);\r\n\r\n    amount = amount > s_delegations[fromTokenId][toTokenId][lpType]\r\n      ? s_delegations[fromTokenId][toTokenId][lpType]\r\n      : amount;\r\n\r\n    toLocked.delegateAmount -= amount;\r\n    fromLocked.amount += amount;\r\n\r\n    s_delegations[fromTokenId][toTokenId][lpType] -= amount;\r\n    if (s_delegations[fromTokenId][toTokenId][lpType] == 0) {\r\n      s_delegatees[fromTokenId][lpType].remove(toTokenId);\r\n      s_delegators[toTokenId][lpType].remove(fromTokenId);\r\n    }\r\n\r\n    s_locked[toTokenId][lpType] = toLocked;\r\n    s_locked[fromTokenId][lpType] = fromLocked;\r\n    _checkpoint(toTokenId, s_locked[toTokenId][lpType], lpType);\r\n    _checkpoint(fromTokenId, s_locked[fromTokenId][lpType], lpType);\r\n\r\n    if (s_voted[toTokenId]) IVoter(s_voter).poke(toTokenId);\r\n    if (s_voted[fromTokenId]) IVoter(s_voter).poke(fromTokenId);\r\n\r\n    emit DelegationRemoved(fromTokenId, toTokenId, lpToken, amount);\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function removeDelegatees(\r\n    uint256 fromTokenId,\r\n    uint256[] memory toTokenIds,\r\n    address lpToken,\r\n    uint256[] memory amounts\r\n  ) public nonReentrant {\r\n    if (toTokenIds.length != amounts.length) revert ArrayMismatch();\r\n    uint256 toTokenIdsLength = toTokenIds.length;\r\n    for (uint256 i = 0; i < toTokenIdsLength; i++) {\r\n      _removeDelegation(fromTokenId, toTokenIds[i], lpToken, amounts[i]);\r\n    }\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function removeDelegators(\r\n    uint256[] memory fromTokenIds,\r\n    uint256 toTokenId,\r\n    address lpToken,\r\n    uint256[] memory amounts\r\n  ) external nonReentrant {\r\n    if (fromTokenIds.length != amounts.length) revert ArrayMismatch();\r\n    uint256 fromTokenIdsLength = fromTokenIds.length;\r\n    for (uint256 i = 0; i < fromTokenIdsLength; i++) {\r\n      _removeDelegation(fromTokenIds[i], toTokenId, lpToken, amounts[i]);\r\n    }\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external nonReentrant {\r\n    LpTokenType _lpType = s_lpType[_tokenAddress];\r\n    LockedBalance memory _newLocked = s_locked[_tokenId][_lpType];\r\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\r\n    if (_newLocked.isPermanent) revert PermanentLock();\r\n    if (_newLocked.end <= block.timestamp) revert LockExpired();\r\n    if (_newLocked.amount <= 0) revert NoLockFound();\r\n\r\n    s_permanentLockBalance[_lpType] += _newLocked.amount;\r\n    _newLocked.end = 0;\r\n    _newLocked.isPermanent = true;\r\n    _newLocked.boost = _calculateBoost(_MAXTIME);\r\n\r\n    s_locked[_tokenId][_lpType] = _newLocked;\r\n    _checkpoint(_tokenId, _newLocked, _lpType);\r\n\r\n    emit PermanentLockCreated(_tokenAddress, _tokenId, _newLocked.amount);\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external nonReentrant {\r\n    LpTokenType _lpType = s_lpType[_tokenAddress];\r\n    LockedBalance memory _newLocked = s_locked[_tokenId][_lpType];\r\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\r\n    if (!_newLocked.isPermanent) revert NotPermanentLock();\r\n    if (s_delegatees[_tokenId][_lpType].length() != 0) revert TokenHasDelegatees();\r\n    if (s_delegators[_tokenId][_lpType].length() != 0) revert TokenHasDelegators();\r\n\r\n    s_permanentLockBalance[_lpType] -= _newLocked.amount;\r\n    _newLocked.end = ((block.timestamp + _MAXTIME) / _WEEK) * _WEEK;\r\n    _newLocked.isPermanent = false;\r\n\r\n    s_locked[_tokenId][_lpType] = _newLocked;\r\n    _checkpoint(_tokenId, _newLocked, _lpType);\r\n\r\n    emit PermanentLockRemoved(_tokenAddress, _tokenId, _newLocked.amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Overrides the _burn function from ERC721 to include additional logic for bridging.\r\n   * @param tokenId Token ID to burn.\r\n   */\r\n  function _burn(uint256 tokenId) internal override {\r\n    super._burn(tokenId);\r\n  }\r\n\r\n  /**\r\n   * @notice Hook that is called before any token transfer. This includes minting\r\n   * and burning. It updates the ownership mappings and handles delegation and\r\n   * staking logic when transferring tokens between addresses.\r\n   *\r\n   * @param from The address which previously owned the token.\r\n   * @param to The address that will receive the token.\r\n   * @param tokenId The ID of the token being transferred.\r\n   */\r\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {\r\n    super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n    if (from != address(0)) s_ownerToTokenIds[from].remove(tokenId);\r\n    if (to != address(0)) s_ownerToTokenIds[to].add(tokenId);\r\n\r\n    if (from != address(0) && to != address(0)) {\r\n      address[] memory assetsLocked = s_assetsLocked[tokenId].values();\r\n      uint256 assetsLockedLength = assetsLocked.length;\r\n      for (uint256 i = 0; i < assetsLockedLength; i++) {\r\n        address asset = assetsLocked[i];\r\n        LpTokenType _lpType = s_lpType[asset];\r\n\r\n        uint256[] memory delegatees = s_delegatees[tokenId][_lpType].values();\r\n        uint256[] memory amounts = new uint256[](delegatees.length);\r\n        uint256 delegateesLength = delegatees.length;\r\n        for (uint256 j = 0; j < delegateesLength; j++) {\r\n          amounts[j] = type(uint256).max;\r\n        }\r\n\r\n        if (delegateesLength != 0) {\r\n          removeDelegatees(tokenId, delegatees, asset, amounts);\r\n        }\r\n\r\n        uint256 amountStaked = s_underlyingStake[tokenId][asset];\r\n        if (amountStaked != 0) {\r\n          IStakeStrategy _stakeStrategy = s_stakeStrategy[_lpType];\r\n          _stakeStrategy.transferStakingWallet(from, to, amountStaked);\r\n        }\r\n\r\n        LockedBalance memory lock = s_locked[tokenId][_lpType];\r\n        s_userCumulativeAssetValues[from][asset] -= lock.amount;\r\n        s_userCumulativeAssetValues[to][asset] += lock.amount;\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function voting(uint256 _tokenId, bool _voting) external {\r\n    if (_msgSender() != s_voter) revert NotVoter();\r\n    s_voted[_tokenId] = _voting;\r\n    emit Voted(_tokenId, _voting);\r\n  }\r\n\r\n  // ╔═══════════════════════════════════════════════════════════════════════════╗\r\n  // ║                           Internal Functions                              ║\r\n  // ╚═══════════════════════════════════════════════════════════════════════════╝\r\n\r\n  struct DepositVars {\r\n    uint256 supplyBefore;\r\n    uint256 totalLockTime;\r\n    LockedBalance newLocked;\r\n    address from;\r\n  }\r\n\r\n  /**\r\n   * @notice Deposits tokens for a specific veNFT, updating its locked balance and boost.\r\n   * @dev This function handles the deposit logic for veNFTs, including updating the locked balance,\r\n   *      calculating the boost based on the lock duration, and transferring tokens.\r\n   * @param _tokenAddress The address of the token to deposit.\r\n   * @param _tokenId The ID of the veNFT to deposit tokens for.\r\n   * @param _tokenAmount The amount of tokens to deposit.\r\n   * @param _unlockTime The time at which the lock will expire.\r\n   * @param _stakeUnderlying A boolean indicating whether to stake the underlying tokens.\r\n   * @param _oldLocked The previous locked balance of the veNFT.\r\n   * @param _depositType The type of deposit being made.\r\n   * @param _lpType The LP token type associated with the deposit.\r\n   * @param _to The address to which the veNFT is assigned.\r\n   */\r\n  function _depositFor(\r\n    address _tokenAddress,\r\n    uint256 _tokenId,\r\n    uint256 _tokenAmount,\r\n    uint256 _unlockTime,\r\n    bool _stakeUnderlying,\r\n    LockedBalance memory _oldLocked,\r\n    DepositType _depositType,\r\n    LpTokenType _lpType,\r\n    address _to\r\n  ) internal {\r\n    if (!s_whitelistedToken[_tokenAddress]) revert TokenNotWhitelisted();\r\n\r\n    DepositVars memory vars;\r\n    vars.supplyBefore = s_supply[_lpType];\r\n    s_supply[_lpType] = vars.supplyBefore + _tokenAmount;\r\n\r\n    (\r\n      vars.newLocked.tokenAddress,\r\n      vars.newLocked.amount,\r\n      vars.newLocked.start,\r\n      vars.newLocked.end,\r\n      vars.newLocked.isPermanent,\r\n      vars.newLocked.boost\r\n    ) = (\r\n      _oldLocked.tokenAddress,\r\n      _oldLocked.amount,\r\n      _oldLocked.start,\r\n      _oldLocked.end,\r\n      _oldLocked.isPermanent,\r\n      _oldLocked.boost\r\n    );\r\n\r\n    vars.newLocked.tokenAddress = _tokenAddress;\r\n    vars.newLocked.amount += _tokenAmount;\r\n    if (_unlockTime != 0) {\r\n      if (vars.newLocked.start == 0) vars.newLocked.start = block.timestamp;\r\n      vars.newLocked.end = _unlockTime;\r\n      vars.totalLockTime = vars.newLocked.end - vars.newLocked.start;\r\n      vars.newLocked.boost = _calculateBoost(vars.totalLockTime);\r\n    }\r\n    s_locked[_tokenId][_lpType] = vars.newLocked;\r\n\r\n    _checkpoint(_tokenId, vars.newLocked, _lpType);\r\n\r\n    vars.from = _msgSender();\r\n    if (_tokenAmount != 0) {\r\n      s_userCumulativeAssetValues[ownerOf(_tokenId)][_tokenAddress] += _tokenAmount;\r\n      IERC20(_tokenAddress).safeTransferFrom(vars.from, address(this), _tokenAmount);\r\n      (IStakeStrategy _stakeStrategy, bytes memory _stakeData) = _getStakeStrategy(_lpType);\r\n      if (address(_stakeStrategy) != address(0) && _stakeUnderlying) {\r\n        _handleTokenStake(_to, _tokenId, _tokenAddress, _tokenAmount, _stakeStrategy, _stakeData);\r\n      }\r\n    }\r\n\r\n    emit Deposit(_to, _tokenId, _depositType, _tokenAmount, vars.newLocked.end, block.timestamp);\r\n    emit Supply(vars.supplyBefore, s_supply[_lpType]);\r\n  }\r\n\r\n  /**\r\n   * @notice Handles the staking of tokens using a specified staking strategy.\r\n   * @param _to The address to which the stake is attributed.\r\n   * @param _tokenId The ID of the token being staked.\r\n   * @param _tokenAddress The address of the token being staked.\r\n   * @param _tokenAmount The amount of tokens to stake.\r\n   * @param _stakeStrategy The staking strategy to use.\r\n   * @param _stakeData Additional data required for staking.\r\n   */\r\n  function _handleTokenStake(\r\n    address _to,\r\n    uint256 _tokenId,\r\n    address _tokenAddress,\r\n    uint256 _tokenAmount,\r\n    IStakeStrategy _stakeStrategy,\r\n    bytes memory _stakeData\r\n  ) internal {\r\n    IERC20(_tokenAddress).approve(address(_stakeStrategy), _tokenAmount);\r\n    _stakeStrategy.stake(_to, _tokenAmount, _stakeData);\r\n    s_underlyingStake[_tokenId][_tokenAddress] += _tokenAmount;\r\n  }\r\n\r\n  /**\r\n   * @notice Updates the user point history and epoch for a given token and LP token type.\r\n   * @param _tokenId The ID of the token.\r\n   * @param _newLocked The new locked balance information.\r\n   * @param _lpType The LP token type.\r\n   */\r\n  function _checkpoint(uint256 _tokenId, LockedBalance memory _newLocked, LpTokenType _lpType) internal {\r\n    UserPoint memory uNew;\r\n    uNew.permanent = _newLocked.isPermanent ? _newLocked.amount : 0;\r\n    uNew.permanentDelegate = _newLocked.isPermanent ? _newLocked.delegateAmount : 0;\r\n\r\n    if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\r\n      uNew.slope = _newLocked.amount / _MAXTIME;\r\n      uNew.bias = uNew.slope * (_newLocked.end - block.timestamp);\r\n    }\r\n\r\n    uNew.ts = block.timestamp;\r\n    uNew.blk = block.number;\r\n    uint256 userEpoch = s_userPointEpoch[_tokenId][_lpType];\r\n    if (userEpoch != 0 && s_userPointHistory[_tokenId][_lpType][userEpoch].ts == block.timestamp) {\r\n      s_userPointHistory[_tokenId][_lpType][userEpoch] = uNew;\r\n    } else {\r\n      s_userPointEpoch[_tokenId][_lpType] = ++userEpoch;\r\n      s_userPointHistory[_tokenId][_lpType][userEpoch] = uNew;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Creates a lock for multiple tokens with specified durations and staking options.\r\n   * @param _tokenAddress Array of token addresses to lock.\r\n   * @param _tokenAmount Array of token amounts to lock.\r\n   * @param _duration Array of durations for each lock.\r\n   * @param _stakeUnderlying Array of booleans indicating whether to stake the underlying tokens.\r\n   * @param _to The address to which the lock is attributed.\r\n   * @return The ID of the newly created lock.\r\n   */\r\n  function _createLock(\r\n    address[] memory _tokenAddress,\r\n    uint256[] memory _tokenAmount,\r\n    uint256[] memory _duration,\r\n    bool[] memory _stakeUnderlying,\r\n    address _to\r\n  ) internal returns (uint256) {\r\n    uint256 _tokenId = ++s_tokenId;\r\n    uint256 _length = _tokenAddress.length;\r\n    _safeMint(_to, _tokenId);\r\n\r\n    if (\r\n      _tokenAddress.length != _tokenAmount.length ||\r\n      _tokenAmount.length != _duration.length ||\r\n      _duration.length != _stakeUnderlying.length\r\n    ) {\r\n      revert ArrayMismatch();\r\n    }\r\n\r\n    for (uint256 i = 0; i < _length; i++) {\r\n      LpTokenType _lpType = s_lpType[_tokenAddress[i]];\r\n      uint256 unlockTime = ((block.timestamp + _duration[i]) / _WEEK) * _WEEK;\r\n\r\n      if (!s_assetsLocked[_tokenId].add(_tokenAddress[i])) revert DuplicateAsset();\r\n      if (_tokenAmount[i] == 0) revert ZeroAmount();\r\n      if (_duration[i] < s_minimumLockDuration) revert LockDurationTooShort();\r\n      if (unlockTime > block.timestamp + _MAXTIME) revert LockDurationTooLong();\r\n      if (_tokenAmount[i] < s_minimumLockAmount[_lpType]) revert MinimumNotMet();\r\n\r\n      _depositFor(\r\n        _tokenAddress[i],\r\n        _tokenId,\r\n        _tokenAmount[i],\r\n        unlockTime,\r\n        _stakeUnderlying[i],\r\n        s_locked[_tokenId][_lpType],\r\n        DepositType.CREATE_LOCK_TYPE,\r\n        _lpType,\r\n        _to\r\n      );\r\n    }\r\n    return _tokenId;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates the boost for a given lock duration.\r\n   * @param _duration The duration of the lock.\r\n   * @return The calculated boost value.\r\n   */\r\n  function _calculateBoost(uint256 _duration) internal view returns (uint256) {\r\n    uint256 minDuration = s_minimumLockDuration;\r\n    uint256 maxDuration = _MAXTIME;\r\n    uint256 minBoost = 1e18;\r\n    uint256 maxBoost = 2e18;\r\n\r\n    if (_duration <= minDuration) {\r\n      return minBoost;\r\n    } else if (_duration >= maxDuration) {\r\n      return maxBoost;\r\n    } else {\r\n      return minBoost + ((_duration - minDuration) * (maxBoost - minBoost)) / (maxDuration - minDuration);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Retrieves the staking strategy and data for a given LP token type.\r\n   * @param _lpType The LP token type.\r\n   * @return _stakeStrategy The staking strategy for the LP token type.\r\n   * @return _stakeData The staking data for the LP token type.\r\n   */\r\n  function _getStakeStrategy(\r\n    LpTokenType _lpType\r\n  ) internal view returns (IStakeStrategy _stakeStrategy, bytes memory _stakeData) {\r\n    IStakeStrategy strategy = s_stakeStrategy[_lpType];\r\n    return (strategy, \"\");\r\n  }\r\n\r\n  /// @inheritdoc IveIONCore\r\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external onlyOwner {\r\n    require(_veIONFirstExtension != address(0), \"Invalid implementation address\");\r\n    veIONFirstExtension = _veIONFirstExtension;\r\n    veIONSecondExtension = _veIONSecondExtension;\r\n    emit ExtensionsSet(_veIONFirstExtension, _veIONSecondExtension);\r\n  }\r\n\r\n  /**\r\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n   * function in the contract matches the call data.\r\n   */\r\n  fallback() external {\r\n    address impl = veIONFirstExtension;\r\n    require(impl != address(0), \"Implementation not set\");\r\n\r\n    assembly {\r\n      calldatacopy(0, 0, calldatasize())\r\n\r\n      let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\r\n\r\n      returndatacopy(0, 0, returndatasize())\r\n      switch result\r\n      case 0 {\r\n        revert(0, returndatasize())\r\n      }\r\n      default {\r\n        return(0, returndatasize())\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/veION/veIONStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport { IAddressesProvider } from \"./interfaces/IveIONCore.sol\";\r\nimport { IStakeStrategy } from \"./stake/IStakeStrategy.sol\";\r\nimport { EnumerableSet } from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport { IveIONStructsEnumsErrorsEvents } from \"./interfaces/IveIONStructsEnumsErrorsEvents.sol\";\r\n\r\nabstract contract veIONStorage is IveIONStructsEnumsErrorsEvents {\r\n  // ╔═══════════════════════════════════════════════════════════════════════════╗\r\n  // ║                                Constants                                  ║\r\n  // ╚═══════════════════════════════════════════════════════════════════════════╝\r\n  /// @notice Represents the duration of one week in seconds.\r\n  uint256 internal constant _WEEK = 1 weeks;\r\n  /// @notice Represents the maximum lock time in seconds (2 years).\r\n  uint256 internal constant _MAXTIME = 2 * 365 * 86400;\r\n  /// @notice Precision used for calculations, set to 1e18.\r\n  uint256 public constant PRECISION = 1e18;\r\n\r\n  // ╔═══════════════════════════════════════════════════════════════════════════╗\r\n  // ║                             State Variables                               ║\r\n  // ╚═══════════════════════════════════════════════════════════════════════════╝\r\n  /// @notice The current token ID counter.\r\n  uint256 public s_tokenId;\r\n  /// @notice The amount of limited boost available.\r\n  uint256 public s_limitedBoost;\r\n  /// @notice Indicates whether the limited boost is active.\r\n  bool public s_limitedBoostActive;\r\n  /// @notice Address of the veAERO contract.\r\n  address public s_veAERO;\r\n  /// @notice Address of the AeroVoting contract.\r\n  address public s_aeroVoting;\r\n  /// @notice Address of the Ionic Pool.\r\n  address public s_ionicPool;\r\n  /// @notice Address of the voter contract.\r\n  address public s_voter;\r\n  /// @notice The boost amount for AeroVoter.\r\n  uint256 public s_aeroVoterBoost;\r\n  /// @notice The minimum duration for locking.\r\n  uint256 public s_minimumLockDuration;\r\n  /// @notice The maximum fee for early withdrawal.\r\n  uint256 public s_maxEarlyWithdrawFee;\r\n  /// @notice The AddressesProvider contract used for address management.\r\n  IAddressesProvider public ap;\r\n  /// @notice The address of the logic contract for the veION first extension.\r\n  address public veIONFirstExtension;\r\n  /// @notice The address of the logic contract for the veION second extension.\r\n  address public veIONSecondExtension;\r\n\r\n  // ╔═══════════════════════════════════════════════════════════════════════════╗\r\n  // ║                                Mappings                                   ║\r\n  // ╚═══════════════════════════════════════════════════════════════════════════╝\r\n  /// @dev Maps LP token types to their minimum lock amounts.\r\n  mapping(LpTokenType => uint256) public s_minimumLockAmount;\r\n  /// @dev Maps token addresses to their whitelist status.\r\n  mapping(address => bool) public s_whitelistedToken;\r\n  /// @dev Maps token addresses to their corresponding LP token types.\r\n  mapping(address => LpTokenType) public s_lpType;\r\n  /// @dev Maps user addresses to their ability to split.\r\n  mapping(address => bool) public s_canSplit;\r\n  /// @dev Maps token IDs and LP token types to their locked balances.\r\n  mapping(uint256 => mapping(LpTokenType => LockedBalance)) public s_locked;\r\n  /// @dev Maps token IDs and LP token types to user epochs.\r\n  mapping(uint256 => mapping(LpTokenType => uint256)) public s_userPointEpoch;\r\n  /// @dev Maps token IDs and LP token types to user point history.\r\n  mapping(uint256 => mapping(LpTokenType => UserPoint[1000000000])) public s_userPointHistory;\r\n  /// @dev Maps token IDs to sets of locked asset addresses.\r\n  mapping(uint256 => EnumerableSet.AddressSet) internal s_assetsLocked;\r\n  /// @dev Maps token IDs to their voting status.\r\n  mapping(uint256 => bool) public s_voted;\r\n  /// @dev Maps LP token types to their total supply.\r\n  mapping(LpTokenType => uint256) public s_supply;\r\n  /// @dev Maps LP token types to their permanent lock balances.\r\n  mapping(LpTokenType => uint256) public s_permanentLockBalance;\r\n  /// @dev Maps LP token types to their underlying stake strategies.\r\n  mapping(LpTokenType => IStakeStrategy) public s_stakeStrategy;\r\n  /// @dev Maps token IDs and LP token addresses to their underlying stake amounts.\r\n  mapping(uint256 => mapping(address => uint256)) public s_underlyingStake;\r\n  /// @dev Maps LP token types to their protocol fees.\r\n  mapping(LpTokenType => uint256) public s_protocolFees;\r\n  /// @dev Maps LP token types to their distributed fees.\r\n  mapping(LpTokenType => uint256) public s_distributedFees;\r\n  /// @dev Maps delegators, delegatees, and LP token types to delegation amounts.\r\n  mapping(uint256 => mapping(uint256 => mapping(LpTokenType => uint256))) public s_delegations;\r\n  /// @dev Maps token IDs and LP token types to sets of delegatees.\r\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegatees;\r\n  /// @dev Maps token IDs and LP token types to sets of delegators.\r\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegators;\r\n  /// @dev Maps owner addresses to sets of token IDs they own.\r\n  mapping(address => EnumerableSet.UintSet) internal s_ownerToTokenIds;\r\n  /// @dev Maps user addresses and token addresses to cumulative asset values.\r\n  mapping(address => mapping(address => uint256)) public s_userCumulativeAssetValues;\r\n  /// @dev Maps token Id and lp onto delegator permissioning.\r\n  mapping(uint256 => mapping(address => bool)) public s_delegatorsBlocked;\r\n\r\n  uint256[50] private __gap;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}