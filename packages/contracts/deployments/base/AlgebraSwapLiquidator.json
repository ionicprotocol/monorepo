{
  "address": "0x368E9E9c4226f5DcD496987d70b602Cc9ad56007",
  "abi": [
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf0ca873479b64bb8ea0da8c3f38cf48ac5633e4b27572fdb85e2f01b92366a2",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0x368E9E9c4226f5DcD496987d70b602Cc9ad56007",
    "transactionIndex": 86,
    "gasUsed": "283723",
    "logsBloom": "0x
    "blockHash": "0xa0498b4a8f8ae8649e88235b952c9a99d240d04589a64f5945c6293b09f515d9",
    "transactionHash": "0xaf0ca873479b64bb8ea0da8c3f38cf48ac5633e4b27572fdb85e2f01b92366a2",
    "logs": [],
    "blockNumber": 19930955,
    "cumulativeGasUsed": "13702748",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0f216c69ca7d69b5e67c1cffac004e22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Veliko Minkov <veliko@midascapital.xyz> (https://github.com/vminkov)\",\"kind\":\"dev\",\"methods\":{\"redeem(address,uint256,bytes)\":{\"params\":{\"inputAmount\":\"The amount of the input wrapped token to be redeemed for an underlying token.\",\"inputToken\":\"The input wrapped token to be redeemed for an underlying token.\",\"strategyData\":\"The ABI-encoded data to be used in the redemption strategy logic.\"},\"returns\":{\"outputAmount\":\"The quantity of underlying tokens outputted.\",\"outputToken\":\"The underlying ERC20 token outputted.\"}}},\"title\":\"AlgebraSwapLiquidator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"redeem(address,uint256,bytes)\":{\"notice\":\"Redeems custom collateral `token` for an underlying token.\"}},\"notice\":\"Exchanges seized token collateral for underlying tokens via a Algebra router for use as a step in a liquidation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidators/AlgebraSwapLiquidator.sol\":\"AlgebraSwapLiquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/external/algebra/IAlgebraSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IAlgebraPoolActions#swap\\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\ninterface IAlgebraSwapCallback {\\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n  /// The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\\n  function algebraSwapCallback(\\n    int256 amount0Delta,\\n    int256 amount1Delta,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x04f8002385b15dd8425727c793f1991b91f722f881c1e0859aaaf85dafa15e3f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/algebra/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IAlgebraSwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Algebra\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-periphery\\ninterface IAlgebraSwapRouter is IAlgebraSwapCallback {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 limitSqrtPrice;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 limitSqrtPrice;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n  /// @dev Unlike standard swaps, handles transferring from user before the actual swap.\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingleSupportingFeeOnTransferTokens(ExactInputSingleParams calldata params)\\n    external\\n    returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x24af7bbb953e3fbc34a2c1a2ccc32485223b0dc8c0ee9a326a36b149924674d3\",\"license\":\"GPL-2.0-or-later\"},\"contracts/liquidators/AlgebraSwapLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRedemptionStrategy.sol\\\";\\nimport \\\"../external/algebra/ISwapRouter.sol\\\";\\n\\n/**\\n * @title AlgebraSwapLiquidator\\n * @notice Exchanges seized token collateral for underlying tokens via a Algebra router for use as a step in a liquidation.\\n * @author Veliko Minkov <veliko@midascapital.xyz> (https://github.com/vminkov)\\n */\\ncontract AlgebraSwapLiquidator is IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    (address _outputToken, IAlgebraSwapRouter swapRouter) = abi.decode(strategyData, (address, IAlgebraSwapRouter));\\n    outputToken = IERC20Upgradeable(_outputToken);\\n\\n    inputToken.approve(address(swapRouter), inputAmount);\\n\\n    IAlgebraSwapRouter.ExactInputSingleParams memory params = IAlgebraSwapRouter.ExactInputSingleParams(\\n      address(inputToken),\\n      _outputToken,\\n      address(this),\\n      block.timestamp,\\n      inputAmount,\\n      0, // amountOutMinimum\\n      0 // limitSqrtPrice\\n    );\\n\\n    outputAmount = swapRouter.exactInputSingle(params);\\n  }\\n\\n  function name() public pure returns (string memory) {\\n    return \\\"AlgebraSwapLiquidator\\\";\\n  }\\n}\\n\",\"keccak256\":\"0xcd0adfbb0ea5c329104bbe65ca9bea970638ee78cf588d598014e1d5e0dcae3a\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n\\n  function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4cf72f79d325ed14f3c8d52e013a8d1f8bfe15b59553bbd9dff251761baf60dd\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061042b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007b575b600080fd5b604080518082018252601581527420b633b2b13930a9bbb0b82634b8bab4b230ba37b960591b60208201529051610072919061022f565b60405180910390f35b61008e6100893660046102ac565b6100ad565b604080516001600160a01b039093168352602083019190915201610072565b600080600080848060200190518101906100c79190610379565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018a90529296508694509092509088169063095ea7b3906044016020604051808303816000875af1158015610120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014491906103b3565b506040805160e0810182526001600160a01b03898116825284811660208301908152308385019081524260608501908152608085018c8152600060a0870181815260c08801918252975163178ca23160e31b815287518716600482015294518616602486015292518516604485015290516064840152516084830152935160a48201529251811660c484015290919083169063bc6511889060e4016020604051808303816000875af11580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022291906103dc565b9350505050935093915050565b60006020808352835180602085015260005b8181101561025d57858101830151858201604001528201610241565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461029357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156102c157600080fd5b83356102cc8161027e565b925060208401359150604084013567ffffffffffffffff808211156102f057600080fd5b818601915086601f83011261030457600080fd5b81358181111561031657610316610296565b604051601f8201601f19908116603f0116810190838211818310171561033e5761033e610296565b8160405282815289602084870101111561035757600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000806040838503121561038c57600080fd5b82516103978161027e565b60208401519092506103a88161027e565b809150509250929050565b6000602082840312156103c557600080fd5b815180151581146103d557600080fd5b9392505050565b6000602082840312156103ee57600080fd5b505191905056fea264697066735822122032db21ac5943f0aa10bce6d8e810aedf7c71f3fc80f24b5d19b8555f7ed2332c64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007b575b600080fd5b604080518082018252601581527420b633b2b13930a9bbb0b82634b8bab4b230ba37b960591b60208201529051610072919061022f565b60405180910390f35b61008e6100893660046102ac565b6100ad565b604080516001600160a01b039093168352602083019190915201610072565b600080600080848060200190518101906100c79190610379565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018a90529296508694509092509088169063095ea7b3906044016020604051808303816000875af1158015610120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014491906103b3565b506040805160e0810182526001600160a01b03898116825284811660208301908152308385019081524260608501908152608085018c8152600060a0870181815260c08801918252975163178ca23160e31b815287518716600482015294518616602486015292518516604485015290516064840152516084830152935160a48201529251811660c484015290919083169063bc6511889060e4016020604051808303816000875af11580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022291906103dc565b9350505050935093915050565b60006020808352835180602085015260005b8181101561025d57858101830151858201604001528201610241565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461029357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156102c157600080fd5b83356102cc8161027e565b925060208401359150604084013567ffffffffffffffff808211156102f057600080fd5b818601915086601f83011261030457600080fd5b81358181111561031657610316610296565b604051601f8201601f19908116603f0116810190838211818310171561033e5761033e610296565b8160405282815289602084870101111561035757600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000806040838503121561038c57600080fd5b82516103978161027e565b60208401519092506103a88161027e565b809150509250929050565b6000602082840312156103c557600080fd5b815180151581146103d557600080fd5b9392505050565b6000602082840312156103ee57600080fd5b505191905056fea264697066735822122032db21ac5943f0aa10bce6d8e810aedf7c71f3fc80f24b5d19b8555f7ed2332c64736f6c63430008160033",
  "devdoc": {
    "author": "Veliko Minkov <veliko@midascapital.xyz> (https://github.com/vminkov)",
    "kind": "dev",
    "methods": {
      "redeem(address,uint256,bytes)": {
        "params": {
          "inputAmount": "The amount of the input wrapped token to be redeemed for an underlying token.",
          "inputToken": "The input wrapped token to be redeemed for an underlying token.",
          "strategyData": "The ABI-encoded data to be used in the redemption strategy logic."
        },
        "returns": {
          "outputAmount": "The quantity of underlying tokens outputted.",
          "outputToken": "The underlying ERC20 token outputted."
        }
      }
    },
    "title": "AlgebraSwapLiquidator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "redeem(address,uint256,bytes)": {
        "notice": "Redeems custom collateral `token` for an underlying token."
      }
    },
    "notice": "Exchanges seized token collateral for underlying tokens via a Algebra router for use as a step in a liquidation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}