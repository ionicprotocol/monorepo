{
  "address": "0x971d0a8e249ebe854726cF3CB5c74DebA9F4f5eC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AmountCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epochStart",
          "type": "uint256"
        }
      ],
      "name": "HistoricalPriceNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEscrowToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidGauge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVotingEscrow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SingleTokenExpected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochTimestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "HistoricalPriceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardNotification",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceOf",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLpRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCheckpoint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceOf",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBribeRewards.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getPriorBalanceIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "getPriorSupplyIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "historicalPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastEarn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setHistoricalPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supplyNumCheckpoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenRewardsPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf508f9eac35614e5a14564458a4c89fe46addc41394323310481a6e52720927",
  "receipt": {
    "to": null,
    "from": "0x7d922bf0975424b3371074f54cC784AF738Dac0D",
    "contractAddress": "0x971d0a8e249ebe854726cF3CB5c74DebA9F4f5eC",
    "transactionIndex": 241,
    "gasUsed": "2085190",
    "logsBloom": "0x
    "blockHash": "0xea3af326e723aa689703f58c9bc3af81b8c39470b15bea38949039e9eb6900cb",
    "transactionHash": "0xcf508f9eac35614e5a14564458a4c89fe46addc41394323310481a6e52720927",
    "logs": [
      {
        "transactionIndex": 241,
        "blockNumber": 31085951,
        "transactionHash": "0xcf508f9eac35614e5a14564458a4c89fe46addc41394323310481a6e52720927",
        "address": "0x971d0a8e249ebe854726cF3CB5c74DebA9F4f5eC",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 552,
        "blockHash": "0xea3af326e723aa689703f58c9bc3af81b8c39470b15bea38949039e9eb6900cb"
      }
    ],
    "blockNumber": 31085951,
    "cumulativeGasUsed": "46864126",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "fcb92adf42f7340db92f68cbe0d8f018",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochStart\",\"type\":\"uint256\"}],\"name\":\"HistoricalPriceNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEscrowToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidGauge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVotingEscrow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SingleTokenExpected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochTimestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"HistoricalPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardNotification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLpRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCheckpoint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOf\",\"type\":\"uint256\"}],\"internalType\":\"struct IBribeRewards.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPriorBalanceIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"getPriorSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setHistoricalPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyNumCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRewardsPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"deposit(address,uint256,uint256)\":{\"details\":\"Can only be called internally by authorized entities.\",\"params\":{\"amount\":\"Amount to be deposited for the veNFT\",\"lpToken\":\"Address of the liquidity pool token\",\"tokenId\":\"Unique identifier of the veNFT\"}},\"earned(address,uint256)\":{\"params\":{\"token\":\"Address of the reward token\",\"tokenId\":\"Unique identifier of the veNFT\"},\"returns\":{\"_0\":\"Amount of the reward token earned\"}},\"getAllLpRewardTokens()\":{\"returns\":{\"_0\":\"Array of LP token addresses\"}},\"getCheckpoint(uint256,address,uint256)\":{\"params\":{\"index\":\"The index of the checkpoint to retrieve\",\"lpToken\":\"The LP token address\",\"tokenId\":\"The ID of the veION token\"},\"returns\":{\"_0\":\"The checkpoint data\"}},\"getPriorBalanceIndex(uint256,address,uint256)\":{\"details\":\"Timestamp must be in the past or present.\",\"params\":{\"lpToken\":\"Address of the liquidity pool token\",\"timestamp\":\"The timestamp to get the balance at\",\"tokenId\":\"The veNFT token ID to check\"},\"returns\":{\"_0\":\"The balance index at the given timestamp\"}},\"getPriorSupplyIndex(uint256,address)\":{\"details\":\"Timestamp must be in the past or present.\",\"params\":{\"timestamp\":\"The timestamp to get the supply index at\"},\"returns\":{\"_0\":\"The supply index at the given timestamp\"}},\"getReward(uint256,address[])\":{\"details\":\"If we were to check the whitelisting status, it could prevent tokens that were initially whitelisted and later de-whitelisted from having their rewards claimed, leading to unclaimable rewards.\",\"params\":{\"tokenId\":\"Unique identifier of the veNFT\",\"tokens\":\"Array of tokens to claim rewards for\"}},\"initialize(address,address)\":{\"details\":\"This function is called only once during contract deployment\",\"params\":{\"_ve\":\"The address of the veION contract\",\"_voter\":\"The address of the voter contract\"}},\"notifyRewardAmount(address,uint256)\":{\"params\":{\"amount\":\"Amount of the reward token to be added\",\"token\":\"Address of the reward token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardsListLength()\":{\"returns\":{\"_0\":\"The length of the rewards array\"}},\"setHistoricalPrices(uint256,address,uint256)\":{\"params\":{\"epochTimestamp\":\"The timestamp of the epoch\",\"lpToken\":\"The LP token address\",\"price\":\"The price to set\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"withdraw(address,uint256,uint256)\":{\"details\":\"Can only be called internally by authorized entities.\",\"params\":{\"amount\":\"Amount to be withdrawn for the veNFT\",\"lpToken\":\"Address of the liquidity pool token\",\"tokenId\":\"Unique identifier of the veNFT\"}}},\"title\":\"BribeRewards Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DURATION()\":{\"notice\":\"Duration of the reward period in seconds\"},\"balanceOf(uint256,address)\":{\"notice\":\"Balance of LP tokens for each tokenId and reward token\"},\"checkpoints(uint256,address,uint256)\":{\"notice\":\"A record of balance checkpoints for each account, by index\"},\"deposit(address,uint256,uint256)\":{\"notice\":\"Deposit an amount into the bribe rewards contract for a specific veNFT\"},\"earned(address,uint256)\":{\"notice\":\"Calculate the rewards earned for a specific token and veNFT\"},\"getAllLpRewardTokens()\":{\"notice\":\"Gets all LP tokens that can receive rewards\"},\"getCheckpoint(uint256,address,uint256)\":{\"notice\":\"Gets a specific checkpoint for a token\"},\"getPriorBalanceIndex(uint256,address,uint256)\":{\"notice\":\"Get the prior balance index for a veNFT at a specific timestamp\"},\"getPriorSupplyIndex(uint256,address)\":{\"notice\":\"Get the prior supply index at a specific timestamp\"},\"getReward(uint256,address[])\":{\"notice\":\"This function can accept any token, regardless of its whitelisting status.\"},\"historicalPrices(address,uint256)\":{\"notice\":\"Historical prices for each reward token and epoch\"},\"initialize(address,address)\":{\"notice\":\"Initializes the BribeRewards contract with the voter and veION addresses\"},\"isReward(address)\":{\"notice\":\"Mapping to check if an address is a reward token\"},\"lastEarn(address,uint256)\":{\"notice\":\"Last earned timestamp for each reward token and tokenId\"},\"notifyRewardAmount(address,uint256)\":{\"notice\":\"Notify the contract about new rewards for stakers\"},\"numCheckpoints(uint256,address)\":{\"notice\":\"The number of checkpoints for each account\"},\"rewards(uint256)\":{\"notice\":\"List of reward tokens\"},\"rewardsListLength()\":{\"notice\":\"Returns the total number of reward tokens\"},\"setHistoricalPrices(uint256,address,uint256)\":{\"notice\":\"Sets historical prices for LP tokens at specific epochs\"},\"supplyCheckpoints(uint256,address)\":{\"notice\":\"A record of balance checkpoints for each token, by index\"},\"supplyNumCheckpoints(address)\":{\"notice\":\"The number of supply checkpoints for each token\"},\"tokenRewardsPerEpoch(address,uint256)\":{\"notice\":\"Rewards per epoch for each reward token\"},\"totalSupply(address)\":{\"notice\":\"Total supply of LP tokens for each reward token\"},\"ve()\":{\"notice\":\"Address of the veION contract\"},\"voter()\":{\"notice\":\"Address of the voter contract\"},\"withdraw(address,uint256,uint256)\":{\"notice\":\"Withdraw an amount from the bribe rewards contract for a specific veNFT\"}},\"notice\":\"This contract allows veION to benefit from bribes when voting for various markets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/BribeRewards.sol\":\"BribeRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available all functions\\r\\n * from parent (Ownable).\\r\\n */\\r\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\r\\n    function __Ownable2Step_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending owner.\\r\\n     */\\r\\n    function pendingOwner() public view virtual returns (address) {\\r\\n        return _pendingOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\r\\n        _pendingOwner = newOwner;\\r\\n        emit OwnershipTransferStarted(owner(), newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual override {\\r\\n        delete _pendingOwner;\\r\\n        super._transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The new owner accepts the ownership transfer.\\r\\n     */\\r\\n    function acceptOwnership() external {\\r\\n        address sender = _msgSender();\\r\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\r\\n        _transferOwnership(sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xc02ae28ae149c0475b5b98088ecc53b1b6310d906506c5522f598f02d88f9131\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal onlyInitializing {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xcf4a2c2c1a8b1570ee9a7059c218de1efbc9050239b1111dcfc24081391d11b7\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized < type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4603e2f1403e437820665af135e9675c80e81aa005e360318b8e640ca2624658\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xd714b70818f7513fc0c34e4248742ac27f0cda15c44621de90872a2f1848c036\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721Upgradeable.sol\\\";\\r\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\r\\n    using AddressUpgradeable for address;\\r\\n    using StringsUpgradeable for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        __ERC721_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\r\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _ownerOf(tokenId);\\r\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\r\\n     */\\r\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\r\\n        return _owners[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _ownerOf(tokenId) != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        unchecked {\\r\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\r\\n            // Given that tokens are minted one by one, it is impossible in practice that\\r\\n            // this ever happens. Might change if we allow batch minting.\\r\\n            // The ERC fails to describe this case.\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\r\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\r\\n            // out than the owner initially received through minting and transferring in.\\r\\n            _balances[owner] -= 1;\\r\\n        }\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n\\r\\n        _afterTokenTransfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\r\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\r\\n            // `from`'s balance is the number of token held, which is at least one before the current\\r\\n            // transfer.\\r\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\r\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\r\\n            _balances[from] -= 1;\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(\\r\\n        address owner,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) internal virtual {\\r\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\r\\n     */\\r\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\r\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\r\\n     * See {_beforeConsecutiveTokenTransfer}.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\r\\n     * See {_afterConsecutiveTokenTransfer}.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\r\\n     * {ERC721Consecutive}.\\r\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\r\\n     */\\r\\n    function _beforeConsecutiveTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256, /*first*/\\r\\n        uint96 size\\r\\n    ) internal virtual {\\r\\n        if (from != address(0)) {\\r\\n            _balances[from] -= size;\\r\\n        }\\r\\n        if (to != address(0)) {\\r\\n            _balances[to] += size;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\r\\n     * {ERC721Consecutive}.\\r\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\r\\n     */\\r\\n    function _afterConsecutiveTokenTransfer(\\r\\n        address, /*from*/\\r\\n        address, /*to*/\\r\\n        uint256, /*first*/\\r\\n        uint96 /*size*/\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[44] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x8fa55fe262246cd5c68823bda0e2f30503417458aed446c65bcefa347e6ed423\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721ReceiverUpgradeable {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xcad00cdc85bd1718e26dc693cf50fefe6c3bd2ca51c95f3ef13cc6d04be4928b\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\r\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\r\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6adefd9cd927dc57cd2da9550681d51dad15a91d4d254075588cf3e9503e6c99\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC721Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x8ba9a190699be6b3e5f965fe650bf0ac8bd01ed4d7b394411c6e50b98dcaaa90\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c08bea8e975fa8e5e635a7753a9442b3d58f501c3a9951df8eb45581054228d\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./math/MathUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary StringsUpgradeable {\\r\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a607b1dc1f0ff724ad56ff94293ec5c374e27f35f26ae5e29210edaf046b4c6\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\r\\n    function __ERC165_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __ERC165_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x33686001615c14053a34d85fa60f5495c6461d457abfa93276feaf1ad4582039\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3a86fd8399ff01763901b64ed4603d979787747d7b83f70d6d3c7d4f6b79214\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary MathUpgradeable {\\r\\n    enum Rounding {\\r\\n        Down, // Toward negative infinity\\r\\n        Up, // Toward infinity\\r\\n        Zero // Toward zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\r\\n     * with further edits by Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod0 := mul(x, y)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n            // See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n            uint256 twos = denominator & (~denominator + 1);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n            // in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10**64) {\\r\\n                value /= 10**64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10**32) {\\r\\n                value /= 10**32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10**16) {\\r\\n                value /= 10**16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10**8) {\\r\\n                value /= 10**8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10**4) {\\r\\n                value /= 10**4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10**2) {\\r\\n                value /= 10**2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10**1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x75646aade069b63a3ebf8535f49dce3ac575d1e367f031cf1f7b3d8a748e0756\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x86bd9e04dbee51fb3a9370279a0177e9da874a858dfb2c25a405171aa5ae2030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c3c43ba6e81d44ca93d32e97e0d5b9d64eb7346b7a3921e6ce9648f4b70f815\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7ed49cc8c6b941c4b0f07556eef72cedbce73d60c79d54cc82f6bbe7e061fb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    enum Rounding {\\r\\n        Down, // Toward negative infinity\\r\\n        Up, // Toward infinity\\r\\n        Zero // Toward zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\r\\n     * with further edits by Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod0 := mul(x, y)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n            // See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n            uint256 twos = denominator & (~denominator + 1);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n            // in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10**64) {\\r\\n                value /= 10**64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10**32) {\\r\\n                value /= 10**32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10**16) {\\r\\n                value /= 10**16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10**8) {\\r\\n                value /= 10**8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10**4) {\\r\\n                value /= 10**4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10**2) {\\r\\n                value /= 10**2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10**1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1ee6a346d1d174ada2074c0e1edd7db7da4c872df37a46e2f6296011f9a8ce\",\"license\":\"MIT\"},\"contracts/veION/BribeRewards.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport { IBribeRewards } from \\\"./interfaces/IBribeRewards.sol\\\";\\r\\nimport { IVoter } from \\\"./interfaces/IVoter.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\r\\nimport { IonicTimeLibrary } from \\\"./libraries/IonicTimeLibrary.sol\\\";\\r\\nimport { ERC721Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BribeRewards Contract\\r\\n * @notice This contract allows veION to benefit from bribes when voting for various markets\\r\\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\\r\\n */\\r\\ncontract BribeRewards is IBribeRewards, ReentrancyGuardUpgradeable, Ownable2StepUpgradeable {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           State Variables                                 \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /// @notice Duration of the reward period in seconds\\r\\n  uint256 public constant DURATION = 7 days;\\r\\n  /// @notice Address of the voter contract\\r\\n  address public voter;\\r\\n  /// @notice Address of the veION contract\\r\\n  address public ve;\\r\\n  /// @notice List of reward tokens\\r\\n  address[] public rewards;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                                Mappings                                   \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /// @notice Mapping to check if an address is a reward token\\r\\n  mapping(address => bool) public isReward;\\r\\n  /// @notice Total supply of LP tokens for each reward token\\r\\n  mapping(address => uint256) public totalSupply;\\r\\n  /// @notice Balance of LP tokens for each tokenId and reward token\\r\\n  mapping(uint256 => mapping(address => uint256)) public balanceOf;\\r\\n  /// @notice Rewards per epoch for each reward token\\r\\n  mapping(address => mapping(uint256 => uint256)) public tokenRewardsPerEpoch;\\r\\n  /// @notice Last earned timestamp for each reward token and tokenId\\r\\n  mapping(address => mapping(uint256 => uint256)) public lastEarn;\\r\\n  /// @notice A record of balance checkpoints for each account, by index\\r\\n  mapping(uint256 => mapping(address => mapping(uint256 => Checkpoint))) public checkpoints;\\r\\n  /// @notice The number of checkpoints for each account\\r\\n  mapping(uint256 => mapping(address => uint256)) public numCheckpoints;\\r\\n  /// @notice A record of balance checkpoints for each token, by index\\r\\n  mapping(uint256 => mapping(address => SupplyCheckpoint)) public supplyCheckpoints;\\r\\n  /// @notice The number of supply checkpoints for each token\\r\\n  mapping(address => uint256) public supplyNumCheckpoints;\\r\\n  /// @notice Historical prices for each reward token and epoch\\r\\n  mapping(address => mapping(uint256 => uint256)) public historicalPrices;\\r\\n\\r\\n  /**\\r\\n   * @notice Modifier to restrict access to only the voter contract\\r\\n   * @dev Ensures that the caller is the voter contract\\r\\n   */\\r\\n  modifier onlyVoter() {\\r\\n    require(msg.sender == voter, \\\"Caller is not the voter\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes the BribeRewards contract with the voter and veION addresses\\r\\n   * @dev This function is called only once during contract deployment\\r\\n   * @param _voter The address of the voter contract\\r\\n   * @param _ve The address of the veION contract\\r\\n   */\\r\\n  function initialize(address _voter, address _ve) public initializer {\\r\\n    __ReentrancyGuard_init();\\r\\n    __Ownable2Step_init();\\r\\n    voter = _voter;\\r\\n    ve = _ve;\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           External Functions                              \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @inheritdoc IBribeRewards\\r\\n  function deposit(address lpToken, uint256 amount, uint256 tokenId) external onlyVoter {\\r\\n    address sender = msg.sender;\\r\\n\\r\\n    totalSupply[lpToken] += amount;\\r\\n    balanceOf[tokenId][lpToken] += amount;\\r\\n\\r\\n    _writeCheckpoint(tokenId, lpToken, balanceOf[tokenId][lpToken]);\\r\\n    _writeSupplyCheckpoint(lpToken);\\r\\n\\r\\n    emit Deposit(sender, tokenId, amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBribeRewards\\r\\n  function withdraw(address lpToken, uint256 amount, uint256 tokenId) external onlyVoter {\\r\\n    address sender = msg.sender;\\r\\n\\r\\n    totalSupply[lpToken] -= amount;\\r\\n    balanceOf[tokenId][lpToken] -= amount;\\r\\n\\r\\n    _writeCheckpoint(tokenId, lpToken, balanceOf[tokenId][lpToken]);\\r\\n    _writeSupplyCheckpoint(lpToken);\\r\\n\\r\\n    emit Withdraw(sender, tokenId, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @inheritdoc IBribeRewards\\r\\n   * @notice This function can accept any token, regardless of its whitelisting status.\\r\\n   * @dev If we were to check the whitelisting status, it could prevent tokens that were initially whitelisted and later de-whitelisted from having their rewards claimed, leading to unclaimable rewards.\\r\\n   */\\r\\n  function getReward(uint256 tokenId, address[] memory tokens) external nonReentrant onlyVoter {\\r\\n    address sender = msg.sender;\\r\\n    if (ERC721Upgradeable(ve).ownerOf(tokenId) != sender && sender != voter) revert Unauthorized();\\r\\n\\r\\n    address _owner = ERC721Upgradeable(ve).ownerOf(tokenId);\\r\\n    _getReward(_owner, tokenId, tokens);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBribeRewards\\r\\n  function notifyRewardAmount(address token, uint256 amount) external override nonReentrant {\\r\\n    address sender = msg.sender;\\r\\n\\r\\n    if (!isReward[token]) {\\r\\n      if (!IVoter(voter).isWhitelistedToken(token)) revert TokenNotWhitelisted();\\r\\n      isReward[token] = true;\\r\\n      rewards.push(token);\\r\\n    }\\r\\n\\r\\n    _notifyRewardAmount(sender, token, amount);\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           Internal Functions                              \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @dev used with all getReward implementations\\r\\n  function _getReward(address recipient, uint256 tokenId, address[] memory tokens) internal {\\r\\n    // check if token whitelisted\\r\\n    uint256 _length = tokens.length;\\r\\n    for (uint256 i = 0; i < _length; i++) {\\r\\n      uint256 _reward = earned(tokens[i], tokenId);\\r\\n      lastEarn[tokens[i]][tokenId] = block.timestamp;\\r\\n      if (_reward > 0) IERC20(tokens[i]).safeTransfer(recipient, _reward);\\r\\n\\r\\n      emit RewardsClaimed(recipient, tokens[i], _reward);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Writes a new checkpoint for a token's balance\\r\\n   * @param tokenId The ID of the veION token\\r\\n   * @param lpToken The LP token address\\r\\n   * @param balance The balance to record\\r\\n   */\\r\\n  function _writeCheckpoint(uint256 tokenId, address lpToken, uint256 balance) internal {\\r\\n    uint256 _nCheckPoints = numCheckpoints[tokenId][lpToken];\\r\\n    uint256 _timestamp = block.timestamp;\\r\\n\\r\\n    if (\\r\\n      _nCheckPoints > 0 &&\\r\\n      IonicTimeLibrary.epochStart(checkpoints[tokenId][lpToken][_nCheckPoints - 1].timestamp) ==\\r\\n      IonicTimeLibrary.epochStart(_timestamp)\\r\\n    ) {\\r\\n      checkpoints[tokenId][lpToken][_nCheckPoints - 1] = Checkpoint(_timestamp, balance);\\r\\n    } else {\\r\\n      checkpoints[tokenId][lpToken][_nCheckPoints] = Checkpoint(_timestamp, balance);\\r\\n      numCheckpoints[tokenId][lpToken] = _nCheckPoints + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Writes a new checkpoint for total supply\\r\\n  /// @param lpToken The LP token address\\r\\n  function _writeSupplyCheckpoint(address lpToken) internal {\\r\\n    uint256 _nCheckPoints = supplyNumCheckpoints[lpToken];\\r\\n    uint256 _timestamp = block.timestamp;\\r\\n\\r\\n    if (\\r\\n      _nCheckPoints > 0 &&\\r\\n      IonicTimeLibrary.epochStart(supplyCheckpoints[_nCheckPoints - 1][lpToken].timestamp) ==\\r\\n      IonicTimeLibrary.epochStart(_timestamp)\\r\\n    ) {\\r\\n      supplyCheckpoints[_nCheckPoints - 1][lpToken] = SupplyCheckpoint(_timestamp, totalSupply[lpToken]);\\r\\n    } else {\\r\\n      supplyCheckpoints[_nCheckPoints][lpToken] = SupplyCheckpoint(_timestamp, totalSupply[lpToken]);\\r\\n      supplyNumCheckpoints[lpToken] = _nCheckPoints + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev used within all notifyRewardAmount implementations\\r\\n  function _notifyRewardAmount(address sender, address token, uint256 amount) internal {\\r\\n    if (amount == 0) revert AmountCannotBeZero();\\r\\n    IERC20(token).safeTransferFrom(sender, address(this), amount);\\r\\n\\r\\n    uint256 epochStart = IonicTimeLibrary.epochStart(block.timestamp);\\r\\n    tokenRewardsPerEpoch[token][epochStart] += amount;\\r\\n\\r\\n    emit RewardNotification(sender, token, epochStart, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates the ETH value of a token amount at a specific epoch\\r\\n   * @param amount The amount of tokens\\r\\n   * @param lpToken The LP token address\\r\\n   * @param epochTimestamp The timestamp of the epoch\\r\\n   * @return The ETH value of the tokens\\r\\n   */\\r\\n  function _getTokenEthValueAt(\\r\\n    uint256 amount,\\r\\n    address lpToken,\\r\\n    uint256 epochTimestamp\\r\\n  ) internal view returns (uint256) {\\r\\n    uint256 epochStart = IonicTimeLibrary.epochStart(epochTimestamp);\\r\\n    uint256 historicalPrice = IVoter(voter).getHistoricalPrice(lpToken, epochTimestamp);\\r\\n    if (historicalPrice == 0) revert HistoricalPriceNotSet(lpToken, epochStart);\\r\\n    uint256 ethValue = (amount * historicalPrice) / 1e18;\\r\\n    return ethValue;\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           Pure/View Functions                             \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @notice Returns the total number of reward tokens\\r\\n  /// @return The length of the rewards array\\r\\n  function rewardsListLength() external view returns (uint256) {\\r\\n    return rewards.length;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBribeRewards\\r\\n  function earned(address token, uint256 tokenId) public view returns (uint256) {\\r\\n    EarnedVars memory vars;\\r\\n    vars.totalReward = 0;\\r\\n    address[] memory lpTokens = getAllLpRewardTokens();\\r\\n    uint256 lpTokensLength = lpTokens.length;\\r\\n    for (uint256 j = 0; j < lpTokensLength; j++) {\\r\\n      address lpToken = lpTokens[j];\\r\\n\\r\\n      if (numCheckpoints[tokenId][lpToken] == 0) {\\r\\n        continue;\\r\\n      }\\r\\n\\r\\n      vars.currTs = IonicTimeLibrary.epochStart(lastEarn[token][tokenId]);\\r\\n      vars.index = getPriorBalanceIndex(tokenId, lpToken, vars.currTs);\\r\\n      Checkpoint memory cp0 = checkpoints[tokenId][lpToken][vars.index];\\r\\n\\r\\n      vars.currTs = Math.max(vars.currTs, IonicTimeLibrary.epochStart(cp0.timestamp));\\r\\n      vars.numEpochs = (IonicTimeLibrary.epochStart(block.timestamp) - vars.currTs) / DURATION;\\r\\n\\r\\n      if (vars.numEpochs > 0) {\\r\\n        for (uint256 i = 0; i < vars.numEpochs; i++) {\\r\\n          vars.index = getPriorBalanceIndex(tokenId, lpToken, vars.currTs + DURATION - 1);\\r\\n          cp0 = checkpoints[tokenId][lpToken][vars.index];\\r\\n          vars.epochBalanceValue = _getTokenEthValueAt(cp0.balanceOf, lpToken, vars.currTs);\\r\\n\\r\\n          vars.supplyValue = 0;\\r\\n          for (uint256 k = 0; k < lpTokensLength; k++) {\\r\\n            address currentLpToken = lpTokens[k];\\r\\n            uint256 supplyAmount = Math.max(\\r\\n              supplyCheckpoints[getPriorSupplyIndex(vars.currTs + DURATION - 1, currentLpToken)][currentLpToken].supply,\\r\\n              1\\r\\n            );\\r\\n            vars.supplyValue += _getTokenEthValueAt(supplyAmount, currentLpToken, vars.currTs);\\r\\n          }\\r\\n          if (vars.supplyValue > 0) {\\r\\n            vars.totalReward += (vars.epochBalanceValue * tokenRewardsPerEpoch[token][vars.currTs]) / vars.supplyValue;\\r\\n          }\\r\\n          vars.currTs += DURATION;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return vars.totalReward;\\r\\n  }\\r\\n\\r\\n  /// @notice Gets all LP tokens that can receive rewards\\r\\n  /// @return Array of LP token addresses\\r\\n  function getAllLpRewardTokens() public view returns (address[] memory) {\\r\\n    return IVoter(voter).getAllLpRewardTokens();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets historical prices for LP tokens at specific epochs\\r\\n   * @param epochTimestamp The timestamp of the epoch\\r\\n   * @param lpToken The LP token address\\r\\n   * @param price The price to set\\r\\n   */\\r\\n  function setHistoricalPrices(uint256 epochTimestamp, address lpToken, uint256 price) external onlyOwner {\\r\\n    uint256 epochStart = IonicTimeLibrary.epochStart(epochTimestamp);\\r\\n    historicalPrices[lpToken][epochStart] = price;\\r\\n    emit HistoricalPriceSet(epochTimestamp, lpToken, price);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets a specific checkpoint for a token\\r\\n   * @param tokenId The ID of the veION token\\r\\n   * @param lpToken The LP token address\\r\\n   * @param index The index of the checkpoint to retrieve\\r\\n   * @return The checkpoint data\\r\\n   */\\r\\n  function getCheckpoint(uint256 tokenId, address lpToken, uint256 index) external view returns (Checkpoint memory) {\\r\\n    return checkpoints[tokenId][lpToken][index];\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBribeRewards\\r\\n  function getPriorBalanceIndex(uint256 tokenId, address lpToken, uint256 timestamp) public view returns (uint256) {\\r\\n    uint256 nCheckpoints = numCheckpoints[tokenId][lpToken];\\r\\n    if (nCheckpoints == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    // First check most recent balance\\r\\n    if (checkpoints[tokenId][lpToken][nCheckpoints - 1].timestamp <= timestamp) {\\r\\n      return (nCheckpoints - 1);\\r\\n    }\\r\\n\\r\\n    // Next check implicit zero balance\\r\\n    if (checkpoints[tokenId][lpToken][0].timestamp > timestamp) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 lower = 0;\\r\\n    uint256 upper = nCheckpoints - 1;\\r\\n    while (upper > lower) {\\r\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n      Checkpoint memory cp = checkpoints[tokenId][lpToken][center];\\r\\n      if (cp.timestamp == timestamp) {\\r\\n        return center;\\r\\n      } else if (cp.timestamp < timestamp) {\\r\\n        lower = center;\\r\\n      } else {\\r\\n        upper = center - 1;\\r\\n      }\\r\\n    }\\r\\n    return lower;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IBribeRewards\\r\\n  function getPriorSupplyIndex(uint256 timestamp, address lpToken) public view returns (uint256) {\\r\\n    uint256 nCheckpoints = supplyNumCheckpoints[lpToken];\\r\\n    if (nCheckpoints == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    // First check most recent balance\\r\\n    if (supplyCheckpoints[nCheckpoints - 1][lpToken].timestamp <= timestamp) {\\r\\n      return (nCheckpoints - 1);\\r\\n    }\\r\\n\\r\\n    // Next check implicit zero balance\\r\\n    if (supplyCheckpoints[0][lpToken].timestamp > timestamp) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 lower = 0;\\r\\n    uint256 upper = nCheckpoints - 1;\\r\\n    while (upper > lower) {\\r\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n      SupplyCheckpoint memory cp = supplyCheckpoints[center][lpToken];\\r\\n      if (cp.timestamp == timestamp) {\\r\\n        return center;\\r\\n      } else if (cp.timestamp < timestamp) {\\r\\n        lower = center;\\r\\n      } else {\\r\\n        upper = center - 1;\\r\\n      }\\r\\n    }\\r\\n    return lower;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x0e3fdaa4caebad1733d88de00cac5196a07d9f72b405946f86f0d8f8df00f137\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IBribeRewards.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IBribeRewards {\\r\\n  /// @notice A checkpoint for marking balance\\r\\n  struct Checkpoint {\\r\\n    uint256 timestamp;\\r\\n    uint256 balanceOf;\\r\\n  }\\r\\n\\r\\n  /// @notice A checkpoint for marking supply\\r\\n  struct SupplyCheckpoint {\\r\\n    uint256 timestamp;\\r\\n    uint256 supply;\\r\\n  }\\r\\n\\r\\n  struct EarnedVars {\\r\\n    uint256 totalReward;\\r\\n    uint256 reward;\\r\\n    uint256 supplyValue;\\r\\n    uint256 epochBalanceValue;\\r\\n    uint256 currTs;\\r\\n    uint256 index;\\r\\n    uint256 numEpochs;\\r\\n    uint256 overallBalance;\\r\\n    uint256 overallSupply;\\r\\n    uint256 historicalPrice;\\r\\n  }\\r\\n\\r\\n  error InvalidReward();\\r\\n  error Unauthorized();\\r\\n  error InvalidGauge();\\r\\n  error InvalidEscrowToken();\\r\\n  error SingleTokenExpected();\\r\\n  error InvalidVotingEscrow();\\r\\n  error TokenNotWhitelisted();\\r\\n  error AmountCannotBeZero();\\r\\n  error HistoricalPriceNotSet(address lpToken, uint256 epochStart);\\r\\n\\r\\n  event Deposit(address indexed user, uint256 indexed tokenId, uint256 amount);\\r\\n  event Withdraw(address indexed user, uint256 indexed tokenId, uint256 amount);\\r\\n  event RewardNotification(address indexed user, address indexed rewardToken, uint256 indexed epoch, uint256 amount);\\r\\n  event RewardsClaimed(address indexed user, address indexed rewardToken, uint256 amount);\\r\\n  event HistoricalPriceSet(uint256 indexed epochTimestamp, address indexed lpToken, uint256 price);\\r\\n\\r\\n  /// @notice Deposit an amount into the bribe rewards contract for a specific veNFT\\r\\n  /// @dev Can only be called internally by authorized entities.\\r\\n  /// @param lpToken  Address of the liquidity pool token\\r\\n  /// @param amount   Amount to be deposited for the veNFT\\r\\n  /// @param tokenId  Unique identifier of the veNFT\\r\\n  function deposit(address lpToken, uint256 amount, uint256 tokenId) external;\\r\\n\\r\\n  /// @notice Withdraw an amount from the bribe rewards contract for a specific veNFT\\r\\n  /// @dev Can only be called internally by authorized entities.\\r\\n  /// @param lpToken  Address of the liquidity pool token\\r\\n  /// @param amount   Amount to be withdrawn for the veNFT\\r\\n  /// @param tokenId  Unique identifier of the veNFT\\r\\n  function withdraw(address lpToken, uint256 amount, uint256 tokenId) external;\\r\\n\\r\\n  /// @notice Claim the rewards earned by a veNFT holder\\r\\n  /// @param tokenId  Unique identifier of the veNFT\\r\\n  /// @param tokens   Array of tokens to claim rewards for\\r\\n  function getReward(uint256 tokenId, address[] memory tokens) external;\\r\\n\\r\\n  /// @notice Notify the contract about new rewards for stakers\\r\\n  /// @param token    Address of the reward token\\r\\n  /// @param amount   Amount of the reward token to be added\\r\\n  function notifyRewardAmount(address token, uint256 amount) external;\\r\\n\\r\\n  /// @notice Get the prior balance index for a veNFT at a specific timestamp\\r\\n  /// @dev Timestamp must be in the past or present.\\r\\n  /// @param tokenId      The veNFT token ID to check\\r\\n  /// @param lpToken      Address of the liquidity pool token\\r\\n  /// @param timestamp    The timestamp to get the balance at\\r\\n  /// @return The balance index at the given timestamp\\r\\n  function getPriorBalanceIndex(uint256 tokenId, address lpToken, uint256 timestamp) external view returns (uint256);\\r\\n\\r\\n  /// @notice Get the prior supply index at a specific timestamp\\r\\n  /// @dev Timestamp must be in the past or present.\\r\\n  /// @param timestamp The timestamp to get the supply index at\\r\\n  /// @return The supply index at the given timestamp\\r\\n  function getPriorSupplyIndex(uint256 timestamp, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /// @notice Calculate the rewards earned for a specific token and veNFT\\r\\n  /// @param token Address of the reward token\\r\\n  /// @param tokenId Unique identifier of the veNFT\\r\\n  /// @return Amount of the reward token earned\\r\\n  function earned(address token, uint256 tokenId) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x71a54e6c66bc6412a7bed2b37bfe2efe0d977ce3e0c6f69a0412d4b07bfe9bbb\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IVoter\\r\\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\\r\\n */\\r\\ninterface IVoter {\\r\\n  /// @notice Error thrown when a user has already voted or deposited.\\r\\n  error AlreadyVotedOrDeposited();\\r\\n\\r\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\r\\n  error DistributeWindow();\\r\\n\\r\\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\\r\\n  error RewardAccumulatorDoesNotExist(address _pool);\\r\\n\\r\\n  /// @notice Error thrown when a reward accumulator is not alive.\\r\\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\\r\\n\\r\\n  /// @notice Error thrown when a market already exists.\\r\\n  error MarketAlreadyExists();\\r\\n\\r\\n  /// @notice Error thrown when the maximum voting number is too low.\\r\\n  error MaximumVotingNumberTooLow();\\r\\n\\r\\n  /// @notice Error thrown when array lengths do not match.\\r\\n  error MismatchedArrayLengths();\\r\\n\\r\\n  /// @notice Error thrown when there are non-zero votes.\\r\\n  error NonZeroVotes();\\r\\n\\r\\n  /// @notice Error thrown when the caller is not the owner.\\r\\n  error NotOwner();\\r\\n\\r\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\r\\n  error NotDistributeWindow();\\r\\n\\r\\n  /// @notice Error thrown when the caller is not the governor.\\r\\n  error NotGovernor();\\r\\n\\r\\n  /// @notice Error thrown when an NFT is not whitelisted.\\r\\n  error NotWhitelistedNFT();\\r\\n\\r\\n  /// @notice Error thrown when the same value is provided.\\r\\n  error SameValue();\\r\\n\\r\\n  /// @notice Error thrown when there are too many pools.\\r\\n  error TooManyPools();\\r\\n\\r\\n  /// @notice Error thrown when array lengths are unequal.\\r\\n  error UnequalLengths();\\r\\n\\r\\n  /// @notice Error thrown when an address is zero.\\r\\n  error ZeroAddress();\\r\\n\\r\\n  /// @notice Error thrown when the tokens array is empty.\\r\\n  error TokensArrayEmpty();\\r\\n\\r\\n  /// @notice Error thrown when the weight is zero.\\r\\n  error ZeroWeight();\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store vote details.\\r\\n   * @param marketVotes Array of market addresses voted for.\\r\\n   * @param marketVoteSides Array of market sides voted for.\\r\\n   * @param votes Array of vote weights.\\r\\n   * @param usedWeight Total weight used in voting.\\r\\n   */\\r\\n  struct VoteDetails {\\r\\n    address[] marketVotes;\\r\\n    MarketSide[] marketVoteSides;\\r\\n    uint256[] votes;\\r\\n    uint256 usedWeight;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store market information.\\r\\n   * @param marketAddress Address of the market.\\r\\n   * @param side Side of the market (Supply or Borrow).\\r\\n   */\\r\\n  struct Market {\\r\\n    address marketAddress;\\r\\n    MarketSide side;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store variables used in voting.\\r\\n   * @param totalWeight Total weight available for voting.\\r\\n   * @param usedWeight Weight used in voting.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param rewardAccumulator Address of the reward accumulator.\\r\\n   * @param marketWeight Weight of the market.\\r\\n   * @param bribes Address of the bribes.\\r\\n   */\\r\\n  struct VoteVars {\\r\\n    uint256 totalWeight;\\r\\n    uint256 usedWeight;\\r\\n    address market;\\r\\n    MarketSide marketSide;\\r\\n    address rewardAccumulator;\\r\\n    uint256 marketWeight;\\r\\n    address bribes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store local variables used in voting.\\r\\n   * @param sender Address of the sender.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   * @param votingLPs Array of voting LP addresses.\\r\\n   * @param votingLPBalances Array of voting LP balances.\\r\\n   * @param boosts Array of boosts.\\r\\n   */\\r\\n  struct VoteLocalVars {\\r\\n    address sender;\\r\\n    uint256 timestamp;\\r\\n    address[] votingLPs;\\r\\n    uint256[] votingLPBalances;\\r\\n    uint256[] boosts;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum to represent the side of a market.\\r\\n   */\\r\\n  enum MarketSide {\\r\\n    Supply,\\r\\n    Borrow\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a vote is cast.\\r\\n   * @param voter Address of the voter.\\r\\n   * @param pool Address of the pool.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param weight Weight of the vote.\\r\\n   * @param totalWeight Total weight of the vote.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   */\\r\\n  event Voted(\\r\\n    address indexed voter,\\r\\n    address indexed pool,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 weight,\\r\\n    uint256 totalWeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a vote is abstained.\\r\\n   * @param voter Address of the voter.\\r\\n   * @param pool Address of the pool.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param weight Weight of the vote.\\r\\n   * @param totalWeight Total weight of the vote.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   */\\r\\n  event Abstained(\\r\\n    address indexed voter,\\r\\n    address indexed pool,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 weight,\\r\\n    uint256 totalWeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a reward is notified.\\r\\n   * @param sender Address of the sender.\\r\\n   * @param reward Address of the reward.\\r\\n   * @param amount Amount of the reward.\\r\\n   */\\r\\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a token is whitelisted.\\r\\n   * @param whitelister Address of the whitelister.\\r\\n   * @param token Address of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when an NFT is whitelisted.\\r\\n   * @param whitelister Address of the whitelister.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\\r\\n\\r\\n  event LpTokensSet(address[] indexed lpTokens);\\r\\n  event MpoSet(address indexed mpo);\\r\\n  event GovernorSet(address indexed governor);\\r\\n  event MarketsAdded(Market[] markets);\\r\\n  event MarketRewardAccumulatorsSet(\\r\\n    address[] indexed markets,\\r\\n    MarketSide[] indexed marketSides,\\r\\n    address[] indexed rewardAccumulators\\r\\n  );\\r\\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\\r\\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\\r\\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\\r\\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\\r\\n  event DistributionTimelockAliveToggled(bool isAlive);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the weight of a market.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The weight of the market.\\r\\n   */\\r\\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the votes for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The votes for the token.\\r\\n   */\\r\\n  function votes(\\r\\n    uint256 tokenId,\\r\\n    address market,\\r\\n    MarketSide marketSide,\\r\\n    address lpToken\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the used weights for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The used weights for the token.\\r\\n   */\\r\\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the last voted timestamp for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @return The last voted timestamp for the token.\\r\\n   */\\r\\n  function lastVoted(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Check if a token is whitelisted.\\r\\n   * @param token Address of the token.\\r\\n   * @return True if the token is whitelisted, false otherwise.\\r\\n   */\\r\\n  function isWhitelistedToken(address token) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Check if an NFT is whitelisted.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @return True if the NFT is whitelisted, false otherwise.\\r\\n   */\\r\\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the ve contract.\\r\\n   * @return The address of the ve contract.\\r\\n   */\\r\\n  function ve() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the governor.\\r\\n   * @return The address of the governor.\\r\\n   */\\r\\n  function governor() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Update voting balances in voting rewards contracts.\\r\\n   * @param _tokenId ID of veNFT whose balance you wish to update.\\r\\n   */\\r\\n  function poke(uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\\r\\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\\r\\n   *      Can only vote for gauges that have not been killed.\\r\\n   *      Throws if length of _poolVote and _weights do not match.\\r\\n   * @param _tokenId ID of veNFT you are voting with.\\r\\n   * @param _poolVote Array of pools you are voting for.\\r\\n   * @param _marketVoteSide Array of market vote sides you are voting for.\\r\\n   * @param _weights Weights of pools.\\r\\n   */\\r\\n  function vote(\\r\\n    uint256 _tokenId,\\r\\n    address[] calldata _poolVote,\\r\\n    MarketSide[] calldata _marketVoteSide,\\r\\n    uint256[] calldata _weights\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\\r\\n   * @dev Cannot reset in the same epoch that you voted in.\\r\\n   *      Can vote or deposit into a managed NFT again after reset.\\r\\n   * @param _tokenId ID of veNFT that you are resetting.\\r\\n   */\\r\\n  function reset(uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Distributes rewards to eligible markets.\\r\\n   */\\r\\n  function distributeRewards() external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claim bribes for a given NFT.\\r\\n   * @dev Utility to help batch bribe claims.\\r\\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\\r\\n   * @param _tokens Array of tokens that are used as bribes.\\r\\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\\r\\n   */\\r\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\\r\\n   * @dev Throws if not called by governor.\\r\\n   * @param _token Address of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  function whitelistToken(address _token, bool _bool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\r\\n   * @dev Throws if not called by governor.\\r\\n   *      Throws if already whitelisted.\\r\\n   * @param _tokenId ID of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the LP tokens.\\r\\n   * @param _lpTokens Array of LP token addresses.\\r\\n   */\\r\\n  function setLpTokens(address[] memory _lpTokens) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the Master Price Oracle (MPO) address.\\r\\n   * @param _mpo Address of the Master Price Oracle.\\r\\n   */\\r\\n  function setMpo(address _mpo) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set a new governor.\\r\\n   * @param _governor Address of the new governor.\\r\\n   */\\r\\n  function setGovernor(address _governor) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Add new markets.\\r\\n   * @param _markets Array of Market structs to be added.\\r\\n   */\\r\\n  function addMarkets(Market[] calldata _markets) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set reward accumulators for markets.\\r\\n   * @param _markets Array of market addresses.\\r\\n   * @param _marketSides Array of market sides.\\r\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\r\\n   */\\r\\n  function setMarketRewardAccumulators(\\r\\n    address[] calldata _markets,\\r\\n    MarketSide[] calldata _marketSides,\\r\\n    address[] calldata _rewardAccumulators\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set bribes for reward accumulators.\\r\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\r\\n   * @param _bribes Array of bribe addresses.\\r\\n   */\\r\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the maximum number of votes.\\r\\n   * @param _maxVotingNum Maximum number of votes allowed.\\r\\n   */\\r\\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggle the alive status of a reward accumulator.\\r\\n   * @param _market Address of the market.\\r\\n   * @param _marketSide Side of the market.\\r\\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\\r\\n   */\\r\\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggle the alive status of a timelock on distributing rewards.\\r\\n   * @param _isAlive Boolean indicating if the timelock is alive.\\r\\n   */\\r\\n  function toggleDistributionTimelockAlive(bool _isAlive) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Get the start of the epoch for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the epoch start for.\\r\\n   * @return The start of the epoch.\\r\\n   */\\r\\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the next epoch for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the next epoch for.\\r\\n   * @return The next epoch.\\r\\n   */\\r\\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the start of the voting period for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the voting start for.\\r\\n   * @return The start of the voting period.\\r\\n   */\\r\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the end of the voting period for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the voting end for.\\r\\n   * @return The end of the voting period.\\r\\n   */\\r\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the number of markets.\\r\\n   * @return The number of markets.\\r\\n   */\\r\\n  function marketsLength() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get all LP reward tokens.\\r\\n   * @return An array of addresses representing all LP reward tokens.\\r\\n   */\\r\\n  function getAllLpRewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Get vote details for a specific token ID and LP asset.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpAsset The address of the LP asset.\\r\\n   * @return A struct containing vote details.\\r\\n   */\\r\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\\r\\n\\r\\n  function getHistoricalPrice(address _lpToken, uint256 _epochTimestamp) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa1f79c26cfdb15efcfd855ca2e8108ed5e4bbaeaa5f5f4bd6e7f3264e2e3d1d8\",\"license\":\"UNLICENSED\"},\"contracts/veION/libraries/IonicTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nlibrary IonicTimeLibrary {\\r\\n  uint256 internal constant _WEEK = 7 days;\\r\\n\\r\\n  /// @dev Returns start of epoch based on current timestamp\\r\\n  function epochStart(uint256 timestamp) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return timestamp - (timestamp % _WEEK);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns start of next epoch / end of current epoch\\r\\n  function epochNext(uint256 timestamp) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return timestamp - (timestamp % _WEEK) + _WEEK;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns start of voting window\\r\\n  function epochVoteStart(uint256 timestamp) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return timestamp - (timestamp % _WEEK) + 1 hours;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns end of voting window / beginning of unrestricted voting window\\r\\n  function epochVoteEnd(uint256 timestamp) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return timestamp - (timestamp % _WEEK) + _WEEK - 12 hours;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa46de2e4b8f98426a594ff95b16b15d52375c4ade8eabfb82f7bd3d8ad416d7c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61244380620000ee6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638760e6221161010f578063e30c3978116100a2578063f25e55a511610071578063f25e55a5146104fa578063f2fde38b14610525578063f301af4214610538578063f5f8d3651461054b57600080fd5b8063e30c3978146104ae578063e4dc2aa4146104bf578063e6886396146104df578063eac74562146104e757600080fd5b8063b5c5f672116100de578063b5c5f6721461044a578063b66503cf1461045d578063d2980eb014610470578063d82ada501461048357600080fd5b80638760e622146103a85780638da5cb5b146103d657806392777b29146103e75780639a8c3e911461041257600080fd5b806346c96aac1161018757806357b353251161015657806357b353251461033c5780636e13fffe14610383578063715018a61461039857806379ba5097146103a057600080fd5b806346c96aac146102c3578063485cc955146102d65780634d5ce038146102e9578063524bafc81461031c57600080fd5b80631be05289116101c35780631be05289146102505780631f8507161461025a5780633656eec2146102855780633e491d47146102b057600080fd5b80630efe6a8b146101ea5780631056dfe8146101ff57806315b42e5e14610212575b600080fd5b6101fd6101f8366004611f16565b61055e565b005b6101fd61020d366004611f4b565b61067a565b61023d610220366004611f83565b60d560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61023d62093a8081565b60ca5461026d906001600160a01b031681565b6040516001600160a01b039091168152602001610247565b61023d610293366004611faf565b60ce60209081526000928352604080842090915290825290205481565b61023d6102be366004611f83565b6106e3565b60c95461026d906001600160a01b031681565b6101fd6102e4366004611fdf565b610a7d565b61030c6102f736600461200d565b60cc6020526000908152604090205460ff1681565b6040519015158152602001610247565b61023d61032a36600461200d565b60d46020526000908152604090205481565b61036e61034a366004611faf565b60d36020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610247565b61038b610bc8565b604051610247919061202a565b6101fd610c3f565b6101fd610c53565b6103bb6103b6366004611f4b565b610ccd565b60408051825181526020928301519281019290925201610247565b6065546001600160a01b031661026d565b61023d6103f5366004611f83565b60cf60209081526000928352604080842090915290825290205481565b61036e610420366004611f4b565b60d16020908152600093845260408085208252928452828420905282529020805460019091015482565b6101fd610458366004611f16565b610d22565b6101fd61046b366004611f83565b610e27565b61023d61047e366004611faf565b610f5b565b61023d610491366004611faf565b60d260209081526000928352604080842090915290825290205481565b6097546001600160a01b031661026d565b61023d6104cd36600461200d565b60cd6020526000908152604090205481565b60cb5461023d565b61023d6104f5366004611f4b565b6110db565b61023d610508366004611f83565b60d060209081526000928352604080842090915290825290205481565b6101fd61053336600461200d565b61126b565b61026d610546366004612077565b6112dc565b6101fd6105593660046120fb565b611306565b60c9546001600160a01b031633146105915760405162461bcd60e51b8152600401610588906121a6565b60405180910390fd5b6001600160a01b038316600090815260cd60205260408120805433928592916105bb9084906121f3565b9091555050600082815260ce602090815260408083206001600160a01b0388168452909152812080548592906105f29084906121f3565b9091555050600082815260ce602090815260408083206001600160a01b03881684529091529020546106279083908690611471565b610630846115da565b81816001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161066c91815260200190565b60405180910390a350505050565b610682611738565b6001600160a01b038216600081815260d56020908152604080832062093a8088068803808552908352928190208590555184815291929186917ff62974ed7e8fa605d2bf41382cae245ff3153382d14e491a73ecdcede5da58e6910161066c565b600061073b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000808252610748610bc8565b805190915060005b81811015610a6f57600083828151811061076c5761076c612206565b602090810291909101810151600089815260d2835260408082206001600160a01b03841683529093529182205490925090036107a85750610a67565b6001600160a01b038816600090815260d0602090815260408083208a845290915290205462093a8081069003608086018190526107e890889083906110db565b60a08601908152600088815260d1602090815260408083206001600160a01b0386168452825280832093518352928152908290208251808401909352805480845260019091015491830191909152608087015161084c9162093a8081069003611792565b6080870181905262093a80906108679042838106900361221c565b610871919061222f565b60c0870181905215610a645760005b8660c00151811015610a62576108b08984600162093a808b608001516108a691906121f3565b6104f5919061221c565b60a0880190815260008a815260d1602090815260408083206001600160a01b03881684528252808320935183529281529082902082518084019093528054835260010154908201819052608089015191935061090d9185906117a8565b60608801526000604088018190525b858110156109de57600087828151811061093857610938612206565b6020026020010151905060006109af60d36000610973600162093a808f6080015161096391906121f3565b61096d919061221c565b86610f5b565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020600101546001611792565b90506109c081838c608001516117a8565b8a6040018181516109d191906121f3565b905250505060010161091c565b50604087015115610a42576040808801516001600160a01b038c16600090815260cf602090815283822060808c01518352905291909120546060890151610a259190612251565b610a2f919061222f565b87518890610a3e9083906121f3565b9052505b62093a8087608001818151610a5791906121f3565b905250600101610880565b505b50505b600101610750565b505090519150505b92915050565b600054610100900460ff1615808015610a9d5750600054600160ff909116105b80610ab75750303b158015610ab7575060005460ff166001145b610b1a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610588565b6000805460ff191660011790558015610b3d576000805461ff0019166101001790555b610b4561188d565b610b4d6118bc565b60c980546001600160a01b038086166001600160a01b03199283161790925560ca8054928516929091169190911790558015610bc3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60c95460408051633709ffff60e11b815290516060926001600160a01b031691636e13fffe9160048083019260009291908290030181865afa158015610c12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3a9190810190612268565b905090565b610c47611738565b610c5160006118eb565b565b60975433906001600160a01b03168114610cc15760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610588565b610cca816118eb565b50565b6040805180820182526000808252602091820181905285815260d182528281206001600160a01b03861682528252828120848252825282902082518084019093528054835260010154908201525b9392505050565b60c9546001600160a01b03163314610d4c5760405162461bcd60e51b8152600401610588906121a6565b6001600160a01b038316600090815260cd6020526040812080543392859291610d7690849061221c565b9091555050600082815260ce602090815260408083206001600160a01b038816845290915281208054859290610dad90849061221c565b9091555050600082815260ce602090815260408083206001600160a01b0388168452909152902054610de29083908690611471565b610deb846115da565b81816001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688560405161066c91815260200190565b610e2f611904565b6001600160a01b038216600090815260cc6020526040902054339060ff16610f425760c95460405163559bfa4360e11b81526001600160a01b0385811660048301529091169063ab37f48690602401602060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf91906122f7565b610edc576040516307c241ad60e51b815260040160405180910390fd5b6001600160a01b038316600081815260cc60205260408120805460ff1916600190811790915560cb805491820181559091527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0180546001600160a01b03191690911790555b610f4d81848461195d565b50610f5760018055565b5050565b6001600160a01b038116600090815260d46020526040812054808203610f85576000915050610a77565b8360d36000610f9560018561221c565b8152602080820192909252604090810160009081206001600160a01b038816825290925290205411610fd457610fcc60018261221c565b915050610a77565b6001600160a01b03831660009081527f938258ec6d8d468a3507d140e1c026dc2afa285c097847a088da7b50946fb91b602052604090205484101561101d576000915050610a77565b60008061102b60018461221c565b90505b818111156110d25760006002611044848461221c565b61104e919061222f565b611058908361221c565b600081815260d3602090815260408083206001600160a01b038b1684528252918290208251808401909352805480845260019091015491830191909152919250908890036110ac57509350610a7792505050565b80518811156110bd578193506110cb565b6110c860018361221c565b92505b505061102e565b50949350505050565b600083815260d2602090815260408083206001600160a01b038616845290915281205480820361110f576000915050610d1b565b600085815260d1602090815260408083206001600160a01b03881684529091528120849161113e60018561221c565b815260200190815260200160002060000154116111685761116060018261221c565b915050610d1b565b600085815260d1602090815260408083206001600160a01b038816845282528083208380529091529020548310156111a4576000915050610d1b565b6000806111b260018461221c565b90505b8181111561126157600060026111cb848461221c565b6111d5919061222f565b6111df908361221c565b600089815260d1602090815260408083206001600160a01b038c168452825280832084845282529182902082518084019093528054808452600190910154918301919091529192509087900361123b57509350610d1b92505050565b805187111561124c5781935061125a565b61125760018361221c565b92505b50506111b5565b5095945050505050565b611273611738565b609780546001600160a01b0383166001600160a01b031990911681179091556112a46065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60cb81815481106112ec57600080fd5b6000918252602090912001546001600160a01b0316905081565b61130e611904565b60c9546001600160a01b031633146113385760405162461bcd60e51b8152600401610588906121a6565b60ca546040516331a9108f60e11b815260048101849052339182916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a99190612319565b6001600160a01b0316141580156113ce575060c9546001600160a01b03828116911614155b156113eb576040516282b42960e81b815260040160405180910390fd5b60ca546040516331a9108f60e11b8152600481018590526000916001600160a01b031690636352211e90602401602060405180830381865afa158015611435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114599190612319565b9050611466818585611a3d565b5050610f5760018055565b600083815260d2602090815260408083206001600160a01b03861684529091529020544281158015906114f7575062093a8081068103600086815260d1602090815260408083206001600160a01b038916845290915281206114f5916114d860018761221c565b81526020019081526020016000206000015462093a808106900390565b145b1561155e576040805180820182528281526020808201869052600088815260d182528381206001600160a01b0389168252909152918220909161153b60018661221c565b8152602080820192909252604001600020825181559101516001909101556115d3565b6040805180820182528281526020808201868152600089815260d183528481206001600160a01b038a16825283528481208782529092529290209051815590516001918201556115af9083906121f3565b600086815260d2602090815260408083206001600160a01b03891684529091529020555b5050505050565b6001600160a01b038116600090815260d4602052604090205442811580159061164c575062093a808106810361164a60d3600061161860018761221c565b8152602080820192909252604090810160009081206001600160a01b038916825290925290205462093a808106900390565b145b156116c3576040805180820182528281526001600160a01b038516600090815260cd602090815292812054928201929092529060d39061168d60018661221c565b8152602080820192909252604090810160009081206001600160a01b038816825283522082518155910151600190910155505050565b6040805180820182528281526001600160a01b038516600081815260cd60209081528482205481850190815287835260d382528583209383529290529290922090518155905160019182015561171a9083906121f3565b6001600160a01b038416600090815260d46020526040902055505050565b6065546001600160a01b03163314610c515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610588565b60008183116117a15781610d1b565b5090919050565b60008062093a808306830360c95460405163d21f507760e01b81526001600160a01b038781166004830152602482018790529293506000929091169063d21f507790604401602060405180830381865afa15801561180a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182e9190612336565b90508060000361186357604051631e1bcf4b60e21b81526001600160a01b038616600482015260248101839052604401610588565b6000670de0b6b3a76400006118788389612251565b611882919061222f565b979650505050505050565b600054610100900460ff166118b45760405162461bcd60e51b81526004016105889061234f565b610c51611b65565b600054610100900460ff166118e35760405162461bcd60e51b81526004016105889061234f565b610c51611b8c565b609780546001600160a01b0319169055610cca81611bbc565b6002600154036119565760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610588565b6002600155565b8060000361197e5760405163d11b25af60e01b815260040160405180910390fd5b6119936001600160a01b038316843084611c0e565b60006119a44262093a808106900390565b6001600160a01b038416600090815260cf602090815260408083208484529091528120805492935084929091906119dc9084906121f3565b9250508190555080836001600160a01b0316856001600160a01b03167fd6ed593743eef6a29ec2399492c6063a60ca178ec420caf8ac3eceff9cb9a55985604051611a2991815260200190565b60405180910390a450505050565b60018055565b805160005b818110156115d3576000611a6f848381518110611a6157611a61612206565b6020026020010151866106e3565b90504260d06000868581518110611a8857611a88612206565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081208982529092529020558015611af657611af68682868581518110611ad657611ad6612206565b60200260200101516001600160a01b0316611c7f9092919063ffffffff16565b838281518110611b0857611b08612206565b60200260200101516001600160a01b0316866001600160a01b03167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c783604051611b5491815260200190565b60405180910390a350600101611a42565b600054610100900460ff16611a375760405162461bcd60e51b81526004016105889061234f565b600054610100900460ff16611bb35760405162461bcd60e51b81526004016105889061234f565b610c51336118eb565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611c799085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611caf565b50505050565b6040516001600160a01b038316602482015260448101829052610bc390849063a9059cbb60e01b90606401611c42565b6000611d04826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d819092919063ffffffff16565b805190915015610bc35780806020019051810190611d2291906122f7565b610bc35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610588565b6060611d908484600085611d98565b949350505050565b606082471015611df95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610588565b600080866001600160a01b03168587604051611e1591906123be565b60006040518083038185875af1925050503d8060008114611e52576040519150601f19603f3d011682016040523d82523d6000602084013e611e57565b606091505b50915091506118828783838760608315611ed2578251600003611ecb576001600160a01b0385163b611ecb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610588565b5081611d90565b611d908383815115611ee75781518083602001fd5b8060405162461bcd60e51b815260040161058891906123da565b6001600160a01b0381168114610cca57600080fd5b600080600060608486031215611f2b57600080fd5b8335611f3681611f01565b95602085013595506040909401359392505050565b600080600060608486031215611f6057600080fd5b833592506020840135611f7281611f01565b929592945050506040919091013590565b60008060408385031215611f9657600080fd5b8235611fa181611f01565b946020939093013593505050565b60008060408385031215611fc257600080fd5b823591506020830135611fd481611f01565b809150509250929050565b60008060408385031215611ff257600080fd5b8235611ffd81611f01565b91506020830135611fd481611f01565b60006020828403121561201f57600080fd5b8135610d1b81611f01565b6020808252825182820181905260009190848201906040850190845b8181101561206b5783516001600160a01b031683529284019291840191600101612046565b50909695505050505050565b60006020828403121561208957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156120cf576120cf612090565b604052919050565b600067ffffffffffffffff8211156120f1576120f1612090565b5060051b60200190565b6000806040838503121561210e57600080fd5b8235915060208084013567ffffffffffffffff81111561212d57600080fd5b8401601f8101861361213e57600080fd5b803561215161214c826120d7565b6120a6565b81815260059190911b8201830190838101908883111561217057600080fd5b928401925b8284101561219757833561218881611f01565b82529284019290840190612175565b80955050505050509250929050565b60208082526017908201527f43616c6c6572206973206e6f742074686520766f746572000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a7757610a776121dd565b634e487b7160e01b600052603260045260246000fd5b81810381811115610a7757610a776121dd565b60008261224c57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610a7757610a776121dd565b6000602080838503121561227b57600080fd5b825167ffffffffffffffff81111561229257600080fd5b8301601f810185136122a357600080fd5b80516122b161214c826120d7565b81815260059190911b820183019083810190878311156122d057600080fd5b928401925b828410156118825783516122e881611f01565b825292840192908401906122d5565b60006020828403121561230957600080fd5b81518015158114610d1b57600080fd5b60006020828403121561232b57600080fd5b8151610d1b81611f01565b60006020828403121561234857600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156123b557818101518382015260200161239d565b50506000910152565b600082516123d081846020870161239a565b9190910192915050565b60208152600082518060208401526123f981604085016020870161239a565b601f01601f1916919091016040019291505056fea264697066735822122000957ead867174ec30c52a39c3b31c617ea3803c52fe9d867dd4fbd3ebe50c7664736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80638760e6221161010f578063e30c3978116100a2578063f25e55a511610071578063f25e55a5146104fa578063f2fde38b14610525578063f301af4214610538578063f5f8d3651461054b57600080fd5b8063e30c3978146104ae578063e4dc2aa4146104bf578063e6886396146104df578063eac74562146104e757600080fd5b8063b5c5f672116100de578063b5c5f6721461044a578063b66503cf1461045d578063d2980eb014610470578063d82ada501461048357600080fd5b80638760e622146103a85780638da5cb5b146103d657806392777b29146103e75780639a8c3e911461041257600080fd5b806346c96aac1161018757806357b353251161015657806357b353251461033c5780636e13fffe14610383578063715018a61461039857806379ba5097146103a057600080fd5b806346c96aac146102c3578063485cc955146102d65780634d5ce038146102e9578063524bafc81461031c57600080fd5b80631be05289116101c35780631be05289146102505780631f8507161461025a5780633656eec2146102855780633e491d47146102b057600080fd5b80630efe6a8b146101ea5780631056dfe8146101ff57806315b42e5e14610212575b600080fd5b6101fd6101f8366004611f16565b61055e565b005b6101fd61020d366004611f4b565b61067a565b61023d610220366004611f83565b60d560209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61023d62093a8081565b60ca5461026d906001600160a01b031681565b6040516001600160a01b039091168152602001610247565b61023d610293366004611faf565b60ce60209081526000928352604080842090915290825290205481565b61023d6102be366004611f83565b6106e3565b60c95461026d906001600160a01b031681565b6101fd6102e4366004611fdf565b610a7d565b61030c6102f736600461200d565b60cc6020526000908152604090205460ff1681565b6040519015158152602001610247565b61023d61032a36600461200d565b60d46020526000908152604090205481565b61036e61034a366004611faf565b60d36020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610247565b61038b610bc8565b604051610247919061202a565b6101fd610c3f565b6101fd610c53565b6103bb6103b6366004611f4b565b610ccd565b60408051825181526020928301519281019290925201610247565b6065546001600160a01b031661026d565b61023d6103f5366004611f83565b60cf60209081526000928352604080842090915290825290205481565b61036e610420366004611f4b565b60d16020908152600093845260408085208252928452828420905282529020805460019091015482565b6101fd610458366004611f16565b610d22565b6101fd61046b366004611f83565b610e27565b61023d61047e366004611faf565b610f5b565b61023d610491366004611faf565b60d260209081526000928352604080842090915290825290205481565b6097546001600160a01b031661026d565b61023d6104cd36600461200d565b60cd6020526000908152604090205481565b60cb5461023d565b61023d6104f5366004611f4b565b6110db565b61023d610508366004611f83565b60d060209081526000928352604080842090915290825290205481565b6101fd61053336600461200d565b61126b565b61026d610546366004612077565b6112dc565b6101fd6105593660046120fb565b611306565b60c9546001600160a01b031633146105915760405162461bcd60e51b8152600401610588906121a6565b60405180910390fd5b6001600160a01b038316600090815260cd60205260408120805433928592916105bb9084906121f3565b9091555050600082815260ce602090815260408083206001600160a01b0388168452909152812080548592906105f29084906121f3565b9091555050600082815260ce602090815260408083206001600160a01b03881684529091529020546106279083908690611471565b610630846115da565b81816001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158560405161066c91815260200190565b60405180910390a350505050565b610682611738565b6001600160a01b038216600081815260d56020908152604080832062093a8088068803808552908352928190208590555184815291929186917ff62974ed7e8fa605d2bf41382cae245ff3153382d14e491a73ecdcede5da58e6910161066c565b600061073b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000808252610748610bc8565b805190915060005b81811015610a6f57600083828151811061076c5761076c612206565b602090810291909101810151600089815260d2835260408082206001600160a01b03841683529093529182205490925090036107a85750610a67565b6001600160a01b038816600090815260d0602090815260408083208a845290915290205462093a8081069003608086018190526107e890889083906110db565b60a08601908152600088815260d1602090815260408083206001600160a01b0386168452825280832093518352928152908290208251808401909352805480845260019091015491830191909152608087015161084c9162093a8081069003611792565b6080870181905262093a80906108679042838106900361221c565b610871919061222f565b60c0870181905215610a645760005b8660c00151811015610a62576108b08984600162093a808b608001516108a691906121f3565b6104f5919061221c565b60a0880190815260008a815260d1602090815260408083206001600160a01b03881684528252808320935183529281529082902082518084019093528054835260010154908201819052608089015191935061090d9185906117a8565b60608801526000604088018190525b858110156109de57600087828151811061093857610938612206565b6020026020010151905060006109af60d36000610973600162093a808f6080015161096391906121f3565b61096d919061221c565b86610f5b565b81526020019081526020016000206000846001600160a01b03166001600160a01b03168152602001908152602001600020600101546001611792565b90506109c081838c608001516117a8565b8a6040018181516109d191906121f3565b905250505060010161091c565b50604087015115610a42576040808801516001600160a01b038c16600090815260cf602090815283822060808c01518352905291909120546060890151610a259190612251565b610a2f919061222f565b87518890610a3e9083906121f3565b9052505b62093a8087608001818151610a5791906121f3565b905250600101610880565b505b50505b600101610750565b505090519150505b92915050565b600054610100900460ff1615808015610a9d5750600054600160ff909116105b80610ab75750303b158015610ab7575060005460ff166001145b610b1a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610588565b6000805460ff191660011790558015610b3d576000805461ff0019166101001790555b610b4561188d565b610b4d6118bc565b60c980546001600160a01b038086166001600160a01b03199283161790925560ca8054928516929091169190911790558015610bc3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60c95460408051633709ffff60e11b815290516060926001600160a01b031691636e13fffe9160048083019260009291908290030181865afa158015610c12573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3a9190810190612268565b905090565b610c47611738565b610c5160006118eb565b565b60975433906001600160a01b03168114610cc15760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610588565b610cca816118eb565b50565b6040805180820182526000808252602091820181905285815260d182528281206001600160a01b03861682528252828120848252825282902082518084019093528054835260010154908201525b9392505050565b60c9546001600160a01b03163314610d4c5760405162461bcd60e51b8152600401610588906121a6565b6001600160a01b038316600090815260cd6020526040812080543392859291610d7690849061221c565b9091555050600082815260ce602090815260408083206001600160a01b038816845290915281208054859290610dad90849061221c565b9091555050600082815260ce602090815260408083206001600160a01b0388168452909152902054610de29083908690611471565b610deb846115da565b81816001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688560405161066c91815260200190565b610e2f611904565b6001600160a01b038216600090815260cc6020526040902054339060ff16610f425760c95460405163559bfa4360e11b81526001600160a01b0385811660048301529091169063ab37f48690602401602060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf91906122f7565b610edc576040516307c241ad60e51b815260040160405180910390fd5b6001600160a01b038316600081815260cc60205260408120805460ff1916600190811790915560cb805491820181559091527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0180546001600160a01b03191690911790555b610f4d81848461195d565b50610f5760018055565b5050565b6001600160a01b038116600090815260d46020526040812054808203610f85576000915050610a77565b8360d36000610f9560018561221c565b8152602080820192909252604090810160009081206001600160a01b038816825290925290205411610fd457610fcc60018261221c565b915050610a77565b6001600160a01b03831660009081527f938258ec6d8d468a3507d140e1c026dc2afa285c097847a088da7b50946fb91b602052604090205484101561101d576000915050610a77565b60008061102b60018461221c565b90505b818111156110d25760006002611044848461221c565b61104e919061222f565b611058908361221c565b600081815260d3602090815260408083206001600160a01b038b1684528252918290208251808401909352805480845260019091015491830191909152919250908890036110ac57509350610a7792505050565b80518811156110bd578193506110cb565b6110c860018361221c565b92505b505061102e565b50949350505050565b600083815260d2602090815260408083206001600160a01b038616845290915281205480820361110f576000915050610d1b565b600085815260d1602090815260408083206001600160a01b03881684529091528120849161113e60018561221c565b815260200190815260200160002060000154116111685761116060018261221c565b915050610d1b565b600085815260d1602090815260408083206001600160a01b038816845282528083208380529091529020548310156111a4576000915050610d1b565b6000806111b260018461221c565b90505b8181111561126157600060026111cb848461221c565b6111d5919061222f565b6111df908361221c565b600089815260d1602090815260408083206001600160a01b038c168452825280832084845282529182902082518084019093528054808452600190910154918301919091529192509087900361123b57509350610d1b92505050565b805187111561124c5781935061125a565b61125760018361221c565b92505b50506111b5565b5095945050505050565b611273611738565b609780546001600160a01b0383166001600160a01b031990911681179091556112a46065546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60cb81815481106112ec57600080fd5b6000918252602090912001546001600160a01b0316905081565b61130e611904565b60c9546001600160a01b031633146113385760405162461bcd60e51b8152600401610588906121a6565b60ca546040516331a9108f60e11b815260048101849052339182916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a99190612319565b6001600160a01b0316141580156113ce575060c9546001600160a01b03828116911614155b156113eb576040516282b42960e81b815260040160405180910390fd5b60ca546040516331a9108f60e11b8152600481018590526000916001600160a01b031690636352211e90602401602060405180830381865afa158015611435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114599190612319565b9050611466818585611a3d565b5050610f5760018055565b600083815260d2602090815260408083206001600160a01b03861684529091529020544281158015906114f7575062093a8081068103600086815260d1602090815260408083206001600160a01b038916845290915281206114f5916114d860018761221c565b81526020019081526020016000206000015462093a808106900390565b145b1561155e576040805180820182528281526020808201869052600088815260d182528381206001600160a01b0389168252909152918220909161153b60018661221c565b8152602080820192909252604001600020825181559101516001909101556115d3565b6040805180820182528281526020808201868152600089815260d183528481206001600160a01b038a16825283528481208782529092529290209051815590516001918201556115af9083906121f3565b600086815260d2602090815260408083206001600160a01b03891684529091529020555b5050505050565b6001600160a01b038116600090815260d4602052604090205442811580159061164c575062093a808106810361164a60d3600061161860018761221c565b8152602080820192909252604090810160009081206001600160a01b038916825290925290205462093a808106900390565b145b156116c3576040805180820182528281526001600160a01b038516600090815260cd602090815292812054928201929092529060d39061168d60018661221c565b8152602080820192909252604090810160009081206001600160a01b038816825283522082518155910151600190910155505050565b6040805180820182528281526001600160a01b038516600081815260cd60209081528482205481850190815287835260d382528583209383529290529290922090518155905160019182015561171a9083906121f3565b6001600160a01b038416600090815260d46020526040902055505050565b6065546001600160a01b03163314610c515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610588565b60008183116117a15781610d1b565b5090919050565b60008062093a808306830360c95460405163d21f507760e01b81526001600160a01b038781166004830152602482018790529293506000929091169063d21f507790604401602060405180830381865afa15801561180a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182e9190612336565b90508060000361186357604051631e1bcf4b60e21b81526001600160a01b038616600482015260248101839052604401610588565b6000670de0b6b3a76400006118788389612251565b611882919061222f565b979650505050505050565b600054610100900460ff166118b45760405162461bcd60e51b81526004016105889061234f565b610c51611b65565b600054610100900460ff166118e35760405162461bcd60e51b81526004016105889061234f565b610c51611b8c565b609780546001600160a01b0319169055610cca81611bbc565b6002600154036119565760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610588565b6002600155565b8060000361197e5760405163d11b25af60e01b815260040160405180910390fd5b6119936001600160a01b038316843084611c0e565b60006119a44262093a808106900390565b6001600160a01b038416600090815260cf602090815260408083208484529091528120805492935084929091906119dc9084906121f3565b9250508190555080836001600160a01b0316856001600160a01b03167fd6ed593743eef6a29ec2399492c6063a60ca178ec420caf8ac3eceff9cb9a55985604051611a2991815260200190565b60405180910390a450505050565b60018055565b805160005b818110156115d3576000611a6f848381518110611a6157611a61612206565b6020026020010151866106e3565b90504260d06000868581518110611a8857611a88612206565b6020908102919091018101516001600160a01b0316825281810192909252604090810160009081208982529092529020558015611af657611af68682868581518110611ad657611ad6612206565b60200260200101516001600160a01b0316611c7f9092919063ffffffff16565b838281518110611b0857611b08612206565b60200260200101516001600160a01b0316866001600160a01b03167f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c783604051611b5491815260200190565b60405180910390a350600101611a42565b600054610100900460ff16611a375760405162461bcd60e51b81526004016105889061234f565b600054610100900460ff16611bb35760405162461bcd60e51b81526004016105889061234f565b610c51336118eb565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611c799085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611caf565b50505050565b6040516001600160a01b038316602482015260448101829052610bc390849063a9059cbb60e01b90606401611c42565b6000611d04826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d819092919063ffffffff16565b805190915015610bc35780806020019051810190611d2291906122f7565b610bc35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610588565b6060611d908484600085611d98565b949350505050565b606082471015611df95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610588565b600080866001600160a01b03168587604051611e1591906123be565b60006040518083038185875af1925050503d8060008114611e52576040519150601f19603f3d011682016040523d82523d6000602084013e611e57565b606091505b50915091506118828783838760608315611ed2578251600003611ecb576001600160a01b0385163b611ecb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610588565b5081611d90565b611d908383815115611ee75781518083602001fd5b8060405162461bcd60e51b815260040161058891906123da565b6001600160a01b0381168114610cca57600080fd5b600080600060608486031215611f2b57600080fd5b8335611f3681611f01565b95602085013595506040909401359392505050565b600080600060608486031215611f6057600080fd5b833592506020840135611f7281611f01565b929592945050506040919091013590565b60008060408385031215611f9657600080fd5b8235611fa181611f01565b946020939093013593505050565b60008060408385031215611fc257600080fd5b823591506020830135611fd481611f01565b809150509250929050565b60008060408385031215611ff257600080fd5b8235611ffd81611f01565b91506020830135611fd481611f01565b60006020828403121561201f57600080fd5b8135610d1b81611f01565b6020808252825182820181905260009190848201906040850190845b8181101561206b5783516001600160a01b031683529284019291840191600101612046565b50909695505050505050565b60006020828403121561208957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156120cf576120cf612090565b604052919050565b600067ffffffffffffffff8211156120f1576120f1612090565b5060051b60200190565b6000806040838503121561210e57600080fd5b8235915060208084013567ffffffffffffffff81111561212d57600080fd5b8401601f8101861361213e57600080fd5b803561215161214c826120d7565b6120a6565b81815260059190911b8201830190838101908883111561217057600080fd5b928401925b8284101561219757833561218881611f01565b82529284019290840190612175565b80955050505050509250929050565b60208082526017908201527f43616c6c6572206973206e6f742074686520766f746572000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a7757610a776121dd565b634e487b7160e01b600052603260045260246000fd5b81810381811115610a7757610a776121dd565b60008261224c57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610a7757610a776121dd565b6000602080838503121561227b57600080fd5b825167ffffffffffffffff81111561229257600080fd5b8301601f810185136122a357600080fd5b80516122b161214c826120d7565b81815260059190911b820183019083810190878311156122d057600080fd5b928401925b828410156118825783516122e881611f01565b825292840192908401906122d5565b60006020828403121561230957600080fd5b81518015158114610d1b57600080fd5b60006020828403121561232b57600080fd5b8151610d1b81611f01565b60006020828403121561234857600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156123b557818101518382015260200161239d565b50506000910152565b600082516123d081846020870161239a565b9190910192915050565b60208152600082518060208401526123f981604085016020870161239a565b601f01601f1916919091016040019291505056fea264697066735822122000957ead867174ec30c52a39c3b31c617ea3803c52fe9d867dd4fbd3ebe50c7664736f6c63430008160033",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "deposit(address,uint256,uint256)": {
        "details": "Can only be called internally by authorized entities.",
        "params": {
          "amount": "Amount to be deposited for the veNFT",
          "lpToken": "Address of the liquidity pool token",
          "tokenId": "Unique identifier of the veNFT"
        }
      },
      "earned(address,uint256)": {
        "params": {
          "token": "Address of the reward token",
          "tokenId": "Unique identifier of the veNFT"
        },
        "returns": {
          "_0": "Amount of the reward token earned"
        }
      },
      "getAllLpRewardTokens()": {
        "returns": {
          "_0": "Array of LP token addresses"
        }
      },
      "getCheckpoint(uint256,address,uint256)": {
        "params": {
          "index": "The index of the checkpoint to retrieve",
          "lpToken": "The LP token address",
          "tokenId": "The ID of the veION token"
        },
        "returns": {
          "_0": "The checkpoint data"
        }
      },
      "getPriorBalanceIndex(uint256,address,uint256)": {
        "details": "Timestamp must be in the past or present.",
        "params": {
          "lpToken": "Address of the liquidity pool token",
          "timestamp": "The timestamp to get the balance at",
          "tokenId": "The veNFT token ID to check"
        },
        "returns": {
          "_0": "The balance index at the given timestamp"
        }
      },
      "getPriorSupplyIndex(uint256,address)": {
        "details": "Timestamp must be in the past or present.",
        "params": {
          "timestamp": "The timestamp to get the supply index at"
        },
        "returns": {
          "_0": "The supply index at the given timestamp"
        }
      },
      "getReward(uint256,address[])": {
        "details": "If we were to check the whitelisting status, it could prevent tokens that were initially whitelisted and later de-whitelisted from having their rewards claimed, leading to unclaimable rewards.",
        "params": {
          "tokenId": "Unique identifier of the veNFT",
          "tokens": "Array of tokens to claim rewards for"
        }
      },
      "initialize(address,address)": {
        "details": "This function is called only once during contract deployment",
        "params": {
          "_ve": "The address of the veION contract",
          "_voter": "The address of the voter contract"
        }
      },
      "notifyRewardAmount(address,uint256)": {
        "params": {
          "amount": "Amount of the reward token to be added",
          "token": "Address of the reward token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardsListLength()": {
        "returns": {
          "_0": "The length of the rewards array"
        }
      },
      "setHistoricalPrices(uint256,address,uint256)": {
        "params": {
          "epochTimestamp": "The timestamp of the epoch",
          "lpToken": "The LP token address",
          "price": "The price to set"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "withdraw(address,uint256,uint256)": {
        "details": "Can only be called internally by authorized entities.",
        "params": {
          "amount": "Amount to be withdrawn for the veNFT",
          "lpToken": "Address of the liquidity pool token",
          "tokenId": "Unique identifier of the veNFT"
        }
      }
    },
    "title": "BribeRewards Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DURATION()": {
        "notice": "Duration of the reward period in seconds"
      },
      "balanceOf(uint256,address)": {
        "notice": "Balance of LP tokens for each tokenId and reward token"
      },
      "checkpoints(uint256,address,uint256)": {
        "notice": "A record of balance checkpoints for each account, by index"
      },
      "deposit(address,uint256,uint256)": {
        "notice": "Deposit an amount into the bribe rewards contract for a specific veNFT"
      },
      "earned(address,uint256)": {
        "notice": "Calculate the rewards earned for a specific token and veNFT"
      },
      "getAllLpRewardTokens()": {
        "notice": "Gets all LP tokens that can receive rewards"
      },
      "getCheckpoint(uint256,address,uint256)": {
        "notice": "Gets a specific checkpoint for a token"
      },
      "getPriorBalanceIndex(uint256,address,uint256)": {
        "notice": "Get the prior balance index for a veNFT at a specific timestamp"
      },
      "getPriorSupplyIndex(uint256,address)": {
        "notice": "Get the prior supply index at a specific timestamp"
      },
      "getReward(uint256,address[])": {
        "notice": "This function can accept any token, regardless of its whitelisting status."
      },
      "historicalPrices(address,uint256)": {
        "notice": "Historical prices for each reward token and epoch"
      },
      "initialize(address,address)": {
        "notice": "Initializes the BribeRewards contract with the voter and veION addresses"
      },
      "isReward(address)": {
        "notice": "Mapping to check if an address is a reward token"
      },
      "lastEarn(address,uint256)": {
        "notice": "Last earned timestamp for each reward token and tokenId"
      },
      "notifyRewardAmount(address,uint256)": {
        "notice": "Notify the contract about new rewards for stakers"
      },
      "numCheckpoints(uint256,address)": {
        "notice": "The number of checkpoints for each account"
      },
      "rewards(uint256)": {
        "notice": "List of reward tokens"
      },
      "rewardsListLength()": {
        "notice": "Returns the total number of reward tokens"
      },
      "setHistoricalPrices(uint256,address,uint256)": {
        "notice": "Sets historical prices for LP tokens at specific epochs"
      },
      "supplyCheckpoints(uint256,address)": {
        "notice": "A record of balance checkpoints for each token, by index"
      },
      "supplyNumCheckpoints(address)": {
        "notice": "The number of supply checkpoints for each token"
      },
      "tokenRewardsPerEpoch(address,uint256)": {
        "notice": "Rewards per epoch for each reward token"
      },
      "totalSupply(address)": {
        "notice": "Total supply of LP tokens for each reward token"
      },
      "ve()": {
        "notice": "Address of the veION contract"
      },
      "voter()": {
        "notice": "Address of the voter contract"
      },
      "withdraw(address,uint256,uint256)": {
        "notice": "Withdraw an amount from the bribe rewards contract for a specific veNFT"
      }
    },
    "notice": "This contract allows veION to benefit from bribes when voting for various markets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 495,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 795,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 853,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4058,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 64614,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "voter",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 64617,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "ve",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 64621,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64626,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "isReward",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 64631,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "totalSupply",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 64638,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "balanceOf",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 64645,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "tokenRewardsPerEpoch",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 64652,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "lastEarn",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 64662,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "checkpoints",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)69507_storage)))"
      },
      {
        "astId": 64669,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 64677,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "supplyCheckpoints",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(SupplyCheckpoint)69513_storage))"
      },
      {
        "astId": 64682,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "supplyNumCheckpoints",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 64689,
        "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
        "label": "historicalPrices",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)69507_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IBribeRewards.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Checkpoint)69507_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(SupplyCheckpoint)69513_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBribeRewards.SupplyCheckpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(SupplyCheckpoint)69513_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)69507_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => struct IBribeRewards.Checkpoint)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Checkpoint)69507_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(SupplyCheckpoint)69513_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IBribeRewards.SupplyCheckpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SupplyCheckpoint)69513_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Checkpoint)69507_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBribeRewards.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)69507_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Checkpoint)69507_storage": {
        "encoding": "inplace",
        "label": "struct IBribeRewards.Checkpoint",
        "members": [
          {
            "astId": 69504,
            "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 69506,
            "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
            "label": "balanceOf",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SupplyCheckpoint)69513_storage": {
        "encoding": "inplace",
        "label": "struct IBribeRewards.SupplyCheckpoint",
        "members": [
          {
            "astId": 69510,
            "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 69512,
            "contract": "contracts/veION/BribeRewards.sol:BribeRewards",
            "label": "supply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}