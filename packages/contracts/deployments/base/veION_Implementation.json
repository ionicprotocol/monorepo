{
  "address": "0x938154352D7C8029f60dF2A554C6b299589eF23c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AeroBoostAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BoostAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStrategyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVeAEROAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationNotInFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxEarlyWithdrawFeeMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumLockDurationMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumNotMet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId2",
          "type": "uint256"
        }
      ],
      "name": "NoDelegationBetweenTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLockFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoUnderlyingStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAcceptingDelegators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughRemainingAfterSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVoter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasDelegatees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasDelegators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAeroVoterBoost",
          "type": "uint256"
        }
      ],
      "name": "AeroVoterBoostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAeroVoting",
          "type": "address"
        }
      ],
      "name": "AeroVotingSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelegationRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_blocked",
          "type": "bool"
        }
      ],
      "name": "DelegatorsBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.DepositType",
          "name": "depositType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "EmissionsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_firstExtension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_secondExtension",
          "type": "address"
        }
      ],
      "name": "ExtensionsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressesProvider",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newIonicPool",
          "type": "address"
        }
      ],
      "name": "IonicPoolSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBoosted",
          "type": "bool"
        }
      ],
      "name": "LimitedBoostToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boostAmount",
          "type": "uint256"
        }
      ],
      "name": "LimitedTimeBoostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "lpTokenType",
          "type": "uint8"
        }
      ],
      "name": "LpTokenTypeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxEarlyWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "MaxEarlyWithdrawFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetsLocked",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lengthOfAssets",
          "type": "uint256"
        }
      ],
      "name": "MergeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "MinimumLockAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDuration",
          "type": "uint256"
        }
      ],
      "name": "MinimumLockDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PermanentLockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PermanentLockRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "splitAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "SplitCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "SplitToggle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "lpTokenType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StakeStrategySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "isWhitelisted",
          "type": "bool[]"
        }
      ],
      "name": "TokensWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "veAERO",
          "type": "address"
        }
      ],
      "name": "VeAEROSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_voting",
          "type": "bool"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newVoter",
          "type": "address"
        }
      ],
      "name": "VoterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ap",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_duration",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_stakeUnderlying",
          "type": "bool[]"
        }
      ],
      "name": "createLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_duration",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_stakeUnderlying",
          "type": "bool[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "createLockFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_stakeUnderlying",
          "type": "bool"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "_ap",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_stakeUnderlying",
          "type": "bool"
        }
      ],
      "name": "lockAdditionalAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "lockPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "toTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "removeDelegatees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "fromTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "removeDelegators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_aeroVoterBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_aeroVoting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_canSplit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_delegations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_delegatorsBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_distributedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_ionicPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_limitedBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_limitedBoostActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_locked",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delegateAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPermanent",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_lpType",
      "outputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_maxEarlyWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_minimumLockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_minimumLockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_permanentLockBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_protocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_stakeStrategy",
      "outputs": [
        {
          "internalType": "contract IStakeStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_underlyingStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userCumulativeAssetValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_userPointHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bias",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slope",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permanent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permanentDelegate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_veAERO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_voted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_whitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veIONFirstExtension",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veIONSecondExtension",
          "type": "address"
        }
      ],
      "name": "setExtensions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlockPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veIONFirstExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veIONSecondExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_voting",
          "type": "bool"
        }
      ],
      "name": "voting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa32a361d019f514f593f465da4a722766dec5ef712f62d7b32707af3587f8e6c",
  "receipt": {
    "to": null,
    "from": "0x7d922bf0975424b3371074f54cC784AF738Dac0D",
    "contractAddress": "0x938154352D7C8029f60dF2A554C6b299589eF23c",
    "transactionIndex": 86,
    "gasUsed": "5316901",
    "logsBloom": "0x
    "blockHash": "0xbed27b285c68fa1cfa911e44f6fa24ae56f28504c13ae5c20a9a1c9c14b0474a",
    "transactionHash": "0xa32a361d019f514f593f465da4a722766dec5ef712f62d7b32707af3587f8e6c",
    "logs": [
      {
        "transactionIndex": 86,
        "blockNumber": 25400763,
        "transactionHash": "0xa32a361d019f514f593f465da4a722766dec5ef712f62d7b32707af3587f8e6c",
        "address": "0x938154352D7C8029f60dF2A554C6b299589eF23c",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 177,
        "blockHash": "0xbed27b285c68fa1cfa911e44f6fa24ae56f28504c13ae5c20a9a1c9c14b0474a"
      }
    ],
    "blockNumber": 25400763,
    "cumulativeGasUsed": "23325847",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a38bdef4884463ed2eee7e86ce6ee7d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AeroBoostAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoostAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVeAEROAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationNotInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxEarlyWithdrawFeeMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumLockDurationMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"}],\"name\":\"NoDelegationBetweenTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLockFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoUnderlyingStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAcceptingDelegators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughRemainingAfterSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasDelegatees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasDelegators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAeroVoterBoost\",\"type\":\"uint256\"}],\"name\":\"AeroVoterBoostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAeroVoting\",\"type\":\"address\"}],\"name\":\"AeroVotingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_blocked\",\"type\":\"bool\"}],\"name\":\"DelegatorsBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.DepositType\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EmissionsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstExtension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_secondExtension\",\"type\":\"address\"}],\"name\":\"ExtensionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIonicPool\",\"type\":\"address\"}],\"name\":\"IonicPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBoosted\",\"type\":\"bool\"}],\"name\":\"LimitedBoostToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostAmount\",\"type\":\"uint256\"}],\"name\":\"LimitedTimeBoostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"lpTokenType\",\"type\":\"uint8\"}],\"name\":\"LpTokenTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEarlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"MaxEarlyWithdrawFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetsLocked\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lengthOfAssets\",\"type\":\"uint256\"}],\"name\":\"MergeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"MinimumLockAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDuration\",\"type\":\"uint256\"}],\"name\":\"MinimumLockDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PermanentLockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PermanentLockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"splitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"SplitCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"SplitToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"lpTokenType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StakeStrategySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"isWhitelisted\",\"type\":\"bool[]\"}],\"name\":\"TokensWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"veAERO\",\"type\":\"address\"}],\"name\":\"VeAEROSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_voting\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVoter\",\"type\":\"address\"}],\"name\":\"VoterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ap\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_duration\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_stakeUnderlying\",\"type\":\"bool[]\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_duration\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_stakeUnderlying\",\"type\":\"bool[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"createLockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stakeUnderlying\",\"type\":\"bool\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"_ap\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stakeUnderlying\",\"type\":\"bool\"}],\"name\":\"lockAdditionalAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"toTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"removeDelegatees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fromTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"removeDelegators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_aeroVoterBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_aeroVoting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_canSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_delegations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_delegatorsBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_distributedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_ionicPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_limitedBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_limitedBoostActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_locked\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_lpType\",\"outputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_maxEarlyWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_minimumLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_minimumLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_permanentLockBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_stakeStrategy\",\"outputs\":[{\"internalType\":\"contract IStakeStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_underlyingStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userCumulativeAssetValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_userPointHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanentDelegate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_veAERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_whitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veIONFirstExtension\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veIONSecondExtension\",\"type\":\"address\"}],\"name\":\"setExtensions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veIONFirstExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veIONSecondExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_voting\",\"type\":\"bool\"}],\"name\":\"voting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"createLock(address[],uint256[],uint256[],bool[])\":{\"params\":{\"_duration\":\"Array of lock durations\",\"_stakeUnderlying\":\"Array of booleans indicating whether to stake underlying tokens\",\"_tokenAddress\":\"Array of token addresses to lock\",\"_tokenAmount\":\"Array of token amounts to lock\"},\"returns\":{\"_0\":\"The ID of the newly created veNFT\"}},\"createLockFor(address[],uint256[],uint256[],bool[],address)\":{\"params\":{\"_duration\":\"Array of lock durations\",\"_stakeUnderlying\":\"Array of booleans indicating whether to stake underlying tokens\",\"_to\":\"Address to assign the lock to\",\"_tokenAddress\":\"Array of token addresses to lock\",\"_tokenAmount\":\"Array of token amounts to lock\"},\"returns\":{\"_0\":\"The ID of the newly created veNFT\"}},\"delegate(uint256,uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount of voting power to delegate.\",\"fromTokenId\":\"The ID of the veNFT from which voting power is delegated.\",\"lpToken\":\"The address of the LP token associated with the delegation.\",\"toTokenId\":\"The ID of the veNFT to which voting power is delegated.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"increaseAmount(address,uint256,uint256,bool)\":{\"params\":{\"_stakeUnderlying\":\"Whether to stake the underlying tokens\",\"_tokenAddress\":\"Address of the token to increase lock amount for\",\"_tokenAmount\":\"Amount of tokens to add to the lock\",\"_tokenId\":\"ID of the veNFT\"}},\"increaseUnlockTime(address,uint256,uint256)\":{\"params\":{\"_lockDuration\":\"New lock duration to extend to\",\"_tokenAddress\":\"Address of the token\",\"_tokenId\":\"ID of the veNFT\"}},\"initialize(address)\":{\"details\":\"This function is called only once during the contract deployment. It initializes the Ownable, ERC721, and ReentrancyGuard modules.\",\"params\":{\"_ap\":\"The AddressesProvider contract used for address management.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"lockAdditionalAsset(address,uint256,uint256,uint256,bool)\":{\"params\":{\"_duration\":\"Duration of the lock\",\"_stakeUnderlying\":\"Whether to stake the underlying tokens\",\"_tokenAddress\":\"Address of the new token to lock\",\"_tokenAmount\":\"Amount of tokens to lock\",\"_tokenId\":\"ID of the veNFT\"}},\"lockPermanent(address,uint256)\":{\"params\":{\"_tokenAddress\":\"The address of the token to lock.\",\"_tokenId\":\"The ID of the token to lock.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removeDelegatees(uint256,uint256[],address,uint256[])\":{\"params\":{\"amounts\":\"Array of amounts of voting power to remove from each delegatee\",\"fromTokenId\":\"ID of the veNFT from which delegatees are removed\",\"lpToken\":\"Address of the LP token associated with the delegation\",\"toTokenIds\":\"Array of veNFT IDs that are delegatees to be removed\"}},\"removeDelegators(uint256[],uint256,address,uint256[])\":{\"params\":{\"amounts\":\"Array of amounts of voting power to remove from each delegator\",\"fromTokenIds\":\"Array of veNFT IDs that are delegators to be removed\",\"lpToken\":\"Address of the LP token associated with the delegation\",\"toTokenId\":\"ID of the veNFT from which delegators are removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setExtensions(address,address)\":{\"details\":\"This function can only be called by authorized entities.\",\"params\":{\"_veIONFirstExtension\":\"The address of the first extension contract.\",\"_veIONSecondExtension\":\"The address of the second extension contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unlockPermanent(address,uint256)\":{\"params\":{\"_tokenAddress\":\"The address of the token to unlock.\",\"_tokenId\":\"The ID of the token to unlock.\"}},\"voting(uint256,bool)\":{\"params\":{\"_tokenId\":\"ID of the veNFT\",\"_voting\":\"Voting status\"}}},\"title\":\"veION Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PRECISION()\":{\"notice\":\"Precision used for calculations, set to 1e18.\"},\"ap()\":{\"notice\":\"The AddressesProvider contract used for address management.\"},\"createLock(address[],uint256[],uint256[],bool[])\":{\"notice\":\"Creates a new lock for multiple tokens\"},\"createLockFor(address[],uint256[],uint256[],bool[],address)\":{\"notice\":\"Creates a new lock for multiple tokens and assigns it to a specified address\"},\"delegate(uint256,uint256,address,uint256)\":{\"notice\":\"Delegates voting power from one veNFT to another.\"},\"increaseAmount(address,uint256,uint256,bool)\":{\"notice\":\"Increases the amount of tokens locked for a specific veNFT\"},\"increaseUnlockTime(address,uint256,uint256)\":{\"notice\":\"Increases the lock duration for a specific token in a veNFT\"},\"initialize(address)\":{\"notice\":\"Initializes the veION contract with the given AddressesProvider.\"},\"lockAdditionalAsset(address,uint256,uint256,uint256,bool)\":{\"notice\":\"Locks additional asset type for an existing veNFT\"},\"lockPermanent(address,uint256)\":{\"notice\":\"Locks a token permanently.\"},\"removeDelegatees(uint256,uint256[],address,uint256[])\":{\"notice\":\"Removes delegatees from a specific veNFT\"},\"removeDelegators(uint256[],uint256,address,uint256[])\":{\"notice\":\"Removes delegators from a specific veNFT\"},\"s_aeroVoterBoost()\":{\"notice\":\"The boost amount for AeroVoter.\"},\"s_aeroVoting()\":{\"notice\":\"Address of the AeroVoting contract.\"},\"s_ionicPool()\":{\"notice\":\"Address of the Ionic Pool.\"},\"s_limitedBoost()\":{\"notice\":\"The amount of limited boost available.\"},\"s_limitedBoostActive()\":{\"notice\":\"Indicates whether the limited boost is active.\"},\"s_maxEarlyWithdrawFee()\":{\"notice\":\"The maximum fee for early withdrawal.\"},\"s_minimumLockDuration()\":{\"notice\":\"The minimum duration for locking.\"},\"s_tokenId()\":{\"notice\":\"The current token ID counter.\"},\"s_veAERO()\":{\"notice\":\"Address of the veAERO contract.\"},\"s_voter()\":{\"notice\":\"Address of the voter contract.\"},\"setExtensions(address,address)\":{\"notice\":\"Sets the implementation addresses for the veION contract extensions.\"},\"unlockPermanent(address,uint256)\":{\"notice\":\"Unlocks a permanently locked token.\"},\"veIONFirstExtension()\":{\"notice\":\"The address of the logic contract for the veION first extension.\"},\"veIONSecondExtension()\":{\"notice\":\"The address of the logic contract for the veION second extension.\"},\"voting(uint256,bool)\":{\"notice\":\"Updates voting status for a veNFT\"}},\"notice\":\"This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/veION.sol\":\"veION\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available all functions\\r\\n * from parent (Ownable).\\r\\n */\\r\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\r\\n    function __Ownable2Step_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending owner.\\r\\n     */\\r\\n    function pendingOwner() public view virtual returns (address) {\\r\\n        return _pendingOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\r\\n        _pendingOwner = newOwner;\\r\\n        emit OwnershipTransferStarted(owner(), newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual override {\\r\\n        delete _pendingOwner;\\r\\n        super._transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The new owner accepts the ownership transfer.\\r\\n     */\\r\\n    function acceptOwnership() external {\\r\\n        address sender = _msgSender();\\r\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\r\\n        _transferOwnership(sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xc02ae28ae149c0475b5b98088ecc53b1b6310d906506c5522f598f02d88f9131\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal onlyInitializing {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xcf4a2c2c1a8b1570ee9a7059c218de1efbc9050239b1111dcfc24081391d11b7\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized < type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4603e2f1403e437820665af135e9675c80e81aa005e360318b8e640ca2624658\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xd714b70818f7513fc0c34e4248742ac27f0cda15c44621de90872a2f1848c036\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721Upgradeable.sol\\\";\\r\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\r\\n    using AddressUpgradeable for address;\\r\\n    using StringsUpgradeable for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        __ERC721_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\r\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _ownerOf(tokenId);\\r\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\r\\n     */\\r\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\r\\n        return _owners[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _ownerOf(tokenId) != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        unchecked {\\r\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\r\\n            // Given that tokens are minted one by one, it is impossible in practice that\\r\\n            // this ever happens. Might change if we allow batch minting.\\r\\n            // The ERC fails to describe this case.\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\r\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\r\\n            // out than the owner initially received through minting and transferring in.\\r\\n            _balances[owner] -= 1;\\r\\n        }\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n\\r\\n        _afterTokenTransfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\r\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\r\\n            // `from`'s balance is the number of token held, which is at least one before the current\\r\\n            // transfer.\\r\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\r\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\r\\n            _balances[from] -= 1;\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(\\r\\n        address owner,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) internal virtual {\\r\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\r\\n     */\\r\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\r\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\r\\n     * See {_beforeConsecutiveTokenTransfer}.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\r\\n     * See {_afterConsecutiveTokenTransfer}.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\r\\n     * {ERC721Consecutive}.\\r\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\r\\n     */\\r\\n    function _beforeConsecutiveTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256, /*first*/\\r\\n        uint96 size\\r\\n    ) internal virtual {\\r\\n        if (from != address(0)) {\\r\\n            _balances[from] -= size;\\r\\n        }\\r\\n        if (to != address(0)) {\\r\\n            _balances[to] += size;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\r\\n     * {ERC721Consecutive}.\\r\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\r\\n     */\\r\\n    function _afterConsecutiveTokenTransfer(\\r\\n        address, /*from*/\\r\\n        address, /*to*/\\r\\n        uint256, /*first*/\\r\\n        uint96 /*size*/\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[44] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x8fa55fe262246cd5c68823bda0e2f30503417458aed446c65bcefa347e6ed423\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721ReceiverUpgradeable {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xcad00cdc85bd1718e26dc693cf50fefe6c3bd2ca51c95f3ef13cc6d04be4928b\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\r\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\r\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6adefd9cd927dc57cd2da9550681d51dad15a91d4d254075588cf3e9503e6c99\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC721Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x8ba9a190699be6b3e5f965fe650bf0ac8bd01ed4d7b394411c6e50b98dcaaa90\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c08bea8e975fa8e5e635a7753a9442b3d58f501c3a9951df8eb45581054228d\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./math/MathUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary StringsUpgradeable {\\r\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a607b1dc1f0ff724ad56ff94293ec5c374e27f35f26ae5e29210edaf046b4c6\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\r\\n    function __ERC165_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __ERC165_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x33686001615c14053a34d85fa60f5495c6461d457abfa93276feaf1ad4582039\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3a86fd8399ff01763901b64ed4603d979787747d7b83f70d6d3c7d4f6b79214\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary MathUpgradeable {\\r\\n    enum Rounding {\\r\\n        Down, // Toward negative infinity\\r\\n        Up, // Toward infinity\\r\\n        Zero // Toward zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\r\\n     * with further edits by Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod0 := mul(x, y)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n            // See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n            uint256 twos = denominator & (~denominator + 1);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n            // in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10**64) {\\r\\n                value /= 10**64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10**32) {\\r\\n                value /= 10**32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10**16) {\\r\\n                value /= 10**16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10**8) {\\r\\n                value /= 10**8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10**4) {\\r\\n                value /= 10**4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10**2) {\\r\\n                value /= 10**2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10**1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x75646aade069b63a3ebf8535f49dce3ac575d1e367f031cf1f7b3d8a748e0756\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x86bd9e04dbee51fb3a9370279a0177e9da874a858dfb2c25a405171aa5ae2030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c3c43ba6e81d44ca93d32e97e0d5b9d64eb7346b7a3921e6ce9648f4b70f815\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7ed49cc8c6b941c4b0f07556eef72cedbce73d60c79d54cc82f6bbe7e061fb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n *\\r\\n * [WARNING]\\r\\n * ====\\r\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\r\\n * unusable.\\r\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\r\\n *\\r\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\r\\n * array of EnumerableSet.\\r\\n * ====\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastValue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastValue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        bytes32[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d88c669dab804dbc1aa5d683fd9ef598c9a820df114785571d1e2cbe54a7fc9\",\"license\":\"MIT\"},\"contracts/veION/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IVoter\\r\\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\\r\\n */\\r\\ninterface IVoter {\\r\\n  /// @notice Error thrown when a user has already voted or deposited.\\r\\n  error AlreadyVotedOrDeposited();\\r\\n\\r\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\r\\n  error DistributeWindow();\\r\\n\\r\\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\\r\\n  error RewardAccumulatorDoesNotExist(address _pool);\\r\\n\\r\\n  /// @notice Error thrown when a reward accumulator is not alive.\\r\\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\\r\\n\\r\\n  /// @notice Error thrown when a market already exists.\\r\\n  error MarketAlreadyExists();\\r\\n\\r\\n  /// @notice Error thrown when the maximum voting number is too low.\\r\\n  error MaximumVotingNumberTooLow();\\r\\n\\r\\n  /// @notice Error thrown when array lengths do not match.\\r\\n  error MismatchedArrayLengths();\\r\\n\\r\\n  /// @notice Error thrown when there are non-zero votes.\\r\\n  error NonZeroVotes();\\r\\n\\r\\n  /// @notice Error thrown when the caller is not the owner.\\r\\n  error NotOwner();\\r\\n\\r\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\r\\n  error NotDistributeWindow();\\r\\n\\r\\n  /// @notice Error thrown when the caller is not the governor.\\r\\n  error NotGovernor();\\r\\n\\r\\n  /// @notice Error thrown when an NFT is not whitelisted.\\r\\n  error NotWhitelistedNFT();\\r\\n\\r\\n  /// @notice Error thrown when the same value is provided.\\r\\n  error SameValue();\\r\\n\\r\\n  /// @notice Error thrown when there are too many pools.\\r\\n  error TooManyPools();\\r\\n\\r\\n  /// @notice Error thrown when array lengths are unequal.\\r\\n  error UnequalLengths();\\r\\n\\r\\n  /// @notice Error thrown when an address is zero.\\r\\n  error ZeroAddress();\\r\\n\\r\\n  /// @notice Error thrown when the tokens array is empty.\\r\\n  error TokensArrayEmpty();\\r\\n\\r\\n  /// @notice Error thrown when the weight is zero.\\r\\n  error ZeroWeight();\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store vote details.\\r\\n   * @param marketVotes Array of market addresses voted for.\\r\\n   * @param marketVoteSides Array of market sides voted for.\\r\\n   * @param votes Array of vote weights.\\r\\n   * @param usedWeight Total weight used in voting.\\r\\n   */\\r\\n  struct VoteDetails {\\r\\n    address[] marketVotes;\\r\\n    MarketSide[] marketVoteSides;\\r\\n    uint256[] votes;\\r\\n    uint256 usedWeight;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store market information.\\r\\n   * @param marketAddress Address of the market.\\r\\n   * @param side Side of the market (Supply or Borrow).\\r\\n   */\\r\\n  struct Market {\\r\\n    address marketAddress;\\r\\n    MarketSide side;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store variables used in voting.\\r\\n   * @param totalWeight Total weight available for voting.\\r\\n   * @param usedWeight Weight used in voting.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param rewardAccumulator Address of the reward accumulator.\\r\\n   * @param marketWeight Weight of the market.\\r\\n   * @param bribes Address of the bribes.\\r\\n   */\\r\\n  struct VoteVars {\\r\\n    uint256 totalWeight;\\r\\n    uint256 usedWeight;\\r\\n    address market;\\r\\n    MarketSide marketSide;\\r\\n    address rewardAccumulator;\\r\\n    uint256 marketWeight;\\r\\n    address bribes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store local variables used in voting.\\r\\n   * @param sender Address of the sender.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   * @param votingLPs Array of voting LP addresses.\\r\\n   * @param votingLPBalances Array of voting LP balances.\\r\\n   * @param boosts Array of boosts.\\r\\n   */\\r\\n  struct VoteLocalVars {\\r\\n    address sender;\\r\\n    uint256 timestamp;\\r\\n    address[] votingLPs;\\r\\n    uint256[] votingLPBalances;\\r\\n    uint256[] boosts;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum to represent the side of a market.\\r\\n   */\\r\\n  enum MarketSide {\\r\\n    Supply,\\r\\n    Borrow\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a vote is cast.\\r\\n   * @param voter Address of the voter.\\r\\n   * @param pool Address of the pool.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param weight Weight of the vote.\\r\\n   * @param totalWeight Total weight of the vote.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   */\\r\\n  event Voted(\\r\\n    address indexed voter,\\r\\n    address indexed pool,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 weight,\\r\\n    uint256 totalWeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a vote is abstained.\\r\\n   * @param voter Address of the voter.\\r\\n   * @param pool Address of the pool.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param weight Weight of the vote.\\r\\n   * @param totalWeight Total weight of the vote.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   */\\r\\n  event Abstained(\\r\\n    address indexed voter,\\r\\n    address indexed pool,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 weight,\\r\\n    uint256 totalWeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a reward is notified.\\r\\n   * @param sender Address of the sender.\\r\\n   * @param reward Address of the reward.\\r\\n   * @param amount Amount of the reward.\\r\\n   */\\r\\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a token is whitelisted.\\r\\n   * @param whitelister Address of the whitelister.\\r\\n   * @param token Address of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when an NFT is whitelisted.\\r\\n   * @param whitelister Address of the whitelister.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\\r\\n\\r\\n  event LpTokensSet(address[] indexed lpTokens);\\r\\n  event MpoSet(address indexed mpo);\\r\\n  event GovernorSet(address indexed governor);\\r\\n  event MarketsAdded(Market[] markets);\\r\\n  event MarketRewardAccumulatorsSet(\\r\\n    address[] indexed markets,\\r\\n    MarketSide[] indexed marketSides,\\r\\n    address[] indexed rewardAccumulators\\r\\n  );\\r\\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\\r\\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\\r\\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\\r\\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the weight of a market.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The weight of the market.\\r\\n   */\\r\\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the votes for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The votes for the token.\\r\\n   */\\r\\n  function votes(\\r\\n    uint256 tokenId,\\r\\n    address market,\\r\\n    MarketSide marketSide,\\r\\n    address lpToken\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the used weights for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The used weights for the token.\\r\\n   */\\r\\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the last voted timestamp for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @return The last voted timestamp for the token.\\r\\n   */\\r\\n  function lastVoted(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Check if a token is whitelisted.\\r\\n   * @param token Address of the token.\\r\\n   * @return True if the token is whitelisted, false otherwise.\\r\\n   */\\r\\n  function isWhitelistedToken(address token) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Check if an NFT is whitelisted.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @return True if the NFT is whitelisted, false otherwise.\\r\\n   */\\r\\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the ve contract.\\r\\n   * @return The address of the ve contract.\\r\\n   */\\r\\n  function ve() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the governor.\\r\\n   * @return The address of the governor.\\r\\n   */\\r\\n  function governor() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Update voting balances in voting rewards contracts.\\r\\n   * @param _tokenId ID of veNFT whose balance you wish to update.\\r\\n   */\\r\\n  function poke(uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\\r\\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\\r\\n   *      Can only vote for gauges that have not been killed.\\r\\n   *      Throws if length of _poolVote and _weights do not match.\\r\\n   * @param _tokenId ID of veNFT you are voting with.\\r\\n   * @param _poolVote Array of pools you are voting for.\\r\\n   * @param _marketVoteSide Array of market vote sides you are voting for.\\r\\n   * @param _weights Weights of pools.\\r\\n   */\\r\\n  function vote(\\r\\n    uint256 _tokenId,\\r\\n    address[] calldata _poolVote,\\r\\n    MarketSide[] calldata _marketVoteSide,\\r\\n    uint256[] calldata _weights\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\\r\\n   * @dev Cannot reset in the same epoch that you voted in.\\r\\n   *      Can vote or deposit into a managed NFT again after reset.\\r\\n   * @param _tokenId ID of veNFT that you are resetting.\\r\\n   */\\r\\n  function reset(uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Distributes rewards to eligible markets.\\r\\n   */\\r\\n  function distributeRewards() external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claim bribes for a given NFT.\\r\\n   * @dev Utility to help batch bribe claims.\\r\\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\\r\\n   * @param _tokens Array of tokens that are used as bribes.\\r\\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\\r\\n   */\\r\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\\r\\n   * @dev Throws if not called by governor.\\r\\n   * @param _token Address of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  function whitelistToken(address _token, bool _bool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\r\\n   * @dev Throws if not called by governor.\\r\\n   *      Throws if already whitelisted.\\r\\n   * @param _tokenId ID of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the LP tokens.\\r\\n   * @param _lpTokens Array of LP token addresses.\\r\\n   */\\r\\n  function setLpTokens(address[] memory _lpTokens) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the Master Price Oracle (MPO) address.\\r\\n   * @param _mpo Address of the Master Price Oracle.\\r\\n   */\\r\\n  function setMpo(address _mpo) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set a new governor.\\r\\n   * @param _governor Address of the new governor.\\r\\n   */\\r\\n  function setGovernor(address _governor) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Add new markets.\\r\\n   * @param _markets Array of Market structs to be added.\\r\\n   */\\r\\n  function addMarkets(Market[] calldata _markets) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set reward accumulators for markets.\\r\\n   * @param _markets Array of market addresses.\\r\\n   * @param _marketSides Array of market sides.\\r\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\r\\n   */\\r\\n  function setMarketRewardAccumulators(\\r\\n    address[] calldata _markets,\\r\\n    MarketSide[] calldata _marketSides,\\r\\n    address[] calldata _rewardAccumulators\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set bribes for reward accumulators.\\r\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\r\\n   * @param _bribes Array of bribe addresses.\\r\\n   */\\r\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the maximum number of votes.\\r\\n   * @param _maxVotingNum Maximum number of votes allowed.\\r\\n   */\\r\\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggle the alive status of a reward accumulator.\\r\\n   * @param _market Address of the market.\\r\\n   * @param _marketSide Side of the market.\\r\\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\\r\\n   */\\r\\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Get the start of the epoch for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the epoch start for.\\r\\n   * @return The start of the epoch.\\r\\n   */\\r\\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the next epoch for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the next epoch for.\\r\\n   * @return The next epoch.\\r\\n   */\\r\\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the start of the voting period for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the voting start for.\\r\\n   * @return The start of the voting period.\\r\\n   */\\r\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the end of the voting period for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the voting end for.\\r\\n   * @return The end of the voting period.\\r\\n   */\\r\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the number of markets.\\r\\n   * @return The number of markets.\\r\\n   */\\r\\n  function marketsLength() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get all LP reward tokens.\\r\\n   * @return An array of addresses representing all LP reward tokens.\\r\\n   */\\r\\n  function getAllLpRewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Get vote details for a specific token ID and LP asset.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpAsset The address of the LP asset.\\r\\n   * @return A struct containing vote details.\\r\\n   */\\r\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xdc61ea567a04ef73efb279313e914aea054d643cf9e665706676d99b1fe8e448\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\r\\n\\r\\n/// @title IveION Interface\\r\\n/// @notice Interface for veION contract\\r\\ninterface IveIONCore {\\r\\n  /**\\r\\n   * @notice Creates a new lock for multiple tokens and assigns it to a specified address\\r\\n   * @param _tokenAddress Array of token addresses to lock\\r\\n   * @param _tokenAmount Array of token amounts to lock\\r\\n   * @param _duration Array of lock durations\\r\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\r\\n   * @param _to Address to assign the lock to\\r\\n   * @return The ID of the newly created veNFT\\r\\n   */\\r\\n  function createLockFor(\\r\\n    address[] memory _tokenAddress,\\r\\n    uint256[] memory _tokenAmount,\\r\\n    uint256[] memory _duration,\\r\\n    bool[] memory _stakeUnderlying,\\r\\n    address _to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Creates a new lock for multiple tokens\\r\\n   * @param _tokenAddress Array of token addresses to lock\\r\\n   * @param _tokenAmount Array of token amounts to lock\\r\\n   * @param _duration Array of lock durations\\r\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\r\\n   * @return The ID of the newly created veNFT\\r\\n   */\\r\\n  function createLock(\\r\\n    address[] calldata _tokenAddress,\\r\\n    uint256[] calldata _tokenAmount,\\r\\n    uint256[] calldata _duration,\\r\\n    bool[] memory _stakeUnderlying\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Increases the amount of tokens locked for a specific veNFT\\r\\n   * @param _tokenAddress Address of the token to increase lock amount for\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _tokenAmount Amount of tokens to add to the lock\\r\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\r\\n   */\\r\\n  function increaseAmount(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _stakeUnderlying\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Locks additional asset type for an existing veNFT\\r\\n   * @param _tokenAddress Address of the new token to lock\\r\\n   * @param _tokenAmount Amount of tokens to lock\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _duration Duration of the lock\\r\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\r\\n   */\\r\\n  function lockAdditionalAsset(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenAmount,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _duration,\\r\\n    bool _stakeUnderlying\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Increases the lock duration for a specific token in a veNFT\\r\\n   * @param _tokenAddress Address of the token\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _lockDuration New lock duration to extend to\\r\\n   */\\r\\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Delegates voting power from one veNFT to another.\\r\\n   * @param fromTokenId The ID of the veNFT from which voting power is delegated.\\r\\n   * @param toTokenId The ID of the veNFT to which voting power is delegated.\\r\\n   * @param lpToken The address of the LP token associated with the delegation.\\r\\n   * @param amount The amount of voting power to delegate.\\r\\n   */\\r\\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes delegatees from a specific veNFT\\r\\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\\r\\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\\r\\n   * @param lpToken Address of the LP token associated with the delegation\\r\\n   * @param amounts Array of amounts of voting power to remove from each delegatee\\r\\n   */\\r\\n  function removeDelegatees(\\r\\n    uint256 fromTokenId,\\r\\n    uint256[] memory toTokenIds,\\r\\n    address lpToken,\\r\\n    uint256[] memory amounts\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes delegators from a specific veNFT\\r\\n   * @param fromTokenIds Array of veNFT IDs that are delegators to be removed\\r\\n   * @param toTokenId ID of the veNFT from which delegators are removed\\r\\n   * @param lpToken Address of the LP token associated with the delegation\\r\\n   * @param amounts Array of amounts of voting power to remove from each delegator\\r\\n   */\\r\\n  function removeDelegators(\\r\\n    uint256[] memory fromTokenIds,\\r\\n    uint256 toTokenId,\\r\\n    address lpToken,\\r\\n    uint256[] memory amounts\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Locks a token permanently.\\r\\n   * @param _tokenAddress The address of the token to lock.\\r\\n   * @param _tokenId The ID of the token to lock.\\r\\n   */\\r\\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Unlocks a permanently locked token.\\r\\n   * @param _tokenAddress The address of the token to unlock.\\r\\n   * @param _tokenId The ID of the token to unlock.\\r\\n   */\\r\\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates voting status for a veNFT\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _voting Voting status\\r\\n   */\\r\\n  function voting(uint256 _tokenId, bool _voting) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the implementation addresses for the veION contract extensions.\\r\\n   * @dev This function can only be called by authorized entities.\\r\\n   * @param _veIONFirstExtension The address of the first extension contract.\\r\\n   * @param _veIONSecondExtension The address of the second extension contract.\\r\\n   */\\r\\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external;\\r\\n}\\r\\n\\r\\n/// @title IAeroVotingEscrow Interface\\r\\n/// @notice Interface for Aero Voting Escrow contract\\r\\ninterface IAeroVotingEscrow {\\r\\n  /**\\r\\n   * @notice Returns the balance of the specified owner.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @return The balance of the owner.\\r\\n   */\\r\\n  function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the token ID at a specific index for a given owner.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @param _index The index of the token ID in the owner's list.\\r\\n   * @return The token ID at the specified index.\\r\\n   */\\r\\n  function ownerToNFTokenIdList(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/// @title IAeroVoter Interface\\r\\n/// @notice Interface for Aero Voter contract\\r\\ninterface IAeroVoter {\\r\\n  /**\\r\\n   * @notice Returns the list of pools voted for by a specific token ID.\\r\\n   * @param tokenId The ID of the token.\\r\\n   * @return An array of addresses representing the pools voted for.\\r\\n   */\\r\\n  function poolVote(uint256 tokenId) external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the weight of a specific pool.\\r\\n   * @param pool The address of the pool.\\r\\n   * @return The weight of the pool.\\r\\n   */\\r\\n  function weights(address pool) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the number of votes a specific token ID has for a given pool.\\r\\n   * @param tokenId The ID of the token.\\r\\n   * @param pool The address of the pool.\\r\\n   * @return The number of votes for the pool.\\r\\n   */\\r\\n  function votes(uint256 tokenId, address pool) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n  function getAddress(string calldata id) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IMasterPriceOracle {\\r\\n  function price(address underlying) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x0804ccb0d3f9e8a9858447ac2677b62843fd62f1053df0331689388db19444ea\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONStructsEnumsErrorsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IveIONStructsEnumsErrorsEvents {\\r\\n  /**\\r\\n   * @notice Structure representing a locked balance\\r\\n   * @param tokenAddress Address of the token\\r\\n   * @param amount Amount of tokens locked\\r\\n   * @param delegateAmount Amount of tokens delegated\\r\\n   * @param start Start time of the lock\\r\\n   * @param end End time of the lock\\r\\n   * @param isPermanent Indicates if the lock is permanent\\r\\n   * @param boost Boost value for the lock\\r\\n   */\\r\\n  struct LockedBalance {\\r\\n    address tokenAddress;\\r\\n    uint256 amount;\\r\\n    uint256 delegateAmount;\\r\\n    uint256 start;\\r\\n    uint256 end;\\r\\n    bool isPermanent;\\r\\n    uint256 boost;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a delegation\\r\\n   * @param amount Amount of tokens delegated\\r\\n   * @param delegatee ID of the delegatee\\r\\n   */\\r\\n  struct Delegation {\\r\\n    uint256 amount;\\r\\n    uint256 delegatee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a user point\\r\\n   * @param bias Bias value\\r\\n   * @param slope Slope value, representing -dweight / dt\\r\\n   * @param ts Timestamp of the point\\r\\n   * @param blk Block number of the point\\r\\n   * @param permanent Permanent value\\r\\n   * @param permanentDelegate Permanent delegate value\\r\\n   */\\r\\n  struct UserPoint {\\r\\n    uint256 bias;\\r\\n    uint256 slope;\\r\\n    uint256 ts;\\r\\n    uint256 blk;\\r\\n    uint256 permanent;\\r\\n    uint256 permanentDelegate;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a global point\\r\\n   * @param bias Bias value\\r\\n   * @param slope Slope value, representing -dweight / dt\\r\\n   * @param ts Timestamp of the point\\r\\n   * @param blk Block number of the point\\r\\n   * @param permanentLockBalance Permanent lock balance\\r\\n   */\\r\\n  struct GlobalPoint {\\r\\n    int128 bias;\\r\\n    int128 slope;\\r\\n    uint256 ts;\\r\\n    uint256 blk;\\r\\n    uint256 permanentLockBalance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a checkpoint\\r\\n   * @param fromTimestamp Timestamp from which the checkpoint is valid\\r\\n   * @param owner Address of the owner\\r\\n   * @param delegatedBalance Balance that has been delegated\\r\\n   * @param delegatee ID of the delegatee\\r\\n   */\\r\\n  struct Checkpoint {\\r\\n    uint256 fromTimestamp;\\r\\n    address owner;\\r\\n    uint256 delegatedBalance;\\r\\n    uint256 delegatee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum representing deposit types\\r\\n   */\\r\\n  enum DepositType {\\r\\n    DEPOSIT_FOR_TYPE,\\r\\n    CREATE_LOCK_TYPE,\\r\\n    INCREASE_LOCK_AMOUNT,\\r\\n    INCREASE_UNLOCK_TIME,\\r\\n    LOCK_ADDITIONAL\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum representing LP token types\\r\\n   */\\r\\n  enum LpTokenType {\\r\\n    Mode_Velodrome_5050_ION_MODE,\\r\\n    Mode_Balancer_8020_ION_ETH,\\r\\n    Base_Aerodrome_5050_ION_wstETH,\\r\\n    Base_Balancer_8020_ION_ETH,\\r\\n    Optimism_Velodrome_5050_ION_OP,\\r\\n    Optimism_Balancer_8020_ION_ETH\\r\\n  }\\r\\n\\r\\n  error LockDurationNotInFuture();\\r\\n  error ZeroAmount();\\r\\n  error LockDurationTooLong();\\r\\n  error TokenNotWhitelisted();\\r\\n  error NotOwner();\\r\\n  error AlreadyVoted();\\r\\n  error PermanentLock();\\r\\n  error NoLockFound();\\r\\n  error LockExpired();\\r\\n  error SameNFT();\\r\\n  error SplitNotAllowed();\\r\\n  error AmountTooBig();\\r\\n  error NotPermanentLock();\\r\\n  error TokenHasDelegatees();\\r\\n  error TokenHasDelegators();\\r\\n  error NotVoter();\\r\\n  error MinimumNotMet();\\r\\n  error ArrayMismatch();\\r\\n  error LockDurationTooShort();\\r\\n  error DuplicateAsset();\\r\\n  error SplitTooSmall();\\r\\n  error NotEnoughRemainingAfterSplit();\\r\\n  error NoDelegationBetweenTokens(uint256 _tokenId1, uint256 _tokenId2);\\r\\n  error NoUnderlyingStake();\\r\\n  error NotAcceptingDelegators();\\r\\n  error BoostAmountMustBeGreaterThanZero();\\r\\n  error InvalidAddress();\\r\\n  error MinimumAmountMustBeGreaterThanZero();\\r\\n  error MinimumLockDurationMustBeGreaterThanZero();\\r\\n  error AeroBoostAmountMustBeGreaterThanZero();\\r\\n  error MaxEarlyWithdrawFeeMustBeGreaterThanZero();\\r\\n  error InvalidTokenAddress();\\r\\n  error InvalidStrategyAddress();\\r\\n  error InvalidVeAEROAddress();\\r\\n\\r\\n  event Deposit(\\r\\n    address indexed provider,\\r\\n    uint256 indexed tokenId,\\r\\n    DepositType indexed depositType,\\r\\n    uint256 value,\\r\\n    uint256 locktime,\\r\\n    uint256 ts\\r\\n  );\\r\\n  event Withdraw(address indexed provider, uint256 indexed tokenId, uint256 value, uint256 ts);\\r\\n  event Supply(uint256 prevSupply, uint256 supply);\\r\\n  event Delegated(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\r\\n  event DelegationRemoved(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\r\\n  event ProtocolFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\r\\n  event DistributedFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\r\\n  event SplitToggle(address indexed account, bool isAllowed);\\r\\n  event LimitedBoostToggled(bool isBoosted);\\r\\n  event LimitedTimeBoostSet(uint256 boostAmount);\\r\\n  event VoterSet(address indexed newVoter);\\r\\n  event AeroVotingSet(address indexed newAeroVoting);\\r\\n  event AeroVoterBoostSet(uint256 newAeroVoterBoost);\\r\\n  event TokensWhitelisted(address[] token, bool[] isWhitelisted);\\r\\n  event LpTokenTypeSet(address indexed token, LpTokenType lpTokenType);\\r\\n  event VeAEROSet(address indexed veAERO);\\r\\n  event StakeStrategySet(LpTokenType indexed lpTokenType, address indexed strategy);\\r\\n  event MinimumLockAmountSet(address indexed tokenAddress, uint256 minimumAmount);\\r\\n  event MinimumLockDurationSet(uint256 minimumDuration);\\r\\n  event IonicPoolSet(address indexed newIonicPool);\\r\\n  event SplitCompleted(\\r\\n    uint256 indexed fromTokenId,\\r\\n    uint256 indexed tokenId1,\\r\\n    uint256 indexed tokenId2,\\r\\n    uint256 splitAmount,\\r\\n    address tokenAddress\\r\\n  );\\r\\n  event MergeCompleted(\\r\\n    uint256 indexed fromTokenId,\\r\\n    uint256 indexed toTokenId,\\r\\n    address[] assetsLocked,\\r\\n    uint256 lengthOfAssets\\r\\n  );\\r\\n  event EmissionsClaimed(address indexed claimant, address indexed tokenAddress);\\r\\n  event MaxEarlyWithdrawFeeSet(uint256 maxEarlyWithdrawFee);\\r\\n  event PermanentLockCreated(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\r\\n  event PermanentLockRemoved(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\r\\n  event Voted(uint256 _tokenId, bool _voting);\\r\\n  event DelegatorsBlocked(uint256 indexed _tokenId, address indexed _lpToken, bool _blocked);\\r\\n  event Initialized(address indexed addressesProvider);\\r\\n  event ExtensionsSet(address indexed _firstExtension, address indexed _secondExtension);\\r\\n}\\r\\n\",\"keccak256\":\"0xf695c1f186cd94a5f131a6c1a1aa26f549e1ae483749be91146493fe81df80cf\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/IStakeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IStakeStrategy\\r\\n * @notice Interface for the VeloIonModeStakingModeReward contract.\\r\\n */\\r\\ninterface IStakeStrategy {\\r\\n  /// @notice Emitted when the contract is initialized\\r\\n  event Initialized(\\r\\n    address indexed escrow,\\r\\n    address indexed stakingToken,\\r\\n    address indexed stakingContract,\\r\\n    address stakingWalletImplementation\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when tokens are staked\\r\\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when rewards are claimed\\r\\n  event Claimed(address indexed from, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when tokens are withdrawn\\r\\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when staking wallet is transferred\\r\\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when escrow is set\\r\\n  event EscrowSet(address indexed newEscrow);\\r\\n\\r\\n  /// @notice Emitted when staking token is set\\r\\n  event StakingTokenSet(address indexed newStakingToken);\\r\\n\\r\\n  /// @notice Emitted when staking contract is set\\r\\n  event StakingContractSet(address indexed newStakingContract);\\r\\n\\r\\n  /// @notice Emitted when upgradeable beacon is set\\r\\n  event UpgradeableBeaconSet(address indexed newBeacon);\\r\\n\\r\\n  /**\\r\\n   * @notice Stakes a specified amount of tokens from a given address.\\r\\n   * @param _from The address from which tokens will be staked.\\r\\n   * @param _amount The amount of tokens to stake.\\r\\n   * @param _data Additional data that might be needed for staking.\\r\\n   */\\r\\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claims rewards for a given address.\\r\\n   * @param _from The address for which to claim rewards.\\r\\n   */\\r\\n  function claim(address _from) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws a specified amount of tokens for a given address.\\r\\n   * @param _owner The address from which tokens will be withdrawn.\\r\\n   * @param _amount The amount of tokens to withdraw.\\r\\n   */\\r\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the current reward rate for the staking strategy.\\r\\n   * @return The reward rate as a uint256.\\r\\n   */\\r\\n  function rewardRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the period finish time for the staking strategy.\\r\\n   * @return The period finish time as a uint256.\\r\\n   */\\r\\n  function periodFinish() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the balance of a specific address.\\r\\n   * @param account The address to query the balance of.\\r\\n   * @return The balance as a uint256.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the total supply of staked tokens.\\r\\n   * @return The total supply as a uint256.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the reward token for the staking strategy.\\r\\n   * @return The address of the reward token.\\r\\n   */\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking contract.\\r\\n   * @return The address of the staking contract.\\r\\n   */\\r\\n  function stakingContract() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking token.\\r\\n   * @return The address of the staking token.\\r\\n   */\\r\\n  function stakingToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the staking wallet address for a specific user.\\r\\n   * @param user The address of the user.\\r\\n   * @return The address of the user's staking wallet.\\r\\n   */\\r\\n  function userStakingWallet(address user) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers the staking wallet from one user to another.\\r\\n   * @param from The current owner of the staking wallet.\\r\\n   * @param to The new owner of the staking wallet.\\r\\n   */\\r\\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the escrow address.\\r\\n   * @param _escrow The address of the new escrow.\\r\\n   */\\r\\n  function setEscrow(address _escrow) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking token address.\\r\\n   * @param _stakingToken The address of the new staking token.\\r\\n   */\\r\\n  function setStakingToken(address _stakingToken) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking contract address.\\r\\n   * @param _stakingContract The address of the new staking contract.\\r\\n   */\\r\\n  function setStakingContract(address _stakingContract) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the  beacon.\\r\\n   * @param _beacon The address of the new beacon contract.\\r\\n   */\\r\\n  function setUpgradeableBeacon(address _beacon) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x69d7a60ae3df2ead3b3afaa32ae9b6ea4df13ef65c7c375babe7be2e5457fc8b\",\"license\":\"UNLICENSED\"},\"contracts/veION/veION.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport { ERC721Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\r\\nimport { IveIONCore, IMasterPriceOracle, IAeroVotingEscrow, IAeroVoter } from \\\"./interfaces/IveIONCore.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { IVoter } from \\\"./interfaces/IVoter.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { veIONStorage } from \\\"./veIONStorage.sol\\\";\\r\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport { IAddressesProvider } from \\\"./interfaces/IveIONCore.sol\\\";\\r\\nimport { IStakeStrategy } from \\\"./stake/IStakeStrategy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title veION Contract\\r\\n * @notice This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\\r\\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\\r\\n */\\r\\ncontract veION is Ownable2StepUpgradeable, ERC721Upgradeable, ReentrancyGuardUpgradeable, veIONStorage, IveIONCore {\\r\\n  using EnumerableSet for EnumerableSet.UintSet;\\r\\n  using EnumerableSet for EnumerableSet.AddressSet;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  constructor() {\\r\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes the veION contract with the given AddressesProvider.\\r\\n   * @dev This function is called only once during the contract deployment.\\r\\n   * It initializes the Ownable, ERC721, and ReentrancyGuard modules.\\r\\n   * @param _ap The AddressesProvider contract used for address management.\\r\\n   */\\r\\n  function initialize(IAddressesProvider _ap) public initializer {\\r\\n    __Ownable2Step_init();\\r\\n    __ERC721_init(\\\"veION\\\", \\\"veION\\\");\\r\\n    __ReentrancyGuard_init();\\r\\n    ap = _ap;\\r\\n    emit Initialized(address(_ap));\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           External Functions                              \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function createLockFor(\\r\\n    address[] calldata _tokenAddress,\\r\\n    uint256[] calldata _tokenAmount,\\r\\n    uint256[] calldata _duration,\\r\\n    bool[] memory _stakeUnderlying,\\r\\n    address _to\\r\\n  ) external override nonReentrant returns (uint256) {\\r\\n    return _createLock(_tokenAddress, _tokenAmount, _duration, _stakeUnderlying, _to);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function createLock(\\r\\n    address[] calldata _tokenAddress,\\r\\n    uint256[] calldata _tokenAmount,\\r\\n    uint256[] calldata _duration,\\r\\n    bool[] memory _stakeUnderlying\\r\\n  ) external override nonReentrant returns (uint256) {\\r\\n    return _createLock(_tokenAddress, _tokenAmount, _duration, _stakeUnderlying, _msgSender());\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function increaseAmount(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _stakeUnderlying\\r\\n  ) external nonReentrant {\\r\\n    LpTokenType _lpType = s_lpType[_tokenAddress];\\r\\n    LockedBalance memory oldLocked = s_locked[_tokenId][_lpType];\\r\\n\\r\\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\r\\n    if (_tokenAmount == 0) revert ZeroAmount();\\r\\n    if (oldLocked.amount == 0) revert NoLockFound();\\r\\n    if (oldLocked.end <= block.timestamp && !oldLocked.isPermanent) revert LockExpired();\\r\\n\\r\\n    if (oldLocked.isPermanent) s_permanentLockBalance[_lpType] += _tokenAmount;\\r\\n\\r\\n    _depositFor(\\r\\n      _tokenAddress,\\r\\n      _tokenId,\\r\\n      _tokenAmount,\\r\\n      0,\\r\\n      _stakeUnderlying,\\r\\n      oldLocked,\\r\\n      DepositType.INCREASE_LOCK_AMOUNT,\\r\\n      _lpType,\\r\\n      _msgSender()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function lockAdditionalAsset(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenAmount,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _duration,\\r\\n    bool _stakeUnderlying\\r\\n  ) external nonReentrant {\\r\\n    LpTokenType lpType = s_lpType[_tokenAddress];\\r\\n    LockedBalance storage lockedBalance = s_locked[_tokenId][lpType];\\r\\n    uint256 unlockTime = ((block.timestamp + _duration) / _WEEK) * _WEEK;\\r\\n\\r\\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\r\\n    if (_tokenAmount == 0) revert ZeroAmount();\\r\\n    if (s_voted[_tokenId]) revert AlreadyVoted();\\r\\n    if (!s_assetsLocked[_tokenId].add(_tokenAddress)) revert DuplicateAsset();\\r\\n    if (_tokenAmount < s_minimumLockAmount[lpType]) revert MinimumNotMet();\\r\\n    if (unlockTime > block.timestamp + _MAXTIME) revert LockDurationTooLong();\\r\\n    if (_duration < s_minimumLockDuration) revert LockDurationTooShort();\\r\\n\\r\\n    if (lockedBalance.isPermanent) s_permanentLockBalance[lpType] += _tokenAmount;\\r\\n\\r\\n    _depositFor(\\r\\n      _tokenAddress,\\r\\n      _tokenId,\\r\\n      _tokenAmount,\\r\\n      unlockTime,\\r\\n      _stakeUnderlying,\\r\\n      lockedBalance,\\r\\n      DepositType.LOCK_ADDITIONAL,\\r\\n      lpType,\\r\\n      _msgSender()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external nonReentrant {\\r\\n    LpTokenType _lpType = s_lpType[_tokenAddress];\\r\\n    LockedBalance memory oldLocked = s_locked[_tokenId][_lpType];\\r\\n    uint256 unlockTime = ((block.timestamp + _lockDuration) / _WEEK) * _WEEK; // Locktime is rounded down to weeks\\r\\n\\r\\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\r\\n    if (oldLocked.isPermanent) revert PermanentLock();\\r\\n    if (oldLocked.end <= block.timestamp) revert LockExpired();\\r\\n    if (oldLocked.amount <= 0) revert NoLockFound();\\r\\n    if (unlockTime <= oldLocked.end) revert LockDurationNotInFuture();\\r\\n    if (unlockTime > block.timestamp + _MAXTIME) revert LockDurationTooLong();\\r\\n\\r\\n    _depositFor(\\r\\n      _tokenAddress,\\r\\n      _tokenId,\\r\\n      0,\\r\\n      unlockTime,\\r\\n      false,\\r\\n      oldLocked,\\r\\n      DepositType.INCREASE_UNLOCK_TIME,\\r\\n      _lpType,\\r\\n      _msgSender()\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external nonReentrant {\\r\\n    LpTokenType lpType = s_lpType[lpToken];\\r\\n    LockedBalance memory fromLocked = s_locked[fromTokenId][lpType];\\r\\n    LockedBalance memory toLocked = s_locked[toTokenId][lpType];\\r\\n\\r\\n    if (ownerOf(fromTokenId) != _msgSender()) revert NotOwner();\\r\\n    if (amount > fromLocked.amount) revert AmountTooBig();\\r\\n    if (!fromLocked.isPermanent) revert NotPermanentLock();\\r\\n    if (!toLocked.isPermanent) revert NotPermanentLock();\\r\\n    if (s_delegatorsBlocked[toTokenId][lpToken]) revert NotAcceptingDelegators();\\r\\n\\r\\n    fromLocked.amount -= amount;\\r\\n    toLocked.delegateAmount += amount;\\r\\n\\r\\n    if (s_delegations[fromTokenId][toTokenId][lpType] == 0) {\\r\\n      s_delegatees[fromTokenId][lpType].add(toTokenId);\\r\\n      s_delegators[toTokenId][lpType].add(fromTokenId);\\r\\n    }\\r\\n\\r\\n    s_delegations[fromTokenId][toTokenId][lpType] += amount;\\r\\n\\r\\n    s_locked[fromTokenId][lpType] = fromLocked;\\r\\n    s_locked[toTokenId][lpType] = toLocked;\\r\\n    _checkpoint(fromTokenId, s_locked[fromTokenId][lpType], lpType);\\r\\n    _checkpoint(toTokenId, s_locked[toTokenId][lpType], lpType);\\r\\n\\r\\n    if (s_voted[toTokenId]) IVoter(s_voter).poke(toTokenId);\\r\\n    if (s_voted[fromTokenId]) IVoter(s_voter).poke(fromTokenId);\\r\\n\\r\\n    emit Delegated(fromTokenId, toTokenId, lpToken, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to remove a delegation between two veNFTs.\\r\\n   * @param fromTokenId ID of the veNFT from which delegation is being removed.\\r\\n   * @param toTokenId ID of the veNFT to which delegation is being removed.\\r\\n   * @param lpToken Address of the LP token associated with the delegation.\\r\\n   * @param amount Amount of delegation to remove.\\r\\n   */\\r\\n  function _removeDelegation(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) internal {\\r\\n    LpTokenType lpType = s_lpType[lpToken];\\r\\n    LockedBalance memory fromLocked = s_locked[fromTokenId][lpType];\\r\\n    LockedBalance memory toLocked = s_locked[toTokenId][lpType];\\r\\n\\r\\n    if (ownerOf(fromTokenId) != _msgSender() && ownerOf(toTokenId) != _msgSender()) revert NotOwner();\\r\\n    if (s_delegations[fromTokenId][toTokenId][lpType] == 0) revert NoDelegationBetweenTokens(fromTokenId, toTokenId);\\r\\n\\r\\n    amount = amount > s_delegations[fromTokenId][toTokenId][lpType]\\r\\n      ? s_delegations[fromTokenId][toTokenId][lpType]\\r\\n      : amount;\\r\\n\\r\\n    toLocked.delegateAmount -= amount;\\r\\n    fromLocked.amount += amount;\\r\\n\\r\\n    s_delegations[fromTokenId][toTokenId][lpType] -= amount;\\r\\n    if (s_delegations[fromTokenId][toTokenId][lpType] == 0) {\\r\\n      s_delegatees[fromTokenId][lpType].remove(toTokenId);\\r\\n      s_delegators[toTokenId][lpType].remove(fromTokenId);\\r\\n    }\\r\\n\\r\\n    s_locked[toTokenId][lpType] = toLocked;\\r\\n    s_locked[fromTokenId][lpType] = fromLocked;\\r\\n    _checkpoint(toTokenId, s_locked[toTokenId][lpType], lpType);\\r\\n    _checkpoint(fromTokenId, s_locked[fromTokenId][lpType], lpType);\\r\\n\\r\\n    if (s_voted[toTokenId]) IVoter(s_voter).poke(toTokenId);\\r\\n    if (s_voted[fromTokenId]) IVoter(s_voter).poke(fromTokenId);\\r\\n\\r\\n    emit DelegationRemoved(fromTokenId, toTokenId, lpToken, amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function removeDelegatees(\\r\\n    uint256 fromTokenId,\\r\\n    uint256[] memory toTokenIds,\\r\\n    address lpToken,\\r\\n    uint256[] memory amounts\\r\\n  ) public nonReentrant {\\r\\n    if (toTokenIds.length != amounts.length) revert ArrayMismatch();\\r\\n    uint256 toTokenIdsLength = toTokenIds.length;\\r\\n    for (uint256 i = 0; i < toTokenIdsLength; i++) {\\r\\n      _removeDelegation(fromTokenId, toTokenIds[i], lpToken, amounts[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function removeDelegators(\\r\\n    uint256[] memory fromTokenIds,\\r\\n    uint256 toTokenId,\\r\\n    address lpToken,\\r\\n    uint256[] memory amounts\\r\\n  ) external nonReentrant {\\r\\n    if (fromTokenIds.length != amounts.length) revert ArrayMismatch();\\r\\n    uint256 fromTokenIdsLength = fromTokenIds.length;\\r\\n    for (uint256 i = 0; i < fromTokenIdsLength; i++) {\\r\\n      _removeDelegation(fromTokenIds[i], toTokenId, lpToken, amounts[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external nonReentrant {\\r\\n    LpTokenType _lpType = s_lpType[_tokenAddress];\\r\\n    LockedBalance memory _newLocked = s_locked[_tokenId][_lpType];\\r\\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\r\\n    if (_newLocked.isPermanent) revert PermanentLock();\\r\\n    if (_newLocked.end <= block.timestamp) revert LockExpired();\\r\\n    if (_newLocked.amount <= 0) revert NoLockFound();\\r\\n\\r\\n    s_permanentLockBalance[_lpType] += _newLocked.amount;\\r\\n    _newLocked.end = 0;\\r\\n    _newLocked.isPermanent = true;\\r\\n    _newLocked.boost = _calculateBoost(_MAXTIME);\\r\\n\\r\\n    s_locked[_tokenId][_lpType] = _newLocked;\\r\\n    _checkpoint(_tokenId, _newLocked, _lpType);\\r\\n\\r\\n    emit PermanentLockCreated(_tokenAddress, _tokenId, _newLocked.amount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external nonReentrant {\\r\\n    LpTokenType _lpType = s_lpType[_tokenAddress];\\r\\n    LockedBalance memory _newLocked = s_locked[_tokenId][_lpType];\\r\\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\r\\n    if (!_newLocked.isPermanent) revert NotPermanentLock();\\r\\n    if (s_delegatees[_tokenId][_lpType].length() != 0) revert TokenHasDelegatees();\\r\\n    if (s_delegators[_tokenId][_lpType].length() != 0) revert TokenHasDelegators();\\r\\n\\r\\n    s_permanentLockBalance[_lpType] -= _newLocked.amount;\\r\\n    _newLocked.end = ((block.timestamp + _MAXTIME) / _WEEK) * _WEEK;\\r\\n    _newLocked.isPermanent = false;\\r\\n\\r\\n    s_locked[_tokenId][_lpType] = _newLocked;\\r\\n    _checkpoint(_tokenId, _newLocked, _lpType);\\r\\n\\r\\n    emit PermanentLockRemoved(_tokenAddress, _tokenId, _newLocked.amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Overrides the _burn function from ERC721 to include additional logic for bridging.\\r\\n   * @param tokenId Token ID to burn.\\r\\n   */\\r\\n  function _burn(uint256 tokenId) internal override {\\r\\n    super._burn(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Hook that is called before any token transfer. This includes minting\\r\\n   * and burning. It updates the ownership mappings and handles delegation and\\r\\n   * staking logic when transferring tokens between addresses.\\r\\n   *\\r\\n   * @param from The address which previously owned the token.\\r\\n   * @param to The address that will receive the token.\\r\\n   * @param tokenId The ID of the token being transferred.\\r\\n   */\\r\\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {\\r\\n    super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n    if (from != address(0)) s_ownerToTokenIds[from].remove(tokenId);\\r\\n    if (to != address(0)) s_ownerToTokenIds[to].add(tokenId);\\r\\n\\r\\n    if (from != address(0) && to != address(0)) {\\r\\n      address[] memory assetsLocked = s_assetsLocked[tokenId].values();\\r\\n      uint256 assetsLockedLength = assetsLocked.length;\\r\\n      for (uint256 i = 0; i < assetsLockedLength; i++) {\\r\\n        address asset = assetsLocked[i];\\r\\n        LpTokenType _lpType = s_lpType[asset];\\r\\n\\r\\n        uint256[] memory delegatees = s_delegatees[tokenId][_lpType].values();\\r\\n        uint256[] memory amounts = new uint256[](delegatees.length);\\r\\n        uint256 delegateesLength = delegatees.length;\\r\\n        for (uint256 j = 0; j < delegateesLength; j++) {\\r\\n          amounts[j] = type(uint256).max;\\r\\n        }\\r\\n\\r\\n        if (delegateesLength != 0) {\\r\\n          removeDelegatees(tokenId, delegatees, asset, amounts);\\r\\n        }\\r\\n\\r\\n        uint256 amountStaked = s_underlyingStake[tokenId][asset];\\r\\n        if (amountStaked != 0) {\\r\\n          IStakeStrategy _stakeStrategy = s_stakeStrategy[_lpType];\\r\\n          _stakeStrategy.transferStakingWallet(from, to, amountStaked);\\r\\n        }\\r\\n\\r\\n        LockedBalance memory lock = s_locked[tokenId][_lpType];\\r\\n        s_userCumulativeAssetValues[from][asset] -= lock.amount;\\r\\n        s_userCumulativeAssetValues[to][asset] += lock.amount;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function voting(uint256 _tokenId, bool _voting) external {\\r\\n    if (_msgSender() != s_voter) revert NotVoter();\\r\\n    s_voted[_tokenId] = _voting;\\r\\n    emit Voted(_tokenId, _voting);\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           Internal Functions                              \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  struct DepositVars {\\r\\n    uint256 supplyBefore;\\r\\n    uint256 totalLockTime;\\r\\n    LockedBalance newLocked;\\r\\n    address from;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Deposits tokens for a specific veNFT, updating its locked balance and boost.\\r\\n   * @dev This function handles the deposit logic for veNFTs, including updating the locked balance,\\r\\n   *      calculating the boost based on the lock duration, and transferring tokens.\\r\\n   * @param _tokenAddress The address of the token to deposit.\\r\\n   * @param _tokenId The ID of the veNFT to deposit tokens for.\\r\\n   * @param _tokenAmount The amount of tokens to deposit.\\r\\n   * @param _unlockTime The time at which the lock will expire.\\r\\n   * @param _stakeUnderlying A boolean indicating whether to stake the underlying tokens.\\r\\n   * @param _oldLocked The previous locked balance of the veNFT.\\r\\n   * @param _depositType The type of deposit being made.\\r\\n   * @param _lpType The LP token type associated with the deposit.\\r\\n   * @param _to The address to which the veNFT is assigned.\\r\\n   */\\r\\n  function _depositFor(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _tokenAmount,\\r\\n    uint256 _unlockTime,\\r\\n    bool _stakeUnderlying,\\r\\n    LockedBalance memory _oldLocked,\\r\\n    DepositType _depositType,\\r\\n    LpTokenType _lpType,\\r\\n    address _to\\r\\n  ) internal {\\r\\n    if (!s_whitelistedToken[_tokenAddress]) revert TokenNotWhitelisted();\\r\\n\\r\\n    DepositVars memory vars;\\r\\n    vars.supplyBefore = s_supply[_lpType];\\r\\n    s_supply[_lpType] = vars.supplyBefore + _tokenAmount;\\r\\n\\r\\n    (\\r\\n      vars.newLocked.tokenAddress,\\r\\n      vars.newLocked.amount,\\r\\n      vars.newLocked.start,\\r\\n      vars.newLocked.end,\\r\\n      vars.newLocked.isPermanent,\\r\\n      vars.newLocked.boost\\r\\n    ) = (\\r\\n      _oldLocked.tokenAddress,\\r\\n      _oldLocked.amount,\\r\\n      _oldLocked.start,\\r\\n      _oldLocked.end,\\r\\n      _oldLocked.isPermanent,\\r\\n      _oldLocked.boost\\r\\n    );\\r\\n\\r\\n    vars.newLocked.tokenAddress = _tokenAddress;\\r\\n    vars.newLocked.amount += _tokenAmount;\\r\\n    if (_unlockTime != 0) {\\r\\n      if (vars.newLocked.start == 0) vars.newLocked.start = block.timestamp;\\r\\n      vars.newLocked.end = _unlockTime;\\r\\n      vars.totalLockTime = vars.newLocked.end - vars.newLocked.start;\\r\\n      vars.newLocked.boost = _calculateBoost(vars.totalLockTime);\\r\\n    }\\r\\n    s_locked[_tokenId][_lpType] = vars.newLocked;\\r\\n\\r\\n    _checkpoint(_tokenId, vars.newLocked, _lpType);\\r\\n\\r\\n    vars.from = _msgSender();\\r\\n    if (_tokenAmount != 0) {\\r\\n      s_userCumulativeAssetValues[ownerOf(_tokenId)][_tokenAddress] += _tokenAmount;\\r\\n      IERC20(_tokenAddress).safeTransferFrom(vars.from, address(this), _tokenAmount);\\r\\n      (IStakeStrategy _stakeStrategy, bytes memory _stakeData) = _getStakeStrategy(_lpType);\\r\\n      if (address(_stakeStrategy) != address(0) && _stakeUnderlying) {\\r\\n        _handleTokenStake(_to, _tokenId, _tokenAddress, _tokenAmount, _stakeStrategy, _stakeData);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Deposit(_to, _tokenId, _depositType, _tokenAmount, vars.newLocked.end, block.timestamp);\\r\\n    emit Supply(vars.supplyBefore, s_supply[_lpType]);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Handles the staking of tokens using a specified staking strategy.\\r\\n   * @param _to The address to which the stake is attributed.\\r\\n   * @param _tokenId The ID of the token being staked.\\r\\n   * @param _tokenAddress The address of the token being staked.\\r\\n   * @param _tokenAmount The amount of tokens to stake.\\r\\n   * @param _stakeStrategy The staking strategy to use.\\r\\n   * @param _stakeData Additional data required for staking.\\r\\n   */\\r\\n  function _handleTokenStake(\\r\\n    address _to,\\r\\n    uint256 _tokenId,\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenAmount,\\r\\n    IStakeStrategy _stakeStrategy,\\r\\n    bytes memory _stakeData\\r\\n  ) internal {\\r\\n    IERC20(_tokenAddress).approve(address(_stakeStrategy), _tokenAmount);\\r\\n    _stakeStrategy.stake(_to, _tokenAmount, _stakeData);\\r\\n    s_underlyingStake[_tokenId][_tokenAddress] += _tokenAmount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Updates the user point history and epoch for a given token and LP token type.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _newLocked The new locked balance information.\\r\\n   * @param _lpType The LP token type.\\r\\n   */\\r\\n  function _checkpoint(uint256 _tokenId, LockedBalance memory _newLocked, LpTokenType _lpType) internal {\\r\\n    UserPoint memory uNew;\\r\\n    uNew.permanent = _newLocked.isPermanent ? _newLocked.amount : 0;\\r\\n    uNew.permanentDelegate = _newLocked.isPermanent ? _newLocked.delegateAmount : 0;\\r\\n\\r\\n    if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\\r\\n      uNew.slope = _newLocked.amount / _MAXTIME;\\r\\n      uNew.bias = uNew.slope * (_newLocked.end - block.timestamp);\\r\\n    }\\r\\n\\r\\n    uNew.ts = block.timestamp;\\r\\n    uNew.blk = block.number;\\r\\n    uint256 userEpoch = s_userPointEpoch[_tokenId][_lpType];\\r\\n    if (userEpoch != 0 && s_userPointHistory[_tokenId][_lpType][userEpoch].ts == block.timestamp) {\\r\\n      s_userPointHistory[_tokenId][_lpType][userEpoch] = uNew;\\r\\n    } else {\\r\\n      s_userPointEpoch[_tokenId][_lpType] = ++userEpoch;\\r\\n      s_userPointHistory[_tokenId][_lpType][userEpoch] = uNew;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Creates a lock for multiple tokens with specified durations and staking options.\\r\\n   * @param _tokenAddress Array of token addresses to lock.\\r\\n   * @param _tokenAmount Array of token amounts to lock.\\r\\n   * @param _duration Array of durations for each lock.\\r\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake the underlying tokens.\\r\\n   * @param _to The address to which the lock is attributed.\\r\\n   * @return The ID of the newly created lock.\\r\\n   */\\r\\n  function _createLock(\\r\\n    address[] memory _tokenAddress,\\r\\n    uint256[] memory _tokenAmount,\\r\\n    uint256[] memory _duration,\\r\\n    bool[] memory _stakeUnderlying,\\r\\n    address _to\\r\\n  ) internal returns (uint256) {\\r\\n    uint256 _tokenId = ++s_tokenId;\\r\\n    uint256 _length = _tokenAddress.length;\\r\\n    _safeMint(_to, _tokenId);\\r\\n\\r\\n    if (\\r\\n      _tokenAddress.length != _tokenAmount.length ||\\r\\n      _tokenAmount.length != _duration.length ||\\r\\n      _duration.length != _stakeUnderlying.length\\r\\n    ) {\\r\\n      revert ArrayMismatch();\\r\\n    }\\r\\n\\r\\n    for (uint256 i = 0; i < _length; i++) {\\r\\n      LpTokenType _lpType = s_lpType[_tokenAddress[i]];\\r\\n      uint256 unlockTime = ((block.timestamp + _duration[i]) / _WEEK) * _WEEK;\\r\\n\\r\\n      if (!s_assetsLocked[_tokenId].add(_tokenAddress[i])) revert DuplicateAsset();\\r\\n      if (_tokenAmount[i] == 0) revert ZeroAmount();\\r\\n      if (_duration[i] < s_minimumLockDuration) revert LockDurationTooShort();\\r\\n      if (unlockTime > block.timestamp + _MAXTIME) revert LockDurationTooLong();\\r\\n      if (_tokenAmount[i] < s_minimumLockAmount[_lpType]) revert MinimumNotMet();\\r\\n\\r\\n      _depositFor(\\r\\n        _tokenAddress[i],\\r\\n        _tokenId,\\r\\n        _tokenAmount[i],\\r\\n        unlockTime,\\r\\n        _stakeUnderlying[i],\\r\\n        s_locked[_tokenId][_lpType],\\r\\n        DepositType.CREATE_LOCK_TYPE,\\r\\n        _lpType,\\r\\n        _to\\r\\n      );\\r\\n    }\\r\\n    return _tokenId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates the boost for a given lock duration.\\r\\n   * @param _duration The duration of the lock.\\r\\n   * @return The calculated boost value.\\r\\n   */\\r\\n  function _calculateBoost(uint256 _duration) internal view returns (uint256) {\\r\\n    uint256 minDuration = s_minimumLockDuration;\\r\\n    uint256 maxDuration = _MAXTIME;\\r\\n    uint256 minBoost = 1e18;\\r\\n    uint256 maxBoost = 2e18;\\r\\n\\r\\n    if (_duration <= minDuration) {\\r\\n      return minBoost;\\r\\n    } else if (_duration >= maxDuration) {\\r\\n      return maxBoost;\\r\\n    } else {\\r\\n      return minBoost + ((_duration - minDuration) * (maxBoost - minBoost)) / (maxDuration - minDuration);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the staking strategy and data for a given LP token type.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @return _stakeStrategy The staking strategy for the LP token type.\\r\\n   * @return _stakeData The staking data for the LP token type.\\r\\n   */\\r\\n  function _getStakeStrategy(\\r\\n    LpTokenType _lpType\\r\\n  ) internal view returns (IStakeStrategy _stakeStrategy, bytes memory _stakeData) {\\r\\n    IStakeStrategy strategy = s_stakeStrategy[_lpType];\\r\\n    return (strategy, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONCore\\r\\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external onlyOwner {\\r\\n    require(_veIONFirstExtension != address(0), \\\"Invalid First Extension Address\\\");\\r\\n    require(_veIONSecondExtension != address(0), \\\"Invalid Second Extension Address\\\");\\r\\n    require(_veIONFirstExtension != _veIONSecondExtension, \\\"Submitted Identical Addresses\\\");\\r\\n    veIONFirstExtension = _veIONFirstExtension;\\r\\n    veIONSecondExtension = _veIONSecondExtension;\\r\\n    emit ExtensionsSet(_veIONFirstExtension, _veIONSecondExtension);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n   * function in the contract matches the call data.\\r\\n   */\\r\\n  fallback() external {\\r\\n    address impl = veIONFirstExtension;\\r\\n    require(impl != address(0), \\\"Implementation not set\\\");\\r\\n\\r\\n    assembly {\\r\\n      calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n      let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\r\\n\\r\\n      returndatacopy(0, 0, returndatasize())\\r\\n      switch result\\r\\n      case 0 {\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n      default {\\r\\n        return(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xaba802c82652010f0087717757eb4e493a971f7d548b117659d42a0788957f0a\",\"license\":\"UNLICENSED\"},\"contracts/veION/veIONStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport { IAddressesProvider } from \\\"./interfaces/IveIONCore.sol\\\";\\r\\nimport { IStakeStrategy } from \\\"./stake/IStakeStrategy.sol\\\";\\r\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./interfaces/IveIONStructsEnumsErrorsEvents.sol\\\";\\r\\n\\r\\nabstract contract veIONStorage is IveIONStructsEnumsErrorsEvents {\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                                Constants                                  \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /// @notice Represents the duration of one week in seconds.\\r\\n  uint256 internal constant _WEEK = 1 weeks;\\r\\n  /// @notice Represents the maximum lock time in seconds (2 years).\\r\\n  uint256 internal constant _MAXTIME = 2 * 365 * 86400;\\r\\n  /// @notice Precision used for calculations, set to 1e18.\\r\\n  uint256 public constant PRECISION = 1e18;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                             State Variables                               \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /// @notice The current token ID counter.\\r\\n  uint256 public s_tokenId;\\r\\n  /// @notice The amount of limited boost available.\\r\\n  uint256 public s_limitedBoost;\\r\\n  /// @notice Indicates whether the limited boost is active.\\r\\n  bool public s_limitedBoostActive;\\r\\n  /// @notice Address of the veAERO contract.\\r\\n  address public s_veAERO;\\r\\n  /// @notice Address of the AeroVoting contract.\\r\\n  address public s_aeroVoting;\\r\\n  /// @notice Address of the Ionic Pool.\\r\\n  address public s_ionicPool;\\r\\n  /// @notice Address of the voter contract.\\r\\n  address public s_voter;\\r\\n  /// @notice The boost amount for AeroVoter.\\r\\n  uint256 public s_aeroVoterBoost;\\r\\n  /// @notice The minimum duration for locking.\\r\\n  uint256 public s_minimumLockDuration;\\r\\n  /// @notice The maximum fee for early withdrawal.\\r\\n  uint256 public s_maxEarlyWithdrawFee;\\r\\n  /// @notice The AddressesProvider contract used for address management.\\r\\n  IAddressesProvider public ap;\\r\\n  /// @notice The address of the logic contract for the veION first extension.\\r\\n  address public veIONFirstExtension;\\r\\n  /// @notice The address of the logic contract for the veION second extension.\\r\\n  address public veIONSecondExtension;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                                Mappings                                   \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /// @dev Maps LP token types to their minimum lock amounts.\\r\\n  mapping(LpTokenType => uint256) public s_minimumLockAmount;\\r\\n  /// @dev Maps token addresses to their whitelist status.\\r\\n  mapping(address => bool) public s_whitelistedToken;\\r\\n  /// @dev Maps token addresses to their corresponding LP token types.\\r\\n  mapping(address => LpTokenType) public s_lpType;\\r\\n  /// @dev Maps user addresses to their ability to split.\\r\\n  mapping(address => bool) public s_canSplit;\\r\\n  /// @dev Maps token IDs and LP token types to their locked balances.\\r\\n  mapping(uint256 => mapping(LpTokenType => LockedBalance)) public s_locked;\\r\\n  /// @dev Maps token IDs and LP token types to user epochs.\\r\\n  mapping(uint256 => mapping(LpTokenType => uint256)) public s_userPointEpoch;\\r\\n  /// @dev Maps token IDs and LP token types to user point history.\\r\\n  mapping(uint256 => mapping(LpTokenType => UserPoint[1000000000])) public s_userPointHistory;\\r\\n  /// @dev Maps token IDs to sets of locked asset addresses.\\r\\n  mapping(uint256 => EnumerableSet.AddressSet) internal s_assetsLocked;\\r\\n  /// @dev Maps token IDs to their voting status.\\r\\n  mapping(uint256 => bool) public s_voted;\\r\\n  /// @dev Maps LP token types to their total supply.\\r\\n  mapping(LpTokenType => uint256) public s_supply;\\r\\n  /// @dev Maps LP token types to their permanent lock balances.\\r\\n  mapping(LpTokenType => uint256) public s_permanentLockBalance;\\r\\n  /// @dev Maps LP token types to their underlying stake strategies.\\r\\n  mapping(LpTokenType => IStakeStrategy) public s_stakeStrategy;\\r\\n  /// @dev Maps token IDs and LP token addresses to their underlying stake amounts.\\r\\n  mapping(uint256 => mapping(address => uint256)) public s_underlyingStake;\\r\\n  /// @dev Maps LP token types to their protocol fees.\\r\\n  mapping(LpTokenType => uint256) public s_protocolFees;\\r\\n  /// @dev Maps LP token types to their distributed fees.\\r\\n  mapping(LpTokenType => uint256) public s_distributedFees;\\r\\n  /// @dev Maps delegators, delegatees, and LP token types to delegation amounts.\\r\\n  mapping(uint256 => mapping(uint256 => mapping(LpTokenType => uint256))) public s_delegations;\\r\\n  /// @dev Maps token IDs and LP token types to sets of delegatees.\\r\\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegatees;\\r\\n  /// @dev Maps token IDs and LP token types to sets of delegators.\\r\\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegators;\\r\\n  /// @dev Maps owner addresses to sets of token IDs they own.\\r\\n  mapping(address => EnumerableSet.UintSet) internal s_ownerToTokenIds;\\r\\n  /// @dev Maps user addresses and token addresses to cumulative asset values.\\r\\n  mapping(address => mapping(address => uint256)) public s_userCumulativeAssetValues;\\r\\n  /// @dev Maps token Id and lp onto delegator permissioning.\\r\\n  mapping(uint256 => mapping(address => bool)) public s_delegatorsBlocked;\\r\\n\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x321843ccfd620468aca3f64f93362a234871402a2a4a06d8197f950e9c72968a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615eb280620000f46000396000f3fe608060405234801561001057600080fd5b50600436106103ba5760003560e01c806392415b08116101f4578063bae1cb5e1161011a578063df251974116100ad578063e985e9c51161007c578063e985e9c514610a5f578063ec09409514610a72578063eec83d8714610a96578063f2fde38b14610aa0576103ba565b8063df251974146109e3578063e1d514bd146109ed578063e30c397814610a0e578063e526789414610a1f576103ba565b8063cc8cb245116100e9578063cc8cb24514610992578063d0e6a790146109b3578063d8a82611146109c6578063dc5ec58f146109d0576103ba565b8063bae1cb5e14610927578063c4d66de814610948578063c682ee681461095b578063c87b56dd1461097f576103ba565b8063aaf5eb6811610192578063b1113baf11610161578063b1113baf146108a5578063b88d4fde146108d4578063b9e77c5f146108e7578063ba99c4df146108fb576103ba565b8063aaf5eb6814610860578063ab2d99db1461086f578063ad975d7114610879578063b04f9fc514610892576103ba565b80639ac1cc9d116101ce5780639ac1cc9d146107825780639b8b402914610827578063a1e37f731461083a578063a22cb4651461084d576103ba565b806392415b081461073657806395d89b411461076757806396aba9ca1461076f576103ba565b806342842e0e116102e45780636cbdce561161027757806379ba50971161024657806379ba5097146106e857806380e13a57146106f057806384cf379c146107115780638da5cb5b14610725576103ba565b80636cbdce561461069557806370a08231146106a9578063715018a6146106bc57806372b4c276146106c4576103ba565b80636352211e116102b35780636352211e1461064e57806366e1a92b146106615780636b2fe4c7146106745780636caa6b9b14610682576103ba565b806342842e0e146105e9578063535d9aaf146105fc57806358487c00146106285780635a4f459a1461063b576103ba565b8063171314f11161035c5780632879e8401161032b5780632879e840146105845780632eadea65146105ae5780633c4f743c146105c15780633d2cdbd1146105d5576103ba565b8063171314f11461053357806318e4451d1461053d5780631df595c71461055057806323b872dd14610571576103ba565b8063081812fc11610398578063081812fc146104af578063095ea7b3146104da57806312ba89ef146104ed57806314b3bdde1461051f576103ba565b806301ffc9a71461043857806306fdde031461046057806307b67fe814610475575b610137546001600160a01b0316806104125760405162461bcd60e51b8152602060048201526016602482015275125b5c1b195b595b9d185d1a5bdb881b9bdd081cd95d60521b60448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e808015610431573d6000f35b3d6000fd5b005b61044b6104463660046151a4565b610ab3565b60405190151581526020015b60405180910390f35b610468610b05565b6040516104579190615211565b6104a1610483366004615238565b61013e60209081526000928352604080842090915290825290205481565b604051908152602001610457565b6104c26104bd366004615264565b610b97565b6040516001600160a01b039091168152602001610457565b6104366104e8366004615292565b610bbe565b6104a16104fb3660046152be565b61014860209081526000938452604080852082529284528284209052825290205481565b610137546104c2906001600160a01b031681565b6104a161012d5481565b61043661054b366004615292565b610cd3565b6104a161055e3660046152f3565b6101466020526000908152604090205481565b61043661057f36600461530e565b61102b565b6104c26105923660046152f3565b610144602052600090815260409020546001600160a01b031681565b6104366105bc366004615429565b61105c565b610136546104c2906001600160a01b031681565b610131546104c2906001600160a01b031681565b6104366105f736600461530e565b6110eb565b6104a161060a3660046154ab565b61014560209081526000928352604080842090915290825290205481565b6104a161063636600461559d565b611106565b61043661064936600461565b565b6111d0565b6104c261065c366004615264565b611260565b61043661066f366004615680565b6112c0565b61012f5461044b9060ff1681565b6104366106903660046156ae565b611435565b610130546104c2906001600160a01b031681565b6104a16106b7366004615704565b611708565b61043661178e565b61044b6106d2366004615704565b61013a6020526000908152604090205460ff1681565b6104366117a2565b6104a16106fe3660046152f3565b6101476020526000908152604090205481565b610138546104c2906001600160a01b031681565b6033546001600160a01b03166104c2565b61075a610744366004615704565b61013b6020526000908152604090205460ff1681565b6040516104579190615737565b61046861181c565b61043661077d36600461575f565b61182b565b6107e6610790366004615238565b61013d60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0390951695939492939192909160ff169087565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091526080840152151560a083015260c082015260e001610457565b6104a161083536600461579e565b611f45565b610436610848366004615870565b612009565b61043661085b3660046158ba565b6121e6565b6104a1670de0b6b3a764000081565b6104a16101345481565b61012f546104c29061010090046001600160a01b031681565b6104366108a03660046158e8565b6121f1565b61044b6108b33660046154ab565b61014d60209081526000928352604080842090915290825290205460ff1681565b6104366108e236600461593b565b612261565b610132546104c2906001600160a01b031681565b6104a1610909366004615680565b61014c60209081526000928352604080842090915290825290205481565b6104a16109353660046152f3565b6101436020526000908152604090205481565b610436610956366004615704565b612293565b61044b610969366004615704565b61013c6020526000908152604090205460ff1681565b61046861098d366004615264565b612431565b6104a16109a03660046152f3565b6101396020526000908152604090205481565b6104366109c13660046159ff565b6124a5565b6104a16101335481565b6104366109de366004615292565b6126a7565b6104a161012e5481565b6104a16109fb3660046152f3565b6101426020526000908152604090205481565b6065546001600160a01b03166104c2565b610a32610a2d366004615a34565b612973565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610457565b61044b610a6d366004615680565b6129cc565b61044b610a80366004615264565b6101416020526000908152604090205460ff1681565b6104a16101355481565b610436610aae366004615704565b6129fa565b60006001600160e01b031982166380ac58cd60e01b1480610ae457506001600160e01b03198216635b5e139f60e01b145b80610aff57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060c98054610b1490615a69565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4090615a69565b8015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b5050505050905090565b6000610ba282612a6b565b50600090815260cd60205260409020546001600160a01b031690565b6000610bc982611260565b9050806001600160a01b0316836001600160a01b031603610c365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610409565b336001600160a01b0382161480610c525750610c5281336129cc565b610cc45760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610409565b610cce8383612ace565b505050565b610cdb612b3c565b6001600160a01b038216600090815261013b602090815260408083205484845261013d909252822060ff909116919081836005811115610d1d57610d1d615721565b6005811115610d2e57610d2e615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c0820152905033610da684611260565b6001600160a01b031614610dcd576040516330cd747160e01b815260040160405180910390fd5b8060a00151610def57604051632188f8ab60e01b815260040160405180910390fd5b600083815261014960205260408120610e3891846005811115610e1457610e14615721565b6005811115610e2557610e25615721565b8152602001908152602001600020612b95565b15610e5657604051630edc980960e31b815260040160405180910390fd5b600083815261014a60205260408120610e7b91846005811115610e1457610e14615721565b15610e995760405163b467a0cd60e01b815260040160405180910390fd5b80602001516101436000846005811115610eb557610eb5615721565b6005811115610ec657610ec6615721565b81526020019081526020016000206000828254610ee39190615ab9565b9091555062093a80905080610efc6303c2670042615acc565b610f069190615adf565b610f109190615b01565b6080820152600060a0820181905283815261013d602052604081208291846005811115610f3f57610f3f615721565b6005811115610f5057610f50615721565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b039091161781559183015160018301558201516002820155606082015160038201556080820151600482015560a082015160058201805460ff191691151591909117905560c090910151600690910155610fd3838284612b9f565b82846001600160a01b03167fc9fb777d8136f44985873ace5c35caab55be7de39e2ce670bd114eef67af9d18836020015160405161101391815260200190565b60405180910390a35050611027600160fb55565b5050565b6110353382612ec7565b6110515760405162461bcd60e51b815260040161040990615b18565b610cce838383612f26565b611064612b3c565b80518451146110865760405163b7c1140d60e01b815260040160405180910390fd5b835160005b818110156110d9576110d18682815181106110a8576110a8615b65565b602002602001015186868685815181106110c4576110c4615b65565b6020026020010151613095565b60010161108b565b50506110e5600160fb55565b50505050565b610cce83838360405180602001604052806000815250612261565b6000611110612b3c565b6111b988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020808b0282810182019093528a82529093508a9250899182918501908490808284376000920191909152508892506111b49150612aca9050565b6137b1565b90506111c5600160fb55565b979650505050505050565b610132546001600160a01b0316336001600160a01b0316146112055760405163c18384c160e01b815260040160405180910390fd5b60008281526101416020908152604091829020805460ff19168415159081179091558251858152918201527fa63b4de27d795de0f5597f73747fac943bc2864c1ef9fa81100950198d5030b391015b60405180910390a15050565b600081815260cb60205260408120546001600160a01b031680610aff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610409565b6112c8613b3d565b6001600160a01b03821661131e5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420466972737420457874656e73696f6e2041646472657373006044820152606401610409565b6001600160a01b0381166113745760405162461bcd60e51b815260206004820181905260248201527f496e76616c6964205365636f6e6420457874656e73696f6e20416464726573736044820152606401610409565b806001600160a01b0316826001600160a01b0316036113d55760405162461bcd60e51b815260206004820152601d60248201527f5375626d6974746564204964656e746963616c204164647265737365730000006044820152606401610409565b61013780546001600160a01b03199081166001600160a01b0385811691821790935561013880549092169284169283179091556040517f32a3d958ecac95e0e3171c39302bfe12bf0c8a65d10ab7cc4b423c96db1cce4690600090a35050565b61143d612b3c565b6001600160a01b038516600090815261013b602090815260408083205486845261013d909252822060ff90911691908183600581111561147f5761147f615721565b600581111561149057611490615721565b81526020019081526020016000209050600062093a808086426114b39190615acc565b6114bd9190615adf565b6114c79190615b01565b9050336114d387611260565b6001600160a01b0316146114fa576040516330cd747160e01b815260040160405180910390fd5b8660000361151b57604051631f2a200560e01b815260040160405180910390fd5b6000868152610141602052604090205460ff161561154c57604051637c9a1cf960e01b815260040160405180910390fd5b6000868152610140602052604090206115659089613b97565b61158257604051630587daa360e41b815260040160405180910390fd5b610139600084600581111561159957611599615721565b60058111156115aa576115aa615721565b8152602001908152602001600020548710156115d95760405163a0927dc360e01b815260040160405180910390fd5b6115e76303c2670042615acc565b8111156116075760405163f761f1cd60e01b815260040160405180910390fd5b6101345485101561162b576040516349eeb0b360e01b815260040160405180910390fd5b600582015460ff16156116845786610143600085600581111561165057611650615721565b600581111561166157611661615721565b8152602001908152602001600020600082825461167e9190615acc565b90915550505b6040805160e08101825283546001600160a01b0316815260018401546020820152600284015491810191909152600383015460608201526004808401546080830152600584015460ff16151560a0830152600684015460c08301526116f4918a9189918b9186918a918a33613bac565b505050611701600160fb55565b5050505050565b60006001600160a01b0382166117725760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610409565b506001600160a01b0316600090815260cc602052604090205490565b611796613b3d565b6117a0600061400c565b565b60655433906001600160a01b031681146118105760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610409565b6118198161400c565b50565b606060ca8054610b1490615a69565b611833612b3c565b6001600160a01b038216600090815261013b602090815260408083205487845261013d909252822060ff90911691908183600581111561187557611875615721565b600581111561188657611886615721565b815260208082019290925260409081016000908120825160e08101845281546001600160a01b03168152600182015481860152600282015481850152600382015460608201526004820154608082015260058083015460ff16151560a083015260069092015460c082015289835261013d90945291812092935091908290859081111561191557611915615721565b600581111561192657611926615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015290503361199e88611260565b6001600160a01b0316146119c5576040516330cd747160e01b815260040160405180910390fd5b81602001518411156119ea57604051636b2f218360e01b815260040160405180910390fd5b8160a00151611a0c57604051632188f8ab60e01b815260040160405180910390fd5b8060a00151611a2e57604051632188f8ab60e01b815260040160405180910390fd5b600086815261014d602090815260408083206001600160a01b038916845290915290205460ff1615611a7357604051631c6dc04d60e21b815260040160405180910390fd5b8382602001818151611a859190615ab9565b905250604081018051859190611a9c908390615acc565b905250600087815261014860209081526040808320898452909152812090846005811115611acc57611acc615721565b6005811115611add57611add615721565b815260200190815260200160002054600003611b7357600087815261014960205260408120611b4891889190866005811115611b1b57611b1b615721565b6005811115611b2c57611b2c615721565b815260200190815260200160002061402590919063ffffffff16565b50600086815261014a60205260408120611b7191899190866005811115611b1b57611b1b615721565b505b60008781526101486020908152604080832089845290915281208591856005811115611ba157611ba1615721565b6005811115611bb257611bb2615721565b81526020019081526020016000206000828254611bcf9190615acc565b9091555050600087815261013d602052604081208391856005811115611bf757611bf7615721565b6005811115611c0857611c08615721565b815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155848401516001820155848301516002820155606085015160038201556080850151600482015560a08501516005808301805460ff19169215159290921790915560c09095015160069091015589815261013d909252812083929091908690811115611ca657611ca6615721565b6005811115611cb757611cb7615721565b815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155848401516001820155848301516002820155606085015160038201556080850151600482015560a08501516005808301805460ff19169215159290921790915560c0909501516006909101558a815261013d9092528120611dda928a92908790811115611d5757611d57615721565b6005811115611d6857611d68615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015285612b9f565b600086815261013d60205260408120611e0291889190866005811115611d5757611d57615721565b6000868152610141602052604090205460ff1615611e7a576101325460405163032145f960e41b8152600481018890526001600160a01b03909116906332145f9090602401600060405180830381600087803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b505050505b6000878152610141602052604090205460ff1615611ef2576101325460405163032145f960e41b8152600481018990526001600160a01b03909116906332145f9090602401600060405180830381600087803b158015611ed957600080fd5b505af1158015611eed573d6000803e3d6000fd5b505050505b604080516001600160a01b038716815260208101869052879189917fbbaa67ec741b8d492a4db3063da731d48d48b07eb4370b0f46fbe25b2dc8b30b910160405180910390a35050506110e5600160fb55565b6000611f4f612b3c565b611ff189898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a9182918501908490808284376000920191909152508992508891506137b19050565b9050611ffd600160fb55565b98975050505050505050565b612011612b3c565b6001600160a01b038416600090815261013b602090815260408083205486845261013d909252822060ff90911691908183600581111561205357612053615721565b600581111561206457612064615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c08201529050336120dc86611260565b6001600160a01b031614612103576040516330cd747160e01b815260040160405180910390fd5b8360000361212457604051631f2a200560e01b815260040160405180910390fd5b80602001516000036121495760405163f90e998d60e01b815260040160405180910390fd5b4281608001511115801561215f57508060a00151155b1561217d576040516307b7d7dd60e51b815260040160405180910390fd5b8060a00151156121d35783610143600084600581111561219f5761219f615721565b60058111156121b0576121b0615721565b815260200190815260200160002060008282546121cd9190615acc565b90915550505b6110d98686866000878660028933613bac565b611027338383614031565b6121f9612b3c565b805183511461221b5760405163b7c1140d60e01b815260040160405180910390fd5b825160005b818110156110d9576122598686838151811061223e5761223e615b65565b6020026020010151868685815181106110c4576110c4615b65565b600101612220565b61226b3383612ec7565b6122875760405162461bcd60e51b815260040161040990615b18565b6110e5848484846140ff565b600054610100900460ff16158080156122b35750600054600160ff909116105b806122cd5750303b1580156122cd575060005460ff166001145b6123305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610409565b6000805460ff191660011790558015612353576000805461ff0019166101001790555b61235b614132565b61239f604051806040016040528060058152602001643b32a4a7a760d91b815250604051806040016040528060058152602001643b32a4a7a760d91b815250614161565b6123a7614192565b61013680546001600160a01b0319166001600160a01b0384169081179091556040517f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e690600090a28015611027576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611254565b606061243c82612a6b565b600061245360408051602081019091526000815290565b90506000815111612473576040518060200160405280600081525061249e565b8061247d846141c1565b60405160200161248e929190615b7b565b6040516020818303038152906040525b9392505050565b6124ad612b3c565b6001600160a01b038316600090815261013b602090815260408083205485845261013d909252822060ff9091169190818360058111156124ef576124ef615721565b600581111561250057612500615721565b815260208082019290925260409081016000908120825160e08101845281546001600160a01b031681526001820154948101949094526002810154928401929092526003820154606084015260048201546080840152600582015460ff16151560a084015260069091015460c083015290915062093a80806125828642615acc565b61258c9190615adf565b6125969190615b01565b9050336125a286611260565b6001600160a01b0316146125c9576040516330cd747160e01b815260040160405180910390fd5b8160a00151156125ec576040516334d10f9560e11b815260040160405180910390fd5b42826080015111612610576040516307b7d7dd60e51b815260040160405180910390fd5b60008260200151116126355760405163f90e998d60e01b815260040160405180910390fd5b8160800151811161265957604051638e6b5b6760e01b815260040160405180910390fd5b6126676303c2670042615acc565b8111156126875760405163f761f1cd60e01b815260040160405180910390fd5b61269a8686600084818760038a33613bac565b505050610cce600160fb55565b6126af612b3c565b6001600160a01b038216600090815261013b602090815260408083205484845261013d909252822060ff9091169190818360058111156126f1576126f1615721565b600581111561270257612702615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015290503361277a84611260565b6001600160a01b0316146127a1576040516330cd747160e01b815260040160405180910390fd5b8060a00151156127c4576040516334d10f9560e11b815260040160405180910390fd5b428160800151116127e8576040516307b7d7dd60e51b815260040160405180910390fd5b600081602001511161280d5760405163f90e998d60e01b815260040160405180910390fd5b8060200151610143600084600581111561282957612829615721565b600581111561283a5761283a615721565b815260200190815260200160002060008282546128579190615acc565b909155505060006080820152600160a08201526128776303c26700614254565b60c0820152600083815261013d60205260408120829184600581111561289f5761289f615721565b60058111156128b0576128b0615721565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b039091161781559183015160018301558201516002820155606082015160038201556080820151600482015560a082015160058201805460ff191691151591909117905560c090910151600690910155612933838284612b9f565b82846001600160a01b03167f1279589865a24f47c3f488c43a66e99bc3a86581aa876fe4e640fee1ad59de15836020015160405161101391815260200190565b61013f60205282600052604060002060205281600052604060002081633b9aca00811061299f57600080fd5b60060201805460018201546002830154600384015460048501546005909501549397509195509350919086565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b612a02613b3d565b606580546001600160a01b0383166001600160a01b03199091168117909155612a336033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600081815260cb60205260409020546001600160a01b03166118195760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610409565b3390565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612b0382611260565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600260fb5403612b8e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610409565b600260fb55565b6000610aff825490565b612bd86040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8260a00151612be8576000612bee565b82602001515b608082015260a0830151612c03576000612c09565b82604001515b60a0820152608083015142108015612c25575060008360200151115b15612c65576303c267008360200151612c3e9190615adf565b60208201526080830151612c53904290615ab9565b8160200151612c629190615b01565b81525b42604080830191909152436060830152600085815261013e60205290812081846005811115612c9657612c96615721565b6005811115612ca757612ca7615721565b815260200190815260200160002054905080600014158015612d245750600085815261013f602052604081204291856005811115612ce757612ce7615721565b6005811115612cf857612cf8615721565b815260200190815260200160002082633b9aca008110612d1a57612d1a615b65565b6006020160020154145b15612dc757600085815261013f602052604081208391856005811115612d4c57612d4c615721565b6005811115612d5d57612d5d615721565b815260200190815260200160002082633b9aca008110612d7f57612d7f615b65565b60060201600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050611701565b612dd081615baa565b600086815261013e60205260408120919250829190856005811115612df757612df7615721565b6005811115612e0857612e08615721565b8152602001908152602001600020819055508161013f60008781526020019081526020016000206000856005811115612e4357612e43615721565b6005811115612e5457612e54615721565b815260200190815260200160002082633b9aca008110612e7657612e76615b65565b60060201600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050505050505050565b600160fb55565b600080612ed383611260565b9050806001600160a01b0316846001600160a01b03161480612efa5750612efa81856129cc565b80612f1e5750836001600160a01b0316612f1384610b97565b6001600160a01b0316145b949350505050565b826001600160a01b0316612f3982611260565b6001600160a01b031614612f5f5760405162461bcd60e51b815260040161040990615bc3565b6001600160a01b038216612fc15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610409565b612fcc8383836142d8565b826001600160a01b0316612fdf82611260565b6001600160a01b0316146130055760405162461bcd60e51b815260040161040990615bc3565b600081815260cd6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260cc855283862080546000190190559087168086528386208054600101905586865260cb90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216600090815261013b602090815260408083205487845261013d909252822060ff9091169190818360058111156130d7576130d7615721565b60058111156130e8576130e8615721565b815260208082019290925260409081016000908120825160e08101845281546001600160a01b03168152600182015481860152600282015481850152600382015460608201526004820154608082015260058083015460ff16151560a083015260069092015460c082015289835261013d90945291812092935091908290859081111561317757613177615721565b600581111561318857613188615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015290503361320088611260565b6001600160a01b03161415801561322857503361321c87611260565b6001600160a01b031614155b15613246576040516330cd747160e01b815260040160405180910390fd5b60008781526101486020908152604080832089845290915281209084600581111561327357613273615721565b600581111561328457613284615721565b8152602001908152602001600020546000036132bd5760405163102d5cc760e01b81526004810188905260248101879052604401610409565b6000878152610148602090815260408083208984529091528120908460058111156132ea576132ea615721565b60058111156132fb576132fb615721565b81526020019081526020016000205484116133165783613364565b60008781526101486020908152604080832089845290915281209084600581111561334357613343615721565b600581111561335457613354615721565b8152602001908152602001600020545b935083816040018181516133789190615ab9565b90525060208201805185919061338f908390615acc565b905250600087815261014860209081526040808320898452909152812085918560058111156133c0576133c0615721565b60058111156133d1576133d1615721565b815260200190815260200160002060008282546133ee9190615ab9565b909155505060008781526101486020908152604080832089845290915281209084600581111561342057613420615721565b600581111561343157613431615721565b8152602001908152602001600020546000036134c75760008781526101496020526040812061349c9188919086600581111561346f5761346f615721565b600581111561348057613480615721565b815260200190815260200160002061470890919063ffffffff16565b50600086815261014a602052604081206134c59189919086600581111561346f5761346f615721565b505b600086815261013d6020526040812082918560058111156134ea576134ea615721565b60058111156134fb576134fb615721565b815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155848401516001820155848301516002820155606085015160038201556080850151600482015560a08501516005808301805460ff19169215159290921790915560c0909501516006909101558a815261013d90925281208492909190869081111561359957613599615721565b60058111156135aa576135aa615721565b815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155848401516001820155848301516002820155606085015160038201556080850151600482015560a08501516005808301805460ff19169215159290921790915560c09095015160069091015589815261013d909252812061364a928992908790811115611d5757611d57615721565b600087815261013d6020526040812061367291899190866005811115611d5757611d57615721565b6000868152610141602052604090205460ff16156136ea576101325460405163032145f960e41b8152600481018890526001600160a01b03909116906332145f9090602401600060405180830381600087803b1580156136d157600080fd5b505af11580156136e5573d6000803e3d6000fd5b505050505b6000878152610141602052604090205460ff1615613762576101325460405163032145f960e41b8152600481018990526001600160a01b03909116906332145f9090602401600060405180830381600087803b15801561374957600080fd5b505af115801561375d573d6000803e3d6000fd5b505050505b604080516001600160a01b038716815260208101869052879189917f808381795a343c1feb4679e53b6f0a9f56bb9da80d2bef0b5526fc9d6226065d910160405180910390a350505050505050565b60008061012d600081546137c490615baa565b918290555087519091506137d88483614714565b865188511415806137eb57508551875114155b806137f857508451865114155b156138165760405163b7c1140d60e01b815260040160405180910390fd5b60005b81811015613b3057600061013b60008b848151811061383a5761383a615b65565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff169050600062093a80808a858151811061388b5761388b615b65565b60200260200101514261389e9190615acc565b6138a89190615adf565b6138b29190615b01565b90506138f38b84815181106138c9576138c9615b65565b60200260200101516101406000888152602001908152602001600020613b9790919063ffffffff16565b61391057604051630587daa360e41b815260040160405180910390fd5b89838151811061392257613922615b65565b602002602001015160000361394a57604051631f2a200560e01b815260040160405180910390fd5b6101345489848151811061396057613960615b65565b60200260200101511015613987576040516349eeb0b360e01b815260040160405180910390fd5b6139956303c2670042615acc565b8111156139b55760405163f761f1cd60e01b815260040160405180910390fd5b61013960008360058111156139cc576139cc615721565b60058111156139dd576139dd615721565b8152602001908152602001600020548a84815181106139fe576139fe615b65565b60200260200101511015613a255760405163a0927dc360e01b815260040160405180910390fd5b613b268b8481518110613a3a57613a3a615b65565b6020026020010151868c8681518110613a5557613a55615b65565b6020026020010151848c8881518110613a7057613a70615b65565b602002602001015161013d60008c81526020019081526020016000206000896005811115613aa057613aa0615721565b6005811115613ab157613ab1615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b03168152600180830154948201949094526002820154928101929092526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015290898f613bac565b5050600101613819565b5090979650505050505050565b6033546001600160a01b031633146117a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610409565b600061249e836001600160a01b03841661472e565b6001600160a01b038916600090815261013a602052604090205460ff16613be6576040516307c241ad60e51b815260040160405180910390fd5b613bee61511d565b6101426000846005811115613c0557613c05615721565b6005811115613c1657613c16615721565b8152602081019190915260400160002054808252613c35908990615acc565b6101426000856005811115613c4c57613c4c615721565b6005811115613c5d57613c5d615721565b81526020019081526020016000208190555084600001518560200151866060015187608001518860a001518960c0015186604001516000018760400151602001886040015160600189604001516080018a6040015160a0018b6040015160c001868152508615151515815250868152508681525086815250866001600160a01b03166001600160a01b0316815250505050505050898160400151600001906001600160a01b031690816001600160a01b031681525050878160400151602001818151613d299190615acc565b9052508615613d8b57806040015160600151600003613d4f576040810151426060909101525b604081018051608090810189905290516060810151910151613d719190615ab9565b60208201819052613d8190614254565b604082015160c001525b60408082015160008b815261013d6020529182209091856005811115613db357613db3615721565b6005811115613dc457613dc4615721565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155918301516001830155828101516002830155606083015160038301556080830151600483015560a083015160058301805460ff191691151591909117905560c090920151600690910155810151613e4c908a9085612b9f565b3360608201528715613f15578761014c6000613e678c611260565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613eb99190615acc565b90915550506060810151613ed9906001600160a01b038c1690308b61477d565b600080613ee5856147d7565b90925090506001600160a01b03821615801590613eff5750875b15613f1257613f12848c8e8d8686614838565b50505b836004811115613f2757613f27615721565b89836001600160a01b03167f8835c22a0c751188de86681e15904223c054bedd5c68ec8858945b78312902738b85604001516080015142604051613f7e939291909283526020830191909152604082015260600190565b60405180910390a480517f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c906101426000866005811115613fc157613fc1615721565b6005811115613fd257613fd2615721565b815260200190815260200160002054604051613ff8929190918252602082015260400190565b60405180910390a150505050505050505050565b606580546001600160a01b031916905561181981614950565b600061249e838361472e565b816001600160a01b0316836001600160a01b0316036140925760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610409565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61410a848484612f26565b614116848484846149a2565b6110e55760405162461bcd60e51b815260040161040990615c08565b600054610100900460ff166141595760405162461bcd60e51b815260040161040990615c5a565b6117a0614aa3565b600054610100900460ff166141885760405162461bcd60e51b815260040161040990615c5a565b6110278282614ad3565b600054610100900460ff166141b95760405162461bcd60e51b815260040161040990615c5a565b6117a0614b13565b606060006141ce83614b3a565b600101905060008167ffffffffffffffff8111156141ee576141ee61534f565b6040519080825280601f01601f191660200182016040528015614218576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461422257509392505050565b610134546000906303c26700670de0b6b3a7640000671bc16d674ec800008386116142825750949350505050565b8286106142925795945050505050565b61429c8484615ab9565b6142a68383615ab9565b6142b08689615ab9565b6142ba9190615b01565b6142c49190615adf565b6142ce9083615acc565b9695505050505050565b6001600160a01b0383161561430c576001600160a01b038316600090815261014b6020526040902061430a9082614708565b505b6001600160a01b03821615614340576001600160a01b038216600090815261014b6020526040902061433e9082614025565b505b6001600160a01b0383161580159061436057506001600160a01b03821615155b15610cce5760008181526101406020526040812061437d90614c12565b805190915060005b818110156147005760008382815181106143a1576143a1615b65565b6020908102919091018101516001600160a01b038116600090815261013b8352604080822054898352610149909452812091935060ff909216919061441790828460058111156143f3576143f3615721565b600581111561440457614404615721565b8152602001908152602001600020614c12565b90506000815167ffffffffffffffff8111156144355761443561534f565b60405190808252806020026020018201604052801561445e578160200160208202803683370190505b50825190915060005b818110156144975760001983828151811061448457614484615b65565b6020908102919091010152600101614467565b5080156144aa576144aa898487856121f1565b6000898152610145602090815260408083206001600160a01b0389168452909152902054801561458057600061014460008760058111156144ed576144ed615721565b60058111156144fe576144fe615721565b81526020810191909152604090810160002054905163e31d753160e01b81526001600160a01b038f811660048301528e81166024830152604482018590529091169150819063e31d753190606401600060405180830381600087803b15801561456657600080fd5b505af115801561457a573d6000803e3d6000fd5b50505050505b60008a815261013d60205260408120818760058111156145a2576145a2615721565b60058111156145b3576145b3615721565b81526020019081526020016000206040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016006820154815250509050806020015161014c60008f6001600160a01b03166001600160a01b031681526020019081526020016000206000896001600160a01b03166001600160a01b0316815260200190815260200160002060008282546146a79190615ab9565b90915550506020808201516001600160a01b03808f16600090815261014c84526040808220928c1682529190935282208054919290916146e8908490615acc565b90915550506001909701965061438595505050505050565b505050505050565b600061249e8383614c1f565b611027828260405180602001604052806000815250614d12565b600081815260018301602052604081205461477557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610aff565b506000610aff565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526110e5908590614d45565b60006060600061014460008560058111156147f4576147f4615721565b600581111561480557614805615721565b81526020808201929092526040908101600090812054825193840190925282526001600160a01b03169590945092505050565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820185905285169063095ea7b3906044016020604051808303816000875af1158015614887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148ab9190615ca5565b50604051633e12170f60e01b81526001600160a01b03831690633e12170f906148dc90899087908690600401615cc2565b600060405180830381600087803b1580156148f657600080fd5b505af115801561490a573d6000803e3d6000fd5b5050506000868152610145602090815260408083206001600160a01b038916845290915281208054869350909190614943908490615acc565b9091555050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b15614a9857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906149e6903390899088908890600401615cf2565b6020604051808303816000875af1925050508015614a21575060408051601f3d908101601f19168201909252614a1e91810190615d25565b60015b614a7e573d808015614a4f576040519150601f19603f3d011682016040523d82523d6000602084013e614a54565b606091505b508051600003614a765760405162461bcd60e51b815260040161040990615c08565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612f1e565b506001949350505050565b600054610100900460ff16614aca5760405162461bcd60e51b815260040161040990615c5a565b6117a03361400c565b600054610100900460ff16614afa5760405162461bcd60e51b815260040161040990615c5a565b60c9614b068382615d8a565b5060ca610cce8282615d8a565b600054610100900460ff16612ec05760405162461bcd60e51b815260040161040990615c5a565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614b795772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614ba5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614bc357662386f26fc10000830492506010015b6305f5e1008310614bdb576305f5e100830492506008015b6127108310614bef57612710830492506004015b60648310614c01576064830492506002015b600a8310610aff5760010192915050565b6060600061249e83614e17565b60008181526001830160205260408120548015614d08576000614c43600183615ab9565b8554909150600090614c5790600190615ab9565b9050818114614cbc576000866000018281548110614c7757614c77615b65565b9060005260206000200154905080876000018481548110614c9a57614c9a615b65565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614ccd57614ccd615e4a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610aff565b6000915050610aff565b614d1c8383614e73565b614d2960008484846149a2565b610cce5760405162461bcd60e51b815260040161040990615c08565b6000614d9a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661500a9092919063ffffffff16565b805190915015610cce5780806020019051810190614db89190615ca5565b610cce5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610409565b606081600001805480602002602001604051908101604052809291908181526020018280548015614e6757602002820191906000526020600020905b815481526020019060010190808311614e53575b50505050509050919050565b6001600160a01b038216614ec95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610409565b600081815260cb60205260409020546001600160a01b031615614f2e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610409565b614f3a600083836142d8565b600081815260cb60205260409020546001600160a01b031615614f9f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610409565b6001600160a01b038216600081815260cc602090815260408083208054600101905584835260cb90915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060612f1e848460008585600080866001600160a01b031685876040516150319190615e60565b60006040518083038185875af1925050503d806000811461506e576040519150601f19603f3d011682016040523d82523d6000602084013e615073565b606091505b50915091506111c587838387606083156150ee5782516000036150e7576001600160a01b0385163b6150e75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610409565b5081612f1e565b612f1e83838151156151035781518083602001fd5b8060405162461bcd60e51b81526004016104099190615211565b604051806080016040528060008152602001600081526020016151816040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b8152600060209091015290565b6001600160e01b03198116811461181957600080fd5b6000602082840312156151b657600080fd5b813561249e8161518e565b60005b838110156151dc5781810151838201526020016151c4565b50506000910152565b600081518084526151fd8160208601602086016151c1565b601f01601f19169290920160200192915050565b60208152600061249e60208301846151e5565b80356006811061523357600080fd5b919050565b6000806040838503121561524b57600080fd5b8235915061525b60208401615224565b90509250929050565b60006020828403121561527657600080fd5b5035919050565b6001600160a01b038116811461181957600080fd5b600080604083850312156152a557600080fd5b82356152b08161527d565b946020939093013593505050565b6000806000606084860312156152d357600080fd5b83359250602084013591506152ea60408501615224565b90509250925092565b60006020828403121561530557600080fd5b61249e82615224565b60008060006060848603121561532357600080fd5b833561532e8161527d565b9250602084013561533e8161527d565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561538e5761538e61534f565b604052919050565b600067ffffffffffffffff8211156153b0576153b061534f565b5060051b60200190565b600082601f8301126153cb57600080fd5b813560206153e06153db83615396565b615365565b8083825260208201915060208460051b87010193508684111561540257600080fd5b602086015b8481101561541e5780358352918301918301615407565b509695505050505050565b6000806000806080858703121561543f57600080fd5b843567ffffffffffffffff8082111561545757600080fd5b615463888389016153ba565b9550602087013594506040870135915061547c8261527d565b9092506060860135908082111561549257600080fd5b5061549f878288016153ba565b91505092959194509250565b600080604083850312156154be57600080fd5b8235915060208301356154d08161527d565b809150509250929050565b60008083601f8401126154ed57600080fd5b50813567ffffffffffffffff81111561550557600080fd5b6020830191508360208260051b850101111561552057600080fd5b9250929050565b801515811461181957600080fd5b600082601f83011261554657600080fd5b813560206155566153db83615396565b8083825260208201915060208460051b87010193508684111561557857600080fd5b602086015b8481101561541e57803561559081615527565b835291830191830161557d565b60008060008060008060006080888a0312156155b857600080fd5b873567ffffffffffffffff808211156155d057600080fd5b6155dc8b838c016154db565b909950975060208a01359150808211156155f557600080fd5b6156018b838c016154db565b909750955060408a013591508082111561561a57600080fd5b6156268b838c016154db565b909550935060608a013591508082111561563f57600080fd5b5061564c8a828b01615535565b91505092959891949750929550565b6000806040838503121561566e57600080fd5b8235915060208301356154d081615527565b6000806040838503121561569357600080fd5b823561569e8161527d565b915060208301356154d08161527d565b600080600080600060a086880312156156c657600080fd5b85356156d18161527d565b945060208601359350604086013592506060860135915060808601356156f681615527565b809150509295509295909350565b60006020828403121561571657600080fd5b813561249e8161527d565b634e487b7160e01b600052602160045260246000fd5b602081016006831061575957634e487b7160e01b600052602160045260246000fd5b91905290565b6000806000806080858703121561577557600080fd5b8435935060208501359250604085013561578e8161527d565b9396929550929360600135925050565b60008060008060008060008060a0898b0312156157ba57600080fd5b883567ffffffffffffffff808211156157d257600080fd5b6157de8c838d016154db565b909a50985060208b01359150808211156157f757600080fd5b6158038c838d016154db565b909850965060408b013591508082111561581c57600080fd5b6158288c838d016154db565b909650945060608b013591508082111561584157600080fd5b5061584e8b828c01615535565b925050608089013561585f8161527d565b809150509295985092959890939650565b6000806000806080858703121561588657600080fd5b84356158918161527d565b9350602085013592506040850135915060608501356158af81615527565b939692955090935050565b600080604083850312156158cd57600080fd5b82356158d88161527d565b915060208301356154d081615527565b600080600080608085870312156158fe57600080fd5b84359350602085013567ffffffffffffffff8082111561591d57600080fd5b615929888389016153ba565b94506040870135915061547c8261527d565b6000806000806080858703121561595157600080fd5b843561595c8161527d565b935060208581013561596d8161527d565b935060408601359250606086013567ffffffffffffffff8082111561599157600080fd5b818801915088601f8301126159a557600080fd5b8135818111156159b7576159b761534f565b6159c9601f8201601f19168501615365565b915080825289848285010111156159df57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080600060608486031215615a1457600080fd5b8335615a1f8161527d565b95602085013595506040909401359392505050565b600080600060608486031215615a4957600080fd5b83359250615a5960208501615224565b9150604084013590509250925092565b600181811c90821680615a7d57607f821691505b602082108103615a9d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610aff57610aff615aa3565b80820180821115610aff57610aff615aa3565b600082615afc57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610aff57610aff615aa3565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008351615b8d8184602088016151c1565b835190830190615ba18183602088016151c1565b01949350505050565b600060018201615bbc57615bbc615aa3565b5060010190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215615cb757600080fd5b815161249e81615527565b60018060a01b0384168152826020820152606060408201526000615ce960608301846151e5565b95945050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906142ce908301846151e5565b600060208284031215615d3757600080fd5b815161249e8161518e565b601f821115610cce576000816000526020600020601f850160051c81016020861015615d6b5750805b601f850160051c820191505b8181101561470057828155600101615d77565b815167ffffffffffffffff811115615da457615da461534f565b615db881615db28454615a69565b84615d42565b602080601f831160018114615ded5760008415615dd55750858301515b600019600386901b1c1916600185901b178555614700565b600085815260208120601f198616915b82811015615e1c57888601518255948401946001909101908401615dfd565b5085821015615e3a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b60008251615e728184602087016151c1565b919091019291505056fea26469706673582212205e9d1b540dfbda34926235ce82d8ed7c192678b18fd16817a25643f534d3285564736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103ba5760003560e01c806392415b08116101f4578063bae1cb5e1161011a578063df251974116100ad578063e985e9c51161007c578063e985e9c514610a5f578063ec09409514610a72578063eec83d8714610a96578063f2fde38b14610aa0576103ba565b8063df251974146109e3578063e1d514bd146109ed578063e30c397814610a0e578063e526789414610a1f576103ba565b8063cc8cb245116100e9578063cc8cb24514610992578063d0e6a790146109b3578063d8a82611146109c6578063dc5ec58f146109d0576103ba565b8063bae1cb5e14610927578063c4d66de814610948578063c682ee681461095b578063c87b56dd1461097f576103ba565b8063aaf5eb6811610192578063b1113baf11610161578063b1113baf146108a5578063b88d4fde146108d4578063b9e77c5f146108e7578063ba99c4df146108fb576103ba565b8063aaf5eb6814610860578063ab2d99db1461086f578063ad975d7114610879578063b04f9fc514610892576103ba565b80639ac1cc9d116101ce5780639ac1cc9d146107825780639b8b402914610827578063a1e37f731461083a578063a22cb4651461084d576103ba565b806392415b081461073657806395d89b411461076757806396aba9ca1461076f576103ba565b806342842e0e116102e45780636cbdce561161027757806379ba50971161024657806379ba5097146106e857806380e13a57146106f057806384cf379c146107115780638da5cb5b14610725576103ba565b80636cbdce561461069557806370a08231146106a9578063715018a6146106bc57806372b4c276146106c4576103ba565b80636352211e116102b35780636352211e1461064e57806366e1a92b146106615780636b2fe4c7146106745780636caa6b9b14610682576103ba565b806342842e0e146105e9578063535d9aaf146105fc57806358487c00146106285780635a4f459a1461063b576103ba565b8063171314f11161035c5780632879e8401161032b5780632879e840146105845780632eadea65146105ae5780633c4f743c146105c15780633d2cdbd1146105d5576103ba565b8063171314f11461053357806318e4451d1461053d5780631df595c71461055057806323b872dd14610571576103ba565b8063081812fc11610398578063081812fc146104af578063095ea7b3146104da57806312ba89ef146104ed57806314b3bdde1461051f576103ba565b806301ffc9a71461043857806306fdde031461046057806307b67fe814610475575b610137546001600160a01b0316806104125760405162461bcd60e51b8152602060048201526016602482015275125b5c1b195b595b9d185d1a5bdb881b9bdd081cd95d60521b60448201526064015b60405180910390fd5b3660008037600080366000845af43d6000803e808015610431573d6000f35b3d6000fd5b005b61044b6104463660046151a4565b610ab3565b60405190151581526020015b60405180910390f35b610468610b05565b6040516104579190615211565b6104a1610483366004615238565b61013e60209081526000928352604080842090915290825290205481565b604051908152602001610457565b6104c26104bd366004615264565b610b97565b6040516001600160a01b039091168152602001610457565b6104366104e8366004615292565b610bbe565b6104a16104fb3660046152be565b61014860209081526000938452604080852082529284528284209052825290205481565b610137546104c2906001600160a01b031681565b6104a161012d5481565b61043661054b366004615292565b610cd3565b6104a161055e3660046152f3565b6101466020526000908152604090205481565b61043661057f36600461530e565b61102b565b6104c26105923660046152f3565b610144602052600090815260409020546001600160a01b031681565b6104366105bc366004615429565b61105c565b610136546104c2906001600160a01b031681565b610131546104c2906001600160a01b031681565b6104366105f736600461530e565b6110eb565b6104a161060a3660046154ab565b61014560209081526000928352604080842090915290825290205481565b6104a161063636600461559d565b611106565b61043661064936600461565b565b6111d0565b6104c261065c366004615264565b611260565b61043661066f366004615680565b6112c0565b61012f5461044b9060ff1681565b6104366106903660046156ae565b611435565b610130546104c2906001600160a01b031681565b6104a16106b7366004615704565b611708565b61043661178e565b61044b6106d2366004615704565b61013a6020526000908152604090205460ff1681565b6104366117a2565b6104a16106fe3660046152f3565b6101476020526000908152604090205481565b610138546104c2906001600160a01b031681565b6033546001600160a01b03166104c2565b61075a610744366004615704565b61013b6020526000908152604090205460ff1681565b6040516104579190615737565b61046861181c565b61043661077d36600461575f565b61182b565b6107e6610790366004615238565b61013d60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0390951695939492939192909160ff169087565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091526080840152151560a083015260c082015260e001610457565b6104a161083536600461579e565b611f45565b610436610848366004615870565b612009565b61043661085b3660046158ba565b6121e6565b6104a1670de0b6b3a764000081565b6104a16101345481565b61012f546104c29061010090046001600160a01b031681565b6104366108a03660046158e8565b6121f1565b61044b6108b33660046154ab565b61014d60209081526000928352604080842090915290825290205460ff1681565b6104366108e236600461593b565b612261565b610132546104c2906001600160a01b031681565b6104a1610909366004615680565b61014c60209081526000928352604080842090915290825290205481565b6104a16109353660046152f3565b6101436020526000908152604090205481565b610436610956366004615704565b612293565b61044b610969366004615704565b61013c6020526000908152604090205460ff1681565b61046861098d366004615264565b612431565b6104a16109a03660046152f3565b6101396020526000908152604090205481565b6104366109c13660046159ff565b6124a5565b6104a16101335481565b6104366109de366004615292565b6126a7565b6104a161012e5481565b6104a16109fb3660046152f3565b6101426020526000908152604090205481565b6065546001600160a01b03166104c2565b610a32610a2d366004615a34565b612973565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610457565b61044b610a6d366004615680565b6129cc565b61044b610a80366004615264565b6101416020526000908152604090205460ff1681565b6104a16101355481565b610436610aae366004615704565b6129fa565b60006001600160e01b031982166380ac58cd60e01b1480610ae457506001600160e01b03198216635b5e139f60e01b145b80610aff57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060c98054610b1490615a69565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4090615a69565b8015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b5050505050905090565b6000610ba282612a6b565b50600090815260cd60205260409020546001600160a01b031690565b6000610bc982611260565b9050806001600160a01b0316836001600160a01b031603610c365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610409565b336001600160a01b0382161480610c525750610c5281336129cc565b610cc45760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610409565b610cce8383612ace565b505050565b610cdb612b3c565b6001600160a01b038216600090815261013b602090815260408083205484845261013d909252822060ff909116919081836005811115610d1d57610d1d615721565b6005811115610d2e57610d2e615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c0820152905033610da684611260565b6001600160a01b031614610dcd576040516330cd747160e01b815260040160405180910390fd5b8060a00151610def57604051632188f8ab60e01b815260040160405180910390fd5b600083815261014960205260408120610e3891846005811115610e1457610e14615721565b6005811115610e2557610e25615721565b8152602001908152602001600020612b95565b15610e5657604051630edc980960e31b815260040160405180910390fd5b600083815261014a60205260408120610e7b91846005811115610e1457610e14615721565b15610e995760405163b467a0cd60e01b815260040160405180910390fd5b80602001516101436000846005811115610eb557610eb5615721565b6005811115610ec657610ec6615721565b81526020019081526020016000206000828254610ee39190615ab9565b9091555062093a80905080610efc6303c2670042615acc565b610f069190615adf565b610f109190615b01565b6080820152600060a0820181905283815261013d602052604081208291846005811115610f3f57610f3f615721565b6005811115610f5057610f50615721565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b039091161781559183015160018301558201516002820155606082015160038201556080820151600482015560a082015160058201805460ff191691151591909117905560c090910151600690910155610fd3838284612b9f565b82846001600160a01b03167fc9fb777d8136f44985873ace5c35caab55be7de39e2ce670bd114eef67af9d18836020015160405161101391815260200190565b60405180910390a35050611027600160fb55565b5050565b6110353382612ec7565b6110515760405162461bcd60e51b815260040161040990615b18565b610cce838383612f26565b611064612b3c565b80518451146110865760405163b7c1140d60e01b815260040160405180910390fd5b835160005b818110156110d9576110d18682815181106110a8576110a8615b65565b602002602001015186868685815181106110c4576110c4615b65565b6020026020010151613095565b60010161108b565b50506110e5600160fb55565b50505050565b610cce83838360405180602001604052806000815250612261565b6000611110612b3c565b6111b988888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a91829185019084908082843760009201919091525050604080516020808b0282810182019093528a82529093508a9250899182918501908490808284376000920191909152508892506111b49150612aca9050565b6137b1565b90506111c5600160fb55565b979650505050505050565b610132546001600160a01b0316336001600160a01b0316146112055760405163c18384c160e01b815260040160405180910390fd5b60008281526101416020908152604091829020805460ff19168415159081179091558251858152918201527fa63b4de27d795de0f5597f73747fac943bc2864c1ef9fa81100950198d5030b391015b60405180910390a15050565b600081815260cb60205260408120546001600160a01b031680610aff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610409565b6112c8613b3d565b6001600160a01b03821661131e5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420466972737420457874656e73696f6e2041646472657373006044820152606401610409565b6001600160a01b0381166113745760405162461bcd60e51b815260206004820181905260248201527f496e76616c6964205365636f6e6420457874656e73696f6e20416464726573736044820152606401610409565b806001600160a01b0316826001600160a01b0316036113d55760405162461bcd60e51b815260206004820152601d60248201527f5375626d6974746564204964656e746963616c204164647265737365730000006044820152606401610409565b61013780546001600160a01b03199081166001600160a01b0385811691821790935561013880549092169284169283179091556040517f32a3d958ecac95e0e3171c39302bfe12bf0c8a65d10ab7cc4b423c96db1cce4690600090a35050565b61143d612b3c565b6001600160a01b038516600090815261013b602090815260408083205486845261013d909252822060ff90911691908183600581111561147f5761147f615721565b600581111561149057611490615721565b81526020019081526020016000209050600062093a808086426114b39190615acc565b6114bd9190615adf565b6114c79190615b01565b9050336114d387611260565b6001600160a01b0316146114fa576040516330cd747160e01b815260040160405180910390fd5b8660000361151b57604051631f2a200560e01b815260040160405180910390fd5b6000868152610141602052604090205460ff161561154c57604051637c9a1cf960e01b815260040160405180910390fd5b6000868152610140602052604090206115659089613b97565b61158257604051630587daa360e41b815260040160405180910390fd5b610139600084600581111561159957611599615721565b60058111156115aa576115aa615721565b8152602001908152602001600020548710156115d95760405163a0927dc360e01b815260040160405180910390fd5b6115e76303c2670042615acc565b8111156116075760405163f761f1cd60e01b815260040160405180910390fd5b6101345485101561162b576040516349eeb0b360e01b815260040160405180910390fd5b600582015460ff16156116845786610143600085600581111561165057611650615721565b600581111561166157611661615721565b8152602001908152602001600020600082825461167e9190615acc565b90915550505b6040805160e08101825283546001600160a01b0316815260018401546020820152600284015491810191909152600383015460608201526004808401546080830152600584015460ff16151560a0830152600684015460c08301526116f4918a9189918b9186918a918a33613bac565b505050611701600160fb55565b5050505050565b60006001600160a01b0382166117725760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610409565b506001600160a01b0316600090815260cc602052604090205490565b611796613b3d565b6117a0600061400c565b565b60655433906001600160a01b031681146118105760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610409565b6118198161400c565b50565b606060ca8054610b1490615a69565b611833612b3c565b6001600160a01b038216600090815261013b602090815260408083205487845261013d909252822060ff90911691908183600581111561187557611875615721565b600581111561188657611886615721565b815260208082019290925260409081016000908120825160e08101845281546001600160a01b03168152600182015481860152600282015481850152600382015460608201526004820154608082015260058083015460ff16151560a083015260069092015460c082015289835261013d90945291812092935091908290859081111561191557611915615721565b600581111561192657611926615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015290503361199e88611260565b6001600160a01b0316146119c5576040516330cd747160e01b815260040160405180910390fd5b81602001518411156119ea57604051636b2f218360e01b815260040160405180910390fd5b8160a00151611a0c57604051632188f8ab60e01b815260040160405180910390fd5b8060a00151611a2e57604051632188f8ab60e01b815260040160405180910390fd5b600086815261014d602090815260408083206001600160a01b038916845290915290205460ff1615611a7357604051631c6dc04d60e21b815260040160405180910390fd5b8382602001818151611a859190615ab9565b905250604081018051859190611a9c908390615acc565b905250600087815261014860209081526040808320898452909152812090846005811115611acc57611acc615721565b6005811115611add57611add615721565b815260200190815260200160002054600003611b7357600087815261014960205260408120611b4891889190866005811115611b1b57611b1b615721565b6005811115611b2c57611b2c615721565b815260200190815260200160002061402590919063ffffffff16565b50600086815261014a60205260408120611b7191899190866005811115611b1b57611b1b615721565b505b60008781526101486020908152604080832089845290915281208591856005811115611ba157611ba1615721565b6005811115611bb257611bb2615721565b81526020019081526020016000206000828254611bcf9190615acc565b9091555050600087815261013d602052604081208391856005811115611bf757611bf7615721565b6005811115611c0857611c08615721565b815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155848401516001820155848301516002820155606085015160038201556080850151600482015560a08501516005808301805460ff19169215159290921790915560c09095015160069091015589815261013d909252812083929091908690811115611ca657611ca6615721565b6005811115611cb757611cb7615721565b815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155848401516001820155848301516002820155606085015160038201556080850151600482015560a08501516005808301805460ff19169215159290921790915560c0909501516006909101558a815261013d9092528120611dda928a92908790811115611d5757611d57615721565b6005811115611d6857611d68615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015285612b9f565b600086815261013d60205260408120611e0291889190866005811115611d5757611d57615721565b6000868152610141602052604090205460ff1615611e7a576101325460405163032145f960e41b8152600481018890526001600160a01b03909116906332145f9090602401600060405180830381600087803b158015611e6157600080fd5b505af1158015611e75573d6000803e3d6000fd5b505050505b6000878152610141602052604090205460ff1615611ef2576101325460405163032145f960e41b8152600481018990526001600160a01b03909116906332145f9090602401600060405180830381600087803b158015611ed957600080fd5b505af1158015611eed573d6000803e3d6000fd5b505050505b604080516001600160a01b038716815260208101869052879189917fbbaa67ec741b8d492a4db3063da731d48d48b07eb4370b0f46fbe25b2dc8b30b910160405180910390a35050506110e5600160fb55565b6000611f4f612b3c565b611ff189898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a9182918501908490808284376000920191909152508992508891506137b19050565b9050611ffd600160fb55565b98975050505050505050565b612011612b3c565b6001600160a01b038416600090815261013b602090815260408083205486845261013d909252822060ff90911691908183600581111561205357612053615721565b600581111561206457612064615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c08201529050336120dc86611260565b6001600160a01b031614612103576040516330cd747160e01b815260040160405180910390fd5b8360000361212457604051631f2a200560e01b815260040160405180910390fd5b80602001516000036121495760405163f90e998d60e01b815260040160405180910390fd5b4281608001511115801561215f57508060a00151155b1561217d576040516307b7d7dd60e51b815260040160405180910390fd5b8060a00151156121d35783610143600084600581111561219f5761219f615721565b60058111156121b0576121b0615721565b815260200190815260200160002060008282546121cd9190615acc565b90915550505b6110d98686866000878660028933613bac565b611027338383614031565b6121f9612b3c565b805183511461221b5760405163b7c1140d60e01b815260040160405180910390fd5b825160005b818110156110d9576122598686838151811061223e5761223e615b65565b6020026020010151868685815181106110c4576110c4615b65565b600101612220565b61226b3383612ec7565b6122875760405162461bcd60e51b815260040161040990615b18565b6110e5848484846140ff565b600054610100900460ff16158080156122b35750600054600160ff909116105b806122cd5750303b1580156122cd575060005460ff166001145b6123305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610409565b6000805460ff191660011790558015612353576000805461ff0019166101001790555b61235b614132565b61239f604051806040016040528060058152602001643b32a4a7a760d91b815250604051806040016040528060058152602001643b32a4a7a760d91b815250614161565b6123a7614192565b61013680546001600160a01b0319166001600160a01b0384169081179091556040517f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e690600090a28015611027576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611254565b606061243c82612a6b565b600061245360408051602081019091526000815290565b90506000815111612473576040518060200160405280600081525061249e565b8061247d846141c1565b60405160200161248e929190615b7b565b6040516020818303038152906040525b9392505050565b6124ad612b3c565b6001600160a01b038316600090815261013b602090815260408083205485845261013d909252822060ff9091169190818360058111156124ef576124ef615721565b600581111561250057612500615721565b815260208082019290925260409081016000908120825160e08101845281546001600160a01b031681526001820154948101949094526002810154928401929092526003820154606084015260048201546080840152600582015460ff16151560a084015260069091015460c083015290915062093a80806125828642615acc565b61258c9190615adf565b6125969190615b01565b9050336125a286611260565b6001600160a01b0316146125c9576040516330cd747160e01b815260040160405180910390fd5b8160a00151156125ec576040516334d10f9560e11b815260040160405180910390fd5b42826080015111612610576040516307b7d7dd60e51b815260040160405180910390fd5b60008260200151116126355760405163f90e998d60e01b815260040160405180910390fd5b8160800151811161265957604051638e6b5b6760e01b815260040160405180910390fd5b6126676303c2670042615acc565b8111156126875760405163f761f1cd60e01b815260040160405180910390fd5b61269a8686600084818760038a33613bac565b505050610cce600160fb55565b6126af612b3c565b6001600160a01b038216600090815261013b602090815260408083205484845261013d909252822060ff9091169190818360058111156126f1576126f1615721565b600581111561270257612702615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015290503361277a84611260565b6001600160a01b0316146127a1576040516330cd747160e01b815260040160405180910390fd5b8060a00151156127c4576040516334d10f9560e11b815260040160405180910390fd5b428160800151116127e8576040516307b7d7dd60e51b815260040160405180910390fd5b600081602001511161280d5760405163f90e998d60e01b815260040160405180910390fd5b8060200151610143600084600581111561282957612829615721565b600581111561283a5761283a615721565b815260200190815260200160002060008282546128579190615acc565b909155505060006080820152600160a08201526128776303c26700614254565b60c0820152600083815261013d60205260408120829184600581111561289f5761289f615721565b60058111156128b0576128b0615721565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b039091161781559183015160018301558201516002820155606082015160038201556080820151600482015560a082015160058201805460ff191691151591909117905560c090910151600690910155612933838284612b9f565b82846001600160a01b03167f1279589865a24f47c3f488c43a66e99bc3a86581aa876fe4e640fee1ad59de15836020015160405161101391815260200190565b61013f60205282600052604060002060205281600052604060002081633b9aca00811061299f57600080fd5b60060201805460018201546002830154600384015460048501546005909501549397509195509350919086565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b612a02613b3d565b606580546001600160a01b0383166001600160a01b03199091168117909155612a336033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600081815260cb60205260409020546001600160a01b03166118195760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610409565b3390565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612b0382611260565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600260fb5403612b8e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610409565b600260fb55565b6000610aff825490565b612bd86040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8260a00151612be8576000612bee565b82602001515b608082015260a0830151612c03576000612c09565b82604001515b60a0820152608083015142108015612c25575060008360200151115b15612c65576303c267008360200151612c3e9190615adf565b60208201526080830151612c53904290615ab9565b8160200151612c629190615b01565b81525b42604080830191909152436060830152600085815261013e60205290812081846005811115612c9657612c96615721565b6005811115612ca757612ca7615721565b815260200190815260200160002054905080600014158015612d245750600085815261013f602052604081204291856005811115612ce757612ce7615721565b6005811115612cf857612cf8615721565b815260200190815260200160002082633b9aca008110612d1a57612d1a615b65565b6006020160020154145b15612dc757600085815261013f602052604081208391856005811115612d4c57612d4c615721565b6005811115612d5d57612d5d615721565b815260200190815260200160002082633b9aca008110612d7f57612d7f615b65565b60060201600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050611701565b612dd081615baa565b600086815261013e60205260408120919250829190856005811115612df757612df7615721565b6005811115612e0857612e08615721565b8152602001908152602001600020819055508161013f60008781526020019081526020016000206000856005811115612e4357612e43615721565b6005811115612e5457612e54615721565b815260200190815260200160002082633b9aca008110612e7657612e76615b65565b60060201600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050505050505050565b600160fb55565b600080612ed383611260565b9050806001600160a01b0316846001600160a01b03161480612efa5750612efa81856129cc565b80612f1e5750836001600160a01b0316612f1384610b97565b6001600160a01b0316145b949350505050565b826001600160a01b0316612f3982611260565b6001600160a01b031614612f5f5760405162461bcd60e51b815260040161040990615bc3565b6001600160a01b038216612fc15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610409565b612fcc8383836142d8565b826001600160a01b0316612fdf82611260565b6001600160a01b0316146130055760405162461bcd60e51b815260040161040990615bc3565b600081815260cd6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260cc855283862080546000190190559087168086528386208054600101905586865260cb90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216600090815261013b602090815260408083205487845261013d909252822060ff9091169190818360058111156130d7576130d7615721565b60058111156130e8576130e8615721565b815260208082019290925260409081016000908120825160e08101845281546001600160a01b03168152600182015481860152600282015481850152600382015460608201526004820154608082015260058083015460ff16151560a083015260069092015460c082015289835261013d90945291812092935091908290859081111561317757613177615721565b600581111561318857613188615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015290503361320088611260565b6001600160a01b03161415801561322857503361321c87611260565b6001600160a01b031614155b15613246576040516330cd747160e01b815260040160405180910390fd5b60008781526101486020908152604080832089845290915281209084600581111561327357613273615721565b600581111561328457613284615721565b8152602001908152602001600020546000036132bd5760405163102d5cc760e01b81526004810188905260248101879052604401610409565b6000878152610148602090815260408083208984529091528120908460058111156132ea576132ea615721565b60058111156132fb576132fb615721565b81526020019081526020016000205484116133165783613364565b60008781526101486020908152604080832089845290915281209084600581111561334357613343615721565b600581111561335457613354615721565b8152602001908152602001600020545b935083816040018181516133789190615ab9565b90525060208201805185919061338f908390615acc565b905250600087815261014860209081526040808320898452909152812085918560058111156133c0576133c0615721565b60058111156133d1576133d1615721565b815260200190815260200160002060008282546133ee9190615ab9565b909155505060008781526101486020908152604080832089845290915281209084600581111561342057613420615721565b600581111561343157613431615721565b8152602001908152602001600020546000036134c75760008781526101496020526040812061349c9188919086600581111561346f5761346f615721565b600581111561348057613480615721565b815260200190815260200160002061470890919063ffffffff16565b50600086815261014a602052604081206134c59189919086600581111561346f5761346f615721565b505b600086815261013d6020526040812082918560058111156134ea576134ea615721565b60058111156134fb576134fb615721565b815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155848401516001820155848301516002820155606085015160038201556080850151600482015560a08501516005808301805460ff19169215159290921790915560c0909501516006909101558a815261013d90925281208492909190869081111561359957613599615721565b60058111156135aa576135aa615721565b815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155848401516001820155848301516002820155606085015160038201556080850151600482015560a08501516005808301805460ff19169215159290921790915560c09095015160069091015589815261013d909252812061364a928992908790811115611d5757611d57615721565b600087815261013d6020526040812061367291899190866005811115611d5757611d57615721565b6000868152610141602052604090205460ff16156136ea576101325460405163032145f960e41b8152600481018890526001600160a01b03909116906332145f9090602401600060405180830381600087803b1580156136d157600080fd5b505af11580156136e5573d6000803e3d6000fd5b505050505b6000878152610141602052604090205460ff1615613762576101325460405163032145f960e41b8152600481018990526001600160a01b03909116906332145f9090602401600060405180830381600087803b15801561374957600080fd5b505af115801561375d573d6000803e3d6000fd5b505050505b604080516001600160a01b038716815260208101869052879189917f808381795a343c1feb4679e53b6f0a9f56bb9da80d2bef0b5526fc9d6226065d910160405180910390a350505050505050565b60008061012d600081546137c490615baa565b918290555087519091506137d88483614714565b865188511415806137eb57508551875114155b806137f857508451865114155b156138165760405163b7c1140d60e01b815260040160405180910390fd5b60005b81811015613b3057600061013b60008b848151811061383a5761383a615b65565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff169050600062093a80808a858151811061388b5761388b615b65565b60200260200101514261389e9190615acc565b6138a89190615adf565b6138b29190615b01565b90506138f38b84815181106138c9576138c9615b65565b60200260200101516101406000888152602001908152602001600020613b9790919063ffffffff16565b61391057604051630587daa360e41b815260040160405180910390fd5b89838151811061392257613922615b65565b602002602001015160000361394a57604051631f2a200560e01b815260040160405180910390fd5b6101345489848151811061396057613960615b65565b60200260200101511015613987576040516349eeb0b360e01b815260040160405180910390fd5b6139956303c2670042615acc565b8111156139b55760405163f761f1cd60e01b815260040160405180910390fd5b61013960008360058111156139cc576139cc615721565b60058111156139dd576139dd615721565b8152602001908152602001600020548a84815181106139fe576139fe615b65565b60200260200101511015613a255760405163a0927dc360e01b815260040160405180910390fd5b613b268b8481518110613a3a57613a3a615b65565b6020026020010151868c8681518110613a5557613a55615b65565b6020026020010151848c8881518110613a7057613a70615b65565b602002602001015161013d60008c81526020019081526020016000206000896005811115613aa057613aa0615721565b6005811115613ab157613ab1615721565b81526020808201929092526040908101600020815160e08101835281546001600160a01b03168152600180830154948201949094526002820154928101929092526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c082015290898f613bac565b5050600101613819565b5090979650505050505050565b6033546001600160a01b031633146117a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610409565b600061249e836001600160a01b03841661472e565b6001600160a01b038916600090815261013a602052604090205460ff16613be6576040516307c241ad60e51b815260040160405180910390fd5b613bee61511d565b6101426000846005811115613c0557613c05615721565b6005811115613c1657613c16615721565b8152602081019190915260400160002054808252613c35908990615acc565b6101426000856005811115613c4c57613c4c615721565b6005811115613c5d57613c5d615721565b81526020019081526020016000208190555084600001518560200151866060015187608001518860a001518960c0015186604001516000018760400151602001886040015160600189604001516080018a6040015160a0018b6040015160c001868152508615151515815250868152508681525086815250866001600160a01b03166001600160a01b0316815250505050505050898160400151600001906001600160a01b031690816001600160a01b031681525050878160400151602001818151613d299190615acc565b9052508615613d8b57806040015160600151600003613d4f576040810151426060909101525b604081018051608090810189905290516060810151910151613d719190615ab9565b60208201819052613d8190614254565b604082015160c001525b60408082015160008b815261013d6020529182209091856005811115613db357613db3615721565b6005811115613dc457613dc4615721565b81526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155918301516001830155828101516002830155606083015160038301556080830151600483015560a083015160058301805460ff191691151591909117905560c090920151600690910155810151613e4c908a9085612b9f565b3360608201528715613f15578761014c6000613e678c611260565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160a01b03166001600160a01b031681526020019081526020016000206000828254613eb99190615acc565b90915550506060810151613ed9906001600160a01b038c1690308b61477d565b600080613ee5856147d7565b90925090506001600160a01b03821615801590613eff5750875b15613f1257613f12848c8e8d8686614838565b50505b836004811115613f2757613f27615721565b89836001600160a01b03167f8835c22a0c751188de86681e15904223c054bedd5c68ec8858945b78312902738b85604001516080015142604051613f7e939291909283526020830191909152604082015260600190565b60405180910390a480517f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c906101426000866005811115613fc157613fc1615721565b6005811115613fd257613fd2615721565b815260200190815260200160002054604051613ff8929190918252602082015260400190565b60405180910390a150505050505050505050565b606580546001600160a01b031916905561181981614950565b600061249e838361472e565b816001600160a01b0316836001600160a01b0316036140925760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610409565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61410a848484612f26565b614116848484846149a2565b6110e55760405162461bcd60e51b815260040161040990615c08565b600054610100900460ff166141595760405162461bcd60e51b815260040161040990615c5a565b6117a0614aa3565b600054610100900460ff166141885760405162461bcd60e51b815260040161040990615c5a565b6110278282614ad3565b600054610100900460ff166141b95760405162461bcd60e51b815260040161040990615c5a565b6117a0614b13565b606060006141ce83614b3a565b600101905060008167ffffffffffffffff8111156141ee576141ee61534f565b6040519080825280601f01601f191660200182016040528015614218576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461422257509392505050565b610134546000906303c26700670de0b6b3a7640000671bc16d674ec800008386116142825750949350505050565b8286106142925795945050505050565b61429c8484615ab9565b6142a68383615ab9565b6142b08689615ab9565b6142ba9190615b01565b6142c49190615adf565b6142ce9083615acc565b9695505050505050565b6001600160a01b0383161561430c576001600160a01b038316600090815261014b6020526040902061430a9082614708565b505b6001600160a01b03821615614340576001600160a01b038216600090815261014b6020526040902061433e9082614025565b505b6001600160a01b0383161580159061436057506001600160a01b03821615155b15610cce5760008181526101406020526040812061437d90614c12565b805190915060005b818110156147005760008382815181106143a1576143a1615b65565b6020908102919091018101516001600160a01b038116600090815261013b8352604080822054898352610149909452812091935060ff909216919061441790828460058111156143f3576143f3615721565b600581111561440457614404615721565b8152602001908152602001600020614c12565b90506000815167ffffffffffffffff8111156144355761443561534f565b60405190808252806020026020018201604052801561445e578160200160208202803683370190505b50825190915060005b818110156144975760001983828151811061448457614484615b65565b6020908102919091010152600101614467565b5080156144aa576144aa898487856121f1565b6000898152610145602090815260408083206001600160a01b0389168452909152902054801561458057600061014460008760058111156144ed576144ed615721565b60058111156144fe576144fe615721565b81526020810191909152604090810160002054905163e31d753160e01b81526001600160a01b038f811660048301528e81166024830152604482018590529091169150819063e31d753190606401600060405180830381600087803b15801561456657600080fd5b505af115801561457a573d6000803e3d6000fd5b50505050505b60008a815261013d60205260408120818760058111156145a2576145a2615721565b60058111156145b3576145b3615721565b81526020019081526020016000206040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016006820154815250509050806020015161014c60008f6001600160a01b03166001600160a01b031681526020019081526020016000206000896001600160a01b03166001600160a01b0316815260200190815260200160002060008282546146a79190615ab9565b90915550506020808201516001600160a01b03808f16600090815261014c84526040808220928c1682529190935282208054919290916146e8908490615acc565b90915550506001909701965061438595505050505050565b505050505050565b600061249e8383614c1f565b611027828260405180602001604052806000815250614d12565b600081815260018301602052604081205461477557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610aff565b506000610aff565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526110e5908590614d45565b60006060600061014460008560058111156147f4576147f4615721565b600581111561480557614805615721565b81526020808201929092526040908101600090812054825193840190925282526001600160a01b03169590945092505050565b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820185905285169063095ea7b3906044016020604051808303816000875af1158015614887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148ab9190615ca5565b50604051633e12170f60e01b81526001600160a01b03831690633e12170f906148dc90899087908690600401615cc2565b600060405180830381600087803b1580156148f657600080fd5b505af115801561490a573d6000803e3d6000fd5b5050506000868152610145602090815260408083206001600160a01b038916845290915281208054869350909190614943908490615acc565b9091555050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b15614a9857604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906149e6903390899088908890600401615cf2565b6020604051808303816000875af1925050508015614a21575060408051601f3d908101601f19168201909252614a1e91810190615d25565b60015b614a7e573d808015614a4f576040519150601f19603f3d011682016040523d82523d6000602084013e614a54565b606091505b508051600003614a765760405162461bcd60e51b815260040161040990615c08565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612f1e565b506001949350505050565b600054610100900460ff16614aca5760405162461bcd60e51b815260040161040990615c5a565b6117a03361400c565b600054610100900460ff16614afa5760405162461bcd60e51b815260040161040990615c5a565b60c9614b068382615d8a565b5060ca610cce8282615d8a565b600054610100900460ff16612ec05760405162461bcd60e51b815260040161040990615c5a565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614b795772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614ba5576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614bc357662386f26fc10000830492506010015b6305f5e1008310614bdb576305f5e100830492506008015b6127108310614bef57612710830492506004015b60648310614c01576064830492506002015b600a8310610aff5760010192915050565b6060600061249e83614e17565b60008181526001830160205260408120548015614d08576000614c43600183615ab9565b8554909150600090614c5790600190615ab9565b9050818114614cbc576000866000018281548110614c7757614c77615b65565b9060005260206000200154905080876000018481548110614c9a57614c9a615b65565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614ccd57614ccd615e4a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610aff565b6000915050610aff565b614d1c8383614e73565b614d2960008484846149a2565b610cce5760405162461bcd60e51b815260040161040990615c08565b6000614d9a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661500a9092919063ffffffff16565b805190915015610cce5780806020019051810190614db89190615ca5565b610cce5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610409565b606081600001805480602002602001604051908101604052809291908181526020018280548015614e6757602002820191906000526020600020905b815481526020019060010190808311614e53575b50505050509050919050565b6001600160a01b038216614ec95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610409565b600081815260cb60205260409020546001600160a01b031615614f2e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610409565b614f3a600083836142d8565b600081815260cb60205260409020546001600160a01b031615614f9f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610409565b6001600160a01b038216600081815260cc602090815260408083208054600101905584835260cb90915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060612f1e848460008585600080866001600160a01b031685876040516150319190615e60565b60006040518083038185875af1925050503d806000811461506e576040519150601f19603f3d011682016040523d82523d6000602084013e615073565b606091505b50915091506111c587838387606083156150ee5782516000036150e7576001600160a01b0385163b6150e75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610409565b5081612f1e565b612f1e83838151156151035781518083602001fd5b8060405162461bcd60e51b81526004016104099190615211565b604051806080016040528060008152602001600081526020016151816040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b8152600060209091015290565b6001600160e01b03198116811461181957600080fd5b6000602082840312156151b657600080fd5b813561249e8161518e565b60005b838110156151dc5781810151838201526020016151c4565b50506000910152565b600081518084526151fd8160208601602086016151c1565b601f01601f19169290920160200192915050565b60208152600061249e60208301846151e5565b80356006811061523357600080fd5b919050565b6000806040838503121561524b57600080fd5b8235915061525b60208401615224565b90509250929050565b60006020828403121561527657600080fd5b5035919050565b6001600160a01b038116811461181957600080fd5b600080604083850312156152a557600080fd5b82356152b08161527d565b946020939093013593505050565b6000806000606084860312156152d357600080fd5b83359250602084013591506152ea60408501615224565b90509250925092565b60006020828403121561530557600080fd5b61249e82615224565b60008060006060848603121561532357600080fd5b833561532e8161527d565b9250602084013561533e8161527d565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561538e5761538e61534f565b604052919050565b600067ffffffffffffffff8211156153b0576153b061534f565b5060051b60200190565b600082601f8301126153cb57600080fd5b813560206153e06153db83615396565b615365565b8083825260208201915060208460051b87010193508684111561540257600080fd5b602086015b8481101561541e5780358352918301918301615407565b509695505050505050565b6000806000806080858703121561543f57600080fd5b843567ffffffffffffffff8082111561545757600080fd5b615463888389016153ba565b9550602087013594506040870135915061547c8261527d565b9092506060860135908082111561549257600080fd5b5061549f878288016153ba565b91505092959194509250565b600080604083850312156154be57600080fd5b8235915060208301356154d08161527d565b809150509250929050565b60008083601f8401126154ed57600080fd5b50813567ffffffffffffffff81111561550557600080fd5b6020830191508360208260051b850101111561552057600080fd5b9250929050565b801515811461181957600080fd5b600082601f83011261554657600080fd5b813560206155566153db83615396565b8083825260208201915060208460051b87010193508684111561557857600080fd5b602086015b8481101561541e57803561559081615527565b835291830191830161557d565b60008060008060008060006080888a0312156155b857600080fd5b873567ffffffffffffffff808211156155d057600080fd5b6155dc8b838c016154db565b909950975060208a01359150808211156155f557600080fd5b6156018b838c016154db565b909750955060408a013591508082111561561a57600080fd5b6156268b838c016154db565b909550935060608a013591508082111561563f57600080fd5b5061564c8a828b01615535565b91505092959891949750929550565b6000806040838503121561566e57600080fd5b8235915060208301356154d081615527565b6000806040838503121561569357600080fd5b823561569e8161527d565b915060208301356154d08161527d565b600080600080600060a086880312156156c657600080fd5b85356156d18161527d565b945060208601359350604086013592506060860135915060808601356156f681615527565b809150509295509295909350565b60006020828403121561571657600080fd5b813561249e8161527d565b634e487b7160e01b600052602160045260246000fd5b602081016006831061575957634e487b7160e01b600052602160045260246000fd5b91905290565b6000806000806080858703121561577557600080fd5b8435935060208501359250604085013561578e8161527d565b9396929550929360600135925050565b60008060008060008060008060a0898b0312156157ba57600080fd5b883567ffffffffffffffff808211156157d257600080fd5b6157de8c838d016154db565b909a50985060208b01359150808211156157f757600080fd5b6158038c838d016154db565b909850965060408b013591508082111561581c57600080fd5b6158288c838d016154db565b909650945060608b013591508082111561584157600080fd5b5061584e8b828c01615535565b925050608089013561585f8161527d565b809150509295985092959890939650565b6000806000806080858703121561588657600080fd5b84356158918161527d565b9350602085013592506040850135915060608501356158af81615527565b939692955090935050565b600080604083850312156158cd57600080fd5b82356158d88161527d565b915060208301356154d081615527565b600080600080608085870312156158fe57600080fd5b84359350602085013567ffffffffffffffff8082111561591d57600080fd5b615929888389016153ba565b94506040870135915061547c8261527d565b6000806000806080858703121561595157600080fd5b843561595c8161527d565b935060208581013561596d8161527d565b935060408601359250606086013567ffffffffffffffff8082111561599157600080fd5b818801915088601f8301126159a557600080fd5b8135818111156159b7576159b761534f565b6159c9601f8201601f19168501615365565b915080825289848285010111156159df57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080600060608486031215615a1457600080fd5b8335615a1f8161527d565b95602085013595506040909401359392505050565b600080600060608486031215615a4957600080fd5b83359250615a5960208501615224565b9150604084013590509250925092565b600181811c90821680615a7d57607f821691505b602082108103615a9d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610aff57610aff615aa3565b80820180821115610aff57610aff615aa3565b600082615afc57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610aff57610aff615aa3565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008351615b8d8184602088016151c1565b835190830190615ba18183602088016151c1565b01949350505050565b600060018201615bbc57615bbc615aa3565b5060010190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215615cb757600080fd5b815161249e81615527565b60018060a01b0384168152826020820152606060408201526000615ce960608301846151e5565b95945050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906142ce908301846151e5565b600060208284031215615d3757600080fd5b815161249e8161518e565b601f821115610cce576000816000526020600020601f850160051c81016020861015615d6b5750805b601f850160051c820191505b8181101561470057828155600101615d77565b815167ffffffffffffffff811115615da457615da461534f565b615db881615db28454615a69565b84615d42565b602080601f831160018114615ded5760008415615dd55750858301515b600019600386901b1c1916600185901b178555614700565b600085815260208120601f198616915b82811015615e1c57888601518255948401946001909101908401615dfd565b5085821015615e3a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b60008251615e728184602087016151c1565b919091019291505056fea26469706673582212205e9d1b540dfbda34926235ce82d8ed7c192678b18fd16817a25643f534d3285564736f6c63430008160033",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "createLock(address[],uint256[],uint256[],bool[])": {
        "params": {
          "_duration": "Array of lock durations",
          "_stakeUnderlying": "Array of booleans indicating whether to stake underlying tokens",
          "_tokenAddress": "Array of token addresses to lock",
          "_tokenAmount": "Array of token amounts to lock"
        },
        "returns": {
          "_0": "The ID of the newly created veNFT"
        }
      },
      "createLockFor(address[],uint256[],uint256[],bool[],address)": {
        "params": {
          "_duration": "Array of lock durations",
          "_stakeUnderlying": "Array of booleans indicating whether to stake underlying tokens",
          "_to": "Address to assign the lock to",
          "_tokenAddress": "Array of token addresses to lock",
          "_tokenAmount": "Array of token amounts to lock"
        },
        "returns": {
          "_0": "The ID of the newly created veNFT"
        }
      },
      "delegate(uint256,uint256,address,uint256)": {
        "params": {
          "amount": "The amount of voting power to delegate.",
          "fromTokenId": "The ID of the veNFT from which voting power is delegated.",
          "lpToken": "The address of the LP token associated with the delegation.",
          "toTokenId": "The ID of the veNFT to which voting power is delegated."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "increaseAmount(address,uint256,uint256,bool)": {
        "params": {
          "_stakeUnderlying": "Whether to stake the underlying tokens",
          "_tokenAddress": "Address of the token to increase lock amount for",
          "_tokenAmount": "Amount of tokens to add to the lock",
          "_tokenId": "ID of the veNFT"
        }
      },
      "increaseUnlockTime(address,uint256,uint256)": {
        "params": {
          "_lockDuration": "New lock duration to extend to",
          "_tokenAddress": "Address of the token",
          "_tokenId": "ID of the veNFT"
        }
      },
      "initialize(address)": {
        "details": "This function is called only once during the contract deployment. It initializes the Ownable, ERC721, and ReentrancyGuard modules.",
        "params": {
          "_ap": "The AddressesProvider contract used for address management."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "lockAdditionalAsset(address,uint256,uint256,uint256,bool)": {
        "params": {
          "_duration": "Duration of the lock",
          "_stakeUnderlying": "Whether to stake the underlying tokens",
          "_tokenAddress": "Address of the new token to lock",
          "_tokenAmount": "Amount of tokens to lock",
          "_tokenId": "ID of the veNFT"
        }
      },
      "lockPermanent(address,uint256)": {
        "params": {
          "_tokenAddress": "The address of the token to lock.",
          "_tokenId": "The ID of the token to lock."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removeDelegatees(uint256,uint256[],address,uint256[])": {
        "params": {
          "amounts": "Array of amounts of voting power to remove from each delegatee",
          "fromTokenId": "ID of the veNFT from which delegatees are removed",
          "lpToken": "Address of the LP token associated with the delegation",
          "toTokenIds": "Array of veNFT IDs that are delegatees to be removed"
        }
      },
      "removeDelegators(uint256[],uint256,address,uint256[])": {
        "params": {
          "amounts": "Array of amounts of voting power to remove from each delegator",
          "fromTokenIds": "Array of veNFT IDs that are delegators to be removed",
          "lpToken": "Address of the LP token associated with the delegation",
          "toTokenId": "ID of the veNFT from which delegators are removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setExtensions(address,address)": {
        "details": "This function can only be called by authorized entities.",
        "params": {
          "_veIONFirstExtension": "The address of the first extension contract.",
          "_veIONSecondExtension": "The address of the second extension contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unlockPermanent(address,uint256)": {
        "params": {
          "_tokenAddress": "The address of the token to unlock.",
          "_tokenId": "The ID of the token to unlock."
        }
      },
      "voting(uint256,bool)": {
        "params": {
          "_tokenId": "ID of the veNFT",
          "_voting": "Voting status"
        }
      }
    },
    "title": "veION Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PRECISION()": {
        "notice": "Precision used for calculations, set to 1e18."
      },
      "ap()": {
        "notice": "The AddressesProvider contract used for address management."
      },
      "createLock(address[],uint256[],uint256[],bool[])": {
        "notice": "Creates a new lock for multiple tokens"
      },
      "createLockFor(address[],uint256[],uint256[],bool[],address)": {
        "notice": "Creates a new lock for multiple tokens and assigns it to a specified address"
      },
      "delegate(uint256,uint256,address,uint256)": {
        "notice": "Delegates voting power from one veNFT to another."
      },
      "increaseAmount(address,uint256,uint256,bool)": {
        "notice": "Increases the amount of tokens locked for a specific veNFT"
      },
      "increaseUnlockTime(address,uint256,uint256)": {
        "notice": "Increases the lock duration for a specific token in a veNFT"
      },
      "initialize(address)": {
        "notice": "Initializes the veION contract with the given AddressesProvider."
      },
      "lockAdditionalAsset(address,uint256,uint256,uint256,bool)": {
        "notice": "Locks additional asset type for an existing veNFT"
      },
      "lockPermanent(address,uint256)": {
        "notice": "Locks a token permanently."
      },
      "removeDelegatees(uint256,uint256[],address,uint256[])": {
        "notice": "Removes delegatees from a specific veNFT"
      },
      "removeDelegators(uint256[],uint256,address,uint256[])": {
        "notice": "Removes delegators from a specific veNFT"
      },
      "s_aeroVoterBoost()": {
        "notice": "The boost amount for AeroVoter."
      },
      "s_aeroVoting()": {
        "notice": "Address of the AeroVoting contract."
      },
      "s_ionicPool()": {
        "notice": "Address of the Ionic Pool."
      },
      "s_limitedBoost()": {
        "notice": "The amount of limited boost available."
      },
      "s_limitedBoostActive()": {
        "notice": "Indicates whether the limited boost is active."
      },
      "s_maxEarlyWithdrawFee()": {
        "notice": "The maximum fee for early withdrawal."
      },
      "s_minimumLockDuration()": {
        "notice": "The minimum duration for locking."
      },
      "s_tokenId()": {
        "notice": "The current token ID counter."
      },
      "s_veAERO()": {
        "notice": "Address of the veAERO contract."
      },
      "s_voter()": {
        "notice": "Address of the voter contract."
      },
      "setExtensions(address,address)": {
        "notice": "Sets the implementation addresses for the veION contract extensions."
      },
      "unlockPermanent(address,uint256)": {
        "notice": "Unlocks a permanently locked token."
      },
      "veIONFirstExtension()": {
        "notice": "The address of the logic contract for the veION first extension."
      },
      "veIONSecondExtension()": {
        "notice": "The address of the logic contract for the veION second extension."
      },
      "voting(uint256,bool)": {
        "notice": "Updates voting status for a veNFT"
      }
    },
    "notice": "This contract manages the veION framework, enabling the staking and management LP tokens for voting power.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1946,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2165,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 508,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 510,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 514,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_owners",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 518,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_balances",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 522,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 528,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1459,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7931,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_tokenId",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 7934,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_limitedBoost",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 7937,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_limitedBoostActive",
        "offset": 0,
        "slot": "303",
        "type": "t_bool"
      },
      {
        "astId": 7940,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_veAERO",
        "offset": 1,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 7943,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_aeroVoting",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 7946,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_ionicPool",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 7949,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_voter",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 7952,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_aeroVoterBoost",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 7955,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_minimumLockDuration",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 7958,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_maxEarlyWithdrawFee",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 7962,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "ap",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IAddressesProvider)5089"
      },
      {
        "astId": 7965,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "veIONFirstExtension",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      },
      {
        "astId": 7968,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "veIONSecondExtension",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 7974,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_minimumLockAmount",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_enum(LpTokenType)5172,t_uint256)"
      },
      {
        "astId": 7979,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_whitelistedToken",
        "offset": 0,
        "slot": "314",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7985,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_lpType",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_address,t_enum(LpTokenType)5172)"
      },
      {
        "astId": 7990,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_canSplit",
        "offset": 0,
        "slot": "316",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7999,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_locked",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_struct(LockedBalance)5115_storage))"
      },
      {
        "astId": 8007,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_userPointEpoch",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_uint256))"
      },
      {
        "astId": 8018,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_userPointHistory",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_array(t_struct(UserPoint)5135_storage)1000000000_storage))"
      },
      {
        "astId": 8024,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_assetsLocked",
        "offset": 0,
        "slot": "320",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)4094_storage)"
      },
      {
        "astId": 8029,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_voted",
        "offset": 0,
        "slot": "321",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 8035,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_supply",
        "offset": 0,
        "slot": "322",
        "type": "t_mapping(t_enum(LpTokenType)5172,t_uint256)"
      },
      {
        "astId": 8041,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_permanentLockBalance",
        "offset": 0,
        "slot": "323",
        "type": "t_mapping(t_enum(LpTokenType)5172,t_uint256)"
      },
      {
        "astId": 8048,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_stakeStrategy",
        "offset": 0,
        "slot": "324",
        "type": "t_mapping(t_enum(LpTokenType)5172,t_contract(IStakeStrategy)5632)"
      },
      {
        "astId": 8055,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_underlyingStake",
        "offset": 0,
        "slot": "325",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8061,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_protocolFees",
        "offset": 0,
        "slot": "326",
        "type": "t_mapping(t_enum(LpTokenType)5172,t_uint256)"
      },
      {
        "astId": 8067,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_distributedFees",
        "offset": 0,
        "slot": "327",
        "type": "t_mapping(t_enum(LpTokenType)5172,t_uint256)"
      },
      {
        "astId": 8077,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_delegations",
        "offset": 0,
        "slot": "328",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_uint256)))"
      },
      {
        "astId": 8086,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_delegatees",
        "offset": 0,
        "slot": "329",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_struct(UintSet)4251_storage))"
      },
      {
        "astId": 8095,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_delegators",
        "offset": 0,
        "slot": "330",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_struct(UintSet)4251_storage))"
      },
      {
        "astId": 8101,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_ownerToTokenIds",
        "offset": 0,
        "slot": "331",
        "type": "t_mapping(t_address,t_struct(UintSet)4251_storage)"
      },
      {
        "astId": 8108,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_userCumulativeAssetValues",
        "offset": 0,
        "slot": "332",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8115,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "s_delegatorsBlocked",
        "offset": 0,
        "slot": "333",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8119,
        "contract": "contracts/veION/veION.sol:veION",
        "label": "__gap",
        "offset": 0,
        "slot": "334",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserPoint)5135_storage)1000000000_storage": {
        "base": "t_struct(UserPoint)5135_storage",
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]",
        "numberOfBytes": "192000000000"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressesProvider)5089": {
        "encoding": "inplace",
        "label": "contract IAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IStakeStrategy)5632": {
        "encoding": "inplace",
        "label": "contract IStakeStrategy",
        "numberOfBytes": "20"
      },
      "t_enum(LpTokenType)5172": {
        "encoding": "inplace",
        "label": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(LpTokenType)5172)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IveIONStructsEnumsErrorsEvents.LpTokenType)",
        "numberOfBytes": "32",
        "value": "t_enum(LpTokenType)5172"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)4251_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)4251_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(LpTokenType)5172,t_array(t_struct(UserPoint)5135_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)5172",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserPoint)5135_storage)1000000000_storage"
      },
      "t_mapping(t_enum(LpTokenType)5172,t_contract(IStakeStrategy)5632)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)5172",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => contract IStakeStrategy)",
        "numberOfBytes": "32",
        "value": "t_contract(IStakeStrategy)5632"
      },
      "t_mapping(t_enum(LpTokenType)5172,t_struct(LockedBalance)5115_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)5172",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)5115_storage"
      },
      "t_mapping(t_enum(LpTokenType)5172,t_struct(UintSet)4251_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)5172",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)4251_storage"
      },
      "t_mapping(t_enum(LpTokenType)5172,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)5172",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_array(t_struct(UserPoint)5135_storage)1000000000_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)5172,t_array(t_struct(UserPoint)5135_storage)1000000000_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_struct(LockedBalance)5115_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.LockedBalance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)5172,t_struct(LockedBalance)5115_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_struct(UintSet)4251_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct EnumerableSet.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)5172,t_struct(UintSet)4251_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)5172,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)5172,t_uint256))"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)4094_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4094_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4094_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4093,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3779_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockedBalance)5115_storage": {
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.LockedBalance",
        "members": [
          {
            "astId": 5102,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5104,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5106,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "delegateAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5108,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "start",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5110,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "end",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5112,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "isPermanent",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5114,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "boost",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)3779_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3774,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3778,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)4251_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 4250,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3779_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserPoint)5135_storage": {
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.UserPoint",
        "members": [
          {
            "astId": 5124,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5126,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "slope",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5128,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "ts",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5130,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "blk",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5132,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "permanent",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5134,
            "contract": "contracts/veION/veION.sol:veION",
            "label": "permanentDelegate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}