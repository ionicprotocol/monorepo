{
  "address": "0xc6fd43B93677370C7300670F0430714C63a240E8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyVotedOrDeposited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DistributeWindow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumVotingNumberTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonZeroVotes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDistributeWindow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDistributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelistedNFT",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "RewardAccumulatorDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardAccumulator",
          "type": "address"
        }
      ],
      "name": "RewardAccumulatorNotAlive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokensArrayEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyPools",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnequalLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroWeight",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Abstained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "rewardAccumulators",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "bribes",
          "type": "address[]"
        }
      ],
      "name": "BribesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAlive",
          "type": "bool"
        }
      ],
      "name": "DistributionTimelockAliveToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mpo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "lpTokens",
          "type": "address[]"
        }
      ],
      "name": "LpTokensSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "enum IVoter.MarketSide[]",
          "name": "marketSides",
          "type": "uint8[]"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "rewardAccumulators",
          "type": "address[]"
        }
      ],
      "name": "MarketRewardAccumulatorsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketAddress",
              "type": "address"
            },
            {
              "internalType": "enum IVoter.MarketSide",
              "name": "side",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IVoter.Market[]",
          "name": "markets",
          "type": "tuple[]"
        }
      ],
      "name": "MarketsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maxVotingNum",
          "type": "uint256"
        }
      ],
      "name": "MaxVotingNumSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mpo",
          "type": "address"
        }
      ],
      "name": "MpoSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum IVoter.MarketSide",
          "name": "marketSide",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAlive",
          "type": "bool"
        }
      ],
      "name": "RewardAccumulatorAliveToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "WhitelistNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "WhitelistToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketAddress",
              "type": "address"
            },
            {
              "internalType": "enum IVoter.MarketSide",
              "name": "side",
              "type": "uint8"
            }
          ],
          "internalType": "struct IVoter.Market[]",
          "name": "_markets",
          "type": "tuple[]"
        }
      ],
      "name": "addMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "baseWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ionicToken",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochVoteEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochVoteStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLpRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epochTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getHistoricalPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpAsset",
          "type": "address"
        }
      ],
      "name": "getVoteDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "marketVotes",
              "type": "address[]"
            },
            {
              "internalType": "enum IVoter.MarketSide[]",
              "name": "marketVoteSides",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "votes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "usedWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVoter.VoteDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "historicalPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "contract MasterPriceOracle",
          "name": "_mpo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isWhitelistedNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastVoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "marketToRewardAccumulators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketVoteSide",
      "outputs": [
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "side",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxVotingNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mpo",
      "outputs": [
        {
          "internalType": "contract MasterPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardAccumulatorToBribe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardAccumulators",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        }
      ],
      "name": "setBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "setDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "setGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setHistoricalPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lpTokens",
          "type": "address[]"
        }
      ],
      "name": "setLpTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_markets",
          "type": "address[]"
        },
        {
          "internalType": "enum IVoter.MarketSide[]",
          "name": "_marketSides",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "_rewardAccumulators",
          "type": "address[]"
        }
      ],
      "name": "setMarketRewardAccumulators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxVotingNum",
          "type": "uint256"
        }
      ],
      "name": "setMaxVotingNum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mpo",
          "type": "address"
        }
      ],
      "name": "setMpo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isAlive",
          "type": "bool"
        }
      ],
      "name": "toggleDistributionTimelockAlive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "_marketSide",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_isAlive",
          "type": "bool"
        }
      ],
      "name": "toggleRewardAccumulatorAlive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usedWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_marketVote",
          "type": "address[]"
        },
        {
          "internalType": "enum IVoter.MarketSide[]",
          "name": "_marketVoteSide",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "whitelistNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "whitelistToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0a61765229f2550675f451f2221c70818074ea191504be76ee033532f52a4fd",
  "receipt": {
    "to": null,
    "from": "0x7d922bf0975424b3371074f54cC784AF738Dac0D",
    "contractAddress": "0xc6fd43B93677370C7300670F0430714C63a240E8",
    "transactionIndex": 116,
    "gasUsed": "4233764",
    "logsBloom": "0x
    "blockHash": "0x284f813e949d0a1eb0430de3a30de77d27c821d9b704e730ad96210550c312c9",
    "transactionHash": "0xf0a61765229f2550675f451f2221c70818074ea191504be76ee033532f52a4fd",
    "logs": [
      {
        "transactionIndex": 116,
        "blockNumber": 32339919,
        "transactionHash": "0xf0a61765229f2550675f451f2221c70818074ea191504be76ee033532f52a4fd",
        "address": "0xc6fd43B93677370C7300670F0430714C63a240E8",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 285,
        "blockHash": "0x284f813e949d0a1eb0430de3a30de77d27c821d9b704e730ad96210550c312c9"
      }
    ],
    "blockNumber": 32339919,
    "cumulativeGasUsed": "26908420",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "e33ff1eaac69fb29fc12804ea12e13b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyVotedOrDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributeWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumVotingNumberTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonZeroVotes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDistributeWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDistributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistedNFT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"RewardAccumulatorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAccumulator\",\"type\":\"address\"}],\"name\":\"RewardAccumulatorNotAlive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensArrayEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyPools\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroWeight\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"rewardAccumulators\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"bribes\",\"type\":\"address[]\"}],\"name\":\"BribesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAlive\",\"type\":\"bool\"}],\"name\":\"DistributionTimelockAliveToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mpo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"LpTokensSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"enum IVoter.MarketSide[]\",\"name\":\"marketSides\",\"type\":\"uint8[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"rewardAccumulators\",\"type\":\"address[]\"}],\"name\":\"MarketRewardAccumulatorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"side\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IVoter.Market[]\",\"name\":\"markets\",\"type\":\"tuple[]\"}],\"name\":\"MarketsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxVotingNum\",\"type\":\"uint256\"}],\"name\":\"MaxVotingNumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mpo\",\"type\":\"address\"}],\"name\":\"MpoSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"marketSide\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAlive\",\"type\":\"bool\"}],\"name\":\"RewardAccumulatorAliveToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"WhitelistNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"WhitelistToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"side\",\"type\":\"uint8\"}],\"internalType\":\"struct IVoter.Market[]\",\"name\":\"_markets\",\"type\":\"tuple[]\"}],\"name\":\"addMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ionicToken\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochVoteEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochVoteStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLpRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epochTimestamp\",\"type\":\"uint256\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpAsset\",\"type\":\"address\"}],\"name\":\"getVoteDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"marketVotes\",\"type\":\"address[]\"},{\"internalType\":\"enum IVoter.MarketSide[]\",\"name\":\"marketVoteSides\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"usedWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct IVoter.VoteDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historicalPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract MasterPriceOracle\",\"name\":\"_mpo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isWhitelistedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"marketToRewardAccumulators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketVoteSide\",\"outputs\":[{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"side\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVotingNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpo\",\"outputs\":[{\"internalType\":\"contract MasterPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAccumulatorToBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardAccumulators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"}],\"name\":\"setBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setHistoricalPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"}],\"name\":\"setLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_markets\",\"type\":\"address[]\"},{\"internalType\":\"enum IVoter.MarketSide[]\",\"name\":\"_marketSides\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardAccumulators\",\"type\":\"address[]\"}],\"name\":\"setMarketRewardAccumulators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxVotingNum\",\"type\":\"uint256\"}],\"name\":\"setMaxVotingNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mpo\",\"type\":\"address\"}],\"name\":\"setMpo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAlive\",\"type\":\"bool\"}],\"name\":\"toggleDistributionTimelockAlive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"_marketSide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isAlive\",\"type\":\"bool\"}],\"name\":\"toggleRewardAccumulatorAlive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_marketVote\",\"type\":\"address[]\"},{\"internalType\":\"enum IVoter.MarketSide[]\",\"name\":\"_marketVoteSide\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\",\"events\":{\"Abstained(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"pool\":\"Address of the pool.\",\"timestamp\":\"Timestamp of the vote.\",\"tokenId\":\"ID of the token.\",\"totalWeight\":\"Total weight of the vote.\",\"voter\":\"Address of the voter.\",\"weight\":\"Weight of the vote.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NotifyReward(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of the reward.\",\"reward\":\"Address of the reward.\",\"sender\":\"Address of the sender.\"}},\"Voted(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"pool\":\"Address of the pool.\",\"timestamp\":\"Timestamp of the vote.\",\"tokenId\":\"ID of the token.\",\"totalWeight\":\"Total weight of the vote.\",\"voter\":\"Address of the voter.\",\"weight\":\"Weight of the vote.\"}},\"WhitelistNFT(address,uint256,bool)\":{\"params\":{\"_bool\":\"Boolean indicating whitelist status.\",\"tokenId\":\"ID of the token.\",\"whitelister\":\"Address of the whitelister.\"}},\"WhitelistToken(address,address,bool)\":{\"params\":{\"_bool\":\"Boolean indicating whitelist status.\",\"token\":\"Address of the token.\",\"whitelister\":\"Address of the whitelister.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addMarkets((address,uint8)[])\":{\"params\":{\"_markets\":\"Array of Market structs to be added.\"}},\"claimBribes(address[],address[][],uint256)\":{\"details\":\"Utility to help batch bribe claims.\",\"params\":{\"_bribes\":\"Array of BribeVotingReward contracts to collect from.\",\"_tokenId\":\"ID of veNFT that you wish to claim bribes for.\",\"_tokens\":\"Array of tokens that are used as bribes.\"}},\"epochNext(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp to calculate the next epoch for.\"},\"returns\":{\"_0\":\"The next epoch.\"}},\"epochStart(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp to calculate the epoch start for.\"},\"returns\":{\"_0\":\"The start of the epoch.\"}},\"epochVoteEnd(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp to calculate the voting end for.\"},\"returns\":{\"_0\":\"The end of the voting period.\"}},\"epochVoteStart(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp to calculate the voting start for.\"},\"returns\":{\"_0\":\"The start of the voting period.\"}},\"getAllLpRewardTokens()\":{\"returns\":{\"_0\":\"An array of addresses representing all LP reward tokens.\"}},\"getHistoricalPrice(address,uint256)\":{\"params\":{\"epochTimestamp\":\"The timestamp of the epoch\",\"lpToken\":\"The LP token address\"},\"returns\":{\"_0\":\"The historical price of the LP token at the specified epoch\"}},\"getVoteDetails(uint256,address)\":{\"params\":{\"_lpAsset\":\"The address of the LP asset.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"A struct containing vote details.\"}},\"initialize(address[],address,address,address)\":{\"custom:reverts\":\"TokensArrayEmpty if the _tokens array is empty.\",\"details\":\"Requires initialization with at least one reward token.\",\"params\":{\"_mpo\":\"The MasterPriceOracle contract address.\",\"_rewardToken\":\"The address of the reward token.\",\"_tokens\":\"An array of token addresses to be whitelisted.\",\"_ve\":\"The address of the veION contract.\"}},\"marketsLength()\":{\"returns\":{\"_0\":\"The number of markets.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"poke(uint256)\":{\"params\":{\"_tokenId\":\"ID of veNFT whose balance you wish to update.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reset(uint256)\":{\"details\":\"Cannot reset in the same epoch that you voted in.      Can vote or deposit into a managed NFT again after reset.\",\"params\":{\"_tokenId\":\"ID of veNFT that you are resetting.\"}},\"setBribes(address[],address[])\":{\"params\":{\"_bribes\":\"Array of bribe addresses.\",\"_rewardAccumulators\":\"Array of reward accumulator addresses.\"}},\"setGovernor(address)\":{\"params\":{\"_governor\":\"Address of the new governor.\"}},\"setHistoricalPrices(uint256,address,uint256)\":{\"params\":{\"epochTimestamp\":\"The timestamp of the epoch\",\"lpToken\":\"The LP token address\",\"price\":\"The price to set\"}},\"setLpTokens(address[])\":{\"params\":{\"_lpTokens\":\"Array of LP token addresses.\"}},\"setMarketRewardAccumulators(address[],uint8[],address[])\":{\"params\":{\"_marketSides\":\"Array of market sides.\",\"_markets\":\"Array of market addresses.\",\"_rewardAccumulators\":\"Array of reward accumulator addresses.\"}},\"setMaxVotingNum(uint256)\":{\"params\":{\"_maxVotingNum\":\"Maximum number of votes allowed.\"}},\"setMpo(address)\":{\"params\":{\"_mpo\":\"Address of the Master Price Oracle.\"}},\"toggleDistributionTimelockAlive(bool)\":{\"params\":{\"_isAlive\":\"Boolean indicating if the timelock is alive.\"}},\"toggleRewardAccumulatorAlive(address,uint8,bool)\":{\"params\":{\"_isAlive\":\"Boolean indicating if the reward accumulator is alive.\",\"_market\":\"Address of the market.\",\"_marketSide\":\"Side of the market.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"vote(uint256,address[],uint8[],uint256[])\":{\"details\":\"Can only vote or deposit into a managed NFT once per epoch.      Can only vote for gauges that have not been killed.      Throws if length of _poolVote and _weights do not match.\",\"params\":{\"_marketVoteSide\":\"Array of market vote sides you are voting for.\",\"_poolVote\":\"Array of pools you are voting for.\",\"_tokenId\":\"ID of veNFT you are voting with.\",\"_weights\":\"Weights of pools.\"}},\"whitelistNFT(uint256,bool)\":{\"details\":\"Throws if not called by governor.      Throws if already whitelisted.\",\"params\":{\"_bool\":\"Boolean indicating whitelist status.\",\"_tokenId\":\"ID of the token.\"}},\"whitelistToken(address,bool)\":{\"details\":\"Throws if not called by governor.\",\"params\":{\"_bool\":\"Boolean indicating whitelist status.\",\"_token\":\"Address of the token.\"}}},\"title\":\"Voter Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyVotedOrDeposited()\":[{\"notice\":\"Error thrown when a user has already voted or deposited.\"}],\"DistributeWindow()\":[{\"notice\":\"Error thrown when an action is attempted outside the distribution window.\"}],\"MarketAlreadyExists()\":[{\"notice\":\"Error thrown when a market already exists.\"}],\"MaximumVotingNumberTooLow()\":[{\"notice\":\"Error thrown when the maximum voting number is too low.\"}],\"MismatchedArrayLengths()\":[{\"notice\":\"Error thrown when array lengths do not match.\"}],\"NonZeroVotes()\":[{\"notice\":\"Error thrown when there are non-zero votes.\"}],\"NotDistributeWindow()\":[{\"notice\":\"Error thrown when an action is attempted outside the distribution window.\"}],\"NotGovernor()\":[{\"notice\":\"Error thrown when the caller is not the governor.\"}],\"NotOwner()\":[{\"notice\":\"Error thrown when the caller is not the owner.\"}],\"NotWhitelistedNFT()\":[{\"notice\":\"Error thrown when an NFT is not whitelisted.\"}],\"RewardAccumulatorDoesNotExist(address)\":[{\"notice\":\"Error thrown when a reward accumulator does not exist for a given pool.\"}],\"RewardAccumulatorNotAlive(address)\":[{\"notice\":\"Error thrown when a reward accumulator is not alive.\"}],\"SameValue()\":[{\"notice\":\"Error thrown when the same value is provided.\"}],\"TokensArrayEmpty()\":[{\"notice\":\"Error thrown when the tokens array is empty.\"}],\"TooManyPools()\":[{\"notice\":\"Error thrown when there are too many pools.\"}],\"UnequalLengths()\":[{\"notice\":\"Error thrown when array lengths are unequal.\"}],\"ZeroAddress()\":[{\"notice\":\"Error thrown when an address is zero.\"}],\"ZeroWeight()\":[{\"notice\":\"Error thrown when the weight is zero.\"}]},\"events\":{\"Abstained(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a vote is abstained.\"},\"NotifyReward(address,address,uint256)\":{\"notice\":\"Event emitted when a reward is notified.\"},\"Voted(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a vote is cast.\"},\"WhitelistNFT(address,uint256,bool)\":{\"notice\":\"Event emitted when an NFT is whitelisted.\"},\"WhitelistToken(address,address,bool)\":{\"notice\":\"Event emitted when a token is whitelisted.\"}},\"kind\":\"user\",\"methods\":{\"addMarkets((address,uint8)[])\":{\"notice\":\"Add new markets.\"},\"baseWeights(uint256,address,uint8,address)\":{\"notice\":\"Mapping from NFT to Pool to LP Asset to Base Weights\"},\"claimBribes(address[],address[][],uint256)\":{\"notice\":\"Claim bribes for a given NFT.\"},\"distributeRewards()\":{\"notice\":\"Distributes rewards to eligible markets.\"},\"epochNext(uint256)\":{\"notice\":\"Get the next epoch for a given timestamp.\"},\"epochStart(uint256)\":{\"notice\":\"Get the start of the epoch for a given timestamp.\"},\"epochVoteEnd(uint256)\":{\"notice\":\"Get the end of the voting period for a given timestamp.\"},\"epochVoteStart(uint256)\":{\"notice\":\"Get the start of the voting period for a given timestamp.\"},\"getAllLpRewardTokens()\":{\"notice\":\"Get all LP reward tokens.\"},\"getHistoricalPrice(address,uint256)\":{\"notice\":\"Gets the historical price for a specific LP token at a given epoch\"},\"getVoteDetails(uint256,address)\":{\"notice\":\"Get vote details for a specific token ID and LP asset.\"},\"governor()\":{\"notice\":\"Standard OZ IGovernor using ve for vote weights\"},\"historicalPrices(address,uint256)\":{\"notice\":\"Historical prices for each reward token and epoch\"},\"initialize(address[],address,address,address)\":{\"notice\":\"Initializes the Voter contract with the specified parameters.\"},\"isAlive(address)\":{\"notice\":\"Mapping from Reward Accumulator to Liveness status\"},\"isWhitelistedNFT(uint256)\":{\"notice\":\"Mapping from TokenId to Whitelisted status\"},\"isWhitelistedToken(address)\":{\"notice\":\"Mapping from Token to Whitelisted status\"},\"lastVoted(uint256)\":{\"notice\":\"Mapping from NFT to Timestamp of last vote (ensures single vote per epoch)\"},\"lpTokens(uint256)\":{\"notice\":\"List of LP tokens\"},\"marketToRewardAccumulators(address,uint8)\":{\"notice\":\"Mapping from Market to Market Side to Reward Accumulator\"},\"marketVote(uint256,address,uint256)\":{\"notice\":\"Mapping from NFT to List of markets voted for by NFT\"},\"marketVoteSide(uint256,address,uint256)\":{\"notice\":\"Mapping from NFT to List of market vote sides voted for by NFT\"},\"markets(uint256)\":{\"notice\":\"All markets viable for incentives\"},\"marketsLength()\":{\"notice\":\"Get the number of markets.\"},\"maxVotingNum()\":{\"notice\":\"Maximum number of markets one voter can vote for at once\"},\"mpo()\":{\"notice\":\"Master Price Oracle instance\"},\"poke(uint256)\":{\"notice\":\"Update voting balances in voting rewards contracts.\"},\"reset(uint256)\":{\"notice\":\"Reset voting state. Required if you wish to make changes to veNFT state.\"},\"rewardAccumulatorToBribe(address)\":{\"notice\":\"Mapping from Reward Accumulator to Bribes Voting Reward\"},\"setBribes(address[],address[])\":{\"notice\":\"Set bribes for reward accumulators.\"},\"setGovernor(address)\":{\"notice\":\"Set a new governor.\"},\"setHistoricalPrices(uint256,address,uint256)\":{\"notice\":\"Sets historical prices for LP tokens at specific epochs\"},\"setLpTokens(address[])\":{\"notice\":\"Set the LP tokens.\"},\"setMarketRewardAccumulators(address[],uint8[],address[])\":{\"notice\":\"Set reward accumulators for markets.\"},\"setMaxVotingNum(uint256)\":{\"notice\":\"Set the maximum number of votes.\"},\"setMpo(address)\":{\"notice\":\"Set the Master Price Oracle (MPO) address.\"},\"toggleDistributionTimelockAlive(bool)\":{\"notice\":\"Toggle the alive status of a timelock on distributing rewards.\"},\"toggleRewardAccumulatorAlive(address,uint8,bool)\":{\"notice\":\"Toggle the alive status of a reward accumulator.\"},\"totalWeight(address)\":{\"notice\":\"Total Voting Weights for each address\"},\"usedWeights(uint256,address)\":{\"notice\":\"Mapping from NFT to Total voting weight of NFT\"},\"ve()\":{\"notice\":\"The ve token that governs these contracts\"},\"vote(uint256,address[],uint8[],uint256[])\":{\"notice\":\"Vote for pools. Votes distributed proportionally based on weights.\"},\"votes(uint256,address,uint8,address)\":{\"notice\":\"Mapping from NFT to Pool to LP Asset to Votes\"},\"weights(address,uint8,address)\":{\"notice\":\"Mapping from Market to Market Side to LP Asset to weights\"},\"whitelistNFT(uint256,bool)\":{\"notice\":\"Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\"},\"whitelistToken(address,bool)\":{\"notice\":\"Whitelist (or unwhitelist) token for use in bribes.\"}},\"notice\":\"This contract allows veION holders to vote for various markets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/Voter.sol\":\"Voter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available all functions\\r\\n * from parent (Ownable).\\r\\n */\\r\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\r\\n    function __Ownable2Step_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending owner.\\r\\n     */\\r\\n    function pendingOwner() public view virtual returns (address) {\\r\\n        return _pendingOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\r\\n        _pendingOwner = newOwner;\\r\\n        emit OwnershipTransferStarted(owner(), newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual override {\\r\\n        delete _pendingOwner;\\r\\n        super._transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The new owner accepts the ownership transfer.\\r\\n     */\\r\\n    function acceptOwnership() external {\\r\\n        address sender = _msgSender();\\r\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\r\\n        _transferOwnership(sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xc02ae28ae149c0475b5b98088ecc53b1b6310d906506c5522f598f02d88f9131\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal onlyInitializing {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xcf4a2c2c1a8b1570ee9a7059c218de1efbc9050239b1111dcfc24081391d11b7\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized < type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4603e2f1403e437820665af135e9675c80e81aa005e360318b8e640ca2624658\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xd714b70818f7513fc0c34e4248742ac27f0cda15c44621de90872a2f1848c036\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721Upgradeable.sol\\\";\\r\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\r\\n    using AddressUpgradeable for address;\\r\\n    using StringsUpgradeable for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        __ERC721_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\r\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _ownerOf(tokenId);\\r\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\r\\n     */\\r\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\r\\n        return _owners[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _ownerOf(tokenId) != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        unchecked {\\r\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\r\\n            // Given that tokens are minted one by one, it is impossible in practice that\\r\\n            // this ever happens. Might change if we allow batch minting.\\r\\n            // The ERC fails to describe this case.\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\r\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\r\\n            // out than the owner initially received through minting and transferring in.\\r\\n            _balances[owner] -= 1;\\r\\n        }\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n\\r\\n        _afterTokenTransfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\r\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\r\\n            // `from`'s balance is the number of token held, which is at least one before the current\\r\\n            // transfer.\\r\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\r\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\r\\n            _balances[from] -= 1;\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(\\r\\n        address owner,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) internal virtual {\\r\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\r\\n     */\\r\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\r\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\r\\n     * See {_beforeConsecutiveTokenTransfer}.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\r\\n     * See {_afterConsecutiveTokenTransfer}.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\r\\n     * {ERC721Consecutive}.\\r\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\r\\n     */\\r\\n    function _beforeConsecutiveTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256, /*first*/\\r\\n        uint96 size\\r\\n    ) internal virtual {\\r\\n        if (from != address(0)) {\\r\\n            _balances[from] -= size;\\r\\n        }\\r\\n        if (to != address(0)) {\\r\\n            _balances[to] += size;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\r\\n     * {ERC721Consecutive}.\\r\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\r\\n     */\\r\\n    function _afterConsecutiveTokenTransfer(\\r\\n        address, /*from*/\\r\\n        address, /*to*/\\r\\n        uint256, /*first*/\\r\\n        uint96 /*size*/\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[44] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x8fa55fe262246cd5c68823bda0e2f30503417458aed446c65bcefa347e6ed423\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721ReceiverUpgradeable {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xcad00cdc85bd1718e26dc693cf50fefe6c3bd2ca51c95f3ef13cc6d04be4928b\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\r\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\r\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6adefd9cd927dc57cd2da9550681d51dad15a91d4d254075588cf3e9503e6c99\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC721Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x8ba9a190699be6b3e5f965fe650bf0ac8bd01ed4d7b394411c6e50b98dcaaa90\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c08bea8e975fa8e5e635a7753a9442b3d58f501c3a9951df8eb45581054228d\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./math/MathUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary StringsUpgradeable {\\r\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a607b1dc1f0ff724ad56ff94293ec5c374e27f35f26ae5e29210edaf046b4c6\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\r\\n    function __ERC165_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __ERC165_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x33686001615c14053a34d85fa60f5495c6461d457abfa93276feaf1ad4582039\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3a86fd8399ff01763901b64ed4603d979787747d7b83f70d6d3c7d4f6b79214\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary MathUpgradeable {\\r\\n    enum Rounding {\\r\\n        Down, // Toward negative infinity\\r\\n        Up, // Toward infinity\\r\\n        Zero // Toward zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\r\\n     * with further edits by Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod0 := mul(x, y)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n            // See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n            uint256 twos = denominator & (~denominator + 1);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n            // in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10**64) {\\r\\n                value /= 10**64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10**32) {\\r\\n                value /= 10**32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10**16) {\\r\\n                value /= 10**16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10**8) {\\r\\n                value /= 10**8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10**4) {\\r\\n                value /= 10**4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10**2) {\\r\\n                value /= 10**2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10**1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x75646aade069b63a3ebf8535f49dce3ac575d1e367f031cf1f7b3d8a748e0756\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\r\\n * proxy whose upgrades are fully controlled by the current implementation.\\r\\n */\\r\\ninterface IERC1822Proxiable {\\r\\n    /**\\r\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\r\\n     * address.\\r\\n     *\\r\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\r\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\r\\n     * function revert if invoked through a proxy.\\r\\n     */\\r\\n    function proxiableUUID() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xe768c5863db91751a70d25c9dac899ec5078c6bacfbc02878652e454aa416b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../Proxy.sol\\\";\\r\\nimport \\\"./ERC1967Upgrade.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\r\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\r\\n * implementation behind the proxy.\\r\\n */\\r\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\r\\n    /**\\r\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\r\\n     *\\r\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\r\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\r\\n     */\\r\\n    constructor(address _logic, bytes memory _data) payable {\\r\\n        _upgradeToAndCall(_logic, _data, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address impl) {\\r\\n        return ERC1967Upgrade._getImplementation();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xca719d0df6d77207f38b638f8e5e85df03434b47a1045b5b686a36df9bea601f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../beacon/IBeacon.sol\\\";\\r\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\nimport \\\"../../utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides getters and event emitting update functions for\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n *\\r\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\r\\n */\\r\\nabstract contract ERC1967Upgrade {\\r\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\r\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _getImplementation() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeTo(address newImplementation) internal {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade with additional setup call.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCall(\\r\\n        address newImplementation,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        _upgradeTo(newImplementation);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(newImplementation, data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCallUUPS(\\r\\n        address newImplementation,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\r\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\r\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\r\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\r\\n            _setImplementation(newImplementation);\\r\\n        } else {\\r\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\r\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\r\\n            } catch {\\r\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\r\\n            }\\r\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the admin of the contract.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the admin account has changed.\\r\\n     */\\r\\n    event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     */\\r\\n    function _getAdmin() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 admin slot.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) private {\\r\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\r\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {AdminChanged} event.\\r\\n     */\\r\\n    function _changeAdmin(address newAdmin) internal {\\r\\n        emit AdminChanged(_getAdmin(), newAdmin);\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\r\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the beacon is upgraded.\\r\\n     */\\r\\n    event BeaconUpgraded(address indexed beacon);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current beacon.\\r\\n     */\\r\\n    function _getBeacon() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\r\\n     */\\r\\n    function _setBeacon(address newBeacon) private {\\r\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\r\\n        require(\\r\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\r\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\r\\n        );\\r\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\r\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\r\\n     *\\r\\n     * Emits a {BeaconUpgraded} event.\\r\\n     */\\r\\n    function _upgradeBeaconToAndCall(\\r\\n        address newBeacon,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        _setBeacon(newBeacon);\\r\\n        emit BeaconUpgraded(newBeacon);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb9b4ac05179724cbcb7621bdab336a09eb32d07e07b425e0216263ad80388145\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n    /**\\r\\n     * @dev Delegates the current call to `implementation`.\\r\\n     *\\r\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _delegate(address implementation) internal virtual {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\r\\n     * and {_fallback} should delegate.\\r\\n     */\\r\\n    function _implementation() internal view virtual returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n     *\\r\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _fallback() internal virtual {\\r\\n        _beforeFallback();\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n     * function in the contract matches the call data.\\r\\n     */\\r\\n    fallback() external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\r\\n     * is empty.\\r\\n     */\\r\\n    receive() external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\r\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\r\\n     *\\r\\n     * If overridden should call `super._beforeFallback()`.\\r\\n     */\\r\\n    function _beforeFallback() internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x62c6b919abeeb4c9146ffbb325fc03b5f2d55a29b8e719b8ff62daab48123565\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {BeaconProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xd3effc3ce6d1c85e1aae2ba5c6f28434c2eef52e1fc48b15096a176dcfee5853\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\r\\n *\\r\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\r\\n * clashing], which can potentially be used in an attack, this contract uses the\\r\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\r\\n * things that go hand in hand:\\r\\n *\\r\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\r\\n * that call matches one of the admin functions exposed by the proxy itself.\\r\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\r\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\r\\n * \\\"admin cannot fallback to proxy target\\\".\\r\\n *\\r\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\r\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\r\\n * to sudden errors when trying to call a function from the proxy implementation.\\r\\n *\\r\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\r\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\r\\n */\\r\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\r\\n    /**\\r\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\r\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\r\\n     */\\r\\n    constructor(\\r\\n        address _logic,\\r\\n        address admin_,\\r\\n        bytes memory _data\\r\\n    ) payable ERC1967Proxy(_logic, _data) {\\r\\n        _changeAdmin(admin_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\r\\n     */\\r\\n    modifier ifAdmin() {\\r\\n        if (msg.sender == _getAdmin()) {\\r\\n            _;\\r\\n        } else {\\r\\n            _fallback();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\r\\n     */\\r\\n    function admin() external ifAdmin returns (address admin_) {\\r\\n        admin_ = _getAdmin();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\r\\n     */\\r\\n    function implementation() external ifAdmin returns (address implementation_) {\\r\\n        implementation_ = _implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {AdminChanged} event.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\r\\n     */\\r\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\r\\n        _changeAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) external ifAdmin {\\r\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\r\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\r\\n     * proxied contract.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\r\\n        _upgradeToAndCall(newImplementation, data, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     */\\r\\n    function _admin() internal view virtual returns (address) {\\r\\n        return _getAdmin();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\r\\n     */\\r\\n    function _beforeFallback() internal virtual override {\\r\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\r\\n        super._beforeFallback();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf2ec94f608eee8e1531e5210bc67bf8f3b3c28e0a7d7e6f65342d08809548ff1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x86bd9e04dbee51fb3a9370279a0177e9da874a858dfb2c25a405171aa5ae2030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c3c43ba6e81d44ca93d32e97e0d5b9d64eb7346b7a3921e6ce9648f4b70f815\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7ed49cc8c6b941c4b0f07556eef72cedbce73d60c79d54cc82f6bbe7e061fb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb61a2a836d1e25029f013b03fa606fb6bcea10a9cc93ee2eb85d47b389d18c74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    enum Rounding {\\r\\n        Down, // Toward negative infinity\\r\\n        Up, // Toward infinity\\r\\n        Zero // Toward zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\r\\n     * with further edits by Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod0 := mul(x, y)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n            // See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n            uint256 twos = denominator & (~denominator + 1);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n            // in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10**64) {\\r\\n                value /= 10**64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10**32) {\\r\\n                value /= 10**32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10**16) {\\r\\n                value /= 10**16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10**8) {\\r\\n                value /= 10**8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10**4) {\\r\\n                value /= 10**4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10**2) {\\r\\n                value /= 10**2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10**1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f1ee6a346d1d174ada2074c0e1edd7db7da4c872df37a46e2f6296011f9a8ce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n *\\r\\n * [WARNING]\\r\\n * ====\\r\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\r\\n * unusable.\\r\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\r\\n *\\r\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\r\\n * array of EnumerableSet.\\r\\n * ====\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastValue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastValue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        bytes32[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d88c669dab804dbc1aa5d683fd9ef598c9a820df114785571d1e2cbe54a7fc9\",\"license\":\"MIT\"},\"adrastia-periphery/rates/IHistoricalRates.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./RateLibrary.sol\\\";\\n\\n/**\\n * @title IHistoricalRates\\n * @notice An interface that defines a contract that stores historical rates.\\n */\\ninterface IHistoricalRates {\\n    /// @notice Gets an rate for a token at a specific index.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param index The index of the rate to get, where index 0 contains the latest rate, and the last\\n    ///   index contains the oldest rate (uses reverse chronological ordering).\\n    /// @return rate The rate for the token at the specified index.\\n    function getRateAt(address token, uint256 index) external view returns (RateLibrary.Rate memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(address token, uint256 amount) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @param offset The index of the first rate to get (default: 0).\\n    /// @param increment The increment between rates to get (default: 1).\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the number of rates for a token.\\n    /// @param token The address of the token to get the number of rates for.\\n    /// @return count The number of rates for the token.\\n    function getRatesCount(address token) external view returns (uint256);\\n\\n    /// @notice Gets the capacity of rates for a token.\\n    /// @param token The address of the token to get the capacity of rates for.\\n    /// @return capacity The capacity of rates for the token.\\n    function getRatesCapacity(address token) external view returns (uint256);\\n\\n    /// @notice Sets the capacity of rates for a token.\\n    /// @param token The address of the token to set the capacity of rates for.\\n    /// @param amount The new capacity of rates for the token.\\n    function setRatesCapacity(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2754968c368df628f1ed00c2016b1a73f0f9b44f29e48d405887ad108723b3af\",\"license\":\"MIT\"},\"adrastia-periphery/rates/RateLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary RateLibrary {\\n    struct Rate {\\n        uint64 target;\\n        uint64 current;\\n        uint32 timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x397b79cf9f183afa76db3c8d10cffb408e31ba154900f671a7e93c071bacbff4\",\"license\":\"MIT\"},\"contracts/adrastia/PrudentiaLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nlibrary PrudentiaLib {\\r\\n  struct PrudentiaConfig {\\r\\n    address controller; // Adrastia Prudentia controller address\\r\\n    uint8 offset; // Offset for delayed rate activation\\r\\n    int8 decimalShift; // Positive values scale the rate up (in powers of 10), negative values scale the rate down\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x73ceb0717c7795db9d43c13e729e7f76e1cab444d845fc9897a34b8bf7909096\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { IonicComptroller } from \\\"./ComptrollerInterface.sol\\\";\\r\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\r\\nimport { ComptrollerV3Storage } from \\\"./ComptrollerStorage.sol\\\";\\r\\nimport { AddressesProvider } from \\\"../ionic/AddressesProvider.sol\\\";\\r\\n\\r\\nabstract contract CTokenAdminStorage {\\r\\n  /*\\r\\n   * Administrator for Ionic\\r\\n   */\\r\\n  address payable public ionicAdmin;\\r\\n}\\r\\n\\r\\nabstract contract CErc20Storage is CTokenAdminStorage {\\r\\n  /**\\r\\n   * @dev Guard variable for re-entrancy checks\\r\\n   */\\r\\n  bool internal _notEntered;\\r\\n\\r\\n  /**\\r\\n   * @notice EIP-20 token name for this token\\r\\n   */\\r\\n  string public name;\\r\\n\\r\\n  /**\\r\\n   * @notice EIP-20 token symbol for this token\\r\\n   */\\r\\n  string public symbol;\\r\\n\\r\\n  /**\\r\\n   * @notice EIP-20 token decimals for this token\\r\\n   */\\r\\n  uint8 public decimals;\\r\\n\\r\\n  /*\\r\\n   * Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n   */\\r\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n  /*\\r\\n   * Maximum fraction of interest that can be set aside for reserves + fees\\r\\n   */\\r\\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\r\\n\\r\\n  /**\\r\\n   * @notice Contract which oversees inter-cToken operations\\r\\n   */\\r\\n  IonicComptroller public comptroller;\\r\\n\\r\\n  /**\\r\\n   * @notice Model which tells what the current interest rate should be\\r\\n   */\\r\\n  InterestRateModel public interestRateModel;\\r\\n\\r\\n  /*\\r\\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\r\\n   */\\r\\n  uint256 internal initialExchangeRateMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Fraction of interest currently set aside for admin fees\\r\\n   */\\r\\n  uint256 public adminFeeMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Fraction of interest currently set aside for Ionic fees\\r\\n   */\\r\\n  uint256 public ionicFeeMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Fraction of interest currently set aside for reserves\\r\\n   */\\r\\n  uint256 public reserveFactorMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Block number that interest was last accrued at\\r\\n   */\\r\\n  uint256 public accrualBlockNumber;\\r\\n\\r\\n  /**\\r\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n   */\\r\\n  uint256 public borrowIndex;\\r\\n\\r\\n  /**\\r\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n   */\\r\\n  uint256 public totalBorrows;\\r\\n\\r\\n  /**\\r\\n   * @notice Total amount of reserves of the underlying held in this market\\r\\n   */\\r\\n  uint256 public totalReserves;\\r\\n\\r\\n  /**\\r\\n   * @notice Total amount of admin fees of the underlying held in this market\\r\\n   */\\r\\n  uint256 public totalAdminFees;\\r\\n\\r\\n  /**\\r\\n   * @notice Total amount of Ionic fees of the underlying held in this market\\r\\n   */\\r\\n  uint256 public totalIonicFees;\\r\\n\\r\\n  /**\\r\\n   * @notice Total number of tokens in circulation\\r\\n   */\\r\\n  uint256 public totalSupply;\\r\\n\\r\\n  /*\\r\\n   * Official record of token balances for each account\\r\\n   */\\r\\n  mapping(address => uint256) internal accountTokens;\\r\\n\\r\\n  /*\\r\\n   * Approved token transfer amounts on behalf of others\\r\\n   */\\r\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\r\\n\\r\\n  /**\\r\\n   * @notice Container for borrow balance information\\r\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n   */\\r\\n  struct BorrowSnapshot {\\r\\n    uint256 principal;\\r\\n    uint256 interestIndex;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * Mapping of account addresses to outstanding borrow balances\\r\\n   */\\r\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n  /*\\r\\n   * Share of seized collateral that is added to reserves\\r\\n   */\\r\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\r\\n\\r\\n  /*\\r\\n   * Share of seized collateral taken as fees\\r\\n   */\\r\\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\\r\\n\\r\\n  /**\\r\\n   * @notice Underlying asset for this CToken\\r\\n   */\\r\\n  address public underlying;\\r\\n\\r\\n  /**\\r\\n   * @notice Addresses Provider\\r\\n   */\\r\\n  AddressesProvider public ap;\\r\\n}\\r\\n\\r\\nabstract contract CTokenBaseEvents {\\r\\n  /* ERC20 */\\r\\n\\r\\n  /**\\r\\n   * @notice EIP20 Transfer event\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  /*** Admin Events ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when interestRateModel is changed\\r\\n   */\\r\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the reserve factor is changed\\r\\n   */\\r\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the admin fee is changed\\r\\n   */\\r\\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the Ionic fee is changed\\r\\n   */\\r\\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\\r\\n\\r\\n  /**\\r\\n   * @notice EIP20 Approval event\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when interest is accrued\\r\\n   */\\r\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\r\\n}\\r\\n\\r\\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\\r\\n  event Flash(address receiver, uint256 amount);\\r\\n}\\r\\n\\r\\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\\r\\n  /*** Market Events ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when tokens are minted\\r\\n   */\\r\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when tokens are redeemed\\r\\n   */\\r\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when underlying is borrowed\\r\\n   */\\r\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a borrow is repaid\\r\\n   */\\r\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a borrow is liquidated\\r\\n   */\\r\\n  event LiquidateBorrow(\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 repayAmount,\\r\\n    address cTokenCollateral,\\r\\n    uint256 seizeTokens\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the reserves are added\\r\\n   */\\r\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the reserves are reduced\\r\\n   */\\r\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\r\\n}\\r\\n\\r\\ninterface CTokenFirstExtensionInterface {\\r\\n  /*** User Interface ***/\\r\\n\\r\\n  function transfer(address dst, uint256 amount) external returns (bool);\\r\\n\\r\\n  function transferFrom(address src, address dst, uint256 amount) external returns (bool);\\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  /*** Admin Functions ***/\\r\\n\\r\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\r\\n\\r\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\\r\\n\\r\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\\r\\n\\r\\n  function getAccountSnapshot(address account) external view returns (uint256, uint256, uint256, uint256);\\r\\n\\r\\n  function borrowRatePerBlock() external view returns (uint256);\\r\\n\\r\\n  function supplyRatePerBlock() external view returns (uint256);\\r\\n\\r\\n  function exchangeRateCurrent() external view returns (uint256);\\r\\n\\r\\n  function accrueInterest() external returns (uint256);\\r\\n\\r\\n  function totalBorrowsCurrent() external view returns (uint256);\\r\\n\\r\\n  function borrowBalanceCurrent(address account) external view returns (uint256);\\r\\n\\r\\n  function getTotalUnderlyingSupplied() external view returns (uint256);\\r\\n\\r\\n  function balanceOfUnderlying(address owner) external view returns (uint256);\\r\\n\\r\\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\r\\n\\r\\n  function flash(uint256 amount, bytes calldata data) external;\\r\\n\\r\\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\\r\\n\\r\\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\\r\\n\\r\\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\\r\\n\\r\\n  function registerInSFS() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface CTokenSecondExtensionInterface {\\r\\n  function mint(uint256 mintAmount) external returns (uint256);\\r\\n\\r\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\r\\n\\r\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\r\\n\\r\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\r\\n\\r\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\r\\n\\r\\n  function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral) external returns (uint256);\\r\\n\\r\\n  function getCash() external view returns (uint256);\\r\\n\\r\\n  function seize(address liquidator, address borrower, uint256 seizeTokens) external returns (uint256);\\r\\n\\r\\n  /*** Admin Functions ***/\\r\\n\\r\\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\\r\\n\\r\\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\\r\\n\\r\\n  function selfTransferOut(address to, uint256 amount) external;\\r\\n\\r\\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface CDelegatorInterface {\\r\\n  function implementation() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Called by the admin to update the implementation of the delegator\\r\\n   * @param implementation_ The address of the new implementation for delegation\\r\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n   */\\r\\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev upgrades the implementation if necessary\\r\\n   */\\r\\n  function _upgrade() external;\\r\\n}\\r\\n\\r\\ninterface CDelegateInterface {\\r\\n  /**\\r\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n   * @param data The encoded bytes data for any initialization\\r\\n   */\\r\\n  function _becomeImplementation(bytes calldata data) external;\\r\\n\\r\\n  function delegateType() external pure returns (uint8);\\r\\n\\r\\n  function contractType() external pure returns (string memory);\\r\\n}\\r\\n\\r\\nabstract contract CErc20AdminBase is CErc20Storage {\\r\\n  /**\\r\\n   * @notice Returns a boolean indicating if the sender has admin rights\\r\\n   */\\r\\n  function hasAdminRights() internal view returns (bool) {\\r\\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\r\\n    return\\r\\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\\r\\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract CErc20FirstExtensionBase is\\r\\n  CErc20AdminBase,\\r\\n  CTokenFirstExtensionEvents,\\r\\n  CTokenFirstExtensionInterface\\r\\n{}\\r\\n\\r\\nabstract contract CTokenSecondExtensionBase is\\r\\n  CErc20AdminBase,\\r\\n  CTokenSecondExtensionEvents,\\r\\n  CTokenSecondExtensionInterface,\\r\\n  CDelegateInterface\\r\\n{}\\r\\n\\r\\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\\r\\n\\r\\ninterface CErc20StorageInterface {\\r\\n  function admin() external view returns (address);\\r\\n\\r\\n  function adminHasRights() external view returns (bool);\\r\\n\\r\\n  function ionicAdmin() external view returns (address);\\r\\n\\r\\n  function ionicAdminHasRights() external view returns (bool);\\r\\n\\r\\n  function comptroller() external view returns (IonicComptroller);\\r\\n\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function adminFeeMantissa() external view returns (uint256);\\r\\n\\r\\n  function ionicFeeMantissa() external view returns (uint256);\\r\\n\\r\\n  function reserveFactorMantissa() external view returns (uint256);\\r\\n\\r\\n  function protocolSeizeShareMantissa() external view returns (uint256);\\r\\n\\r\\n  function feeSeizeShareMantissa() external view returns (uint256);\\r\\n\\r\\n  function totalReserves() external view returns (uint256);\\r\\n\\r\\n  function totalAdminFees() external view returns (uint256);\\r\\n\\r\\n  function totalIonicFees() external view returns (uint256);\\r\\n\\r\\n  function totalBorrows() external view returns (uint256);\\r\\n\\r\\n  function accrualBlockNumber() external view returns (uint256);\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function borrowIndex() external view returns (uint256);\\r\\n\\r\\n  function interestRateModel() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\\r\\n  function plugin() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\\r\\n  function approve(address, address) external;\\r\\n}\\r\\n\\r\\ninterface ICErc20 is\\r\\n  CErc20StorageInterface,\\r\\n  CTokenSecondExtensionInterface,\\r\\n  CTokenFirstExtensionInterface,\\r\\n  CDelegatorInterface,\\r\\n  CDelegateInterface\\r\\n{}\\r\\n\\r\\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\\r\\n  function _updatePlugin(address _plugin) external;\\r\\n}\\r\\n\\r\\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\\r\\n\",\"keccak256\":\"0x76eb28ebb8f5a81452d085510ff67296cbeb63108296ff2e8ff55b463a3fbfdd\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { BasePriceOracle } from \\\"../oracles/BasePriceOracle.sol\\\";\\r\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\r\\nimport { DiamondExtension } from \\\"../ionic/DiamondExtension.sol\\\";\\r\\nimport { ComptrollerV4Storage } from \\\"../compound/ComptrollerStorage.sol\\\";\\r\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\r\\nimport { IHistoricalRates } from \\\"adrastia-periphery/rates/IHistoricalRates.sol\\\";\\r\\n\\r\\ninterface ComptrollerInterface {\\r\\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\\r\\n\\r\\n  function _becomeImplementation() external;\\r\\n\\r\\n  function _deployMarket(\\r\\n    uint8 delegateType,\\r\\n    bytes memory constructorData,\\r\\n    bytes calldata becomeImplData,\\r\\n    uint256 collateralFactorMantissa\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\\r\\n\\r\\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\\r\\n\\r\\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\\r\\n\\r\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\r\\n\\r\\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\\r\\n\\r\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\r\\n\\r\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\\r\\n\\r\\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\\r\\n\\r\\n  function _addRewardsDistributor(address distributor) external returns (uint256);\\r\\n\\r\\n  function getHypotheticalAccountLiquidity(\\r\\n    address account,\\r\\n    address cTokenModify,\\r\\n    uint256 redeemTokens,\\r\\n    uint256 borrowAmount,\\r\\n    uint256 repayAmount\\r\\n  ) external view returns (uint256, uint256, uint256, uint256);\\r\\n\\r\\n  function getMaxRedeemOrBorrow(address account, ICErc20 cToken, bool isBorrow) external view returns (uint256);\\r\\n\\r\\n  /*** Assets You Are In ***/\\r\\n\\r\\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\r\\n\\r\\n  function exitMarket(address cToken) external returns (uint256);\\r\\n\\r\\n  /*** Policy Hooks ***/\\r\\n\\r\\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\\r\\n\\r\\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256);\\r\\n\\r\\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\\r\\n\\r\\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n  function borrowVerify(address cToken, address borrower) external;\\r\\n\\r\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\\r\\n\\r\\n  function repayBorrowAllowed(\\r\\n    address cToken,\\r\\n    address payer,\\r\\n    address borrower,\\r\\n    uint256 repayAmount\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function repayBorrowVerify(\\r\\n    address cToken,\\r\\n    address payer,\\r\\n    address borrower,\\r\\n    uint256 repayAmount\\r\\n  ) external;\\r\\n\\r\\n  function liquidateBorrowAllowed(\\r\\n    address cTokenBorrowed,\\r\\n    address cTokenCollateral,\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 repayAmount\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function seizeAllowed(\\r\\n    address cTokenCollateral,\\r\\n    address cTokenBorrowed,\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 seizeTokens\\r\\n  ) external returns (uint256);\\r\\n  \\r\\n  function seizeVerify(\\r\\n    address cTokenCollateral,\\r\\n    address cTokenBorrowed,\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 seizeTokens\\r\\n  ) external;\\r\\n\\r\\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external returns (uint256);\\r\\n  \\r\\n  function transferVerify(address cToken, address src, address dst, uint256 transferTokens) external;\\r\\n\\r\\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external;\\r\\n\\r\\n  /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n  function getAccountLiquidity(\\r\\n    address account\\r\\n  ) external view returns (uint256 error, uint256 collateralValue, uint256 liquidity, uint256 shortfall);\\r\\n\\r\\n  function liquidateCalculateSeizeTokens(\\r\\n    address cTokenBorrowed,\\r\\n    address cTokenCollateral,\\r\\n    uint256 repayAmount\\r\\n  ) external view returns (uint256, uint256);\\r\\n\\r\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\r\\n\\r\\n  function _beforeNonReentrant() external;\\r\\n\\r\\n  function _afterNonReentrant() external;\\r\\n\\r\\n  /*** New supply and borrow cap view functions ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\r\\n   * @param cToken The address of the cToken.\\r\\n   */\\r\\n  function effectiveSupplyCaps(address cToken) external view returns (uint256 supplyCap);\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\r\\n   * @param cToken The address of the cToken.\\r\\n   */\\r\\n  function effectiveBorrowCaps(address cToken) external view returns (uint256 borrowCap);\\r\\n}\\r\\n\\r\\ninterface ComptrollerStorageInterface {\\r\\n  function admin() external view returns (address);\\r\\n\\r\\n  function adminHasRights() external view returns (bool);\\r\\n\\r\\n  function ionicAdmin() external view returns (address);\\r\\n\\r\\n  function ionicAdminHasRights() external view returns (bool);\\r\\n\\r\\n  function pendingAdmin() external view returns (address);\\r\\n\\r\\n  function oracle() external view returns (BasePriceOracle);\\r\\n\\r\\n  function pauseGuardian() external view returns (address);\\r\\n\\r\\n  function closeFactorMantissa() external view returns (uint256);\\r\\n\\r\\n  function liquidationIncentiveMantissa() external view returns (uint256);\\r\\n\\r\\n  function isUserOfPool(address user) external view returns (bool);\\r\\n\\r\\n  function whitelist(address account) external view returns (bool);\\r\\n\\r\\n  function enforceWhitelist() external view returns (bool);\\r\\n\\r\\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\\r\\n\\r\\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\\r\\n\\r\\n  function suppliers(address account) external view returns (bool);\\r\\n\\r\\n  function cTokensByUnderlying(address) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * Gets the supply cap of a cToken in the units of the underlying asset.\\r\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the supply cap. Instead, use\\r\\n   * `effectiveSupplyCaps` to get the correct supply cap.\\r\\n   * @param cToken The address of the cToken.\\r\\n   * @return The supply cap in the units of the underlying asset.\\r\\n   */\\r\\n  function supplyCaps(address cToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * Gets the borrow cap of a cToken in the units of the underlying asset.\\r\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the borrow cap. Instead, use\\r\\n   * `effectiveBorrowCaps` to get the correct borrow cap.\\r\\n   * @param cToken The address of the cToken.\\r\\n   * @return The borrow cap in the units of the underlying asset.\\r\\n   */\\r\\n  function borrowCaps(address cToken) external view returns (uint256);\\r\\n\\r\\n  function markets(address cToken) external view returns (bool, uint256);\\r\\n\\r\\n  function accountAssets(address, uint256) external view returns (address);\\r\\n\\r\\n  function borrowGuardianPaused(address cToken) external view returns (bool);\\r\\n\\r\\n  function mintGuardianPaused(address cToken) external view returns (bool);\\r\\n\\r\\n  function rewardsDistributors(uint256) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface SFSRegister {\\r\\n  function register(address _recipient) external returns (uint256 tokenId);\\r\\n}\\r\\n\\r\\ninterface ComptrollerExtensionInterface {\\r\\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\\r\\n\\r\\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\\r\\n\\r\\n  function getAllMarkets() external view returns (ICErc20[] memory);\\r\\n\\r\\n  function getAllBorrowers() external view returns (address[] memory);\\r\\n\\r\\n  function getAllBorrowersCount() external view returns (uint256);\\r\\n\\r\\n  function getPaginatedBorrowers(\\r\\n    uint256 page,\\r\\n    uint256 pageSize\\r\\n  ) external view returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\\r\\n\\r\\n  function getRewardsDistributors() external view returns (address[] memory);\\r\\n\\r\\n  function getAccruingFlywheels() external view returns (address[] memory);\\r\\n\\r\\n  function _supplyCapWhitelist(address cToken, address account, bool whitelisted) external;\\r\\n\\r\\n  function _setBorrowCapForCollateral(address cTokenBorrow, address cTokenCollateral, uint256 borrowCap) external;\\r\\n\\r\\n  function _setBorrowCapForCollateralWhitelist(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    address account,\\r\\n    bool whitelisted\\r\\n  ) external;\\r\\n\\r\\n  function isBorrowCapForCollateralWhitelisted(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    address account\\r\\n  ) external view returns (bool);\\r\\n\\r\\n  function _blacklistBorrowingAgainstCollateral(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    bool blacklisted\\r\\n  ) external;\\r\\n\\r\\n  function _blacklistBorrowingAgainstCollateralWhitelist(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    address account,\\r\\n    bool whitelisted\\r\\n  ) external;\\r\\n\\r\\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    address account\\r\\n  ) external view returns (bool);\\r\\n\\r\\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\\r\\n\\r\\n  function _borrowCapWhitelist(address cToken, address account, bool whitelisted) external;\\r\\n\\r\\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\\r\\n\\r\\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\\r\\n\\r\\n  function getWhitelist() external view returns (address[] memory);\\r\\n\\r\\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\\r\\n\\r\\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\\r\\n\\r\\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\\r\\n\\r\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\r\\n\\r\\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\r\\n\\r\\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\\r\\n\\r\\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\\r\\n\\r\\n  function _setTransferPaused(bool state) external returns (bool);\\r\\n\\r\\n  function _setSeizePaused(bool state) external returns (bool);\\r\\n\\r\\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\\r\\n\\r\\n  function getAssetAsCollateralValueCap(\\r\\n    ICErc20 collateral,\\r\\n    ICErc20 cTokenModify,\\r\\n    bool redeeming,\\r\\n    address account\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function registerInSFS() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ComptrollerPrudentiaCapsExtInterface {\\r\\n  /**\\r\\n   * @notice Retrieves Adrastia Prudentia borrow cap config from storage.\\r\\n   * @return The config.\\r\\n   */\\r\\n  function getBorrowCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves Adrastia Prudentia supply cap config from storage.\\r\\n   * @return The config.\\r\\n   */\\r\\n  function getSupplyCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\r\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native supply caps.\\r\\n   * @param newConfig The new config.\\r\\n   */\\r\\n  function _setSupplyCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\r\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native borrow caps.\\r\\n   * @param newConfig The new config.\\r\\n   */\\r\\n  function _setBorrowCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\r\\n}\\r\\n\\r\\ninterface UnitrollerInterface {\\r\\n  function comptrollerImplementation() external view returns (address);\\r\\n\\r\\n  function _upgrade() external;\\r\\n\\r\\n  function _acceptAdmin() external returns (uint256);\\r\\n\\r\\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\\r\\n\\r\\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\\r\\n\\r\\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\\r\\n\\r\\ninterface IonicComptroller is\\r\\n  ComptrollerInterface,\\r\\n  ComptrollerExtensionInterface,\\r\\n  UnitrollerInterface,\\r\\n  ComptrollerStorageInterface\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nabstract contract ComptrollerBase is ComptrollerV4Storage {\\r\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n  bool public constant isComptroller = true;\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\r\\n   * @param cToken The address of the cToken.\\r\\n   */\\r\\n  function effectiveSupplyCaps(address cToken) public view virtual returns (uint256 supplyCap) {\\r\\n    PrudentiaLib.PrudentiaConfig memory capConfig = supplyCapConfig;\\r\\n\\r\\n    // Check if we're using Adrastia Prudentia for the supply cap\\r\\n    if (capConfig.controller != address(0)) {\\r\\n      // We have a controller, so we're using Adrastia Prudentia\\r\\n\\r\\n      address underlyingToken = ICErc20(cToken).underlying();\\r\\n\\r\\n      // Get the supply cap from Adrastia Prudentia\\r\\n      supplyCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\r\\n\\r\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\r\\n      // must scale the supply cap to get the correct amount\\r\\n\\r\\n      int256 scaleByDecimals = 18;\\r\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\r\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\r\\n      if (success && data.length == 32) {\\r\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\r\\n      }\\r\\n\\r\\n      scaleByDecimals += capConfig.decimalShift;\\r\\n\\r\\n      if (scaleByDecimals >= 0) {\\r\\n        // We're scaling up, so we need to multiply\\r\\n        supplyCap *= 10 ** uint256(scaleByDecimals);\\r\\n      } else {\\r\\n        // We're scaling down, so we need to divide\\r\\n        supplyCap /= 10 ** uint256(-scaleByDecimals);\\r\\n      }\\r\\n    } else {\\r\\n      // We don't have a controller, so we're using the local supply cap\\r\\n\\r\\n      // Get the supply cap from the local supply cap\\r\\n      supplyCap = supplyCaps[cToken];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\r\\n   * @param cToken The address of the cToken.\\r\\n   */\\r\\n  function effectiveBorrowCaps(address cToken) public view virtual returns (uint256 borrowCap) {\\r\\n    PrudentiaLib.PrudentiaConfig memory capConfig = borrowCapConfig;\\r\\n\\r\\n    // Check if we're using Adrastia Prudentia for the borrow cap\\r\\n    if (capConfig.controller != address(0)) {\\r\\n      // We have a controller, so we're using Adrastia Prudentia\\r\\n\\r\\n      address underlyingToken = ICErc20(cToken).underlying();\\r\\n\\r\\n      // Get the borrow cap from Adrastia Prudentia\\r\\n      borrowCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\r\\n\\r\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\r\\n      // must scale the supply cap to get the correct amount\\r\\n\\r\\n      int256 scaleByDecimals = 18;\\r\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\r\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\r\\n      if (success && data.length == 32) {\\r\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\r\\n      }\\r\\n\\r\\n      scaleByDecimals += capConfig.decimalShift;\\r\\n\\r\\n      if (scaleByDecimals >= 0) {\\r\\n        // We're scaling up, so we need to multiply\\r\\n        borrowCap *= 10 ** uint256(scaleByDecimals);\\r\\n      } else {\\r\\n        // We're scaling down, so we need to divide\\r\\n        borrowCap /= 10 ** uint256(-scaleByDecimals);\\r\\n      }\\r\\n    } else {\\r\\n      // We don't have a controller, so we're using the local borrow cap\\r\\n      borrowCap = borrowCaps[cToken];\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xf61761da6983d08f8e88335f8aa96a342a1246069d77fa7c2f533e315939674b\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"./IFeeDistributor.sol\\\";\\r\\nimport \\\"../oracles/BasePriceOracle.sol\\\";\\r\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\r\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\ncontract UnitrollerAdminStorage {\\r\\n  /*\\r\\n   * Administrator for Ionic\\r\\n   */\\r\\n  address payable public ionicAdmin;\\r\\n\\r\\n  /**\\r\\n   * @notice Administrator for this contract\\r\\n   */\\r\\n  address public admin;\\r\\n\\r\\n  /**\\r\\n   * @notice Pending administrator for this contract\\r\\n   */\\r\\n  address public pendingAdmin;\\r\\n\\r\\n  /**\\r\\n   * @notice Whether or not the Ionic admin has admin rights\\r\\n   */\\r\\n  bool public ionicAdminHasRights = true;\\r\\n\\r\\n  /**\\r\\n   * @notice Whether or not the admin has admin rights\\r\\n   */\\r\\n  bool public adminHasRights = true;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns a boolean indicating if the sender has admin rights\\r\\n   */\\r\\n  function hasAdminRights() internal view returns (bool) {\\r\\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\r\\n  /**\\r\\n   * @notice Oracle which gives the price of any given asset\\r\\n   */\\r\\n  BasePriceOracle public oracle;\\r\\n\\r\\n  /**\\r\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\r\\n   */\\r\\n  uint256 public closeFactorMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\r\\n   */\\r\\n  uint256 public liquidationIncentiveMantissa;\\r\\n\\r\\n  /*\\r\\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\r\\n   */\\r\\n  uint256 internal maxAssets;\\r\\n\\r\\n  /**\\r\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\r\\n   */\\r\\n  mapping(address => ICErc20[]) public accountAssets;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\r\\n  struct Market {\\r\\n    // Whether or not this market is listed\\r\\n    bool isListed;\\r\\n    // Multiplier representing the most one can borrow against their collateral in this market.\\r\\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\\r\\n    // Must be between 0 and 1, and stored as a mantissa.\\r\\n    uint256 collateralFactorMantissa;\\r\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\r\\n    mapping(address => bool) accountMembership;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Official mapping of cTokens -> Market metadata\\r\\n   * @dev Used e.g. to determine if a market is supported\\r\\n   */\\r\\n  mapping(address => Market) public markets;\\r\\n\\r\\n  /// @notice A list of all markets\\r\\n  ICErc20[] public allMarkets;\\r\\n\\r\\n  /**\\r\\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\\r\\n   */\\r\\n  mapping(address => bool) internal borrowers;\\r\\n\\r\\n  /// @notice A list of all borrowers who have entered markets\\r\\n  address[] public allBorrowers;\\r\\n\\r\\n  // Indexes of borrower account addresses in the `allBorrowers` array\\r\\n  mapping(address => uint256) internal borrowerIndexes;\\r\\n\\r\\n  /**\\r\\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\r\\n   */\\r\\n  mapping(address => bool) public suppliers;\\r\\n\\r\\n  /// @notice All cTokens addresses mapped by their underlying token addresses\\r\\n  mapping(address => ICErc20) public cTokensByUnderlying;\\r\\n\\r\\n  /// @notice Whether or not the supplier whitelist is enforced\\r\\n  bool public enforceWhitelist;\\r\\n\\r\\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\r\\n  mapping(address => bool) public whitelist;\\r\\n\\r\\n  /// @notice An array of all whitelisted accounts\\r\\n  address[] public whitelistArray;\\r\\n\\r\\n  // Indexes of account addresses in the `whitelistArray` array\\r\\n  mapping(address => uint256) internal whitelistIndexes;\\r\\n\\r\\n  /**\\r\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n   *  Actions which allow users to remove their own assets cannot be paused.\\r\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\r\\n   */\\r\\n  address public pauseGuardian;\\r\\n  bool public _mintGuardianPaused;\\r\\n  bool public _borrowGuardianPaused;\\r\\n  bool public transferGuardianPaused;\\r\\n  bool public seizeGuardianPaused;\\r\\n  mapping(address => bool) public mintGuardianPaused;\\r\\n  mapping(address => bool) public borrowGuardianPaused;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\r\\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\r\\n  /// @dev If Adrastia Prudentia is enabled, the values the borrow cap guardian sets are ignored.\\r\\n  address public borrowCapGuardian;\\r\\n\\r\\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\r\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveBorrowCaps` instead.\\r\\n  mapping(address => uint256) public borrowCaps;\\r\\n\\r\\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\r\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveSupplyCaps` instead.\\r\\n  mapping(address => uint256) public supplyCaps;\\r\\n\\r\\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\\r\\n  address[] public rewardsDistributors;\\r\\n\\r\\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\r\\n  bool internal _notEntered;\\r\\n\\r\\n  /// @dev Whether or not _notEntered has been initialized\\r\\n  bool internal _notEnteredInitialized;\\r\\n\\r\\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\\r\\n  address[] public nonAccruingRewardsDistributors;\\r\\n\\r\\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\\r\\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\\r\\n\\r\\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\\r\\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\\r\\n\\r\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\\r\\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\\r\\n\\r\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\r\\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\\r\\n    internal borrowingAgainstCollateralBlacklistWhitelist;\\r\\n\\r\\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\\r\\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\\r\\n\\r\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\r\\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\r\\n  /// @dev Adrastia Prudentia config for controlling borrow caps.\\r\\n  PrudentiaLib.PrudentiaConfig internal borrowCapConfig;\\r\\n\\r\\n  /// @dev Adrastia Prudentia config for controlling supply caps.\\r\\n  PrudentiaLib.PrudentiaConfig internal supplyCapConfig;\\r\\n}\\r\\n\",\"keccak256\":\"0xd9a1883a27323dfb24d44f1965b3f4c9bafca60490f00e6de60f9a0d8230fbc0\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../ionic/AuthoritiesRegistry.sol\\\";\\r\\n\\r\\ninterface IFeeDistributor {\\r\\n  function minBorrowEth() external view returns (uint256);\\r\\n\\r\\n  function maxUtilizationRate() external view returns (uint256);\\r\\n\\r\\n  function interestFeeRate() external view returns (uint256);\\r\\n\\r\\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\r\\n\\r\\n  function latestCErc20Delegate(uint8 delegateType)\\r\\n    external\\r\\n    view\\r\\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\\r\\n\\r\\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\\r\\n\\r\\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\\r\\n\\r\\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\\r\\n\\r\\n  function deployCErc20(\\r\\n    uint8 delegateType,\\r\\n    bytes calldata constructorData,\\r\\n    bytes calldata becomeImplData\\r\\n  ) external returns (address);\\r\\n\\r\\n  function canCall(\\r\\n    address pool,\\r\\n    address user,\\r\\n    address target,\\r\\n    bytes4 functionSig\\r\\n  ) external view returns (bool);\\r\\n\\r\\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\\r\\n\\r\\n  fallback() external payable;\\r\\n\\r\\n  receive() external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0x82c4f1084fa6efa0a2b94fecd41d1bdff9fe5fd1a16df06b0effc414614d9057\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Compound's InterestRateModel Interface\\r\\n * @author Compound\\r\\n */\\r\\nabstract contract InterestRateModel {\\r\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n  bool public constant isInterestRateModel = true;\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates the current borrow interest rate per block\\r\\n   * @param cash The total amount of cash the market has\\r\\n   * @param borrows The total amount of borrows the market has outstanding\\r\\n   * @param reserves The total amount of reserves the market has\\r\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n   */\\r\\n  function getBorrowRate(\\r\\n    uint256 cash,\\r\\n    uint256 borrows,\\r\\n    uint256 reserves\\r\\n  ) public view virtual returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates the current supply interest rate per block\\r\\n   * @param cash The total amount of cash the market has\\r\\n   * @param borrows The total amount of borrows the market has outstanding\\r\\n   * @param reserves The total amount of reserves the market has\\r\\n   * @param reserveFactorMantissa The current reserve factor the market has\\r\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n   */\\r\\n  function getSupplyRate(\\r\\n    uint256 cash,\\r\\n    uint256 borrows,\\r\\n    uint256 reserves,\\r\\n    uint256 reserveFactorMantissa\\r\\n  ) public view virtual returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5200b4cd947a8cc34ee58af9b69279cc17189752b57d044f64a122de40f0db85\",\"license\":\"UNLICENSED\"},\"contracts/ionic/AddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AddressesProvider\\r\\n * @notice The Addresses Provider serves as a central storage of system internal and external\\r\\n *         contract addresses that change between deploys and across chains\\r\\n * @author Veliko Minkov <veliko@midascapital.xyz>\\r\\n */\\r\\ncontract AddressesProvider is SafeOwnableUpgradeable {\\r\\n  mapping(string => address) private _addresses;\\r\\n  mapping(address => Contract) public plugins;\\r\\n  mapping(address => Contract) public flywheelRewards;\\r\\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\\r\\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\\r\\n  JarvisPool[] public jarvisPoolsConfig;\\r\\n  CurveSwapPool[] public curveSwapPoolsConfig;\\r\\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\\r\\n\\r\\n  /// @dev Initializer to set the admin that can set and change contracts addresses\\r\\n  function initialize(address owner) public initializer {\\r\\n    __SafeOwnable_init(owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev The contract address and a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  struct Contract {\\r\\n    address addr;\\r\\n    string contractInterface;\\r\\n  }\\r\\n\\r\\n  struct RedemptionStrategy {\\r\\n    address addr;\\r\\n    string contractInterface;\\r\\n    address outputToken;\\r\\n  }\\r\\n\\r\\n  struct FundingStrategy {\\r\\n    address addr;\\r\\n    string contractInterface;\\r\\n    address inputToken;\\r\\n  }\\r\\n\\r\\n  struct JarvisPool {\\r\\n    address syntheticToken;\\r\\n    address collateralToken;\\r\\n    address liquidityPool;\\r\\n    uint256 expirationTime;\\r\\n  }\\r\\n\\r\\n  struct CurveSwapPool {\\r\\n    address poolAddress;\\r\\n    address[] coins;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\\r\\n   * @param rewardToken the reward token address\\r\\n   * @param flywheelRewardsModule the flywheel rewards module address\\r\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  function setFlywheelRewards(\\r\\n    address rewardToken,\\r\\n    address flywheelRewardsModule,\\r\\n    string calldata contractInterface\\r\\n  ) public onlyOwner {\\r\\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\\r\\n   * @param asset the asset address\\r\\n   * @param plugin the ERC4626 plugin address\\r\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  function setPlugin(\\r\\n    address asset,\\r\\n    address plugin,\\r\\n    string calldata contractInterface\\r\\n  ) public onlyOwner {\\r\\n    plugins[asset] = Contract(plugin, contractInterface);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\\r\\n   * @param asset the asset address\\r\\n   * @param strategy redemption strategy address\\r\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  function setRedemptionStrategy(\\r\\n    address asset,\\r\\n    address strategy,\\r\\n    string calldata contractInterface,\\r\\n    address outputToken\\r\\n  ) public onlyOwner {\\r\\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\\r\\n  }\\r\\n\\r\\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\\r\\n    return redemptionStrategiesConfig[asset];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\\r\\n   * @param asset the asset address\\r\\n   * @param strategy funding strategy address\\r\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  function setFundingStrategy(\\r\\n    address asset,\\r\\n    address strategy,\\r\\n    string calldata contractInterface,\\r\\n    address inputToken\\r\\n  ) public onlyOwner {\\r\\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\\r\\n  }\\r\\n\\r\\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\\r\\n    return fundingStrategiesConfig[asset];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\\r\\n   * @param syntheticToken the synthetic token address\\r\\n   * @param collateralToken the collateral token address\\r\\n   * @param liquidityPool the liquidity pool address\\r\\n   * @param expirationTime the operation expiration time\\r\\n   */\\r\\n  function setJarvisPool(\\r\\n    address syntheticToken,\\r\\n    address collateralToken,\\r\\n    address liquidityPool,\\r\\n    uint256 expirationTime\\r\\n  ) public onlyOwner {\\r\\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\\r\\n  }\\r\\n\\r\\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\\r\\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\\r\\n    _addresses[id] = newAddress;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an address by id\\r\\n   * @return The address\\r\\n   */\\r\\n  function getAddress(string calldata id) public view returns (address) {\\r\\n    return _addresses[id];\\r\\n  }\\r\\n\\r\\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\\r\\n    return curveSwapPoolsConfig;\\r\\n  }\\r\\n\\r\\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\\r\\n    return jarvisPoolsConfig;\\r\\n  }\\r\\n\\r\\n  function setBalancerPoolForTokens(\\r\\n    address inputToken,\\r\\n    address outputToken,\\r\\n    address pool\\r\\n  ) external onlyOwner {\\r\\n    balancerPoolForTokens[inputToken][outputToken] = pool;\\r\\n  }\\r\\n\\r\\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\\r\\n    return balancerPoolForTokens[inputToken][outputToken];\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x323d5d342776b9b74acbeb95c44d88f7006e07119e2033f8effdf29896b92963\",\"license\":\"AGPL-3.0-only\"},\"contracts/ionic/AuthoritiesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { PoolRolesAuthority } from \\\"../ionic/PoolRolesAuthority.sol\\\";\\r\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\r\\nimport { IonicComptroller } from \\\"../compound/ComptrollerInterface.sol\\\";\\r\\n\\r\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\r\\n\\r\\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\\r\\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\\r\\n  PoolRolesAuthority public poolAuthLogic;\\r\\n  address public leveredPositionsFactory;\\r\\n  bool public noAuthRequired;\\r\\n\\r\\n  function initialize(address _leveredPositionsFactory) public initializer {\\r\\n    __SafeOwnable_init(msg.sender);\\r\\n    leveredPositionsFactory = _leveredPositionsFactory;\\r\\n    poolAuthLogic = new PoolRolesAuthority();\\r\\n  }\\r\\n\\r\\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\\r\\n    leveredPositionsFactory = _leveredPositionsFactory;\\r\\n    poolAuthLogic = new PoolRolesAuthority();\\r\\n    // for Neon the auth is not required\\r\\n    noAuthRequired = block.chainid == 245022934;\\r\\n  }\\r\\n\\r\\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\\r\\n    require(address(poolsAuthorities[pool]) == address(0), \\\"already created\\\");\\r\\n\\r\\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \\\"\\\");\\r\\n    auth = PoolRolesAuthority(address(proxy));\\r\\n    auth.initialize(address(this));\\r\\n    poolsAuthorities[pool] = auth;\\r\\n\\r\\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\\r\\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\\r\\n    // sets the registry owner as the auth owner\\r\\n    reconfigureAuthority(pool);\\r\\n  }\\r\\n\\r\\n  function reconfigureAuthority(address poolAddress) public {\\r\\n    IonicComptroller pool = IonicComptroller(poolAddress);\\r\\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\\r\\n\\r\\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\\r\\n      require(address(auth) != address(0), \\\"no such authority\\\");\\r\\n      require(msg.sender == owner() || msg.sender == poolAddress, \\\"not owner or pool\\\");\\r\\n\\r\\n      auth.configureRegistryCapabilities();\\r\\n      auth.configurePoolSupplierCapabilities(pool);\\r\\n      auth.configurePoolBorrowerCapabilities(pool);\\r\\n      // everyone can be a liquidator\\r\\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\\r\\n      auth.configureLeveredPositionCapabilities(pool);\\r\\n\\r\\n      if (auth.owner() != owner()) {\\r\\n        auth.setOwner(owner());\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function canCall(\\r\\n    address pool,\\r\\n    address user,\\r\\n    address target,\\r\\n    bytes4 functionSig\\r\\n  ) external view returns (bool) {\\r\\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\\r\\n    if (address(authorityForPool) == address(0)) {\\r\\n      return noAuthRequired;\\r\\n    } else {\\r\\n      // allow only if an auth exists and it allows the action\\r\\n      return authorityForPool.canCall(user, target, functionSig);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setUserRole(\\r\\n    address pool,\\r\\n    address user,\\r\\n    uint8 role,\\r\\n    bool enabled\\r\\n  ) external {\\r\\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\\r\\n\\r\\n    require(address(poolAuth) != address(0), \\\"auth does not exist\\\");\\r\\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \\\"not owner or factory\\\");\\r\\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \\\"only lev pos role\\\");\\r\\n\\r\\n    poolAuth.setUserRole(user, role, enabled);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x115f92e8254ecbff415758b256fde2d110032db2d7124b3b4cefd9f4f7691051\",\"license\":\"UNLICENSED\"},\"contracts/ionic/DiamondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice a base contract for logic extensions that use the diamond pattern storage\\r\\n * to map the functions when looking up the extension contract to delegate to.\\r\\n */\\r\\nabstract contract DiamondExtension {\\r\\n  /**\\r\\n   * @return a list of all the function selectors that this logic extension exposes\\r\\n   */\\r\\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\\r\\n}\\r\\n\\r\\n// When no function exists for function called\\r\\nerror FunctionNotFound(bytes4 _functionSelector);\\r\\n\\r\\n// When no extension exists for function called\\r\\nerror ExtensionNotFound(bytes4 _functionSelector);\\r\\n\\r\\n// When the function is already added\\r\\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\\r\\n\\r\\nabstract contract DiamondBase {\\r\\n  /**\\r\\n   * @dev register a logic extension\\r\\n   * @param extensionToAdd the extension whose functions are to be added\\r\\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\\r\\n   */\\r\\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\\r\\n\\r\\n  function _listExtensions() public view returns (address[] memory) {\\r\\n    return LibDiamond.listExtensions();\\r\\n  }\\r\\n\\r\\n  fallback() external {\\r\\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\\r\\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\\r\\n    // Execute external function from extension using delegatecall and return any value.\\r\\n    assembly {\\r\\n      // copy function selector and any arguments\\r\\n      calldatacopy(0, 0, calldatasize())\\r\\n      // execute function call using the extension\\r\\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\\r\\n      // get any return value\\r\\n      returndatacopy(0, 0, returndatasize())\\r\\n      // return any return value or error back to the caller\\r\\n      switch result\\r\\n      case 0 {\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n      default {\\r\\n        return(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice a library to use in a contract, whose logic is extended with diamond extension\\r\\n */\\r\\nlibrary LibDiamond {\\r\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.extensions.diamond.storage\\\");\\r\\n\\r\\n  struct Function {\\r\\n    address extension;\\r\\n    bytes4 selector;\\r\\n  }\\r\\n\\r\\n  struct LogicStorage {\\r\\n    Function[] functions;\\r\\n    address[] extensions;\\r\\n  }\\r\\n\\r\\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\\r\\n    return getExtensionForSelector(msgSig, diamondStorage());\\r\\n  }\\r\\n\\r\\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\\r\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n    assembly {\\r\\n      ds.slot := position\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function listExtensions() internal view returns (address[] memory) {\\r\\n    return diamondStorage().extensions;\\r\\n  }\\r\\n\\r\\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\\r\\n    if (address(extensionToReplace) != address(0)) {\\r\\n      removeExtension(extensionToReplace);\\r\\n    }\\r\\n    addExtension(extensionToAdd);\\r\\n  }\\r\\n\\r\\n  function removeExtension(DiamondExtension extension) internal {\\r\\n    LogicStorage storage ds = diamondStorage();\\r\\n    // remove all functions of the extension to replace\\r\\n    removeExtensionFunctions(extension);\\r\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\r\\n      if (ds.extensions[i] == address(extension)) {\\r\\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\\r\\n        ds.extensions.pop();\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addExtension(DiamondExtension extension) internal {\\r\\n    LogicStorage storage ds = diamondStorage();\\r\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\r\\n      require(ds.extensions[i] != address(extension), \\\"extension already added\\\");\\r\\n    }\\r\\n    addExtensionFunctions(extension);\\r\\n    ds.extensions.push(address(extension));\\r\\n  }\\r\\n\\r\\n  function removeExtensionFunctions(DiamondExtension extension) internal {\\r\\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\\r\\n    LogicStorage storage ds = diamondStorage();\\r\\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\\r\\n      bytes4 selectorToRemove = fnsToRemove[i];\\r\\n      // must never fail\\r\\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\\r\\n      // swap with the last element in the selectorAtIndex array and remove the last element\\r\\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\\r\\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\\r\\n      ds.functions.pop();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addExtensionFunctions(DiamondExtension extension) internal {\\r\\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\\r\\n    LogicStorage storage ds = diamondStorage();\\r\\n    uint16 functionsCount = uint16(ds.functions.length);\\r\\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\\r\\n      bytes4 selector = fnsToAdd[functionsIndex];\\r\\n      address oldImplementation = getExtensionForSelector(selector, ds);\\r\\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\\r\\n      ds.functions.push(Function(address(extension), selector));\\r\\n      functionsCount++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\\r\\n    uint256 fnsLen = ds.functions.length;\\r\\n    for (uint256 i = 0; i < fnsLen; i++) {\\r\\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\\r\\n    }\\r\\n\\r\\n    return address(0);\\r\\n  }\\r\\n\\r\\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\\r\\n    uint16 fnsLen = uint16(ds.functions.length);\\r\\n    for (uint16 i = 0; i < fnsLen; i++) {\\r\\n      if (ds.functions[i].selector == selector) return i;\\r\\n    }\\r\\n\\r\\n    return type(uint16).max;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x8574cedf33192f4f8df52688205ae7dab899ca95e66b1b56bf0932c99584e720\",\"license\":\"UNLICENSED\"},\"contracts/ionic/PoolRolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { IonicComptroller, ComptrollerInterface } from \\\"../compound/ComptrollerInterface.sol\\\";\\r\\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \\\"../compound/CTokenInterfaces.sol\\\";\\r\\n\\r\\nimport { RolesAuthority, Authority } from \\\"solmate/auth/authorities/RolesAuthority.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\\r\\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\\r\\n    _disableInitializers();\\r\\n  }\\r\\n\\r\\n  function initialize(address _owner) public initializer {\\r\\n    owner = _owner;\\r\\n    authority = this;\\r\\n  }\\r\\n\\r\\n  // up to 256 roles\\r\\n  uint8 public constant REGISTRY_ROLE = 0;\\r\\n  uint8 public constant SUPPLIER_ROLE = 1;\\r\\n  uint8 public constant BORROWER_ROLE = 2;\\r\\n  uint8 public constant LIQUIDATOR_ROLE = 3;\\r\\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\\r\\n\\r\\n  function configureRegistryCapabilities() external requiresAuth {\\r\\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\\r\\n  }\\r\\n\\r\\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _setPublicPoolSupplierCapabilities(pool, true);\\r\\n  }\\r\\n\\r\\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _setPublicPoolSupplierCapabilities(pool, false);\\r\\n  }\\r\\n\\r\\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\\r\\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\\r\\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\r\\n      for (uint256 j = 0; j < selectors.length; j++) {\\r\\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\\r\\n  }\\r\\n\\r\\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\\r\\n    uint8 fnsCount = 6;\\r\\n    selectors = new bytes4[](fnsCount);\\r\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\\r\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\\r\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\\r\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\\r\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\\r\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\\r\\n\\r\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\r\\n    return selectors;\\r\\n  }\\r\\n\\r\\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\\r\\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\\r\\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\r\\n      for (uint256 j = 0; j < selectors.length; j++) {\\r\\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _setPublicPoolBorrowerCapabilities(pool, true);\\r\\n  }\\r\\n\\r\\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _setPublicPoolBorrowerCapabilities(pool, false);\\r\\n  }\\r\\n\\r\\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    // borrowers have the SUPPLIER_ROLE capabilities by default\\r\\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\r\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\r\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\\r\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\\r\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\r\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\r\\n      // TODO this leaves redeeming open for everyone\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\\r\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\\r\\n\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7434a55635e552d7121207af735f647fd17eaeddf3a839a9f521552c9c114f37\",\"license\":\"UNLICENSED\"},\"contracts/ionic/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\\r\\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\\r\\n * that will shift the other.\\r\\n */\\r\\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\\r\\n  /**\\r\\n   * @notice Pending owner of this contract\\r\\n   */\\r\\n  address public pendingOwner;\\r\\n\\r\\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\\r\\n    __Ownable_init();\\r\\n    _transferOwnership(owner_);\\r\\n  }\\r\\n\\r\\n  struct AddressSlot {\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwnerOrAdmin() {\\r\\n    bool isOwner = owner() == _msgSender();\\r\\n    if (!isOwner) {\\r\\n      address admin = _getProxyAdmin();\\r\\n      bool isAdmin = admin == _msgSender();\\r\\n      require(isAdmin, \\\"Ownable: caller is neither the owner nor the admin\\\");\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when pendingOwner is changed\\r\\n   */\\r\\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\\r\\n   */\\r\\n  event NewOwner(address oldOwner, address newOwner);\\r\\n\\r\\n  /**\\r\\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\r\\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\r\\n   * @param newPendingOwner New pending owner.\\r\\n   */\\r\\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\\r\\n    // Save current value, if any, for inclusion in log\\r\\n    address oldPendingOwner = pendingOwner;\\r\\n\\r\\n    // Store pendingOwner with value newPendingOwner\\r\\n    pendingOwner = newPendingOwner;\\r\\n\\r\\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\\r\\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\\r\\n   * @dev Owner function for pending owner to accept role and update owner\\r\\n   */\\r\\n  function _acceptOwner() public {\\r\\n    // Check caller is pendingOwner and pendingOwner \\u2260 address(0)\\r\\n    require(msg.sender == pendingOwner, \\\"not the pending owner\\\");\\r\\n\\r\\n    // Save current values for inclusion in log\\r\\n    address oldOwner = owner();\\r\\n    address oldPendingOwner = pendingOwner;\\r\\n\\r\\n    // Store owner with value pendingOwner\\r\\n    _transferOwnership(pendingOwner);\\r\\n\\r\\n    // Clear the pending value\\r\\n    pendingOwner = address(0);\\r\\n\\r\\n    emit NewOwner(oldOwner, pendingOwner);\\r\\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\\r\\n  }\\r\\n\\r\\n  function renounceOwnership() public override onlyOwner {\\r\\n    // do not remove this overriding fn\\r\\n    revert(\\\"not used anymore\\\");\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner) public override onlyOwner {\\r\\n    emit NewPendingOwner(pendingOwner, newOwner);\\r\\n    pendingOwner = newOwner;\\r\\n  }\\r\\n\\r\\n  function _getProxyAdmin() internal view returns (address admin) {\\r\\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n    AddressSlot storage adminSlot;\\r\\n    assembly {\\r\\n      adminSlot.slot := _ADMIN_SLOT\\r\\n    }\\r\\n    admin = adminSlot.value;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x389aa135a3fffcece620da7c3a2f9d823cd5eaf7ae2882774dc62a03fa848b63\",\"license\":\"UNLICENSED\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../compound/CTokenInterfaces.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BasePriceOracle\\r\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\r\\n * @dev Implements the `PriceOracle` interface.\\r\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\r\\n */\\r\\ninterface BasePriceOracle {\\r\\n  /**\\r\\n   * @notice Get the price of an underlying asset.\\r\\n   * @param underlying The underlying asset to get the price of.\\r\\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\r\\n   * Zero means the price is unavailable.\\r\\n   */\\r\\n  function price(address underlying) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the underlying price of a cToken asset\\r\\n   * @param cToken The cToken to get the underlying price of\\r\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n   *  Zero means the price is unavailable.\\r\\n   */\\r\\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x6a5989a21e27cf7ed176bcdd37ebfc6b1948df3facd1e2009c3ff3a7fc4bee3d\",\"license\":\"UNLICENSED\"},\"contracts/oracles/MasterPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport { ICErc20 } from \\\"../compound/CTokenInterfaces.sol\\\";\\r\\n\\r\\nimport { BasePriceOracle } from \\\"./BasePriceOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MasterPriceOracle\\r\\n * @notice Use a combination of price oracles.\\r\\n * @dev Implements `PriceOracle`.\\r\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\r\\n */\\r\\ncontract MasterPriceOracle is Initializable, BasePriceOracle {\\r\\n  /**\\r\\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\\r\\n   */\\r\\n  mapping(address => BasePriceOracle) public oracles;\\r\\n\\r\\n  /**\\r\\n   * @dev Default/fallback `PriceOracle`.\\r\\n   */\\r\\n  BasePriceOracle public defaultOracle;\\r\\n\\r\\n  /**\\r\\n   * @dev The administrator of this `MasterPriceOracle`.\\r\\n   */\\r\\n  address public admin;\\r\\n\\r\\n  /**\\r\\n   * @dev Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\r\\n   */\\r\\n  bool internal noAdminOverwrite;\\r\\n\\r\\n  /**\\r\\n   * @dev The Wrapped native asset address.\\r\\n   */\\r\\n  address public wtoken;\\r\\n\\r\\n  /**\\r\\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\\r\\n   */\\r\\n  mapping(address => BasePriceOracle) public fallbackOracles;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns a boolean indicating if `admin` can overwrite existing assignments of oracles to underlying tokens.\\r\\n   */\\r\\n  function canAdminOverwrite() external view returns (bool) {\\r\\n    return !noAdminOverwrite;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted when `admin` is changed.\\r\\n   */\\r\\n  event NewAdmin(address oldAdmin, address newAdmin);\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted when the default oracle is changed.\\r\\n   */\\r\\n  event NewDefaultOracle(address oldOracle, address newOracle);\\r\\n\\r\\n  /**\\r\\n   * @dev Event emitted when an underlying token's oracle is changed.\\r\\n   */\\r\\n  event NewOracle(address underlying, address oldOracle, address newOracle);\\r\\n\\r\\n  /**\\r\\n   * @dev  Initialize state variables.\\r\\n   * @param underlyings The underlying ERC20 token addresses to link to `_oracles`.\\r\\n   * @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`.\\r\\n   * @param _defaultOracle The default `PriceOracle` contract to use.\\r\\n   * @param _admin The admin who can assign oracles to underlying tokens.\\r\\n   * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\r\\n   * @param _wtoken The Wrapped native asset address\\r\\n   */\\r\\n  function initialize(\\r\\n    address[] memory underlyings,\\r\\n    BasePriceOracle[] memory _oracles,\\r\\n    BasePriceOracle _defaultOracle,\\r\\n    address _admin,\\r\\n    bool _canAdminOverwrite,\\r\\n    address _wtoken\\r\\n  ) external initializer {\\r\\n    // Input validation\\r\\n    require(underlyings.length == _oracles.length, \\\"Lengths of both arrays must be equal.\\\");\\r\\n\\r\\n    // Initialize state variables\\r\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\r\\n      address underlying = underlyings[i];\\r\\n      BasePriceOracle newOracle = _oracles[i];\\r\\n      oracles[underlying] = newOracle;\\r\\n      emit NewOracle(underlying, address(0), address(newOracle));\\r\\n    }\\r\\n\\r\\n    defaultOracle = _defaultOracle;\\r\\n    admin = _admin;\\r\\n    noAdminOverwrite = !_canAdminOverwrite;\\r\\n    wtoken = _wtoken;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `_oracles` for `underlyings`.\\r\\n   */\\r\\n  function add(address[] calldata underlyings, BasePriceOracle[] calldata _oracles) external onlyAdmin {\\r\\n    // Input validation\\r\\n    require(\\r\\n      underlyings.length > 0 && underlyings.length == _oracles.length,\\r\\n      \\\"Lengths of both arrays must be equal and greater than 0.\\\"\\r\\n    );\\r\\n\\r\\n    // Assign oracles to underlying tokens\\r\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\r\\n      address underlying = underlyings[i];\\r\\n      address oldOracle = address(oracles[underlying]);\\r\\n      if (noAdminOverwrite)\\r\\n        require(\\r\\n          oldOracle == address(0),\\r\\n          \\\"Admin cannot overwrite existing assignments of oracles to underlying tokens.\\\"\\r\\n        );\\r\\n      BasePriceOracle newOracle = _oracles[i];\\r\\n      oracles[underlying] = newOracle;\\r\\n      emit NewOracle(underlying, oldOracle, address(newOracle));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `_oracles` for `underlyings`.\\r\\n   */\\r\\n  function addFallbacks(address[] calldata underlyings, BasePriceOracle[] calldata _oracles) external onlyAdmin {\\r\\n    // Input validation\\r\\n    require(\\r\\n      underlyings.length > 0 && underlyings.length == _oracles.length,\\r\\n      \\\"Lengths of both arrays must be equal and greater than 0.\\\"\\r\\n    );\\r\\n\\r\\n    // Assign oracles to underlying tokens\\r\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\r\\n      address underlying = underlyings[i];\\r\\n      address oldOracle = address(fallbackOracles[underlying]);\\r\\n      if (noAdminOverwrite)\\r\\n        require(\\r\\n          oldOracle == address(0),\\r\\n          \\\"Admin cannot overwrite existing assignments of oracles to underlying tokens.\\\"\\r\\n        );\\r\\n      BasePriceOracle newOracle = _oracles[i];\\r\\n      fallbackOracles[underlying] = newOracle;\\r\\n      emit NewOracle(underlying, oldOracle, address(newOracle));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the default price oracle\\r\\n   */\\r\\n  function setDefaultOracle(BasePriceOracle newOracle) external onlyAdmin {\\r\\n    BasePriceOracle oldOracle = defaultOracle;\\r\\n    defaultOracle = newOracle;\\r\\n    emit NewDefaultOracle(address(oldOracle), address(newOracle));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the admin and emits an event.\\r\\n   */\\r\\n  function changeAdmin(address newAdmin) external onlyAdmin {\\r\\n    address oldAdmin = admin;\\r\\n    admin = newAdmin;\\r\\n    emit NewAdmin(oldAdmin, newAdmin);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier that checks if `msg.sender == admin`.\\r\\n   */\\r\\n  modifier onlyAdmin() {\\r\\n    require(msg.sender == admin, \\\"Sender is not the admin.\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the price in ETH of the token underlying `cToken`.\\r\\n   * @dev Implements the `PriceOracle` interface for Ionic pools (and Compound v2).\\r\\n   * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\\r\\n   */\\r\\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\\r\\n    // Get underlying ERC20 token address\\r\\n    address underlying = address(ICErc20(address(cToken)).underlying());\\r\\n\\r\\n    if (underlying == wtoken) return 1e18;\\r\\n\\r\\n    BasePriceOracle oracle = oracles[underlying];\\r\\n    BasePriceOracle fallbackOracle = fallbackOracles[underlying];\\r\\n\\r\\n    if (address(oracle) != address(0)) {\\r\\n      try oracle.getUnderlyingPrice(cToken) returns (uint256 underlyingPrice) {\\r\\n        if (underlyingPrice == 0) {\\r\\n          if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\r\\n        } else {\\r\\n          return underlyingPrice;\\r\\n        }\\r\\n      } catch {\\r\\n        if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\r\\n      }\\r\\n    } else {\\r\\n      if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\r\\n    }\\r\\n    revert(\\\"Price oracle not found for this underlying token address.\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Attempts to return the price in ETH of `underlying` (implements `BasePriceOracle`).\\r\\n   */\\r\\n  function price(address underlying) public view override returns (uint256) {\\r\\n    // Return 1e18 for WETH\\r\\n    if (underlying == wtoken) return 1e18;\\r\\n\\r\\n    // Get underlying price from assigned oracle\\r\\n    BasePriceOracle oracle = oracles[underlying];\\r\\n    BasePriceOracle fallbackOracle = fallbackOracles[underlying];\\r\\n\\r\\n    if (address(oracle) != address(0)) {\\r\\n      try oracle.price(underlying) returns (uint256 underlyingPrice) {\\r\\n        if (underlyingPrice == 0) {\\r\\n          if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\r\\n        } else {\\r\\n          return underlyingPrice;\\r\\n        }\\r\\n      } catch {\\r\\n        if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\r\\n      }\\r\\n    } else {\\r\\n      if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\r\\n    }\\r\\n    revert(\\\"Price oracle not found for this underlying token address.\\\");\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa2738a573f967b51620f0783677766b4aa7312ad340eb0af7db4782a0e514f24\",\"license\":\"UNLICENSED\"},\"contracts/veION/Voter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport { IVoter } from \\\"./interfaces/IVoter.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { IonicTimeLibrary } from \\\"./libraries/IonicTimeLibrary.sol\\\";\\r\\nimport { IveION } from \\\"./interfaces/IveION.sol\\\";\\r\\nimport { IBribeRewards } from \\\"./interfaces/IBribeRewards.sol\\\";\\r\\nimport { IonicComptroller } from \\\"../compound/ComptrollerInterface.sol\\\";\\r\\nimport { ICErc20 } from \\\"../compound/CTokenInterfaces.sol\\\";\\r\\nimport { MasterPriceOracle } from \\\"../oracles/MasterPriceOracle.sol\\\";\\r\\nimport { ERC721Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Voter Contract\\r\\n * @notice This contract allows veION holders to vote for various markets\\r\\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\\r\\n */\\r\\ncontract Voter is IVoter, Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           State Variables                                 \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  ///@notice The ve token that governs these contracts\\r\\n  address public ve;\\r\\n  ///@notice Base token of ve contract\\r\\n  address internal rewardToken;\\r\\n  ///@notice Standard OZ IGovernor using ve for vote weights\\r\\n  address public governor;\\r\\n  ///@notice Master Price Oracle instance\\r\\n  MasterPriceOracle public mpo;\\r\\n  ///@notice List of LP tokens\\r\\n  address[] public lpTokens;\\r\\n  ///@notice Total Voting Weights for each address\\r\\n  mapping(address => uint256) public totalWeight;\\r\\n  ///@notice Maximum number of markets one voter can vote for at once\\r\\n  uint256 public maxVotingNum;\\r\\n  ///@notice Minimum value for maxVotingNum\\r\\n  uint256 internal constant MIN_MAXVOTINGNUM = 10;\\r\\n  ///@notice All markets viable for incentives\\r\\n  Market[] public markets;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                                Mappings                                   \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  ///@notice Mapping from Reward Accumulator to Bribes Voting Reward\\r\\n  mapping(address => address) public rewardAccumulatorToBribe;\\r\\n  ///@notice Mapping from Market to Market Side to LP Asset to weights\\r\\n  mapping(address => mapping(MarketSide => mapping(address => uint256))) public weights;\\r\\n  ///@notice Mapping from NFT to Pool to LP Asset to Votes\\r\\n  mapping(uint256 => mapping(address => mapping(MarketSide => mapping(address => uint256)))) public votes;\\r\\n  ///@notice Mapping from NFT to Pool to LP Asset to Base Weights\\r\\n  mapping(uint256 => mapping(address => mapping(MarketSide => mapping(address => uint256)))) public baseWeights;\\r\\n  ///@notice Mapping from NFT to List of markets voted for by NFT\\r\\n  mapping(uint256 => mapping(address => address[])) public marketVote;\\r\\n  ///@notice Mapping from NFT to List of market vote sides voted for by NFT\\r\\n  mapping(uint256 => mapping(address => MarketSide[])) public marketVoteSide;\\r\\n  ///@notice Mapping from NFT to Total voting weight of NFT\\r\\n  mapping(uint256 => mapping(address => uint256)) public usedWeights;\\r\\n  ///@notice Mapping from NFT to Timestamp of last vote (ensures single vote per epoch)\\r\\n  mapping(uint256 => uint256) public lastVoted;\\r\\n  ///@notice Mapping from Token to Whitelisted status\\r\\n  mapping(address => bool) public isWhitelistedToken;\\r\\n  ///@notice Mapping from TokenId to Whitelisted status\\r\\n  mapping(uint256 => bool) public isWhitelistedNFT;\\r\\n  ///@notice Mapping from Reward Accumulator to Liveness status\\r\\n  mapping(address => bool) public isAlive;\\r\\n  ///@notice Mapping from Market to Market Side to Reward Accumulator\\r\\n  mapping(address => mapping(MarketSide => address)) public marketToRewardAccumulators;\\r\\n\\r\\n  bool distributionTimelockAlive;\\r\\n\\r\\n  /// @notice Historical prices for each reward token and epoch\\r\\n  mapping(address => mapping(uint256 => uint256)) public historicalPrices;\\r\\n\\r\\n  address public distributor;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                               Modifiers                                   \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /**\\r\\n   * @notice Modifier to ensure that the function is called only in a new epoch since the last vote.\\r\\n   * @dev Reverts if the current epoch start time is less than or equal to the last voted timestamp for the given token ID.\\r\\n   *      Also reverts if the current time is within the vote distribution window.\\r\\n   * @param _tokenId The ID of the veNFT to check the last voted timestamp.\\r\\n   */\\r\\n  modifier onlyNewEpoch(uint256 _tokenId) {\\r\\n    if (IonicTimeLibrary.epochStart(block.timestamp) <= lastVoted[_tokenId]) revert AlreadyVotedOrDeposited();\\r\\n    if (block.timestamp <= IonicTimeLibrary.epochVoteStart(block.timestamp)) revert DistributeWindow();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Modifier to ensure that the function is called only by the governance address.\\r\\n   * @dev Reverts if the caller is not the current governor.\\r\\n   */\\r\\n  modifier onlyGovernance() {\\r\\n    if (msg.sender != governor) revert NotGovernor();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyDistributor() {\\r\\n    if (msg.sender != distributor) revert NotDistributor();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Initializes the Voter contract with the specified parameters.\\r\\n   * @dev Requires initialization with at least one reward token.\\r\\n   * @param _tokens An array of token addresses to be whitelisted.\\r\\n   * @param _mpo The MasterPriceOracle contract address.\\r\\n   * @param _rewardToken The address of the reward token.\\r\\n   * @param _ve The address of the veION contract.\\r\\n   * @custom:reverts TokensArrayEmpty if the _tokens array is empty.\\r\\n   */\\r\\n  function initialize(\\r\\n    address[] calldata _tokens,\\r\\n    MasterPriceOracle _mpo,\\r\\n    address _rewardToken,\\r\\n    address _ve\\r\\n  ) external initializer {\\r\\n    __Ownable2Step_init();\\r\\n    __ReentrancyGuard_init();\\r\\n    uint256 _length = _tokens.length;\\r\\n    if (_length == 0) revert TokensArrayEmpty();\\r\\n    for (uint256 i = 0; i < _length; i++) {\\r\\n      _whitelistToken(_tokens[i], true);\\r\\n    }\\r\\n    mpo = _mpo;\\r\\n    rewardToken = _rewardToken;\\r\\n    ve = _ve;\\r\\n    governor = msg.sender;\\r\\n\\r\\n    emit Initialized(_tokens, address(_mpo), _rewardToken, _ve, governor);\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           External Functions                              \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function vote(\\r\\n    uint256 _tokenId,\\r\\n    address[] calldata _marketVote,\\r\\n    MarketSide[] calldata _marketVoteSide,\\r\\n    uint256[] calldata _weights\\r\\n  ) external nonReentrant onlyNewEpoch(_tokenId) {\\r\\n    VoteLocalVars memory vars;\\r\\n    vars.sender = msg.sender;\\r\\n    if (ERC721Upgradeable(ve).ownerOf(_tokenId) != vars.sender) revert NotOwner();\\r\\n    if (\\r\\n      _marketVote.length != _marketVoteSide.length ||\\r\\n      _marketVoteSide.length != _weights.length ||\\r\\n      _weights.length != _marketVote.length\\r\\n    ) revert UnequalLengths();\\r\\n    if (_marketVote.length > maxVotingNum) revert TooManyPools();\\r\\n    vars.timestamp = block.timestamp;\\r\\n    if ((vars.timestamp > IonicTimeLibrary.epochVoteEnd(vars.timestamp)) && !isWhitelistedNFT[_tokenId])\\r\\n      revert NotWhitelistedNFT();\\r\\n    uint256 totalVoteWeight = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < _marketVote.length; i++) {\\r\\n      totalVoteWeight += _weights[i];\\r\\n    }\\r\\n    for (uint256 i = 0; i < lpTokens.length; i++) {\\r\\n      _reset(_tokenId, lpTokens[i]);\\r\\n    }\\r\\n\\r\\n    lastVoted[_tokenId] = vars.timestamp;\\r\\n    (vars.votingLPs, vars.votingLPBalances, vars.boosts) = IveION(ve).balanceOfNFT(_tokenId);\\r\\n    for (uint256 j = 0; j < vars.votingLPs.length; j++) {\\r\\n      _vote(\\r\\n        _tokenId,\\r\\n        vars.votingLPs[j],\\r\\n        (vars.votingLPBalances[j] * vars.boosts[j]) / 1e18,\\r\\n        _marketVote,\\r\\n        _marketVoteSide,\\r\\n        _weights,\\r\\n        totalVoteWeight\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function poke(uint256 _tokenId) external nonReentrant {\\r\\n    if (block.timestamp <= IonicTimeLibrary.epochVoteStart(block.timestamp)) revert DistributeWindow();\\r\\n    (address[] memory _votingLPs, uint256[] memory _votingLPBalances, uint256[] memory _boosts) = IveION(ve)\\r\\n      .balanceOfNFT(_tokenId);\\r\\n\\r\\n    for (uint256 i = 0; i < _votingLPs.length; i++) {\\r\\n      uint256 effectiveBalance = (_votingLPBalances[i] * _boosts[i]) / 1e18;\\r\\n      _poke(_tokenId, lpTokens[i], effectiveBalance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function reset(uint256 _tokenId) public nonReentrant onlyNewEpoch(_tokenId) {\\r\\n    if (ERC721Upgradeable(ve).ownerOf(_tokenId) != msg.sender) revert NotOwner();\\r\\n    for (uint256 i = 0; i < lpTokens.length; i++) {\\r\\n      _reset(_tokenId, lpTokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external nonReentrant {\\r\\n    if (_bribes.length != _tokens.length) revert UnequalLengths();\\r\\n    if (ERC721Upgradeable(ve).ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\r\\n    uint256 _length = _bribes.length;\\r\\n    for (uint256 i = 0; i < _length; i++) {\\r\\n      IBribeRewards(_bribes[i]).getReward(_tokenId, _tokens[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           Admin External Functions                        \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function distributeRewards() external onlyDistributor {\\r\\n    if (distributionTimelockAlive && block.timestamp <= IonicTimeLibrary.epochVoteEnd(block.timestamp))\\r\\n      revert NotDistributeWindow();\\r\\n    uint256 _reward = IERC20(rewardToken).balanceOf(address(this));\\r\\n    uint256 _totalLPValueETH = _calculateTotalLPValue();\\r\\n    for (uint256 i = 0; i < markets.length; i++) {\\r\\n      uint256 _marketWeightETH = _calculateMarketLPValue(markets[i].marketAddress, markets[i].side);\\r\\n      if (_marketWeightETH > 0) {\\r\\n        IERC20(rewardToken).safeTransfer(\\r\\n          marketToRewardAccumulators[markets[i].marketAddress][markets[i].side],\\r\\n          (_reward * _marketWeightETH) / _totalLPValueETH\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function whitelistToken(address _token, bool _bool) external onlyGovernance {\\r\\n    _whitelistToken(_token, _bool);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external onlyGovernance {\\r\\n    address _sender = msg.sender;\\r\\n    isWhitelistedNFT[_tokenId] = _bool;\\r\\n    emit WhitelistNFT(_sender, _tokenId, _bool);\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           Internal Functions                              \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to handle voting logic for a given token ID and voting asset.\\r\\n   * @param _tokenId The ID of the token used for voting.\\r\\n   * @param _votingAsset The address of the asset being used for voting.\\r\\n   * @param _votingAssetBalance The balance of the voting asset.\\r\\n   * @param _marketVote An array of market addresses to vote for.\\r\\n   * @param _marketVoteSide An array of market sides corresponding to the markets.\\r\\n   * @param _weights An array of weights for each market.\\r\\n   * @param totalVoteWeight The total weight of the vote.\\r\\n   */\\r\\n  function _vote(\\r\\n    uint256 _tokenId,\\r\\n    address _votingAsset,\\r\\n    uint256 _votingAssetBalance,\\r\\n    address[] memory _marketVote,\\r\\n    MarketSide[] memory _marketVoteSide,\\r\\n    uint256[] memory _weights,\\r\\n    uint256 totalVoteWeight\\r\\n  ) internal {\\r\\n    VoteVars memory vars;\\r\\n    uint256 marketVoteLength = _marketVote.length;\\r\\n    for (uint256 i = 0; i < marketVoteLength; i++) {\\r\\n      vars.market = _marketVote[i];\\r\\n      vars.marketSide = _marketVoteSide[i];\\r\\n      vars.rewardAccumulator = marketToRewardAccumulators[vars.market][vars.marketSide];\\r\\n      vars.bribes = rewardAccumulatorToBribe[vars.rewardAccumulator];\\r\\n      if (_weights[i] == 0) revert ZeroWeight();\\r\\n      if (vars.rewardAccumulator == address(0)) revert RewardAccumulatorDoesNotExist(vars.market);\\r\\n      if (!isAlive[vars.rewardAccumulator]) revert RewardAccumulatorNotAlive(vars.rewardAccumulator);\\r\\n\\r\\n      vars.marketWeight = (_weights[i] * _votingAssetBalance) / totalVoteWeight;\\r\\n      if (votes[_tokenId][vars.market][vars.marketSide][_votingAsset] != 0) revert NonZeroVotes();\\r\\n\\r\\n      marketVote[_tokenId][_votingAsset].push(vars.market);\\r\\n      marketVoteSide[_tokenId][_votingAsset].push(vars.marketSide);\\r\\n\\r\\n      weights[vars.market][vars.marketSide][_votingAsset] += vars.marketWeight;\\r\\n      votes[_tokenId][vars.market][vars.marketSide][_votingAsset] += vars.marketWeight;\\r\\n      baseWeights[_tokenId][vars.market][vars.marketSide][_votingAsset] = _weights[i];\\r\\n      IBribeRewards(vars.bribes).deposit(_votingAsset, uint256(vars.marketWeight), _tokenId);\\r\\n      vars.usedWeight += vars.marketWeight;\\r\\n      vars.totalWeight += vars.marketWeight;\\r\\n      emit Voted(\\r\\n        msg.sender,\\r\\n        vars.market,\\r\\n        _tokenId,\\r\\n        vars.marketWeight,\\r\\n        weights[vars.market][vars.marketSide][_votingAsset],\\r\\n        block.timestamp\\r\\n      );\\r\\n    }\\r\\n    IveION(ve).voting(_tokenId, true);\\r\\n    totalWeight[_votingAsset] += uint256(vars.totalWeight);\\r\\n    usedWeights[_tokenId][_votingAsset] = uint256(vars.usedWeight);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to update voting balances for a given token ID and voting asset.\\r\\n   * @param _tokenId The ID of the token whose voting balance is being updated.\\r\\n   * @param _votingAsset The address of the asset being used for voting.\\r\\n   * @param _votingAssetBalance The balance of the voting asset.\\r\\n   */\\r\\n  function _poke(uint256 _tokenId, address _votingAsset, uint256 _votingAssetBalance) internal {\\r\\n    address[] memory _marketVote = marketVote[_tokenId][_votingAsset];\\r\\n    MarketSide[] memory _marketVoteSide = marketVoteSide[_tokenId][_votingAsset];\\r\\n    uint256 _marketCnt = _marketVote.length;\\r\\n    uint256[] memory _weights = new uint256[](_marketCnt);\\r\\n    uint256 totalVoteWeight = 0;\\r\\n\\r\\n    for (uint256 i = 0; i < _marketCnt; i++) {\\r\\n      _weights[i] = baseWeights[_tokenId][_marketVote[i]][_marketVoteSide[i]][_votingAsset];\\r\\n    }\\r\\n\\r\\n    for (uint256 i = 0; i < _marketVote.length; i++) {\\r\\n      totalVoteWeight += _weights[i];\\r\\n    }\\r\\n\\r\\n    _reset(_tokenId, _votingAsset);\\r\\n    _vote(_tokenId, _votingAsset, _votingAssetBalance, _marketVote, _marketVoteSide, _weights, totalVoteWeight);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to reset voting state for a given token ID and voting asset.\\r\\n   * @param _tokenId The ID of the token whose voting state is being reset.\\r\\n   * @param _votingAsset The address of the asset being used for voting.\\r\\n   */\\r\\n  function _reset(uint256 _tokenId, address _votingAsset) internal {\\r\\n    address[] storage _marketVote = marketVote[_tokenId][_votingAsset];\\r\\n    MarketSide[] storage _marketVoteSide = marketVoteSide[_tokenId][_votingAsset];\\r\\n    uint256 _marketVoteCnt = _marketVote.length;\\r\\n\\r\\n    for (uint256 i = 0; i < _marketVoteCnt; i++) {\\r\\n      address _market = _marketVote[i];\\r\\n      MarketSide _marketSide = _marketVoteSide[i];\\r\\n\\r\\n      uint256 _votes = votes[_tokenId][_market][_marketSide][_votingAsset];\\r\\n      if (_votes != 0) {\\r\\n        weights[_market][_marketSide][_votingAsset] -= _votes;\\r\\n        delete votes[_tokenId][_market][_marketSide][_votingAsset];\\r\\n        IBribeRewards(rewardAccumulatorToBribe[marketToRewardAccumulators[_market][_marketSide]]).withdraw(\\r\\n          _votingAsset,\\r\\n          uint256(_votes),\\r\\n          _tokenId\\r\\n        );\\r\\n        totalWeight[_votingAsset] -= _votes;\\r\\n        emit Abstained(\\r\\n          msg.sender,\\r\\n          _market,\\r\\n          _tokenId,\\r\\n          _votes,\\r\\n          weights[_market][_marketSide][_votingAsset],\\r\\n          block.timestamp\\r\\n        );\\r\\n      }\\r\\n    }\\r\\n    usedWeights[_tokenId][_votingAsset] = 0;\\r\\n    delete marketVote[_tokenId][_votingAsset];\\r\\n    delete marketVoteSide[_tokenId][_votingAsset];\\r\\n    IveION(ve).voting(_tokenId, false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to whitelist or unwhitelist a token for use in bribes.\\r\\n   * @param _token The address of the token to be whitelisted or unwhitelisted.\\r\\n   * @param _bool Boolean indicating whether to whitelist (true) or unwhitelist (false) the token.\\r\\n   */\\r\\n  function _whitelistToken(address _token, bool _bool) internal {\\r\\n    isWhitelistedToken[_token] = _bool;\\r\\n    emit WhitelistToken(msg.sender, _token, _bool);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to calculate the ETH value of a given amount of LP tokens.\\r\\n   * @param amount The amount of LP tokens.\\r\\n   * @param lpToken The address of the LP token.\\r\\n   * @return The ETH value of the given amount of LP tokens.\\r\\n   */\\r\\n  function _getTokenEthValue(uint256 amount, address lpToken) internal view returns (uint256) {\\r\\n    uint256 tokenPriceInEth = mpo.price(lpToken); // Fetch price of 1 lpToken in ETH\\r\\n    uint256 ethValue = amount * tokenPriceInEth;\\r\\n    return ethValue;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to calculate the total ETH value of all LP tokens in the markets.\\r\\n   * @return _totalLPValueETH The total ETH value of all LP tokens.\\r\\n   */\\r\\n  function _calculateTotalLPValue() internal view returns (uint256 _totalLPValueETH) {\\r\\n    uint256 marketLength = markets.length;\\r\\n    for (uint256 i = 0; i < marketLength; i++)\\r\\n      _totalLPValueETH += _calculateMarketLPValue(markets[i].marketAddress, markets[i].side);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to calculate the ETH value of LP tokens for a specific market.\\r\\n   * @param _market The address of the market.\\r\\n   * @param _marketSide The side of the market.\\r\\n   * @return _marketLPValueETH The ETH value of LP tokens for the specified market.\\r\\n   */\\r\\n  function _calculateMarketLPValue(\\r\\n    address _market,\\r\\n    MarketSide _marketSide\\r\\n  ) internal view returns (uint256 _marketLPValueETH) {\\r\\n    uint256 lpTokensLength = lpTokens.length;\\r\\n    for (uint256 i = 0; i < lpTokensLength; i++) {\\r\\n      uint256 _lpAmount = weights[_market][_marketSide][lpTokens[i]];\\r\\n      uint256 tokenEthValue = _getTokenEthValue(_lpAmount, lpTokens[i]);\\r\\n      _marketLPValueETH += tokenEthValue;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Internal function to check if a market exists.\\r\\n   * @param _marketAddress The address of the market.\\r\\n   * @param _marketSide The side of the market.\\r\\n   * @return True if the market exists, false otherwise.\\r\\n   */\\r\\n  function _marketExists(address _marketAddress, MarketSide _marketSide) internal view returns (bool) {\\r\\n    uint256 marketLength = markets.length;\\r\\n    for (uint256 j = 0; j < marketLength; j++) {\\r\\n      if (markets[j].marketAddress == _marketAddress && markets[j].side == _marketSide) {\\r\\n        return true;\\r\\n      }\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           Setter Functions                                \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function setLpTokens(address[] memory _lpTokens) external onlyOwner {\\r\\n    require(_lpTokens.length != 0, \\\"LpTokens array cannot be empty\\\");\\r\\n    lpTokens = _lpTokens;\\r\\n    emit LpTokensSet(_lpTokens);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function setMpo(address _mpo) external onlyOwner {\\r\\n    if (_mpo == address(0)) revert ZeroAddress();\\r\\n    mpo = MasterPriceOracle(_mpo);\\r\\n    emit MpoSet(_mpo);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function setGovernor(address _governor) public onlyOwner {\\r\\n    if (_governor == address(0)) revert ZeroAddress();\\r\\n    governor = _governor;\\r\\n    emit GovernorSet(_governor);\\r\\n  }\\r\\n\\r\\n  function setDistributor(address _distributor) public onlyOwner {\\r\\n    if (_distributor == address(0)) revert ZeroAddress();\\r\\n    distributor = _distributor;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function addMarkets(Market[] calldata _markets) external onlyGovernance {\\r\\n    for (uint256 i = 0; i < _markets.length; i++) {\\r\\n      Market memory newMarket = _markets[i];\\r\\n      if (_marketExists(newMarket.marketAddress, newMarket.side)) revert MarketAlreadyExists();\\r\\n      markets.push(newMarket);\\r\\n    }\\r\\n    emit MarketsAdded(_markets);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function setMarketRewardAccumulators(\\r\\n    address[] calldata _markets,\\r\\n    MarketSide[] calldata _marketSides,\\r\\n    address[] calldata _rewardAccumulators\\r\\n  ) external onlyGovernance {\\r\\n    uint256 _length = _markets.length;\\r\\n    if (_marketSides.length != _length) revert MismatchedArrayLengths();\\r\\n    if (_rewardAccumulators.length != _length) revert MismatchedArrayLengths();\\r\\n    for (uint256 i = 0; i < _length; i++) {\\r\\n      marketToRewardAccumulators[_markets[i]][_marketSides[i]] = _rewardAccumulators[i];\\r\\n      isAlive[_rewardAccumulators[i]] = true;\\r\\n    }\\r\\n    emit MarketRewardAccumulatorsSet(_markets, _marketSides, _rewardAccumulators);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external onlyGovernance {\\r\\n    uint256 _length = _bribes.length;\\r\\n    if (_rewardAccumulators.length != _length) revert MismatchedArrayLengths();\\r\\n    for (uint256 i = 0; i < _length; i++) {\\r\\n      rewardAccumulatorToBribe[_rewardAccumulators[i]] = _bribes[i];\\r\\n    }\\r\\n    emit BribesSet(_rewardAccumulators, _bribes);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function setMaxVotingNum(uint256 _maxVotingNum) external onlyGovernance {\\r\\n    if (_maxVotingNum < MIN_MAXVOTINGNUM) revert MaximumVotingNumberTooLow();\\r\\n    if (_maxVotingNum == maxVotingNum) revert SameValue();\\r\\n    maxVotingNum = _maxVotingNum;\\r\\n    emit MaxVotingNumSet(_maxVotingNum);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function toggleRewardAccumulatorAlive(\\r\\n    address _market,\\r\\n    MarketSide _marketSide,\\r\\n    bool _isAlive\\r\\n  ) external onlyGovernance {\\r\\n    address _rewardAccumulator = marketToRewardAccumulators[_market][_marketSide];\\r\\n    if (_rewardAccumulator == address(0)) revert RewardAccumulatorDoesNotExist(_market);\\r\\n    isAlive[_rewardAccumulator] = _isAlive;\\r\\n    emit RewardAccumulatorAliveToggled(_market, _marketSide, _isAlive);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function toggleDistributionTimelockAlive(bool _isAlive) external onlyGovernance {\\r\\n    distributionTimelockAlive = _isAlive;\\r\\n    emit DistributionTimelockAliveToggled(_isAlive);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets historical prices for LP tokens at specific epochs\\r\\n   * @param epochTimestamp The timestamp of the epoch\\r\\n   * @param lpToken The LP token address\\r\\n   * @param price The price to set\\r\\n   */\\r\\n  function setHistoricalPrices(uint256 epochTimestamp, address lpToken, uint256 price) external onlyDistributor {\\r\\n    uint256 epochStart = IonicTimeLibrary.epochStart(epochTimestamp);\\r\\n    historicalPrices[lpToken][epochStart] = price;\\r\\n    // emit HistoricalPriceSet(epochTimestamp, lpToken, price);\\r\\n  }\\r\\n\\r\\n  function emergencyWithdraw(uint256 amount, address ionicToken) external onlyOwner {\\r\\n    IERC20(ionicToken).safeTransfer(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the historical price for a specific LP token at a given epoch\\r\\n   * @param lpToken The LP token address\\r\\n   * @param epochTimestamp The timestamp of the epoch\\r\\n   * @return The historical price of the LP token at the specified epoch\\r\\n   */\\r\\n  function getHistoricalPrice(address lpToken, uint256 epochTimestamp) external view returns (uint256) {\\r\\n    uint256 epochStart = IonicTimeLibrary.epochStart(epochTimestamp);\\r\\n    return historicalPrices[lpToken][epochStart];\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           Pure/View Functions                             \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function epochStart(uint256 _timestamp) external pure returns (uint256) {\\r\\n    return IonicTimeLibrary.epochStart(_timestamp);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function epochNext(uint256 _timestamp) external pure returns (uint256) {\\r\\n    return IonicTimeLibrary.epochNext(_timestamp);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256) {\\r\\n    return IonicTimeLibrary.epochVoteStart(_timestamp);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256) {\\r\\n    return IonicTimeLibrary.epochVoteEnd(_timestamp);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function marketsLength() external view returns (uint256) {\\r\\n    return markets.length;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function getAllLpRewardTokens() external view returns (address[] memory) {\\r\\n    return lpTokens;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IVoter\\r\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory) {\\r\\n    uint256 length = marketVote[_tokenId][_lpAsset].length;\\r\\n    address[] memory _marketVotes = new address[](length);\\r\\n    MarketSide[] memory _marketVoteSides = new MarketSide[](length);\\r\\n    uint256[] memory _votes = new uint256[](length);\\r\\n\\r\\n    for (uint256 i = 0; i < length; i++) {\\r\\n      _marketVotes[i] = marketVote[_tokenId][_lpAsset][i];\\r\\n      _marketVoteSides[i] = marketVoteSide[_tokenId][_lpAsset][i];\\r\\n      _votes[i] = votes[_tokenId][_marketVotes[i]][_marketVoteSides[i]][_lpAsset];\\r\\n    }\\r\\n\\r\\n    uint256 _usedWeight = usedWeights[_tokenId][_lpAsset];\\r\\n\\r\\n    return\\r\\n      VoteDetails({\\r\\n        marketVotes: _marketVotes,\\r\\n        marketVoteSides: _marketVoteSides,\\r\\n        votes: _votes,\\r\\n        usedWeight: _usedWeight\\r\\n      });\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xf804ec9017eaa7f943b22c190567b175aa3f49bb2cba059e1dfd367e5d59c924\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IBribeRewards.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IBribeRewards {\\r\\n  /// @notice A checkpoint for marking balance\\r\\n  struct Checkpoint {\\r\\n    uint256 timestamp;\\r\\n    uint256 balanceOf;\\r\\n  }\\r\\n\\r\\n  /// @notice A checkpoint for marking supply\\r\\n  struct SupplyCheckpoint {\\r\\n    uint256 timestamp;\\r\\n    uint256 supply;\\r\\n  }\\r\\n\\r\\n  struct EarnedVars {\\r\\n    uint256 totalReward;\\r\\n    uint256 reward;\\r\\n    uint256 supplyValue;\\r\\n    uint256 epochBalanceValue;\\r\\n    uint256 currTs;\\r\\n    uint256 index;\\r\\n    uint256 numEpochs;\\r\\n    uint256 overallBalance;\\r\\n    uint256 overallSupply;\\r\\n    uint256 historicalPrice;\\r\\n  }\\r\\n\\r\\n  error InvalidReward();\\r\\n  error Unauthorized();\\r\\n  error InvalidGauge();\\r\\n  error InvalidEscrowToken();\\r\\n  error SingleTokenExpected();\\r\\n  error InvalidVotingEscrow();\\r\\n  error TokenNotWhitelisted();\\r\\n  error AmountCannotBeZero();\\r\\n  error HistoricalPriceNotSet(address lpToken, uint256 epochStart);\\r\\n\\r\\n  event Deposit(address indexed user, uint256 indexed tokenId, uint256 amount);\\r\\n  event Withdraw(address indexed user, uint256 indexed tokenId, uint256 amount);\\r\\n  event RewardNotification(address indexed user, address indexed rewardToken, uint256 indexed epoch, uint256 amount);\\r\\n  event RewardsClaimed(address indexed user, address indexed rewardToken, uint256 amount);\\r\\n  event HistoricalPriceSet(uint256 indexed epochTimestamp, address indexed lpToken, uint256 price);\\r\\n\\r\\n  /// @notice Deposit an amount into the bribe rewards contract for a specific veNFT\\r\\n  /// @dev Can only be called internally by authorized entities.\\r\\n  /// @param lpToken  Address of the liquidity pool token\\r\\n  /// @param amount   Amount to be deposited for the veNFT\\r\\n  /// @param tokenId  Unique identifier of the veNFT\\r\\n  function deposit(address lpToken, uint256 amount, uint256 tokenId) external;\\r\\n\\r\\n  /// @notice Withdraw an amount from the bribe rewards contract for a specific veNFT\\r\\n  /// @dev Can only be called internally by authorized entities.\\r\\n  /// @param lpToken  Address of the liquidity pool token\\r\\n  /// @param amount   Amount to be withdrawn for the veNFT\\r\\n  /// @param tokenId  Unique identifier of the veNFT\\r\\n  function withdraw(address lpToken, uint256 amount, uint256 tokenId) external;\\r\\n\\r\\n  /// @notice Claim the rewards earned by a veNFT holder\\r\\n  /// @param tokenId  Unique identifier of the veNFT\\r\\n  /// @param tokens   Array of tokens to claim rewards for\\r\\n  function getReward(uint256 tokenId, address[] memory tokens) external;\\r\\n\\r\\n  /// @notice Notify the contract about new rewards for stakers\\r\\n  /// @param token    Address of the reward token\\r\\n  /// @param amount   Amount of the reward token to be added\\r\\n  function notifyRewardAmount(address token, uint256 amount) external;\\r\\n\\r\\n  /// @notice Get the prior balance index for a veNFT at a specific timestamp\\r\\n  /// @dev Timestamp must be in the past or present.\\r\\n  /// @param tokenId      The veNFT token ID to check\\r\\n  /// @param lpToken      Address of the liquidity pool token\\r\\n  /// @param timestamp    The timestamp to get the balance at\\r\\n  /// @return The balance index at the given timestamp\\r\\n  function getPriorBalanceIndex(uint256 tokenId, address lpToken, uint256 timestamp) external view returns (uint256);\\r\\n\\r\\n  /// @notice Get the prior supply index at a specific timestamp\\r\\n  /// @dev Timestamp must be in the past or present.\\r\\n  /// @param timestamp The timestamp to get the supply index at\\r\\n  /// @return The supply index at the given timestamp\\r\\n  function getPriorSupplyIndex(uint256 timestamp, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /// @notice Calculate the rewards earned for a specific token and veNFT\\r\\n  /// @param token Address of the reward token\\r\\n  /// @param tokenId Unique identifier of the veNFT\\r\\n  /// @return Amount of the reward token earned\\r\\n  function earned(address token, uint256 tokenId) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x71a54e6c66bc6412a7bed2b37bfe2efe0d977ce3e0c6f69a0412d4b07bfe9bbb\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IVoter\\r\\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\\r\\n */\\r\\ninterface IVoter {\\r\\n  /// @notice Error thrown when a user has already voted or deposited.\\r\\n  error AlreadyVotedOrDeposited();\\r\\n\\r\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\r\\n  error DistributeWindow();\\r\\n\\r\\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\\r\\n  error RewardAccumulatorDoesNotExist(address _pool);\\r\\n\\r\\n  /// @notice Error thrown when a reward accumulator is not alive.\\r\\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\\r\\n\\r\\n  /// @notice Error thrown when a market already exists.\\r\\n  error MarketAlreadyExists();\\r\\n\\r\\n  /// @notice Error thrown when the maximum voting number is too low.\\r\\n  error MaximumVotingNumberTooLow();\\r\\n\\r\\n  /// @notice Error thrown when array lengths do not match.\\r\\n  error MismatchedArrayLengths();\\r\\n\\r\\n  /// @notice Error thrown when there are non-zero votes.\\r\\n  error NonZeroVotes();\\r\\n\\r\\n  /// @notice Error thrown when the caller is not the owner.\\r\\n  error NotOwner();\\r\\n\\r\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\r\\n  error NotDistributeWindow();\\r\\n\\r\\n  /// @notice Error thrown when the caller is not the governor.\\r\\n  error NotGovernor();\\r\\n\\r\\n  error NotDistributor();\\r\\n\\r\\n  /// @notice Error thrown when an NFT is not whitelisted.\\r\\n  error NotWhitelistedNFT();\\r\\n\\r\\n  /// @notice Error thrown when the same value is provided.\\r\\n  error SameValue();\\r\\n\\r\\n  /// @notice Error thrown when there are too many pools.\\r\\n  error TooManyPools();\\r\\n\\r\\n  /// @notice Error thrown when array lengths are unequal.\\r\\n  error UnequalLengths();\\r\\n\\r\\n  /// @notice Error thrown when an address is zero.\\r\\n  error ZeroAddress();\\r\\n\\r\\n  /// @notice Error thrown when the tokens array is empty.\\r\\n  error TokensArrayEmpty();\\r\\n\\r\\n  /// @notice Error thrown when the weight is zero.\\r\\n  error ZeroWeight();\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store vote details.\\r\\n   * @param marketVotes Array of market addresses voted for.\\r\\n   * @param marketVoteSides Array of market sides voted for.\\r\\n   * @param votes Array of vote weights.\\r\\n   * @param usedWeight Total weight used in voting.\\r\\n   */\\r\\n  struct VoteDetails {\\r\\n    address[] marketVotes;\\r\\n    MarketSide[] marketVoteSides;\\r\\n    uint256[] votes;\\r\\n    uint256 usedWeight;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store market information.\\r\\n   * @param marketAddress Address of the market.\\r\\n   * @param side Side of the market (Supply or Borrow).\\r\\n   */\\r\\n  struct Market {\\r\\n    address marketAddress;\\r\\n    MarketSide side;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store variables used in voting.\\r\\n   * @param totalWeight Total weight available for voting.\\r\\n   * @param usedWeight Weight used in voting.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param rewardAccumulator Address of the reward accumulator.\\r\\n   * @param marketWeight Weight of the market.\\r\\n   * @param bribes Address of the bribes.\\r\\n   */\\r\\n  struct VoteVars {\\r\\n    uint256 totalWeight;\\r\\n    uint256 usedWeight;\\r\\n    address market;\\r\\n    MarketSide marketSide;\\r\\n    address rewardAccumulator;\\r\\n    uint256 marketWeight;\\r\\n    address bribes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store local variables used in voting.\\r\\n   * @param sender Address of the sender.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   * @param votingLPs Array of voting LP addresses.\\r\\n   * @param votingLPBalances Array of voting LP balances.\\r\\n   * @param boosts Array of boosts.\\r\\n   */\\r\\n  struct VoteLocalVars {\\r\\n    address sender;\\r\\n    uint256 timestamp;\\r\\n    address[] votingLPs;\\r\\n    uint256[] votingLPBalances;\\r\\n    uint256[] boosts;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum to represent the side of a market.\\r\\n   */\\r\\n  enum MarketSide {\\r\\n    Supply,\\r\\n    Borrow\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a vote is cast.\\r\\n   * @param voter Address of the voter.\\r\\n   * @param pool Address of the pool.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param weight Weight of the vote.\\r\\n   * @param totalWeight Total weight of the vote.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   */\\r\\n  event Voted(\\r\\n    address indexed voter,\\r\\n    address indexed pool,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 weight,\\r\\n    uint256 totalWeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a vote is abstained.\\r\\n   * @param voter Address of the voter.\\r\\n   * @param pool Address of the pool.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param weight Weight of the vote.\\r\\n   * @param totalWeight Total weight of the vote.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   */\\r\\n  event Abstained(\\r\\n    address indexed voter,\\r\\n    address indexed pool,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 weight,\\r\\n    uint256 totalWeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a reward is notified.\\r\\n   * @param sender Address of the sender.\\r\\n   * @param reward Address of the reward.\\r\\n   * @param amount Amount of the reward.\\r\\n   */\\r\\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a token is whitelisted.\\r\\n   * @param whitelister Address of the whitelister.\\r\\n   * @param token Address of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when an NFT is whitelisted.\\r\\n   * @param whitelister Address of the whitelister.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\\r\\n\\r\\n  event LpTokensSet(address[] indexed lpTokens);\\r\\n  event MpoSet(address indexed mpo);\\r\\n  event GovernorSet(address indexed governor);\\r\\n  event MarketsAdded(Market[] markets);\\r\\n  event MarketRewardAccumulatorsSet(\\r\\n    address[] indexed markets,\\r\\n    MarketSide[] indexed marketSides,\\r\\n    address[] indexed rewardAccumulators\\r\\n  );\\r\\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\\r\\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\\r\\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\\r\\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\\r\\n  event DistributionTimelockAliveToggled(bool isAlive);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the weight of a market.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The weight of the market.\\r\\n   */\\r\\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the votes for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The votes for the token.\\r\\n   */\\r\\n  function votes(\\r\\n    uint256 tokenId,\\r\\n    address market,\\r\\n    MarketSide marketSide,\\r\\n    address lpToken\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the used weights for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The used weights for the token.\\r\\n   */\\r\\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the last voted timestamp for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @return The last voted timestamp for the token.\\r\\n   */\\r\\n  function lastVoted(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Check if a token is whitelisted.\\r\\n   * @param token Address of the token.\\r\\n   * @return True if the token is whitelisted, false otherwise.\\r\\n   */\\r\\n  function isWhitelistedToken(address token) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Check if an NFT is whitelisted.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @return True if the NFT is whitelisted, false otherwise.\\r\\n   */\\r\\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the ve contract.\\r\\n   * @return The address of the ve contract.\\r\\n   */\\r\\n  function ve() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the governor.\\r\\n   * @return The address of the governor.\\r\\n   */\\r\\n  function governor() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Update voting balances in voting rewards contracts.\\r\\n   * @param _tokenId ID of veNFT whose balance you wish to update.\\r\\n   */\\r\\n  function poke(uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\\r\\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\\r\\n   *      Can only vote for gauges that have not been killed.\\r\\n   *      Throws if length of _poolVote and _weights do not match.\\r\\n   * @param _tokenId ID of veNFT you are voting with.\\r\\n   * @param _poolVote Array of pools you are voting for.\\r\\n   * @param _marketVoteSide Array of market vote sides you are voting for.\\r\\n   * @param _weights Weights of pools.\\r\\n   */\\r\\n  function vote(\\r\\n    uint256 _tokenId,\\r\\n    address[] calldata _poolVote,\\r\\n    MarketSide[] calldata _marketVoteSide,\\r\\n    uint256[] calldata _weights\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\\r\\n   * @dev Cannot reset in the same epoch that you voted in.\\r\\n   *      Can vote or deposit into a managed NFT again after reset.\\r\\n   * @param _tokenId ID of veNFT that you are resetting.\\r\\n   */\\r\\n  function reset(uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Distributes rewards to eligible markets.\\r\\n   */\\r\\n  function distributeRewards() external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claim bribes for a given NFT.\\r\\n   * @dev Utility to help batch bribe claims.\\r\\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\\r\\n   * @param _tokens Array of tokens that are used as bribes.\\r\\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\\r\\n   */\\r\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\\r\\n   * @dev Throws if not called by governor.\\r\\n   * @param _token Address of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  function whitelistToken(address _token, bool _bool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\r\\n   * @dev Throws if not called by governor.\\r\\n   *      Throws if already whitelisted.\\r\\n   * @param _tokenId ID of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the LP tokens.\\r\\n   * @param _lpTokens Array of LP token addresses.\\r\\n   */\\r\\n  function setLpTokens(address[] memory _lpTokens) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the Master Price Oracle (MPO) address.\\r\\n   * @param _mpo Address of the Master Price Oracle.\\r\\n   */\\r\\n  function setMpo(address _mpo) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set a new governor.\\r\\n   * @param _governor Address of the new governor.\\r\\n   */\\r\\n  function setGovernor(address _governor) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Add new markets.\\r\\n   * @param _markets Array of Market structs to be added.\\r\\n   */\\r\\n  function addMarkets(Market[] calldata _markets) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set reward accumulators for markets.\\r\\n   * @param _markets Array of market addresses.\\r\\n   * @param _marketSides Array of market sides.\\r\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\r\\n   */\\r\\n  function setMarketRewardAccumulators(\\r\\n    address[] calldata _markets,\\r\\n    MarketSide[] calldata _marketSides,\\r\\n    address[] calldata _rewardAccumulators\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set bribes for reward accumulators.\\r\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\r\\n   * @param _bribes Array of bribe addresses.\\r\\n   */\\r\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the maximum number of votes.\\r\\n   * @param _maxVotingNum Maximum number of votes allowed.\\r\\n   */\\r\\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggle the alive status of a reward accumulator.\\r\\n   * @param _market Address of the market.\\r\\n   * @param _marketSide Side of the market.\\r\\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\\r\\n   */\\r\\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggle the alive status of a timelock on distributing rewards.\\r\\n   * @param _isAlive Boolean indicating if the timelock is alive.\\r\\n   */\\r\\n  function toggleDistributionTimelockAlive(bool _isAlive) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Get the start of the epoch for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the epoch start for.\\r\\n   * @return The start of the epoch.\\r\\n   */\\r\\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the next epoch for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the next epoch for.\\r\\n   * @return The next epoch.\\r\\n   */\\r\\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the start of the voting period for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the voting start for.\\r\\n   * @return The start of the voting period.\\r\\n   */\\r\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the end of the voting period for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the voting end for.\\r\\n   * @return The end of the voting period.\\r\\n   */\\r\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the number of markets.\\r\\n   * @return The number of markets.\\r\\n   */\\r\\n  function marketsLength() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get all LP reward tokens.\\r\\n   * @return An array of addresses representing all LP reward tokens.\\r\\n   */\\r\\n  function getAllLpRewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Get vote details for a specific token ID and LP asset.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpAsset The address of the LP asset.\\r\\n   * @return A struct containing vote details.\\r\\n   */\\r\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\\r\\n\\r\\n  function getHistoricalPrice(address _lpToken, uint256 _epochTimestamp) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x1b98a717adbe512af98c6c42c7d4157e96d5faf5794673bead4d41e5e6385769\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveION.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\r\\nimport \\\"./IveIONCore.sol\\\";\\r\\nimport \\\"./IveIONFirstExtension.sol\\\";\\r\\nimport \\\"./IveIONSecondExtension.sol\\\";\\r\\n\\r\\n/// @title IveION Interface\\r\\n/// @notice Interface for veION contract\\r\\ninterface IveION is IveIONStructsEnumsErrorsEvents, IveIONCore, IveIONFirstExtension, IveIONSecondExtension {\\r\\n  // Constants\\r\\n  function PRECISION() external view returns (uint256);\\r\\n\\r\\n  // State Variables\\r\\n  function s_tokenId() external view returns (uint256);\\r\\n  function s_limitedBoost() external view returns (uint256);\\r\\n  function s_limitedBoostActive() external view returns (bool);\\r\\n  function s_veAERO() external view returns (address);\\r\\n  function s_aeroVoting() external view returns (address);\\r\\n  function s_ionicPool() external view returns (address);\\r\\n  function s_voter() external view returns (address);\\r\\n  function s_aeroVoterBoost() external view returns (uint256);\\r\\n  function s_minimumLockDuration() external view returns (uint256);\\r\\n  function s_maxEarlyWithdrawFee() external view returns (uint256);\\r\\n  function ap() external view returns (address);\\r\\n  function implementation() external view returns (address);\\r\\n\\r\\n  // Mappings\\r\\n  function s_minimumLockAmount(LpTokenType lpTokenType) external view returns (uint256);\\r\\n  function s_whitelistedToken(address token) external view returns (bool);\\r\\n  function s_lpType(address token) external view returns (LpTokenType);\\r\\n  function s_canSplit(address user) external view returns (bool);\\r\\n  function s_locked(uint256 tokenId, LpTokenType lpTokenType) external view returns (LockedBalance memory);\\r\\n  function s_userPointEpoch(uint256 tokenId, LpTokenType lpTokenType) external view returns (uint256);\\r\\n  function s_userPointHistory(\\r\\n    uint256 tokenId,\\r\\n    LpTokenType lpTokenType,\\r\\n    uint256 epoch\\r\\n  ) external view returns (UserPoint memory);\\r\\n  function s_voted(uint256 tokenId) external view returns (bool);\\r\\n  function s_supply(LpTokenType lpTokenType) external view returns (uint256);\\r\\n  function s_permanentLockBalance(LpTokenType lpTokenType) external view returns (uint256);\\r\\n  function s_stakeStrategy(LpTokenType lpTokenType) external view returns (address);\\r\\n  function s_underlyingStake(uint256 tokenId, address token) external view returns (uint256);\\r\\n  function s_protocolFees(LpTokenType lpTokenType) external view returns (uint256);\\r\\n  function s_distributedFees(LpTokenType lpTokenType) external view returns (uint256);\\r\\n  function s_delegations(\\r\\n    uint256 delegatorTokenId,\\r\\n    uint256 delegateeTokenId,\\r\\n    LpTokenType lpTokenType\\r\\n  ) external view returns (uint256);\\r\\n  function s_userCumulativeAssetValues(address user, address token) external view returns (uint256);\\r\\n  function s_delegatorsBlocked(uint256 tokenId, address token) external view returns (bool);\\r\\n\\r\\n  // Openzeppelin functions\\r\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n  function ownerOf(uint256 tokenId) external returns (address);\\r\\n  function owner() external returns (address);\\r\\n  function balanceOf(address owner) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x26e77a111517276657373a7fe21c54fa48845b0de37819a79d7027c8c11d60b3\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\r\\n\\r\\n/// @title IveION Interface\\r\\n/// @notice Interface for veION contract\\r\\ninterface IveIONCore {\\r\\n  /**\\r\\n   * @notice Creates a new lock for multiple tokens and assigns it to a specified address\\r\\n   * @param _tokenAddress Array of token addresses to lock\\r\\n   * @param _tokenAmount Array of token amounts to lock\\r\\n   * @param _duration Array of lock durations\\r\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\r\\n   * @param _to Address to assign the lock to\\r\\n   * @return The ID of the newly created veNFT\\r\\n   */\\r\\n  function createLockFor(\\r\\n    address[] memory _tokenAddress,\\r\\n    uint256[] memory _tokenAmount,\\r\\n    uint256[] memory _duration,\\r\\n    bool[] memory _stakeUnderlying,\\r\\n    address _to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Creates a new lock for multiple tokens\\r\\n   * @param _tokenAddress Array of token addresses to lock\\r\\n   * @param _tokenAmount Array of token amounts to lock\\r\\n   * @param _duration Array of lock durations\\r\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\r\\n   * @return The ID of the newly created veNFT\\r\\n   */\\r\\n  function createLock(\\r\\n    address[] calldata _tokenAddress,\\r\\n    uint256[] calldata _tokenAmount,\\r\\n    uint256[] calldata _duration,\\r\\n    bool[] memory _stakeUnderlying\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Increases the amount of tokens locked for a specific veNFT\\r\\n   * @param _tokenAddress Address of the token to increase lock amount for\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _tokenAmount Amount of tokens to add to the lock\\r\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\r\\n   */\\r\\n  function increaseAmount(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _stakeUnderlying\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Locks additional asset type for an existing veNFT\\r\\n   * @param _tokenAddress Address of the new token to lock\\r\\n   * @param _tokenAmount Amount of tokens to lock\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _duration Duration of the lock\\r\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\r\\n   */\\r\\n  function lockAdditionalAsset(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenAmount,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _duration,\\r\\n    bool _stakeUnderlying\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Increases the lock duration for a specific token in a veNFT\\r\\n   * @param _tokenAddress Address of the token\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _lockDuration New lock duration to extend to\\r\\n   */\\r\\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Delegates voting power from one veNFT to another.\\r\\n   * @param fromTokenId The ID of the veNFT from which voting power is delegated.\\r\\n   * @param toTokenId The ID of the veNFT to which voting power is delegated.\\r\\n   * @param lpToken The address of the LP token associated with the delegation.\\r\\n   * @param amount The amount of voting power to delegate.\\r\\n   */\\r\\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes delegatees from a specific veNFT\\r\\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\\r\\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\\r\\n   * @param lpToken Address of the LP token associated with the delegation\\r\\n   * @param amounts Array of amounts of voting power to remove from each delegatee\\r\\n   */\\r\\n  function removeDelegatees(\\r\\n    uint256 fromTokenId,\\r\\n    uint256[] memory toTokenIds,\\r\\n    address lpToken,\\r\\n    uint256[] memory amounts\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes delegators from a specific veNFT\\r\\n   * @param fromTokenIds Array of veNFT IDs that are delegators to be removed\\r\\n   * @param toTokenId ID of the veNFT from which delegators are removed\\r\\n   * @param lpToken Address of the LP token associated with the delegation\\r\\n   * @param amounts Array of amounts of voting power to remove from each delegator\\r\\n   */\\r\\n  function removeDelegators(\\r\\n    uint256[] memory fromTokenIds,\\r\\n    uint256 toTokenId,\\r\\n    address lpToken,\\r\\n    uint256[] memory amounts\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Locks a token permanently.\\r\\n   * @param _tokenAddress The address of the token to lock.\\r\\n   * @param _tokenId The ID of the token to lock.\\r\\n   */\\r\\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Unlocks a permanently locked token.\\r\\n   * @param _tokenAddress The address of the token to unlock.\\r\\n   * @param _tokenId The ID of the token to unlock.\\r\\n   */\\r\\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates voting status for a veNFT\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _voting Voting status\\r\\n   */\\r\\n  function voting(uint256 _tokenId, bool _voting) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the implementation addresses for the veION contract extensions.\\r\\n   * @dev This function can only be called by authorized entities.\\r\\n   * @param _veIONFirstExtension The address of the first extension contract.\\r\\n   * @param _veIONSecondExtension The address of the second extension contract.\\r\\n   */\\r\\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external;\\r\\n}\\r\\n\\r\\n/// @title IAeroVotingEscrow Interface\\r\\n/// @notice Interface for Aero Voting Escrow contract\\r\\ninterface IAeroVotingEscrow {\\r\\n  /**\\r\\n   * @notice Returns the balance of the specified owner.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @return The balance of the owner.\\r\\n   */\\r\\n  function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the token ID at a specific index for a given owner.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @param _index The index of the token ID in the owner's list.\\r\\n   * @return The token ID at the specified index.\\r\\n   */\\r\\n  function ownerToNFTokenIdList(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/// @title IAeroVoter Interface\\r\\n/// @notice Interface for Aero Voter contract\\r\\ninterface IAeroVoter {\\r\\n  /**\\r\\n   * @notice Returns the list of pools voted for by a specific token ID.\\r\\n   * @param tokenId The ID of the token.\\r\\n   * @return An array of addresses representing the pools voted for.\\r\\n   */\\r\\n  function poolVote(uint256 tokenId) external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the weight of a specific pool.\\r\\n   * @param pool The address of the pool.\\r\\n   * @return The weight of the pool.\\r\\n   */\\r\\n  function weights(address pool) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the number of votes a specific token ID has for a given pool.\\r\\n   * @param tokenId The ID of the token.\\r\\n   * @param pool The address of the pool.\\r\\n   * @return The number of votes for the pool.\\r\\n   */\\r\\n  function votes(uint256 tokenId, address pool) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n  function getAddress(string calldata id) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IMasterPriceOracle {\\r\\n  function price(address underlying) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x0804ccb0d3f9e8a9858447ac2677b62843fd62f1053df0331689388db19444ea\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONFirstExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\r\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./IveIONStructsEnumsErrorsEvents.sol\\\";\\r\\n\\r\\n/// @title IveION Interface First Extensions\\r\\n/// @notice Interface for veION contract\\r\\ninterface IveIONFirstExtension is IveIONStructsEnumsErrorsEvents {\\r\\n  /**\\r\\n   * @notice Withdraws tokens associated with a specific token ID.\\r\\n   * @param _tokenAddress The address of the token to withdraw.\\r\\n   * @param _tokenId The ID of the token to withdraw.\\r\\n   */\\r\\n  function withdraw(address _tokenAddress, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Merges two token IDs into one.\\r\\n   * @param _from The ID of the token to merge from.\\r\\n   * @param _to The ID of the token to merge into.\\r\\n   */\\r\\n  function merge(uint256 _from, uint256 _to) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Splits a token into two separate tokens.\\r\\n   * @param _tokenAddress The address of the token to split.\\r\\n   * @param _from The ID of the token to split.\\r\\n   * @param _splitAmount The amount to split from the original token.\\r\\n   * @return _tokenId1 The ID of the first resulting token.\\r\\n   * @return _tokenId2 The ID of the second resulting token.\\r\\n   */\\r\\n  function split(\\r\\n    address _tokenAddress,\\r\\n    uint256 _from,\\r\\n    uint256 _splitAmount\\r\\n  ) external returns (uint256 _tokenId1, uint256 _tokenId2);\\r\\n\\r\\n  /**\\r\\n   * @notice Claims emissions for a specific token.\\r\\n   * @param _tokenAddress The address of the token for which to claim emissions.\\r\\n   */\\r\\n  function claimEmissions(address _tokenAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Allows or blocks delegators for a specific token ID.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _tokenAddress The address of the token.\\r\\n   * @param _blocked Boolean indicating if delegators are blocked.\\r\\n   */\\r\\n  function allowDelegators(uint256 _tokenId, address _tokenAddress, bool _blocked) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the balance of a specific NFT.\\r\\n   * @param _tokenId The ID of the NFT.\\r\\n   * @return _assets An array of asset addresses.\\r\\n   * @return _balances An array of balances for each asset.\\r\\n   * @return _boosts An array of boost values for each asset.\\r\\n   */\\r\\n  function balanceOfNFT(\\r\\n    uint256 _tokenId\\r\\n  ) external view returns (address[] memory _assets, uint256[] memory _balances, uint256[] memory _boosts);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the total ETH value of tokens owned by a specific address.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @return totalValue The total ETH value of the tokens.\\r\\n   */\\r\\n  function getTotalEthValueOfTokens(address _owner) external view returns (uint256 totalValue);\\r\\n}\\r\\n\",\"keccak256\":\"0xe9584fdab5106c1ec8dbe499a48daef4890eb16b1fca729ba304d615af144e00\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONSecondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\r\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./IveIONStructsEnumsErrorsEvents.sol\\\";\\r\\n\\r\\n/// @title IveION Interface Second Extension\\r\\n/// @notice Interface for veION contract\\r\\ninterface IveIONSecondExtension is IveIONStructsEnumsErrorsEvents {\\r\\n  /**\\r\\n   * @notice Whitelists or removes tokens from the whitelist.\\r\\n   * @param _tokens An array of token addresses to be whitelisted or removed.\\r\\n   * @param _isWhitelisted An array of booleans indicating the whitelist status for each token.\\r\\n   */\\r\\n  function whitelistTokens(address[] memory _tokens, bool[] memory _isWhitelisted) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws protocol fees for a specific token to a recipient address.\\r\\n   * @param _tokenAddress The address of the token for which protocol fees are to be withdrawn.\\r\\n   * @param _recipient The address to which the protocol fees will be sent.\\r\\n   */\\r\\n  function withdrawProtocolFees(address _tokenAddress, address _recipient) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws distributed fees for a specific token to a recipient address.\\r\\n   * @param _tokenAddress The address of the token for which distributed fees are to be withdrawn.\\r\\n   * @param _recipient The address to which the distributed fees will be sent.\\r\\n   */\\r\\n  function withdrawDistributedFees(address _tokenAddress, address _recipient) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggles the ability to split tokens for a specific account.\\r\\n   * @param _account The address of the account.\\r\\n   * @param _isAllowed Boolean indicating if splitting is allowed.\\r\\n   */\\r\\n  function toggleSplit(address _account, bool _isAllowed) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggles the limited boost feature.\\r\\n   * @param _isBoosted Boolean indicating if the boost is active.\\r\\n   */\\r\\n  function toggleLimitedBoost(bool _isBoosted) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the amount for a limited time boost.\\r\\n   * @param _boostAmount The amount of the boost.\\r\\n   */\\r\\n  function setLimitedTimeBoost(uint256 _boostAmount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the voter.\\r\\n   * @param _voter The address of the voter.\\r\\n   */\\r\\n  function setVoter(address _voter) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the minimum lock amount for a specific token.\\r\\n   * @param _tokenAddress The address of the token.\\r\\n   * @param _minimumAmount The minimum amount to lock.\\r\\n   */\\r\\n  function setMinimumLockAmount(address _tokenAddress, uint256 _minimumAmount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the minimum lock duration.\\r\\n   * @param _minimumLockDuration The minimum duration for locking.\\r\\n   */\\r\\n  function setMinimumLockDuration(uint256 _minimumLockDuration) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the Ionic Pool.\\r\\n   * @param _ionicPool The address of the Ionic Pool.\\r\\n   */\\r\\n  function setIonicPool(address _ionicPool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the Aero Voting contract.\\r\\n   * @param _aeroVoting The address of the Aero Voting contract.\\r\\n   */\\r\\n  function setAeroVoting(address _aeroVoting) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the boost amount for Aero Voter.\\r\\n   * @param _aeroVoterBoost The boost amount for Aero Voter.\\r\\n   */\\r\\n  function setAeroVoterBoost(uint256 _aeroVoterBoost) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the maximum early withdrawal fee.\\r\\n   * @param _maxEarlyWithdrawFee The maximum fee for early withdrawal.\\r\\n   */\\r\\n  function setMaxEarlyWithdrawFee(uint256 _maxEarlyWithdrawFee) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the LP token type for a specific token.\\r\\n   * @param _token The address of the token.\\r\\n   * @param _type The LP token type.\\r\\n   */\\r\\n  function setLpTokenType(address _token, LpTokenType _type) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the stake strategy for a specific LP token type.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @param _strategy The stake strategy.\\r\\n   */\\r\\n  function setStakeStrategy(LpTokenType _lpType, IStakeStrategy _strategy) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the veAERO contract.\\r\\n   * @param _veAERO The address of the veAERO contract.\\r\\n   */\\r\\n  function setVeAERO(address _veAERO) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the lock information for a specific user.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @return A LockedBalance struct containing lock details.\\r\\n   */\\r\\n  function getUserLock(uint256 _tokenId, LpTokenType _lpType) external view returns (LockedBalance memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the token IDs owned by a specific address.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @return An array of token IDs owned by the address.\\r\\n   */\\r\\n  function getOwnedTokenIds(address _owner) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the assets locked for a specific token ID.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @return An array of addresses representing the locked assets.\\r\\n   */\\r\\n  function getAssetsLocked(uint256 _tokenId) external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the delegatees for a specific token ID and LP token type.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @return An array of delegatee IDs.\\r\\n   */\\r\\n  function getDelegatees(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the delegators for a specific token ID and LP token type.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @return An array of delegator IDs.\\r\\n   */\\r\\n  function getDelegators(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the user point for a specific token ID, LP token type, and epoch.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @param _epoch The epoch number.\\r\\n   * @return A UserPoint struct containing user point details.\\r\\n   */\\r\\n  function getUserPoint(uint256 _tokenId, LpTokenType _lpType, uint256 _epoch) external view returns (UserPoint memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x4fd32559214c78995ae66aea68708b43477ea3132f06e1749162aaa6cac2bb9e\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONStructsEnumsErrorsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IveIONStructsEnumsErrorsEvents {\\r\\n  /**\\r\\n   * @notice Structure representing a locked balance\\r\\n   * @param tokenAddress Address of the token\\r\\n   * @param amount Amount of tokens locked\\r\\n   * @param delegateAmount Amount of tokens delegated\\r\\n   * @param start Start time of the lock\\r\\n   * @param end End time of the lock\\r\\n   * @param isPermanent Indicates if the lock is permanent\\r\\n   * @param boost Boost value for the lock\\r\\n   */\\r\\n  struct LockedBalance {\\r\\n    address tokenAddress;\\r\\n    uint256 amount;\\r\\n    uint256 delegateAmount;\\r\\n    uint256 start;\\r\\n    uint256 end;\\r\\n    bool isPermanent;\\r\\n    uint256 boost;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a delegation\\r\\n   * @param amount Amount of tokens delegated\\r\\n   * @param delegatee ID of the delegatee\\r\\n   */\\r\\n  struct Delegation {\\r\\n    uint256 amount;\\r\\n    uint256 delegatee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a user point\\r\\n   * @param bias Bias value\\r\\n   * @param slope Slope value, representing -dweight / dt\\r\\n   * @param ts Timestamp of the point\\r\\n   * @param blk Block number of the point\\r\\n   * @param permanent Permanent value\\r\\n   * @param permanentDelegate Permanent delegate value\\r\\n   */\\r\\n  struct UserPoint {\\r\\n    uint256 bias;\\r\\n    uint256 slope;\\r\\n    uint256 ts;\\r\\n    uint256 blk;\\r\\n    uint256 permanent;\\r\\n    uint256 permanentDelegate;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a global point\\r\\n   * @param bias Bias value\\r\\n   * @param slope Slope value, representing -dweight / dt\\r\\n   * @param ts Timestamp of the point\\r\\n   * @param blk Block number of the point\\r\\n   * @param permanentLockBalance Permanent lock balance\\r\\n   */\\r\\n  struct GlobalPoint {\\r\\n    int128 bias;\\r\\n    int128 slope;\\r\\n    uint256 ts;\\r\\n    uint256 blk;\\r\\n    uint256 permanentLockBalance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a checkpoint\\r\\n   * @param fromTimestamp Timestamp from which the checkpoint is valid\\r\\n   * @param owner Address of the owner\\r\\n   * @param delegatedBalance Balance that has been delegated\\r\\n   * @param delegatee ID of the delegatee\\r\\n   */\\r\\n  struct Checkpoint {\\r\\n    uint256 fromTimestamp;\\r\\n    address owner;\\r\\n    uint256 delegatedBalance;\\r\\n    uint256 delegatee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum representing deposit types\\r\\n   */\\r\\n  enum DepositType {\\r\\n    DEPOSIT_FOR_TYPE,\\r\\n    CREATE_LOCK_TYPE,\\r\\n    INCREASE_LOCK_AMOUNT,\\r\\n    INCREASE_UNLOCK_TIME,\\r\\n    LOCK_ADDITIONAL\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum representing LP token types\\r\\n   */\\r\\n  enum LpTokenType {\\r\\n    Mode_Velodrome_5050_ION_MODE,\\r\\n    Mode_Balancer_8020_ION_ETH,\\r\\n    Base_Aerodrome_5050_ION_wstETH,\\r\\n    Base_Balancer_8020_ION_ETH,\\r\\n    Optimism_Velodrome_5050_ION_OP,\\r\\n    Optimism_Balancer_8020_ION_ETH\\r\\n  }\\r\\n\\r\\n  error LockDurationNotInFuture();\\r\\n  error ZeroAmount();\\r\\n  error LockDurationTooLong();\\r\\n  error TokenNotWhitelisted();\\r\\n  error NotOwner();\\r\\n  error AlreadyVoted();\\r\\n  error PermanentLock();\\r\\n  error NoLockFound();\\r\\n  error LockExpired();\\r\\n  error SameNFT();\\r\\n  error SplitNotAllowed();\\r\\n  error AmountTooBig();\\r\\n  error NotPermanentLock();\\r\\n  error TokenHasDelegatees();\\r\\n  error TokenHasDelegators();\\r\\n  error NotVoter();\\r\\n  error MinimumNotMet();\\r\\n  error ArrayMismatch();\\r\\n  error LockDurationTooShort();\\r\\n  error DuplicateAsset();\\r\\n  error SplitTooSmall();\\r\\n  error NotEnoughRemainingAfterSplit();\\r\\n  error NoDelegationBetweenTokens(uint256 _tokenId1, uint256 _tokenId2);\\r\\n  error NoUnderlyingStake();\\r\\n  error NotAcceptingDelegators();\\r\\n  error BoostAmountMustBeGreaterThanZero();\\r\\n  error InvalidAddress();\\r\\n  error MinimumAmountMustBeGreaterThanZero();\\r\\n  error MinimumLockDurationMustBeGreaterThanZero();\\r\\n  error AeroBoostAmountMustBeGreaterThanZero();\\r\\n  error MaxEarlyWithdrawFeeMustBeGreaterThanZero();\\r\\n  error InvalidTokenAddress();\\r\\n  error InvalidStrategyAddress();\\r\\n  error InvalidVeAEROAddress();\\r\\n\\r\\n  event Deposit(\\r\\n    address indexed provider,\\r\\n    uint256 indexed tokenId,\\r\\n    DepositType indexed depositType,\\r\\n    uint256 value,\\r\\n    uint256 locktime,\\r\\n    uint256 ts\\r\\n  );\\r\\n  event Withdraw(address indexed provider, uint256 indexed tokenId, uint256 value, uint256 ts);\\r\\n  event Supply(uint256 prevSupply, uint256 supply);\\r\\n  event Delegated(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\r\\n  event DelegationRemoved(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\r\\n  event ProtocolFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\r\\n  event DistributedFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\r\\n  event SplitToggle(address indexed account, bool isAllowed);\\r\\n  event LimitedBoostToggled(bool isBoosted);\\r\\n  event LimitedTimeBoostSet(uint256 boostAmount);\\r\\n  event VoterSet(address indexed newVoter);\\r\\n  event AeroVotingSet(address indexed newAeroVoting);\\r\\n  event AeroVoterBoostSet(uint256 newAeroVoterBoost);\\r\\n  event TokensWhitelisted(address[] token, bool[] isWhitelisted);\\r\\n  event LpTokenTypeSet(address indexed token, LpTokenType lpTokenType);\\r\\n  event VeAEROSet(address indexed veAERO);\\r\\n  event StakeStrategySet(LpTokenType indexed lpTokenType, address indexed strategy);\\r\\n  event MinimumLockAmountSet(address indexed tokenAddress, uint256 minimumAmount);\\r\\n  event MinimumLockDurationSet(uint256 minimumDuration);\\r\\n  event IonicPoolSet(address indexed newIonicPool);\\r\\n  event SplitCompleted(\\r\\n    uint256 indexed fromTokenId,\\r\\n    uint256 indexed tokenId1,\\r\\n    uint256 indexed tokenId2,\\r\\n    uint256 splitAmount,\\r\\n    address tokenAddress\\r\\n  );\\r\\n  event MergeCompleted(\\r\\n    uint256 indexed fromTokenId,\\r\\n    uint256 indexed toTokenId,\\r\\n    address[] assetsLocked,\\r\\n    uint256 lengthOfAssets\\r\\n  );\\r\\n  event EmissionsClaimed(address indexed claimant, address indexed tokenAddress);\\r\\n  event MaxEarlyWithdrawFeeSet(uint256 maxEarlyWithdrawFee);\\r\\n  event PermanentLockCreated(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\r\\n  event PermanentLockRemoved(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\r\\n  event Voted(uint256 _tokenId, bool _voting);\\r\\n  event DelegatorsBlocked(uint256 indexed _tokenId, address indexed _lpToken, bool _blocked);\\r\\n  event Initialized(address indexed addressesProvider);\\r\\n  event ExtensionsSet(address indexed _firstExtension, address indexed _secondExtension);\\r\\n}\\r\\n\",\"keccak256\":\"0xf695c1f186cd94a5f131a6c1a1aa26f549e1ae483749be91146493fe81df80cf\",\"license\":\"UNLICENSED\"},\"contracts/veION/libraries/IonicTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nlibrary IonicTimeLibrary {\\r\\n  uint256 internal constant _WEEK = 7 days;\\r\\n\\r\\n  /// @dev Returns start of epoch based on current timestamp\\r\\n  function epochStart(uint256 timestamp) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return timestamp - (timestamp % _WEEK);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns start of next epoch / end of current epoch\\r\\n  function epochNext(uint256 timestamp) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return timestamp - (timestamp % _WEEK) + _WEEK;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns start of voting window\\r\\n  function epochVoteStart(uint256 timestamp) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return timestamp - (timestamp % _WEEK) + 1 hours;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns end of voting window / beginning of unrestricted voting window\\r\\n  function epochVoteEnd(uint256 timestamp) internal pure returns (uint256) {\\r\\n    unchecked {\\r\\n      return timestamp - (timestamp % _WEEK) + _WEEK - 12 hours;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xa46de2e4b8f98426a594ff95b16b15d52375c4ade8eabfb82f7bd3d8ad416d7c\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/IStakeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IStakeStrategy\\r\\n * @notice Interface for the VeloIonModeStakingModeReward contract.\\r\\n */\\r\\ninterface IStakeStrategy {\\r\\n  /// @notice Emitted when the contract is initialized\\r\\n  event Initialized(\\r\\n    address indexed escrow,\\r\\n    address indexed stakingToken,\\r\\n    address indexed stakingContract,\\r\\n    address stakingWalletImplementation\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when tokens are staked\\r\\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when rewards are claimed\\r\\n  event Claimed(address indexed from, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when tokens are withdrawn\\r\\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when staking wallet is transferred\\r\\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when escrow is set\\r\\n  event EscrowSet(address indexed newEscrow);\\r\\n\\r\\n  /// @notice Emitted when staking token is set\\r\\n  event StakingTokenSet(address indexed newStakingToken);\\r\\n\\r\\n  /// @notice Emitted when staking contract is set\\r\\n  event StakingContractSet(address indexed newStakingContract);\\r\\n\\r\\n  /// @notice Emitted when upgradeable beacon is set\\r\\n  event UpgradeableBeaconSet(address indexed newBeacon);\\r\\n\\r\\n  /**\\r\\n   * @notice Stakes a specified amount of tokens from a given address.\\r\\n   * @param _from The address from which tokens will be staked.\\r\\n   * @param _amount The amount of tokens to stake.\\r\\n   * @param _data Additional data that might be needed for staking.\\r\\n   */\\r\\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claims rewards for a given address.\\r\\n   * @param _from The address for which to claim rewards.\\r\\n   */\\r\\n  function claim(address _from) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws a specified amount of tokens for a given address.\\r\\n   * @param _owner The address from which tokens will be withdrawn.\\r\\n   * @param _amount The amount of tokens to withdraw.\\r\\n   */\\r\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the current reward rate for the staking strategy.\\r\\n   * @return The reward rate as a uint256.\\r\\n   */\\r\\n  function rewardRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the period finish time for the staking strategy.\\r\\n   * @return The period finish time as a uint256.\\r\\n   */\\r\\n  function periodFinish() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the balance of a specific address.\\r\\n   * @param account The address to query the balance of.\\r\\n   * @return The balance as a uint256.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the total supply of staked tokens.\\r\\n   * @return The total supply as a uint256.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the reward token for the staking strategy.\\r\\n   * @return The address of the reward token.\\r\\n   */\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking contract.\\r\\n   * @return The address of the staking contract.\\r\\n   */\\r\\n  function stakingContract() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking token.\\r\\n   * @return The address of the staking token.\\r\\n   */\\r\\n  function stakingToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the staking wallet address for a specific user.\\r\\n   * @param user The address of the user.\\r\\n   * @return The address of the user's staking wallet.\\r\\n   */\\r\\n  function userStakingWallet(address user) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers the staking wallet from one user to another.\\r\\n   * @param from The current owner of the staking wallet.\\r\\n   * @param to The new owner of the staking wallet.\\r\\n   */\\r\\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the escrow address.\\r\\n   * @param _escrow The address of the new escrow.\\r\\n   */\\r\\n  function setEscrow(address _escrow) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking token address.\\r\\n   * @param _stakingToken The address of the new staking token.\\r\\n   */\\r\\n  function setStakingToken(address _stakingToken) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking contract address.\\r\\n   * @param _stakingContract The address of the new staking contract.\\r\\n   */\\r\\n  function setStakingContract(address _stakingContract) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the  beacon.\\r\\n   * @param _beacon The address of the new beacon contract.\\r\\n   */\\r\\n  function setUpgradeableBeacon(address _beacon) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x69d7a60ae3df2ead3b3afaa32ae9b6ea4df13ef65c7c375babe7be2e5457fc8b\",\"license\":\"UNLICENSED\"},\"solmate/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\r\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\r\\nabstract contract Auth {\\r\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\r\\n\\r\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    Authority public authority;\\r\\n\\r\\n    constructor(address _owner, Authority _authority) {\\r\\n        owner = _owner;\\r\\n        authority = _authority;\\r\\n\\r\\n        emit OwnerUpdated(msg.sender, _owner);\\r\\n        emit AuthorityUpdated(msg.sender, _authority);\\r\\n    }\\r\\n\\r\\n    modifier requiresAuth() virtual {\\r\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\r\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\r\\n\\r\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\r\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\r\\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\r\\n    }\\r\\n\\r\\n    function setAuthority(Authority newAuthority) public virtual {\\r\\n        // We check if the caller is the owner first because we want to ensure they can\\r\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\r\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\r\\n\\r\\n        authority = newAuthority;\\r\\n\\r\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\r\\n    }\\r\\n\\r\\n    function setOwner(address newOwner) public virtual requiresAuth {\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit OwnerUpdated(msg.sender, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\r\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\r\\ninterface Authority {\\r\\n    function canCall(\\r\\n        address user,\\r\\n        address target,\\r\\n        bytes4 functionSig\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2bc7e46ecae8db6dbd482164eb79665c0ebec7f970e442c5ac5cce870248eee6\",\"license\":\"AGPL-3.0-only\"},\"solmate/auth/authorities/RolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport {Auth, Authority} from \\\"../Auth.sol\\\";\\r\\n\\r\\n/// @notice Role based Authority that supports up to 256 roles.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\\r\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\\r\\ncontract RolesAuthority is Auth, Authority {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\\r\\n\\r\\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\\r\\n\\r\\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            ROLE/USER STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    mapping(address => bytes32) public getUserRoles;\\r\\n\\r\\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\\r\\n\\r\\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\\r\\n\\r\\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\\r\\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\\r\\n    }\\r\\n\\r\\n    function doesRoleHaveCapability(\\r\\n        uint8 role,\\r\\n        address target,\\r\\n        bytes4 functionSig\\r\\n    ) public view virtual returns (bool) {\\r\\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                           AUTHORIZATION LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function canCall(\\r\\n        address user,\\r\\n        address target,\\r\\n        bytes4 functionSig\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            isCapabilityPublic[target][functionSig] ||\\r\\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                   ROLE CAPABILITY CONFIGURATION LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setPublicCapability(\\r\\n        address target,\\r\\n        bytes4 functionSig,\\r\\n        bool enabled\\r\\n    ) public virtual requiresAuth {\\r\\n        isCapabilityPublic[target][functionSig] = enabled;\\r\\n\\r\\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\\r\\n    }\\r\\n\\r\\n    function setRoleCapability(\\r\\n        uint8 role,\\r\\n        address target,\\r\\n        bytes4 functionSig,\\r\\n        bool enabled\\r\\n    ) public virtual requiresAuth {\\r\\n        if (enabled) {\\r\\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\\r\\n        } else {\\r\\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\\r\\n        }\\r\\n\\r\\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                       USER ROLE ASSIGNMENT LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setUserRole(\\r\\n        address user,\\r\\n        uint8 role,\\r\\n        bool enabled\\r\\n    ) public virtual requiresAuth {\\r\\n        if (enabled) {\\r\\n            getUserRoles[user] |= bytes32(1 << role);\\r\\n        } else {\\r\\n            getUserRoles[user] &= ~bytes32(1 << role);\\r\\n        }\\r\\n\\r\\n        emit UserRoleUpdated(user, role, enabled);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ed785380b96bd42a221fb9eb792b5e9f5834efec72ba38dda93c5e176df860d\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b614b1d80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c806379ba5097116101b8578063caa5c5d411610104578063e30c3978116100a2578063ebb1d4131161007c578063ebb1d41314610831578063f2fde38b14610851578063f3594be014610864578063faeb7bd51461088457600080fd5b8063e30c397814610804578063e34e8fd014610815578063e8b3fd571461082857600080fd5b8063d46005b1116100de578063d46005b1146107a8578063d4e2616f146107bb578063d58b15d4146107de578063e2819d5c146107f157600080fd5b8063caa5c5d414610737578063ce62db091461074a578063d21f50771461076a57600080fd5b8063aa9354a311610171578063bd31251f1161014b578063bd31251f146106eb578063bfe10928146106fe578063c42cf53514610711578063c975fec41461072457600080fd5b8063aa9354a314610694578063ab37f486146106a7578063b1283e77146106ca57600080fd5b806379ba5097146106135780637dc5421a1461061b578063880e36fc146106555780638da5cb5b146106685780639fdc1c7e14610679578063a54025441461068c57600080fd5b806330331b2f116102925780636e13fffe116102305780636f59dd8f1161020a5780636f59dd8f146105d2578063715018a6146105e557806375619ab5146105ed5780637715ee751461060057600080fd5b80636e13fffe146105a25780636eb172e3146105b75780636f4a2cd0146105ca57600080fd5b806339e9f3b61161026c57806339e9f3b6146105355780633d3b6f351461054857806352ed72c31461055b57806366a5e7e21461058f57600080fd5b806330331b2f146104fc578063310bd74b1461050f57806332145f901461052257600080fd5b80631703e5f9116102ff57806324f52f4f116102d957806324f52f4f14610485578063290a9127146104985780632935df9e146104c95780632f940c70146104e957600080fd5b80631703e5f91461042c5780631bb5e2dc1461045f5780631f8507161461047257600080fd5b806304d5a8cf1461034757806309b7617b1461038d5780630c340a24146103c65780630ffb1d8b146103d95780631056dfe8146103ee57806315b42e5e14610401575b600080fd5b610370610355366004613cdc565b60d1602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103b861039b366004613cf9565b60d760209081526000928352604080842090915290825290205481565b604051908152602001610384565b60cb54610370906001600160a01b031681565b6103ec6103e7366004613d37565b6108be565b005b6103ec6103fc366004613d65565b6108f7565b6103b861040f366004613d9d565b60de60209081526000928352604080842090915290825290205481565b61044f61043a366004613cdc565b60db6020526000908152604090205460ff1681565b6040519015158152602001610384565b61037061046d366004613dc9565b610954565b60c954610370906001600160a01b031681565b6103ec610493366004613e2d565b61097e565b6103b86104a6366004613eda565b60d260209081526000938452604080852082529284528284209052825290205481565b6104dc6104d7366004613cf9565b610bbb565b6040516103849190613fcf565b6103ec6104f7366004613cf9565b610f19565b6103ec61050a366004613dc9565b610f35565b6103ec61051d366004613dc9565b610fd7565b6103ec610530366004613dc9565b611133565b6103b8610543366004613dc9565b61128e565b60cc54610370906001600160a01b031681565b610370610569366004614072565b60dc6020908152600092835260408084209091529082529020546001600160a01b031681565b61037061059d366004613d65565b6112a1565b6105aa6112e6565b60405161038491906140e1565b6103ec6105c53660046140f4565b611348565b6103ec6114b2565b6103ec6105e0366004614249565b6116e7565b6103ec61179a565b6103ec6105fb366004613cdc565b6117ae565b6103ec61060e36600461427d565b6117ff565b6103ec611979565b6103b8610629366004614359565b60d360209081526000948552604080862082529385528385208152918452828420909152825290205481565b6103b8610663366004613dc9565b6119f0565b6033546001600160a01b0316610370565b6103ec6106873660046143aa565b611a01565b60d0546103b8565b6103b86106a2366004613dc9565b611e58565b61044f6106b5366004613cdc565b60d96020526000908152604090205460ff1681565b6106dd6106d8366004613dc9565b611e67565b60405161038492919061444d565b6103ec6106f9366004613cdc565b611e9c565b60df54610370906001600160a01b031681565b6103ec61071f366004613cdc565b611f15565b6103ec61073236600461446a565b611f8e565b6103ec6107453660046144d5565b6120d0565b61075d610758366004613d65565b612142565b60405161038491906144f2565b6103b8610778366004613d9d565b6001600160a01b0391909116600090815260de6020908152604080832062093a8085069094038352929052205490565b6103ec6107b6366004614500565b612192565b61044f6107c9366004613dc9565b60da6020526000908152604090205460ff1681565b6103b86107ec366004613dc9565b6123a2565b6103ec6107ff36600461457c565b6123b6565b6065546001600160a01b0316610370565b6103ec6108233660046145a1565b61242f565b6103b860cf5481565b6103b861083f366004613cdc565b60ce6020526000908152604090205481565b6103ec61085f366004613cdc565b61255c565b6103b8610872366004613dc9565b60d86020526000908152604090205481565b6103b8610892366004614359565b60d460209081526000948552604080862082529385528385208152918452828420909152825290205481565b60cb546001600160a01b031633146108e957604051633b8d9d7560e21b815260040160405180910390fd5b6108f382826125cd565b5050565b60df546001600160a01b031633146109225760405163385296d560e01b815260040160405180910390fd5b6001600160a01b0391909116600090815260de6020908152604080832062093a80860690950383529390529190912055565b60cd818154811061096457600080fd5b6000918252602090912001546001600160a01b0316905081565b60cb546001600160a01b031633146109a957604051633b8d9d7560e21b815260040160405180910390fd5b848381146109ca57604051632b477e7160e11b815260040160405180910390fd5b8181146109ea57604051632b477e7160e11b815260040160405180910390fd5b60005b81811015610b4157838382818110610a0757610a076145df565b9050602002016020810190610a1c9190613cdc565b60dc60008a8a85818110610a3257610a326145df565b9050602002016020810190610a479190613cdc565b6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110610a7b57610a7b6145df565b9050602002016020810190610a9091906145f5565b6001811115610aa157610aa1613f23565b6001811115610ab257610ab2613f23565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160db6000868685818110610afc57610afc6145df565b9050602002016020810190610b119190613cdc565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556001016109ed565b508282604051610b52929190614610565b60405180910390208585604051610b6a929190614652565b60405180910390208888604051610b82929190614610565b604051908190038120907fff4266c7dba361bc4ce6e86cc8fd87b2d5e94e60527231375cc8fb565f8b32b290600090a450505050505050565b610be66040518060800160405280606081526020016060815260200160608152602001600081525090565b600083815260d5602090815260408083206001600160a01b038616845290915281205490816001600160401b03811115610c2257610c22614168565b604051908082528060200260200182016040528015610c4b578160200160208202803683370190505b5090506000826001600160401b03811115610c6857610c68614168565b604051908082528060200260200182016040528015610c91578160200160208202803683370190505b5090506000836001600160401b03811115610cae57610cae614168565b604051908082528060200260200182016040528015610cd7578160200160208202803683370190505b50905060005b84811015610ed057600088815260d5602090815260408083206001600160a01b038b1684529091529020805482908110610d1957610d196145df565b9060005260206000200160009054906101000a90046001600160a01b0316848281518110610d4957610d496145df565b6001600160a01b0392831660209182029290920181019190915260008a815260d682526040808220938b1682529290915220805482908110610d8d57610d8d6145df565b90600052602060002090602091828204019190069054906101000a900460ff16838281518110610dbf57610dbf6145df565b60200260200101906001811115610dd857610dd8613f23565b90816001811115610deb57610deb613f23565b905250600088815260d3602052604081208551909190869084908110610e1357610e136145df565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000848381518110610e4f57610e4f6145df565b60200260200101516001811115610e6857610e68613f23565b6001811115610e7957610e79613f23565b81526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610ebd57610ebd6145df565b6020908102919091010152600101610cdd565b50600087815260d7602090815260408083206001600160a01b038a1684528252918290205482516080810184529586529085019390935283015260608201529150505b92915050565b610f21612624565b6108f36001600160a01b038216338461267e565b60cb546001600160a01b03163314610f6057604051633b8d9d7560e21b815260040160405180910390fd5b600a811015610f8257604051632db4ddc160e11b815260040160405180910390fd5b60cf548103610fa45760405163c23f6ccb60e01b815260040160405180910390fd5b60cf81905560405181907f570570b221cb14706e1bd90180bd79e47d0375cf953ccd13f34fcaa1073646d190600090a250565b610fdf6126d0565b600081815260d860205260409020548190610fff4262093a808106900390565b1161101d5760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e1001421161104a57604051635a780bad60e01b815260040160405180910390fd5b60c9546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e90602401602060405180830381865afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b79190614685565b6001600160a01b0316146110de576040516330cd747160e01b815260040160405180910390fd5b60005b60cd548110156111245761111c8360cd8381548110611102576111026145df565b6000918252602090912001546001600160a01b0316612729565b6001016110e1565b50506111306001609755565b50565b61113b6126d0565b62093a80429081069003610e1001421161116857604051635a780bad60e01b815260040160405180910390fd5b60c9546040516339f890b560e21b815260048101839052600091829182916001600160a01b03169063e7e242d490602401600060405180830381865afa1580156111b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111de9190810190614701565b92509250925060005b8351811015611280576000670de0b6b3a764000083838151811061120d5761120d6145df565b6020026020010151858481518110611227576112276145df565b602002602001015161123991906147ff565b6112439190614816565b90506112778660cd848154811061125c5761125c6145df565b6000918252602090912001546001600160a01b031683612bcf565b506001016111e7565b505050506111306001609755565b600062093a8082068203610e1001610f13565b60d560205282600052604060002060205281600052604060002081815481106112c957600080fd5b6000918252602090912001546001600160a01b0316925083915050565b606060cd80548060200260200160405190810160405280929190818152602001828054801561133e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611320575b5050505050905090565b60cb546001600160a01b0316331461137357604051633b8d9d7560e21b815260040160405180910390fd5b60005b81811015611474576000838383818110611392576113926145df565b9050604002018036038101906113a89190614838565b90506113bc81600001518260200151612e83565b156113da57604051630313b28560e01b815260040160405180910390fd5b60d080546001808201835560009290925282517fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb90910180546001600160a01b031981166001600160a01b039093169283178255602085015185949293909284926001600160a81b03191690911790600160a01b90849081111561146057611460613f23565b021790555050600190920191506113769050565b507f5577e527c22d6c9a43929d204c9bfc33fa089326ce69b3ca9f8cc52caf1cb33282826040516114a6929190614894565b60405180910390a15050565b60df546001600160a01b031633146114dd5760405163385296d560e01b815260040160405180910390fd5b60dd5460ff1680156114fd575062093a80429081069003620891c0014211155b1561151b576040516355bf6a7160e01b815260040160405180910390fd5b60ca546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158891906148fd565b90506000611594612f3e565b905060005b60d0548110156116e257600061160260d083815481106115bb576115bb6145df565b60009182526020909120015460d080546001600160a01b0390921691859081106115e7576115e76145df565b600091825260209091200154600160a01b900460ff16612fa9565b905080156116d9576116d960dc600060d08581548110611624576116246145df565b60009182526020808320909101546001600160a01b03168352820192909252604001812060d080549192918690811061165f5761165f6145df565b600091825260209091200154600160a01b900460ff16600181111561168657611686613f23565b600181111561169757611697613f23565b81526020810191909152604001600020546001600160a01b0316846116bc84886147ff565b6116c69190614816565b60ca546001600160a01b0316919061267e565b50600101611599565b505050565b6116ef612624565b80516000036117455760405162461bcd60e51b815260206004820152601e60248201527f4c70546f6b656e732061727261792063616e6e6f7420626520656d707479000060448201526064015b60405180910390fd5b80516117589060cd906020840190613c0e565b50806040516117679190614916565b604051908190038120907f46475a5acc517188c629ae24ba62499dcb1de5aed40b269f5d0ab378fc3d447790600090a250565b6117a2612624565b6117ac6000613095565b565b6117b6612624565b6001600160a01b0381166117dd5760405163d92e233d60e01b815260040160405180910390fd5b60df80546001600160a01b0319166001600160a01b0392909216919091179055565b6118076126d0565b81518351146118295760405163332ac86360e21b815260040160405180910390fd5b3360c9546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b9190614685565b6001600160a01b0316146118c2576040516330cd747160e01b815260040160405180910390fd5b825160005b8181101561196d578481815181106118e1576118e16145df565b60200260200101516001600160a01b031663f5f8d3658486848151811061190a5761190a6145df565b60200260200101516040518363ffffffff1660e01b815260040161192f929190614955565b600060405180830381600087803b15801561194957600080fd5b505af115801561195d573d6000803e3d6000fd5b5050600190920191506118c79050565b50506116e26001609755565b60655433906001600160a01b031681146119e75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161173c565b61113081613095565b600062093a80808306830301610f13565b611a096126d0565b600087815260d860205260409020548790611a294262093a808106900390565b11611a475760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e10014211611a7457604051635a780bad60e01b815260040160405180910390fd5b611aaf6040518060a0016040528060006001600160a01b03168152602001600081526020016060815260200160608152602001606081525090565b3380825260c9546040516331a9108f60e11b8152600481018c90526001600160a01b0390911690636352211e90602401602060405180830381865afa158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b209190614685565b6001600160a01b031614611b47576040516330cd747160e01b815260040160405180910390fd5b8685141580611b565750848314155b80611b615750828714155b15611b7f5760405163332ac86360e21b815260040160405180910390fd5b60cf54871115611ba25760405163ebcfae4b60e01b815260040160405180910390fd5b4260208201819052620891c062093a808206820301108015611bd35750600089815260da602052604090205460ff16155b15611bf157604051630392978d60e41b815260040160405180910390fd5b6000805b88811015611c2b57858582818110611c0f57611c0f6145df565b9050602002013582611c21919061496e565b9150600101611bf5565b5060005b60cd54811015611c5857611c508b60cd8381548110611102576111026145df565b600101611c2f565b5060208281015160008c815260d89092526040918290205560c95490516339f890b560e21b8152600481018c90526001600160a01b039091169063e7e242d490602401600060405180830381865afa158015611cb8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ce09190810190614701565b60808501526060840152604083015260005b826040015151811015611e4157611e398b84604001518381518110611d1957611d196145df565b6020026020010151670de0b6b3a764000086608001518581518110611d4057611d406145df565b602002602001015187606001518681518110611d5e57611d5e6145df565b6020026020010151611d7091906147ff565b611d7a9190614816565b8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506130ae915050565b600101611cf2565b50505050611e4f6001609755565b50505050505050565b600062093a8082068203610f13565b60d08181548110611e7757600080fd5b6000918252602090912001546001600160a01b0381169150600160a01b900460ff1682565b611ea4612624565b6001600160a01b038116611ecb5760405163d92e233d60e01b815260040160405180910390fd5b60cc80546001600160a01b0319166001600160a01b0383169081179091556040517f676e14d1d2e92c005e4dcfbba61af630b9ca19e16f69be0371d88b368f2b2cb390600090a250565b611f1d612624565b6001600160a01b038116611f445760405163d92e233d60e01b815260040160405180910390fd5b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517f1cbb37f5a02c38ab13773cb770fae505cce417a4d81560117389e3a9f7e001f290600090a250565b60cb546001600160a01b03163314611fb957604051633b8d9d7560e21b815260040160405180910390fd5b80838114611fda57604051632b477e7160e11b815260040160405180910390fd5b60005b8181101561207057838382818110611ff757611ff76145df565b905060200201602081019061200c9190613cdc565b60d16000888885818110612022576120226145df565b90506020020160208101906120379190613cdc565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b03191692909116919091179055600101611fdd565b508282604051612081929190614610565b60405180910390208585604051612099929190614610565b604051908190038120907f3cbe37144c7485400be82bfd3641a31b2f85267b60edcf9ef2ec012b5c4eef4890600090a35050505050565b60cb546001600160a01b031633146120fb57604051633b8d9d7560e21b815260040160405180910390fd5b60dd805460ff19168215159081179091556040519081527f6efa5ade2635e3df319c8c9b1b674023447896f669114b6191c2a96b1659d34d9060200160405180910390a150565b60d6602052826000526040600020602052816000526040600020818154811061216a57600080fd5b906000526020600020906020918282040191900692509250509054906101000a900460ff1681565b600054610100900460ff16158080156121b25750600054600160ff909116105b806121cc5750303b1580156121cc575060005460ff166001145b61222f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161173c565b6000805460ff191660011790558015612252576000805461ff0019166101001790555b61225a613818565b612262613847565b84600081900361228457604051620d28ef60eb1b815260040160405180910390fd5b60005b818110156122c8576122c08888838181106122a4576122a46145df565b90506020020160208101906122b99190613cdc565b60016125cd565b600101612287565b5060cc80546001600160a01b03199081166001600160a01b038881169190911790925560ca8054821687841617905560c9805482169286169290921790915560cb8054339216821790556040517f4a3eb0674631610761ddae0e34a5390318f5ec24f3b1ef5ea015f4dff914e4c99161234b918a918a918a918a918a9190614981565b60405180910390a150801561239a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b600062093a8082068203620891c001610f13565b60cb546001600160a01b031633146123e157604051633b8d9d7560e21b815260040160405180910390fd5b600082815260da6020526040808220805460ff191684151590811790915590513392859184917f8a6ff732c8641e1e34d771e1f8b1673e988c1abdfb694ebdf6c910a5e3d0d85391a4505050565b60cb546001600160a01b0316331461245a57604051633b8d9d7560e21b815260040160405180910390fd5b6001600160a01b038316600090815260dc602052604081208184600181111561248557612485613f23565b600181111561249657612496613f23565b81526020810191909152604001600020546001600160a01b03169050806124db576040516323b5f32160e21b81526001600160a01b038516600482015260240161173c565b6001600160a01b038116600090815260db60205260409020805460ff191683151517905582600181111561251157612511613f23565b846001600160a01b03167f1e5b8e1351cfab07ad44bc6532bf1bb2dccdddc5bbda4d8109aa55064e63d0fb8460405161254e911515815260200190565b60405180910390a350505050565b612564612624565b606580546001600160a01b0383166001600160a01b031990911681179091556125956033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6001600160a01b038216600081815260d96020526040808220805460ff1916851515908117909155905190929133917f44948130cf88523dbc150908a47dd6332c33a01a3869d7f2fa78e51d5a5f9c579190a45050565b6033546001600160a01b031633146117ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161173c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526116e2908490613876565b6002609754036127225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161173c565b6002609755565b600082815260d5602090815260408083206001600160a01b03851680855290835281842086855260d6845282852091855292528220815491929091905b81811015612aee576000848281548110612782576127826145df565b600091825260208220015485546001600160a01b0390911692508590849081106127ae576127ae6145df565b6000918252602080832081830401548b845260d3825260408085206001600160a01b0388168652909252908320601f9092166101000a900460ff169250818360018111156127fe576127fe613f23565b600181111561280f5761280f613f23565b8152602080820192909252604090810160009081206001600160a01b038c16825290925290205490508015612ae3576001600160a01b038316600090815260d260205260408120829184600181111561286a5761286a613f23565b600181111561287b5761287b613f23565b815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546128bb91906149f9565b9091555050600089815260d3602090815260408083206001600160a01b03871684529091528120908360018111156128f5576128f5613f23565b600181111561290657612906613f23565b8152602080820192909252604090810160009081206001600160a01b03808d1683529084528282208290558616815260dc909252812060d191908185600181111561295357612953613f23565b600181111561296457612964613f23565b815260208082019290925260409081016000908120546001600160a01b03908116855292840194909452918201909220549051635ae2fb3960e11b81528a8316600482015260248101849052604481018c905291169063b5c5f67290606401600060405180830381600087803b1580156129dd57600080fd5b505af11580156129f1573d6000803e3d6000fd5b505050506001600160a01b038816600090815260ce602052604081208054839290612a1d9084906149f9565b90915550506001600160a01b038316600081815260d2602052604081208b929133917fadab630928b1d46214641293704a312ee7ad87e03ae14a7fd95e7308b93998df91869190886001811115612a7657612a76613f23565b6001811115612a8757612a87613f23565b815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000205442604051612ada939291909283526020830191909152604082015260600190565b60405180910390a45b505050600101612766565b50600085815260d7602090815260408083206001600160a01b03881680855290835281842084905588845260d583528184209084529091528120612b3191613c73565b600085815260d6602090815260408083206001600160a01b03881684529091528120612b5c91613c91565b60c954604051632d27a2cd60e11b815260048101879052600060248201526001600160a01b0390911690635a4f459a90604401600060405180830381600087803b158015612ba957600080fd5b505af1158015612bbd573d6000803e3d6000fd5b505050505050505050565b6001609755565b600083815260d5602090815260408083206001600160a01b0386168452825280832080548251818502810185019093528083529192909190830182828015612c4057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612c22575b505050600087815260d6602090815260408083206001600160a01b038a168452825280832080548251818502810185019093528083529697509295909450919250830182828015612ce057602002820191906000526020600020906000905b82829054906101000a900460ff166001811115612cbe57612cbe613f23565b815260206001928301818104948501949093039092029101808411612c9f5790505b505050505090506000825190506000816001600160401b03811115612d0757612d07614168565b604051908082528060200260200182016040528015612d30578160200160208202803683370190505b5090506000805b83811015612e235760d460008a81526020019081526020016000206000878381518110612d6657612d666145df565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000868381518110612da257612da26145df565b60200260200101516001811115612dbb57612dbb613f23565b6001811115612dcc57612dcc613f23565b81526020019081526020016000206000896001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110612e1057612e106145df565b6020908102919091010152600101612d37565b5060005b8551811015612e5f57828181518110612e4257612e426145df565b602002602001015182612e55919061496e565b9150600101612e27565b50612e6a8888612729565b612e79888888888887876130ae565b5050505050505050565b60d054600090815b81811015612f3357846001600160a01b031660d08281548110612eb057612eb06145df565b6000918252602090912001546001600160a01b0316148015612f1b5750836001811115612edf57612edf613f23565b60d08281548110612ef257612ef26145df565b600091825260209091200154600160a01b900460ff166001811115612f1957612f19613f23565b145b15612f2b57600192505050610f13565b600101612e8b565b506000949350505050565b60d054600090815b81811015612fa457612f9060d08281548110612f6457612f646145df565b60009182526020909120015460d080546001600160a01b0390921691849081106115e7576115e76145df565b612f9a908461496e565b9250600101612f46565b505090565b60cd54600090815b8181101561308d576001600160a01b038516600090815260d26020526040812081866001811115612fe457612fe4613f23565b6001811115612ff557612ff5613f23565b8152602001908152602001600020600060cd8481548110613018576130186145df565b60009182526020808320909101546001600160a01b0316835282019290925260400181205460cd8054919350613075918491908690811061305b5761305b6145df565b6000918252602090912001546001600160a01b0316613948565b9050613081818661496e565b94505050600101612fb1565b505092915050565b606580546001600160a01b0319169055611130816139d1565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152845160005b8181101561374d57868181518110613106576131066145df565b60209081029190910101516001600160a01b031660408401528551869082908110613133576131336145df565b60200260200101518360600190600181111561315157613151613f23565b9081600181111561316457613164613f23565b9052506040808401516001600160a01b0316600090815260dc6020529081206060850151909190600181111561319c5761319c613f23565b60018111156131ad576131ad613f23565b815260208082019290925260409081016000908120546001600160a01b0390811660808801819052825260d190935220541660c084015284518590829081106131f8576131f86145df565b6020026020010151600003613220576040516319a2a9bd60e01b815260040160405180910390fd5b60808301516001600160a01b031661325c5760408084015190516323b5f32160e21b81526001600160a01b03909116600482015260240161173c565b60808301516001600160a01b0316600090815260db602052604090205460ff166132aa576080830151604051635daa415360e01b81526001600160a01b03909116600482015260240161173c565b83888683815181106132be576132be6145df565b60200260200101516132d091906147ff565b6132da9190614816565b60a084015260008a815260d360209081526040808320818701516001600160a01b0316845290915281206060850151909190600181111561331d5761331d613f23565b600181111561332e5761332e613f23565b8152602080820192909252604090810160009081206001600160a01b038d168252909252902054156133735760405163315f6a3d60e01b815260040160405180910390fd5b60008a815260d5602090815260408083206001600160a01b038d8116808652918452828520888401518154600180820184559288528688200180546001600160a01b03191691909316179091558e855260d684528285209185529083529083206060870151815480840183559185529383902092810490920180549092601f166101000a60ff81021990911691849081111561341157613411613f23565b021790555060a08301516040808501516001600160a01b0316600090815260d26020529081206060860151909190600181111561345057613450613f23565b600181111561346157613461613f23565b815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546134a1919061496e565b909155505060a083015160008b815260d360209081526040808320818801516001600160a01b031684529091528120606086015190919060018111156134e9576134e9613f23565b60018111156134fa576134fa613f23565b815260200190815260200160002060008b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461353a919061496e565b92505081905550848181518110613553576135536145df565b60209081029190910181015160008c815260d483526040808220878201516001600160a01b03168352909352918220606086015191929091600181111561359c5761359c613f23565b60018111156135ad576135ad613f23565b8152602080820192909252604090810160009081206001600160a01b038e811680845291909452908290209390935560c086015160a08701519151630efe6a8b60e01b815260048101949094526024840191909152604483018d90521690630efe6a8b90606401600060405180830381600087803b15801561362e57600080fd5b505af1158015613642573d6000803e3d6000fd5b505050508260a001518360200181815161365c919061496e565b90525060a08301518351849061367390839061496e565b90525060408084015160a08501516001600160a01b03909116600081815260d260205292832060608701518e94929333937f452d440efc30dfa14a0ef803ccb55936af860ec6a6960ed27f129bef913f296a93919260018111156136d9576136d9613f23565b60018111156136ea576136ea613f23565b815260200190815260200160002060008f6001600160a01b03166001600160a01b03168152602001908152602001600020544260405161373d939291909283526020830191909152604082015260600190565b60405180910390a46001016130ec565b5060c954604051632d27a2cd60e11b8152600481018b9052600160248201526001600160a01b0390911690635a4f459a90604401600060405180830381600087803b15801561379b57600080fd5b505af11580156137af573d6000803e3d6000fd5b505083516001600160a01b038b16600090815260ce6020526040812080549294509250906137de90849061496e565b909155505050602090810151600098895260d782526040808a206001600160a01b039099168a529790915295909620949094555050505050565b600054610100900460ff1661383f5760405162461bcd60e51b815260040161173c90614a0c565b6117ac613a23565b600054610100900460ff1661386e5760405162461bcd60e51b815260040161173c90614a0c565b6117ac613a53565b60006138cb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a7a9092919063ffffffff16565b8051909150156116e257808060200190518101906138e99190614a57565b6116e25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161173c565b60cc546040516315d5220f60e31b81526001600160a01b038381166004830152600092839291169063aea9107890602401602060405180830381865afa158015613996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ba91906148fd565b905060006139c882866147ff565b95945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16613a4a5760405162461bcd60e51b815260040161173c90614a0c565b6117ac33613095565b600054610100900460ff16612bc85760405162461bcd60e51b815260040161173c90614a0c565b6060613a898484600085613a93565b90505b9392505050565b606082471015613af45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161173c565b600080866001600160a01b03168587604051613b109190614a98565b60006040518083038185875af1925050503d8060008114613b4d576040519150601f19603f3d011682016040523d82523d6000602084013e613b52565b606091505b5091509150613b6387838387613b70565b925050505b949350505050565b60608315613bdf578251600003613bd8576001600160a01b0385163b613bd85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161173c565b5081613b68565b613b688383815115613bf45781518083602001fd5b8060405162461bcd60e51b815260040161173c9190614ab4565b828054828255906000526020600020908101928215613c63579160200282015b82811115613c6357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613c2e565b50613c6f929150613cb2565b5090565b50805460008255906000526020600020908101906111309190613cb2565b50805460008255601f01602090049060005260206000209081019061113091905b5b80821115613c6f5760008155600101613cb3565b6001600160a01b038116811461113057600080fd5b600060208284031215613cee57600080fd5b8135613a8c81613cc7565b60008060408385031215613d0c57600080fd5b823591506020830135613d1e81613cc7565b809150509250929050565b801515811461113057600080fd5b60008060408385031215613d4a57600080fd5b8235613d5581613cc7565b91506020830135613d1e81613d29565b600080600060608486031215613d7a57600080fd5b833592506020840135613d8c81613cc7565b929592945050506040919091013590565b60008060408385031215613db057600080fd5b8235613dbb81613cc7565b946020939093013593505050565b600060208284031215613ddb57600080fd5b5035919050565b60008083601f840112613df457600080fd5b5081356001600160401b03811115613e0b57600080fd5b6020830191508360208260051b8501011115613e2657600080fd5b9250929050565b60008060008060008060608789031215613e4657600080fd5b86356001600160401b0380821115613e5d57600080fd5b613e698a838b01613de2565b90985096506020890135915080821115613e8257600080fd5b613e8e8a838b01613de2565b90965094506040890135915080821115613ea757600080fd5b50613eb489828a01613de2565b979a9699509497509295939492505050565b803560028110613ed557600080fd5b919050565b600080600060608486031215613eef57600080fd5b8335613efa81613cc7565b9250613f0860208501613ec6565b91506040840135613f1881613cc7565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60028110613f5757634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452602080850194506020840160005b83811015613f9357613f83878351613f39565b9582019590820190600101613f70565b509495945050505050565b60008151808452602080850194506020840160005b83811015613f9357815187529582019590820190600101613fb3565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b8083101561401d5783516001600160a01b03168252928401926001929092019190840190613ff4565b50838701519350601f1992508286820301604087015261403d8185613f5b565b9350505060408501518185840301606086015261405a8382613f9e565b92505050606084015160808401528091505092915050565b6000806040838503121561408557600080fd5b823561409081613cc7565b915061409e60208401613ec6565b90509250929050565b60008151808452602080850194506020840160005b83811015613f935781516001600160a01b0316875295820195908201906001016140bc565b602081526000613a8c60208301846140a7565b6000806020838503121561410757600080fd5b82356001600160401b038082111561411e57600080fd5b818501915085601f83011261413257600080fd5b81358181111561414157600080fd5b8660208260061b850101111561415657600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156141a6576141a6614168565b604052919050565b60006001600160401b038211156141c7576141c7614168565b5060051b60200190565b600082601f8301126141e257600080fd5b813560206141f76141f2836141ae565b61417e565b8083825260208201915060208460051b87010193508684111561421957600080fd5b602086015b8481101561423e57803561423181613cc7565b835291830191830161421e565b509695505050505050565b60006020828403121561425b57600080fd5b81356001600160401b0381111561427157600080fd5b613b68848285016141d1565b60008060006060848603121561429257600080fd5b83356001600160401b03808211156142a957600080fd5b6142b5878388016141d1565b94506020915081860135818111156142cc57600080fd5b8601601f810188136142dd57600080fd5b80356142eb6141f2826141ae565b81815260059190911b8201840190848101908a83111561430a57600080fd5b8584015b83811015614342578035868111156143265760008081fd5b6143348d89838901016141d1565b84525091860191860161430e565b50979a979950505050604095909501359450505050565b6000806000806080858703121561436f57600080fd5b84359350602085013561438181613cc7565b925061438f60408601613ec6565b9150606085013561439f81613cc7565b939692955090935050565b60008060008060008060006080888a0312156143c557600080fd5b8735965060208801356001600160401b03808211156143e357600080fd5b6143ef8b838c01613de2565b909850965060408a013591508082111561440857600080fd5b6144148b838c01613de2565b909650945060608a013591508082111561442d57600080fd5b5061443a8a828b01613de2565b989b979a50959850939692959293505050565b6001600160a01b038316815260408101613a8c6020830184613f39565b6000806000806040858703121561448057600080fd5b84356001600160401b038082111561449757600080fd5b6144a388838901613de2565b909650945060208701359150808211156144bc57600080fd5b506144c987828801613de2565b95989497509550505050565b6000602082840312156144e757600080fd5b8135613a8c81613d29565b60208101610f138284613f39565b60008060008060006080868803121561451857600080fd5b85356001600160401b0381111561452e57600080fd5b61453a88828901613de2565b909650945050602086013561454e81613cc7565b9250604086013561455e81613cc7565b9150606086013561456e81613cc7565b809150509295509295909350565b6000806040838503121561458f57600080fd5b823591506020830135613d1e81613d29565b6000806000606084860312156145b657600080fd5b83356145c181613cc7565b92506145cf60208501613ec6565b91506040840135613f1881613d29565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561460757600080fd5b613a8c82613ec6565b60008184825b8581101561464757813561462981613cc7565b6001600160a01b031683526020928301929190910190600101614616565b509095945050505050565b60008184825b85811015614647576146728361466d84613ec6565b613f39565b6020928301929190910190600101614658565b60006020828403121561469757600080fd5b8151613a8c81613cc7565b600082601f8301126146b357600080fd5b815160206146c36141f2836141ae565b8083825260208201915060208460051b8701019350868411156146e557600080fd5b602086015b8481101561423e57805183529183019183016146ea565b60008060006060848603121561471657600080fd5b83516001600160401b038082111561472d57600080fd5b818601915086601f83011261474157600080fd5b815160206147516141f2836141ae565b82815260059290921b8401810191818101908a84111561477057600080fd5b948201945b8386101561479757855161478881613cc7565b82529482019490820190614775565b918901519197509093505050808211156147b057600080fd5b6147bc878388016146a2565b935060408601519150808211156147d257600080fd5b506147df868287016146a2565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610f1357610f136147e9565b60008261483357634e487b7160e01b600052601260045260246000fd5b500490565b60006040828403121561484a57600080fd5b604051604081018181106001600160401b038211171561486c5761486c614168565b604052823561487a81613cc7565b815261488860208401613ec6565b60208201529392505050565b6020808252818101839052600090604080840186845b878110156148f05781356148bd81613cc7565b6001600160a01b031683526148d3828601613ec6565b6148df86850182613f39565b5091830191908301906001016148aa565b5090979650505050505050565b60006020828403121561490f57600080fd5b5051919050565b815160009082906020808601845b838110156149495781516001600160a01b031685529382019390820190600101614924565b50929695505050505050565b828152604060208201526000613a8960408301846140a7565b80820180821115610f1357610f136147e9565b60a0808252810186905260008760c08301825b898110156149c45782356149a781613cc7565b6001600160a01b0316825260209283019290910190600101614994565b506001600160a01b03978816602085015295871660408401525050918416606083015290921660809092019190915292915050565b81810381811115610f1357610f136147e9565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215614a6957600080fd5b8151613a8c81613d29565b60005b83811015614a8f578181015183820152602001614a77565b50506000910152565b60008251614aaa818460208701614a74565b9190910192915050565b6020815260008251806020840152614ad3816040850160208701614a74565b601f01601f1916919091016040019291505056fea2646970667358221220002ad58548615b5bcdb7eebc984bb59fb14fb5799525301cc12201f28189fa9764736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103425760003560e01c806379ba5097116101b8578063caa5c5d411610104578063e30c3978116100a2578063ebb1d4131161007c578063ebb1d41314610831578063f2fde38b14610851578063f3594be014610864578063faeb7bd51461088457600080fd5b8063e30c397814610804578063e34e8fd014610815578063e8b3fd571461082857600080fd5b8063d46005b1116100de578063d46005b1146107a8578063d4e2616f146107bb578063d58b15d4146107de578063e2819d5c146107f157600080fd5b8063caa5c5d414610737578063ce62db091461074a578063d21f50771461076a57600080fd5b8063aa9354a311610171578063bd31251f1161014b578063bd31251f146106eb578063bfe10928146106fe578063c42cf53514610711578063c975fec41461072457600080fd5b8063aa9354a314610694578063ab37f486146106a7578063b1283e77146106ca57600080fd5b806379ba5097146106135780637dc5421a1461061b578063880e36fc146106555780638da5cb5b146106685780639fdc1c7e14610679578063a54025441461068c57600080fd5b806330331b2f116102925780636e13fffe116102305780636f59dd8f1161020a5780636f59dd8f146105d2578063715018a6146105e557806375619ab5146105ed5780637715ee751461060057600080fd5b80636e13fffe146105a25780636eb172e3146105b75780636f4a2cd0146105ca57600080fd5b806339e9f3b61161026c57806339e9f3b6146105355780633d3b6f351461054857806352ed72c31461055b57806366a5e7e21461058f57600080fd5b806330331b2f146104fc578063310bd74b1461050f57806332145f901461052257600080fd5b80631703e5f9116102ff57806324f52f4f116102d957806324f52f4f14610485578063290a9127146104985780632935df9e146104c95780632f940c70146104e957600080fd5b80631703e5f91461042c5780631bb5e2dc1461045f5780631f8507161461047257600080fd5b806304d5a8cf1461034757806309b7617b1461038d5780630c340a24146103c65780630ffb1d8b146103d95780631056dfe8146103ee57806315b42e5e14610401575b600080fd5b610370610355366004613cdc565b60d1602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103b861039b366004613cf9565b60d760209081526000928352604080842090915290825290205481565b604051908152602001610384565b60cb54610370906001600160a01b031681565b6103ec6103e7366004613d37565b6108be565b005b6103ec6103fc366004613d65565b6108f7565b6103b861040f366004613d9d565b60de60209081526000928352604080842090915290825290205481565b61044f61043a366004613cdc565b60db6020526000908152604090205460ff1681565b6040519015158152602001610384565b61037061046d366004613dc9565b610954565b60c954610370906001600160a01b031681565b6103ec610493366004613e2d565b61097e565b6103b86104a6366004613eda565b60d260209081526000938452604080852082529284528284209052825290205481565b6104dc6104d7366004613cf9565b610bbb565b6040516103849190613fcf565b6103ec6104f7366004613cf9565b610f19565b6103ec61050a366004613dc9565b610f35565b6103ec61051d366004613dc9565b610fd7565b6103ec610530366004613dc9565b611133565b6103b8610543366004613dc9565b61128e565b60cc54610370906001600160a01b031681565b610370610569366004614072565b60dc6020908152600092835260408084209091529082529020546001600160a01b031681565b61037061059d366004613d65565b6112a1565b6105aa6112e6565b60405161038491906140e1565b6103ec6105c53660046140f4565b611348565b6103ec6114b2565b6103ec6105e0366004614249565b6116e7565b6103ec61179a565b6103ec6105fb366004613cdc565b6117ae565b6103ec61060e36600461427d565b6117ff565b6103ec611979565b6103b8610629366004614359565b60d360209081526000948552604080862082529385528385208152918452828420909152825290205481565b6103b8610663366004613dc9565b6119f0565b6033546001600160a01b0316610370565b6103ec6106873660046143aa565b611a01565b60d0546103b8565b6103b86106a2366004613dc9565b611e58565b61044f6106b5366004613cdc565b60d96020526000908152604090205460ff1681565b6106dd6106d8366004613dc9565b611e67565b60405161038492919061444d565b6103ec6106f9366004613cdc565b611e9c565b60df54610370906001600160a01b031681565b6103ec61071f366004613cdc565b611f15565b6103ec61073236600461446a565b611f8e565b6103ec6107453660046144d5565b6120d0565b61075d610758366004613d65565b612142565b60405161038491906144f2565b6103b8610778366004613d9d565b6001600160a01b0391909116600090815260de6020908152604080832062093a8085069094038352929052205490565b6103ec6107b6366004614500565b612192565b61044f6107c9366004613dc9565b60da6020526000908152604090205460ff1681565b6103b86107ec366004613dc9565b6123a2565b6103ec6107ff36600461457c565b6123b6565b6065546001600160a01b0316610370565b6103ec6108233660046145a1565b61242f565b6103b860cf5481565b6103b861083f366004613cdc565b60ce6020526000908152604090205481565b6103ec61085f366004613cdc565b61255c565b6103b8610872366004613dc9565b60d86020526000908152604090205481565b6103b8610892366004614359565b60d460209081526000948552604080862082529385528385208152918452828420909152825290205481565b60cb546001600160a01b031633146108e957604051633b8d9d7560e21b815260040160405180910390fd5b6108f382826125cd565b5050565b60df546001600160a01b031633146109225760405163385296d560e01b815260040160405180910390fd5b6001600160a01b0391909116600090815260de6020908152604080832062093a80860690950383529390529190912055565b60cd818154811061096457600080fd5b6000918252602090912001546001600160a01b0316905081565b60cb546001600160a01b031633146109a957604051633b8d9d7560e21b815260040160405180910390fd5b848381146109ca57604051632b477e7160e11b815260040160405180910390fd5b8181146109ea57604051632b477e7160e11b815260040160405180910390fd5b60005b81811015610b4157838382818110610a0757610a076145df565b9050602002016020810190610a1c9190613cdc565b60dc60008a8a85818110610a3257610a326145df565b9050602002016020810190610a479190613cdc565b6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110610a7b57610a7b6145df565b9050602002016020810190610a9091906145f5565b6001811115610aa157610aa1613f23565b6001811115610ab257610ab2613f23565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160db6000868685818110610afc57610afc6145df565b9050602002016020810190610b119190613cdc565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556001016109ed565b508282604051610b52929190614610565b60405180910390208585604051610b6a929190614652565b60405180910390208888604051610b82929190614610565b604051908190038120907fff4266c7dba361bc4ce6e86cc8fd87b2d5e94e60527231375cc8fb565f8b32b290600090a450505050505050565b610be66040518060800160405280606081526020016060815260200160608152602001600081525090565b600083815260d5602090815260408083206001600160a01b038616845290915281205490816001600160401b03811115610c2257610c22614168565b604051908082528060200260200182016040528015610c4b578160200160208202803683370190505b5090506000826001600160401b03811115610c6857610c68614168565b604051908082528060200260200182016040528015610c91578160200160208202803683370190505b5090506000836001600160401b03811115610cae57610cae614168565b604051908082528060200260200182016040528015610cd7578160200160208202803683370190505b50905060005b84811015610ed057600088815260d5602090815260408083206001600160a01b038b1684529091529020805482908110610d1957610d196145df565b9060005260206000200160009054906101000a90046001600160a01b0316848281518110610d4957610d496145df565b6001600160a01b0392831660209182029290920181019190915260008a815260d682526040808220938b1682529290915220805482908110610d8d57610d8d6145df565b90600052602060002090602091828204019190069054906101000a900460ff16838281518110610dbf57610dbf6145df565b60200260200101906001811115610dd857610dd8613f23565b90816001811115610deb57610deb613f23565b905250600088815260d3602052604081208551909190869084908110610e1357610e136145df565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000848381518110610e4f57610e4f6145df565b60200260200101516001811115610e6857610e68613f23565b6001811115610e7957610e79613f23565b81526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610ebd57610ebd6145df565b6020908102919091010152600101610cdd565b50600087815260d7602090815260408083206001600160a01b038a1684528252918290205482516080810184529586529085019390935283015260608201529150505b92915050565b610f21612624565b6108f36001600160a01b038216338461267e565b60cb546001600160a01b03163314610f6057604051633b8d9d7560e21b815260040160405180910390fd5b600a811015610f8257604051632db4ddc160e11b815260040160405180910390fd5b60cf548103610fa45760405163c23f6ccb60e01b815260040160405180910390fd5b60cf81905560405181907f570570b221cb14706e1bd90180bd79e47d0375cf953ccd13f34fcaa1073646d190600090a250565b610fdf6126d0565b600081815260d860205260409020548190610fff4262093a808106900390565b1161101d5760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e1001421161104a57604051635a780bad60e01b815260040160405180910390fd5b60c9546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e90602401602060405180830381865afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b79190614685565b6001600160a01b0316146110de576040516330cd747160e01b815260040160405180910390fd5b60005b60cd548110156111245761111c8360cd8381548110611102576111026145df565b6000918252602090912001546001600160a01b0316612729565b6001016110e1565b50506111306001609755565b50565b61113b6126d0565b62093a80429081069003610e1001421161116857604051635a780bad60e01b815260040160405180910390fd5b60c9546040516339f890b560e21b815260048101839052600091829182916001600160a01b03169063e7e242d490602401600060405180830381865afa1580156111b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111de9190810190614701565b92509250925060005b8351811015611280576000670de0b6b3a764000083838151811061120d5761120d6145df565b6020026020010151858481518110611227576112276145df565b602002602001015161123991906147ff565b6112439190614816565b90506112778660cd848154811061125c5761125c6145df565b6000918252602090912001546001600160a01b031683612bcf565b506001016111e7565b505050506111306001609755565b600062093a8082068203610e1001610f13565b60d560205282600052604060002060205281600052604060002081815481106112c957600080fd5b6000918252602090912001546001600160a01b0316925083915050565b606060cd80548060200260200160405190810160405280929190818152602001828054801561133e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611320575b5050505050905090565b60cb546001600160a01b0316331461137357604051633b8d9d7560e21b815260040160405180910390fd5b60005b81811015611474576000838383818110611392576113926145df565b9050604002018036038101906113a89190614838565b90506113bc81600001518260200151612e83565b156113da57604051630313b28560e01b815260040160405180910390fd5b60d080546001808201835560009290925282517fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb90910180546001600160a01b031981166001600160a01b039093169283178255602085015185949293909284926001600160a81b03191690911790600160a01b90849081111561146057611460613f23565b021790555050600190920191506113769050565b507f5577e527c22d6c9a43929d204c9bfc33fa089326ce69b3ca9f8cc52caf1cb33282826040516114a6929190614894565b60405180910390a15050565b60df546001600160a01b031633146114dd5760405163385296d560e01b815260040160405180910390fd5b60dd5460ff1680156114fd575062093a80429081069003620891c0014211155b1561151b576040516355bf6a7160e01b815260040160405180910390fd5b60ca546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158891906148fd565b90506000611594612f3e565b905060005b60d0548110156116e257600061160260d083815481106115bb576115bb6145df565b60009182526020909120015460d080546001600160a01b0390921691859081106115e7576115e76145df565b600091825260209091200154600160a01b900460ff16612fa9565b905080156116d9576116d960dc600060d08581548110611624576116246145df565b60009182526020808320909101546001600160a01b03168352820192909252604001812060d080549192918690811061165f5761165f6145df565b600091825260209091200154600160a01b900460ff16600181111561168657611686613f23565b600181111561169757611697613f23565b81526020810191909152604001600020546001600160a01b0316846116bc84886147ff565b6116c69190614816565b60ca546001600160a01b0316919061267e565b50600101611599565b505050565b6116ef612624565b80516000036117455760405162461bcd60e51b815260206004820152601e60248201527f4c70546f6b656e732061727261792063616e6e6f7420626520656d707479000060448201526064015b60405180910390fd5b80516117589060cd906020840190613c0e565b50806040516117679190614916565b604051908190038120907f46475a5acc517188c629ae24ba62499dcb1de5aed40b269f5d0ab378fc3d447790600090a250565b6117a2612624565b6117ac6000613095565b565b6117b6612624565b6001600160a01b0381166117dd5760405163d92e233d60e01b815260040160405180910390fd5b60df80546001600160a01b0319166001600160a01b0392909216919091179055565b6118076126d0565b81518351146118295760405163332ac86360e21b815260040160405180910390fd5b3360c9546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015611877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189b9190614685565b6001600160a01b0316146118c2576040516330cd747160e01b815260040160405180910390fd5b825160005b8181101561196d578481815181106118e1576118e16145df565b60200260200101516001600160a01b031663f5f8d3658486848151811061190a5761190a6145df565b60200260200101516040518363ffffffff1660e01b815260040161192f929190614955565b600060405180830381600087803b15801561194957600080fd5b505af115801561195d573d6000803e3d6000fd5b5050600190920191506118c79050565b50506116e26001609755565b60655433906001600160a01b031681146119e75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161173c565b61113081613095565b600062093a80808306830301610f13565b611a096126d0565b600087815260d860205260409020548790611a294262093a808106900390565b11611a475760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e10014211611a7457604051635a780bad60e01b815260040160405180910390fd5b611aaf6040518060a0016040528060006001600160a01b03168152602001600081526020016060815260200160608152602001606081525090565b3380825260c9546040516331a9108f60e11b8152600481018c90526001600160a01b0390911690636352211e90602401602060405180830381865afa158015611afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b209190614685565b6001600160a01b031614611b47576040516330cd747160e01b815260040160405180910390fd5b8685141580611b565750848314155b80611b615750828714155b15611b7f5760405163332ac86360e21b815260040160405180910390fd5b60cf54871115611ba25760405163ebcfae4b60e01b815260040160405180910390fd5b4260208201819052620891c062093a808206820301108015611bd35750600089815260da602052604090205460ff16155b15611bf157604051630392978d60e41b815260040160405180910390fd5b6000805b88811015611c2b57858582818110611c0f57611c0f6145df565b9050602002013582611c21919061496e565b9150600101611bf5565b5060005b60cd54811015611c5857611c508b60cd8381548110611102576111026145df565b600101611c2f565b5060208281015160008c815260d89092526040918290205560c95490516339f890b560e21b8152600481018c90526001600160a01b039091169063e7e242d490602401600060405180830381865afa158015611cb8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ce09190810190614701565b60808501526060840152604083015260005b826040015151811015611e4157611e398b84604001518381518110611d1957611d196145df565b6020026020010151670de0b6b3a764000086608001518581518110611d4057611d406145df565b602002602001015187606001518681518110611d5e57611d5e6145df565b6020026020010151611d7091906147ff565b611d7a9190614816565b8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b92506130ae915050565b600101611cf2565b50505050611e4f6001609755565b50505050505050565b600062093a8082068203610f13565b60d08181548110611e7757600080fd5b6000918252602090912001546001600160a01b0381169150600160a01b900460ff1682565b611ea4612624565b6001600160a01b038116611ecb5760405163d92e233d60e01b815260040160405180910390fd5b60cc80546001600160a01b0319166001600160a01b0383169081179091556040517f676e14d1d2e92c005e4dcfbba61af630b9ca19e16f69be0371d88b368f2b2cb390600090a250565b611f1d612624565b6001600160a01b038116611f445760405163d92e233d60e01b815260040160405180910390fd5b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517f1cbb37f5a02c38ab13773cb770fae505cce417a4d81560117389e3a9f7e001f290600090a250565b60cb546001600160a01b03163314611fb957604051633b8d9d7560e21b815260040160405180910390fd5b80838114611fda57604051632b477e7160e11b815260040160405180910390fd5b60005b8181101561207057838382818110611ff757611ff76145df565b905060200201602081019061200c9190613cdc565b60d16000888885818110612022576120226145df565b90506020020160208101906120379190613cdc565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b03191692909116919091179055600101611fdd565b508282604051612081929190614610565b60405180910390208585604051612099929190614610565b604051908190038120907f3cbe37144c7485400be82bfd3641a31b2f85267b60edcf9ef2ec012b5c4eef4890600090a35050505050565b60cb546001600160a01b031633146120fb57604051633b8d9d7560e21b815260040160405180910390fd5b60dd805460ff19168215159081179091556040519081527f6efa5ade2635e3df319c8c9b1b674023447896f669114b6191c2a96b1659d34d9060200160405180910390a150565b60d6602052826000526040600020602052816000526040600020818154811061216a57600080fd5b906000526020600020906020918282040191900692509250509054906101000a900460ff1681565b600054610100900460ff16158080156121b25750600054600160ff909116105b806121cc5750303b1580156121cc575060005460ff166001145b61222f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161173c565b6000805460ff191660011790558015612252576000805461ff0019166101001790555b61225a613818565b612262613847565b84600081900361228457604051620d28ef60eb1b815260040160405180910390fd5b60005b818110156122c8576122c08888838181106122a4576122a46145df565b90506020020160208101906122b99190613cdc565b60016125cd565b600101612287565b5060cc80546001600160a01b03199081166001600160a01b038881169190911790925560ca8054821687841617905560c9805482169286169290921790915560cb8054339216821790556040517f4a3eb0674631610761ddae0e34a5390318f5ec24f3b1ef5ea015f4dff914e4c99161234b918a918a918a918a918a9190614981565b60405180910390a150801561239a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b600062093a8082068203620891c001610f13565b60cb546001600160a01b031633146123e157604051633b8d9d7560e21b815260040160405180910390fd5b600082815260da6020526040808220805460ff191684151590811790915590513392859184917f8a6ff732c8641e1e34d771e1f8b1673e988c1abdfb694ebdf6c910a5e3d0d85391a4505050565b60cb546001600160a01b0316331461245a57604051633b8d9d7560e21b815260040160405180910390fd5b6001600160a01b038316600090815260dc602052604081208184600181111561248557612485613f23565b600181111561249657612496613f23565b81526020810191909152604001600020546001600160a01b03169050806124db576040516323b5f32160e21b81526001600160a01b038516600482015260240161173c565b6001600160a01b038116600090815260db60205260409020805460ff191683151517905582600181111561251157612511613f23565b846001600160a01b03167f1e5b8e1351cfab07ad44bc6532bf1bb2dccdddc5bbda4d8109aa55064e63d0fb8460405161254e911515815260200190565b60405180910390a350505050565b612564612624565b606580546001600160a01b0383166001600160a01b031990911681179091556125956033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6001600160a01b038216600081815260d96020526040808220805460ff1916851515908117909155905190929133917f44948130cf88523dbc150908a47dd6332c33a01a3869d7f2fa78e51d5a5f9c579190a45050565b6033546001600160a01b031633146117ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161173c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526116e2908490613876565b6002609754036127225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161173c565b6002609755565b600082815260d5602090815260408083206001600160a01b03851680855290835281842086855260d6845282852091855292528220815491929091905b81811015612aee576000848281548110612782576127826145df565b600091825260208220015485546001600160a01b0390911692508590849081106127ae576127ae6145df565b6000918252602080832081830401548b845260d3825260408085206001600160a01b0388168652909252908320601f9092166101000a900460ff169250818360018111156127fe576127fe613f23565b600181111561280f5761280f613f23565b8152602080820192909252604090810160009081206001600160a01b038c16825290925290205490508015612ae3576001600160a01b038316600090815260d260205260408120829184600181111561286a5761286a613f23565b600181111561287b5761287b613f23565b815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546128bb91906149f9565b9091555050600089815260d3602090815260408083206001600160a01b03871684529091528120908360018111156128f5576128f5613f23565b600181111561290657612906613f23565b8152602080820192909252604090810160009081206001600160a01b03808d1683529084528282208290558616815260dc909252812060d191908185600181111561295357612953613f23565b600181111561296457612964613f23565b815260208082019290925260409081016000908120546001600160a01b03908116855292840194909452918201909220549051635ae2fb3960e11b81528a8316600482015260248101849052604481018c905291169063b5c5f67290606401600060405180830381600087803b1580156129dd57600080fd5b505af11580156129f1573d6000803e3d6000fd5b505050506001600160a01b038816600090815260ce602052604081208054839290612a1d9084906149f9565b90915550506001600160a01b038316600081815260d2602052604081208b929133917fadab630928b1d46214641293704a312ee7ad87e03ae14a7fd95e7308b93998df91869190886001811115612a7657612a76613f23565b6001811115612a8757612a87613f23565b815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000205442604051612ada939291909283526020830191909152604082015260600190565b60405180910390a45b505050600101612766565b50600085815260d7602090815260408083206001600160a01b03881680855290835281842084905588845260d583528184209084529091528120612b3191613c73565b600085815260d6602090815260408083206001600160a01b03881684529091528120612b5c91613c91565b60c954604051632d27a2cd60e11b815260048101879052600060248201526001600160a01b0390911690635a4f459a90604401600060405180830381600087803b158015612ba957600080fd5b505af1158015612bbd573d6000803e3d6000fd5b505050505050505050565b6001609755565b600083815260d5602090815260408083206001600160a01b0386168452825280832080548251818502810185019093528083529192909190830182828015612c4057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612c22575b505050600087815260d6602090815260408083206001600160a01b038a168452825280832080548251818502810185019093528083529697509295909450919250830182828015612ce057602002820191906000526020600020906000905b82829054906101000a900460ff166001811115612cbe57612cbe613f23565b815260206001928301818104948501949093039092029101808411612c9f5790505b505050505090506000825190506000816001600160401b03811115612d0757612d07614168565b604051908082528060200260200182016040528015612d30578160200160208202803683370190505b5090506000805b83811015612e235760d460008a81526020019081526020016000206000878381518110612d6657612d666145df565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000868381518110612da257612da26145df565b60200260200101516001811115612dbb57612dbb613f23565b6001811115612dcc57612dcc613f23565b81526020019081526020016000206000896001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110612e1057612e106145df565b6020908102919091010152600101612d37565b5060005b8551811015612e5f57828181518110612e4257612e426145df565b602002602001015182612e55919061496e565b9150600101612e27565b50612e6a8888612729565b612e79888888888887876130ae565b5050505050505050565b60d054600090815b81811015612f3357846001600160a01b031660d08281548110612eb057612eb06145df565b6000918252602090912001546001600160a01b0316148015612f1b5750836001811115612edf57612edf613f23565b60d08281548110612ef257612ef26145df565b600091825260209091200154600160a01b900460ff166001811115612f1957612f19613f23565b145b15612f2b57600192505050610f13565b600101612e8b565b506000949350505050565b60d054600090815b81811015612fa457612f9060d08281548110612f6457612f646145df565b60009182526020909120015460d080546001600160a01b0390921691849081106115e7576115e76145df565b612f9a908461496e565b9250600101612f46565b505090565b60cd54600090815b8181101561308d576001600160a01b038516600090815260d26020526040812081866001811115612fe457612fe4613f23565b6001811115612ff557612ff5613f23565b8152602001908152602001600020600060cd8481548110613018576130186145df565b60009182526020808320909101546001600160a01b0316835282019290925260400181205460cd8054919350613075918491908690811061305b5761305b6145df565b6000918252602090912001546001600160a01b0316613948565b9050613081818661496e565b94505050600101612fb1565b505092915050565b606580546001600160a01b0319169055611130816139d1565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152845160005b8181101561374d57868181518110613106576131066145df565b60209081029190910101516001600160a01b031660408401528551869082908110613133576131336145df565b60200260200101518360600190600181111561315157613151613f23565b9081600181111561316457613164613f23565b9052506040808401516001600160a01b0316600090815260dc6020529081206060850151909190600181111561319c5761319c613f23565b60018111156131ad576131ad613f23565b815260208082019290925260409081016000908120546001600160a01b0390811660808801819052825260d190935220541660c084015284518590829081106131f8576131f86145df565b6020026020010151600003613220576040516319a2a9bd60e01b815260040160405180910390fd5b60808301516001600160a01b031661325c5760408084015190516323b5f32160e21b81526001600160a01b03909116600482015260240161173c565b60808301516001600160a01b0316600090815260db602052604090205460ff166132aa576080830151604051635daa415360e01b81526001600160a01b03909116600482015260240161173c565b83888683815181106132be576132be6145df565b60200260200101516132d091906147ff565b6132da9190614816565b60a084015260008a815260d360209081526040808320818701516001600160a01b0316845290915281206060850151909190600181111561331d5761331d613f23565b600181111561332e5761332e613f23565b8152602080820192909252604090810160009081206001600160a01b038d168252909252902054156133735760405163315f6a3d60e01b815260040160405180910390fd5b60008a815260d5602090815260408083206001600160a01b038d8116808652918452828520888401518154600180820184559288528688200180546001600160a01b03191691909316179091558e855260d684528285209185529083529083206060870151815480840183559185529383902092810490920180549092601f166101000a60ff81021990911691849081111561341157613411613f23565b021790555060a08301516040808501516001600160a01b0316600090815260d26020529081206060860151909190600181111561345057613450613f23565b600181111561346157613461613f23565b815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546134a1919061496e565b909155505060a083015160008b815260d360209081526040808320818801516001600160a01b031684529091528120606086015190919060018111156134e9576134e9613f23565b60018111156134fa576134fa613f23565b815260200190815260200160002060008b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461353a919061496e565b92505081905550848181518110613553576135536145df565b60209081029190910181015160008c815260d483526040808220878201516001600160a01b03168352909352918220606086015191929091600181111561359c5761359c613f23565b60018111156135ad576135ad613f23565b8152602080820192909252604090810160009081206001600160a01b038e811680845291909452908290209390935560c086015160a08701519151630efe6a8b60e01b815260048101949094526024840191909152604483018d90521690630efe6a8b90606401600060405180830381600087803b15801561362e57600080fd5b505af1158015613642573d6000803e3d6000fd5b505050508260a001518360200181815161365c919061496e565b90525060a08301518351849061367390839061496e565b90525060408084015160a08501516001600160a01b03909116600081815260d260205292832060608701518e94929333937f452d440efc30dfa14a0ef803ccb55936af860ec6a6960ed27f129bef913f296a93919260018111156136d9576136d9613f23565b60018111156136ea576136ea613f23565b815260200190815260200160002060008f6001600160a01b03166001600160a01b03168152602001908152602001600020544260405161373d939291909283526020830191909152604082015260600190565b60405180910390a46001016130ec565b5060c954604051632d27a2cd60e11b8152600481018b9052600160248201526001600160a01b0390911690635a4f459a90604401600060405180830381600087803b15801561379b57600080fd5b505af11580156137af573d6000803e3d6000fd5b505083516001600160a01b038b16600090815260ce6020526040812080549294509250906137de90849061496e565b909155505050602090810151600098895260d782526040808a206001600160a01b039099168a529790915295909620949094555050505050565b600054610100900460ff1661383f5760405162461bcd60e51b815260040161173c90614a0c565b6117ac613a23565b600054610100900460ff1661386e5760405162461bcd60e51b815260040161173c90614a0c565b6117ac613a53565b60006138cb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a7a9092919063ffffffff16565b8051909150156116e257808060200190518101906138e99190614a57565b6116e25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161173c565b60cc546040516315d5220f60e31b81526001600160a01b038381166004830152600092839291169063aea9107890602401602060405180830381865afa158015613996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ba91906148fd565b905060006139c882866147ff565b95945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16613a4a5760405162461bcd60e51b815260040161173c90614a0c565b6117ac33613095565b600054610100900460ff16612bc85760405162461bcd60e51b815260040161173c90614a0c565b6060613a898484600085613a93565b90505b9392505050565b606082471015613af45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161173c565b600080866001600160a01b03168587604051613b109190614a98565b60006040518083038185875af1925050503d8060008114613b4d576040519150601f19603f3d011682016040523d82523d6000602084013e613b52565b606091505b5091509150613b6387838387613b70565b925050505b949350505050565b60608315613bdf578251600003613bd8576001600160a01b0385163b613bd85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161173c565b5081613b68565b613b688383815115613bf45781518083602001fd5b8060405162461bcd60e51b815260040161173c9190614ab4565b828054828255906000526020600020908101928215613c63579160200282015b82811115613c6357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613c2e565b50613c6f929150613cb2565b5090565b50805460008255906000526020600020908101906111309190613cb2565b50805460008255601f01602090049060005260206000209081019061113091905b5b80821115613c6f5760008155600101613cb3565b6001600160a01b038116811461113057600080fd5b600060208284031215613cee57600080fd5b8135613a8c81613cc7565b60008060408385031215613d0c57600080fd5b823591506020830135613d1e81613cc7565b809150509250929050565b801515811461113057600080fd5b60008060408385031215613d4a57600080fd5b8235613d5581613cc7565b91506020830135613d1e81613d29565b600080600060608486031215613d7a57600080fd5b833592506020840135613d8c81613cc7565b929592945050506040919091013590565b60008060408385031215613db057600080fd5b8235613dbb81613cc7565b946020939093013593505050565b600060208284031215613ddb57600080fd5b5035919050565b60008083601f840112613df457600080fd5b5081356001600160401b03811115613e0b57600080fd5b6020830191508360208260051b8501011115613e2657600080fd5b9250929050565b60008060008060008060608789031215613e4657600080fd5b86356001600160401b0380821115613e5d57600080fd5b613e698a838b01613de2565b90985096506020890135915080821115613e8257600080fd5b613e8e8a838b01613de2565b90965094506040890135915080821115613ea757600080fd5b50613eb489828a01613de2565b979a9699509497509295939492505050565b803560028110613ed557600080fd5b919050565b600080600060608486031215613eef57600080fd5b8335613efa81613cc7565b9250613f0860208501613ec6565b91506040840135613f1881613cc7565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60028110613f5757634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452602080850194506020840160005b83811015613f9357613f83878351613f39565b9582019590820190600101613f70565b509495945050505050565b60008151808452602080850194506020840160005b83811015613f9357815187529582019590820190600101613fb3565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b8083101561401d5783516001600160a01b03168252928401926001929092019190840190613ff4565b50838701519350601f1992508286820301604087015261403d8185613f5b565b9350505060408501518185840301606086015261405a8382613f9e565b92505050606084015160808401528091505092915050565b6000806040838503121561408557600080fd5b823561409081613cc7565b915061409e60208401613ec6565b90509250929050565b60008151808452602080850194506020840160005b83811015613f935781516001600160a01b0316875295820195908201906001016140bc565b602081526000613a8c60208301846140a7565b6000806020838503121561410757600080fd5b82356001600160401b038082111561411e57600080fd5b818501915085601f83011261413257600080fd5b81358181111561414157600080fd5b8660208260061b850101111561415657600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156141a6576141a6614168565b604052919050565b60006001600160401b038211156141c7576141c7614168565b5060051b60200190565b600082601f8301126141e257600080fd5b813560206141f76141f2836141ae565b61417e565b8083825260208201915060208460051b87010193508684111561421957600080fd5b602086015b8481101561423e57803561423181613cc7565b835291830191830161421e565b509695505050505050565b60006020828403121561425b57600080fd5b81356001600160401b0381111561427157600080fd5b613b68848285016141d1565b60008060006060848603121561429257600080fd5b83356001600160401b03808211156142a957600080fd5b6142b5878388016141d1565b94506020915081860135818111156142cc57600080fd5b8601601f810188136142dd57600080fd5b80356142eb6141f2826141ae565b81815260059190911b8201840190848101908a83111561430a57600080fd5b8584015b83811015614342578035868111156143265760008081fd5b6143348d89838901016141d1565b84525091860191860161430e565b50979a979950505050604095909501359450505050565b6000806000806080858703121561436f57600080fd5b84359350602085013561438181613cc7565b925061438f60408601613ec6565b9150606085013561439f81613cc7565b939692955090935050565b60008060008060008060006080888a0312156143c557600080fd5b8735965060208801356001600160401b03808211156143e357600080fd5b6143ef8b838c01613de2565b909850965060408a013591508082111561440857600080fd5b6144148b838c01613de2565b909650945060608a013591508082111561442d57600080fd5b5061443a8a828b01613de2565b989b979a50959850939692959293505050565b6001600160a01b038316815260408101613a8c6020830184613f39565b6000806000806040858703121561448057600080fd5b84356001600160401b038082111561449757600080fd5b6144a388838901613de2565b909650945060208701359150808211156144bc57600080fd5b506144c987828801613de2565b95989497509550505050565b6000602082840312156144e757600080fd5b8135613a8c81613d29565b60208101610f138284613f39565b60008060008060006080868803121561451857600080fd5b85356001600160401b0381111561452e57600080fd5b61453a88828901613de2565b909650945050602086013561454e81613cc7565b9250604086013561455e81613cc7565b9150606086013561456e81613cc7565b809150509295509295909350565b6000806040838503121561458f57600080fd5b823591506020830135613d1e81613d29565b6000806000606084860312156145b657600080fd5b83356145c181613cc7565b92506145cf60208501613ec6565b91506040840135613f1881613d29565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561460757600080fd5b613a8c82613ec6565b60008184825b8581101561464757813561462981613cc7565b6001600160a01b031683526020928301929190910190600101614616565b509095945050505050565b60008184825b85811015614647576146728361466d84613ec6565b613f39565b6020928301929190910190600101614658565b60006020828403121561469757600080fd5b8151613a8c81613cc7565b600082601f8301126146b357600080fd5b815160206146c36141f2836141ae565b8083825260208201915060208460051b8701019350868411156146e557600080fd5b602086015b8481101561423e57805183529183019183016146ea565b60008060006060848603121561471657600080fd5b83516001600160401b038082111561472d57600080fd5b818601915086601f83011261474157600080fd5b815160206147516141f2836141ae565b82815260059290921b8401810191818101908a84111561477057600080fd5b948201945b8386101561479757855161478881613cc7565b82529482019490820190614775565b918901519197509093505050808211156147b057600080fd5b6147bc878388016146a2565b935060408601519150808211156147d257600080fd5b506147df868287016146a2565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610f1357610f136147e9565b60008261483357634e487b7160e01b600052601260045260246000fd5b500490565b60006040828403121561484a57600080fd5b604051604081018181106001600160401b038211171561486c5761486c614168565b604052823561487a81613cc7565b815261488860208401613ec6565b60208201529392505050565b6020808252818101839052600090604080840186845b878110156148f05781356148bd81613cc7565b6001600160a01b031683526148d3828601613ec6565b6148df86850182613f39565b5091830191908301906001016148aa565b5090979650505050505050565b60006020828403121561490f57600080fd5b5051919050565b815160009082906020808601845b838110156149495781516001600160a01b031685529382019390820190600101614924565b50929695505050505050565b828152604060208201526000613a8960408301846140a7565b80820180821115610f1357610f136147e9565b60a0808252810186905260008760c08301825b898110156149c45782356149a781613cc7565b6001600160a01b0316825260209283019290910190600101614994565b506001600160a01b03978816602085015295871660408401525050918416606083015290921660809092019190915292915050565b81810381811115610f1357610f136147e9565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215614a6957600080fd5b8151613a8c81613d29565b60005b83811015614a8f578181015183820152602001614a77565b50506000910152565b60008251614aaa818460208701614a74565b9190910192915050565b6020815260008251806020840152614ad3816040850160208701614a74565b601f01601f1916919091016040019291505056fea2646970667358221220002ad58548615b5bcdb7eebc984bb59fb14fb5799525301cc12201f28189fa9764736f6c63430008160033",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)",
    "events": {
      "Abstained(address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "pool": "Address of the pool.",
          "timestamp": "Timestamp of the vote.",
          "tokenId": "ID of the token.",
          "totalWeight": "Total weight of the vote.",
          "voter": "Address of the voter.",
          "weight": "Weight of the vote."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NotifyReward(address,address,uint256)": {
        "params": {
          "amount": "Amount of the reward.",
          "reward": "Address of the reward.",
          "sender": "Address of the sender."
        }
      },
      "Voted(address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "pool": "Address of the pool.",
          "timestamp": "Timestamp of the vote.",
          "tokenId": "ID of the token.",
          "totalWeight": "Total weight of the vote.",
          "voter": "Address of the voter.",
          "weight": "Weight of the vote."
        }
      },
      "WhitelistNFT(address,uint256,bool)": {
        "params": {
          "_bool": "Boolean indicating whitelist status.",
          "tokenId": "ID of the token.",
          "whitelister": "Address of the whitelister."
        }
      },
      "WhitelistToken(address,address,bool)": {
        "params": {
          "_bool": "Boolean indicating whitelist status.",
          "token": "Address of the token.",
          "whitelister": "Address of the whitelister."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addMarkets((address,uint8)[])": {
        "params": {
          "_markets": "Array of Market structs to be added."
        }
      },
      "claimBribes(address[],address[][],uint256)": {
        "details": "Utility to help batch bribe claims.",
        "params": {
          "_bribes": "Array of BribeVotingReward contracts to collect from.",
          "_tokenId": "ID of veNFT that you wish to claim bribes for.",
          "_tokens": "Array of tokens that are used as bribes."
        }
      },
      "epochNext(uint256)": {
        "params": {
          "_timestamp": "The timestamp to calculate the next epoch for."
        },
        "returns": {
          "_0": "The next epoch."
        }
      },
      "epochStart(uint256)": {
        "params": {
          "_timestamp": "The timestamp to calculate the epoch start for."
        },
        "returns": {
          "_0": "The start of the epoch."
        }
      },
      "epochVoteEnd(uint256)": {
        "params": {
          "_timestamp": "The timestamp to calculate the voting end for."
        },
        "returns": {
          "_0": "The end of the voting period."
        }
      },
      "epochVoteStart(uint256)": {
        "params": {
          "_timestamp": "The timestamp to calculate the voting start for."
        },
        "returns": {
          "_0": "The start of the voting period."
        }
      },
      "getAllLpRewardTokens()": {
        "returns": {
          "_0": "An array of addresses representing all LP reward tokens."
        }
      },
      "getHistoricalPrice(address,uint256)": {
        "params": {
          "epochTimestamp": "The timestamp of the epoch",
          "lpToken": "The LP token address"
        },
        "returns": {
          "_0": "The historical price of the LP token at the specified epoch"
        }
      },
      "getVoteDetails(uint256,address)": {
        "params": {
          "_lpAsset": "The address of the LP asset.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "A struct containing vote details."
        }
      },
      "initialize(address[],address,address,address)": {
        "custom:reverts": "TokensArrayEmpty if the _tokens array is empty.",
        "details": "Requires initialization with at least one reward token.",
        "params": {
          "_mpo": "The MasterPriceOracle contract address.",
          "_rewardToken": "The address of the reward token.",
          "_tokens": "An array of token addresses to be whitelisted.",
          "_ve": "The address of the veION contract."
        }
      },
      "marketsLength()": {
        "returns": {
          "_0": "The number of markets."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "poke(uint256)": {
        "params": {
          "_tokenId": "ID of veNFT whose balance you wish to update."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reset(uint256)": {
        "details": "Cannot reset in the same epoch that you voted in.      Can vote or deposit into a managed NFT again after reset.",
        "params": {
          "_tokenId": "ID of veNFT that you are resetting."
        }
      },
      "setBribes(address[],address[])": {
        "params": {
          "_bribes": "Array of bribe addresses.",
          "_rewardAccumulators": "Array of reward accumulator addresses."
        }
      },
      "setGovernor(address)": {
        "params": {
          "_governor": "Address of the new governor."
        }
      },
      "setHistoricalPrices(uint256,address,uint256)": {
        "params": {
          "epochTimestamp": "The timestamp of the epoch",
          "lpToken": "The LP token address",
          "price": "The price to set"
        }
      },
      "setLpTokens(address[])": {
        "params": {
          "_lpTokens": "Array of LP token addresses."
        }
      },
      "setMarketRewardAccumulators(address[],uint8[],address[])": {
        "params": {
          "_marketSides": "Array of market sides.",
          "_markets": "Array of market addresses.",
          "_rewardAccumulators": "Array of reward accumulator addresses."
        }
      },
      "setMaxVotingNum(uint256)": {
        "params": {
          "_maxVotingNum": "Maximum number of votes allowed."
        }
      },
      "setMpo(address)": {
        "params": {
          "_mpo": "Address of the Master Price Oracle."
        }
      },
      "toggleDistributionTimelockAlive(bool)": {
        "params": {
          "_isAlive": "Boolean indicating if the timelock is alive."
        }
      },
      "toggleRewardAccumulatorAlive(address,uint8,bool)": {
        "params": {
          "_isAlive": "Boolean indicating if the reward accumulator is alive.",
          "_market": "Address of the market.",
          "_marketSide": "Side of the market."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "vote(uint256,address[],uint8[],uint256[])": {
        "details": "Can only vote or deposit into a managed NFT once per epoch.      Can only vote for gauges that have not been killed.      Throws if length of _poolVote and _weights do not match.",
        "params": {
          "_marketVoteSide": "Array of market vote sides you are voting for.",
          "_poolVote": "Array of pools you are voting for.",
          "_tokenId": "ID of veNFT you are voting with.",
          "_weights": "Weights of pools."
        }
      },
      "whitelistNFT(uint256,bool)": {
        "details": "Throws if not called by governor.      Throws if already whitelisted.",
        "params": {
          "_bool": "Boolean indicating whitelist status.",
          "_tokenId": "ID of the token."
        }
      },
      "whitelistToken(address,bool)": {
        "details": "Throws if not called by governor.",
        "params": {
          "_bool": "Boolean indicating whitelist status.",
          "_token": "Address of the token."
        }
      }
    },
    "title": "Voter Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyVotedOrDeposited()": [
        {
          "notice": "Error thrown when a user has already voted or deposited."
        }
      ],
      "DistributeWindow()": [
        {
          "notice": "Error thrown when an action is attempted outside the distribution window."
        }
      ],
      "MarketAlreadyExists()": [
        {
          "notice": "Error thrown when a market already exists."
        }
      ],
      "MaximumVotingNumberTooLow()": [
        {
          "notice": "Error thrown when the maximum voting number is too low."
        }
      ],
      "MismatchedArrayLengths()": [
        {
          "notice": "Error thrown when array lengths do not match."
        }
      ],
      "NonZeroVotes()": [
        {
          "notice": "Error thrown when there are non-zero votes."
        }
      ],
      "NotDistributeWindow()": [
        {
          "notice": "Error thrown when an action is attempted outside the distribution window."
        }
      ],
      "NotGovernor()": [
        {
          "notice": "Error thrown when the caller is not the governor."
        }
      ],
      "NotOwner()": [
        {
          "notice": "Error thrown when the caller is not the owner."
        }
      ],
      "NotWhitelistedNFT()": [
        {
          "notice": "Error thrown when an NFT is not whitelisted."
        }
      ],
      "RewardAccumulatorDoesNotExist(address)": [
        {
          "notice": "Error thrown when a reward accumulator does not exist for a given pool."
        }
      ],
      "RewardAccumulatorNotAlive(address)": [
        {
          "notice": "Error thrown when a reward accumulator is not alive."
        }
      ],
      "SameValue()": [
        {
          "notice": "Error thrown when the same value is provided."
        }
      ],
      "TokensArrayEmpty()": [
        {
          "notice": "Error thrown when the tokens array is empty."
        }
      ],
      "TooManyPools()": [
        {
          "notice": "Error thrown when there are too many pools."
        }
      ],
      "UnequalLengths()": [
        {
          "notice": "Error thrown when array lengths are unequal."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Error thrown when an address is zero."
        }
      ],
      "ZeroWeight()": [
        {
          "notice": "Error thrown when the weight is zero."
        }
      ]
    },
    "events": {
      "Abstained(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when a vote is abstained."
      },
      "NotifyReward(address,address,uint256)": {
        "notice": "Event emitted when a reward is notified."
      },
      "Voted(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when a vote is cast."
      },
      "WhitelistNFT(address,uint256,bool)": {
        "notice": "Event emitted when an NFT is whitelisted."
      },
      "WhitelistToken(address,address,bool)": {
        "notice": "Event emitted when a token is whitelisted."
      }
    },
    "kind": "user",
    "methods": {
      "addMarkets((address,uint8)[])": {
        "notice": "Add new markets."
      },
      "baseWeights(uint256,address,uint8,address)": {
        "notice": "Mapping from NFT to Pool to LP Asset to Base Weights"
      },
      "claimBribes(address[],address[][],uint256)": {
        "notice": "Claim bribes for a given NFT."
      },
      "distributeRewards()": {
        "notice": "Distributes rewards to eligible markets."
      },
      "epochNext(uint256)": {
        "notice": "Get the next epoch for a given timestamp."
      },
      "epochStart(uint256)": {
        "notice": "Get the start of the epoch for a given timestamp."
      },
      "epochVoteEnd(uint256)": {
        "notice": "Get the end of the voting period for a given timestamp."
      },
      "epochVoteStart(uint256)": {
        "notice": "Get the start of the voting period for a given timestamp."
      },
      "getAllLpRewardTokens()": {
        "notice": "Get all LP reward tokens."
      },
      "getHistoricalPrice(address,uint256)": {
        "notice": "Gets the historical price for a specific LP token at a given epoch"
      },
      "getVoteDetails(uint256,address)": {
        "notice": "Get vote details for a specific token ID and LP asset."
      },
      "governor()": {
        "notice": "Standard OZ IGovernor using ve for vote weights"
      },
      "historicalPrices(address,uint256)": {
        "notice": "Historical prices for each reward token and epoch"
      },
      "initialize(address[],address,address,address)": {
        "notice": "Initializes the Voter contract with the specified parameters."
      },
      "isAlive(address)": {
        "notice": "Mapping from Reward Accumulator to Liveness status"
      },
      "isWhitelistedNFT(uint256)": {
        "notice": "Mapping from TokenId to Whitelisted status"
      },
      "isWhitelistedToken(address)": {
        "notice": "Mapping from Token to Whitelisted status"
      },
      "lastVoted(uint256)": {
        "notice": "Mapping from NFT to Timestamp of last vote (ensures single vote per epoch)"
      },
      "lpTokens(uint256)": {
        "notice": "List of LP tokens"
      },
      "marketToRewardAccumulators(address,uint8)": {
        "notice": "Mapping from Market to Market Side to Reward Accumulator"
      },
      "marketVote(uint256,address,uint256)": {
        "notice": "Mapping from NFT to List of markets voted for by NFT"
      },
      "marketVoteSide(uint256,address,uint256)": {
        "notice": "Mapping from NFT to List of market vote sides voted for by NFT"
      },
      "markets(uint256)": {
        "notice": "All markets viable for incentives"
      },
      "marketsLength()": {
        "notice": "Get the number of markets."
      },
      "maxVotingNum()": {
        "notice": "Maximum number of markets one voter can vote for at once"
      },
      "mpo()": {
        "notice": "Master Price Oracle instance"
      },
      "poke(uint256)": {
        "notice": "Update voting balances in voting rewards contracts."
      },
      "reset(uint256)": {
        "notice": "Reset voting state. Required if you wish to make changes to veNFT state."
      },
      "rewardAccumulatorToBribe(address)": {
        "notice": "Mapping from Reward Accumulator to Bribes Voting Reward"
      },
      "setBribes(address[],address[])": {
        "notice": "Set bribes for reward accumulators."
      },
      "setGovernor(address)": {
        "notice": "Set a new governor."
      },
      "setHistoricalPrices(uint256,address,uint256)": {
        "notice": "Sets historical prices for LP tokens at specific epochs"
      },
      "setLpTokens(address[])": {
        "notice": "Set the LP tokens."
      },
      "setMarketRewardAccumulators(address[],uint8[],address[])": {
        "notice": "Set reward accumulators for markets."
      },
      "setMaxVotingNum(uint256)": {
        "notice": "Set the maximum number of votes."
      },
      "setMpo(address)": {
        "notice": "Set the Master Price Oracle (MPO) address."
      },
      "toggleDistributionTimelockAlive(bool)": {
        "notice": "Toggle the alive status of a timelock on distributing rewards."
      },
      "toggleRewardAccumulatorAlive(address,uint8,bool)": {
        "notice": "Toggle the alive status of a reward accumulator."
      },
      "totalWeight(address)": {
        "notice": "Total Voting Weights for each address"
      },
      "usedWeights(uint256,address)": {
        "notice": "Mapping from NFT to Total voting weight of NFT"
      },
      "ve()": {
        "notice": "The ve token that governs these contracts"
      },
      "vote(uint256,address[],uint8[],uint256[])": {
        "notice": "Vote for pools. Votes distributed proportionally based on weights."
      },
      "votes(uint256,address,uint8,address)": {
        "notice": "Mapping from NFT to Pool to LP Asset to Votes"
      },
      "weights(address,uint8,address)": {
        "notice": "Mapping from Market to Market Side to LP Asset to weights"
      },
      "whitelistNFT(uint256,bool)": {
        "notice": "Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip."
      },
      "whitelistToken(address,bool)": {
        "notice": "Whitelist (or unwhitelist) token for use in bribes."
      }
    },
    "notice": "This contract allows veION holders to vote for various markets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1946,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19833,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "ve",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 19836,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "rewardToken",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 19839,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "governor",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 19843,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "mpo",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(MasterPriceOracle)19791"
      },
      {
        "astId": 19847,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "lpTokens",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 19852,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "totalWeight",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19855,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "maxVotingNum",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 19864,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "markets",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_struct(Market)23724_storage)dyn_storage"
      },
      {
        "astId": 19869,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "rewardAccumulatorToBribe",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 19879,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "weights",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_mapping(t_enum(MarketSide)23760,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 19891,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "votes",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_enum(MarketSide)23760,t_mapping(t_address,t_uint256))))"
      },
      {
        "astId": 19903,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "baseWeights",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_enum(MarketSide)23760,t_mapping(t_address,t_uint256))))"
      },
      {
        "astId": 19911,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "marketVote",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 19920,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "marketVoteSide",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_enum(MarketSide)23760)dyn_storage))"
      },
      {
        "astId": 19927,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "usedWeights",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 19932,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "lastVoted",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19937,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "isWhitelistedToken",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19942,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "isWhitelistedNFT",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 19947,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "isAlive",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19955,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "marketToRewardAccumulators",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_mapping(t_enum(MarketSide)23760,t_address))"
      },
      {
        "astId": 19957,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "distributionTimelockAlive",
        "offset": 0,
        "slot": "221",
        "type": "t_bool"
      },
      {
        "astId": 19964,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "historicalPrices",
        "offset": 0,
        "slot": "222",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 19966,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "distributor",
        "offset": 0,
        "slot": "223",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(MarketSide)23760)dyn_storage": {
        "base": "t_enum(MarketSide)23760",
        "encoding": "dynamic_array",
        "label": "enum IVoter.MarketSide[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Market)23724_storage)dyn_storage": {
        "base": "t_struct(Market)23724_storage",
        "encoding": "dynamic_array",
        "label": "struct IVoter.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MasterPriceOracle)19791": {
        "encoding": "inplace",
        "label": "contract MasterPriceOracle",
        "numberOfBytes": "20"
      },
      "t_enum(MarketSide)23760": {
        "encoding": "inplace",
        "label": "enum IVoter.MarketSide",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_enum(MarketSide)23760)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IVoter.MarketSide[])",
        "numberOfBytes": "32",
        "value": "t_array(t_enum(MarketSide)23760)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_enum(MarketSide)23760,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum IVoter.MarketSide => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(MarketSide)23760,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_enum(MarketSide)23760,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum IVoter.MarketSide => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(MarketSide)23760,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(MarketSide)23760,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(MarketSide)23760",
        "label": "mapping(enum IVoter.MarketSide => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_enum(MarketSide)23760,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(MarketSide)23760",
        "label": "mapping(enum IVoter.MarketSide => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_enum(MarketSide)23760)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => enum IVoter.MarketSide[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_enum(MarketSide)23760)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_enum(MarketSide)23760,t_mapping(t_address,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(enum IVoter.MarketSide => mapping(address => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_enum(MarketSide)23760,t_mapping(t_address,t_uint256)))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Market)23724_storage": {
        "encoding": "inplace",
        "label": "struct IVoter.Market",
        "members": [
          {
            "astId": 23720,
            "contract": "contracts/veION/Voter.sol:Voter",
            "label": "marketAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23723,
            "contract": "contracts/veION/Voter.sol:Voter",
            "label": "side",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(MarketSide)23760"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}