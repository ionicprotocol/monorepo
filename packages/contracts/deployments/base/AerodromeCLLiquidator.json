{
  "address": "0x47F365445A79C70C083Bdd52bf4127c22131F6da",
  "abi": [
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5ea7b010b438cb5587fff434e2f0ac5301bd1204295ac4147a0cfdfecbbaa98",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0x47F365445A79C70C083Bdd52bf4127c22131F6da",
    "transactionIndex": 131,
    "gasUsed": "463996",
    "logsBloom": "0x
    "blockHash": "0x048bf7b7c14180604bf488a192a2d1f30c5bddfaa85499dcb2ec6c4fd00dfc34",
    "transactionHash": "0xc5ea7b010b438cb5587fff434e2f0ac5301bd1204295ac4147a0cfdfecbbaa98",
    "logs": [],
    "blockNumber": 23523644,
    "cumulativeGasUsed": "24052672",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "b1d3a208e9ee5df80f292e37d189f3c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"redeem(address,uint256,bytes)\":{\"details\":\"Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`\",\"params\":{\"inputAmount\":\"input amount\",\"inputToken\":\"Address of the token\",\"strategyData\":\"context specific data like input token, pool address and tx expiratio period\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidators/AerodromeCLLiquidator.sol\":\"AerodromeCLLiquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return uint256 The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xcea1d290397e1c8eac89c96738e7ec55259a575f878152eeccf33c0cf6d008e5\",\"license\":\"UNLICENSED\"},\"contracts/compound/IERC4626.sol\":{\"content\":\"pragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { EIP20Interface } from \\\"./EIP20Interface.sol\\\";\\n\\ninterface IERC4626 is EIP20Interface {\\n  /*----------------------------------------------------------------\\n                                Events\\n    ----------------------------------------------------------------*/\\n\\n  event Deposit(address indexed from, address indexed to, uint256 value);\\n\\n  event Withdraw(address indexed from, address indexed to, uint256 value);\\n\\n  /*----------------------------------------------------------------\\n                            Mutable Functions\\n    ----------------------------------------------------------------*/\\n\\n  /**\\n      @notice Deposit a specific amount of underlying tokens.\\n      @param underlyingAmount The amount of the underlying token to deposit.\\n      @param to The address to receive shares corresponding to the deposit\\n      @return shares The shares in the vault credited to `to`\\n    */\\n  function deposit(uint256 underlyingAmount, address to) external returns (uint256 shares);\\n\\n  /**\\n      @notice Mint an exact amount of shares for a variable amount of underlying tokens.\\n      @param shareAmount The amount of vault shares to mint.\\n      @param to The address to receive shares corresponding to the mint.\\n      @return underlyingAmount The amount of the underlying tokens deposited from the mint call.\\n    */\\n  function mint(uint256 shareAmount, address to) external returns (uint256 underlyingAmount);\\n\\n  /**\\n      @notice Withdraw a specific amount of underlying tokens.\\n      @param underlyingAmount The amount of the underlying token to withdraw.\\n      @param to The address to receive underlying corresponding to the withdrawal.\\n      @param from The address to burn shares from corresponding to the withdrawal.\\n      @return shares The shares in the vault burned from sender\\n    */\\n  function withdraw(\\n    uint256 underlyingAmount,\\n    address to,\\n    address from\\n  ) external returns (uint256 shares);\\n\\n  /**\\n      @notice Redeem a specific amount of shares for underlying tokens.\\n      @param shareAmount The amount of shares to redeem.\\n      @param to The address to receive underlying corresponding to the redemption.\\n      @param from The address to burn shares from corresponding to the redemption.\\n      @return value The underlying amount transferred to `to`.\\n    */\\n  function redeem(\\n    uint256 shareAmount,\\n    address to,\\n    address from\\n  ) external returns (uint256 value);\\n\\n  /*----------------------------------------------------------------\\n                            View Functions\\n    ----------------------------------------------------------------*/\\n  /** \\n      @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n      @return the address of the asset\\n    */\\n  function asset() external view returns (address);\\n\\n  /** \\n      @notice Returns a user's Vault balance in underlying tokens.\\n      @param user The user to get the underlying balance of.\\n      @return balance The user's Vault balance in underlying tokens.\\n    */\\n  function balanceOfUnderlying(address user) external view returns (uint256 balance);\\n\\n  /** \\n      @notice Calculates the total amount of underlying tokens the Vault manages.\\n      @return The total amount of underlying tokens the Vault manages.\\n    */\\n  function totalAssets() external view returns (uint256);\\n\\n  /** \\n      @notice Returns the value in underlying terms of one vault token. \\n     */\\n  function exchangeRate() external view returns (uint256);\\n\\n  /**\\n      @notice Returns the amount of vault tokens that would be obtained if depositing a given amount of underlying tokens in a `deposit` call.\\n      @param underlyingAmount the input amount of underlying tokens\\n      @return shareAmount the corresponding amount of shares out from a deposit call with `underlyingAmount` in\\n     */\\n  function previewDeposit(uint256 underlyingAmount) external view returns (uint256 shareAmount);\\n\\n  /**\\n      @notice Returns the amount of underlying tokens that would be deposited if minting a given amount of shares in a `mint` call.\\n      @param shareAmount the amount of shares from a mint call.\\n      @return underlyingAmount the amount of underlying tokens corresponding to the mint call\\n     */\\n  function previewMint(uint256 shareAmount) external view returns (uint256 underlyingAmount);\\n\\n  /**\\n      @notice Returns the amount of vault tokens that would be burned if withdrawing a given amount of underlying tokens in a `withdraw` call.\\n      @param underlyingAmount the input amount of underlying tokens\\n      @return shareAmount the corresponding amount of shares out from a withdraw call with `underlyingAmount` in\\n     */\\n  function previewWithdraw(uint256 underlyingAmount) external view returns (uint256 shareAmount);\\n\\n  /**\\n      @notice Returns the amount of underlying tokens that would be obtained if redeeming a given amount of shares in a `redeem` call.\\n      @param shareAmount the amount of shares from a redeem call.\\n      @return underlyingAmount the amount of underlying tokens corresponding to the redeem call\\n     */\\n  function previewRedeem(uint256 shareAmount) external view returns (uint256 underlyingAmount);\\n}\\n\",\"keccak256\":\"0x1dc7b6dc2f1202ca16bff4eb488bb5bfcd6a48202996663a7220a888b261d7cb\"},\"contracts/external/aerodrome/IAerodromeSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.10;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via CL\\ninterface ISwapRouter_Aerodrome {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    int24 tickSpacing;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    int24 tickSpacing;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x165029c47cc275f750f4789b727c944e4b39622b42b0b80f1c97689e203a62e0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/liquidators/AerodromeCLLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IRedemptionStrategy } from \\\"./IRedemptionStrategy.sol\\\";\\nimport { ISwapRouter_Aerodrome } from \\\"../external/aerodrome/IAerodromeSwapRouter.sol\\\";\\n\\nimport { IERC20Upgradeable } from \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { IERC4626 } from \\\"../compound/IERC4626.sol\\\";\\n\\ncontract AerodromeCLLiquidator is IRedemptionStrategy {\\n  /**\\n   * @dev Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`\\n   * @param inputToken Address of the token\\n   * @param inputAmount input amount\\n   * @param strategyData context specific data like input token, pool address and tx expiratio period\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external override returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    return _convert(inputToken, inputAmount, strategyData);\\n  }\\n\\n  function _convert(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) internal returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    (\\n      ,\\n      address _outputToken,\\n      ISwapRouter_Aerodrome swapRouter,\\n      address _unwrappedInput,\\n      address _unwrappedOutput,\\n      int24 _tickSpacing\\n    ) = abi.decode(strategyData, (address, address, ISwapRouter_Aerodrome, address, address, int24));\\n    if (_unwrappedOutput != address(0)) {\\n      outputToken = IERC20Upgradeable(_unwrappedOutput);\\n    } else {\\n      outputToken = IERC20Upgradeable(_outputToken);\\n    }\\n\\n    if (_unwrappedInput != address(0)) {\\n      inputToken.approve(address(inputToken), inputAmount);\\n      inputAmount = IERC4626(address(inputToken)).redeem(inputAmount, address(this), address(this));\\n      inputToken = IERC20Upgradeable(_unwrappedInput);\\n    }\\n\\n    inputToken.approve(address(swapRouter), inputAmount);\\n\\n    outputAmount = swapRouter.exactInputSingle(\\n      ISwapRouter_Aerodrome.ExactInputSingleParams(\\n        address(inputToken),\\n        address(outputToken),\\n        _tickSpacing,\\n        address(this),\\n        block.timestamp,\\n        inputAmount,\\n        0,\\n        0\\n      )\\n    );\\n\\n    if (_unwrappedOutput != address(0)) {\\n      IERC20Upgradeable(_unwrappedOutput).approve(address(_outputToken), outputAmount);\\n      IERC4626(_outputToken).deposit(outputAmount, address(this));\\n      outputAmount = IERC4626(_unwrappedOutput).balanceOf(address(this));\\n      outputToken = IERC20Upgradeable(_outputToken);\\n    }\\n  }\\n\\n  function name() public pure virtual override returns (string memory) {\\n    return \\\"AerodromeCLLiquidator\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x9b962a120a4f79b190f82def9835ab0f74692b3e05ff764ca4ac108c128ae35d\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n\\n  function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4cf72f79d325ed14f3c8d52e013a8d1f8bfe15b59553bbd9dff251761baf60dd\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061076e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007b575b600080fd5b604080518082018252601581527420b2b937b23937b6b2a1a62634b8bab4b230ba37b960591b6020820152905161007291906104a3565b60405180910390f35b61008e610089366004610520565b6100ad565b604080516001600160a01b039093168352602083019190915201610072565b6000806100bb8585856100c7565b91509150935093915050565b6000806000806000806000878060200190518101906100e691906105ed565b939950919750955093509150506001600160a01b0382161561010a5781965061010e565b8496505b6001600160a01b0383161561020e5760405163095ea7b360e01b81526001600160a01b038b1660048201819052602482018b90529063095ea7b3906044016020604051808303816000875af115801561016b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018f919061067b565b50604051635d043b2960e11b8152600481018a9052306024820181905260448201526001600160a01b038b169063ba087652906064016020604051808303816000875af11580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020891906106a4565b98508299505b60405163095ea7b360e01b81526001600160a01b038581166004830152602482018b90528b169063095ea7b3906044016020604051808303816000875af115801561025d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610281919061067b565b5060408051610100810182526001600160a01b038c811682528981166020830152600284900b8284015230606083015242608083015260a082018c9052600060c0830181905260e083015291516350131c1f60e11b81529186169163a026383e916102ee916004016106bd565b6020604051808303816000875af115801561030d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033191906106a4565b95506001600160a01b038216156104965760405163095ea7b360e01b81526001600160a01b0386811660048301526024820188905283169063095ea7b3906044016020604051808303816000875af1158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b5919061067b565b50604051636e553f6560e01b8152600481018790523060248201526001600160a01b03861690636e553f65906044016020604051808303816000875af1158015610403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042791906106a4565b506040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049091906106a4565b95508496505b5050505050935093915050565b60006020808352835180602085015260005b818110156104d1578581018301518582016040015282016104b5565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461050757600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561053557600080fd5b8335610540816104f2565b925060208401359150604084013567ffffffffffffffff8082111561056457600080fd5b818601915086601f83011261057857600080fd5b81358181111561058a5761058a61050a565b604051601f8201601f19908116603f011681019083821181831017156105b2576105b261050a565b816040528281528960208487010111156105cb57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060008060008060c0878903121561060657600080fd5b8651610611816104f2565b6020880151909650610622816104f2565b6040880151909550610633816104f2565b6060880151909450610644816104f2565b6080880151909350610655816104f2565b8092505060a08701518060020b811461066d57600080fd5b809150509295509295509295565b60006020828403121561068d57600080fd5b8151801515811461069d57600080fd5b9392505050565b6000602082840312156106b657600080fd5b5051919050565b60006101008201905060018060a01b03808451168352806020850151166020840152604084015160020b6040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e083015161073160e08401826001600160a01b03169052565b509291505056fea2646970667358221220626a7685305af4b0230fe59fe250cc222f49da91e0d697b4c452348c65c0d12d64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007b575b600080fd5b604080518082018252601581527420b2b937b23937b6b2a1a62634b8bab4b230ba37b960591b6020820152905161007291906104a3565b60405180910390f35b61008e610089366004610520565b6100ad565b604080516001600160a01b039093168352602083019190915201610072565b6000806100bb8585856100c7565b91509150935093915050565b6000806000806000806000878060200190518101906100e691906105ed565b939950919750955093509150506001600160a01b0382161561010a5781965061010e565b8496505b6001600160a01b0383161561020e5760405163095ea7b360e01b81526001600160a01b038b1660048201819052602482018b90529063095ea7b3906044016020604051808303816000875af115801561016b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018f919061067b565b50604051635d043b2960e11b8152600481018a9052306024820181905260448201526001600160a01b038b169063ba087652906064016020604051808303816000875af11580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020891906106a4565b98508299505b60405163095ea7b360e01b81526001600160a01b038581166004830152602482018b90528b169063095ea7b3906044016020604051808303816000875af115801561025d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610281919061067b565b5060408051610100810182526001600160a01b038c811682528981166020830152600284900b8284015230606083015242608083015260a082018c9052600060c0830181905260e083015291516350131c1f60e11b81529186169163a026383e916102ee916004016106bd565b6020604051808303816000875af115801561030d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033191906106a4565b95506001600160a01b038216156104965760405163095ea7b360e01b81526001600160a01b0386811660048301526024820188905283169063095ea7b3906044016020604051808303816000875af1158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b5919061067b565b50604051636e553f6560e01b8152600481018790523060248201526001600160a01b03861690636e553f65906044016020604051808303816000875af1158015610403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042791906106a4565b506040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049091906106a4565b95508496505b5050505050935093915050565b60006020808352835180602085015260005b818110156104d1578581018301518582016040015282016104b5565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461050757600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561053557600080fd5b8335610540816104f2565b925060208401359150604084013567ffffffffffffffff8082111561056457600080fd5b818601915086601f83011261057857600080fd5b81358181111561058a5761058a61050a565b604051601f8201601f19908116603f011681019083821181831017156105b2576105b261050a565b816040528281528960208487010111156105cb57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060008060008060c0878903121561060657600080fd5b8651610611816104f2565b6020880151909650610622816104f2565b6040880151909550610633816104f2565b6060880151909450610644816104f2565b6080880151909350610655816104f2565b8092505060a08701518060020b811461066d57600080fd5b809150509295509295509295565b60006020828403121561068d57600080fd5b8151801515811461069d57600080fd5b9392505050565b6000602082840312156106b657600080fd5b5051919050565b60006101008201905060018060a01b03808451168352806020850151166020840152604084015160020b6040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e083015161073160e08401826001600160a01b03169052565b509291505056fea2646970667358221220626a7685305af4b0230fe59fe250cc222f49da91e0d697b4c452348c65c0d12d64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "redeem(address,uint256,bytes)": {
        "details": "Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`",
        "params": {
          "inputAmount": "input amount",
          "inputToken": "Address of the token",
          "strategyData": "context specific data like input token, pool address and tx expiratio period"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}