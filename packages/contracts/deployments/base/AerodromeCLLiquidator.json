{
  "address": "0xb50De36105F6053006306553AB54e77224818B9B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        }
      ],
      "name": "setTickSpacing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unwrapped",
          "type": "address"
        }
      ],
      "name": "setWrappedToUnwrapped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tickSpacings",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "wrappedToUnwrapped",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd38ffded9120a11a18d7f5caedc07df9bc40cc78fc37adbe2542f17b250c80ef",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0xb50De36105F6053006306553AB54e77224818B9B",
    "transactionIndex": 58,
    "gasUsed": "734310",
    "logsBloom": "0x
    "blockHash": "0xa5af3661921dcc43270a38f86ed552b64dbd8d6a317cfaa1e148601ed1995a44",
    "transactionHash": "0xd38ffded9120a11a18d7f5caedc07df9bc40cc78fc37adbe2542f17b250c80ef",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 20023920,
        "transactionHash": "0xd38ffded9120a11a18d7f5caedc07df9bc40cc78fc37adbe2542f17b250c80ef",
        "address": "0xb50De36105F6053006306553AB54e77224818B9B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001155b614971f16758c92c4890ed338c9e3ede6b7"
        ],
        "data": "0x",
        "logIndex": 105,
        "blockHash": "0xa5af3661921dcc43270a38f86ed552b64dbd8d6a317cfaa1e148601ed1995a44"
      }
    ],
    "blockNumber": 20023920,
    "cumulativeGasUsed": "6120406",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7213ec192c202214aede8bfa6f35fee9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"setTickSpacing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unwrapped\",\"type\":\"address\"}],\"name\":\"setWrappedToUnwrapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tickSpacings\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedToUnwrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"redeem(address,uint256,bytes)\":{\"details\":\"Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`\",\"params\":{\"inputAmount\":\"input amount\",\"inputToken\":\"Address of the token\",\"strategyData\":\"context specific data like input token, pool address and tx expiratio period\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidators/AerodromeCLLiquidator.sol\":\"AerodromeCLLiquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x6adb35bab98e4b2aeafeba8d975dd22db19800b7bb15ec58e4fb78c837eeb054\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/compound/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice Get the total number of tokens in circulation\\n   * @return uint256 The supply of tokens\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Gets the balance of the specified address\\n   * @param owner The address from which the balance will be retrieved\\n   * @return balance uint256 The balance\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param amount The number of tokens to transfer\\n   * @return success bool Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool success);\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param amount The number of tokens that are approved (-1 means infinite)\\n   * @return success bool Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool success);\\n\\n  /**\\n   * @notice Get the current allowance from `owner` for `spender`\\n   * @param owner The address of the account which owns the tokens to be spent\\n   * @param spender The address of the account which may transfer tokens\\n   * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xcea1d290397e1c8eac89c96738e7ec55259a575f878152eeccf33c0cf6d008e5\",\"license\":\"UNLICENSED\"},\"contracts/compound/IERC4626.sol\":{\"content\":\"pragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { EIP20Interface } from \\\"./EIP20Interface.sol\\\";\\n\\ninterface IERC4626 is EIP20Interface {\\n  /*----------------------------------------------------------------\\n                                Events\\n    ----------------------------------------------------------------*/\\n\\n  event Deposit(address indexed from, address indexed to, uint256 value);\\n\\n  event Withdraw(address indexed from, address indexed to, uint256 value);\\n\\n  /*----------------------------------------------------------------\\n                            Mutable Functions\\n    ----------------------------------------------------------------*/\\n\\n  /**\\n      @notice Deposit a specific amount of underlying tokens.\\n      @param underlyingAmount The amount of the underlying token to deposit.\\n      @param to The address to receive shares corresponding to the deposit\\n      @return shares The shares in the vault credited to `to`\\n    */\\n  function deposit(uint256 underlyingAmount, address to) external returns (uint256 shares);\\n\\n  /**\\n      @notice Mint an exact amount of shares for a variable amount of underlying tokens.\\n      @param shareAmount The amount of vault shares to mint.\\n      @param to The address to receive shares corresponding to the mint.\\n      @return underlyingAmount The amount of the underlying tokens deposited from the mint call.\\n    */\\n  function mint(uint256 shareAmount, address to) external returns (uint256 underlyingAmount);\\n\\n  /**\\n      @notice Withdraw a specific amount of underlying tokens.\\n      @param underlyingAmount The amount of the underlying token to withdraw.\\n      @param to The address to receive underlying corresponding to the withdrawal.\\n      @param from The address to burn shares from corresponding to the withdrawal.\\n      @return shares The shares in the vault burned from sender\\n    */\\n  function withdraw(\\n    uint256 underlyingAmount,\\n    address to,\\n    address from\\n  ) external returns (uint256 shares);\\n\\n  /**\\n      @notice Redeem a specific amount of shares for underlying tokens.\\n      @param shareAmount The amount of shares to redeem.\\n      @param to The address to receive underlying corresponding to the redemption.\\n      @param from The address to burn shares from corresponding to the redemption.\\n      @return value The underlying amount transferred to `to`.\\n    */\\n  function redeem(\\n    uint256 shareAmount,\\n    address to,\\n    address from\\n  ) external returns (uint256 value);\\n\\n  /*----------------------------------------------------------------\\n                            View Functions\\n    ----------------------------------------------------------------*/\\n  /** \\n      @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n      @return the address of the asset\\n    */\\n  function asset() external view returns (address);\\n\\n  /** \\n      @notice Returns a user's Vault balance in underlying tokens.\\n      @param user The user to get the underlying balance of.\\n      @return balance The user's Vault balance in underlying tokens.\\n    */\\n  function balanceOfUnderlying(address user) external view returns (uint256 balance);\\n\\n  /** \\n      @notice Calculates the total amount of underlying tokens the Vault manages.\\n      @return The total amount of underlying tokens the Vault manages.\\n    */\\n  function totalAssets() external view returns (uint256);\\n\\n  /** \\n      @notice Returns the value in underlying terms of one vault token. \\n     */\\n  function exchangeRate() external view returns (uint256);\\n\\n  /**\\n      @notice Returns the amount of vault tokens that would be obtained if depositing a given amount of underlying tokens in a `deposit` call.\\n      @param underlyingAmount the input amount of underlying tokens\\n      @return shareAmount the corresponding amount of shares out from a deposit call with `underlyingAmount` in\\n     */\\n  function previewDeposit(uint256 underlyingAmount) external view returns (uint256 shareAmount);\\n\\n  /**\\n      @notice Returns the amount of underlying tokens that would be deposited if minting a given amount of shares in a `mint` call.\\n      @param shareAmount the amount of shares from a mint call.\\n      @return underlyingAmount the amount of underlying tokens corresponding to the mint call\\n     */\\n  function previewMint(uint256 shareAmount) external view returns (uint256 underlyingAmount);\\n\\n  /**\\n      @notice Returns the amount of vault tokens that would be burned if withdrawing a given amount of underlying tokens in a `withdraw` call.\\n      @param underlyingAmount the input amount of underlying tokens\\n      @return shareAmount the corresponding amount of shares out from a withdraw call with `underlyingAmount` in\\n     */\\n  function previewWithdraw(uint256 underlyingAmount) external view returns (uint256 shareAmount);\\n\\n  /**\\n      @notice Returns the amount of underlying tokens that would be obtained if redeeming a given amount of shares in a `redeem` call.\\n      @param shareAmount the amount of shares from a redeem call.\\n      @return underlyingAmount the amount of underlying tokens corresponding to the redeem call\\n     */\\n  function previewRedeem(uint256 shareAmount) external view returns (uint256 underlyingAmount);\\n}\\n\",\"keccak256\":\"0x1dc7b6dc2f1202ca16bff4eb488bb5bfcd6a48202996663a7220a888b261d7cb\"},\"contracts/external/aerodrome/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.10;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via CL\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        int24 tickSpacing;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        int24 tickSpacing;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xa7eda5a6de42a3033e41f62862dff5010360abe467140ece7e87b5f3b38f82a9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/liquidators/AerodromeCLLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IRedemptionStrategy } from \\\"./IRedemptionStrategy.sol\\\";\\nimport { ISwapRouter } from \\\"../external/aerodrome/ISwapRouter.sol\\\";\\n\\nimport { IERC20Upgradeable } from \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { Ownable2Step } from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport { IERC4626 } from \\\"../compound/IERC4626.sol\\\";\\n\\ncontract AerodromeCLLiquidator is IRedemptionStrategy, Ownable2Step {\\n  mapping(address => address) public wrappedToUnwrapped;\\n  mapping(address => mapping(address => int24)) public tickSpacings;\\n\\n  constructor() Ownable2Step() {}\\n\\n  // ADMIN FUNCTIONS\\n  function setWrappedToUnwrapped(address token, address unwrapped) external onlyOwner {\\n    wrappedToUnwrapped[token] = unwrapped;\\n  }\\n\\n  function setTickSpacing(address inputToken, address outputToken, int24 tickSpacing) external onlyOwner {\\n    tickSpacings[inputToken][outputToken] = tickSpacing;\\n    tickSpacings[outputToken][inputToken] = tickSpacing; // allow bidirectional search\\n  }\\n\\n  /**\\n   * @dev Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`\\n   * @param inputToken Address of the token\\n   * @param inputAmount input amount\\n   * @param strategyData context specific data like input token, pool address and tx expiratio period\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external override returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    return _convert(inputToken, inputAmount, strategyData);\\n  }\\n\\n  function _convert(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) internal returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    (, address _outputToken, ISwapRouter swapRouter) = abi.decode(strategyData, (address, address, ISwapRouter));\\n    address _unwrappedOutput = wrappedToUnwrapped[address(_outputToken)];\\n    if (_unwrappedOutput != address(0)) {\\n      outputToken = IERC20Upgradeable(_unwrappedOutput);\\n    } else {\\n      outputToken = IERC20Upgradeable(_outputToken);\\n    }\\n\\n    address _unwrappedInput = wrappedToUnwrapped[address(inputToken)];\\n    if (_unwrappedInput != address(0)) {\\n      inputToken.approve(address(inputToken), inputAmount);\\n      IERC4626(address(inputToken)).redeem(inputAmount, address(this), address(this));\\n      inputToken = IERC20Upgradeable(_unwrappedInput);\\n    }\\n\\n    inputToken.approve(address(swapRouter), inputAmount);\\n\\n    int24 tickSpacing = tickSpacings[address(inputToken)][address(outputToken)];\\n    if (tickSpacing == 0) {\\n      tickSpacing = 1;\\n    }\\n\\n    outputAmount = swapRouter.exactInputSingle(\\n      ISwapRouter.ExactInputSingleParams(\\n        address(inputToken),\\n        address(outputToken),\\n        tickSpacing,\\n        address(this),\\n        block.timestamp,\\n        inputAmount,\\n        0,\\n        0\\n      )\\n    );\\n\\n    if (_unwrappedOutput != address(0)) {\\n      IERC20Upgradeable(_unwrappedOutput).approve(address(_outputToken), outputAmount);\\n      IERC4626(_outputToken).deposit(outputAmount, address(this));\\n      outputAmount = IERC4626(_unwrappedOutput).balanceOf(address(this));\\n      outputToken = IERC20Upgradeable(_outputToken);\\n    }\\n  }\\n\\n  function name() public pure virtual override returns (string memory) {\\n    return \\\"AerodromeCLLiquidator\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x5ca7b9fa718e4cfb9d8857e08c8be2c40cd80ae6cc83cfffec18c278e8709822\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n\\n  function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4cf72f79d325ed14f3c8d52e013a8d1f8bfe15b59553bbd9dff251761baf60dd\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61008b565b600180546001600160a01b03191690556100388161003b565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610bd08061009a6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461014557806391587b8f1461016a578063cb6a471a1461017d578063e30c3978146101be578063e589d6d2146101cf578063f2fde38b146101f857600080fd5b806306fdde03146100ae57806310badf4e146100ee578063715018a61461012057806379ba50971461012a5780638a19065714610132575b600080fd5b604080518082018252601581527420b2b937b23937b6b2a1a62634b8bab4b230ba37b960591b602082015290516100e591906108ac565b60405180910390f35b6101016100fc366004610926565b61020b565b604080516001600160a01b0390931683526020830191909152016100e5565b610128610225565b005b610128610239565b6101286101403660046109f3565b6102b8565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100e5565b610128610178366004610a45565b61031b565b6101ab61018b366004610a45565b600360209081526000928352604080842090915290825290205460020b81565b60405160029190910b81526020016100e5565b6001546001600160a01b0316610152565b6101526101dd366004610a7e565b6002602052600090815260409020546001600160a01b031681565b610128610206366004610a7e565b610351565b6000806102198585856103c2565b91509150935093915050565b61022d6107ee565b6102376000610848565b565b60015433906001600160a01b031681146102ac5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6102b581610848565b50565b6102c06107ee565b6001600160a01b039283166000818152600360208181526040808420969097168352948552858220805462ffffff90951662ffffff199586168117909155908552858220928252919093529290912080549091169091179055565b6103236107ee565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b6103596107ee565b600180546001600160a01b0383166001600160a01b0319909116811790915561038a6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080600080848060200190518101906103dc9190610aa2565b6001600160a01b03808316600090815260026020526040902054929550909350169050801561040d57809450610411565b8294505b6001600160a01b038089166000908152600260205260409020541680156105225760405163095ea7b360e01b81526001600160a01b038a1660048201819052602482018a90529063095ea7b3906044016020604051808303816000875af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610ae4565b50604051635d043b2960e11b815260048101899052306024820181905260448201526001600160a01b038a169063ba087652906064016020604051808303816000875af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190610b06565b508098505b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018a90528a169063095ea7b3906044016020604051808303816000875af1158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610ae4565b506001600160a01b03808a166000908152600360209081526040808320938a1683529290529081205460020b908190036105cd575060015b60408051610100810182526001600160a01b038c811682528981166020830152600284900b8284015230606083015242608083015260a082018c9052600060c0830181905260e083015291516350131c1f60e11b81529186169163a026383e9161063991600401610b1f565b6020604051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610b06565b95506001600160a01b038316156107e15760405163095ea7b360e01b81526001600160a01b0386811660048301526024820188905284169063095ea7b3906044016020604051808303816000875af11580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190610ae4565b50604051636e553f6560e01b8152600481018790523060248201526001600160a01b03861690636e553f65906044016020604051808303816000875af115801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610b06565b506040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa1580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db9190610b06565b95508496505b5050505050935093915050565b6000546001600160a01b031633146102375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a3565b600180546001600160a01b03191690556102b581600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020808352835180602085015260005b818110156108da578581018301518582016040015282016108be565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146102b557600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561093b57600080fd5b8335610946816108fb565b925060208401359150604084013567ffffffffffffffff8082111561096a57600080fd5b818601915086601f83011261097e57600080fd5b81358181111561099057610990610910565b604051601f8201601f19908116603f011681019083821181831017156109b8576109b8610910565b816040528281528960208487010111156109d157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080600060608486031215610a0857600080fd5b8335610a13816108fb565b92506020840135610a23816108fb565b91506040840135600281900b8114610a3a57600080fd5b809150509250925092565b60008060408385031215610a5857600080fd5b8235610a63816108fb565b91506020830135610a73816108fb565b809150509250929050565b600060208284031215610a9057600080fd5b8135610a9b816108fb565b9392505050565b600080600060608486031215610ab757600080fd5b8351610ac2816108fb565b6020850151909350610ad3816108fb565b6040850151909250610a3a816108fb565b600060208284031215610af657600080fd5b81518015158114610a9b57600080fd5b600060208284031215610b1857600080fd5b5051919050565b60006101008201905060018060a01b03808451168352806020850151166020840152604084015160020b6040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e0830151610b9360e08401826001600160a01b03169052565b509291505056fea26469706673582212205401650b7d8e7804768776a53c6467ec0ec3b367aa9c9fd3dd80ab53892bd7bf64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461014557806391587b8f1461016a578063cb6a471a1461017d578063e30c3978146101be578063e589d6d2146101cf578063f2fde38b146101f857600080fd5b806306fdde03146100ae57806310badf4e146100ee578063715018a61461012057806379ba50971461012a5780638a19065714610132575b600080fd5b604080518082018252601581527420b2b937b23937b6b2a1a62634b8bab4b230ba37b960591b602082015290516100e591906108ac565b60405180910390f35b6101016100fc366004610926565b61020b565b604080516001600160a01b0390931683526020830191909152016100e5565b610128610225565b005b610128610239565b6101286101403660046109f3565b6102b8565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100e5565b610128610178366004610a45565b61031b565b6101ab61018b366004610a45565b600360209081526000928352604080842090915290825290205460020b81565b60405160029190910b81526020016100e5565b6001546001600160a01b0316610152565b6101526101dd366004610a7e565b6002602052600090815260409020546001600160a01b031681565b610128610206366004610a7e565b610351565b6000806102198585856103c2565b91509150935093915050565b61022d6107ee565b6102376000610848565b565b60015433906001600160a01b031681146102ac5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6102b581610848565b50565b6102c06107ee565b6001600160a01b039283166000818152600360208181526040808420969097168352948552858220805462ffffff90951662ffffff199586168117909155908552858220928252919093529290912080549091169091179055565b6103236107ee565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b6103596107ee565b600180546001600160a01b0383166001600160a01b0319909116811790915561038a6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080600080848060200190518101906103dc9190610aa2565b6001600160a01b03808316600090815260026020526040902054929550909350169050801561040d57809450610411565b8294505b6001600160a01b038089166000908152600260205260409020541680156105225760405163095ea7b360e01b81526001600160a01b038a1660048201819052602482018a90529063095ea7b3906044016020604051808303816000875af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a49190610ae4565b50604051635d043b2960e11b815260048101899052306024820181905260448201526001600160a01b038a169063ba087652906064016020604051808303816000875af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190610b06565b508098505b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018a90528a169063095ea7b3906044016020604051808303816000875af1158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610ae4565b506001600160a01b03808a166000908152600360209081526040808320938a1683529290529081205460020b908190036105cd575060015b60408051610100810182526001600160a01b038c811682528981166020830152600284900b8284015230606083015242608083015260a082018c9052600060c0830181905260e083015291516350131c1f60e11b81529186169163a026383e9161063991600401610b1f565b6020604051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190610b06565b95506001600160a01b038316156107e15760405163095ea7b360e01b81526001600160a01b0386811660048301526024820188905284169063095ea7b3906044016020604051808303816000875af11580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190610ae4565b50604051636e553f6560e01b8152600481018790523060248201526001600160a01b03861690636e553f65906044016020604051808303816000875af115801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610b06565b506040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa1580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db9190610b06565b95508496505b5050505050935093915050565b6000546001600160a01b031633146102375760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a3565b600180546001600160a01b03191690556102b581600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020808352835180602085015260005b818110156108da578581018301518582016040015282016108be565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146102b557600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561093b57600080fd5b8335610946816108fb565b925060208401359150604084013567ffffffffffffffff8082111561096a57600080fd5b818601915086601f83011261097e57600080fd5b81358181111561099057610990610910565b604051601f8201601f19908116603f011681019083821181831017156109b8576109b8610910565b816040528281528960208487010111156109d157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080600060608486031215610a0857600080fd5b8335610a13816108fb565b92506020840135610a23816108fb565b91506040840135600281900b8114610a3a57600080fd5b809150509250925092565b60008060408385031215610a5857600080fd5b8235610a63816108fb565b91506020830135610a73816108fb565b809150509250929050565b600060208284031215610a9057600080fd5b8135610a9b816108fb565b9392505050565b600080600060608486031215610ab757600080fd5b8351610ac2816108fb565b6020850151909350610ad3816108fb565b6040850151909250610a3a816108fb565b600060208284031215610af657600080fd5b81518015158114610a9b57600080fd5b600060208284031215610b1857600080fd5b5051919050565b60006101008201905060018060a01b03808451168352806020850151166020840152604084015160020b6040840152806060850151166060840152506080830151608083015260a083015160a083015260c083015160c083015260e0830151610b9360e08401826001600160a01b03169052565b509291505056fea26469706673582212205401650b7d8e7804768776a53c6467ec0ec3b367aa9c9fd3dd80ab53892bd7bf64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "redeem(address,uint256,bytes)": {
        "details": "Redeems `inputToken` for `outputToken` where `inputAmount` < `outputAmount`",
        "params": {
          "inputAmount": "input amount",
          "inputToken": "Address of the token",
          "strategyData": "context specific data like input token, pool address and tx expiratio period"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/liquidators/AerodromeCLLiquidator.sol:AerodromeCLLiquidator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/liquidators/AerodromeCLLiquidator.sol:AerodromeCLLiquidator",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 46300,
        "contract": "contracts/liquidators/AerodromeCLLiquidator.sol:AerodromeCLLiquidator",
        "label": "wrappedToUnwrapped",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 46306,
        "contract": "contracts/liquidators/AerodromeCLLiquidator.sol:AerodromeCLLiquidator",
        "label": "tickSpacings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_int24))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_int24)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int24)",
        "numberOfBytes": "32",
        "value": "t_int24"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int24))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int24))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int24)"
      }
    }
  }
}