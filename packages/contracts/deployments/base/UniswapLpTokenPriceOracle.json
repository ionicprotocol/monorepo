{
  "address": "0x9E9A8929d84c5305431067b454E3d64AeaE97d30",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wtoken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICErc20",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wtoken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b1ad5eb60699900a1af85b5340fa4ef1648b1ea1b3bb3a957f486a9b9e9945e",
  "receipt": {
    "to": null,
    "from": "0x7d922bf0975424b3371074f54cC784AF738Dac0D",
    "contractAddress": "0x9E9A8929d84c5305431067b454E3d64AeaE97d30",
    "transactionIndex": 121,
    "gasUsed": "687023",
    "logsBloom": "0x
    "blockHash": "0xecc124e41754d91f6414269e79693109c5299875c59ea2c8c2b77dfefa344476",
    "transactionHash": "0x5b1ad5eb60699900a1af85b5340fa4ef1648b1ea1b3bb3a957f486a9b9e9945e",
    "logs": [],
    "blockNumber": 25339273,
    "cumulativeGasUsed": "26382771",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "45f0b15c2bee629a65f4db9a99627418",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wtoken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract ICErc20\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lucid <david@rari.capital> (https://github.com/davidlucid)\",\"details\":\"Implements the `PriceOracle` interface used by Ionic pools (and Compound v2).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Fetches the fair LP token/ETH price from Uniswap, with 18 decimals of precision.\"},\"getUnderlyingPrice(address)\":{\"params\":{\"cToken\":\"The cToken to get the underlying price of\"},\"returns\":{\"_0\":\"The underlying asset price mantissa (scaled by 1e18).  Zero means the price is unavailable.\"}},\"price(address)\":{\"params\":{\"underlying\":\"The underlying asset to get the price of.\"},\"returns\":{\"_0\":\"The underlying asset price in ETH as a mantissa (scaled by 1e18). Zero means the price is unavailable.\"}}},\"title\":\"UniswapLpTokenPriceOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken asset\"},\"price(address)\":{\"notice\":\"Get the price of an underlying asset.\"}},\"notice\":\"UniswapLpTokenPriceOracle is a price oracle for Uniswap (and SushiSwap) LP tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/default/UniswapLpTokenPriceOracle.sol\":\"UniswapLpTokenPriceOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal onlyInitializing {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xcf4a2c2c1a8b1570ee9a7059c218de1efbc9050239b1111dcfc24081391d11b7\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized < type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4603e2f1403e437820665af135e9675c80e81aa005e360318b8e640ca2624658\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20Upgradeable.sol\\\";\\r\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        __ERC20_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\r\\n            // decrementing then incrementing.\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[45] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x1d80b4eeb5e280428128cb596c2fe266a305be12afe34e04f8f1841e3a45f677\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x56492cd2e84fdbc5f39c722ebdbf4ec02a262ac026fdc40f2ad2eb0cda0c76b9\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c08bea8e975fa8e5e635a7753a9442b3d58f501c3a9951df8eb45581054228d\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\r\\n * proxy whose upgrades are fully controlled by the current implementation.\\r\\n */\\r\\ninterface IERC1822Proxiable {\\r\\n    /**\\r\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\r\\n     * address.\\r\\n     *\\r\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\r\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\r\\n     * function revert if invoked through a proxy.\\r\\n     */\\r\\n    function proxiableUUID() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xe768c5863db91751a70d25c9dac899ec5078c6bacfbc02878652e454aa416b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../Proxy.sol\\\";\\r\\nimport \\\"./ERC1967Upgrade.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\r\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\r\\n * implementation behind the proxy.\\r\\n */\\r\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\r\\n    /**\\r\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\r\\n     *\\r\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\r\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\r\\n     */\\r\\n    constructor(address _logic, bytes memory _data) payable {\\r\\n        _upgradeToAndCall(_logic, _data, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _implementation() internal view virtual override returns (address impl) {\\r\\n        return ERC1967Upgrade._getImplementation();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xca719d0df6d77207f38b638f8e5e85df03434b47a1045b5b686a36df9bea601f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../beacon/IBeacon.sol\\\";\\r\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\nimport \\\"../../utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides getters and event emitting update functions for\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n *\\r\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\r\\n */\\r\\nabstract contract ERC1967Upgrade {\\r\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\r\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation address.\\r\\n     */\\r\\n    function _getImplementation() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeTo(address newImplementation) internal {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade with additional setup call.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCall(\\r\\n        address newImplementation,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        _upgradeTo(newImplementation);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(newImplementation, data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\r\\n     *\\r\\n     * Emits an {Upgraded} event.\\r\\n     */\\r\\n    function _upgradeToAndCallUUPS(\\r\\n        address newImplementation,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\r\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\r\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\r\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\r\\n            _setImplementation(newImplementation);\\r\\n        } else {\\r\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\r\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\r\\n            } catch {\\r\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\r\\n            }\\r\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the admin of the contract.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the admin account has changed.\\r\\n     */\\r\\n    event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     */\\r\\n    function _getAdmin() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new address in the EIP1967 admin slot.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) private {\\r\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\r\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {AdminChanged} event.\\r\\n     */\\r\\n    function _changeAdmin(address newAdmin) internal {\\r\\n        emit AdminChanged(_getAdmin(), newAdmin);\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\r\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the beacon is upgraded.\\r\\n     */\\r\\n    event BeaconUpgraded(address indexed beacon);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current beacon.\\r\\n     */\\r\\n    function _getBeacon() internal view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\r\\n     */\\r\\n    function _setBeacon(address newBeacon) private {\\r\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\r\\n        require(\\r\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\r\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\r\\n        );\\r\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\r\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\r\\n     *\\r\\n     * Emits a {BeaconUpgraded} event.\\r\\n     */\\r\\n    function _upgradeBeaconToAndCall(\\r\\n        address newBeacon,\\r\\n        bytes memory data,\\r\\n        bool forceCall\\r\\n    ) internal {\\r\\n        _setBeacon(newBeacon);\\r\\n        emit BeaconUpgraded(newBeacon);\\r\\n        if (data.length > 0 || forceCall) {\\r\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb9b4ac05179724cbcb7621bdab336a09eb32d07e07b425e0216263ad80388145\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n    /**\\r\\n     * @dev Delegates the current call to `implementation`.\\r\\n     *\\r\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _delegate(address implementation) internal virtual {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\r\\n     * and {_fallback} should delegate.\\r\\n     */\\r\\n    function _implementation() internal view virtual returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n     *\\r\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n     */\\r\\n    function _fallback() internal virtual {\\r\\n        _beforeFallback();\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n     * function in the contract matches the call data.\\r\\n     */\\r\\n    fallback() external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\r\\n     * is empty.\\r\\n     */\\r\\n    receive() external payable virtual {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\r\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\r\\n     *\\r\\n     * If overridden should call `super._beforeFallback()`.\\r\\n     */\\r\\n    function _beforeFallback() internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x62c6b919abeeb4c9146ffbb325fc03b5f2d55a29b8e719b8ff62daab48123565\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {BeaconProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xd3effc3ce6d1c85e1aae2ba5c6f28434c2eef52e1fc48b15096a176dcfee5853\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\r\\n *\\r\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\r\\n * clashing], which can potentially be used in an attack, this contract uses the\\r\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\r\\n * things that go hand in hand:\\r\\n *\\r\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\r\\n * that call matches one of the admin functions exposed by the proxy itself.\\r\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\r\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\r\\n * \\\"admin cannot fallback to proxy target\\\".\\r\\n *\\r\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\r\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\r\\n * to sudden errors when trying to call a function from the proxy implementation.\\r\\n *\\r\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\r\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\r\\n */\\r\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\r\\n    /**\\r\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\r\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\r\\n     */\\r\\n    constructor(\\r\\n        address _logic,\\r\\n        address admin_,\\r\\n        bytes memory _data\\r\\n    ) payable ERC1967Proxy(_logic, _data) {\\r\\n        _changeAdmin(admin_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\r\\n     */\\r\\n    modifier ifAdmin() {\\r\\n        if (msg.sender == _getAdmin()) {\\r\\n            _;\\r\\n        } else {\\r\\n            _fallback();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\r\\n     */\\r\\n    function admin() external ifAdmin returns (address admin_) {\\r\\n        admin_ = _getAdmin();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\r\\n     *\\r\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\r\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\r\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\r\\n     */\\r\\n    function implementation() external ifAdmin returns (address implementation_) {\\r\\n        implementation_ = _implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     *\\r\\n     * Emits an {AdminChanged} event.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\r\\n     */\\r\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\r\\n        _changeAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) external ifAdmin {\\r\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\r\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\r\\n     * proxied contract.\\r\\n     *\\r\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\r\\n        _upgradeToAndCall(newImplementation, data, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current admin.\\r\\n     */\\r\\n    function _admin() internal view virtual returns (address) {\\r\\n        return _getAdmin();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\r\\n     */\\r\\n    function _beforeFallback() internal virtual override {\\r\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\r\\n        super._beforeFallback();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf2ec94f608eee8e1531e5210bc67bf8f3b3c28e0a7d7e6f65342d08809548ff1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7ed49cc8c6b941c4b0f07556eef72cedbce73d60c79d54cc82f6bbe7e061fb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n     */\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb61a2a836d1e25029f013b03fa606fb6bcea10a9cc93ee2eb85d47b389d18c74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n *\\r\\n * [WARNING]\\r\\n * ====\\r\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\r\\n * unusable.\\r\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\r\\n *\\r\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\r\\n * array of EnumerableSet.\\r\\n * ====\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastValue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastValue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        bytes32[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d88c669dab804dbc1aa5d683fd9ef598c9a820df114785571d1e2cbe54a7fc9\",\"license\":\"MIT\"},\"adrastia-periphery/rates/IHistoricalRates.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./RateLibrary.sol\\\";\\n\\n/**\\n * @title IHistoricalRates\\n * @notice An interface that defines a contract that stores historical rates.\\n */\\ninterface IHistoricalRates {\\n    /// @notice Gets an rate for a token at a specific index.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param index The index of the rate to get, where index 0 contains the latest rate, and the last\\n    ///   index contains the oldest rate (uses reverse chronological ordering).\\n    /// @return rate The rate for the token at the specified index.\\n    function getRateAt(address token, uint256 index) external view returns (RateLibrary.Rate memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(address token, uint256 amount) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @param offset The index of the first rate to get (default: 0).\\n    /// @param increment The increment between rates to get (default: 1).\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the number of rates for a token.\\n    /// @param token The address of the token to get the number of rates for.\\n    /// @return count The number of rates for the token.\\n    function getRatesCount(address token) external view returns (uint256);\\n\\n    /// @notice Gets the capacity of rates for a token.\\n    /// @param token The address of the token to get the capacity of rates for.\\n    /// @return capacity The capacity of rates for the token.\\n    function getRatesCapacity(address token) external view returns (uint256);\\n\\n    /// @notice Sets the capacity of rates for a token.\\n    /// @param token The address of the token to set the capacity of rates for.\\n    /// @param amount The new capacity of rates for the token.\\n    function setRatesCapacity(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2754968c368df628f1ed00c2016b1a73f0f9b44f29e48d405887ad108723b3af\",\"license\":\"MIT\"},\"adrastia-periphery/rates/RateLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary RateLibrary {\\n    struct Rate {\\n        uint64 target;\\n        uint64 current;\\n        uint32 timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x397b79cf9f183afa76db3c8d10cffb408e31ba154900f671a7e93c071bacbff4\",\"license\":\"MIT\"},\"contracts/adrastia/PrudentiaLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nlibrary PrudentiaLib {\\r\\n  struct PrudentiaConfig {\\r\\n    address controller; // Adrastia Prudentia controller address\\r\\n    uint8 offset; // Offset for delayed rate activation\\r\\n    int8 decimalShift; // Positive values scale the rate up (in powers of 10), negative values scale the rate down\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x73ceb0717c7795db9d43c13e729e7f76e1cab444d845fc9897a34b8bf7909096\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { IonicComptroller } from \\\"./ComptrollerInterface.sol\\\";\\r\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\r\\nimport { ComptrollerV3Storage } from \\\"./ComptrollerStorage.sol\\\";\\r\\nimport { AddressesProvider } from \\\"../ionic/AddressesProvider.sol\\\";\\r\\n\\r\\nabstract contract CTokenAdminStorage {\\r\\n  /*\\r\\n   * Administrator for Ionic\\r\\n   */\\r\\n  address payable public ionicAdmin;\\r\\n}\\r\\n\\r\\nabstract contract CErc20Storage is CTokenAdminStorage {\\r\\n  /**\\r\\n   * @dev Guard variable for re-entrancy checks\\r\\n   */\\r\\n  bool internal _notEntered;\\r\\n\\r\\n  /**\\r\\n   * @notice EIP-20 token name for this token\\r\\n   */\\r\\n  string public name;\\r\\n\\r\\n  /**\\r\\n   * @notice EIP-20 token symbol for this token\\r\\n   */\\r\\n  string public symbol;\\r\\n\\r\\n  /**\\r\\n   * @notice EIP-20 token decimals for this token\\r\\n   */\\r\\n  uint8 public decimals;\\r\\n\\r\\n  /*\\r\\n   * Maximum borrow rate that can ever be applied (.0005% / block)\\r\\n   */\\r\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\r\\n\\r\\n  /*\\r\\n   * Maximum fraction of interest that can be set aside for reserves + fees\\r\\n   */\\r\\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\r\\n\\r\\n  /**\\r\\n   * @notice Contract which oversees inter-cToken operations\\r\\n   */\\r\\n  IonicComptroller public comptroller;\\r\\n\\r\\n  /**\\r\\n   * @notice Model which tells what the current interest rate should be\\r\\n   */\\r\\n  InterestRateModel public interestRateModel;\\r\\n\\r\\n  /*\\r\\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\r\\n   */\\r\\n  uint256 internal initialExchangeRateMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Fraction of interest currently set aside for admin fees\\r\\n   */\\r\\n  uint256 public adminFeeMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Fraction of interest currently set aside for Ionic fees\\r\\n   */\\r\\n  uint256 public ionicFeeMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Fraction of interest currently set aside for reserves\\r\\n   */\\r\\n  uint256 public reserveFactorMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Block number that interest was last accrued at\\r\\n   */\\r\\n  uint256 public accrualBlockNumber;\\r\\n\\r\\n  /**\\r\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\r\\n   */\\r\\n  uint256 public borrowIndex;\\r\\n\\r\\n  /**\\r\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\r\\n   */\\r\\n  uint256 public totalBorrows;\\r\\n\\r\\n  /**\\r\\n   * @notice Total amount of reserves of the underlying held in this market\\r\\n   */\\r\\n  uint256 public totalReserves;\\r\\n\\r\\n  /**\\r\\n   * @notice Total amount of admin fees of the underlying held in this market\\r\\n   */\\r\\n  uint256 public totalAdminFees;\\r\\n\\r\\n  /**\\r\\n   * @notice Total amount of Ionic fees of the underlying held in this market\\r\\n   */\\r\\n  uint256 public totalIonicFees;\\r\\n\\r\\n  /**\\r\\n   * @notice Total number of tokens in circulation\\r\\n   */\\r\\n  uint256 public totalSupply;\\r\\n\\r\\n  /*\\r\\n   * Official record of token balances for each account\\r\\n   */\\r\\n  mapping(address => uint256) internal accountTokens;\\r\\n\\r\\n  /*\\r\\n   * Approved token transfer amounts on behalf of others\\r\\n   */\\r\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\r\\n\\r\\n  /**\\r\\n   * @notice Container for borrow balance information\\r\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\r\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\r\\n   */\\r\\n  struct BorrowSnapshot {\\r\\n    uint256 principal;\\r\\n    uint256 interestIndex;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * Mapping of account addresses to outstanding borrow balances\\r\\n   */\\r\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\r\\n\\r\\n  /*\\r\\n   * Share of seized collateral that is added to reserves\\r\\n   */\\r\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\r\\n\\r\\n  /*\\r\\n   * Share of seized collateral taken as fees\\r\\n   */\\r\\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\\r\\n\\r\\n  /**\\r\\n   * @notice Underlying asset for this CToken\\r\\n   */\\r\\n  address public underlying;\\r\\n\\r\\n  /**\\r\\n   * @notice Addresses Provider\\r\\n   */\\r\\n  AddressesProvider public ap;\\r\\n}\\r\\n\\r\\nabstract contract CTokenBaseEvents {\\r\\n  /* ERC20 */\\r\\n\\r\\n  /**\\r\\n   * @notice EIP20 Transfer event\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  /*** Admin Events ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when interestRateModel is changed\\r\\n   */\\r\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the reserve factor is changed\\r\\n   */\\r\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the admin fee is changed\\r\\n   */\\r\\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the Ionic fee is changed\\r\\n   */\\r\\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\\r\\n\\r\\n  /**\\r\\n   * @notice EIP20 Approval event\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when interest is accrued\\r\\n   */\\r\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\r\\n}\\r\\n\\r\\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\\r\\n  event Flash(address receiver, uint256 amount);\\r\\n}\\r\\n\\r\\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\\r\\n  /*** Market Events ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when tokens are minted\\r\\n   */\\r\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when tokens are redeemed\\r\\n   */\\r\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when underlying is borrowed\\r\\n   */\\r\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a borrow is repaid\\r\\n   */\\r\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a borrow is liquidated\\r\\n   */\\r\\n  event LiquidateBorrow(\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 repayAmount,\\r\\n    address cTokenCollateral,\\r\\n    uint256 seizeTokens\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the reserves are added\\r\\n   */\\r\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when the reserves are reduced\\r\\n   */\\r\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\r\\n}\\r\\n\\r\\ninterface CTokenFirstExtensionInterface {\\r\\n  /*** User Interface ***/\\r\\n\\r\\n  function transfer(address dst, uint256 amount) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address src,\\r\\n    address dst,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  /*** Admin Functions ***/\\r\\n\\r\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\r\\n\\r\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\\r\\n\\r\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\\r\\n\\r\\n  function getAccountSnapshot(address account)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256,\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  function borrowRatePerBlock() external view returns (uint256);\\r\\n\\r\\n  function supplyRatePerBlock() external view returns (uint256);\\r\\n\\r\\n  function exchangeRateCurrent() external view returns (uint256);\\r\\n\\r\\n  function accrueInterest() external returns (uint256);\\r\\n\\r\\n  function totalBorrowsCurrent() external view returns (uint256);\\r\\n\\r\\n  function borrowBalanceCurrent(address account) external view returns (uint256);\\r\\n\\r\\n  function getTotalUnderlyingSupplied() external view returns (uint256);\\r\\n\\r\\n  function balanceOfUnderlying(address owner) external view returns (uint256);\\r\\n\\r\\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\r\\n\\r\\n  function flash(uint256 amount, bytes calldata data) external;\\r\\n\\r\\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\\r\\n\\r\\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\\r\\n\\r\\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\\r\\n\\r\\n  function registerInSFS() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface CTokenSecondExtensionInterface {\\r\\n  function mint(uint256 mintAmount) external returns (uint256);\\r\\n\\r\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\r\\n\\r\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\r\\n\\r\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\r\\n\\r\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\r\\n\\r\\n  function liquidateBorrow(\\r\\n    address borrower,\\r\\n    uint256 repayAmount,\\r\\n    address cTokenCollateral\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function getCash() external view returns (uint256);\\r\\n\\r\\n  function seize(\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 seizeTokens\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /*** Admin Functions ***/\\r\\n\\r\\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\\r\\n\\r\\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\\r\\n\\r\\n  function selfTransferOut(address to, uint256 amount) external;\\r\\n\\r\\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface CDelegatorInterface {\\r\\n  function implementation() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Called by the admin to update the implementation of the delegator\\r\\n   * @param implementation_ The address of the new implementation for delegation\\r\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\r\\n   */\\r\\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev upgrades the implementation if necessary\\r\\n   */\\r\\n  function _upgrade() external;\\r\\n}\\r\\n\\r\\ninterface CDelegateInterface {\\r\\n  /**\\r\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\r\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\r\\n   * @param data The encoded bytes data for any initialization\\r\\n   */\\r\\n  function _becomeImplementation(bytes calldata data) external;\\r\\n\\r\\n  function delegateType() external pure returns (uint8);\\r\\n\\r\\n  function contractType() external pure returns (string memory);\\r\\n}\\r\\n\\r\\nabstract contract CErc20AdminBase is CErc20Storage {\\r\\n  /**\\r\\n   * @notice Returns a boolean indicating if the sender has admin rights\\r\\n   */\\r\\n  function hasAdminRights() internal view returns (bool) {\\r\\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\r\\n    return\\r\\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\\r\\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract CErc20FirstExtensionBase is\\r\\n  CErc20AdminBase,\\r\\n  CTokenFirstExtensionEvents,\\r\\n  CTokenFirstExtensionInterface\\r\\n{}\\r\\n\\r\\nabstract contract CTokenSecondExtensionBase is\\r\\n  CErc20AdminBase,\\r\\n  CTokenSecondExtensionEvents,\\r\\n  CTokenSecondExtensionInterface,\\r\\n  CDelegateInterface\\r\\n{}\\r\\n\\r\\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\\r\\n\\r\\ninterface CErc20StorageInterface {\\r\\n  function admin() external view returns (address);\\r\\n\\r\\n  function adminHasRights() external view returns (bool);\\r\\n\\r\\n  function ionicAdmin() external view returns (address);\\r\\n\\r\\n  function ionicAdminHasRights() external view returns (bool);\\r\\n\\r\\n  function comptroller() external view returns (IonicComptroller);\\r\\n\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function adminFeeMantissa() external view returns (uint256);\\r\\n\\r\\n  function ionicFeeMantissa() external view returns (uint256);\\r\\n\\r\\n  function reserveFactorMantissa() external view returns (uint256);\\r\\n\\r\\n  function protocolSeizeShareMantissa() external view returns (uint256);\\r\\n\\r\\n  function feeSeizeShareMantissa() external view returns (uint256);\\r\\n\\r\\n  function totalReserves() external view returns (uint256);\\r\\n\\r\\n  function totalAdminFees() external view returns (uint256);\\r\\n\\r\\n  function totalIonicFees() external view returns (uint256);\\r\\n\\r\\n  function totalBorrows() external view returns (uint256);\\r\\n\\r\\n  function accrualBlockNumber() external view returns (uint256);\\r\\n\\r\\n  function underlying() external view returns (address);\\r\\n\\r\\n  function borrowIndex() external view returns (uint256);\\r\\n\\r\\n  function interestRateModel() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\\r\\n  function plugin() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\\r\\n  function approve(address, address) external;\\r\\n}\\r\\n\\r\\ninterface ICErc20 is\\r\\n  CErc20StorageInterface,\\r\\n  CTokenSecondExtensionInterface,\\r\\n  CTokenFirstExtensionInterface,\\r\\n  CDelegatorInterface,\\r\\n  CDelegateInterface\\r\\n{}\\r\\n\\r\\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\\r\\n  function _updatePlugin(address _plugin) external;\\r\\n}\\r\\n\\r\\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\\r\\n\",\"keccak256\":\"0x0642087477a50c5af1ad37b99f1d6c5e680b40236f62e15758887244c94d3e26\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { BasePriceOracle } from \\\"../oracles/BasePriceOracle.sol\\\";\\r\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\r\\nimport { DiamondExtension } from \\\"../ionic/DiamondExtension.sol\\\";\\r\\nimport { ComptrollerV4Storage } from \\\"../compound/ComptrollerStorage.sol\\\";\\r\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\r\\nimport { IHistoricalRates } from \\\"adrastia-periphery/rates/IHistoricalRates.sol\\\";\\r\\n\\r\\ninterface ComptrollerInterface {\\r\\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\\r\\n\\r\\n  function _becomeImplementation() external;\\r\\n\\r\\n  function _deployMarket(\\r\\n    uint8 delegateType,\\r\\n    bytes memory constructorData,\\r\\n    bytes calldata becomeImplData,\\r\\n    uint256 collateralFactorMantissa\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\\r\\n\\r\\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\\r\\n\\r\\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\\r\\n\\r\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\r\\n\\r\\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\\r\\n\\r\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\r\\n\\r\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\\r\\n\\r\\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\\r\\n\\r\\n  function _addRewardsDistributor(address distributor) external returns (uint256);\\r\\n\\r\\n  function getHypotheticalAccountLiquidity(\\r\\n    address account,\\r\\n    address cTokenModify,\\r\\n    uint256 redeemTokens,\\r\\n    uint256 borrowAmount,\\r\\n    uint256 repayAmount\\r\\n  ) external view returns (uint256, uint256, uint256, uint256);\\r\\n\\r\\n  function getMaxRedeemOrBorrow(address account, ICErc20 cToken, bool isBorrow) external view returns (uint256);\\r\\n\\r\\n  /*** Assets You Are In ***/\\r\\n\\r\\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\r\\n\\r\\n  function exitMarket(address cToken) external returns (uint256);\\r\\n\\r\\n  /*** Policy Hooks ***/\\r\\n\\r\\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\\r\\n\\r\\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256);\\r\\n\\r\\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\\r\\n\\r\\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n  function borrowVerify(address cToken, address borrower) external;\\r\\n\\r\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\\r\\n\\r\\n  function repayBorrowAllowed(\\r\\n    address cToken,\\r\\n    address payer,\\r\\n    address borrower,\\r\\n    uint256 repayAmount\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function repayBorrowVerify(\\r\\n    address cToken,\\r\\n    address payer,\\r\\n    address borrower,\\r\\n    uint256 repayAmount\\r\\n  ) external;\\r\\n\\r\\n  function liquidateBorrowAllowed(\\r\\n    address cTokenBorrowed,\\r\\n    address cTokenCollateral,\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 repayAmount\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function seizeAllowed(\\r\\n    address cTokenCollateral,\\r\\n    address cTokenBorrowed,\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 seizeTokens\\r\\n  ) external returns (uint256);\\r\\n  \\r\\n  function seizeVerify(\\r\\n    address cTokenCollateral,\\r\\n    address cTokenBorrowed,\\r\\n    address liquidator,\\r\\n    address borrower,\\r\\n    uint256 seizeTokens\\r\\n  ) external;\\r\\n\\r\\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external returns (uint256);\\r\\n  \\r\\n  function transferVerify(address cToken, address src, address dst, uint256 transferTokens) external;\\r\\n\\r\\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external;\\r\\n\\r\\n  /*** Liquidity/Liquidation Calculations ***/\\r\\n\\r\\n  function getAccountLiquidity(\\r\\n    address account\\r\\n  ) external view returns (uint256 error, uint256 collateralValue, uint256 liquidity, uint256 shortfall);\\r\\n\\r\\n  function liquidateCalculateSeizeTokens(\\r\\n    address cTokenBorrowed,\\r\\n    address cTokenCollateral,\\r\\n    uint256 repayAmount\\r\\n  ) external view returns (uint256, uint256);\\r\\n\\r\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\r\\n\\r\\n  function _beforeNonReentrant() external;\\r\\n\\r\\n  function _afterNonReentrant() external;\\r\\n\\r\\n  /*** New supply and borrow cap view functions ***/\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\r\\n   * @param cToken The address of the cToken.\\r\\n   */\\r\\n  function effectiveSupplyCaps(address cToken) external view returns (uint256 supplyCap);\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\r\\n   * @param cToken The address of the cToken.\\r\\n   */\\r\\n  function effectiveBorrowCaps(address cToken) external view returns (uint256 borrowCap);\\r\\n}\\r\\n\\r\\ninterface ComptrollerStorageInterface {\\r\\n  function admin() external view returns (address);\\r\\n\\r\\n  function adminHasRights() external view returns (bool);\\r\\n\\r\\n  function ionicAdmin() external view returns (address);\\r\\n\\r\\n  function ionicAdminHasRights() external view returns (bool);\\r\\n\\r\\n  function pendingAdmin() external view returns (address);\\r\\n\\r\\n  function oracle() external view returns (BasePriceOracle);\\r\\n\\r\\n  function pauseGuardian() external view returns (address);\\r\\n\\r\\n  function closeFactorMantissa() external view returns (uint256);\\r\\n\\r\\n  function liquidationIncentiveMantissa() external view returns (uint256);\\r\\n\\r\\n  function isUserOfPool(address user) external view returns (bool);\\r\\n\\r\\n  function whitelist(address account) external view returns (bool);\\r\\n\\r\\n  function enforceWhitelist() external view returns (bool);\\r\\n\\r\\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\\r\\n\\r\\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\\r\\n\\r\\n  function suppliers(address account) external view returns (bool);\\r\\n\\r\\n  function cTokensByUnderlying(address) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * Gets the supply cap of a cToken in the units of the underlying asset.\\r\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the supply cap. Instead, use\\r\\n   * `effectiveSupplyCaps` to get the correct supply cap.\\r\\n   * @param cToken The address of the cToken.\\r\\n   * @return The supply cap in the units of the underlying asset.\\r\\n   */\\r\\n  function supplyCaps(address cToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * Gets the borrow cap of a cToken in the units of the underlying asset.\\r\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the borrow cap. Instead, use\\r\\n   * `effectiveBorrowCaps` to get the correct borrow cap.\\r\\n   * @param cToken The address of the cToken.\\r\\n   * @return The borrow cap in the units of the underlying asset.\\r\\n   */\\r\\n  function borrowCaps(address cToken) external view returns (uint256);\\r\\n\\r\\n  function markets(address cToken) external view returns (bool, uint256);\\r\\n\\r\\n  function accountAssets(address, uint256) external view returns (address);\\r\\n\\r\\n  function borrowGuardianPaused(address cToken) external view returns (bool);\\r\\n\\r\\n  function mintGuardianPaused(address cToken) external view returns (bool);\\r\\n\\r\\n  function rewardsDistributors(uint256) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface SFSRegister {\\r\\n  function register(address _recipient) external returns (uint256 tokenId);\\r\\n}\\r\\n\\r\\ninterface ComptrollerExtensionInterface {\\r\\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\\r\\n\\r\\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\\r\\n\\r\\n  function getAllMarkets() external view returns (ICErc20[] memory);\\r\\n\\r\\n  function getAllBorrowers() external view returns (address[] memory);\\r\\n\\r\\n  function getAllBorrowersCount() external view returns (uint256);\\r\\n\\r\\n  function getPaginatedBorrowers(\\r\\n    uint256 page,\\r\\n    uint256 pageSize\\r\\n  ) external view returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\\r\\n\\r\\n  function getRewardsDistributors() external view returns (address[] memory);\\r\\n\\r\\n  function getAccruingFlywheels() external view returns (address[] memory);\\r\\n\\r\\n  function _supplyCapWhitelist(address cToken, address account, bool whitelisted) external;\\r\\n\\r\\n  function _setBorrowCapForCollateral(address cTokenBorrow, address cTokenCollateral, uint256 borrowCap) external;\\r\\n\\r\\n  function _setBorrowCapForCollateralWhitelist(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    address account,\\r\\n    bool whitelisted\\r\\n  ) external;\\r\\n\\r\\n  function isBorrowCapForCollateralWhitelisted(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    address account\\r\\n  ) external view returns (bool);\\r\\n\\r\\n  function _blacklistBorrowingAgainstCollateral(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    bool blacklisted\\r\\n  ) external;\\r\\n\\r\\n  function _blacklistBorrowingAgainstCollateralWhitelist(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    address account,\\r\\n    bool whitelisted\\r\\n  ) external;\\r\\n\\r\\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\\r\\n    address cTokenBorrow,\\r\\n    address cTokenCollateral,\\r\\n    address account\\r\\n  ) external view returns (bool);\\r\\n\\r\\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\\r\\n\\r\\n  function _borrowCapWhitelist(address cToken, address account, bool whitelisted) external;\\r\\n\\r\\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\\r\\n\\r\\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\\r\\n\\r\\n  function getWhitelist() external view returns (address[] memory);\\r\\n\\r\\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\\r\\n\\r\\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\\r\\n\\r\\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\\r\\n\\r\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\r\\n\\r\\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\r\\n\\r\\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\\r\\n\\r\\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\\r\\n\\r\\n  function _setTransferPaused(bool state) external returns (bool);\\r\\n\\r\\n  function _setSeizePaused(bool state) external returns (bool);\\r\\n\\r\\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\\r\\n\\r\\n  function getAssetAsCollateralValueCap(\\r\\n    ICErc20 collateral,\\r\\n    ICErc20 cTokenModify,\\r\\n    bool redeeming,\\r\\n    address account\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function registerInSFS() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ComptrollerPrudentiaCapsExtInterface {\\r\\n  /**\\r\\n   * @notice Retrieves Adrastia Prudentia borrow cap config from storage.\\r\\n   * @return The config.\\r\\n   */\\r\\n  function getBorrowCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves Adrastia Prudentia supply cap config from storage.\\r\\n   * @return The config.\\r\\n   */\\r\\n  function getSupplyCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\r\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native supply caps.\\r\\n   * @param newConfig The new config.\\r\\n   */\\r\\n  function _setSupplyCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\r\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native borrow caps.\\r\\n   * @param newConfig The new config.\\r\\n   */\\r\\n  function _setBorrowCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\r\\n}\\r\\n\\r\\ninterface UnitrollerInterface {\\r\\n  function comptrollerImplementation() external view returns (address);\\r\\n\\r\\n  function _upgrade() external;\\r\\n\\r\\n  function _acceptAdmin() external returns (uint256);\\r\\n\\r\\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\\r\\n\\r\\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\\r\\n\\r\\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\\r\\n\\r\\ninterface IonicComptroller is\\r\\n  ComptrollerInterface,\\r\\n  ComptrollerExtensionInterface,\\r\\n  UnitrollerInterface,\\r\\n  ComptrollerStorageInterface\\r\\n{\\r\\n\\r\\n}\\r\\n\\r\\nabstract contract ComptrollerBase is ComptrollerV4Storage {\\r\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\r\\n  bool public constant isComptroller = true;\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\r\\n   * @param cToken The address of the cToken.\\r\\n   */\\r\\n  function effectiveSupplyCaps(address cToken) public view virtual returns (uint256 supplyCap) {\\r\\n    PrudentiaLib.PrudentiaConfig memory capConfig = supplyCapConfig;\\r\\n\\r\\n    // Check if we're using Adrastia Prudentia for the supply cap\\r\\n    if (capConfig.controller != address(0)) {\\r\\n      // We have a controller, so we're using Adrastia Prudentia\\r\\n\\r\\n      address underlyingToken = ICErc20(cToken).underlying();\\r\\n\\r\\n      // Get the supply cap from Adrastia Prudentia\\r\\n      supplyCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\r\\n\\r\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\r\\n      // must scale the supply cap to get the correct amount\\r\\n\\r\\n      int256 scaleByDecimals = 18;\\r\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\r\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\r\\n      if (success && data.length == 32) {\\r\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\r\\n      }\\r\\n\\r\\n      scaleByDecimals += capConfig.decimalShift;\\r\\n\\r\\n      if (scaleByDecimals >= 0) {\\r\\n        // We're scaling up, so we need to multiply\\r\\n        supplyCap *= 10 ** uint256(scaleByDecimals);\\r\\n      } else {\\r\\n        // We're scaling down, so we need to divide\\r\\n        supplyCap /= 10 ** uint256(-scaleByDecimals);\\r\\n      }\\r\\n    } else {\\r\\n      // We don't have a controller, so we're using the local supply cap\\r\\n\\r\\n      // Get the supply cap from the local supply cap\\r\\n      supplyCap = supplyCaps[cToken];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\r\\n   * @param cToken The address of the cToken.\\r\\n   */\\r\\n  function effectiveBorrowCaps(address cToken) public view virtual returns (uint256 borrowCap) {\\r\\n    PrudentiaLib.PrudentiaConfig memory capConfig = borrowCapConfig;\\r\\n\\r\\n    // Check if we're using Adrastia Prudentia for the borrow cap\\r\\n    if (capConfig.controller != address(0)) {\\r\\n      // We have a controller, so we're using Adrastia Prudentia\\r\\n\\r\\n      address underlyingToken = ICErc20(cToken).underlying();\\r\\n\\r\\n      // Get the borrow cap from Adrastia Prudentia\\r\\n      borrowCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\r\\n\\r\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\r\\n      // must scale the supply cap to get the correct amount\\r\\n\\r\\n      int256 scaleByDecimals = 18;\\r\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\r\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\r\\n      if (success && data.length == 32) {\\r\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\r\\n      }\\r\\n\\r\\n      scaleByDecimals += capConfig.decimalShift;\\r\\n\\r\\n      if (scaleByDecimals >= 0) {\\r\\n        // We're scaling up, so we need to multiply\\r\\n        borrowCap *= 10 ** uint256(scaleByDecimals);\\r\\n      } else {\\r\\n        // We're scaling down, so we need to divide\\r\\n        borrowCap /= 10 ** uint256(-scaleByDecimals);\\r\\n      }\\r\\n    } else {\\r\\n      // We don't have a controller, so we're using the local borrow cap\\r\\n      borrowCap = borrowCaps[cToken];\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xf61761da6983d08f8e88335f8aa96a342a1246069d77fa7c2f533e315939674b\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"./IFeeDistributor.sol\\\";\\r\\nimport \\\"../oracles/BasePriceOracle.sol\\\";\\r\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\r\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\ncontract UnitrollerAdminStorage {\\r\\n  /*\\r\\n   * Administrator for Ionic\\r\\n   */\\r\\n  address payable public ionicAdmin;\\r\\n\\r\\n  /**\\r\\n   * @notice Administrator for this contract\\r\\n   */\\r\\n  address public admin;\\r\\n\\r\\n  /**\\r\\n   * @notice Pending administrator for this contract\\r\\n   */\\r\\n  address public pendingAdmin;\\r\\n\\r\\n  /**\\r\\n   * @notice Whether or not the Ionic admin has admin rights\\r\\n   */\\r\\n  bool public ionicAdminHasRights = true;\\r\\n\\r\\n  /**\\r\\n   * @notice Whether or not the admin has admin rights\\r\\n   */\\r\\n  bool public adminHasRights = true;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns a boolean indicating if the sender has admin rights\\r\\n   */\\r\\n  function hasAdminRights() internal view returns (bool) {\\r\\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\r\\n  /**\\r\\n   * @notice Oracle which gives the price of any given asset\\r\\n   */\\r\\n  BasePriceOracle public oracle;\\r\\n\\r\\n  /**\\r\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\r\\n   */\\r\\n  uint256 public closeFactorMantissa;\\r\\n\\r\\n  /**\\r\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\r\\n   */\\r\\n  uint256 public liquidationIncentiveMantissa;\\r\\n\\r\\n  /*\\r\\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\r\\n   */\\r\\n  uint256 internal maxAssets;\\r\\n\\r\\n  /**\\r\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\r\\n   */\\r\\n  mapping(address => ICErc20[]) public accountAssets;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\r\\n  struct Market {\\r\\n    // Whether or not this market is listed\\r\\n    bool isListed;\\r\\n    // Multiplier representing the most one can borrow against their collateral in this market.\\r\\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\\r\\n    // Must be between 0 and 1, and stored as a mantissa.\\r\\n    uint256 collateralFactorMantissa;\\r\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\r\\n    mapping(address => bool) accountMembership;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Official mapping of cTokens -> Market metadata\\r\\n   * @dev Used e.g. to determine if a market is supported\\r\\n   */\\r\\n  mapping(address => Market) public markets;\\r\\n\\r\\n  /// @notice A list of all markets\\r\\n  ICErc20[] public allMarkets;\\r\\n\\r\\n  /**\\r\\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\\r\\n   */\\r\\n  mapping(address => bool) internal borrowers;\\r\\n\\r\\n  /// @notice A list of all borrowers who have entered markets\\r\\n  address[] public allBorrowers;\\r\\n\\r\\n  // Indexes of borrower account addresses in the `allBorrowers` array\\r\\n  mapping(address => uint256) internal borrowerIndexes;\\r\\n\\r\\n  /**\\r\\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\r\\n   */\\r\\n  mapping(address => bool) public suppliers;\\r\\n\\r\\n  /// @notice All cTokens addresses mapped by their underlying token addresses\\r\\n  mapping(address => ICErc20) public cTokensByUnderlying;\\r\\n\\r\\n  /// @notice Whether or not the supplier whitelist is enforced\\r\\n  bool public enforceWhitelist;\\r\\n\\r\\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\r\\n  mapping(address => bool) public whitelist;\\r\\n\\r\\n  /// @notice An array of all whitelisted accounts\\r\\n  address[] public whitelistArray;\\r\\n\\r\\n  // Indexes of account addresses in the `whitelistArray` array\\r\\n  mapping(address => uint256) internal whitelistIndexes;\\r\\n\\r\\n  /**\\r\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\r\\n   *  Actions which allow users to remove their own assets cannot be paused.\\r\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\r\\n   */\\r\\n  address public pauseGuardian;\\r\\n  bool public _mintGuardianPaused;\\r\\n  bool public _borrowGuardianPaused;\\r\\n  bool public transferGuardianPaused;\\r\\n  bool public seizeGuardianPaused;\\r\\n  mapping(address => bool) public mintGuardianPaused;\\r\\n  mapping(address => bool) public borrowGuardianPaused;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\r\\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\r\\n  /// @dev If Adrastia Prudentia is enabled, the values the borrow cap guardian sets are ignored.\\r\\n  address public borrowCapGuardian;\\r\\n\\r\\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\r\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveBorrowCaps` instead.\\r\\n  mapping(address => uint256) public borrowCaps;\\r\\n\\r\\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\r\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveSupplyCaps` instead.\\r\\n  mapping(address => uint256) public supplyCaps;\\r\\n\\r\\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\\r\\n  address[] public rewardsDistributors;\\r\\n\\r\\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\r\\n  bool internal _notEntered;\\r\\n\\r\\n  /// @dev Whether or not _notEntered has been initialized\\r\\n  bool internal _notEnteredInitialized;\\r\\n\\r\\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\\r\\n  address[] public nonAccruingRewardsDistributors;\\r\\n\\r\\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\\r\\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\\r\\n\\r\\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\\r\\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\\r\\n\\r\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\\r\\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\\r\\n\\r\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\r\\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\\r\\n    internal borrowingAgainstCollateralBlacklistWhitelist;\\r\\n\\r\\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\\r\\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\\r\\n\\r\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\r\\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\\r\\n}\\r\\n\\r\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\r\\n  /// @dev Adrastia Prudentia config for controlling borrow caps.\\r\\n  PrudentiaLib.PrudentiaConfig internal borrowCapConfig;\\r\\n\\r\\n  /// @dev Adrastia Prudentia config for controlling supply caps.\\r\\n  PrudentiaLib.PrudentiaConfig internal supplyCapConfig;\\r\\n}\\r\\n\",\"keccak256\":\"0xd9a1883a27323dfb24d44f1965b3f4c9bafca60490f00e6de60f9a0d8230fbc0\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../ionic/AuthoritiesRegistry.sol\\\";\\r\\n\\r\\ninterface IFeeDistributor {\\r\\n  function minBorrowEth() external view returns (uint256);\\r\\n\\r\\n  function maxUtilizationRate() external view returns (uint256);\\r\\n\\r\\n  function interestFeeRate() external view returns (uint256);\\r\\n\\r\\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\r\\n\\r\\n  function latestCErc20Delegate(uint8 delegateType)\\r\\n    external\\r\\n    view\\r\\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\\r\\n\\r\\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\\r\\n\\r\\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\\r\\n\\r\\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\\r\\n\\r\\n  function deployCErc20(\\r\\n    uint8 delegateType,\\r\\n    bytes calldata constructorData,\\r\\n    bytes calldata becomeImplData\\r\\n  ) external returns (address);\\r\\n\\r\\n  function canCall(\\r\\n    address pool,\\r\\n    address user,\\r\\n    address target,\\r\\n    bytes4 functionSig\\r\\n  ) external view returns (bool);\\r\\n\\r\\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\\r\\n\\r\\n  fallback() external payable;\\r\\n\\r\\n  receive() external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0x82c4f1084fa6efa0a2b94fecd41d1bdff9fe5fd1a16df06b0effc414614d9057\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Compound's InterestRateModel Interface\\r\\n * @author Compound\\r\\n */\\r\\nabstract contract InterestRateModel {\\r\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\r\\n  bool public constant isInterestRateModel = true;\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates the current borrow interest rate per block\\r\\n   * @param cash The total amount of cash the market has\\r\\n   * @param borrows The total amount of borrows the market has outstanding\\r\\n   * @param reserves The total amount of reserves the market has\\r\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\r\\n   */\\r\\n  function getBorrowRate(\\r\\n    uint256 cash,\\r\\n    uint256 borrows,\\r\\n    uint256 reserves\\r\\n  ) public view virtual returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates the current supply interest rate per block\\r\\n   * @param cash The total amount of cash the market has\\r\\n   * @param borrows The total amount of borrows the market has outstanding\\r\\n   * @param reserves The total amount of reserves the market has\\r\\n   * @param reserveFactorMantissa The current reserve factor the market has\\r\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\r\\n   */\\r\\n  function getSupplyRate(\\r\\n    uint256 cash,\\r\\n    uint256 borrows,\\r\\n    uint256 reserves,\\r\\n    uint256 reserveFactorMantissa\\r\\n  ) public view virtual returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x5200b4cd947a8cc34ee58af9b69279cc17189752b57d044f64a122de40f0db85\",\"license\":\"UNLICENSED\"},\"contracts/external/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  function name() external pure returns (string memory);\\r\\n\\r\\n  function symbol() external pure returns (string memory);\\r\\n\\r\\n  function decimals() external pure returns (uint8);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n  event Swap(\\r\\n    address indexed sender,\\r\\n    uint256 amount0In,\\r\\n    uint256 amount1In,\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address indexed to\\r\\n  );\\r\\n  event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint112 reserve0,\\r\\n      uint112 reserve1,\\r\\n      uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n  function kLast() external view returns (uint256);\\r\\n\\r\\n  function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function swap(\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address to,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2fba78d1fb33003459a6e10aa7fd6dd3ca75c3761ef0609b2a65d87135ea18ab\",\"license\":\"GPL-3.0-only\"},\"contracts/ionic/AddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title AddressesProvider\\r\\n * @notice The Addresses Provider serves as a central storage of system internal and external\\r\\n *         contract addresses that change between deploys and across chains\\r\\n * @author Veliko Minkov <veliko@midascapital.xyz>\\r\\n */\\r\\ncontract AddressesProvider is SafeOwnableUpgradeable {\\r\\n  mapping(string => address) private _addresses;\\r\\n  mapping(address => Contract) public plugins;\\r\\n  mapping(address => Contract) public flywheelRewards;\\r\\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\\r\\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\\r\\n  JarvisPool[] public jarvisPoolsConfig;\\r\\n  CurveSwapPool[] public curveSwapPoolsConfig;\\r\\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\\r\\n\\r\\n  /// @dev Initializer to set the admin that can set and change contracts addresses\\r\\n  function initialize(address owner) public initializer {\\r\\n    __SafeOwnable_init(owner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev The contract address and a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  struct Contract {\\r\\n    address addr;\\r\\n    string contractInterface;\\r\\n  }\\r\\n\\r\\n  struct RedemptionStrategy {\\r\\n    address addr;\\r\\n    string contractInterface;\\r\\n    address outputToken;\\r\\n  }\\r\\n\\r\\n  struct FundingStrategy {\\r\\n    address addr;\\r\\n    string contractInterface;\\r\\n    address inputToken;\\r\\n  }\\r\\n\\r\\n  struct JarvisPool {\\r\\n    address syntheticToken;\\r\\n    address collateralToken;\\r\\n    address liquidityPool;\\r\\n    uint256 expirationTime;\\r\\n  }\\r\\n\\r\\n  struct CurveSwapPool {\\r\\n    address poolAddress;\\r\\n    address[] coins;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\\r\\n   * @param rewardToken the reward token address\\r\\n   * @param flywheelRewardsModule the flywheel rewards module address\\r\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  function setFlywheelRewards(\\r\\n    address rewardToken,\\r\\n    address flywheelRewardsModule,\\r\\n    string calldata contractInterface\\r\\n  ) public onlyOwner {\\r\\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\\r\\n   * @param asset the asset address\\r\\n   * @param plugin the ERC4626 plugin address\\r\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  function setPlugin(\\r\\n    address asset,\\r\\n    address plugin,\\r\\n    string calldata contractInterface\\r\\n  ) public onlyOwner {\\r\\n    plugins[asset] = Contract(plugin, contractInterface);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\\r\\n   * @param asset the asset address\\r\\n   * @param strategy redemption strategy address\\r\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  function setRedemptionStrategy(\\r\\n    address asset,\\r\\n    address strategy,\\r\\n    string calldata contractInterface,\\r\\n    address outputToken\\r\\n  ) public onlyOwner {\\r\\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\\r\\n  }\\r\\n\\r\\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\\r\\n    return redemptionStrategiesConfig[asset];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\\r\\n   * @param asset the asset address\\r\\n   * @param strategy funding strategy address\\r\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\r\\n   */\\r\\n  function setFundingStrategy(\\r\\n    address asset,\\r\\n    address strategy,\\r\\n    string calldata contractInterface,\\r\\n    address inputToken\\r\\n  ) public onlyOwner {\\r\\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\\r\\n  }\\r\\n\\r\\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\\r\\n    return fundingStrategiesConfig[asset];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\\r\\n   * @param syntheticToken the synthetic token address\\r\\n   * @param collateralToken the collateral token address\\r\\n   * @param liquidityPool the liquidity pool address\\r\\n   * @param expirationTime the operation expiration time\\r\\n   */\\r\\n  function setJarvisPool(\\r\\n    address syntheticToken,\\r\\n    address collateralToken,\\r\\n    address liquidityPool,\\r\\n    uint256 expirationTime\\r\\n  ) public onlyOwner {\\r\\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\\r\\n  }\\r\\n\\r\\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\\r\\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\\r\\n    _addresses[id] = newAddress;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an address by id\\r\\n   * @return The address\\r\\n   */\\r\\n  function getAddress(string calldata id) public view returns (address) {\\r\\n    return _addresses[id];\\r\\n  }\\r\\n\\r\\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\\r\\n    return curveSwapPoolsConfig;\\r\\n  }\\r\\n\\r\\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\\r\\n    return jarvisPoolsConfig;\\r\\n  }\\r\\n\\r\\n  function setBalancerPoolForTokens(\\r\\n    address inputToken,\\r\\n    address outputToken,\\r\\n    address pool\\r\\n  ) external onlyOwner {\\r\\n    balancerPoolForTokens[inputToken][outputToken] = pool;\\r\\n  }\\r\\n\\r\\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\\r\\n    return balancerPoolForTokens[inputToken][outputToken];\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x323d5d342776b9b74acbeb95c44d88f7006e07119e2033f8effdf29896b92963\",\"license\":\"AGPL-3.0-only\"},\"contracts/ionic/AuthoritiesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { PoolRolesAuthority } from \\\"../ionic/PoolRolesAuthority.sol\\\";\\r\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\r\\nimport { IonicComptroller } from \\\"../compound/ComptrollerInterface.sol\\\";\\r\\n\\r\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\r\\n\\r\\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\\r\\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\\r\\n  PoolRolesAuthority public poolAuthLogic;\\r\\n  address public leveredPositionsFactory;\\r\\n  bool public noAuthRequired;\\r\\n\\r\\n  function initialize(address _leveredPositionsFactory) public initializer {\\r\\n    __SafeOwnable_init(msg.sender);\\r\\n    leveredPositionsFactory = _leveredPositionsFactory;\\r\\n    poolAuthLogic = new PoolRolesAuthority();\\r\\n  }\\r\\n\\r\\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\\r\\n    leveredPositionsFactory = _leveredPositionsFactory;\\r\\n    poolAuthLogic = new PoolRolesAuthority();\\r\\n    // for Neon the auth is not required\\r\\n    noAuthRequired = block.chainid == 245022934;\\r\\n  }\\r\\n\\r\\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\\r\\n    require(address(poolsAuthorities[pool]) == address(0), \\\"already created\\\");\\r\\n\\r\\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \\\"\\\");\\r\\n    auth = PoolRolesAuthority(address(proxy));\\r\\n    auth.initialize(address(this));\\r\\n    poolsAuthorities[pool] = auth;\\r\\n\\r\\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\\r\\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\\r\\n    // sets the registry owner as the auth owner\\r\\n    reconfigureAuthority(pool);\\r\\n  }\\r\\n\\r\\n  function reconfigureAuthority(address poolAddress) public {\\r\\n    IonicComptroller pool = IonicComptroller(poolAddress);\\r\\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\\r\\n\\r\\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\\r\\n      require(address(auth) != address(0), \\\"no such authority\\\");\\r\\n      require(msg.sender == owner() || msg.sender == poolAddress, \\\"not owner or pool\\\");\\r\\n\\r\\n      auth.configureRegistryCapabilities();\\r\\n      auth.configurePoolSupplierCapabilities(pool);\\r\\n      auth.configurePoolBorrowerCapabilities(pool);\\r\\n      // everyone can be a liquidator\\r\\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\\r\\n      auth.configureLeveredPositionCapabilities(pool);\\r\\n\\r\\n      if (auth.owner() != owner()) {\\r\\n        auth.setOwner(owner());\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function canCall(\\r\\n    address pool,\\r\\n    address user,\\r\\n    address target,\\r\\n    bytes4 functionSig\\r\\n  ) external view returns (bool) {\\r\\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\\r\\n    if (address(authorityForPool) == address(0)) {\\r\\n      return noAuthRequired;\\r\\n    } else {\\r\\n      // allow only if an auth exists and it allows the action\\r\\n      return authorityForPool.canCall(user, target, functionSig);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setUserRole(\\r\\n    address pool,\\r\\n    address user,\\r\\n    uint8 role,\\r\\n    bool enabled\\r\\n  ) external {\\r\\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\\r\\n\\r\\n    require(address(poolAuth) != address(0), \\\"auth does not exist\\\");\\r\\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \\\"not owner or factory\\\");\\r\\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \\\"only lev pos role\\\");\\r\\n\\r\\n    poolAuth.setUserRole(user, role, enabled);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x115f92e8254ecbff415758b256fde2d110032db2d7124b3b4cefd9f4f7691051\",\"license\":\"UNLICENSED\"},\"contracts/ionic/DiamondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice a base contract for logic extensions that use the diamond pattern storage\\r\\n * to map the functions when looking up the extension contract to delegate to.\\r\\n */\\r\\nabstract contract DiamondExtension {\\r\\n  /**\\r\\n   * @return a list of all the function selectors that this logic extension exposes\\r\\n   */\\r\\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\\r\\n}\\r\\n\\r\\n// When no function exists for function called\\r\\nerror FunctionNotFound(bytes4 _functionSelector);\\r\\n\\r\\n// When no extension exists for function called\\r\\nerror ExtensionNotFound(bytes4 _functionSelector);\\r\\n\\r\\n// When the function is already added\\r\\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\\r\\n\\r\\nabstract contract DiamondBase {\\r\\n  /**\\r\\n   * @dev register a logic extension\\r\\n   * @param extensionToAdd the extension whose functions are to be added\\r\\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\\r\\n   */\\r\\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\\r\\n\\r\\n  function _listExtensions() public view returns (address[] memory) {\\r\\n    return LibDiamond.listExtensions();\\r\\n  }\\r\\n\\r\\n  fallback() external {\\r\\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\\r\\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\\r\\n    // Execute external function from extension using delegatecall and return any value.\\r\\n    assembly {\\r\\n      // copy function selector and any arguments\\r\\n      calldatacopy(0, 0, calldatasize())\\r\\n      // execute function call using the extension\\r\\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\\r\\n      // get any return value\\r\\n      returndatacopy(0, 0, returndatasize())\\r\\n      // return any return value or error back to the caller\\r\\n      switch result\\r\\n      case 0 {\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n      default {\\r\\n        return(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice a library to use in a contract, whose logic is extended with diamond extension\\r\\n */\\r\\nlibrary LibDiamond {\\r\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.extensions.diamond.storage\\\");\\r\\n\\r\\n  struct Function {\\r\\n    address extension;\\r\\n    bytes4 selector;\\r\\n  }\\r\\n\\r\\n  struct LogicStorage {\\r\\n    Function[] functions;\\r\\n    address[] extensions;\\r\\n  }\\r\\n\\r\\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\\r\\n    return getExtensionForSelector(msgSig, diamondStorage());\\r\\n  }\\r\\n\\r\\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\\r\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n    assembly {\\r\\n      ds.slot := position\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function listExtensions() internal view returns (address[] memory) {\\r\\n    return diamondStorage().extensions;\\r\\n  }\\r\\n\\r\\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\\r\\n    if (address(extensionToReplace) != address(0)) {\\r\\n      removeExtension(extensionToReplace);\\r\\n    }\\r\\n    addExtension(extensionToAdd);\\r\\n  }\\r\\n\\r\\n  function removeExtension(DiamondExtension extension) internal {\\r\\n    LogicStorage storage ds = diamondStorage();\\r\\n    // remove all functions of the extension to replace\\r\\n    removeExtensionFunctions(extension);\\r\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\r\\n      if (ds.extensions[i] == address(extension)) {\\r\\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\\r\\n        ds.extensions.pop();\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addExtension(DiamondExtension extension) internal {\\r\\n    LogicStorage storage ds = diamondStorage();\\r\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\r\\n      require(ds.extensions[i] != address(extension), \\\"extension already added\\\");\\r\\n    }\\r\\n    addExtensionFunctions(extension);\\r\\n    ds.extensions.push(address(extension));\\r\\n  }\\r\\n\\r\\n  function removeExtensionFunctions(DiamondExtension extension) internal {\\r\\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\\r\\n    LogicStorage storage ds = diamondStorage();\\r\\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\\r\\n      bytes4 selectorToRemove = fnsToRemove[i];\\r\\n      // must never fail\\r\\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\\r\\n      // swap with the last element in the selectorAtIndex array and remove the last element\\r\\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\\r\\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\\r\\n      ds.functions.pop();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function addExtensionFunctions(DiamondExtension extension) internal {\\r\\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\\r\\n    LogicStorage storage ds = diamondStorage();\\r\\n    uint16 functionsCount = uint16(ds.functions.length);\\r\\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\\r\\n      bytes4 selector = fnsToAdd[functionsIndex];\\r\\n      address oldImplementation = getExtensionForSelector(selector, ds);\\r\\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\\r\\n      ds.functions.push(Function(address(extension), selector));\\r\\n      functionsCount++;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\\r\\n    uint256 fnsLen = ds.functions.length;\\r\\n    for (uint256 i = 0; i < fnsLen; i++) {\\r\\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\\r\\n    }\\r\\n\\r\\n    return address(0);\\r\\n  }\\r\\n\\r\\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\\r\\n    uint16 fnsLen = uint16(ds.functions.length);\\r\\n    for (uint16 i = 0; i < fnsLen; i++) {\\r\\n      if (ds.functions[i].selector == selector) return i;\\r\\n    }\\r\\n\\r\\n    return type(uint16).max;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x8574cedf33192f4f8df52688205ae7dab899ca95e66b1b56bf0932c99584e720\",\"license\":\"UNLICENSED\"},\"contracts/ionic/PoolRolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport { IonicComptroller, ComptrollerInterface } from \\\"../compound/ComptrollerInterface.sol\\\";\\r\\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \\\"../compound/CTokenInterfaces.sol\\\";\\r\\n\\r\\nimport { RolesAuthority, Authority } from \\\"solmate/auth/authorities/RolesAuthority.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\\r\\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\\r\\n    _disableInitializers();\\r\\n  }\\r\\n\\r\\n  function initialize(address _owner) public initializer {\\r\\n    owner = _owner;\\r\\n    authority = this;\\r\\n  }\\r\\n\\r\\n  // up to 256 roles\\r\\n  uint8 public constant REGISTRY_ROLE = 0;\\r\\n  uint8 public constant SUPPLIER_ROLE = 1;\\r\\n  uint8 public constant BORROWER_ROLE = 2;\\r\\n  uint8 public constant LIQUIDATOR_ROLE = 3;\\r\\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\\r\\n\\r\\n  function configureRegistryCapabilities() external requiresAuth {\\r\\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(\\r\\n      REGISTRY_ROLE,\\r\\n      address(this),\\r\\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\\r\\n      true\\r\\n    );\\r\\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\\r\\n  }\\r\\n\\r\\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _setPublicPoolSupplierCapabilities(pool, true);\\r\\n  }\\r\\n\\r\\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _setPublicPoolSupplierCapabilities(pool, false);\\r\\n  }\\r\\n\\r\\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\\r\\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\\r\\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\r\\n      for (uint256 j = 0; j < selectors.length; j++) {\\r\\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\\r\\n  }\\r\\n\\r\\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\\r\\n    uint8 fnsCount = 6;\\r\\n    selectors = new bytes4[](fnsCount);\\r\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\\r\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\\r\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\\r\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\\r\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\\r\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\\r\\n\\r\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\r\\n    return selectors;\\r\\n  }\\r\\n\\r\\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\\r\\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\\r\\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\r\\n      for (uint256 j = 0; j < selectors.length; j++) {\\r\\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _setPublicPoolBorrowerCapabilities(pool, true);\\r\\n  }\\r\\n\\r\\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    _setPublicPoolBorrowerCapabilities(pool, false);\\r\\n  }\\r\\n\\r\\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    // borrowers have the SUPPLIER_ROLE capabilities by default\\r\\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\r\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\r\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\\r\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\\r\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\r\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\r\\n      // TODO this leaves redeeming open for everyone\\r\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\\r\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\\r\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\\r\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\r\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\\r\\n\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\r\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7434a55635e552d7121207af735f647fd17eaeddf3a839a9f521552c9c114f37\",\"license\":\"UNLICENSED\"},\"contracts/ionic/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\\r\\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\\r\\n * that will shift the other.\\r\\n */\\r\\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\\r\\n  /**\\r\\n   * @notice Pending owner of this contract\\r\\n   */\\r\\n  address public pendingOwner;\\r\\n\\r\\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\\r\\n    __Ownable_init();\\r\\n    _transferOwnership(owner_);\\r\\n  }\\r\\n\\r\\n  struct AddressSlot {\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwnerOrAdmin() {\\r\\n    bool isOwner = owner() == _msgSender();\\r\\n    if (!isOwner) {\\r\\n      address admin = _getProxyAdmin();\\r\\n      bool isAdmin = admin == _msgSender();\\r\\n      require(isAdmin, \\\"Ownable: caller is neither the owner nor the admin\\\");\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when pendingOwner is changed\\r\\n   */\\r\\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\\r\\n   */\\r\\n  event NewOwner(address oldOwner, address newOwner);\\r\\n\\r\\n  /**\\r\\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\r\\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\r\\n   * @param newPendingOwner New pending owner.\\r\\n   */\\r\\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\\r\\n    // Save current value, if any, for inclusion in log\\r\\n    address oldPendingOwner = pendingOwner;\\r\\n\\r\\n    // Store pendingOwner with value newPendingOwner\\r\\n    pendingOwner = newPendingOwner;\\r\\n\\r\\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\\r\\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\\r\\n   * @dev Owner function for pending owner to accept role and update owner\\r\\n   */\\r\\n  function _acceptOwner() public {\\r\\n    // Check caller is pendingOwner and pendingOwner \\u2260 address(0)\\r\\n    require(msg.sender == pendingOwner, \\\"not the pending owner\\\");\\r\\n\\r\\n    // Save current values for inclusion in log\\r\\n    address oldOwner = owner();\\r\\n    address oldPendingOwner = pendingOwner;\\r\\n\\r\\n    // Store owner with value pendingOwner\\r\\n    _transferOwnership(pendingOwner);\\r\\n\\r\\n    // Clear the pending value\\r\\n    pendingOwner = address(0);\\r\\n\\r\\n    emit NewOwner(oldOwner, pendingOwner);\\r\\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\\r\\n  }\\r\\n\\r\\n  function renounceOwnership() public override onlyOwner {\\r\\n    // do not remove this overriding fn\\r\\n    revert(\\\"not used anymore\\\");\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner) public override onlyOwner {\\r\\n    emit NewPendingOwner(pendingOwner, newOwner);\\r\\n    pendingOwner = newOwner;\\r\\n  }\\r\\n\\r\\n  function _getProxyAdmin() internal view returns (address admin) {\\r\\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n    AddressSlot storage adminSlot;\\r\\n    assembly {\\r\\n      adminSlot.slot := _ADMIN_SLOT\\r\\n    }\\r\\n    admin = adminSlot.value;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x389aa135a3fffcece620da7c3a2f9d823cd5eaf7ae2882774dc62a03fa848b63\",\"license\":\"UNLICENSED\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../compound/CTokenInterfaces.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BasePriceOracle\\r\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\r\\n * @dev Implements the `PriceOracle` interface.\\r\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\r\\n */\\r\\ninterface BasePriceOracle {\\r\\n  /**\\r\\n   * @notice Get the price of an underlying asset.\\r\\n   * @param underlying The underlying asset to get the price of.\\r\\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\r\\n   * Zero means the price is unavailable.\\r\\n   */\\r\\n  function price(address underlying) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the underlying price of a cToken asset\\r\\n   * @param cToken The cToken to get the underlying price of\\r\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\r\\n   *  Zero means the price is unavailable.\\r\\n   */\\r\\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x6a5989a21e27cf7ed176bcdd37ebfc6b1948df3facd1e2009c3ff3a7fc4bee3d\",\"license\":\"UNLICENSED\"},\"contracts/oracles/default/UniswapLikeLpTokenPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../../external/uniswap/IUniswapV2Pair.sol\\\";\\r\\n\\r\\nimport \\\"../BasePriceOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title UniswapLpTokenPriceOracle\\r\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\r\\n * @notice UniswapLpTokenPriceOracle is a price oracle for Uniswap (and SushiSwap) LP tokens.\\r\\n * @dev Implements the `PriceOracle` interface used by Ionic pools (and Compound v2).\\r\\n */\\r\\nabstract contract UniswapLikeLpTokenPriceOracle is BasePriceOracle {\\r\\n  /**\\r\\n   * @dev wtoken contract address.\\r\\n   */\\r\\n  address public immutable wtoken;\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor to set admin and canAdminOverwrite, wtoken address and native token USD price feed address\\r\\n   */\\r\\n  constructor(address _wtoken) {\\r\\n    wtoken = _wtoken;\\r\\n  }\\r\\n\\r\\n  function _price(address token) internal view virtual returns (uint256);\\r\\n\\r\\n  function price(address underlying) external view override returns (uint256) {\\r\\n    return _price(underlying);\\r\\n  }\\r\\n\\r\\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\\r\\n    address underlying = cToken.underlying();\\r\\n    // Comptroller needs prices to be scaled by 1e(36 - decimals)\\r\\n    // Since `_price` returns prices scaled by 18 decimals, we must scale them by 1e(36 - 18 - decimals)\\r\\n    return (_price(underlying) * 1e18) / (10 ** uint256(ERC20Upgradeable(underlying).decimals()));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Fast square root function.\\r\\n   * Implementation from: https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\r\\n   * Original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\r\\n   */\\r\\n  function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n    if (x == 0) return 0;\\r\\n    uint256 xx = x;\\r\\n    uint256 r = 1;\\r\\n\\r\\n    if (xx >= 0x100000000000000000000000000000000) {\\r\\n      xx >>= 128;\\r\\n      r <<= 64;\\r\\n    }\\r\\n    if (xx >= 0x10000000000000000) {\\r\\n      xx >>= 64;\\r\\n      r <<= 32;\\r\\n    }\\r\\n    if (xx >= 0x100000000) {\\r\\n      xx >>= 32;\\r\\n      r <<= 16;\\r\\n    }\\r\\n    if (xx >= 0x10000) {\\r\\n      xx >>= 16;\\r\\n      r <<= 8;\\r\\n    }\\r\\n    if (xx >= 0x100) {\\r\\n      xx >>= 8;\\r\\n      r <<= 4;\\r\\n    }\\r\\n    if (xx >= 0x10) {\\r\\n      xx >>= 4;\\r\\n      r <<= 2;\\r\\n    }\\r\\n    if (xx >= 0x8) {\\r\\n      r <<= 1;\\r\\n    }\\r\\n\\r\\n    r = (r + x / r) >> 1;\\r\\n    r = (r + x / r) >> 1;\\r\\n    r = (r + x / r) >> 1;\\r\\n    r = (r + x / r) >> 1;\\r\\n    r = (r + x / r) >> 1;\\r\\n    r = (r + x / r) >> 1;\\r\\n    r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n    uint256 r1 = x / r;\\r\\n    return (r < r1 ? r : r1);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xda4123403ec0a9e1c39affa1e6bef147b0638a51545150c1dc0507cf90c28dfb\",\"license\":\"UNLICENSED\"},\"contracts/oracles/default/UniswapLpTokenPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../../external/uniswap/IUniswapV2Pair.sol\\\";\\r\\n\\r\\nimport \\\"../BasePriceOracle.sol\\\";\\r\\nimport { UniswapLikeLpTokenPriceOracle } from \\\"./UniswapLikeLpTokenPriceOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title UniswapLpTokenPriceOracle\\r\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\r\\n * @notice UniswapLpTokenPriceOracle is a price oracle for Uniswap (and SushiSwap) LP tokens.\\r\\n * @dev Implements the `PriceOracle` interface used by Ionic pools (and Compound v2).\\r\\n */\\r\\ncontract UniswapLpTokenPriceOracle is UniswapLikeLpTokenPriceOracle {\\r\\n  /**\\r\\n   * @dev Fetches the fair LP token/ETH price from Uniswap, with 18 decimals of precision.\\r\\n   */\\r\\n  constructor(address _wtoken) UniswapLikeLpTokenPriceOracle(_wtoken) {}\\r\\n\\r\\n  function _price(address token) internal view virtual override returns (uint256) {\\r\\n    IUniswapV2Pair pair = IUniswapV2Pair(token);\\r\\n    uint256 totalSupply = pair.totalSupply();\\r\\n    if (totalSupply == 0) return 0;\\r\\n    (uint256 r0, uint256 r1, ) = pair.getReserves();\\r\\n\\r\\n    r0 = r0 * 10 ** (18 - uint256(ERC20Upgradeable(pair.token0()).decimals()));\\r\\n    r1 = r1 * 10 ** (18 - uint256(ERC20Upgradeable(pair.token1()).decimals()));\\r\\n\\r\\n    address token0 = pair.token0();\\r\\n    address token1 = pair.token1();\\r\\n\\r\\n    // Get fair price of non-WETH token (underlying the pair) in terms of ETH\\r\\n    uint256 token0FairPrice = token0 == wtoken ? 1e18 : BasePriceOracle(msg.sender).price(token0);\\r\\n    uint256 token1FairPrice = token1 == wtoken ? 1e18 : BasePriceOracle(msg.sender).price(token1);\\r\\n\\r\\n    // Implementation from https://github.com/AlphaFinanceLab/homora-v2/blob/e643392d582c81f6695136971cff4b685dcd2859/contracts/oracle/UniswapV2Oracle.sol#L18\\r\\n    uint256 sqrtK = (sqrt(r0 * r1) * (2 ** 112)) / totalSupply;\\r\\n    return (((sqrtK * 2 * sqrt(token0FairPrice)) / (2 ** 56)) * sqrt(token1FairPrice)) / (2 ** 56);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x296c1ddc8c81f35eb97c6f5f171568b5b6c9cb0da46c8233d7f9743e7816156b\",\"license\":\"UNLICENSED\"},\"solmate/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\r\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\r\\nabstract contract Auth {\\r\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\r\\n\\r\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    Authority public authority;\\r\\n\\r\\n    constructor(address _owner, Authority _authority) {\\r\\n        owner = _owner;\\r\\n        authority = _authority;\\r\\n\\r\\n        emit OwnerUpdated(msg.sender, _owner);\\r\\n        emit AuthorityUpdated(msg.sender, _authority);\\r\\n    }\\r\\n\\r\\n    modifier requiresAuth() virtual {\\r\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\r\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\r\\n\\r\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\r\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\r\\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\r\\n    }\\r\\n\\r\\n    function setAuthority(Authority newAuthority) public virtual {\\r\\n        // We check if the caller is the owner first because we want to ensure they can\\r\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\r\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\r\\n\\r\\n        authority = newAuthority;\\r\\n\\r\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\r\\n    }\\r\\n\\r\\n    function setOwner(address newOwner) public virtual requiresAuth {\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit OwnerUpdated(msg.sender, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\r\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\r\\ninterface Authority {\\r\\n    function canCall(\\r\\n        address user,\\r\\n        address target,\\r\\n        bytes4 functionSig\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2bc7e46ecae8db6dbd482164eb79665c0ebec7f970e442c5ac5cce870248eee6\",\"license\":\"AGPL-3.0-only\"},\"solmate/auth/authorities/RolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport {Auth, Authority} from \\\"../Auth.sol\\\";\\r\\n\\r\\n/// @notice Role based Authority that supports up to 256 roles.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\\r\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\\r\\ncontract RolesAuthority is Auth, Authority {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\\r\\n\\r\\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\\r\\n\\r\\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            ROLE/USER STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    mapping(address => bytes32) public getUserRoles;\\r\\n\\r\\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\\r\\n\\r\\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\\r\\n\\r\\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\\r\\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\\r\\n    }\\r\\n\\r\\n    function doesRoleHaveCapability(\\r\\n        uint8 role,\\r\\n        address target,\\r\\n        bytes4 functionSig\\r\\n    ) public view virtual returns (bool) {\\r\\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                           AUTHORIZATION LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function canCall(\\r\\n        address user,\\r\\n        address target,\\r\\n        bytes4 functionSig\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return\\r\\n            isCapabilityPublic[target][functionSig] ||\\r\\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                   ROLE CAPABILITY CONFIGURATION LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setPublicCapability(\\r\\n        address target,\\r\\n        bytes4 functionSig,\\r\\n        bool enabled\\r\\n    ) public virtual requiresAuth {\\r\\n        isCapabilityPublic[target][functionSig] = enabled;\\r\\n\\r\\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\\r\\n    }\\r\\n\\r\\n    function setRoleCapability(\\r\\n        uint8 role,\\r\\n        address target,\\r\\n        bytes4 functionSig,\\r\\n        bool enabled\\r\\n    ) public virtual requiresAuth {\\r\\n        if (enabled) {\\r\\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\\r\\n        } else {\\r\\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\\r\\n        }\\r\\n\\r\\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                       USER ROLE ASSIGNMENT LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function setUserRole(\\r\\n        address user,\\r\\n        uint8 role,\\r\\n        bool enabled\\r\\n    ) public virtual requiresAuth {\\r\\n        if (enabled) {\\r\\n            getUserRoles[user] |= bytes32(1 << role);\\r\\n        } else {\\r\\n            getUserRoles[user] &= ~bytes32(1 << role);\\r\\n        }\\r\\n\\r\\n        emit UserRoleUpdated(user, role, enabled);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ed785380b96bd42a221fb9eb792b5e9f5834efec72ba38dda93c5e176df860d\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c0b380380610c0b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610b7361009860003960008181604b0152818161056c01526106200152610b736000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639c0591c814610046578063aea910781461008a578063fc57d4df146100ab575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61009d6100983660046108f6565b6100be565b604051908152602001610081565b61009d6100b93660046108f6565b6100cf565b60006100c9826101d2565b92915050565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101349190610913565b9050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101989190610930565b6101a69060ff16600a610a4d565b6101af826101d2565b6101c190670de0b6b3a7640000610a59565b6101cb9190610a70565b9392505050565b6000808290506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023c9190610a92565b905080600003610250575060009392505050565b600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190610ac7565b506001600160701b031691506001600160701b03169150836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561030a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032e9190610913565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610930565b61039d9060ff166012610b17565b6103a890600a610a4d565b6103b29083610a59565b9150836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190610913565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104779190610930565b6104859060ff166012610b17565b61049090600a610a4d565b61049a9082610a59565b90506000846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190610913565b90506000856001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190610913565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614610610576040516315d5220f60e31b81526001600160a01b0384166004820152339063aea9107890602401602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610a92565b61061a565b670de0b6b3a76400005b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146106c4576040516315d5220f60e31b81526001600160a01b0384166004820152339063aea9107890602401602060405180830381865afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190610a92565b6106ce565b670de0b6b3a76400005b90506000876106e56106e0888a610a59565b61075d565b6106f390600160701b610a59565b6106fd9190610a70565b9050600160381b61070d8361075d565b600160381b61071b8661075d565b610726856002610a59565b6107309190610a59565b61073a9190610a70565b6107449190610a59565b61074e9190610a70565b9b9a5050505050505050505050565b60008160000361076f57506000919050565b816001600160801b82106107885760809190911c9060401b5b6801000000000000000082106107a35760409190911c9060201b5b64010000000082106107ba5760209190911c9060101b5b6201000082106107cf5760109190911c9060081b5b61010082106107e35760089190911c9060041b5b601082106107f65760049190911c9060021b5b600882106108025760011b5b600161080e8286610a70565b6108189083610b2a565b901c905060016108288286610a70565b6108329083610b2a565b901c905060016108428286610a70565b61084c9083610b2a565b901c9050600161085c8286610a70565b6108669083610b2a565b901c905060016108768286610a70565b6108809083610b2a565b901c905060016108908286610a70565b61089a9083610b2a565b901c905060016108aa8286610a70565b6108b49083610b2a565b901c905060006108c48286610a70565b90508082106108d357806108d5565b815b95945050505050565b6001600160a01b03811681146108f357600080fd5b50565b60006020828403121561090857600080fd5b81356101cb816108de565b60006020828403121561092557600080fd5b81516101cb816108de565b60006020828403121561094257600080fd5b815160ff811681146101cb57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b808511156109a457816000190482111561098a5761098a610953565b8085161561099757918102915b93841c939080029061096e565b509250929050565b6000826109bb575060016100c9565b816109c8575060006100c9565b81600181146109de57600281146109e857610a04565b60019150506100c9565b60ff8411156109f9576109f9610953565b50506001821b6100c9565b5060208310610133831016604e8410600b8410161715610a27575081810a6100c9565b610a318383610969565b8060001904821115610a4557610a45610953565b029392505050565b60006101cb83836109ac565b80820281158282048414176100c9576100c9610953565b600082610a8d57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610aa457600080fd5b5051919050565b80516001600160701b0381168114610ac257600080fd5b919050565b600080600060608486031215610adc57600080fd5b610ae584610aab565b9250610af360208501610aab565b9150604084015163ffffffff81168114610b0c57600080fd5b809150509250925092565b818103818111156100c9576100c9610953565b808201808211156100c9576100c961095356fea2646970667358221220641c36433733ed08e51468f17532471277721dd503292282eaf8a2294d818ecc64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80639c0591c814610046578063aea910781461008a578063fc57d4df146100ab575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61009d6100983660046108f6565b6100be565b604051908152602001610081565b61009d6100b93660046108f6565b6100cf565b60006100c9826101d2565b92915050565b600080826001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101349190610913565b9050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101989190610930565b6101a69060ff16600a610a4d565b6101af826101d2565b6101c190670de0b6b3a7640000610a59565b6101cb9190610a70565b9392505050565b6000808290506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023c9190610a92565b905080600003610250575060009392505050565b600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190610ac7565b506001600160701b031691506001600160701b03169150836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561030a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032e9190610913565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610930565b61039d9060ff166012610b17565b6103a890600a610a4d565b6103b29083610a59565b9150836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190610913565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104779190610930565b6104859060ff166012610b17565b61049090600a610a4d565b61049a9082610a59565b90506000846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190610913565b90506000856001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190610913565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614610610576040516315d5220f60e31b81526001600160a01b0384166004820152339063aea9107890602401602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190610a92565b61061a565b670de0b6b3a76400005b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146106c4576040516315d5220f60e31b81526001600160a01b0384166004820152339063aea9107890602401602060405180830381865afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190610a92565b6106ce565b670de0b6b3a76400005b90506000876106e56106e0888a610a59565b61075d565b6106f390600160701b610a59565b6106fd9190610a70565b9050600160381b61070d8361075d565b600160381b61071b8661075d565b610726856002610a59565b6107309190610a59565b61073a9190610a70565b6107449190610a59565b61074e9190610a70565b9b9a5050505050505050505050565b60008160000361076f57506000919050565b816001600160801b82106107885760809190911c9060401b5b6801000000000000000082106107a35760409190911c9060201b5b64010000000082106107ba5760209190911c9060101b5b6201000082106107cf5760109190911c9060081b5b61010082106107e35760089190911c9060041b5b601082106107f65760049190911c9060021b5b600882106108025760011b5b600161080e8286610a70565b6108189083610b2a565b901c905060016108288286610a70565b6108329083610b2a565b901c905060016108428286610a70565b61084c9083610b2a565b901c9050600161085c8286610a70565b6108669083610b2a565b901c905060016108768286610a70565b6108809083610b2a565b901c905060016108908286610a70565b61089a9083610b2a565b901c905060016108aa8286610a70565b6108b49083610b2a565b901c905060006108c48286610a70565b90508082106108d357806108d5565b815b95945050505050565b6001600160a01b03811681146108f357600080fd5b50565b60006020828403121561090857600080fd5b81356101cb816108de565b60006020828403121561092557600080fd5b81516101cb816108de565b60006020828403121561094257600080fd5b815160ff811681146101cb57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b808511156109a457816000190482111561098a5761098a610953565b8085161561099757918102915b93841c939080029061096e565b509250929050565b6000826109bb575060016100c9565b816109c8575060006100c9565b81600181146109de57600281146109e857610a04565b60019150506100c9565b60ff8411156109f9576109f9610953565b50506001821b6100c9565b5060208310610133831016604e8410600b8410161715610a27575081810a6100c9565b610a318383610969565b8060001904821115610a4557610a45610953565b029392505050565b60006101cb83836109ac565b80820281158282048414176100c9576100c9610953565b600082610a8d57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610aa457600080fd5b5051919050565b80516001600160701b0381168114610ac257600080fd5b919050565b600080600060608486031215610adc57600080fd5b610ae584610aab565b9250610af360208501610aab565b9150604084015163ffffffff81168114610b0c57600080fd5b809150509250925092565b818103818111156100c9576100c9610953565b808201808211156100c9576100c961095356fea2646970667358221220641c36433733ed08e51468f17532471277721dd503292282eaf8a2294d818ecc64736f6c63430008160033",
  "devdoc": {
    "author": "David Lucid <david@rari.capital> (https://github.com/davidlucid)",
    "details": "Implements the `PriceOracle` interface used by Ionic pools (and Compound v2).",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Fetches the fair LP token/ETH price from Uniswap, with 18 decimals of precision."
      },
      "getUnderlyingPrice(address)": {
        "params": {
          "cToken": "The cToken to get the underlying price of"
        },
        "returns": {
          "_0": "The underlying asset price mantissa (scaled by 1e18).  Zero means the price is unavailable."
        }
      },
      "price(address)": {
        "params": {
          "underlying": "The underlying asset to get the price of."
        },
        "returns": {
          "_0": "The underlying asset price in ETH as a mantissa (scaled by 1e18). Zero means the price is unavailable."
        }
      }
    },
    "title": "UniswapLpTokenPriceOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUnderlyingPrice(address)": {
        "notice": "Get the underlying price of a cToken asset"
      },
      "price(address)": {
        "notice": "Get the price of an underlying asset."
      }
    },
    "notice": "UniswapLpTokenPriceOracle is a price oracle for Uniswap (and SushiSwap) LP tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}