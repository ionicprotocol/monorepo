{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@pythnetwork/express-relay-sdk-solidity/IExpressRelay.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Copyright (C) 2024 Lavra Holdings Limited - All Rights Reserved\npragma solidity ^0.8.0;\n\ninterface IExpressRelay {\n    // Check if the combination of protocol and permissionKey is allowed within this transaction.\n    // This will return true if and only if it's being called while executing the auction winner(s) call.\n    // @param protocolFeeReceiver The address of the protocol that is gating an action behind this permission\n    // @param permissionId The id that represents the action being gated\n    // @return permissioned True if the permission is allowed, false otherwise\n    function isPermissioned(\n        address protocolFeeReceiver,\n        bytes calldata permissionId\n    ) external view returns (bool permissioned);\n}\n"
    },
    "@pythnetwork/express-relay-sdk-solidity/IExpressRelayFeeReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Copyright (C) 2024 Lavra Holdings Limited - All Rights Reserved\npragma solidity ^0.8.0;\n\ninterface IExpressRelayFeeReceiver {\n    // Receive the proceeds of an auction.\n    // @param permissionKey The permission key where the auction was conducted on.\n    function receiveAuctionProceedings(\n        bytes calldata permissionKey\n    ) external payable;\n}\n"
    },
    "contracts/compound/CarefulMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/**\n * @title Careful Math\n * @author Compound\n * @notice Derived from OpenZeppelin's SafeMath library\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\ncontract CarefulMath {\n  /**\n   * @dev Possible error codes that we can return\n   */\n  enum MathError {\n    NO_ERROR,\n    DIVISION_BY_ZERO,\n    INTEGER_OVERFLOW,\n    INTEGER_UNDERFLOW\n  }\n\n  /**\n   * @dev Multiplies two numbers, returns an error on overflow.\n   */\n  function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n    if (a == 0) {\n      return (MathError.NO_ERROR, 0);\n    }\n\n    uint256 c;\n    unchecked {\n      c = a * b;\n    }\n\n    if (c / a != b) {\n      return (MathError.INTEGER_OVERFLOW, 0);\n    } else {\n      return (MathError.NO_ERROR, c);\n    }\n  }\n\n  /**\n   * @dev Integer division of two numbers, truncating the quotient.\n   */\n  function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n    if (b == 0) {\n      return (MathError.DIVISION_BY_ZERO, 0);\n    }\n\n    return (MathError.NO_ERROR, a / b);\n  }\n\n  /**\n   * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n   */\n  function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n    if (b <= a) {\n      return (MathError.NO_ERROR, a - b);\n    } else {\n      return (MathError.INTEGER_UNDERFLOW, 0);\n    }\n  }\n\n  /**\n   * @dev Adds two numbers, returns an error on overflow.\n   */\n  function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\n    uint256 c;\n    unchecked {\n      c = a + b;\n    }\n\n    if (c >= a) {\n      return (MathError.NO_ERROR, c);\n    } else {\n      return (MathError.INTEGER_OVERFLOW, 0);\n    }\n  }\n\n  /**\n   * @dev add a and b and then subtract c\n   */\n  function addThenSubUInt(\n    uint256 a,\n    uint256 b,\n    uint256 c\n  ) internal pure returns (MathError, uint256) {\n    (MathError err0, uint256 sum) = addUInt(a, b);\n\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, 0);\n    }\n\n    return subUInt(sum, c);\n  }\n}\n"
    },
    "contracts/compound/CErc20Delegate.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./CToken.sol\";\n\n/**\n * @title Compound's CErc20Delegate Contract\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\n * @author Compound\n */\ncontract CErc20Delegate is CErc20 {\n  function _getExtensionFunctions() public pure virtual override returns (bytes4[] memory functionSelectors) {\n    uint8 fnsCount = 3;\n\n    bytes4[] memory superFunctionSelectors = super._getExtensionFunctions();\n    functionSelectors = new bytes4[](superFunctionSelectors.length + fnsCount);\n\n    for (uint256 i = 0; i < superFunctionSelectors.length; i++) {\n      functionSelectors[i] = superFunctionSelectors[i];\n    }\n\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this.contractType.selector;\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this.delegateType.selector;\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this._becomeImplementation.selector;\n\n    require(fnsCount == 0, \"use the correct array length\");\n  }\n\n  /**\n   * @notice Called by the delegator on a delegate to initialize it for duty\n   */\n  function _becomeImplementation(bytes memory) public virtual override {\n    require(msg.sender == address(this) || hasAdminRights(), \"!self || !admin\");\n  }\n\n  function delegateType() public pure virtual override returns (uint8) {\n    return 1;\n  }\n\n  function contractType() external pure virtual override returns (string memory) {\n    return \"CErc20Delegate\";\n  }\n}\n"
    },
    "contracts/compound/CErc20Delegator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./InterestRateModel.sol\";\nimport \"../ionic/DiamondExtension.sol\";\nimport { CErc20DelegatorBase, CDelegateInterface } from \"./CTokenInterfaces.sol\";\nimport { IFeeDistributor } from \"./IFeeDistributor.sol\";\nimport { EIP20Interface } from \"./EIP20Interface.sol\";\n\n/**\n * @title Compound's CErc20Delegator Contract\n * @notice CTokens which wrap an EIP-20 underlying and delegate to an implementation\n * @author Compound\n */\ncontract CErc20Delegator is CErc20DelegatorBase, DiamondBase {\n  /**\n   * @notice Emitted when implementation is changed\n   */\n  event NewImplementation(address oldImplementation, address newImplementation);\n\n  /**\n   * @notice Initialize the new money market\n   * @param underlying_ The address of the underlying asset\n   * @param comptroller_ The address of the Comptroller\n   * @param ionicAdmin_ The FeeDistributor contract address.\n   * @param interestRateModel_ The address of the interest rate model\n   * @param name_ ERC-20 name of this token\n   * @param symbol_ ERC-20 symbol of this token\n   */\n  constructor(\n    address underlying_,\n    IonicComptroller comptroller_,\n    address payable ionicAdmin_,\n    InterestRateModel interestRateModel_,\n    string memory name_,\n    string memory symbol_,\n    uint256 reserveFactorMantissa_,\n    uint256 adminFeeMantissa_\n  ) {\n    require(msg.sender == ionicAdmin_, \"!admin\");\n    uint8 decimals_ = EIP20Interface(underlying_).decimals();\n    {\n      ionicAdmin = ionicAdmin_;\n\n      // Set initial exchange rate\n      initialExchangeRateMantissa = 0.2e18;\n\n      // Set the comptroller\n      comptroller = comptroller_;\n\n      // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n      accrualBlockNumber = block.number;\n      borrowIndex = 1e18;\n\n      // Set the interest rate model (depends on block number / borrow index)\n      require(interestRateModel_.isInterestRateModel(), \"!notIrm\");\n      interestRateModel = interestRateModel_;\n      emit NewMarketInterestRateModel(InterestRateModel(address(0)), interestRateModel_);\n\n      name = name_;\n      symbol = symbol_;\n      decimals = decimals_;\n\n      // Set reserve factor\n      // Check newReserveFactor ≤ maxReserveFactor\n      require(\n        reserveFactorMantissa_ + adminFeeMantissa + ionicFeeMantissa <= reserveFactorPlusFeesMaxMantissa,\n        \"!rf:set\"\n      );\n      reserveFactorMantissa = reserveFactorMantissa_;\n      emit NewReserveFactor(0, reserveFactorMantissa_);\n\n      // Set admin fee\n      // Sanitize adminFeeMantissa_\n      if (adminFeeMantissa_ == type(uint256).max) adminFeeMantissa_ = adminFeeMantissa;\n      // Get latest Ionic fee\n      uint256 newIonicFeeMantissa = IFeeDistributor(ionicAdmin).interestFeeRate();\n      require(\n        reserveFactorMantissa + adminFeeMantissa_ + newIonicFeeMantissa <= reserveFactorPlusFeesMaxMantissa,\n        \"!adminFee:set\"\n      );\n      adminFeeMantissa = adminFeeMantissa_;\n      emit NewAdminFee(0, adminFeeMantissa_);\n      ionicFeeMantissa = newIonicFeeMantissa;\n      emit NewIonicFee(0, newIonicFeeMantissa);\n\n      // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n      _notEntered = true;\n    }\n\n    // Set underlying and sanity check it\n    underlying = underlying_;\n    EIP20Interface(underlying).totalSupply();\n  }\n\n  function implementation() public view returns (address) {\n    return LibDiamond.getExtensionForFunction(bytes4(keccak256(bytes(\"delegateType()\"))));\n  }\n\n  /**\n   * @notice Called by the admin to update the implementation of the delegator\n   * @param implementation_ The address of the new implementation for delegation\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n   */\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external override {\n    // Check admin rights\n    require(hasAdminRights(), \"!admin\");\n\n    // Set implementation\n    _setImplementationInternal(implementation_, becomeImplementationData);\n  }\n\n  /**\n   * @dev upgrades the implementation if necessary\n   */\n  function _upgrade() external override {\n    require(msg.sender == address(this) || hasAdminRights(), \"!self or admin\");\n\n    (bool success, bytes memory data) = address(this).staticcall(abi.encodeWithSignature(\"delegateType()\"));\n    require(success, \"no delegate type\");\n\n    uint8 currentDelegateType = abi.decode(data, (uint8));\n    (address latestCErc20Delegate, bytes memory becomeImplementationData) = IFeeDistributor(ionicAdmin)\n      .latestCErc20Delegate(currentDelegateType);\n\n    address currentDelegate = implementation();\n    if (currentDelegate != latestCErc20Delegate) {\n      _setImplementationInternal(latestCErc20Delegate, becomeImplementationData);\n    } else {\n      // only update the extensions without reinitializing with becomeImplementationData\n      _updateExtensions(currentDelegate);\n    }\n  }\n\n  /**\n   * @dev register a logic extension\n   * @param extensionToAdd the extension whose functions are to be added\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\n   */\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external override {\n    require(msg.sender == address(ionicAdmin), \"!unauthorized\");\n    LibDiamond.registerExtension(extensionToAdd, extensionToReplace);\n  }\n\n  /**\n   * @dev Internal function to update the implementation of the delegator\n   * @param implementation_ The address of the new implementation for delegation\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n   */\n  function _setImplementationInternal(address implementation_, bytes memory becomeImplementationData) internal {\n    address delegateBefore = implementation();\n    _updateExtensions(implementation_);\n\n    _functionCall(\n      address(this),\n      abi.encodeWithSelector(CDelegateInterface._becomeImplementation.selector, becomeImplementationData),\n      \"!become impl\"\n    );\n\n    emit NewImplementation(delegateBefore, implementation_);\n  }\n\n  function _updateExtensions(address newDelegate) internal {\n    address[] memory latestExtensions = IFeeDistributor(ionicAdmin).getCErc20DelegateExtensions(newDelegate);\n    address[] memory currentExtensions = LibDiamond.listExtensions();\n\n    // removed the current (old) extensions\n    for (uint256 i = 0; i < currentExtensions.length; i++) {\n      LibDiamond.removeExtension(DiamondExtension(currentExtensions[i]));\n    }\n    // add the new extensions\n    for (uint256 i = 0; i < latestExtensions.length; i++) {\n      LibDiamond.addExtension(DiamondExtension(latestExtensions[i]));\n    }\n  }\n\n  function _functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.call(data);\n\n    if (!success) {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n\n    return returndata;\n  }\n}\n"
    },
    "contracts/compound/CErc20PluginDelegate.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./CErc20Delegate.sol\";\nimport \"./EIP20Interface.sol\";\nimport \"./IERC4626.sol\";\nimport \"../external/uniswap/IUniswapV2Pair.sol\";\n\n/**\n * @title Rari's CErc20Plugin's Contract\n * @notice CToken which outsources token logic to a plugin\n * @author Joey Santoro\n *\n * CErc20PluginDelegate deposits and withdraws from a plugin contract\n * It is also capable of delegating reward functionality to a PluginRewardsDistributor\n */\ncontract CErc20PluginDelegate is CErc20Delegate {\n  event NewPluginImplementation(address oldImpl, address newImpl);\n\n  /**\n   * @notice Plugin address\n   */\n  IERC4626 public plugin;\n\n  function _getExtensionFunctions() public pure virtual override returns (bytes4[] memory functionSelectors) {\n    uint8 fnsCount = 2;\n\n    bytes4[] memory superFunctionSelectors = super._getExtensionFunctions();\n    functionSelectors = new bytes4[](superFunctionSelectors.length + fnsCount);\n\n    for (uint256 i = 0; i < superFunctionSelectors.length; i++) {\n      functionSelectors[i] = superFunctionSelectors[i];\n    }\n\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this.plugin.selector;\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this._updatePlugin.selector;\n\n    require(fnsCount == 0, \"use the correct array length\");\n  }\n\n  /**\n   * @notice Delegate interface to become the implementation\n   * @param data The encoded arguments for becoming\n   */\n  function _becomeImplementation(bytes memory data) public virtual override {\n    require(msg.sender == address(this) || hasAdminRights(), \"only self and admins can call _becomeImplementation\");\n\n    address _plugin = abi.decode(data, (address));\n\n    if (_plugin == address(0) && address(plugin) != address(0)) {\n      // if no new plugin address is given, use the latest implementation\n      _plugin = IFeeDistributor(ionicAdmin).latestPluginImplementation(address(plugin));\n    }\n\n    if (_plugin != address(0) && _plugin != address(plugin)) {\n      _updatePlugin(_plugin);\n    }\n  }\n\n  /**\n   * @notice Update the plugin implementation to a whitelisted implementation\n   * @param _plugin The address of the plugin implementation to use\n   */\n  function _updatePlugin(address _plugin) public {\n    require(msg.sender == address(this) || hasAdminRights(), \"only self and admins can call _updatePlugin\");\n\n    address oldImplementation = address(plugin) != address(0) ? address(plugin) : _plugin;\n\n    if (address(plugin) != address(0) && plugin.balanceOf(address(this)) != 0) {\n      plugin.redeem(plugin.balanceOf(address(this)), address(this), address(this));\n    }\n\n    plugin = IERC4626(_plugin);\n\n    EIP20Interface(underlying).approve(_plugin, type(uint256).max);\n\n    uint256 amount = EIP20Interface(underlying).balanceOf(address(this));\n    if (amount != 0) {\n      deposit(amount);\n    }\n\n    emit NewPluginImplementation(oldImplementation, _plugin);\n  }\n\n  /*** CToken Overrides ***/\n\n  /*** Safe Token ***/\n\n  /**\n   * @notice Gets balance of the plugin in terms of the underlying\n   * @return The quantity of underlying tokens owned by this contract\n   */\n  function getCashInternal() internal view override returns (uint256) {\n    return plugin.previewRedeem(plugin.balanceOf(address(this)));\n  }\n\n  /**\n   * @notice Transfer the underlying to the cToken and trigger a deposit\n   * @param from Address to transfer funds from\n   * @param amount Amount of underlying to transfer\n   * @return The actual amount that is transferred\n   */\n  function doTransferIn(address from, uint256 amount) internal override returns (uint256) {\n    // Perform the EIP-20 transfer in\n    require(EIP20Interface(underlying).transferFrom(from, address(this), amount), \"send\");\n\n    deposit(amount);\n    return amount;\n  }\n\n  function deposit(uint256 amount) internal {\n    plugin.deposit(amount, address(this));\n  }\n\n  /**\n   * @notice Transfer the underlying from plugin to destination\n   * @param to Address to transfer funds to\n   * @param amount Amount of underlying to transfer\n   */\n  function doTransferOut(address to, uint256 amount) internal override {\n    plugin.withdraw(amount, to, address(this));\n  }\n\n  function delegateType() public pure virtual override returns (uint8) {\n    return 2;\n  }\n\n  function contractType() external pure virtual override returns (string memory) {\n    return \"CErc20PluginDelegate\";\n  }\n}\n"
    },
    "contracts/compound/CErc20PluginRewardsDelegate.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./CErc20PluginDelegate.sol\";\n\ncontract CErc20PluginRewardsDelegate is CErc20PluginDelegate {\n  function _getExtensionFunctions() public pure virtual override returns (bytes4[] memory functionSelectors) {\n    uint8 fnsCount = 2;\n\n    bytes4[] memory superFunctionSelectors = super._getExtensionFunctions();\n    functionSelectors = new bytes4[](superFunctionSelectors.length + fnsCount);\n\n    for (uint256 i = 0; i < superFunctionSelectors.length; i++) {\n      functionSelectors[i] = superFunctionSelectors[i];\n    }\n\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this.claim.selector;\n    functionSelectors[--fnsCount + superFunctionSelectors.length] = this.approve.selector;\n\n    require(fnsCount == 0, \"use the correct array length\");\n  }\n\n  /// @notice A reward token claim function\n  /// to be overridden for use cases where rewardToken needs to be pulled in\n  function claim() external {}\n\n  /// @notice token approval function\n  function approve(address _token, address _spender) external {\n    require(hasAdminRights(), \"!admin\");\n    require(_token != underlying && _token != address(plugin), \"!token\");\n\n    EIP20Interface(_token).approve(_spender, type(uint256).max);\n  }\n\n  function delegateType() public pure virtual override returns (uint8) {\n    return 4;\n  }\n\n  function contractType() external pure override returns (string memory) {\n    return \"CErc20PluginRewardsDelegate\";\n  }\n}\n"
    },
    "contracts/compound/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\nimport { ComptrollerErrorReporter } from \"./ErrorReporter.sol\";\nimport { Exponential } from \"./Exponential.sol\";\nimport { BasePriceOracle } from \"../oracles/BasePriceOracle.sol\";\nimport { Unitroller } from \"./Unitroller.sol\";\nimport { IFeeDistributor } from \"./IFeeDistributor.sol\";\nimport { IIonicFlywheel } from \"../ionic/strategies/flywheel/IIonicFlywheel.sol\";\nimport { DiamondExtension, DiamondBase, LibDiamond } from \"../ionic/DiamondExtension.sol\";\nimport { ComptrollerExtensionInterface, ComptrollerBase, ComptrollerInterface } from \"./ComptrollerInterface.sol\";\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/**\n * @title Compound's Comptroller Contract\n * @author Compound\n * @dev This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\n */\ncontract Comptroller is ComptrollerBase, ComptrollerInterface, ComptrollerErrorReporter, Exponential, DiamondExtension {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @notice Emitted when an admin supports a market\n  event MarketListed(ICErc20 cToken);\n\n  /// @notice Emitted when an account enters a market\n  event MarketEntered(ICErc20 cToken, address account);\n\n  /// @notice Emitted when an account exits a market\n  event MarketExited(ICErc20 cToken, address account);\n\n  /// @notice Emitted when close factor is changed by admin\n  event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\n\n  /// @notice Emitted when a collateral factor is changed by admin\n  event NewCollateralFactor(ICErc20 cToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa);\n\n  /// @notice Emitted when liquidation incentive is changed by admin\n  event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\n\n  /// @notice Emitted when price oracle is changed\n  event NewPriceOracle(BasePriceOracle oldPriceOracle, BasePriceOracle newPriceOracle);\n\n  /// @notice Emitted when the whitelist enforcement is changed\n  event WhitelistEnforcementChanged(bool enforce);\n\n  /// @notice Emitted when a new RewardsDistributor contract is added to hooks\n  event AddedRewardsDistributor(address rewardsDistributor);\n\n  // closeFactorMantissa must be strictly greater than this value\n  uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n\n  // closeFactorMantissa must not exceed this value\n  uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n  // No collateralFactorMantissa may exceed this value\n  uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n\n  // liquidationIncentiveMantissa must be no less than this value\n  uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\n\n  // liquidationIncentiveMantissa must be no greater than this value\n  uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\n\n  modifier isAuthorized() {\n    require(IFeeDistributor(ionicAdmin).canCall(address(this), msg.sender, address(this), msg.sig), \"not authorized\");\n    _;\n  }\n\n  /*** Assets You Are In ***/\n\n  /**\n   * @notice Returns the assets an account has entered\n   * @param account The address of the account to pull assets for\n   * @return A dynamic list with the assets the account has entered\n   */\n  function getAssetsIn(address account) external view returns (ICErc20[] memory) {\n    ICErc20[] memory assetsIn = accountAssets[account];\n\n    return assetsIn;\n  }\n\n  /**\n   * @notice Returns whether the given account is entered in the given asset\n   * @param account The address of the account to check\n   * @param cToken The cToken to check\n   * @return True if the account is in the asset, otherwise false.\n   */\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool) {\n    return markets[address(cToken)].accountMembership[account];\n  }\n\n  /**\n   * @notice Add assets to be included in account liquidity calculation\n   * @param cTokens The list of addresses of the cToken markets to be enabled\n   * @return Success indicator for whether each corresponding market was entered\n   */\n  function enterMarkets(address[] memory cTokens) public override isAuthorized returns (uint256[] memory) {\n    uint256 len = cTokens.length;\n\n    uint256[] memory results = new uint256[](len);\n    for (uint256 i = 0; i < len; i++) {\n      ICErc20 cToken = ICErc20(cTokens[i]);\n\n      results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n    }\n\n    return results;\n  }\n\n  /**\n   * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n   * @param cToken The market to enter\n   * @param borrower The address of the account to modify\n   * @return Success indicator for whether the market was entered\n   */\n  function addToMarketInternal(ICErc20 cToken, address borrower) internal returns (Error) {\n    Market storage marketToJoin = markets[address(cToken)];\n\n    if (!marketToJoin.isListed) {\n      // market is not listed, cannot join\n      return Error.MARKET_NOT_LISTED;\n    }\n\n    if (marketToJoin.accountMembership[borrower] == true) {\n      // already joined\n      return Error.NO_ERROR;\n    }\n\n    // survived the gauntlet, add to list\n    // NOTE: we store these somewhat redundantly as a significant optimization\n    //  this avoids having to iterate through the list for the most common use cases\n    //  that is, only when we need to perform liquidity checks\n    //  and not whenever we want to check if an account is in a particular market\n    marketToJoin.accountMembership[borrower] = true;\n    accountAssets[borrower].push(cToken);\n\n    // Add to allBorrowers\n    if (!borrowers[borrower]) {\n      allBorrowers.push(borrower);\n      borrowers[borrower] = true;\n      borrowerIndexes[borrower] = allBorrowers.length - 1;\n    }\n\n    emit MarketEntered(cToken, borrower);\n\n    return Error.NO_ERROR;\n  }\n\n  /**\n   * @notice Removes asset from sender's account liquidity calculation\n   * @dev Sender must not have an outstanding borrow balance in the asset,\n   *  or be providing necessary collateral for an outstanding borrow.\n   * @param cTokenAddress The address of the asset to be removed\n   * @return Whether or not the account successfully exited the market\n   */\n  function exitMarket(address cTokenAddress) external override isAuthorized returns (uint256) {\n    // TODO\n    require(markets[cTokenAddress].isListed, \"!Comptroller:exitMarket\");\n\n    ICErc20 cToken = ICErc20(cTokenAddress);\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\n    (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\n    require(oErr == 0, \"!exitMarket\"); // semi-opaque error code\n\n    /* Fail if the sender has a borrow balance */\n    if (amountOwed != 0) {\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\n    }\n\n    /* Fail if the sender is not permitted to redeem all of their tokens */\n    uint256 allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\n    if (allowed != 0) {\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\n    }\n\n    Market storage marketToExit = markets[cTokenAddress];\n\n    /* Return true if the sender is not already ‘in’ the market */\n    if (!marketToExit.accountMembership[msg.sender]) {\n      return uint256(Error.NO_ERROR);\n    }\n\n    /* Set cToken account membership to false */\n    delete marketToExit.accountMembership[msg.sender];\n\n    /* Delete cToken from the account’s list of assets */\n    // load into memory for faster iteration\n    ICErc20[] memory userAssetList = accountAssets[msg.sender];\n    uint256 len = userAssetList.length;\n    uint256 assetIndex = len;\n    for (uint256 i = 0; i < len; i++) {\n      if (userAssetList[i] == ICErc20(cTokenAddress)) {\n        assetIndex = i;\n        break;\n      }\n    }\n\n    // We *must* have found the asset in the list or our redundant data structure is broken\n    assert(assetIndex < len);\n\n    // copy last item in list to location of item to be removed, reduce length by 1\n    ICErc20[] storage storedList = accountAssets[msg.sender];\n    storedList[assetIndex] = storedList[storedList.length - 1];\n    storedList.pop();\n\n    // If the user has exited all markets, remove them from the `allBorrowers` array\n    if (storedList.length == 0) {\n      allBorrowers[borrowerIndexes[msg.sender]] = allBorrowers[allBorrowers.length - 1]; // Copy last item in list to location of item to be removed\n      allBorrowers.pop(); // Reduce length by 1\n      borrowerIndexes[allBorrowers[borrowerIndexes[msg.sender]]] = borrowerIndexes[msg.sender]; // Set borrower index of moved item to correct index\n      borrowerIndexes[msg.sender] = 0; // Reset sender borrower index to 0 for a gas refund\n      borrowers[msg.sender] = false; // Tell the contract that the sender is no longer a borrower (so it knows to add the borrower back if they enter a market in the future)\n    }\n\n    emit MarketExited(ICErc20(cTokenAddress), msg.sender);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /*** Policy Hooks ***/\n\n  /**\n   * @notice Checks if the account should be allowed to mint tokens in the given market\n   * @param cTokenAddress The market to verify the mint against\n   * @param minter The account which would get the minted tokens\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n   * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function mintAllowed(\n    address cTokenAddress,\n    address minter,\n    uint256 mintAmount\n  ) external override returns (uint256) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    require(!mintGuardianPaused[cTokenAddress], \"!mint:paused\");\n\n    // Make sure market is listed\n    if (!markets[cTokenAddress].isListed) {\n      return uint256(Error.MARKET_NOT_LISTED);\n    }\n\n    // Make sure minter is whitelisted\n    if (enforceWhitelist && !whitelist[minter]) {\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\n    }\n\n    // Check supply cap\n    uint256 supplyCap = supplyCaps[cTokenAddress];\n    // Supply cap of 0 corresponds to unlimited supplying\n    if (supplyCap != 0 && !supplyCapWhitelist[cTokenAddress].contains(minter)) {\n      uint256 totalUnderlyingSupply = ICErc20(cTokenAddress).getTotalUnderlyingSupplied();\n      uint256 whitelistedSuppliersSupply = asComptrollerExtension().getWhitelistedSuppliersSupply(cTokenAddress);\n      uint256 nonWhitelistedTotalSupply;\n      if (whitelistedSuppliersSupply >= totalUnderlyingSupply) nonWhitelistedTotalSupply = 0;\n      else nonWhitelistedTotalSupply = totalUnderlyingSupply - whitelistedSuppliersSupply;\n\n      require(nonWhitelistedTotalSupply + mintAmount < supplyCap, \"!supply cap\");\n    }\n\n    // Keep the flywheel moving\n    flywheelPreSupplierAction(cTokenAddress, minter);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\n   * @param cToken The market to verify the redeem against\n   * @param redeemer The account which would redeem the tokens\n   * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n   * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function redeemAllowed(\n    address cToken,\n    address redeemer,\n    uint256 redeemTokens\n  ) external override returns (uint256) {\n    uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\n    if (allowed != uint256(Error.NO_ERROR)) {\n      return allowed;\n    }\n\n    // Keep the flywheel moving\n    flywheelPreSupplierAction(cToken, redeemer);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  function redeemAllowedInternal(\n    address cToken,\n    address redeemer,\n    uint256 redeemTokens\n  ) internal view returns (uint256) {\n    if (!markets[cToken].isListed) {\n      return uint256(Error.MARKET_NOT_LISTED);\n    }\n\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n    if (!markets[cToken].accountMembership[redeemer]) {\n      return uint256(Error.NO_ERROR);\n    }\n\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n    (Error err, , , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\n      redeemer,\n      ICErc20(cToken),\n      redeemTokens,\n      0,\n      0\n    );\n    if (err != Error.NO_ERROR) {\n      return uint256(err);\n    }\n    if (shortfall > 0) {\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\n    }\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Validates mint and reverts on rejection. May emit logs.\n   * @param cToken Asset being minted\n   * @param minter The address minting the tokens\n   * @param actualMintAmount The amount of the underlying asset being minted\n   * @param mintTokens The number of tokens being minted\n   */\n  function mintVerify(\n    address cToken,\n    address minter,\n    uint256 actualMintAmount,\n    uint256 mintTokens\n  ) external {\n    // Add minter to suppliers mapping\n    suppliers[minter] = true;\n  }\n\n  /**\n   * @notice Validates redeem and reverts on rejection. May emit logs.\n   * @param cToken Asset being redeemed\n   * @param redeemer The address redeeming the tokens\n   * @param redeemAmount The amount of the underlying asset being redeemed\n   * @param redeemTokens The number of tokens being redeemed\n   */\n  function redeemVerify(\n    address cToken,\n    address redeemer,\n    uint256 redeemAmount,\n    uint256 redeemTokens\n  ) external override {\n    require(markets[msg.sender].isListed, \"!market\");\n\n    // Require tokens is zero or amount is also zero\n    if (redeemTokens == 0 && redeemAmount > 0) {\n      revert(\"!zero\");\n    }\n  }\n\n  function getMaxRedeemOrBorrow(\n    address account,\n    ICErc20 cTokenModify,\n    bool isBorrow\n  ) external view override returns (uint256) {\n    address cToken = address(cTokenModify);\n    // Accrue interest\n    uint256 balanceOfUnderlying = cTokenModify.balanceOfUnderlying(account);\n\n    // Get account liquidity\n    (Error err, , uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\n      account,\n      isBorrow ? cTokenModify : ICErc20(address(0)),\n      0,\n      0,\n      0\n    );\n    require(err == Error.NO_ERROR, \"!liquidity\");\n    if (shortfall > 0) return 0; // Shortfall, so no more borrow/redeem\n\n    // Get max borrow/redeem\n    uint256 maxBorrowOrRedeemAmount;\n\n    if (!isBorrow && !markets[cToken].accountMembership[account]) {\n      // Max redeem = balance of underlying if not used as collateral\n      maxBorrowOrRedeemAmount = balanceOfUnderlying;\n    } else {\n      // Avoid \"stack too deep\" error by separating this logic\n      maxBorrowOrRedeemAmount = _getMaxRedeemOrBorrow(liquidity, cTokenModify, isBorrow);\n\n      // Redeem only: max out at underlying balance\n      if (!isBorrow && balanceOfUnderlying < maxBorrowOrRedeemAmount) maxBorrowOrRedeemAmount = balanceOfUnderlying;\n    }\n\n    // Get max borrow or redeem considering cToken liquidity\n    uint256 cTokenLiquidity = cTokenModify.getCash();\n\n    // Return the minimum of the two maximums\n    return maxBorrowOrRedeemAmount <= cTokenLiquidity ? maxBorrowOrRedeemAmount : cTokenLiquidity;\n  }\n\n  /**\n   * @dev Portion of the logic in `getMaxRedeemOrBorrow` above separated to avoid \"stack too deep\" errors.\n   */\n  function _getMaxRedeemOrBorrow(\n    uint256 liquidity,\n    ICErc20 cTokenModify,\n    bool isBorrow\n  ) internal view returns (uint256) {\n    if (liquidity == 0) return 0; // No available account liquidity, so no more borrow/redeem\n\n    // Get the normalized price of the asset\n    uint256 conversionFactor = oracle.getUnderlyingPrice(cTokenModify);\n    require(conversionFactor > 0, \"!oracle\");\n\n    // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n    if (!isBorrow) {\n      uint256 collateralFactorMantissa = markets[address(cTokenModify)].collateralFactorMantissa;\n      conversionFactor = (collateralFactorMantissa * conversionFactor) / 1e18;\n    }\n\n    // Get max borrow or redeem considering excess account liquidity\n    return (liquidity * 1e18) / conversionFactor;\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n   * @param cToken The market to verify the borrow against\n   * @param borrower The account which would borrow the asset\n   * @param borrowAmount The amount of underlying the account would borrow\n   * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function borrowAllowed(\n    address cToken,\n    address borrower,\n    uint256 borrowAmount\n  ) external override returns (uint256) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    require(!borrowGuardianPaused[cToken], \"!borrow:paused\");\n\n    // Make sure market is listed\n    if (!markets[cToken].isListed) {\n      return uint256(Error.MARKET_NOT_LISTED);\n    }\n\n    if (!markets[cToken].accountMembership[borrower]) {\n      // only cTokens may call borrowAllowed if borrower not in market\n      require(msg.sender == cToken, \"!ctoken\");\n\n      // attempt to add borrower to the market\n      Error err = addToMarketInternal(ICErc20(msg.sender), borrower);\n      if (err != Error.NO_ERROR) {\n        return uint256(err);\n      }\n\n      // it should be impossible to break the important invariant\n      assert(markets[cToken].accountMembership[borrower]);\n    }\n\n    // Make sure oracle price is available\n    if (oracle.getUnderlyingPrice(ICErc20(cToken)) == 0) {\n      return uint256(Error.PRICE_ERROR);\n    }\n\n    // Make sure borrower is whitelisted\n    if (enforceWhitelist && !whitelist[borrower]) {\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\n    }\n\n    // Check borrow cap\n    uint256 borrowCap = borrowCaps[cToken];\n    // Borrow cap of 0 corresponds to unlimited borrowing\n    if (borrowCap != 0 && !borrowCapWhitelist[cToken].contains(borrower)) {\n      uint256 totalBorrows = ICErc20(cToken).totalBorrowsCurrent();\n      uint256 whitelistedBorrowersBorrows = asComptrollerExtension().getWhitelistedBorrowersBorrows(cToken);\n      uint256 nonWhitelistedTotalBorrows;\n      if (whitelistedBorrowersBorrows >= totalBorrows) nonWhitelistedTotalBorrows = 0;\n      else nonWhitelistedTotalBorrows = totalBorrows - whitelistedBorrowersBorrows;\n\n      require(nonWhitelistedTotalBorrows + borrowAmount < borrowCap, \"!borrow:cap\");\n    }\n\n    // Keep the flywheel moving\n    flywheelPreBorrowerAction(cToken, borrower);\n\n    // Perform a hypothetical liquidity check to guard against shortfall\n    (uint256 err, , , uint256 shortfall) = this.getHypotheticalAccountLiquidity(borrower, cToken, 0, borrowAmount, 0);\n    if (err != uint256(Error.NO_ERROR)) {\n      return err;\n    }\n    if (shortfall > 0) {\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\n    }\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n   * @param cToken Asset whose underlying is being borrowed\n   * @param accountBorrowsNew The user's new borrow balance of the underlying asset\n   */\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view override returns (uint256) {\n    // Check if min borrow exists\n    uint256 minBorrowEth = IFeeDistributor(ionicAdmin).minBorrowEth();\n\n    if (minBorrowEth > 0) {\n      // Get new underlying borrow balance of account for this cToken\n      uint256 oraclePriceMantissa = oracle.getUnderlyingPrice(ICErc20(cToken));\n      if (oraclePriceMantissa == 0) return uint256(Error.PRICE_ERROR);\n      (MathError mathErr, uint256 borrowBalanceEth) = mulScalarTruncate(\n        Exp({ mantissa: oraclePriceMantissa }),\n        accountBorrowsNew\n      );\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\n\n      // Check against min borrow\n      if (borrowBalanceEth < minBorrowEth) return uint256(Error.BORROW_BELOW_MIN);\n    }\n\n    // Return no error\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\n   * @param cToken The market to verify the repay against\n   * @param payer The account which would repay the asset\n   * @param borrower The account which would borrowed the asset\n   * @param repayAmount The amount of the underlying asset the account would repay\n   * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function repayBorrowAllowed(\n    address cToken,\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) external override returns (uint256) {\n    // Make sure market is listed\n    if (!markets[cToken].isListed) {\n      return uint256(Error.MARKET_NOT_LISTED);\n    }\n\n    // Keep the flywheel moving\n    flywheelPreBorrowerAction(cToken, borrower);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Checks if the liquidation should be allowed to occur\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\n   * @param liquidator The address repaying the borrow and seizing the collateral\n   * @param borrower The address of the borrower\n   * @param repayAmount The amount of underlying being repaid\n   */\n  function liquidateBorrowAllowed(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount\n  ) external override returns (uint256) {\n    // Make sure markets are listed\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\n      return uint256(Error.MARKET_NOT_LISTED);\n    }\n\n    // Get borrowers' underlying borrow balance\n    uint256 borrowBalance = ICErc20(cTokenBorrowed).borrowBalanceCurrent(borrower);\n\n    /* allow accounts to be liquidated if the market is deprecated */\n    if (isDeprecated(ICErc20(cTokenBorrowed))) {\n      require(borrowBalance >= repayAmount, \"!borrow>repay\");\n    } else {\n      /* The borrower must have shortfall in order to be liquidateable */\n      (Error err, , , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\n        borrower,\n        ICErc20(address(0)),\n        0,\n        0,\n        0\n      );\n      if (err != Error.NO_ERROR) {\n        return uint256(err);\n      }\n\n      if (shortfall == 0) {\n        return uint256(Error.INSUFFICIENT_SHORTFALL);\n      }\n\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\n      uint256 maxClose = mul_ScalarTruncate(Exp({ mantissa: closeFactorMantissa }), borrowBalance);\n      if (repayAmount > maxClose) {\n        return uint256(Error.TOO_MUCH_REPAY);\n      }\n    }\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Checks if the seizing of assets should be allowed to occur\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\n   * @param liquidator The address repaying the borrow and seizing the collateral\n   * @param borrower The address of the borrower\n   * @param seizeTokens The number of collateral tokens to seize\n   */\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external override returns (uint256) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    require(!seizeGuardianPaused, \"!seize:paused\");\n\n    // Make sure markets are listed\n    if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\n      return uint256(Error.MARKET_NOT_LISTED);\n    }\n\n    // Make sure cToken Comptrollers are identical\n    if (ICErc20(cTokenCollateral).comptroller() != ICErc20(cTokenBorrowed).comptroller()) {\n      return uint256(Error.COMPTROLLER_MISMATCH);\n    }\n\n    // Keep the flywheel moving\n    flywheelPreTransferAction(cTokenCollateral, borrower, liquidator);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\n   * @param cToken The market to verify the transfer against\n   * @param src The account which sources the tokens\n   * @param dst The account which receives the tokens\n   * @param transferTokens The number of cTokens to transfer\n   * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n   */\n  function transferAllowed(\n    address cToken,\n    address src,\n    address dst,\n    uint256 transferTokens\n  ) external override returns (uint256) {\n    // Pausing is a very serious situation - we revert to sound the alarms\n    require(!transferGuardianPaused, \"!transfer:paused\");\n\n    // Currently the only consideration is whether or not\n    //  the src is allowed to redeem this many tokens\n    uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\n    if (allowed != uint256(Error.NO_ERROR)) {\n      return allowed;\n    }\n\n    // Keep the flywheel moving\n    flywheelPreTransferAction(cToken, src, dst);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /*** Flywheel Hooks ***/\n\n  /**\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\n   * @param cToken The relevant market\n   * @param supplier The minter/redeemer\n   */\n  function flywheelPreSupplierAction(address cToken, address supplier) internal {\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreSupplierAction(cToken, supplier);\n  }\n\n  /**\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\n   * @param cToken The relevant market\n   * @param borrower The borrower\n   */\n  function flywheelPreBorrowerAction(address cToken, address borrower) internal {\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreBorrowerAction(cToken, borrower);\n  }\n\n  /**\n   * @notice Keeps the flywheel moving pre-transfer and pre-seize\n   * @param cToken The relevant market\n   * @param src The account which sources the tokens\n   * @param dst The account which receives the tokens\n   */\n  function flywheelPreTransferAction(\n    address cToken,\n    address src,\n    address dst\n  ) internal {\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreTransferAction(cToken, src, dst);\n  }\n\n  /*** Liquidity/Liquidation Calculations ***/\n\n  /**\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n   *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n   *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n   */\n  struct AccountLiquidityLocalVars {\n    ICErc20 asset;\n    uint256 sumCollateral;\n    uint256 sumBorrowPlusEffects;\n    uint256 cTokenBalance;\n    uint256 borrowBalance;\n    uint256 exchangeRateMantissa;\n    uint256 oraclePriceMantissa;\n    Exp collateralFactor;\n    Exp exchangeRate;\n    Exp oraclePrice;\n    Exp tokensToDenom;\n    uint256 borrowCapForCollateral;\n    uint256 borrowedAssetPrice;\n    uint256 assetAsCollateralValueCap;\n  }\n\n  function getAccountLiquidity(address account)\n    public\n    view\n    override\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    (\n      Error err,\n      uint256 collateralValue,\n      uint256 liquidity,\n      uint256 shortfall\n    ) = getHypotheticalAccountLiquidityInternal(account, ICErc20(address(0)), 0, 0, 0);\n    return (uint256(err), collateralValue, liquidity, shortfall);\n  }\n\n  /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount,\n    uint256 repayAmount\n  )\n    public\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    (\n      Error err,\n      uint256 collateralValue,\n      uint256 liquidity,\n      uint256 shortfall\n    ) = getHypotheticalAccountLiquidityInternal(\n        account,\n        ICErc20(cTokenModify),\n        redeemTokens,\n        borrowAmount,\n        repayAmount\n      );\n    return (uint256(err), collateralValue, liquidity, shortfall);\n  }\n\n  /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code,\n                hypothetical account collateral value,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n  function getHypotheticalAccountLiquidityInternal(\n    address account,\n    ICErc20 cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount,\n    uint256 repayAmount\n  )\n    internal\n    view\n    returns (\n      Error,\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n\n    if (address(cTokenModify) != address(0)) {\n      vars.borrowedAssetPrice = oracle.getUnderlyingPrice(cTokenModify);\n    }\n\n    // For each asset the account is in\n    for (uint256 i = 0; i < accountAssets[account].length; i++) {\n      vars.asset = accountAssets[account][i];\n\n      {\n        // Read the balances and exchange rate from the cToken\n        uint256 oErr;\n        (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = vars.asset.getAccountSnapshot(\n          account\n        );\n        if (oErr != 0) {\n          // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n          return (Error.SNAPSHOT_ERROR, 0, 0, 0);\n        }\n      }\n      {\n        vars.collateralFactor = Exp({ mantissa: markets[address(vars.asset)].collateralFactorMantissa });\n        vars.exchangeRate = Exp({ mantissa: vars.exchangeRateMantissa });\n\n        // Get the normalized price of the asset\n        vars.oraclePriceMantissa = oracle.getUnderlyingPrice(vars.asset);\n        if (vars.oraclePriceMantissa == 0) {\n          return (Error.PRICE_ERROR, 0, 0, 0);\n        }\n        vars.oraclePrice = Exp({ mantissa: vars.oraclePriceMantissa });\n\n        // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n        vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\n      }\n      {\n        // Exclude the asset-to-be-borrowed from the liquidity, except for when redeeming\n        vars.assetAsCollateralValueCap = asComptrollerExtension().getAssetAsCollateralValueCap(\n          vars.asset,\n          cTokenModify,\n          redeemTokens > 0,\n          account\n        );\n\n        // accumulate the collateral value to sumCollateral\n        uint256 assetCollateralValue = mul_ScalarTruncate(vars.tokensToDenom, vars.cTokenBalance);\n        if (assetCollateralValue > vars.assetAsCollateralValueCap)\n          assetCollateralValue = vars.assetAsCollateralValueCap;\n        vars.sumCollateral += assetCollateralValue;\n      }\n\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n        vars.oraclePrice,\n        vars.borrowBalance,\n        vars.sumBorrowPlusEffects\n      );\n\n      // Calculate effects of interacting with cTokenModify\n      if (vars.asset == cTokenModify) {\n        // redeem effect\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n          vars.tokensToDenom,\n          redeemTokens,\n          vars.sumBorrowPlusEffects\n        );\n\n        // borrow effect\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n          vars.oraclePrice,\n          borrowAmount,\n          vars.sumBorrowPlusEffects\n        );\n\n        uint256 repayEffect = mul_ScalarTruncate(vars.oraclePrice, repayAmount);\n        if (repayEffect >= vars.sumBorrowPlusEffects) {\n          vars.sumBorrowPlusEffects = 0;\n        } else {\n          vars.sumBorrowPlusEffects -= repayEffect;\n        }\n      }\n    }\n\n    // These are safe, as the underflow condition is checked first\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n      return (Error.NO_ERROR, vars.sumCollateral, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\n    } else {\n      return (Error.NO_ERROR, vars.sumCollateral, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\n    }\n  }\n\n  /**\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n   * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n   * @param cTokenBorrowed The address of the borrowed cToken\n   * @param cTokenCollateral The address of the collateral cToken\n   * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n   * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n   */\n  function liquidateCalculateSeizeTokens(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    uint256 actualRepayAmount\n  ) external view override returns (uint256, uint256) {\n    /* Read oracle prices for borrowed and collateral markets */\n    uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(ICErc20(cTokenBorrowed));\n    uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(ICErc20(cTokenCollateral));\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n      return (uint256(Error.PRICE_ERROR), 0);\n    }\n\n    /*\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n     *  seizeTokens = seizeAmount / exchangeRate\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n     */\n    ICErc20 collateralCToken = ICErc20(cTokenCollateral);\n    uint256 exchangeRateMantissa = collateralCToken.exchangeRateCurrent();\n    uint256 seizeTokens;\n    Exp memory numerator;\n    Exp memory denominator;\n    Exp memory ratio;\n\n    uint256 protocolSeizeShareMantissa = collateralCToken.protocolSeizeShareMantissa();\n    uint256 feeSeizeShareMantissa = collateralCToken.feeSeizeShareMantissa();\n\n    /*\n     * The liquidation penalty includes\n     * - the liquidator incentive\n     * - the protocol fees (Ionic admin fees)\n     * - the market fee\n     */\n    Exp memory totalPenaltyMantissa = add_(\n      add_(Exp({ mantissa: liquidationIncentiveMantissa }), Exp({ mantissa: protocolSeizeShareMantissa })),\n      Exp({ mantissa: feeSeizeShareMantissa })\n    );\n\n    numerator = mul_(totalPenaltyMantissa, Exp({ mantissa: priceBorrowedMantissa }));\n    denominator = mul_(Exp({ mantissa: priceCollateralMantissa }), Exp({ mantissa: exchangeRateMantissa }));\n    ratio = div_(numerator, denominator);\n\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\n    return (uint256(Error.NO_ERROR), seizeTokens);\n  }\n\n  /*** Admin Functions ***/\n\n  /**\n   * @notice Add a RewardsDistributor contracts.\n   * @dev Admin function to add a RewardsDistributor contract\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _addRewardsDistributor(address distributor) external returns (uint256) {\n    require(hasAdminRights(), \"!admin\");\n\n    // Check marker method\n    require(IIonicFlywheel(distributor).isRewardsDistributor(), \"!isRewardsDistributor\");\n\n    // Check for existing RewardsDistributor\n    for (uint256 i = 0; i < rewardsDistributors.length; i++) require(distributor != rewardsDistributors[i], \"!added\");\n\n    // Add RewardsDistributor to array\n    rewardsDistributors.push(distributor);\n    emit AddedRewardsDistributor(distributor);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sets the whitelist enforcement for the comptroller\n   * @dev Admin function to set a new whitelist enforcement boolean\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256) {\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_ENFORCEMENT_OWNER_CHECK);\n    }\n\n    // Check if `enforceWhitelist` already equals `enforce`\n    if (enforceWhitelist == enforce) {\n      return uint256(Error.NO_ERROR);\n    }\n\n    // Set comptroller's `enforceWhitelist` to `enforce`\n    enforceWhitelist = enforce;\n\n    // Emit WhitelistEnforcementChanged(bool enforce);\n    emit WhitelistEnforcementChanged(enforce);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sets the whitelist `statuses` for `suppliers`\n   * @dev Admin function to set the whitelist `statuses` for `suppliers`\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external returns (uint256) {\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_STATUS_OWNER_CHECK);\n    }\n\n    // Set whitelist statuses for suppliers\n    for (uint256 i = 0; i < suppliers.length; i++) {\n      address supplier = suppliers[i];\n\n      if (statuses[i]) {\n        // If not already whitelisted, add to whitelist\n        if (!whitelist[supplier]) {\n          whitelist[supplier] = true;\n          whitelistArray.push(supplier);\n          whitelistIndexes[supplier] = whitelistArray.length - 1;\n        }\n      } else {\n        // If whitelisted, remove from whitelist\n        if (whitelist[supplier]) {\n          whitelistArray[whitelistIndexes[supplier]] = whitelistArray[whitelistArray.length - 1]; // Copy last item in list to location of item to be removed\n          whitelistArray.pop(); // Reduce length by 1\n          whitelistIndexes[whitelistArray[whitelistIndexes[supplier]]] = whitelistIndexes[supplier]; // Set whitelist index of moved item to correct index\n          whitelistIndexes[supplier] = 0; // Reset supplier whitelist index to 0 for a gas refund\n          whitelist[supplier] = false; // Tell the contract that the supplier is no longer whitelisted\n        }\n      }\n    }\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sets a new price oracle for the comptroller\n   * @dev Admin function to set a new price oracle\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setPriceOracle(BasePriceOracle newOracle) public returns (uint256) {\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\n    }\n\n    // Track the old oracle for the comptroller\n    BasePriceOracle oldOracle = oracle;\n\n    // Set comptroller's oracle to newOracle\n    oracle = newOracle;\n\n    // Emit NewPriceOracle(oldOracle, newOracle)\n    emit NewPriceOracle(oldOracle, newOracle);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sets the closeFactor used when liquidating borrows\n   * @dev Admin function to set closeFactor\n   * @param newCloseFactorMantissa New close factor, scaled by 1e18\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n   */\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\n    }\n\n    // Check limits\n    Exp memory newCloseFactorExp = Exp({ mantissa: newCloseFactorMantissa });\n    Exp memory lowLimit = Exp({ mantissa: closeFactorMinMantissa });\n    if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\n    }\n\n    Exp memory highLimit = Exp({ mantissa: closeFactorMaxMantissa });\n    if (lessThanExp(highLimit, newCloseFactorExp)) {\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\n    }\n\n    // Set pool close factor to new close factor, remember old value\n    uint256 oldCloseFactorMantissa = closeFactorMantissa;\n    closeFactorMantissa = newCloseFactorMantissa;\n\n    // Emit event\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sets the collateralFactor for a market\n   * @dev Admin function to set per-market collateralFactor\n   * @param cToken The market to set the factor on\n   * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n   */\n  function _setCollateralFactor(ICErc20 cToken, uint256 newCollateralFactorMantissa) public returns (uint256) {\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\n    }\n\n    // Verify market is listed\n    Market storage market = markets[address(cToken)];\n    if (!market.isListed) {\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\n    }\n\n    Exp memory newCollateralFactorExp = Exp({ mantissa: newCollateralFactorMantissa });\n\n    // Check collateral factor <= 0.9\n    Exp memory highLimit = Exp({ mantissa: collateralFactorMaxMantissa });\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\n    }\n\n    // If collateral factor != 0, fail if price == 0\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\n    }\n\n    // Set market's collateral factor to new collateral factor, remember old value\n    uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n    // Emit event with asset, old collateral factor, and new collateral factor\n    emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sets liquidationIncentive\n   * @dev Admin function to set liquidationIncentive\n   * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n   */\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\n    }\n\n    // Check de-scaled min <= newLiquidationIncentive <= max\n    Exp memory newLiquidationIncentive = Exp({ mantissa: newLiquidationIncentiveMantissa });\n    Exp memory minLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMinMantissa });\n    if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\n    }\n\n    Exp memory maxLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMaxMantissa });\n    if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\n    }\n\n    // Save current value for use in log\n    uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n    // Set liquidation incentive to new incentive\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n    // Emit event with old incentive, new incentive\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Add the market to the markets mapping and set it as listed\n   * @dev Admin function to set isListed and add support for the market\n   * @param cToken The address of the market (token) to list\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\n   */\n  function _supportMarket(ICErc20 cToken) internal returns (uint256) {\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n    }\n\n    // Is market already listed?\n    if (markets[address(cToken)].isListed) {\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n    }\n\n    // Check cToken.comptroller == this\n    require(address(cToken.comptroller()) == address(this), \"!comptroller\");\n\n    // Make sure market is not already listed\n    address underlying = ICErc20(address(cToken)).underlying();\n\n    if (address(cTokensByUnderlying[underlying]) != address(0)) {\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n    }\n\n    // List market and emit event\n    Market storage market = markets[address(cToken)];\n    market.isListed = true;\n    market.collateralFactorMantissa = 0;\n    allMarkets.push(cToken);\n    cTokensByUnderlying[underlying] = cToken;\n    emit MarketListed(cToken);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\n   * @dev Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\n   */\n  function _deployMarket(\n    uint8 delegateType,\n    bytes calldata constructorData,\n    bytes calldata becomeImplData,\n    uint256 collateralFactorMantissa\n  ) external returns (uint256) {\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n    }\n\n    // Temporarily enable Ionic admin rights for asset deployment (storing the original value)\n    bool oldIonicAdminHasRights = ionicAdminHasRights;\n    ionicAdminHasRights = true;\n\n    // Deploy via Ionic admin\n    ICErc20 cToken = ICErc20(IFeeDistributor(ionicAdmin).deployCErc20(delegateType, constructorData, becomeImplData));\n    // Reset Ionic admin rights to the original value\n    ionicAdminHasRights = oldIonicAdminHasRights;\n    // Support market here in the Comptroller\n    uint256 err = _supportMarket(cToken);\n\n    IFeeDistributor(ionicAdmin).authoritiesRegistry().reconfigureAuthority(address(this));\n\n    // Set collateral factor\n    return err == uint256(Error.NO_ERROR) ? _setCollateralFactor(cToken, collateralFactorMantissa) : err;\n  }\n\n  function _becomeImplementation() external {\n    require(msg.sender == address(this), \"!self call\");\n\n    if (!_notEnteredInitialized) {\n      _notEntered = true;\n      _notEnteredInitialized = true;\n    }\n  }\n\n  /*** Helper Functions ***/\n\n  /**\n   * @notice Returns true if the given cToken market has been deprecated\n   * @dev All borrows in a deprecated cToken market can be immediately liquidated\n   * @param cToken The market to check if deprecated\n   */\n  function isDeprecated(ICErc20 cToken) public view returns (bool) {\n    return\n      markets[address(cToken)].collateralFactorMantissa == 0 &&\n      borrowGuardianPaused[address(cToken)] == true &&\n      add_(add_(cToken.reserveFactorMantissa(), cToken.adminFeeMantissa()), cToken.ionicFeeMantissa()) == 1e18;\n  }\n\n  function asComptrollerExtension() internal view returns (ComptrollerExtensionInterface) {\n    return ComptrollerExtensionInterface(address(this));\n  }\n\n  function _getExtensionFunctions() external pure virtual override returns (bytes4[] memory functionSelectors) {\n    uint8 fnsCount = 30;\n\n    functionSelectors = new bytes4[](fnsCount);\n\n    functionSelectors[--fnsCount] = this.isDeprecated.selector;\n    functionSelectors[--fnsCount] = this._deployMarket.selector;\n    functionSelectors[--fnsCount] = this.getAssetsIn.selector;\n    functionSelectors[--fnsCount] = this.checkMembership.selector;\n    functionSelectors[--fnsCount] = this._setPriceOracle.selector;\n    functionSelectors[--fnsCount] = this._setCloseFactor.selector;\n    functionSelectors[--fnsCount] = this._setCollateralFactor.selector;\n    functionSelectors[--fnsCount] = this._setLiquidationIncentive.selector;\n    functionSelectors[--fnsCount] = this._setWhitelistEnforcement.selector;\n    functionSelectors[--fnsCount] = this._setWhitelistStatuses.selector;\n    functionSelectors[--fnsCount] = this._addRewardsDistributor.selector;\n    functionSelectors[--fnsCount] = this.getHypotheticalAccountLiquidity.selector;\n    functionSelectors[--fnsCount] = this.getMaxRedeemOrBorrow.selector;\n    functionSelectors[--fnsCount] = this.enterMarkets.selector;\n    functionSelectors[--fnsCount] = this.exitMarket.selector;\n    functionSelectors[--fnsCount] = this.mintAllowed.selector;\n    functionSelectors[--fnsCount] = this.redeemAllowed.selector;\n    functionSelectors[--fnsCount] = this.redeemVerify.selector;\n    functionSelectors[--fnsCount] = this.borrowAllowed.selector;\n    functionSelectors[--fnsCount] = this.borrowWithinLimits.selector;\n    functionSelectors[--fnsCount] = this.repayBorrowAllowed.selector;\n    functionSelectors[--fnsCount] = this.liquidateBorrowAllowed.selector;\n    functionSelectors[--fnsCount] = this.seizeAllowed.selector;\n    functionSelectors[--fnsCount] = this.transferAllowed.selector;\n    functionSelectors[--fnsCount] = this.mintVerify.selector;\n    functionSelectors[--fnsCount] = this.getAccountLiquidity.selector;\n    functionSelectors[--fnsCount] = this.liquidateCalculateSeizeTokens.selector;\n    functionSelectors[--fnsCount] = this._beforeNonReentrant.selector;\n    functionSelectors[--fnsCount] = this._afterNonReentrant.selector;\n    functionSelectors[--fnsCount] = this._becomeImplementation.selector;\n\n    require(fnsCount == 0, \"use the correct array length\");\n  }\n\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\n\n  /**\n   * @dev Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention.\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\n   */\n  function _beforeNonReentrant() external override {\n    require(markets[msg.sender].isListed, \"!Comptroller:_beforeNonReentrant\");\n    require(_notEntered, \"!reentered\");\n    _notEntered = false;\n  }\n\n  /**\n   * @dev Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention.\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\n   */\n  function _afterNonReentrant() external override {\n    require(markets[msg.sender].isListed, \"!Comptroller:_afterNonReentrant\");\n    _notEntered = true; // get a gas-refund post-Istanbul\n  }\n}\n"
    },
    "contracts/compound/ComptrollerFirstExtension.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { DiamondExtension } from \"../ionic/DiamondExtension.sol\";\nimport { ComptrollerErrorReporter } from \"../compound/ErrorReporter.sol\";\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\nimport { ComptrollerExtensionInterface, ComptrollerBase, SFSRegister } from \"./ComptrollerInterface.sol\";\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract ComptrollerFirstExtension is\n  DiamondExtension,\n  ComptrollerBase,\n  ComptrollerExtensionInterface,\n  ComptrollerErrorReporter\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @notice Emitted when supply cap for a cToken is changed\n  event NewSupplyCap(ICErc20 indexed cToken, uint256 newSupplyCap);\n\n  /// @notice Emitted when borrow cap for a cToken is changed\n  event NewBorrowCap(ICErc20 indexed cToken, uint256 newBorrowCap);\n\n  /// @notice Emitted when borrow cap guardian is changed\n  event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\n\n  /// @notice Emitted when pause guardian is changed\n  event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n  /// @notice Emitted when an action is paused globally\n  event ActionPaused(string action, bool pauseState);\n\n  /// @notice Emitted when an action is paused on a market\n  event MarketActionPaused(ICErc20 cToken, string action, bool pauseState);\n\n  /// @notice Emitted when an admin unsupports a market\n  event MarketUnlisted(ICErc20 cToken);\n\n  function _getExtensionFunctions() external pure virtual override returns (bytes4[] memory) {\n    uint8 fnsCount = 33;\n    bytes4[] memory functionSelectors = new bytes4[](fnsCount);\n    functionSelectors[--fnsCount] = this.addNonAccruingFlywheel.selector;\n    functionSelectors[--fnsCount] = this._setMarketSupplyCaps.selector;\n    functionSelectors[--fnsCount] = this._setMarketBorrowCaps.selector;\n    functionSelectors[--fnsCount] = this._setBorrowCapForCollateralWhitelist.selector;\n    functionSelectors[--fnsCount] = this._blacklistBorrowingAgainstCollateralWhitelist.selector;\n    functionSelectors[--fnsCount] = this._supplyCapWhitelist.selector;\n    functionSelectors[--fnsCount] = this._borrowCapWhitelist.selector;\n    functionSelectors[--fnsCount] = this._setBorrowCapGuardian.selector;\n    functionSelectors[--fnsCount] = this._setPauseGuardian.selector;\n    functionSelectors[--fnsCount] = this._setMintPaused.selector;\n    functionSelectors[--fnsCount] = this._setBorrowPaused.selector;\n    functionSelectors[--fnsCount] = this._setTransferPaused.selector;\n    functionSelectors[--fnsCount] = this._setSeizePaused.selector;\n    functionSelectors[--fnsCount] = this._unsupportMarket.selector;\n    functionSelectors[--fnsCount] = this.getAllMarkets.selector;\n    functionSelectors[--fnsCount] = this.getAllBorrowers.selector;\n    functionSelectors[--fnsCount] = this.getAllBorrowersCount.selector;\n    functionSelectors[--fnsCount] = this.getPaginatedBorrowers.selector;\n    functionSelectors[--fnsCount] = this.getWhitelist.selector;\n    functionSelectors[--fnsCount] = this.getRewardsDistributors.selector;\n    functionSelectors[--fnsCount] = this.isUserOfPool.selector;\n    functionSelectors[--fnsCount] = this.getAccruingFlywheels.selector;\n    functionSelectors[--fnsCount] = this._removeFlywheel.selector;\n    functionSelectors[--fnsCount] = this._setBorrowCapForCollateral.selector;\n    functionSelectors[--fnsCount] = this._blacklistBorrowingAgainstCollateral.selector;\n    functionSelectors[--fnsCount] = this.isBorrowCapForCollateralWhitelisted.selector;\n    functionSelectors[--fnsCount] = this.isBlacklistBorrowingAgainstCollateralWhitelisted.selector;\n    functionSelectors[--fnsCount] = this.isSupplyCapWhitelisted.selector;\n    functionSelectors[--fnsCount] = this.isBorrowCapWhitelisted.selector;\n    functionSelectors[--fnsCount] = this.getWhitelistedSuppliersSupply.selector;\n    functionSelectors[--fnsCount] = this.getWhitelistedBorrowersBorrows.selector;\n    functionSelectors[--fnsCount] = this.getAssetAsCollateralValueCap.selector;\n    functionSelectors[--fnsCount] = this.registerInSFS.selector;\n    require(fnsCount == 0, \"use the correct array length\");\n    return functionSelectors;\n  }\n\n  /**\n   * @notice Returns true if the accruing flyhwheel was found and replaced\n   * @dev Adds a flywheel to the non-accruing list and if already in the accruing, removes it from that list\n   * @param flywheelAddress The address of the flywheel to add to the non-accruing\n   */\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool) {\n    require(hasAdminRights(), \"!admin\");\n    require(flywheelAddress != address(0), \"!flywheel\");\n\n    for (uint256 i = 0; i < nonAccruingRewardsDistributors.length; i++) {\n      require(flywheelAddress != nonAccruingRewardsDistributors[i], \"!alreadyadded\");\n    }\n\n    // add it to the non-accruing\n    nonAccruingRewardsDistributors.push(flywheelAddress);\n\n    // remove it from the accruing\n    for (uint256 i = 0; i < rewardsDistributors.length; i++) {\n      if (flywheelAddress == rewardsDistributors[i]) {\n        rewardsDistributors[i] = rewardsDistributors[rewardsDistributors.length - 1];\n        rewardsDistributors.pop();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function getAssetAsCollateralValueCap(\n    ICErc20 collateral,\n    ICErc20 cTokenModify,\n    bool redeeming,\n    address account\n  ) external view returns (uint256) {\n    if (address(collateral) == address(cTokenModify) && !redeeming) {\n      // the collateral asset counts as 0 liquidity when borrowed\n      return 0;\n    }\n\n    uint256 assetAsCollateralValueCap = type(uint256).max;\n    if (address(cTokenModify) != address(0)) {\n      // if the borrowed asset is blacklisted against this collateral & account is not whitelisted\n      if (\n        borrowingAgainstCollateralBlacklist[address(cTokenModify)][address(collateral)] &&\n        !borrowingAgainstCollateralBlacklistWhitelist[address(cTokenModify)][address(collateral)].contains(account)\n      ) {\n        assetAsCollateralValueCap = 0;\n      } else {\n        // for each user the value of this kind of collateral is capped regardless of the amount borrowed\n        // denominated in the borrowed asset\n        uint256 borrowCapForCollateral = borrowCapForCollateral[address(cTokenModify)][address(collateral)];\n        // check if set to any value & account is not whitelisted\n        if (\n          borrowCapForCollateral != 0 &&\n          !borrowCapForCollateralWhitelist[address(cTokenModify)][address(collateral)].contains(account)\n        ) {\n          uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(cTokenModify);\n          // this asset usage as collateral is capped at the native value of the borrow cap\n          assetAsCollateralValueCap = (borrowCapForCollateral * borrowedAssetPrice) / 1e18;\n        }\n      }\n    }\n\n    // if there is any supply cap, don't allow donations to the market/plugin to go around it\n    if (supplyCaps[address(collateral)] > 0 && !supplyCapWhitelist[address(collateral)].contains(account)) {\n      uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateral);\n      uint256 supplyCapValue = (supplyCaps[address(collateral)] * collateralAssetPrice) / 1e18;\n      supplyCapValue = (supplyCapValue * markets[address(collateral)].collateralFactorMantissa) / 1e18;\n      if (supplyCapValue < assetAsCollateralValueCap) assetAsCollateralValueCap = supplyCapValue;\n    }\n\n    return assetAsCollateralValueCap;\n  }\n\n  /**\n   * @notice Set the given supply caps for the given cToken markets. Supplying that brings total underlying supply to or above supply cap will revert.\n   * @dev Admin or borrowCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\n   * @param cTokens The addresses of the markets (tokens) to change the supply caps for\n   * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\n   */\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external {\n    require(msg.sender == admin || msg.sender == borrowCapGuardian, \"!admin\");\n\n    uint256 numMarkets = cTokens.length;\n    uint256 numSupplyCaps = newSupplyCaps.length;\n\n    require(numMarkets != 0 && numMarkets == numSupplyCaps, \"!input\");\n\n    for (uint256 i = 0; i < numMarkets; i++) {\n      supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\n      emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\n    }\n  }\n\n  /**\n   * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\n   * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\n   * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\n   * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n   */\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external {\n    require(msg.sender == admin || msg.sender == borrowCapGuardian, \"!admin\");\n\n    uint256 numMarkets = cTokens.length;\n    uint256 numBorrowCaps = newBorrowCaps.length;\n\n    require(numMarkets != 0 && numMarkets == numBorrowCaps, \"!input\");\n\n    for (uint256 i = 0; i < numMarkets; i++) {\n      borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\n      emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\n    }\n  }\n\n  /**\n   * @notice Admin function to change the Borrow Cap Guardian\n   * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\n   */\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\n    require(msg.sender == admin, \"!admin\");\n\n    // Save current value for inclusion in log\n    address oldBorrowCapGuardian = borrowCapGuardian;\n\n    // Store borrowCapGuardian with value newBorrowCapGuardian\n    borrowCapGuardian = newBorrowCapGuardian;\n\n    // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n    emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n  }\n\n  /**\n   * @notice Admin function to change the Pause Guardian\n   * @param newPauseGuardian The address of the new Pause Guardian\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\n   */\n  function _setPauseGuardian(address newPauseGuardian) public returns (uint256) {\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\n    }\n\n    // Save current value for inclusion in log\n    address oldPauseGuardian = pauseGuardian;\n\n    // Store pauseGuardian with value newPauseGuardian\n    pauseGuardian = newPauseGuardian;\n\n    // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n    emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  function _setMintPaused(ICErc20 cToken, bool state) public returns (bool) {\n    require(markets[address(cToken)].isListed, \"!market\");\n    require(msg.sender == pauseGuardian || hasAdminRights(), \"!guardian\");\n    require(hasAdminRights() || state == true, \"!admin\");\n\n    mintGuardianPaused[address(cToken)] = state;\n    emit MarketActionPaused(cToken, \"Mint\", state);\n    return state;\n  }\n\n  function _setBorrowPaused(ICErc20 cToken, bool state) public returns (bool) {\n    require(markets[address(cToken)].isListed, \"!market\");\n    require(msg.sender == pauseGuardian || hasAdminRights(), \"!guardian\");\n    require(hasAdminRights() || state == true, \"!admin\");\n\n    borrowGuardianPaused[address(cToken)] = state;\n    emit MarketActionPaused(cToken, \"Borrow\", state);\n    return state;\n  }\n\n  function _setTransferPaused(bool state) public returns (bool) {\n    require(msg.sender == pauseGuardian || hasAdminRights(), \"!guardian\");\n    require(hasAdminRights() || state == true, \"!admin\");\n\n    transferGuardianPaused = state;\n    emit ActionPaused(\"Transfer\", state);\n    return state;\n  }\n\n  function _setSeizePaused(bool state) public returns (bool) {\n    require(msg.sender == pauseGuardian || hasAdminRights(), \"!guardian\");\n    require(hasAdminRights() || state == true, \"!admin\");\n\n    seizeGuardianPaused = state;\n    emit ActionPaused(\"Seize\", state);\n    return state;\n  }\n\n  /**\n   * @notice Removed a market from the markets mapping and sets it as unlisted\n   * @dev Admin function unset isListed and collateralFactorMantissa and unadd support for the market\n   * @param cToken The address of the market (token) to unlist\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\n   */\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256) {\n    // Check admin rights\n    if (!hasAdminRights()) return fail(Error.UNAUTHORIZED, FailureInfo.UNSUPPORT_MARKET_OWNER_CHECK);\n\n    // Check if market is already unlisted\n    if (!markets[address(cToken)].isListed)\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.UNSUPPORT_MARKET_DOES_NOT_EXIST);\n\n    // Check if market is in use\n    if (cToken.totalSupply() > 0) return fail(Error.NONZERO_TOTAL_SUPPLY, FailureInfo.UNSUPPORT_MARKET_IN_USE);\n\n    // Unlist market\n    delete markets[address(cToken)];\n\n    /* Delete cToken from allMarkets */\n    // load into memory for faster iteration\n    ICErc20[] memory _allMarkets = allMarkets;\n    uint256 len = _allMarkets.length;\n    uint256 assetIndex = len;\n    for (uint256 i = 0; i < len; i++) {\n      if (_allMarkets[i] == cToken) {\n        assetIndex = i;\n        break;\n      }\n    }\n\n    // We *must* have found the asset in the list or our redundant data structure is broken\n    assert(assetIndex < len);\n\n    // copy last item in list to location of item to be removed, reduce length by 1\n    allMarkets[assetIndex] = allMarkets[allMarkets.length - 1];\n    allMarkets.pop();\n\n    cTokensByUnderlying[ICErc20(address(cToken)).underlying()] = ICErc20(address(0));\n    emit MarketUnlisted(cToken);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  function _setBorrowCapForCollateral(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    uint256 borrowCap\n  ) public {\n    require(hasAdminRights(), \"!admin\");\n    borrowCapForCollateral[cTokenBorrow][cTokenCollateral] = borrowCap;\n  }\n\n  function _setBorrowCapForCollateralWhitelist(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account,\n    bool whitelisted\n  ) public {\n    require(hasAdminRights(), \"!admin\");\n\n    if (whitelisted) borrowCapForCollateralWhitelist[cTokenBorrow][cTokenCollateral].add(account);\n    else borrowCapForCollateralWhitelist[cTokenBorrow][cTokenCollateral].remove(account);\n  }\n\n  function isBorrowCapForCollateralWhitelisted(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account\n  ) public view returns (bool) {\n    return borrowCapForCollateralWhitelist[cTokenBorrow][cTokenCollateral].contains(account);\n  }\n\n  function _blacklistBorrowingAgainstCollateral(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    bool blacklisted\n  ) public {\n    require(hasAdminRights(), \"!admin\");\n    borrowingAgainstCollateralBlacklist[cTokenBorrow][cTokenCollateral] = blacklisted;\n  }\n\n  function _blacklistBorrowingAgainstCollateralWhitelist(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account,\n    bool whitelisted\n  ) public {\n    require(hasAdminRights(), \"!admin\");\n\n    if (whitelisted) borrowingAgainstCollateralBlacklistWhitelist[cTokenBorrow][cTokenCollateral].add(account);\n    else borrowingAgainstCollateralBlacklistWhitelist[cTokenBorrow][cTokenCollateral].remove(account);\n  }\n\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account\n  ) public view returns (bool) {\n    return borrowingAgainstCollateralBlacklistWhitelist[cTokenBorrow][cTokenCollateral].contains(account);\n  }\n\n  function _supplyCapWhitelist(\n    address cToken,\n    address account,\n    bool whitelisted\n  ) public {\n    require(hasAdminRights(), \"!admin\");\n\n    if (whitelisted) supplyCapWhitelist[cToken].add(account);\n    else supplyCapWhitelist[cToken].remove(account);\n  }\n\n  function isSupplyCapWhitelisted(address cToken, address account) public view returns (bool) {\n    return supplyCapWhitelist[cToken].contains(account);\n  }\n\n  function getWhitelistedSuppliersSupply(address cToken) public view returns (uint256 supplied) {\n    address[] memory whitelistedSuppliers = supplyCapWhitelist[cToken].values();\n    for (uint256 i = 0; i < whitelistedSuppliers.length; i++) {\n      supplied += ICErc20(cToken).balanceOfUnderlying(whitelistedSuppliers[i]);\n    }\n  }\n\n  function _borrowCapWhitelist(\n    address cToken,\n    address account,\n    bool whitelisted\n  ) public {\n    require(hasAdminRights(), \"!admin\");\n\n    if (whitelisted) borrowCapWhitelist[cToken].add(account);\n    else borrowCapWhitelist[cToken].remove(account);\n  }\n\n  function isBorrowCapWhitelisted(address cToken, address account) public view returns (bool) {\n    return borrowCapWhitelist[cToken].contains(account);\n  }\n\n  function getWhitelistedBorrowersBorrows(address cToken) public view returns (uint256 borrowed) {\n    address[] memory whitelistedBorrowers = borrowCapWhitelist[cToken].values();\n    for (uint256 i = 0; i < whitelistedBorrowers.length; i++) {\n      borrowed += ICErc20(cToken).borrowBalanceCurrent(whitelistedBorrowers[i]);\n    }\n  }\n\n  /**\n   * @notice Return all of the markets\n   * @dev The automatic getter may be used to access an individual market.\n   * @return The list of market addresses\n   */\n  function getAllMarkets() public view returns (ICErc20[] memory) {\n    return allMarkets;\n  }\n\n  /**\n   * @notice Return all of the borrowers\n   * @dev The automatic getter may be used to access an individual borrower.\n   * @return The list of borrower account addresses\n   */\n  function getAllBorrowers() public view returns (address[] memory) {\n    return allBorrowers;\n  }\n\n  function getAllBorrowersCount() public view returns (uint256) {\n    return allBorrowers.length;\n  }\n\n  function getPaginatedBorrowers(uint256 page, uint256 pageSize)\n    public\n    view\n    returns (uint256 _totalPages, address[] memory _pageOfBorrowers)\n  {\n    uint256 allBorrowersCount = allBorrowers.length;\n    if (allBorrowersCount == 0) {\n      return (0, new address[](0));\n    }\n\n    if (pageSize == 0) pageSize = 300;\n    uint256 currentPageSize = pageSize;\n    uint256 sizeOfPageFromRemainder = allBorrowersCount % pageSize;\n\n    _totalPages = allBorrowersCount / pageSize;\n    if (sizeOfPageFromRemainder > 0) {\n      _totalPages++;\n      if (page + 1 == _totalPages) {\n        currentPageSize = sizeOfPageFromRemainder;\n      }\n    }\n\n    if (page + 1 > _totalPages) {\n      return (_totalPages, new address[](0));\n    }\n\n    uint256 offset = page * pageSize;\n    _pageOfBorrowers = new address[](currentPageSize);\n    for (uint256 i = 0; i < currentPageSize; i++) {\n      _pageOfBorrowers[i] = allBorrowers[i + offset];\n    }\n  }\n\n  /**\n   * @notice Return all of the whitelist\n   * @dev The automatic getter may be used to access an individual whitelist status.\n   * @return The list of borrower account addresses\n   */\n  function getWhitelist() external view returns (address[] memory) {\n    return whitelistArray;\n  }\n\n  /**\n   * @notice Returns an array of all accruing and non-accruing flywheels\n   */\n  function getRewardsDistributors() external view returns (address[] memory) {\n    address[] memory allFlywheels = new address[](rewardsDistributors.length + nonAccruingRewardsDistributors.length);\n\n    uint8 i = 0;\n    while (i < rewardsDistributors.length) {\n      allFlywheels[i] = rewardsDistributors[i];\n      i++;\n    }\n    uint8 j = 0;\n    while (j < nonAccruingRewardsDistributors.length) {\n      allFlywheels[i + j] = nonAccruingRewardsDistributors[j];\n      j++;\n    }\n\n    return allFlywheels;\n  }\n\n  function getAccruingFlywheels() external view returns (address[] memory) {\n    return rewardsDistributors;\n  }\n\n  /**\n   * @dev Removes a flywheel from the accruing or non-accruing array\n   * @param flywheelAddress The address of the flywheel to remove from the accruing or non-accruing array\n   * @return true if the flywheel was found and removed\n   */\n  function _removeFlywheel(address flywheelAddress) external returns (bool) {\n    require(hasAdminRights(), \"!admin\");\n    require(flywheelAddress != address(0), \"!flywheel\");\n\n    // remove it from the accruing\n    for (uint256 i = 0; i < rewardsDistributors.length; i++) {\n      if (flywheelAddress == rewardsDistributors[i]) {\n        rewardsDistributors[i] = rewardsDistributors[rewardsDistributors.length - 1];\n        rewardsDistributors.pop();\n        return true;\n      }\n    }\n\n    // or remove it from the non-accruing\n    for (uint256 i = 0; i < nonAccruingRewardsDistributors.length; i++) {\n      if (flywheelAddress == nonAccruingRewardsDistributors[i]) {\n        nonAccruingRewardsDistributors[i] = nonAccruingRewardsDistributors[nonAccruingRewardsDistributors.length - 1];\n        nonAccruingRewardsDistributors.pop();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function isUserOfPool(address user) external view returns (bool) {\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      address marketAddress = address(allMarkets[i]);\n      if (markets[marketAddress].accountMembership[user]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function registerInSFS() external returns (uint256) {\n    require(hasAdminRights(), \"!admin\");\n    SFSRegister sfsContract = SFSRegister(0x8680CEaBcb9b56913c519c069Add6Bc3494B7020);\n\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      allMarkets[i].registerInSFS();\n    }\n\n    return sfsContract.register(0x8Fba84867Ba458E7c6E2c024D2DE3d0b5C3ea1C2);\n  }\n}\n"
    },
    "contracts/compound/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { BasePriceOracle } from \"../oracles/BasePriceOracle.sol\";\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\nimport { ComptrollerV3Storage } from \"../compound/ComptrollerStorage.sol\";\n\ninterface ComptrollerInterface {\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\n\n  function _becomeImplementation() external;\n\n  function _deployMarket(\n    uint8 delegateType,\n    bytes memory constructorData,\n    bytes calldata becomeImplData,\n    uint256 collateralFactorMantissa\n  ) external returns (uint256);\n\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\n\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\n\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\n\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\n\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\n\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\n\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\n\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\n\n  function _addRewardsDistributor(address distributor) external returns (uint256);\n\n  function getHypotheticalAccountLiquidity(\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount,\n    uint256 repayAmount\n  )\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function getMaxRedeemOrBorrow(\n    address account,\n    ICErc20 cToken,\n    bool isBorrow\n  ) external view returns (uint256);\n\n  /*** Assets You Are In ***/\n\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n  function exitMarket(address cToken) external returns (uint256);\n\n  /*** Policy Hooks ***/\n\n  function mintAllowed(\n    address cToken,\n    address minter,\n    uint256 mintAmount\n  ) external returns (uint256);\n\n  function redeemAllowed(\n    address cToken,\n    address redeemer,\n    uint256 redeemTokens\n  ) external returns (uint256);\n\n  function redeemVerify(\n    address cToken,\n    address redeemer,\n    uint256 redeemAmount,\n    uint256 redeemTokens\n  ) external;\n\n  function borrowAllowed(\n    address cToken,\n    address borrower,\n    uint256 borrowAmount\n  ) external returns (uint256);\n\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\n\n  function repayBorrowAllowed(\n    address cToken,\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256);\n\n  function liquidateBorrowAllowed(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    address liquidator,\n    address borrower,\n    uint256 repayAmount\n  ) external returns (uint256);\n\n  function seizeAllowed(\n    address cTokenCollateral,\n    address cTokenBorrowed,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256);\n\n  function transferAllowed(\n    address cToken,\n    address src,\n    address dst,\n    uint256 transferTokens\n  ) external returns (uint256);\n\n  function mintVerify(\n    address cToken,\n    address minter,\n    uint256 actualMintAmount,\n    uint256 mintTokens\n  ) external;\n\n  /*** Liquidity/Liquidation Calculations ***/\n\n  function getAccountLiquidity(address account)\n    external\n    view\n    returns (\n      uint256 error,\n      uint256 collateralValue,\n      uint256 liquidity,\n      uint256 shortfall\n    );\n\n  function liquidateCalculateSeizeTokens(\n    address cTokenBorrowed,\n    address cTokenCollateral,\n    uint256 repayAmount\n  ) external view returns (uint256, uint256);\n\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\n\n  function _beforeNonReentrant() external;\n\n  function _afterNonReentrant() external;\n}\n\ninterface ComptrollerStorageInterface {\n  function admin() external view returns (address);\n\n  function adminHasRights() external view returns (bool);\n\n  function ionicAdmin() external view returns (address);\n\n  function ionicAdminHasRights() external view returns (bool);\n\n  function pendingAdmin() external view returns (address);\n\n  function oracle() external view returns (BasePriceOracle);\n\n  function pauseGuardian() external view returns (address);\n\n  function closeFactorMantissa() external view returns (uint256);\n\n  function liquidationIncentiveMantissa() external view returns (uint256);\n\n  function isUserOfPool(address user) external view returns (bool);\n\n  function whitelist(address account) external view returns (bool);\n\n  function enforceWhitelist() external view returns (bool);\n\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\n\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\n\n  function suppliers(address account) external view returns (bool);\n\n  function cTokensByUnderlying(address) external view returns (address);\n\n  function supplyCaps(address cToken) external view returns (uint256);\n\n  function borrowCaps(address cToken) external view returns (uint256);\n\n  function markets(address cToken) external view returns (bool, uint256);\n\n  function accountAssets(address, uint256) external view returns (address);\n\n  function borrowGuardianPaused(address cToken) external view returns (bool);\n\n  function mintGuardianPaused(address cToken) external view returns (bool);\n\n  function rewardsDistributors(uint256) external view returns (address);\n}\n\ninterface SFSRegister {\n  function register(address _recipient) external returns (uint256 tokenId);\n}\n\ninterface ComptrollerExtensionInterface {\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\n\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\n\n  function getAllMarkets() external view returns (ICErc20[] memory);\n\n  function getAllBorrowers() external view returns (address[] memory);\n\n  function getAllBorrowersCount() external view returns (uint256);\n\n  function getPaginatedBorrowers(uint256 page, uint256 pageSize)\n    external\n    view\n    returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\n\n  function getRewardsDistributors() external view returns (address[] memory);\n\n  function getAccruingFlywheels() external view returns (address[] memory);\n\n  function _supplyCapWhitelist(\n    address cToken,\n    address account,\n    bool whitelisted\n  ) external;\n\n  function _setBorrowCapForCollateral(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    uint256 borrowCap\n  ) external;\n\n  function _setBorrowCapForCollateralWhitelist(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account,\n    bool whitelisted\n  ) external;\n\n  function isBorrowCapForCollateralWhitelisted(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account\n  ) external view returns (bool);\n\n  function _blacklistBorrowingAgainstCollateral(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    bool blacklisted\n  ) external;\n\n  function _blacklistBorrowingAgainstCollateralWhitelist(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account,\n    bool whitelisted\n  ) external;\n\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\n    address cTokenBorrow,\n    address cTokenCollateral,\n    address account\n  ) external view returns (bool);\n\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\n\n  function _borrowCapWhitelist(\n    address cToken,\n    address account,\n    bool whitelisted\n  ) external;\n\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\n\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\n\n  function getWhitelist() external view returns (address[] memory);\n\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\n\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\n\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\n\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\n\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\n\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\n\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\n\n  function _setTransferPaused(bool state) external returns (bool);\n\n  function _setSeizePaused(bool state) external returns (bool);\n\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\n\n  function getAssetAsCollateralValueCap(\n    ICErc20 collateral,\n    ICErc20 cTokenModify,\n    bool redeeming,\n    address account\n  ) external view returns (uint256);\n\n  function registerInSFS() external returns (uint256);\n}\n\ninterface UnitrollerInterface {\n  function comptrollerImplementation() external view returns (address);\n\n  function _upgrade() external;\n\n  function _acceptAdmin() external returns (uint256);\n\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\n\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\n}\n\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\n\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\n\ninterface IonicComptroller is\n  ComptrollerInterface,\n  ComptrollerExtensionInterface,\n  UnitrollerInterface,\n  ComptrollerStorageInterface\n{\n\n}\n\nabstract contract ComptrollerBase is ComptrollerV3Storage {\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\n  bool public constant isComptroller = true;\n}\n"
    },
    "contracts/compound/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./IFeeDistributor.sol\";\nimport \"../oracles/BasePriceOracle.sol\";\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract UnitrollerAdminStorage {\n  /*\n   * Administrator for Ionic\n   */\n  address payable public ionicAdmin;\n\n  /**\n   * @notice Administrator for this contract\n   */\n  address public admin;\n\n  /**\n   * @notice Pending administrator for this contract\n   */\n  address public pendingAdmin;\n\n  /**\n   * @notice Whether or not the Ionic admin has admin rights\n   */\n  bool public ionicAdminHasRights = true;\n\n  /**\n   * @notice Whether or not the admin has admin rights\n   */\n  bool public adminHasRights = true;\n\n  /**\n   * @notice Returns a boolean indicating if the sender has admin rights\n   */\n  function hasAdminRights() internal view returns (bool) {\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\n  }\n}\n\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\n  /**\n   * @notice Oracle which gives the price of any given asset\n   */\n  BasePriceOracle public oracle;\n\n  /**\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n   */\n  uint256 public closeFactorMantissa;\n\n  /**\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\n   */\n  uint256 public liquidationIncentiveMantissa;\n\n  /*\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\n   */\n  uint256 internal maxAssets;\n\n  /**\n   * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n   */\n  mapping(address => ICErc20[]) public accountAssets;\n}\n\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\n  struct Market {\n    // Whether or not this market is listed\n    bool isListed;\n    // Multiplier representing the most one can borrow against their collateral in this market.\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\n    // Must be between 0 and 1, and stored as a mantissa.\n    uint256 collateralFactorMantissa;\n    // Per-market mapping of \"accounts in this asset\"\n    mapping(address => bool) accountMembership;\n  }\n\n  /**\n   * @notice Official mapping of cTokens -> Market metadata\n   * @dev Used e.g. to determine if a market is supported\n   */\n  mapping(address => Market) public markets;\n\n  /// @notice A list of all markets\n  ICErc20[] public allMarkets;\n\n  /**\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\n   */\n  mapping(address => bool) internal borrowers;\n\n  /// @notice A list of all borrowers who have entered markets\n  address[] public allBorrowers;\n\n  // Indexes of borrower account addresses in the `allBorrowers` array\n  mapping(address => uint256) internal borrowerIndexes;\n\n  /**\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\n   */\n  mapping(address => bool) public suppliers;\n\n  /// @notice All cTokens addresses mapped by their underlying token addresses\n  mapping(address => ICErc20) public cTokensByUnderlying;\n\n  /// @notice Whether or not the supplier whitelist is enforced\n  bool public enforceWhitelist;\n\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\n  mapping(address => bool) public whitelist;\n\n  /// @notice An array of all whitelisted accounts\n  address[] public whitelistArray;\n\n  // Indexes of account addresses in the `whitelistArray` array\n  mapping(address => uint256) internal whitelistIndexes;\n\n  /**\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n   *  Actions which allow users to remove their own assets cannot be paused.\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\n   */\n  address public pauseGuardian;\n  bool public _mintGuardianPaused;\n  bool public _borrowGuardianPaused;\n  bool public transferGuardianPaused;\n  bool public seizeGuardianPaused;\n  mapping(address => bool) public mintGuardianPaused;\n  mapping(address => bool) public borrowGuardianPaused;\n}\n\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n  address public borrowCapGuardian;\n\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n  mapping(address => uint256) public borrowCaps;\n\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\n  mapping(address => uint256) public supplyCaps;\n\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\n  address[] public rewardsDistributors;\n\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\n  bool internal _notEntered;\n\n  /// @dev Whether or not _notEntered has been initialized\n  bool internal _notEnteredInitialized;\n\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\n  address[] public nonAccruingRewardsDistributors;\n\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\n\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\n\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\n\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\n    internal borrowingAgainstCollateralBlacklistWhitelist;\n\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\n\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\n}\n"
    },
    "contracts/compound/CToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IonicComptroller } from \"./ComptrollerInterface.sol\";\nimport { CTokenSecondExtensionBase, ICErc20 } from \"./CTokenInterfaces.sol\";\nimport { TokenErrorReporter } from \"./ErrorReporter.sol\";\nimport { Exponential } from \"./Exponential.sol\";\nimport { EIP20Interface } from \"./EIP20Interface.sol\";\nimport { InterestRateModel } from \"./InterestRateModel.sol\";\nimport { ComptrollerV3Storage } from \"./ComptrollerStorage.sol\";\nimport { IFeeDistributor } from \"./IFeeDistributor.sol\";\nimport { DiamondExtension, LibDiamond } from \"../ionic/DiamondExtension.sol\";\nimport { PoolLens } from \"../PoolLens.sol\";\nimport { IonicUniV3Liquidator } from \"../IonicUniV3Liquidator.sol\";\n\n/**\n * @title Compound's CErc20 Contract\n * @notice CTokens which wrap an EIP-20 underlying\n * @dev This contract should not to be deployed on its own; instead, deploy `CErc20Delegator` (proxy contract) and `CErc20Delegate` (logic/implementation contract).\n * @author Compound\n */\nabstract contract CErc20 is CTokenSecondExtensionBase, TokenErrorReporter, Exponential, DiamondExtension {\n  modifier isAuthorized() {\n    require(\n      IFeeDistributor(ionicAdmin).canCall(address(comptroller), msg.sender, address(this), msg.sig),\n      \"not authorized\"\n    );\n    _;\n  }\n\n  modifier isMinHFThresholdExceeded(address borrower) {\n    PoolLens lens = PoolLens(ap.getAddress(\"PoolLens\"));\n    IonicUniV3Liquidator liquidator = IonicUniV3Liquidator(payable(ap.getAddress(\"IonicUniV3Liquidator\")));\n\n    if (lens.getHealthFactor(borrower, comptroller) > liquidator.healthFactorThreshold()) {\n      require(msg.sender == address(liquidator), \"Health factor not low enough for non-permissioned liquidations\");\n      _;\n    } else {\n      _;\n    }\n  }\n\n  function _getExtensionFunctions() public pure virtual override returns (bytes4[] memory) {\n    uint8 fnsCount = 13;\n    bytes4[] memory functionSelectors = new bytes4[](fnsCount);\n    functionSelectors[--fnsCount] = this.mint.selector;\n    functionSelectors[--fnsCount] = this.redeem.selector;\n    functionSelectors[--fnsCount] = this.redeemUnderlying.selector;\n    functionSelectors[--fnsCount] = this.borrow.selector;\n    functionSelectors[--fnsCount] = this.repayBorrow.selector;\n    functionSelectors[--fnsCount] = this.repayBorrowBehalf.selector;\n    functionSelectors[--fnsCount] = this.liquidateBorrow.selector;\n    functionSelectors[--fnsCount] = this.getCash.selector;\n    functionSelectors[--fnsCount] = this.seize.selector;\n    functionSelectors[--fnsCount] = this.selfTransferOut.selector;\n    functionSelectors[--fnsCount] = this.selfTransferIn.selector;\n    functionSelectors[--fnsCount] = this._withdrawIonicFees.selector;\n    functionSelectors[--fnsCount] = this._withdrawAdminFees.selector;\n\n    require(fnsCount == 0, \"use the correct array length\");\n    return functionSelectors;\n  }\n\n  /*** User Interface ***/\n\n  /**\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param mintAmount The amount of the underlying asset to supply\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function mint(uint256 mintAmount) external override isAuthorized returns (uint256) {\n    (uint256 err, ) = mintInternal(mintAmount);\n    return err;\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for the underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemTokens The number of cTokens to redeem into underlying\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeem(uint256 redeemTokens) external override isAuthorized returns (uint256) {\n    return redeemInternal(redeemTokens);\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemAmount The amount of underlying to redeem\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemUnderlying(uint256 redeemAmount) external override isAuthorized returns (uint256) {\n    return redeemUnderlyingInternal(redeemAmount);\n  }\n\n  /**\n   * @notice Sender borrows assets from the protocol to their own address\n   * @param borrowAmount The amount of the underlying asset to borrow\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function borrow(uint256 borrowAmount) external override isAuthorized returns (uint256) {\n    return borrowInternal(borrowAmount);\n  }\n\n  /**\n   * @notice Sender repays their own borrow\n   * @param repayAmount The amount to repay\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function repayBorrow(uint256 repayAmount) external override isAuthorized returns (uint256) {\n    (uint256 err, ) = repayBorrowInternal(repayAmount);\n    return err;\n  }\n\n  /**\n   * @notice Sender repays a borrow belonging to borrower\n   * @param borrower the account with the debt being payed off\n   * @param repayAmount The amount to repay\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external override isAuthorized returns (uint256) {\n    (uint256 err, ) = repayBorrowBehalfInternal(borrower, repayAmount);\n    return err;\n  }\n\n  /**\n   * @notice The sender liquidates the borrowers collateral.\n   *  The collateral seized is transferred to the liquidator.\n   * @param borrower The borrower of this cToken to be liquidated\n   * @param repayAmount The amount of the underlying borrowed asset to repay\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function liquidateBorrow(\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) external override isAuthorized isMinHFThresholdExceeded(borrower) returns (uint256) {\n    (uint256 err, ) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\n    return err;\n  }\n\n  /**\n   * @notice Get cash balance of this cToken in the underlying asset\n   * @return The quantity of underlying asset owned by this contract\n   */\n  function getCash() external view override returns (uint256) {\n    return getCashInternal();\n  }\n\n  /**\n   * @notice Transfers collateral tokens (this market) to the liquidator.\n   * @dev Will fail unless called by another cToken during the process of liquidation.\n   *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\n   * @param liquidator The account receiving seized collateral\n   * @param borrower The account having collateral seized\n   * @param seizeTokens The number of cTokens to seize\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function seize(\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external override nonReentrant(true) returns (uint256) {\n    return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\n  }\n\n  function selfTransferOut(address to, uint256 amount) external override {\n    require(msg.sender == address(this), \"!self\");\n    doTransferOut(to, amount);\n  }\n\n  function selfTransferIn(address from, uint256 amount) external override returns (uint256) {\n    require(msg.sender == address(this), \"!self\");\n    return doTransferIn(from, amount);\n  }\n\n  /**\n   * @notice Accrues interest and reduces Ionic fees by transferring to Ionic\n   * @param withdrawAmount Amount of fees to withdraw\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _withdrawIonicFees(uint256 withdrawAmount) external override nonReentrant(false) returns (uint256) {\n    asCTokenExtension().accrueInterest();\n\n    if (accrualBlockNumber != block.number) {\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_IONIC_FEES_FRESH_CHECK);\n    }\n\n    if (getCashInternal() < withdrawAmount) {\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_IONIC_FEES_CASH_NOT_AVAILABLE);\n    }\n\n    if (withdrawAmount > totalIonicFees) {\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_IONIC_FEES_VALIDATION);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    uint256 totalIonicFeesNew = totalIonicFees - withdrawAmount;\n    totalIonicFees = totalIonicFeesNew;\n\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n    doTransferOut(address(ionicAdmin), withdrawAmount);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Accrues interest and reduces admin fees by transferring to admin\n   * @param withdrawAmount Amount of fees to withdraw\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _withdrawAdminFees(uint256 withdrawAmount) external override nonReentrant(false) returns (uint256) {\n    asCTokenExtension().accrueInterest();\n\n    if (accrualBlockNumber != block.number) {\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.WITHDRAW_ADMIN_FEES_FRESH_CHECK);\n    }\n\n    // Fail gracefully if protocol has insufficient underlying cash\n    if (getCashInternal() < withdrawAmount) {\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE);\n    }\n\n    if (withdrawAmount > totalAdminFees) {\n      return fail(Error.BAD_INPUT, FailureInfo.WITHDRAW_ADMIN_FEES_VALIDATION);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n    totalAdminFees = totalAdminFees - withdrawAmount;\n\n    // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n    doTransferOut(ComptrollerV3Storage(address(comptroller)).admin(), withdrawAmount);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /*** Safe Token ***/\n\n  /**\n   * @notice Gets balance of this contract in terms of the underlying\n   * @dev This excludes the value of the current message, if any\n   * @return The quantity of underlying tokens owned by this contract\n   */\n  function getCashInternal() internal view virtual returns (uint256) {\n    return EIP20Interface(underlying).balanceOf(address(this));\n  }\n\n  /**\n   * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\n   *      This will revert due to insufficient balance or insufficient allowance.\n   *      This function returns the actual amount received,\n   *      which may be less than `amount` if there is a fee attached to the transfer.\n   *\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n   */\n  function doTransferIn(address from, uint256 amount) internal virtual returns (uint256) {\n    uint256 balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\n    _callOptionalReturn(\n      abi.encodeWithSelector(EIP20Interface.transferFrom.selector, from, address(this), amount),\n      \"TOKEN_TRANSFER_IN_FAILED\"\n    );\n\n    // Calculate the amount that was *actually* transferred\n    uint256 balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\n    require(balanceAfter >= balanceBefore, \"TOKEN_TRANSFER_IN_OVERFLOW\");\n    return balanceAfter - balanceBefore; // underflow already checked above, just subtract\n  }\n\n  /**\n   * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\n   *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\n   *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\n   *      it is >= amount, this should not revert in normal conditions.\n   *\n   *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n   *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n   */\n  function doTransferOut(address to, uint256 amount) internal virtual {\n    _callOptionalReturn(\n      abi.encodeWithSelector(EIP20Interface.transfer.selector, to, amount),\n      \"TOKEN_TRANSFER_OUT_FAILED\"\n    );\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   * @param errorMessage The revert string to return on failure.\n   */\n  function _callOptionalReturn(bytes memory data, string memory errorMessage) internal {\n    bytes memory returndata = _functionCall(underlying, data, errorMessage);\n    if (returndata.length > 0) require(abi.decode(returndata, (bool)), errorMessage);\n  }\n\n  /**\n   * @notice Sender supplies assets into the market and receives cTokens in exchange\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param mintAmount The amount of the underlying asset to supply\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n   */\n  function mintInternal(uint256 mintAmount) internal nonReentrant(false) returns (uint256, uint256) {\n    asCTokenExtension().accrueInterest();\n    // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\n    return mintFresh(msg.sender, mintAmount);\n  }\n\n  struct MintLocalVars {\n    Error err;\n    MathError mathErr;\n    uint256 exchangeRateMantissa;\n    uint256 mintTokens;\n    uint256 totalSupplyNew;\n    uint256 accountTokensNew;\n    uint256 actualMintAmount;\n  }\n\n  /**\n   * @notice User supplies assets into the market and receives cTokens in exchange\n   * @dev Assumes interest has already been accrued up to the current block\n   * @param minter The address of the account which is supplying the assets\n   * @param mintAmount The amount of the underlying asset to supply\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n   */\n  function mintFresh(address minter, uint256 mintAmount) internal returns (uint256, uint256) {\n    /* Fail if mint not allowed */\n    uint256 allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\n    if (allowed != 0) {\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != block.number) {\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\n    }\n\n    MintLocalVars memory vars;\n\n    vars.exchangeRateMantissa = asCTokenExtension().exchangeRateCurrent();\n\n    // Check max supply\n    // unused function\n    /* allowed = comptroller.mintWithinLimits(address(this), vars.exchangeRateMantissa, accountTokens[minter], mintAmount);\n        if (allowed != 0) {\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\n        } */\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /*\n     *  We call `doTransferIn` for the minter and the mintAmount.\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\n     *  side-effects occurred. The function returns the amount actually transferred,\n     *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\n     *  of cash.\n     */\n    vars.actualMintAmount = doTransferIn(minter, mintAmount);\n\n    /*\n     * We get the current exchange rate and calculate the number of cTokens to be minted:\n     *  mintTokens = actualMintAmount / exchangeRate\n     */\n\n    // mintTokens is rounded down here - correct\n    (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\n      vars.actualMintAmount,\n      Exp({ mantissa: vars.exchangeRateMantissa })\n    );\n    require(vars.mathErr == MathError.NO_ERROR, \"MINT_EXCHANGE_CALCULATION_FAILED\");\n    require(vars.mintTokens > 0, \"MINT_ZERO_CTOKENS_REJECTED\");\n\n    /*\n     * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\n     *  totalSupplyNew = totalSupply + mintTokens\n     *  accountTokensNew = accountTokens[minter] + mintTokens\n     */\n    vars.totalSupplyNew = totalSupply + vars.mintTokens;\n\n    vars.accountTokensNew = accountTokens[minter] + vars.mintTokens;\n\n    /* We write previously calculated values into storage */\n    totalSupply = vars.totalSupplyNew;\n    accountTokens[minter] = vars.accountTokensNew;\n\n    /* We emit a Mint event, and a Transfer event */\n    emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\n    emit Transfer(address(this), minter, vars.mintTokens);\n\n    /* We call the defense hook */\n    comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\n\n    return (uint256(Error.NO_ERROR), vars.actualMintAmount);\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for the underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemTokens The number of cTokens to redeem into underlying\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemInternal(uint256 redeemTokens) internal nonReentrant(false) returns (uint256) {\n    asCTokenExtension().accrueInterest();\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\n    return redeemFresh(msg.sender, redeemTokens, 0);\n  }\n\n  /**\n   * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n   * @dev Accrues interest whether or not the operation succeeds, unless reverted\n   * @param redeemAmount The amount of underlying to receive from redeeming cTokens\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemUnderlyingInternal(uint256 redeemAmount) internal nonReentrant(false) returns (uint256) {\n    asCTokenExtension().accrueInterest();\n    // redeemFresh emits redeem-specific logs on errors, so we don't need to\n    return redeemFresh(msg.sender, 0, redeemAmount);\n  }\n\n  struct RedeemLocalVars {\n    Error err;\n    MathError mathErr;\n    uint256 exchangeRateMantissa;\n    uint256 redeemTokens;\n    uint256 redeemAmount;\n    uint256 totalSupplyNew;\n    uint256 accountTokensNew;\n  }\n\n  function divRoundUp(uint256 x, uint256 y) internal pure returns (uint256 res) {\n    res = (x * 1e18) / y;\n    if (x % y != 0) res += 1;\n  }\n\n  /**\n   * @notice User redeems cTokens in exchange for the underlying asset\n   * @dev Assumes interest has already been accrued up to the current block\n   * @param redeemer The address of the account which is redeeming the tokens\n   * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n   * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function redeemFresh(\n    address redeemer,\n    uint256 redeemTokensIn,\n    uint256 redeemAmountIn\n  ) internal returns (uint256) {\n    require(redeemTokensIn == 0 || redeemAmountIn == 0, \"!redeem tokens or amount\");\n\n    RedeemLocalVars memory vars;\n\n    vars.exchangeRateMantissa = asCTokenExtension().exchangeRateCurrent();\n\n    if (redeemTokensIn > 0) {\n      // don't allow dust tokens/assets to be left after\n      if (totalSupply - redeemTokensIn < 5000) redeemTokensIn = totalSupply;\n\n      /*\n       * We calculate the exchange rate and the amount of underlying to be redeemed:\n       *  redeemTokens = redeemTokensIn\n       *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n       */\n      vars.redeemTokens = redeemTokensIn;\n\n      (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\n        Exp({ mantissa: vars.exchangeRateMantissa }),\n        redeemTokensIn\n      );\n      if (vars.mathErr != MathError.NO_ERROR) {\n        return\n          failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint256(vars.mathErr));\n      }\n    } else {\n      if (redeemAmountIn == type(uint256).max) {\n        redeemAmountIn = comptroller.getMaxRedeemOrBorrow(redeemer, ICErc20(address(this)), false);\n      }\n\n      // don't allow dust tokens/assets to be left after\n      uint256 totalUnderlyingSupplied = asCTokenExtension().getTotalUnderlyingSupplied();\n      if (totalUnderlyingSupplied - redeemAmountIn < 1000) redeemAmountIn = totalUnderlyingSupplied;\n\n      /*\n       * We get the current exchange rate and calculate the amount to be redeemed:\n       *  redeemTokens = redeemAmountIn / exchangeRate\n       *  redeemAmount = redeemAmountIn\n       */\n\n      vars.redeemTokens = divRoundUp(redeemAmountIn, vars.exchangeRateMantissa);\n\n      // don't allow dust tokens/assets to be left after\n      if (totalSupply - vars.redeemTokens < 1000) vars.redeemTokens = totalSupply;\n\n      vars.redeemAmount = redeemAmountIn;\n    }\n\n    /* Fail if redeem not allowed */\n    uint256 allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\n    if (allowed != 0) {\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != block.number) {\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\n    }\n\n    /*\n     * We calculate the new total supply and redeemer balance, checking for underflow:\n     *  totalSupplyNew = totalSupply - redeemTokens\n     *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n     */\n    (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      return\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      return\n        failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    /* Fail gracefully if protocol has insufficient cash */\n    if (getCashInternal() < vars.redeemAmount) {\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write previously calculated values into storage */\n    totalSupply = vars.totalSupplyNew;\n    accountTokens[redeemer] = vars.accountTokensNew;\n\n    /*\n     * We invoke doTransferOut for the redeemer and the redeemAmount.\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  On success, the cToken has redeemAmount less of cash.\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n     */\n    doTransferOut(redeemer, vars.redeemAmount);\n\n    /* We emit a Transfer event, and a Redeem event */\n    emit Transfer(redeemer, address(this), vars.redeemTokens);\n    emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n\n    /* We call the defense hook */\n    comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sender borrows assets from the protocol to their own address\n   * @param borrowAmount The amount of the underlying asset to borrow\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function borrowInternal(uint256 borrowAmount) internal nonReentrant(false) returns (uint256) {\n    asCTokenExtension().accrueInterest();\n    // borrowFresh emits borrow-specific logs on errors, so we don't need to\n    return borrowFresh(msg.sender, borrowAmount);\n  }\n\n  struct BorrowLocalVars {\n    MathError mathErr;\n    uint256 accountBorrows;\n    uint256 accountBorrowsNew;\n    uint256 totalBorrowsNew;\n  }\n\n  /**\n   * @notice Users borrow assets from the protocol to their own address\n   * @param borrowAmount The amount of the underlying asset to borrow\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function borrowFresh(address borrower, uint256 borrowAmount) internal returns (uint256) {\n    /* Fail if borrow not allowed */\n    uint256 allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\n    if (allowed != 0) {\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != block.number) {\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\n    }\n\n    /* Fail gracefully if protocol has insufficient underlying cash */\n    uint256 cashPrior = getCashInternal();\n\n    if (cashPrior < borrowAmount) {\n      return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\n    }\n\n    BorrowLocalVars memory vars;\n\n    /*\n     * We calculate the new borrower and total borrow balances, failing on overflow:\n     *  accountBorrowsNew = accountBorrows + borrowAmount\n     *  totalBorrowsNew = totalBorrows + borrowAmount\n     */\n    vars.accountBorrows = asCTokenExtension().borrowBalanceCurrent(borrower);\n\n    (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      return\n        failOpaque(\n          Error.MATH_ERROR,\n          FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n          uint256(vars.mathErr)\n        );\n    }\n\n    // Check min borrow for this user for this asset\n    allowed = comptroller.borrowWithinLimits(address(this), vars.accountBorrowsNew);\n    if (allowed != 0) {\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\n    }\n\n    (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      return\n        failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint256(vars.mathErr));\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write the previously calculated values into storage */\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\n    accountBorrows[borrower].interestIndex = borrowIndex;\n    totalBorrows = vars.totalBorrowsNew;\n\n    /*\n     * We invoke doTransferOut for the borrower and the borrowAmount.\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  On success, the cToken borrowAmount less of cash.\n     *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n     */\n    doTransferOut(borrower, borrowAmount);\n\n    /* We emit a Borrow event */\n    emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.borrowVerify(address(this), borrower, borrowAmount);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Sender repays their own borrow\n   * @param repayAmount The amount to repay\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function repayBorrowInternal(uint256 repayAmount) internal nonReentrant(false) returns (uint256, uint256) {\n    asCTokenExtension().accrueInterest();\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n    return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n  }\n\n  /**\n   * @notice Sender repays a borrow belonging to borrower\n   * @param borrower the account with the debt being payed off\n   * @param repayAmount The amount to repay\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function repayBorrowBehalfInternal(address borrower, uint256 repayAmount)\n    internal\n    nonReentrant(false)\n    returns (uint256, uint256)\n  {\n    asCTokenExtension().accrueInterest();\n    // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n    return repayBorrowFresh(msg.sender, borrower, repayAmount);\n  }\n\n  struct RepayBorrowLocalVars {\n    Error err;\n    MathError mathErr;\n    uint256 repayAmount;\n    uint256 borrowerIndex;\n    uint256 accountBorrows;\n    uint256 accountBorrowsNew;\n    uint256 totalBorrowsNew;\n    uint256 actualRepayAmount;\n  }\n\n  /**\n   * @notice Borrows are repaid by another user (possibly the borrower).\n   * @param payer the account paying off the borrow\n   * @param borrower the account with the debt being payed off\n   * @param repayAmount the amount of undelrying tokens being returned\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function repayBorrowFresh(\n    address payer,\n    address borrower,\n    uint256 repayAmount\n  ) internal returns (uint256, uint256) {\n    /* Fail if repayBorrow not allowed */\n    uint256 allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\n    if (allowed != 0) {\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != block.number) {\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\n    }\n\n    RepayBorrowLocalVars memory vars;\n\n    /* We remember the original borrowerIndex for verification purposes */\n    vars.borrowerIndex = accountBorrows[borrower].interestIndex;\n\n    /* We fetch the amount the borrower owes, with accumulated interest */\n    vars.accountBorrows = asCTokenExtension().borrowBalanceCurrent(borrower);\n\n    /* If repayAmount == -1, repayAmount = accountBorrows */\n    if (repayAmount == type(uint256).max) {\n      vars.repayAmount = vars.accountBorrows;\n    } else {\n      vars.repayAmount = repayAmount;\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /*\n     * We call doTransferIn for the payer and the repayAmount\n     *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n     *  On success, the cToken holds an additional repayAmount of cash.\n     *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n     *   it returns the amount actually transferred, in case of a fee.\n     */\n    vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\n\n    /*\n     * We calculate the new borrower and total borrow balances, failing on underflow:\n     *  accountBorrowsNew = accountBorrows - actualRepayAmount\n     *  totalBorrowsNew = totalBorrows - actualRepayAmount\n     */\n    (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\n    require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n\n    (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\n    require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n\n    /* We write the previously calculated values into storage */\n    accountBorrows[borrower].principal = vars.accountBorrowsNew;\n    accountBorrows[borrower].interestIndex = borrowIndex;\n    totalBorrows = vars.totalBorrowsNew;\n\n    /* We emit a RepayBorrow event */\n    emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\n\n    return (uint256(Error.NO_ERROR), vars.actualRepayAmount);\n  }\n\n  /**\n   * @notice The sender liquidates the borrowers collateral.\n   *  The collateral seized is transferred to the liquidator.\n   * @param borrower The borrower of this cToken to be liquidated\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\n   * @param repayAmount The amount of the underlying borrowed asset to repay\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function liquidateBorrowInternal(\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) internal nonReentrant(false) returns (uint256, uint256) {\n    asCTokenExtension().accrueInterest();\n    ICErc20(cTokenCollateral).accrueInterest();\n    // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n    return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\n  }\n\n  /**\n   * @notice The liquidator liquidates the borrowers collateral.\n   *  The collateral seized is transferred to the liquidator.\n   * @param borrower The borrower of this cToken to be liquidated\n   * @param liquidator The address repaying the borrow and seizing collateral\n   * @param cTokenCollateral The market in which to seize collateral from the borrower\n   * @param repayAmount The amount of the underlying borrowed asset to repay\n   * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n   */\n  function liquidateBorrowFresh(\n    address liquidator,\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) internal returns (uint256, uint256) {\n    /* Fail if liquidate not allowed */\n    uint256 allowed = comptroller.liquidateBorrowAllowed(\n      address(this),\n      cTokenCollateral,\n      liquidator,\n      borrower,\n      repayAmount\n    );\n    if (allowed != 0) {\n      return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\n    }\n\n    /* Verify market's block number equals current block number */\n    if (accrualBlockNumber != block.number) {\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\n    }\n\n    /* Verify cTokenCollateral market's block number equals current block number */\n    if (CErc20(cTokenCollateral).accrualBlockNumber() != block.number) {\n      return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\n    }\n\n    /* Fail if borrower = liquidator */\n    if (borrower == liquidator) {\n      return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\n    }\n\n    /* Fail if repayAmount = 0 */\n    if (repayAmount == 0) {\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\n    }\n\n    /* Fail if repayAmount = -1 */\n    if (repayAmount == type(uint256).max) {\n      return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\n    }\n\n    /* Fail if repayBorrow fails */\n    (uint256 repayBorrowError, uint256 actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\n    if (repayBorrowError != uint256(Error.NO_ERROR)) {\n      return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We calculate the number of collateral tokens that will be seized */\n    (uint256 amountSeizeError, uint256 seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\n      address(this),\n      cTokenCollateral,\n      actualRepayAmount\n    );\n    require(amountSeizeError == uint256(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\n\n    /* Revert if borrower collateral token balance < seizeTokens */\n    require(ICErc20(cTokenCollateral).balanceOf(borrower) >= seizeTokens, \"LIQUIDATE_SEIZE_TOO_MUCH\");\n\n    // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\n    uint256 seizeError;\n    if (cTokenCollateral == address(this)) {\n      seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\n    } else {\n      seizeError = CErc20(cTokenCollateral).seize(liquidator, borrower, seizeTokens);\n    }\n\n    /* Revert if seize tokens fails (since we cannot be sure of side effects) */\n    require(seizeError == uint256(Error.NO_ERROR), \"!seize\");\n\n    /* We emit a LiquidateBorrow event */\n    emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, cTokenCollateral, seizeTokens);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.liquidateBorrowVerify(address(this), cTokenCollateral, liquidator, borrower, actualRepayAmount, seizeTokens);\n\n    return (uint256(Error.NO_ERROR), actualRepayAmount);\n  }\n\n  struct SeizeInternalLocalVars {\n    MathError mathErr;\n    uint256 borrowerTokensNew;\n    uint256 liquidatorTokensNew;\n    uint256 liquidatorSeizeTokens;\n    uint256 protocolSeizeTokens;\n    uint256 protocolSeizeAmount;\n    uint256 exchangeRateMantissa;\n    uint256 totalReservesNew;\n    uint256 totalIonicFeeNew;\n    uint256 totalSupplyNew;\n    uint256 feeSeizeTokens;\n    uint256 feeSeizeAmount;\n  }\n\n  /**\n   * @notice Transfers collateral tokens (this market) to the liquidator.\n   * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\n   *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\n   * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\n   * @param liquidator The account receiving seized collateral\n   * @param borrower The account having collateral seized\n   * @param seizeTokens The number of cTokens to seize\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function seizeInternal(\n    address seizerToken,\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) internal returns (uint256) {\n    /* Fail if seize not allowed */\n    uint256 allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\n    if (allowed != 0) {\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Fail if borrower = liquidator */\n    if (borrower == liquidator) {\n      return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\n    }\n\n    SeizeInternalLocalVars memory vars;\n\n    /*\n     * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\n     *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\n     *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\n     */\n    (vars.mathErr, vars.borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint256(vars.mathErr));\n    }\n\n    vars.protocolSeizeTokens = mul_(seizeTokens, Exp({ mantissa: protocolSeizeShareMantissa }));\n    vars.feeSeizeTokens = mul_(seizeTokens, Exp({ mantissa: feeSeizeShareMantissa }));\n    vars.liquidatorSeizeTokens = seizeTokens - vars.protocolSeizeTokens - vars.feeSeizeTokens;\n\n    vars.exchangeRateMantissa = asCTokenExtension().exchangeRateCurrent();\n\n    vars.protocolSeizeAmount = mul_ScalarTruncate(\n      Exp({ mantissa: vars.exchangeRateMantissa }),\n      vars.protocolSeizeTokens\n    );\n    vars.feeSeizeAmount = mul_ScalarTruncate(Exp({ mantissa: vars.exchangeRateMantissa }), vars.feeSeizeTokens);\n\n    vars.totalReservesNew = totalReserves + vars.protocolSeizeAmount;\n    vars.totalSupplyNew = totalSupply - vars.protocolSeizeTokens - vars.feeSeizeTokens;\n    vars.totalIonicFeeNew = totalIonicFees + vars.feeSeizeAmount;\n\n    (vars.mathErr, vars.liquidatorTokensNew) = addUInt(accountTokens[liquidator], vars.liquidatorSeizeTokens);\n    if (vars.mathErr != MathError.NO_ERROR) {\n      return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint256(vars.mathErr));\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    /* We write the previously calculated values into storage */\n    totalReserves = vars.totalReservesNew;\n    totalSupply = vars.totalSupplyNew;\n    totalIonicFees = vars.totalIonicFeeNew;\n\n    accountTokens[borrower] = vars.borrowerTokensNew;\n    accountTokens[liquidator] = vars.liquidatorTokensNew;\n\n    /* Emit a Transfer event */\n    emit Transfer(borrower, liquidator, vars.liquidatorSeizeTokens);\n    emit Transfer(borrower, address(this), vars.protocolSeizeTokens);\n    emit ReservesAdded(address(this), vars.protocolSeizeAmount, vars.totalReservesNew);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  function asCTokenExtension() internal view returns (ICErc20) {\n    return ICErc20(address(this));\n  }\n\n  /*** Reentrancy Guard ***/\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   */\n  modifier nonReentrant(bool localOnly) {\n    _beforeNonReentrant(localOnly);\n    _;\n    _afterNonReentrant(localOnly);\n  }\n\n  /**\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\n   * Saves space because function modifier code is \"inlined\" into every function with the modifier).\n   * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\n   */\n  function _beforeNonReentrant(bool localOnly) private {\n    require(_notEntered, \"re-entered\");\n    if (!localOnly) comptroller._beforeNonReentrant();\n    _notEntered = false;\n  }\n\n  /**\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\n   * Saves space because function modifier code is \"inlined\" into every function with the modifier).\n   * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\n   */\n  function _afterNonReentrant(bool localOnly) private {\n    _notEntered = true; // get a gas-refund post-Istanbul\n    if (!localOnly) comptroller._afterNonReentrant();\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   * If `target` reverts with a revert reason, it is bubbled up by this\n   * function (like regular Solidity function calls).\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   * @param errorMessage The revert string to return on failure.\n   */\n  function _functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.call(data);\n\n    if (!success) {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n\n    return returndata;\n  }\n}\n"
    },
    "contracts/compound/CTokenFirstExtension.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { DiamondExtension } from \"../ionic/DiamondExtension.sol\";\nimport { IFlashLoanReceiver } from \"../ionic/IFlashLoanReceiver.sol\";\nimport { CErc20FirstExtensionBase, CTokenFirstExtensionInterface, ICErc20 } from \"./CTokenInterfaces.sol\";\nimport { SFSRegister } from \"./ComptrollerInterface.sol\";\nimport { TokenErrorReporter } from \"./ErrorReporter.sol\";\nimport { Exponential } from \"./Exponential.sol\";\nimport { InterestRateModel } from \"./InterestRateModel.sol\";\nimport { IFeeDistributor } from \"./IFeeDistributor.sol\";\nimport { Multicall } from \"../utils/Multicall.sol\";\n\nimport { IERC20, SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { AddressesProvider } from \"../ionic/AddressesProvider.sol\";\n\ncontract CTokenFirstExtension is\n  CErc20FirstExtensionBase,\n  TokenErrorReporter,\n  Exponential,\n  DiamondExtension,\n  Multicall\n{\n  modifier isAuthorized() {\n    require(\n      IFeeDistributor(ionicAdmin).canCall(address(comptroller), msg.sender, address(this), msg.sig),\n      \"not authorized\"\n    );\n    _;\n  }\n\n  function _getExtensionFunctions() external pure virtual override returns (bytes4[] memory) {\n    uint8 fnsCount = 25;\n    bytes4[] memory functionSelectors = new bytes4[](fnsCount);\n    functionSelectors[--fnsCount] = this.transfer.selector;\n    functionSelectors[--fnsCount] = this.transferFrom.selector;\n    functionSelectors[--fnsCount] = this.allowance.selector;\n    functionSelectors[--fnsCount] = this.approve.selector;\n    functionSelectors[--fnsCount] = this.balanceOf.selector;\n    functionSelectors[--fnsCount] = this._setAdminFee.selector;\n    functionSelectors[--fnsCount] = this._setInterestRateModel.selector;\n    functionSelectors[--fnsCount] = this._setNameAndSymbol.selector;\n    functionSelectors[--fnsCount] = this._setAddressesProvider.selector;\n    functionSelectors[--fnsCount] = this._setReserveFactor.selector;\n    functionSelectors[--fnsCount] = this.supplyRatePerBlock.selector;\n    functionSelectors[--fnsCount] = this.borrowRatePerBlock.selector;\n    functionSelectors[--fnsCount] = this.exchangeRateCurrent.selector;\n    functionSelectors[--fnsCount] = this.accrueInterest.selector;\n    functionSelectors[--fnsCount] = this.totalBorrowsCurrent.selector;\n    functionSelectors[--fnsCount] = this.balanceOfUnderlying.selector;\n    functionSelectors[--fnsCount] = this.multicall.selector;\n    functionSelectors[--fnsCount] = this.supplyRatePerBlockAfterDeposit.selector;\n    functionSelectors[--fnsCount] = this.supplyRatePerBlockAfterWithdraw.selector;\n    functionSelectors[--fnsCount] = this.borrowRatePerBlockAfterBorrow.selector;\n    functionSelectors[--fnsCount] = this.getTotalUnderlyingSupplied.selector;\n    functionSelectors[--fnsCount] = this.flash.selector;\n    functionSelectors[--fnsCount] = this.getAccountSnapshot.selector;\n    functionSelectors[--fnsCount] = this.borrowBalanceCurrent.selector;\n    functionSelectors[--fnsCount] = this.registerInSFS.selector;\n\n    require(fnsCount == 0, \"use the correct array length\");\n    return functionSelectors;\n  }\n\n  function getTotalUnderlyingSupplied() public view override returns (uint256) {\n    // (totalCash + totalBorrows - (totalReserves + totalIonicFees + totalAdminFees))\n    return asCToken().getCash() + totalBorrows - (totalReserves + totalIonicFees + totalAdminFees);\n  }\n\n  /* ERC20 fns */\n  /**\n   * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\n   * @dev Called by both `transfer` and `transferFrom` internally\n   * @param spender The address of the account performing the transfer\n   * @param src The address of the source account\n   * @param dst The address of the destination account\n   * @param tokens The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transferTokens(\n    address spender,\n    address src,\n    address dst,\n    uint256 tokens\n  ) internal returns (uint256) {\n    /* Fail if transfer not allowed */\n    uint256 allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\n    if (allowed != 0) {\n      return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\n    }\n\n    /* Do not allow self-transfers */\n    if (src == dst) {\n      return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\n    }\n\n    /* Get the allowance, infinite for the account owner */\n    uint256 startingAllowance = 0;\n    if (spender == src) {\n      startingAllowance = type(uint256).max;\n    } else {\n      startingAllowance = transferAllowances[src][spender];\n    }\n\n    /* Do the calculations, checking for {under,over}flow */\n    MathError mathErr;\n    uint256 allowanceNew;\n    uint256 srcTokensNew;\n    uint256 dstTokensNew;\n\n    (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\n    if (mathErr != MathError.NO_ERROR) {\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\n    }\n\n    (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\n    if (mathErr != MathError.NO_ERROR) {\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\n    }\n\n    (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\n    if (mathErr != MathError.NO_ERROR) {\n      return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\n    }\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n\n    accountTokens[src] = srcTokensNew;\n    accountTokens[dst] = dstTokensNew;\n\n    /* Eat some of the allowance (if necessary) */\n    if (startingAllowance != type(uint256).max) {\n      transferAllowances[src][spender] = allowanceNew;\n    }\n\n    /* We emit a Transfer event */\n    emit Transfer(src, dst, tokens);\n\n    /* We call the defense hook */\n    // unused function\n    // comptroller.transferVerify(address(this), src, dst, tokens);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n   * @param dst The address of the destination account\n   * @param amount The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transfer(address dst, uint256 amount) public override nonReentrant(false) isAuthorized returns (bool) {\n    return transferTokens(msg.sender, msg.sender, dst, amount) == uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Transfer `amount` tokens from `src` to `dst`\n   * @param src The address of the source account\n   * @param dst The address of the destination account\n   * @param amount The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 amount\n  ) public override nonReentrant(false) isAuthorized returns (bool) {\n    return transferTokens(msg.sender, src, dst, amount) == uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Approve `spender` to transfer up to `amount` from `src`\n   * @dev This will overwrite the approval amount for `spender`\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n   * @param spender The address of the account which may transfer tokens\n   * @param amount The number of tokens that are approved (-1 means infinite)\n   * @return Whether or not the approval succeeded\n   */\n  function approve(address spender, uint256 amount) public override isAuthorized returns (bool) {\n    address src = msg.sender;\n    transferAllowances[src][spender] = amount;\n    emit Approval(src, spender, amount);\n    return true;\n  }\n\n  /**\n   * @notice Get the current allowance from `owner` for `spender`\n   * @param owner The address of the account which owns the tokens to be spent\n   * @param spender The address of the account which may transfer tokens\n   * @return The number of tokens allowed to be spent (-1 means infinite)\n   */\n  function allowance(address owner, address spender) public view override returns (uint256) {\n    return transferAllowances[owner][spender];\n  }\n\n  /**\n   * @notice Get the token balance of the `owner`\n   * @param owner The address of the account to query\n   * @return The number of tokens owned by `owner`\n   */\n  function balanceOf(address owner) public view override returns (uint256) {\n    return accountTokens[owner];\n  }\n\n  /*** Admin Functions ***/\n\n  /**\n   * @notice updates the cToken ERC20 name and symbol\n   * @dev Admin function to update the cToken ERC20 name and symbol\n   * @param _name the new ERC20 token name to use\n   * @param _symbol the new ERC20 token symbol to use\n   */\n  function _setNameAndSymbol(string calldata _name, string calldata _symbol) external {\n    // Check caller is admin\n    require(hasAdminRights(), \"!admin\");\n\n    // Set ERC20 name and symbol\n    name = _name;\n    symbol = _symbol;\n  }\n\n  function _setAddressesProvider(address _ap) external {\n    // Check caller is admin\n    require(hasAdminRights(), \"!admin\");\n\n    ap = AddressesProvider(_ap);\n  }\n\n  /**\n   * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n   * @dev Admin function to accrue interest and set a new reserve factor\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setReserveFactor(uint256 newReserveFactorMantissa) public override nonReentrant(false) returns (uint256) {\n    accrueInterest();\n    // Check caller is admin\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\n    }\n\n    // Verify market's block number equals current block number\n    if (accrualBlockNumber != block.number) {\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\n    }\n\n    // Check newReserveFactor ≤ maxReserveFactor\n    if (newReserveFactorMantissa + adminFeeMantissa + ionicFeeMantissa > reserveFactorPlusFeesMaxMantissa) {\n      return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\n    }\n\n    uint256 oldReserveFactorMantissa = reserveFactorMantissa;\n    reserveFactorMantissa = newReserveFactorMantissa;\n\n    emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice accrues interest and sets a new admin fee for the protocol using _setAdminFeeFresh\n   * @dev Admin function to accrue interest and set a new admin fee\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setAdminFee(uint256 newAdminFeeMantissa) public override nonReentrant(false) returns (uint256) {\n    accrueInterest();\n    // Verify market's block number equals current block number\n    if (accrualBlockNumber != block.number) {\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_ADMIN_FEE_FRESH_CHECK);\n    }\n\n    // Sanitize newAdminFeeMantissa\n    if (newAdminFeeMantissa == type(uint256).max) newAdminFeeMantissa = adminFeeMantissa;\n\n    // Get latest Ionic fee\n    uint256 newIonicFeeMantissa = IFeeDistributor(ionicAdmin).interestFeeRate();\n\n    // Check reserveFactorMantissa + newAdminFeeMantissa + newIonicFeeMantissa ≤ reserveFactorPlusFeesMaxMantissa\n    if (reserveFactorMantissa + newAdminFeeMantissa + newIonicFeeMantissa > reserveFactorPlusFeesMaxMantissa) {\n      return fail(Error.BAD_INPUT, FailureInfo.SET_ADMIN_FEE_BOUNDS_CHECK);\n    }\n\n    // If setting admin fee\n    if (adminFeeMantissa != newAdminFeeMantissa) {\n      // Check caller is admin\n      if (!hasAdminRights()) {\n        return fail(Error.UNAUTHORIZED, FailureInfo.SET_ADMIN_FEE_ADMIN_CHECK);\n      }\n\n      // Set admin fee\n      uint256 oldAdminFeeMantissa = adminFeeMantissa;\n      adminFeeMantissa = newAdminFeeMantissa;\n\n      // Emit event\n      emit NewAdminFee(oldAdminFeeMantissa, newAdminFeeMantissa);\n    }\n\n    // If setting Ionic fee\n    if (ionicFeeMantissa != newIonicFeeMantissa) {\n      // Set Ionic fee\n      uint256 oldIonicFeeMantissa = ionicFeeMantissa;\n      ionicFeeMantissa = newIonicFeeMantissa;\n\n      // Emit event\n      emit NewIonicFee(oldIonicFeeMantissa, newIonicFeeMantissa);\n    }\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\n   * @dev Admin function to accrue interest and update the interest rate model\n   * @param newInterestRateModel the new interest rate model to use\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setInterestRateModel(InterestRateModel newInterestRateModel)\n    public\n    override\n    nonReentrant(false)\n    returns (uint256)\n  {\n    accrueInterest();\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\n    }\n\n    if (accrualBlockNumber != block.number) {\n      return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n    }\n\n    require(newInterestRateModel.isInterestRateModel(), \"!notIrm\");\n\n    InterestRateModel oldInterestRateModel = interestRateModel;\n    interestRateModel = newInterestRateModel;\n    emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Returns the current per-block borrow interest rate for this cToken\n   * @return The borrow interest rate per block, scaled by 1e18\n   */\n  function borrowRatePerBlock() public view override returns (uint256) {\n    return\n      interestRateModel.getBorrowRate(\n        asCToken().getCash(),\n        totalBorrows,\n        totalReserves + totalAdminFees + totalIonicFees\n      );\n  }\n\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) public view returns (uint256) {\n    uint256 cash = asCToken().getCash();\n    require(cash >= borrowAmount, \"market cash not enough\");\n\n    return\n      interestRateModel.getBorrowRate(\n        cash - borrowAmount,\n        totalBorrows + borrowAmount,\n        totalReserves + totalAdminFees + totalIonicFees\n      );\n  }\n\n  /**\n   * @notice Returns the current per-block supply interest rate for this cToken\n   * @return The supply interest rate per block, scaled by 1e18\n   */\n  function supplyRatePerBlock() public view override returns (uint256) {\n    return\n      interestRateModel.getSupplyRate(\n        asCToken().getCash(),\n        totalBorrows,\n        totalReserves + totalAdminFees + totalIonicFees,\n        reserveFactorMantissa + ionicFeeMantissa + adminFeeMantissa\n      );\n  }\n\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256) {\n    return\n      interestRateModel.getSupplyRate(\n        asCToken().getCash() + mintAmount,\n        totalBorrows,\n        totalReserves + totalAdminFees + totalIonicFees,\n        reserveFactorMantissa + ionicFeeMantissa + adminFeeMantissa\n      );\n  }\n\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256) {\n    uint256 cash = asCToken().getCash();\n    require(cash >= withdrawAmount, \"market cash not enough\");\n    return\n      interestRateModel.getSupplyRate(\n        cash - withdrawAmount,\n        totalBorrows,\n        totalReserves + totalAdminFees + totalIonicFees,\n        reserveFactorMantissa + ionicFeeMantissa + adminFeeMantissa\n      );\n  }\n\n  /**\n   * @notice Accrue interest then return the up-to-date exchange rate\n   * @return Calculated exchange rate scaled by 1e18\n   */\n  function exchangeRateCurrent() public view override returns (uint256) {\n    if (block.number == accrualBlockNumber) {\n      return\n        _exchangeRateHypothetical(\n          totalSupply,\n          initialExchangeRateMantissa,\n          asCToken().getCash(),\n          totalBorrows,\n          totalReserves,\n          totalAdminFees,\n          totalIonicFees\n        );\n    } else {\n      uint256 cashPrior = asCToken().getCash();\n      InterestAccrual memory accrual = _accrueInterestHypothetical(block.number, cashPrior);\n\n      return\n        _exchangeRateHypothetical(\n          accrual.totalSupply,\n          initialExchangeRateMantissa,\n          cashPrior,\n          accrual.totalBorrows,\n          accrual.totalReserves,\n          accrual.totalAdminFees,\n          accrual.totalIonicFees\n        );\n    }\n  }\n\n  function _exchangeRateHypothetical(\n    uint256 _totalSupply,\n    uint256 _initialExchangeRateMantissa,\n    uint256 _totalCash,\n    uint256 _totalBorrows,\n    uint256 _totalReserves,\n    uint256 _totalAdminFees,\n    uint256 _totalIonicFees\n  ) internal pure returns (uint256) {\n    if (_totalSupply == 0) {\n      /*\n       * If there are no tokens minted:\n       *  exchangeRate = initialExchangeRate\n       */\n      return _initialExchangeRateMantissa;\n    } else {\n      /*\n       * Otherwise:\n       *  exchangeRate = (totalCash + totalBorrows - (totalReserves + totalIonicFees + totalAdminFees)) / totalSupply\n       */\n      uint256 cashPlusBorrowsMinusReserves;\n      Exp memory exchangeRate;\n      MathError mathErr;\n\n      (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(\n        _totalCash,\n        _totalBorrows,\n        _totalReserves + _totalAdminFees + _totalIonicFees\n      );\n      require(mathErr == MathError.NO_ERROR, \"!addThenSubUInt overflow check failed\");\n\n      (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\n      require(mathErr == MathError.NO_ERROR, \"!getExp overflow check failed\");\n\n      return exchangeRate.mantissa;\n    }\n  }\n\n  struct InterestAccrual {\n    uint256 accrualBlockNumber;\n    uint256 borrowIndex;\n    uint256 totalSupply;\n    uint256 totalBorrows;\n    uint256 totalReserves;\n    uint256 totalIonicFees;\n    uint256 totalAdminFees;\n    uint256 interestAccumulated;\n  }\n\n  function _accrueInterestHypothetical(uint256 blockNumber, uint256 cashPrior)\n    internal\n    view\n    returns (InterestAccrual memory accrual)\n  {\n    uint256 totalFees = totalAdminFees + totalIonicFees;\n    uint256 borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, totalBorrows, totalReserves + totalFees);\n    if (borrowRateMantissa > borrowRateMaxMantissa) {\n      if (cashPrior > totalFees) revert(\"!borrowRate\");\n      else borrowRateMantissa = borrowRateMaxMantissa;\n    }\n    (MathError mathErr, uint256 blockDelta) = subUInt(blockNumber, accrualBlockNumber);\n    require(mathErr == MathError.NO_ERROR, \"!blockDelta\");\n\n    /*\n     * Calculate the interest accumulated into borrows and reserves and the new index:\n     *  simpleInterestFactor = borrowRate * blockDelta\n     *  interestAccumulated = simpleInterestFactor * totalBorrows\n     *  totalBorrowsNew = interestAccumulated + totalBorrows\n     *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n     *  totalIonicFeesNew = interestAccumulated * ionicFee + totalIonicFees\n     *  totalAdminFeesNew = interestAccumulated * adminFee + totalAdminFees\n     *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n     */\n\n    accrual.accrualBlockNumber = blockNumber;\n    accrual.totalSupply = totalSupply;\n    Exp memory simpleInterestFactor = mul_(Exp({ mantissa: borrowRateMantissa }), blockDelta);\n    accrual.interestAccumulated = mul_ScalarTruncate(simpleInterestFactor, totalBorrows);\n    accrual.totalBorrows = accrual.interestAccumulated + totalBorrows;\n    accrual.totalReserves = mul_ScalarTruncateAddUInt(\n      Exp({ mantissa: reserveFactorMantissa }),\n      accrual.interestAccumulated,\n      totalReserves\n    );\n    accrual.totalIonicFees = mul_ScalarTruncateAddUInt(\n      Exp({ mantissa: ionicFeeMantissa }),\n      accrual.interestAccumulated,\n      totalIonicFees\n    );\n    accrual.totalAdminFees = mul_ScalarTruncateAddUInt(\n      Exp({ mantissa: adminFeeMantissa }),\n      accrual.interestAccumulated,\n      totalAdminFees\n    );\n    accrual.borrowIndex = mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndex, borrowIndex);\n  }\n\n  /**\n   * @notice Applies accrued interest to total borrows and reserves\n   * @dev This calculates interest accrued from the last checkpointed block\n   *   up to the current block and writes new checkpoint to storage.\n   */\n  function accrueInterest() public override returns (uint256) {\n    /* Remember the initial block number */\n    uint256 currentBlockNumber = block.number;\n\n    /* Short-circuit accumulating 0 interest */\n    if (accrualBlockNumber == currentBlockNumber) {\n      return uint256(Error.NO_ERROR);\n    }\n\n    uint256 cashPrior = asCToken().getCash();\n    InterestAccrual memory accrual = _accrueInterestHypothetical(currentBlockNumber, cashPrior);\n\n    /////////////////////////\n    // EFFECTS & INTERACTIONS\n    // (No safe failures beyond this point)\n    accrualBlockNumber = currentBlockNumber;\n    borrowIndex = accrual.borrowIndex;\n    totalBorrows = accrual.totalBorrows;\n    totalReserves = accrual.totalReserves;\n    totalIonicFees = accrual.totalIonicFees;\n    totalAdminFees = accrual.totalAdminFees;\n    emit AccrueInterest(cashPrior, accrual.interestAccumulated, borrowIndex, totalBorrows);\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Returns the current total borrows plus accrued interest\n   * @return The total borrows with interest\n   */\n  function totalBorrowsCurrent() external view override returns (uint256) {\n    if (accrualBlockNumber == block.number) {\n      return totalBorrows;\n    } else {\n      uint256 cashPrior = asCToken().getCash();\n      InterestAccrual memory accrual = _accrueInterestHypothetical(block.number, cashPrior);\n      return accrual.totalBorrows;\n    }\n  }\n\n  /**\n   * @notice Get a snapshot of the account's balances, and the cached exchange rate\n   * @dev This is used by comptroller to more efficiently perform liquidity checks.\n   * @param account Address of the account to snapshot\n   * @return (possible error, token balance, borrow balance, exchange rate mantissa)\n   */\n  function getAccountSnapshot(address account)\n    external\n    view\n    override\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    uint256 cTokenBalance = accountTokens[account];\n    uint256 borrowBalance;\n    uint256 exchangeRateMantissa;\n\n    borrowBalance = borrowBalanceCurrent(account);\n\n    exchangeRateMantissa = exchangeRateCurrent();\n\n    return (uint256(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\n  }\n\n  /**\n   * @notice calculate the borrowIndex and the account's borrow balance using the fresh borrowIndex\n   * @param account The address whose balance should be calculated after recalculating the borrowIndex\n   * @return The calculated balance\n   */\n  function borrowBalanceCurrent(address account) public view override returns (uint256) {\n    uint256 _borrowIndex;\n    if (accrualBlockNumber == block.number) {\n      _borrowIndex = borrowIndex;\n    } else {\n      uint256 cashPrior = asCToken().getCash();\n      InterestAccrual memory accrual = _accrueInterestHypothetical(block.number, cashPrior);\n      _borrowIndex = accrual.borrowIndex;\n    }\n\n    /* Note: we do not assert that the market is up to date */\n    MathError mathErr;\n    uint256 principalTimesIndex;\n    uint256 result;\n\n    /* Get borrowBalance and borrowIndex */\n    BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\n\n    /* If borrowBalance = 0 then borrowIndex is likely also 0.\n     * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\n     */\n    if (borrowSnapshot.principal == 0) {\n      return 0;\n    }\n\n    /* Calculate new borrow balance using the interest index:\n     *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\n     */\n    (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, _borrowIndex);\n    require(mathErr == MathError.NO_ERROR, \"!mulUInt overflow check failed\");\n\n    (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\n    require(mathErr == MathError.NO_ERROR, \"!divUInt overflow check failed\");\n\n    return result;\n  }\n\n  /**\n   * @notice Get the underlying balance of the `owner`\n   * @param owner The address of the account to query\n   * @return The amount of underlying owned by `owner`\n   */\n  function balanceOfUnderlying(address owner) external view override returns (uint256) {\n    Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\n    (MathError mErr, uint256 balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\n    require(mErr == MathError.NO_ERROR, \"!balance\");\n    return balance;\n  }\n\n  function flash(uint256 amount, bytes calldata data) public override isAuthorized {\n    accrueInterest();\n\n    totalBorrows += amount;\n    asCToken().selfTransferOut(msg.sender, amount);\n\n    IFlashLoanReceiver(msg.sender).receiveFlashLoan(underlying, amount, data);\n\n    asCToken().selfTransferIn(msg.sender, amount);\n    totalBorrows -= amount;\n\n    emit Flash(msg.sender, amount);\n  }\n\n  /*** Reentrancy Guard ***/\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   */\n  modifier nonReentrant(bool localOnly) {\n    _beforeNonReentrant(localOnly);\n    _;\n    _afterNonReentrant(localOnly);\n  }\n\n  /**\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\n   * Saves space because function modifier code is \"inlined\" into every function with the modifier).\n   * In this specific case, the optimization saves around 1500 bytes of that valuable 24 KB limit.\n   */\n  function _beforeNonReentrant(bool localOnly) private {\n    require(_notEntered, \"re-entered\");\n    if (!localOnly) comptroller._beforeNonReentrant();\n    _notEntered = false;\n  }\n\n  /**\n   * @dev Split off from `nonReentrant` to keep contract below the 24 KB size limit.\n   * Saves space because function modifier code is \"inlined\" into every function with the modifier).\n   * In this specific case, the optimization saves around 150 bytes of that valuable 24 KB limit.\n   */\n  function _afterNonReentrant(bool localOnly) private {\n    _notEntered = true; // get a gas-refund post-Istanbul\n    if (!localOnly) comptroller._afterNonReentrant();\n  }\n\n  function asCToken() internal view returns (ICErc20) {\n    return ICErc20(address(this));\n  }\n\n  function multicall(bytes[] calldata data)\n    public\n    payable\n    override(CTokenFirstExtensionInterface, Multicall)\n    returns (bytes[] memory results)\n  {\n    return Multicall.multicall(data);\n  }\n\n  function registerInSFS() external returns (uint256) {\n    require(hasAdminRights() || msg.sender == address(comptroller), \"!admin\");\n    SFSRegister sfsContract = SFSRegister(0x8680CEaBcb9b56913c519c069Add6Bc3494B7020);\n    return sfsContract.register(0x8Fba84867Ba458E7c6E2c024D2DE3d0b5C3ea1C2);\n  }\n}\n"
    },
    "contracts/compound/CTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IonicComptroller } from \"./ComptrollerInterface.sol\";\nimport { InterestRateModel } from \"./InterestRateModel.sol\";\nimport { ComptrollerV3Storage } from \"./ComptrollerStorage.sol\";\nimport { AddressesProvider } from \"../ionic/AddressesProvider.sol\";\n\nabstract contract CTokenAdminStorage {\n  /*\n   * Administrator for Ionic\n   */\n  address payable public ionicAdmin;\n}\n\nabstract contract CErc20Storage is CTokenAdminStorage {\n  /**\n   * @dev Guard variable for re-entrancy checks\n   */\n  bool internal _notEntered;\n\n  /**\n   * @notice EIP-20 token name for this token\n   */\n  string public name;\n\n  /**\n   * @notice EIP-20 token symbol for this token\n   */\n  string public symbol;\n\n  /**\n   * @notice EIP-20 token decimals for this token\n   */\n  uint8 public decimals;\n\n  /*\n   * Maximum borrow rate that can ever be applied (.0005% / block)\n   */\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\n\n  /*\n   * Maximum fraction of interest that can be set aside for reserves + fees\n   */\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\n\n  /**\n   * @notice Contract which oversees inter-cToken operations\n   */\n  IonicComptroller public comptroller;\n\n  /**\n   * @notice Model which tells what the current interest rate should be\n   */\n  InterestRateModel public interestRateModel;\n\n  /*\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\n   */\n  uint256 internal initialExchangeRateMantissa;\n\n  /**\n   * @notice Fraction of interest currently set aside for admin fees\n   */\n  uint256 public adminFeeMantissa;\n\n  /**\n   * @notice Fraction of interest currently set aside for Ionic fees\n   */\n  uint256 public ionicFeeMantissa;\n\n  /**\n   * @notice Fraction of interest currently set aside for reserves\n   */\n  uint256 public reserveFactorMantissa;\n\n  /**\n   * @notice Block number that interest was last accrued at\n   */\n  uint256 public accrualBlockNumber;\n\n  /**\n   * @notice Accumulator of the total earned interest rate since the opening of the market\n   */\n  uint256 public borrowIndex;\n\n  /**\n   * @notice Total amount of outstanding borrows of the underlying in this market\n   */\n  uint256 public totalBorrows;\n\n  /**\n   * @notice Total amount of reserves of the underlying held in this market\n   */\n  uint256 public totalReserves;\n\n  /**\n   * @notice Total amount of admin fees of the underlying held in this market\n   */\n  uint256 public totalAdminFees;\n\n  /**\n   * @notice Total amount of Ionic fees of the underlying held in this market\n   */\n  uint256 public totalIonicFees;\n\n  /**\n   * @notice Total number of tokens in circulation\n   */\n  uint256 public totalSupply;\n\n  /*\n   * Official record of token balances for each account\n   */\n  mapping(address => uint256) internal accountTokens;\n\n  /*\n   * Approved token transfer amounts on behalf of others\n   */\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\n\n  /**\n   * @notice Container for borrow balance information\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n   */\n  struct BorrowSnapshot {\n    uint256 principal;\n    uint256 interestIndex;\n  }\n\n  /*\n   * Mapping of account addresses to outstanding borrow balances\n   */\n  mapping(address => BorrowSnapshot) internal accountBorrows;\n\n  /*\n   * Share of seized collateral that is added to reserves\n   */\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\n\n  /*\n   * Share of seized collateral taken as fees\n   */\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\n\n  /**\n   * @notice Underlying asset for this CToken\n   */\n  address public underlying;\n\n  /**\n   * @notice Addresses Provider\n   */\n  AddressesProvider public ap;\n}\n\nabstract contract CTokenBaseEvents {\n  /* ERC20 */\n\n  /**\n   * @notice EIP20 Transfer event\n   */\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n\n  /*** Admin Events ***/\n\n  /**\n   * @notice Event emitted when interestRateModel is changed\n   */\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\n\n  /**\n   * @notice Event emitted when the reserve factor is changed\n   */\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\n\n  /**\n   * @notice Event emitted when the admin fee is changed\n   */\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\n\n  /**\n   * @notice Event emitted when the Ionic fee is changed\n   */\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\n\n  /**\n   * @notice EIP20 Approval event\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n  /**\n   * @notice Event emitted when interest is accrued\n   */\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\n}\n\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\n  event Flash(address receiver, uint256 amount);\n}\n\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\n  /*** Market Events ***/\n\n  /**\n   * @notice Event emitted when tokens are minted\n   */\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n\n  /**\n   * @notice Event emitted when tokens are redeemed\n   */\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n  /**\n   * @notice Event emitted when underlying is borrowed\n   */\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\n\n  /**\n   * @notice Event emitted when a borrow is repaid\n   */\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\n\n  /**\n   * @notice Event emitted when a borrow is liquidated\n   */\n  event LiquidateBorrow(\n    address liquidator,\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral,\n    uint256 seizeTokens\n  );\n\n  /**\n   * @notice Event emitted when the reserves are added\n   */\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\n\n  /**\n   * @notice Event emitted when the reserves are reduced\n   */\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\n}\n\ninterface CTokenFirstExtensionInterface {\n  /*** User Interface ***/\n\n  function transfer(address dst, uint256 amount) external returns (bool);\n\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 amount\n  ) external returns (bool);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  /*** Admin Functions ***/\n\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\n\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\n\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\n\n  function getAccountSnapshot(address account)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function borrowRatePerBlock() external view returns (uint256);\n\n  function supplyRatePerBlock() external view returns (uint256);\n\n  function exchangeRateCurrent() external view returns (uint256);\n\n  function accrueInterest() external returns (uint256);\n\n  function totalBorrowsCurrent() external view returns (uint256);\n\n  function borrowBalanceCurrent(address account) external view returns (uint256);\n\n  function getTotalUnderlyingSupplied() external view returns (uint256);\n\n  function balanceOfUnderlying(address owner) external view returns (uint256);\n\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n\n  function flash(uint256 amount, bytes calldata data) external;\n\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\n\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\n\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\n\n  function registerInSFS() external returns (uint256);\n}\n\ninterface CTokenSecondExtensionInterface {\n  function mint(uint256 mintAmount) external returns (uint256);\n\n  function redeem(uint256 redeemTokens) external returns (uint256);\n\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n  function borrow(uint256 borrowAmount) external returns (uint256);\n\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\n\n  function liquidateBorrow(\n    address borrower,\n    uint256 repayAmount,\n    address cTokenCollateral\n  ) external returns (uint256);\n\n  function getCash() external view returns (uint256);\n\n  function seize(\n    address liquidator,\n    address borrower,\n    uint256 seizeTokens\n  ) external returns (uint256);\n\n  /*** Admin Functions ***/\n\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\n\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\n\n  function selfTransferOut(address to, uint256 amount) external;\n\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\n}\n\ninterface CDelegatorInterface {\n  function implementation() external view returns (address);\n\n  /**\n   * @notice Called by the admin to update the implementation of the delegator\n   * @param implementation_ The address of the new implementation for delegation\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n   */\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\n\n  /**\n   * @dev upgrades the implementation if necessary\n   */\n  function _upgrade() external;\n}\n\ninterface CDelegateInterface {\n  /**\n   * @notice Called by the delegator on a delegate to initialize it for duty\n   * @dev Should revert if any issues arise which make it unfit for delegation\n   * @param data The encoded bytes data for any initialization\n   */\n  function _becomeImplementation(bytes calldata data) external;\n\n  function delegateType() external pure returns (uint8);\n\n  function contractType() external pure returns (string memory);\n}\n\nabstract contract CErc20AdminBase is CErc20Storage {\n  /**\n   * @notice Returns a boolean indicating if the sender has admin rights\n   */\n  function hasAdminRights() internal view returns (bool) {\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\n    return\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\n  }\n}\n\nabstract contract CErc20FirstExtensionBase is\n  CErc20AdminBase,\n  CTokenFirstExtensionEvents,\n  CTokenFirstExtensionInterface\n{}\n\nabstract contract CTokenSecondExtensionBase is\n  CErc20AdminBase,\n  CTokenSecondExtensionEvents,\n  CTokenSecondExtensionInterface,\n  CDelegateInterface\n{}\n\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\n\ninterface CErc20StorageInterface {\n  function admin() external view returns (address);\n\n  function adminHasRights() external view returns (bool);\n\n  function ionicAdmin() external view returns (address);\n\n  function ionicAdminHasRights() external view returns (bool);\n\n  function comptroller() external view returns (IonicComptroller);\n\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function decimals() external view returns (uint8);\n\n  function totalSupply() external view returns (uint256);\n\n  function adminFeeMantissa() external view returns (uint256);\n\n  function ionicFeeMantissa() external view returns (uint256);\n\n  function reserveFactorMantissa() external view returns (uint256);\n\n  function protocolSeizeShareMantissa() external view returns (uint256);\n\n  function feeSeizeShareMantissa() external view returns (uint256);\n\n  function totalReserves() external view returns (uint256);\n\n  function totalAdminFees() external view returns (uint256);\n\n  function totalIonicFees() external view returns (uint256);\n\n  function totalBorrows() external view returns (uint256);\n\n  function accrualBlockNumber() external view returns (uint256);\n\n  function underlying() external view returns (address);\n\n  function borrowIndex() external view returns (uint256);\n\n  function interestRateModel() external view returns (address);\n}\n\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\n  function plugin() external view returns (address);\n}\n\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\n  function approve(address, address) external;\n}\n\ninterface ICErc20 is\n  CErc20StorageInterface,\n  CTokenSecondExtensionInterface,\n  CTokenFirstExtensionInterface,\n  CDelegatorInterface,\n  CDelegateInterface\n{}\n\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\n  function _updatePlugin(address _plugin) external;\n}\n\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\n"
    },
    "contracts/compound/EIP20Interface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/**\n * @title ERC 20 Token Standard Interface\n *  https://eips.ethereum.org/EIPS/eip-20\n */\ninterface EIP20Interface {\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function decimals() external view returns (uint8);\n\n  /**\n   * @notice Get the total number of tokens in circulation\n   * @return uint256 The supply of tokens\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @notice Gets the balance of the specified address\n   * @param owner The address from which the balance will be retrieved\n   * @return balance uint256 The balance\n   */\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  /**\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n   * @param dst The address of the destination account\n   * @param amount The number of tokens to transfer\n   * @return success bool Whether or not the transfer succeeded\n   */\n  function transfer(address dst, uint256 amount) external returns (bool success);\n\n  /**\n   * @notice Transfer `amount` tokens from `src` to `dst`\n   * @param src The address of the source account\n   * @param dst The address of the destination account\n   * @param amount The number of tokens to transfer\n   * @return success bool Whether or not the transfer succeeded\n   */\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 amount\n  ) external returns (bool success);\n\n  /**\n   * @notice Approve `spender` to transfer up to `amount` from `src`\n   * @dev This will overwrite the approval amount for `spender`\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n   * @param spender The address of the account which may transfer tokens\n   * @param amount The number of tokens that are approved (-1 means infinite)\n   * @return success bool Whether or not the approval succeeded\n   */\n  function approve(address spender, uint256 amount) external returns (bool success);\n\n  /**\n   * @notice Get the current allowance from `owner` for `spender`\n   * @param owner The address of the account which owns the tokens to be spent\n   * @param spender The address of the account which may transfer tokens\n   * @return remaining uint256 The number of tokens allowed to be spent (-1 means infinite)\n   */\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n"
    },
    "contracts/compound/ErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\ncontract ComptrollerErrorReporter {\n  enum Error {\n    NO_ERROR,\n    UNAUTHORIZED,\n    COMPTROLLER_MISMATCH,\n    INSUFFICIENT_SHORTFALL,\n    INSUFFICIENT_LIQUIDITY,\n    INVALID_CLOSE_FACTOR,\n    INVALID_COLLATERAL_FACTOR,\n    INVALID_LIQUIDATION_INCENTIVE,\n    MARKET_NOT_LISTED,\n    MARKET_ALREADY_LISTED,\n    MATH_ERROR,\n    NONZERO_BORROW_BALANCE,\n    PRICE_ERROR,\n    REJECTION,\n    SNAPSHOT_ERROR,\n    TOO_MANY_ASSETS,\n    TOO_MUCH_REPAY,\n    SUPPLIER_NOT_WHITELISTED,\n    BORROW_BELOW_MIN,\n    SUPPLY_ABOVE_MAX,\n    NONZERO_TOTAL_SUPPLY\n  }\n\n  enum FailureInfo {\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n    ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\n    EXIT_MARKET_BALANCE_OWED,\n    EXIT_MARKET_REJECTION,\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\n    TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\n    SET_CLOSE_FACTOR_OWNER_CHECK,\n    SET_CLOSE_FACTOR_VALIDATION,\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\n    SET_COLLATERAL_FACTOR_VALIDATION,\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\n    SET_PENDING_ADMIN_OWNER_CHECK,\n    SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\n    SET_PRICE_ORACLE_OWNER_CHECK,\n    SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\n    SET_WHITELIST_STATUS_OWNER_CHECK,\n    SUPPORT_MARKET_EXISTS,\n    SUPPORT_MARKET_OWNER_CHECK,\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\n    UNSUPPORT_MARKET_OWNER_CHECK,\n    UNSUPPORT_MARKET_DOES_NOT_EXIST,\n    UNSUPPORT_MARKET_IN_USE\n  }\n\n  /**\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n   **/\n  event Failure(uint256 error, uint256 info, uint256 detail);\n\n  /**\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n   */\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\n    emit Failure(uint256(err), uint256(info), 0);\n\n    return uint256(err);\n  }\n\n  /**\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n   */\n  function failOpaque(\n    Error err,\n    FailureInfo info,\n    uint256 opaqueError\n  ) internal returns (uint256) {\n    emit Failure(uint256(err), uint256(info), opaqueError);\n\n    return uint256(err);\n  }\n}\n\ncontract TokenErrorReporter {\n  enum Error {\n    NO_ERROR,\n    UNAUTHORIZED,\n    BAD_INPUT,\n    COMPTROLLER_REJECTION,\n    COMPTROLLER_CALCULATION_ERROR,\n    INTEREST_RATE_MODEL_ERROR,\n    INVALID_ACCOUNT_PAIR,\n    INVALID_CLOSE_AMOUNT_REQUESTED,\n    INVALID_COLLATERAL_FACTOR,\n    MATH_ERROR,\n    MARKET_NOT_FRESH,\n    MARKET_NOT_LISTED,\n    TOKEN_INSUFFICIENT_ALLOWANCE,\n    TOKEN_INSUFFICIENT_BALANCE,\n    TOKEN_INSUFFICIENT_CASH,\n    TOKEN_TRANSFER_IN_FAILED,\n    TOKEN_TRANSFER_OUT_FAILED,\n    UTILIZATION_ABOVE_MAX\n  }\n\n  /*\n   * Note: FailureInfo (but not Error) is kept in alphabetical order\n   *       This is because FailureInfo grows significantly faster, and\n   *       the order of Error has some meaning, while the order of FailureInfo\n   *       is entirely arbitrary.\n   */\n  enum FailureInfo {\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n    ACCRUE_INTEREST_NEW_TOTAL_IONIC_FEES_CALCULATION_FAILED,\n    ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n    BORROW_ACCRUE_INTEREST_FAILED,\n    BORROW_CASH_NOT_AVAILABLE,\n    BORROW_FRESHNESS_CHECK,\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n    BORROW_MARKET_NOT_LISTED,\n    BORROW_COMPTROLLER_REJECTION,\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\n    LIQUIDATE_COMPTROLLER_REJECTION,\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\n    LIQUIDATE_FRESHNESS_CHECK,\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\n    LIQUIDATE_SEIZE_TOO_MUCH,\n    MINT_ACCRUE_INTEREST_FAILED,\n    MINT_COMPTROLLER_REJECTION,\n    MINT_EXCHANGE_CALCULATION_FAILED,\n    MINT_EXCHANGE_RATE_READ_FAILED,\n    MINT_FRESHNESS_CHECK,\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n    MINT_TRANSFER_IN_FAILED,\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\n    NEW_UTILIZATION_RATE_ABOVE_MAX,\n    REDEEM_ACCRUE_INTEREST_FAILED,\n    REDEEM_COMPTROLLER_REJECTION,\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\n    REDEEM_FRESHNESS_CHECK,\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\n    WITHDRAW_IONIC_FEES_ACCRUE_INTEREST_FAILED,\n    WITHDRAW_IONIC_FEES_CASH_NOT_AVAILABLE,\n    WITHDRAW_IONIC_FEES_FRESH_CHECK,\n    WITHDRAW_IONIC_FEES_VALIDATION,\n    WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\n    WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\n    WITHDRAW_ADMIN_FEES_FRESH_CHECK,\n    WITHDRAW_ADMIN_FEES_VALIDATION,\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\n    REDUCE_RESERVES_ADMIN_CHECK,\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\n    REDUCE_RESERVES_FRESH_CHECK,\n    REDUCE_RESERVES_VALIDATION,\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n    REPAY_BORROW_COMPTROLLER_REJECTION,\n    REPAY_BORROW_FRESHNESS_CHECK,\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\n    SET_COLLATERAL_FACTOR_VALIDATION,\n    SET_COMPTROLLER_OWNER_CHECK,\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\n    SET_PENDING_ADMIN_OWNER_CHECK,\n    SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\n    SET_ADMIN_FEE_ADMIN_CHECK,\n    SET_ADMIN_FEE_FRESH_CHECK,\n    SET_ADMIN_FEE_BOUNDS_CHECK,\n    SET_IONIC_FEE_ACCRUE_INTEREST_FAILED,\n    SET_IONIC_FEE_FRESH_CHECK,\n    SET_IONIC_FEE_BOUNDS_CHECK,\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\n    SET_RESERVE_FACTOR_FRESH_CHECK,\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\n    TRANSFER_COMPTROLLER_REJECTION,\n    TRANSFER_NOT_ALLOWED,\n    TRANSFER_NOT_ENOUGH,\n    TRANSFER_TOO_MUCH,\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\n    ADD_RESERVES_FRESH_CHECK,\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\n  }\n\n  /**\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n   **/\n  event Failure(uint256 error, uint256 info, uint256 detail);\n\n  /**\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n   */\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\n    emit Failure(uint256(err), uint256(info), 0);\n\n    return uint256(err);\n  }\n\n  /**\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n   */\n  function failOpaque(\n    Error err,\n    FailureInfo info,\n    uint256 opaqueError\n  ) internal returns (uint256) {\n    emit Failure(uint256(err), uint256(info), opaqueError);\n\n    return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint256(err);\n  }\n}\n"
    },
    "contracts/compound/Exponential.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./CarefulMath.sol\";\nimport \"./ExponentialNoError.sol\";\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author Compound\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\ncontract Exponential is CarefulMath, ExponentialNoError {\n  /**\n   * @dev Creates an exponential from numerator and denominator values.\n   *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n   *            or if `denom` is zero.\n   */\n  function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\n    (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({ mantissa: 0 }));\n    }\n\n    (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\n    if (err1 != MathError.NO_ERROR) {\n      return (err1, Exp({ mantissa: 0 }));\n    }\n\n    return (MathError.NO_ERROR, Exp({ mantissa: rational }));\n  }\n\n  /**\n   * @dev Adds two exponentials, returning a new exponential.\n   */\n  function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n    (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\n\n    return (error, Exp({ mantissa: result }));\n  }\n\n  /**\n   * @dev Subtracts two exponentials, returning a new exponential.\n   */\n  function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n    (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\n\n    return (error, Exp({ mantissa: result }));\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, returning a new Exp.\n   */\n  function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\n    (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({ mantissa: 0 }));\n    }\n\n    return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n   */\n  function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\n    if (err != MathError.NO_ERROR) {\n      return (err, 0);\n    }\n\n    return (MathError.NO_ERROR, truncate(product));\n  }\n\n  /**\n   * @dev Divide an Exp by a scalar, returning a new Exp.\n   */\n  function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\n    (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({ mantissa: 0 }));\n    }\n\n    return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\n  }\n\n  /**\n   * @dev Divide a scalar by an Exp, returning a new Exp.\n   */\n  function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\n    /*\n          We are doing this as:\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n\n          How it works:\n          Exp = a / b;\n          Scalar = s;\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n        */\n    (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({ mantissa: 0 }));\n    }\n    return getExp(numerator, divisor.mantissa);\n  }\n\n  /**\n   * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\n   */\n  function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\n    (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n    if (err != MathError.NO_ERROR) {\n      return (err, 0);\n    }\n\n    return (MathError.NO_ERROR, truncate(fraction));\n  }\n\n  /**\n   * @dev Multiplies two exponentials, returning a new exponential.\n   */\n  function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n    (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\n    if (err0 != MathError.NO_ERROR) {\n      return (err0, Exp({ mantissa: 0 }));\n    }\n\n    // We add half the scale before dividing so that we get rounding instead of truncation.\n    //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\n    // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n    (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\n    if (err1 != MathError.NO_ERROR) {\n      return (err1, Exp({ mantissa: 0 }));\n    }\n\n    (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\n    // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n    assert(err2 == MathError.NO_ERROR);\n\n    return (MathError.NO_ERROR, Exp({ mantissa: product }));\n  }\n\n  /**\n   * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\n   */\n  function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\n    return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\n  }\n\n  /**\n   * @dev Multiplies three exponentials, returning a new exponential.\n   */\n  function mulExp3(\n    Exp memory a,\n    Exp memory b,\n    Exp memory c\n  ) internal pure returns (MathError, Exp memory) {\n    (MathError err, Exp memory ab) = mulExp(a, b);\n    if (err != MathError.NO_ERROR) {\n      return (err, ab);\n    }\n    return mulExp(ab, c);\n  }\n\n  /**\n   * @dev Divides two exponentials, returning a new exponential.\n   *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n   *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\n   */\n  function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\n    return getExp(a.mantissa, b.mantissa);\n  }\n}\n"
    },
    "contracts/compound/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author Compound\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\ncontract ExponentialNoError {\n  uint256 constant expScale = 1e18;\n  uint256 constant doubleScale = 1e36;\n  uint256 constant halfExpScale = expScale / 2;\n  uint256 constant mantissaOne = expScale;\n\n  struct Exp {\n    uint256 mantissa;\n  }\n\n  struct Double {\n    uint256 mantissa;\n  }\n\n  /**\n   * @dev Truncates the given exp to a whole number value.\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n   */\n  function truncate(Exp memory exp) internal pure returns (uint256) {\n    // Note: We are not using careful math here as we're performing a division that cannot fail\n    return exp.mantissa / expScale;\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n   */\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\n    Exp memory product = mul_(a, scalar);\n    return truncate(product);\n  }\n\n  /**\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n   */\n  function mul_ScalarTruncateAddUInt(\n    Exp memory a,\n    uint256 scalar,\n    uint256 addend\n  ) internal pure returns (uint256) {\n    Exp memory product = mul_(a, scalar);\n    return add_(truncate(product), addend);\n  }\n\n  /**\n   * @dev Checks if first Exp is less than second Exp.\n   */\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\n    return left.mantissa < right.mantissa;\n  }\n\n  /**\n   * @dev Checks if left Exp <= right Exp.\n   */\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\n    return left.mantissa <= right.mantissa;\n  }\n\n  /**\n   * @dev Checks if left Exp > right Exp.\n   */\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\n    return left.mantissa > right.mantissa;\n  }\n\n  /**\n   * @dev returns true if Exp is exactly zero\n   */\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\n    return value.mantissa == 0;\n  }\n\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\n    require(n < 2**224, errorMessage);\n    return uint224(n);\n  }\n\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n    require(n < 2**32, errorMessage);\n    return uint32(n);\n  }\n\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\n  }\n\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\n  }\n\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\n    return add_(a, b, \"addition overflow\");\n  }\n\n  function add_(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a, errorMessage);\n    return c;\n  }\n\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\n  }\n\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\n  }\n\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub_(a, b, \"subtraction underflow\");\n  }\n\n  function sub_(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b <= a, errorMessage);\n    return a - b;\n  }\n\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\n  }\n\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\n    return Exp({ mantissa: mul_(a.mantissa, b) });\n  }\n\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\n    return mul_(a, b.mantissa) / expScale;\n  }\n\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\n  }\n\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\n    return Double({ mantissa: mul_(a.mantissa, b) });\n  }\n\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\n    return mul_(a, b.mantissa) / doubleScale;\n  }\n\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\n    return mul_(a, b, \"multiplication overflow\");\n  }\n\n  function mul_(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    if (a == 0 || b == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    require(c / a == b, errorMessage);\n    return c;\n  }\n\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\n  }\n\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\n    return Exp({ mantissa: div_(a.mantissa, b) });\n  }\n\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\n    return div_(mul_(a, expScale), b.mantissa);\n  }\n\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\n  }\n\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\n    return Double({ mantissa: div_(a.mantissa, b) });\n  }\n\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\n    return div_(mul_(a, doubleScale), b.mantissa);\n  }\n\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div_(a, b, \"divide by zero\");\n  }\n\n  function div_(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b > 0, errorMessage);\n    return a / b;\n  }\n\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\n  }\n}\n"
    },
    "contracts/compound/IERC4626.sol": {
      "content": "pragma solidity >=0.8.0;\npragma experimental ABIEncoderV2;\n\nimport { EIP20Interface } from \"./EIP20Interface.sol\";\n\ninterface IERC4626 is EIP20Interface {\n  /*----------------------------------------------------------------\n                                Events\n    ----------------------------------------------------------------*/\n\n  event Deposit(address indexed from, address indexed to, uint256 value);\n\n  event Withdraw(address indexed from, address indexed to, uint256 value);\n\n  /*----------------------------------------------------------------\n                            Mutable Functions\n    ----------------------------------------------------------------*/\n\n  /**\n      @notice Deposit a specific amount of underlying tokens.\n      @param underlyingAmount The amount of the underlying token to deposit.\n      @param to The address to receive shares corresponding to the deposit\n      @return shares The shares in the vault credited to `to`\n    */\n  function deposit(uint256 underlyingAmount, address to) external returns (uint256 shares);\n\n  /**\n      @notice Mint an exact amount of shares for a variable amount of underlying tokens.\n      @param shareAmount The amount of vault shares to mint.\n      @param to The address to receive shares corresponding to the mint.\n      @return underlyingAmount The amount of the underlying tokens deposited from the mint call.\n    */\n  function mint(uint256 shareAmount, address to) external returns (uint256 underlyingAmount);\n\n  /**\n      @notice Withdraw a specific amount of underlying tokens.\n      @param underlyingAmount The amount of the underlying token to withdraw.\n      @param to The address to receive underlying corresponding to the withdrawal.\n      @param from The address to burn shares from corresponding to the withdrawal.\n      @return shares The shares in the vault burned from sender\n    */\n  function withdraw(\n    uint256 underlyingAmount,\n    address to,\n    address from\n  ) external returns (uint256 shares);\n\n  /**\n      @notice Redeem a specific amount of shares for underlying tokens.\n      @param shareAmount The amount of shares to redeem.\n      @param to The address to receive underlying corresponding to the redemption.\n      @param from The address to burn shares from corresponding to the redemption.\n      @return value The underlying amount transferred to `to`.\n    */\n  function redeem(\n    uint256 shareAmount,\n    address to,\n    address from\n  ) external returns (uint256 value);\n\n  /*----------------------------------------------------------------\n                            View Functions\n    ----------------------------------------------------------------*/\n  /** \n      @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n      @return the address of the asset\n    */\n  function asset() external view returns (address);\n\n  /** \n      @notice Returns a user's Vault balance in underlying tokens.\n      @param user The user to get the underlying balance of.\n      @return balance The user's Vault balance in underlying tokens.\n    */\n  function balanceOfUnderlying(address user) external view returns (uint256 balance);\n\n  /** \n      @notice Calculates the total amount of underlying tokens the Vault manages.\n      @return The total amount of underlying tokens the Vault manages.\n    */\n  function totalAssets() external view returns (uint256);\n\n  /** \n      @notice Returns the value in underlying terms of one vault token. \n     */\n  function exchangeRate() external view returns (uint256);\n\n  /**\n      @notice Returns the amount of vault tokens that would be obtained if depositing a given amount of underlying tokens in a `deposit` call.\n      @param underlyingAmount the input amount of underlying tokens\n      @return shareAmount the corresponding amount of shares out from a deposit call with `underlyingAmount` in\n     */\n  function previewDeposit(uint256 underlyingAmount) external view returns (uint256 shareAmount);\n\n  /**\n      @notice Returns the amount of underlying tokens that would be deposited if minting a given amount of shares in a `mint` call.\n      @param shareAmount the amount of shares from a mint call.\n      @return underlyingAmount the amount of underlying tokens corresponding to the mint call\n     */\n  function previewMint(uint256 shareAmount) external view returns (uint256 underlyingAmount);\n\n  /**\n      @notice Returns the amount of vault tokens that would be burned if withdrawing a given amount of underlying tokens in a `withdraw` call.\n      @param underlyingAmount the input amount of underlying tokens\n      @return shareAmount the corresponding amount of shares out from a withdraw call with `underlyingAmount` in\n     */\n  function previewWithdraw(uint256 underlyingAmount) external view returns (uint256 shareAmount);\n\n  /**\n      @notice Returns the amount of underlying tokens that would be obtained if redeeming a given amount of shares in a `redeem` call.\n      @param shareAmount the amount of shares from a redeem call.\n      @return underlyingAmount the amount of underlying tokens corresponding to the redeem call\n     */\n  function previewRedeem(uint256 shareAmount) external view returns (uint256 underlyingAmount);\n}\n"
    },
    "contracts/compound/IFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"../ionic/AuthoritiesRegistry.sol\";\n\ninterface IFeeDistributor {\n  function minBorrowEth() external view returns (uint256);\n\n  function maxUtilizationRate() external view returns (uint256);\n\n  function interestFeeRate() external view returns (uint256);\n\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\n\n  function latestCErc20Delegate(uint8 delegateType)\n    external\n    view\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\n\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\n\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\n\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\n\n  function deployCErc20(\n    uint8 delegateType,\n    bytes calldata constructorData,\n    bytes calldata becomeImplData\n  ) external returns (address);\n\n  function canCall(\n    address pool,\n    address user,\n    address target,\n    bytes4 functionSig\n  ) external view returns (bool);\n\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\n\n  fallback() external payable;\n\n  receive() external payable;\n}\n"
    },
    "contracts/compound/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/**\n * @title Compound's InterestRateModel Interface\n * @author Compound\n */\nabstract contract InterestRateModel {\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n  bool public constant isInterestRateModel = true;\n\n  /**\n   * @notice Calculates the current borrow interest rate per block\n   * @param cash The total amount of cash the market has\n   * @param borrows The total amount of borrows the market has outstanding\n   * @param reserves The total amount of reserves the market has\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public view virtual returns (uint256);\n\n  /**\n   * @notice Calculates the current supply interest rate per block\n   * @param cash The total amount of cash the market has\n   * @param borrows The total amount of borrows the market has outstanding\n   * @param reserves The total amount of reserves the market has\n   * @param reserveFactorMantissa The current reserve factor the market has\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) public view virtual returns (uint256);\n}\n"
    },
    "contracts/compound/JumpRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./InterestRateModel.sol\";\n\n/**\n * @title Compound's JumpRateModel Contract\n * @author Compound\n */\ncontract JumpRateModel is InterestRateModel {\n  event NewInterestParams(\n    uint256 baseRatePerBlock,\n    uint256 multiplierPerBlock,\n    uint256 jumpMultiplierPerBlock,\n    uint256 kink\n  );\n\n  /**\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\n   */\n  uint256 public blocksPerYear;\n\n  /**\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\n   */\n  uint256 public multiplierPerBlock;\n\n  /**\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\n   */\n  uint256 public baseRatePerBlock;\n\n  /**\n   * @notice The multiplierPerBlock after hitting a specified utilization point\n   */\n  uint256 public jumpMultiplierPerBlock;\n\n  /**\n   * @notice The utilization point at which the jump multiplier is applied\n   */\n  uint256 public kink;\n\n  /**\n   * @notice Construct an interest rate model\n   * @param _blocksPerYear The approximate number of blocks per year\n   * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n   * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n   * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n   * @param kink_ The utilization point at which the jump multiplier is applied\n   */\n  constructor(\n    uint256 _blocksPerYear,\n    uint256 baseRatePerYear,\n    uint256 multiplierPerYear,\n    uint256 jumpMultiplierPerYear,\n    uint256 kink_\n  ) {\n    blocksPerYear = _blocksPerYear;\n    baseRatePerBlock = baseRatePerYear / blocksPerYear;\n    multiplierPerBlock = multiplierPerYear / blocksPerYear;\n    jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear;\n    kink = kink_;\n\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\n  }\n\n  /**\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market (currently unused)\n   * @return The utilization rate as a mantissa between [0, 1e18]\n   */\n  function utilizationRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public pure returns (uint256) {\n    // Utilization rate is 0 when there are no borrows\n    if (borrows == 0) {\n      return 0;\n    }\n\n    return (borrows * 1e18) / (cash + borrows - reserves);\n  }\n\n  /**\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getBorrowRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves\n  ) public view override returns (uint256) {\n    uint256 util = utilizationRate(cash, borrows, reserves);\n\n    if (util <= kink) {\n      return ((util * multiplierPerBlock) / 1e18) + baseRatePerBlock;\n    } else {\n      uint256 normalRate = ((kink * multiplierPerBlock) / 1e18) + baseRatePerBlock;\n      uint256 excessUtil = util - kink;\n      return ((excessUtil * jumpMultiplierPerBlock) / 1e18) + normalRate;\n    }\n  }\n\n  /**\n   * @notice Calculates the current supply rate per block\n   * @param cash The amount of cash in the market\n   * @param borrows The amount of borrows in the market\n   * @param reserves The amount of reserves in the market\n   * @param reserveFactorMantissa The current reserve factor for the market\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n   */\n  function getSupplyRate(\n    uint256 cash,\n    uint256 borrows,\n    uint256 reserves,\n    uint256 reserveFactorMantissa\n  ) public view virtual override returns (uint256) {\n    uint256 oneMinusReserveFactor = 1e18 - reserveFactorMantissa;\n    uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\n    uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / 1e18;\n    return (utilizationRate(cash, borrows, reserves) * rateToPool) / 1e18;\n  }\n}\n"
    },
    "contracts/compound/Unitroller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./ErrorReporter.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Comptroller.sol\";\nimport { DiamondExtension, DiamondBase, LibDiamond } from \"../ionic/DiamondExtension.sol\";\n\n/**\n * @title Unitroller\n * @dev Storage for the comptroller is at this address, while execution is delegated via the Diamond Extensions\n * CTokens should reference this contract as their comptroller.\n */\ncontract Unitroller is ComptrollerV3Storage, ComptrollerErrorReporter, DiamondBase {\n  /**\n   * @notice Event emitted when the admin rights are changed\n   */\n  event AdminRightsToggled(bool hasRights);\n\n  /**\n   * @notice Emitted when pendingAdmin is changed\n   */\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n  /**\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n   */\n  event NewAdmin(address oldAdmin, address newAdmin);\n\n  constructor(address payable _ionicAdmin) {\n    admin = msg.sender;\n    ionicAdmin = _ionicAdmin;\n  }\n\n  /*** Admin Functions ***/\n\n  /**\n   * @notice Toggles admin rights.\n   * @param hasRights Boolean indicating if the admin is to have rights.\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _toggleAdminRights(bool hasRights) external returns (uint256) {\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\n    }\n\n    // Check that rights have not already been set to the desired value\n    if (adminHasRights == hasRights) return uint256(Error.NO_ERROR);\n\n    adminHasRights = hasRights;\n    emit AdminRightsToggled(hasRights);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n   * @param newPendingAdmin New pending admin.\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\n    if (!hasAdminRights()) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n    }\n\n    address oldPendingAdmin = pendingAdmin;\n    pendingAdmin = newPendingAdmin;\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  /**\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n   * @dev Admin function for pending admin to accept role and update admin\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n   */\n  function _acceptAdmin() public returns (uint256) {\n    // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n    }\n\n    // Save current values for inclusion in log\n    address oldAdmin = admin;\n    address oldPendingAdmin = pendingAdmin;\n\n    admin = pendingAdmin;\n    pendingAdmin = address(0);\n\n    emit NewAdmin(oldAdmin, admin);\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n    return uint256(Error.NO_ERROR);\n  }\n\n  function comptrollerImplementation() public view returns (address) {\n    return LibDiamond.getExtensionForFunction(bytes4(keccak256(bytes(\"_deployMarket(uint8,bytes,bytes,uint256)\"))));\n  }\n\n  /**\n   * @dev upgrades the implementation if necessary\n   */\n  function _upgrade() external {\n    require(msg.sender == address(this) || hasAdminRights(), \"!self || !admin\");\n\n    address currentImplementation = comptrollerImplementation();\n    address latestComptrollerImplementation = IFeeDistributor(ionicAdmin).latestComptrollerImplementation(\n      currentImplementation\n    );\n\n    _updateExtensions(latestComptrollerImplementation);\n\n    if (currentImplementation != latestComptrollerImplementation) {\n      // reinitialize\n      _functionCall(address(this), abi.encodeWithSignature(\"_becomeImplementation()\"), \"!become impl\");\n    }\n  }\n\n  function _functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.call(data);\n\n    if (!success) {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n\n    return returndata;\n  }\n\n  function _updateExtensions(address currentComptroller) internal {\n    address[] memory latestExtensions = IFeeDistributor(ionicAdmin).getComptrollerExtensions(currentComptroller);\n    address[] memory currentExtensions = LibDiamond.listExtensions();\n\n    // removed the current (old) extensions\n    for (uint256 i = 0; i < currentExtensions.length; i++) {\n      LibDiamond.removeExtension(DiamondExtension(currentExtensions[i]));\n    }\n    // add the new extensions\n    for (uint256 i = 0; i < latestExtensions.length; i++) {\n      LibDiamond.addExtension(DiamondExtension(latestExtensions[i]));\n    }\n  }\n\n  /**\n   * @dev register a logic extension\n   * @param extensionToAdd the extension whose functions are to be added\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\n   */\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external override {\n    require(hasAdminRights(), \"!unauthorized\");\n    LibDiamond.registerExtension(extensionToAdd, extensionToReplace);\n  }\n}\n"
    },
    "contracts/external/chainlink/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/external/redstone/IRedstoneOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IRedstoneOracle {\n  function priceOf(address asset) external view returns (uint256);\n\n  function priceOfETH() external view returns (uint256);\n\n  function getDataFeedIdForAsset(address asset) external view returns (bytes32);\n\n  function getDataFeedIds() external view returns (bytes32[] memory dataFeedIds);\n}\n"
    },
    "contracts/external/uniswap/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter {\n  struct ExactInputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  struct ExactInputParams {\n    bytes path;\n    address recipient;\n    uint256 deadline;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n  }\n\n  struct ExactOutputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  struct ExactOutputParams {\n    bytes path;\n    address recipient;\n    uint256 deadline;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n  }\n\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n  /// @return amountOut The amount of the received token\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n  function exactInput(ExactInputParams calldata params) external returns (uint256 amountOut);\n\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external returns (uint256 amountIn);\n\n  function exactOutput(ExactOutputParams calldata params) external returns (uint256 amountIn);\n\n  function factory() external returns (address);\n\n  function multicall(uint256 deadline, bytes[] calldata data) external payable returns (bytes[] memory);\n}\n"
    },
    "contracts/external/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.0;\n\ninterface IUniswapV2Pair {\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  function name() external pure returns (string memory);\n\n  function symbol() external pure returns (string memory);\n\n  function decimals() external pure returns (uint8);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address owner) external view returns (uint256);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function approve(address spender, uint256 value) external returns (bool);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  function nonces(address owner) external view returns (uint256);\n\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n  event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n  event Swap(\n    address indexed sender,\n    uint256 amount0In,\n    uint256 amount1In,\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address indexed to\n  );\n  event Sync(uint112 reserve0, uint112 reserve1);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n  function factory() external view returns (address);\n\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    );\n\n  function price0CumulativeLast() external view returns (uint256);\n\n  function price1CumulativeLast() external view returns (uint256);\n\n  function kLast() external view returns (uint256);\n\n  function mint(address to) external returns (uint256 liquidity);\n\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n  function swap(\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address to,\n    bytes calldata data\n  ) external;\n\n  function skim(address to) external;\n\n  function sync() external;\n\n  function initialize(address, address) external;\n}\n"
    },
    "contracts/external/uniswap/IUniswapV3FlashCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#flash\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\ninterface IUniswapV3FlashCallback {\n  /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\n  /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n  /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\n  /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\n  function uniswapV3FlashCallback(\n    uint256 fee0,\n    uint256 fee1,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/external/uniswap/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.0;\n\nimport \"./IUniswapV3PoolActions.sol\";\n\ninterface IUniswapV3Pool is IUniswapV3PoolActions {\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function fee() external view returns (uint24);\n\n  function slot0()\n    external\n    view\n    returns (\n      uint160 sqrtPriceX96,\n      int24 tick,\n      uint16 observationIndex,\n      uint16 observationCardinality,\n      uint16 observationCardinalityNext,\n      uint8 feeProtocol,\n      bool unlocked\n    );\n\n  function liquidity() external view returns (uint128);\n\n  function observe(uint32[] calldata secondsAgos)\n    external\n    view\n    returns (int56[] memory tickCumulatives, uint160[] memory liquidityCumulatives);\n\n  function observations(uint256 index)\n    external\n    view\n    returns (\n      uint32 blockTimestamp,\n      int56 tickCumulative,\n      uint160 liquidityCumulative,\n      bool initialized\n    );\n\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n  function ticks(int24 tick)\n    external\n    view\n    returns (\n      uint128 liquidityGross,\n      int128 liquidityNet,\n      uint256 feeGrowthOutside0X128,\n      uint256 feeGrowthOutside1X128,\n      int56 tickCumulativeOutside,\n      uint160 secondsPerLiquidityOutsideX128,\n      uint32 secondsOutside,\n      bool initialized\n    );\n\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n\n  function positions(bytes32 key)\n    external\n    view\n    returns (\n      uint128 _liquidity,\n      uint256 feeGrowthInside0LastX128,\n      uint256 feeGrowthInside1LastX128,\n      uint128 tokensOwed0,\n      uint128 tokensOwed1\n    );\n}\n"
    },
    "contracts/external/uniswap/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n  /// @notice Sets the initial price for the pool\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n  function initialize(uint160 sqrtPriceX96) external;\n\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n  /// @param recipient The address for which the liquidity will be created\n  /// @param tickLower The lower tick of the position in which to add liquidity\n  /// @param tickUpper The upper tick of the position in which to add liquidity\n  /// @param amount The amount of liquidity to mint\n  /// @param data Any data that should be passed through to the callback\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n  function mint(\n    address recipient,\n    int24 tickLower,\n    int24 tickUpper,\n    uint128 amount,\n    bytes calldata data\n  ) external returns (uint256 amount0, uint256 amount1);\n\n  /// @notice Collects tokens owed to a position\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n  /// @param recipient The address which should receive the fees collected\n  /// @param tickLower The lower tick of the position for which to collect fees\n  /// @param tickUpper The upper tick of the position for which to collect fees\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n  /// @return amount0 The amount of fees collected in token0\n  /// @return amount1 The amount of fees collected in token1\n  function collect(\n    address recipient,\n    int24 tickLower,\n    int24 tickUpper,\n    uint128 amount0Requested,\n    uint128 amount1Requested\n  ) external returns (uint128 amount0, uint128 amount1);\n\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n  /// @dev Fees must be collected separately via a call to #collect\n  /// @param tickLower The lower tick of the position for which to burn liquidity\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\n  /// @param amount How much liquidity to burn\n  /// @return amount0 The amount of token0 sent to the recipient\n  /// @return amount1 The amount of token1 sent to the recipient\n  function burn(\n    int24 tickLower,\n    int24 tickUpper,\n    uint128 amount\n  ) external returns (uint256 amount0, uint256 amount1);\n\n  /// @notice Swap token0 for token1, or token1 for token0\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n  /// @param recipient The address to receive the output of the swap\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n  /// @param data Any data to be passed through to the callback\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n  function swap(\n    address recipient,\n    bool zeroForOne,\n    int256 amountSpecified,\n    uint160 sqrtPriceLimitX96,\n    bytes calldata data\n  ) external returns (int256 amount0, int256 amount1);\n\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n  /// @param recipient The address which will receive the token0 and token1 amounts\n  /// @param amount0 The amount of token0 to send\n  /// @param amount1 The amount of token1 to send\n  /// @param data Any data to be passed through to the callback\n  function flash(\n    address recipient,\n    uint256 amount0,\n    uint256 amount1,\n    bytes calldata data\n  ) external;\n\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n  /// the input observationCardinalityNext.\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "contracts/external/uniswap/quoter/interfaces/IUniswapV3Quoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IUniswapV3Quoter {\n  /// @notice Returns the amount out received for a given exact input swap without executing the swap\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\n  /// @param amountIn The amount of the first token to swap\n  /// @return amountOut The amount of the last token that would be received\n  function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n\n  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n  /// @param tokenIn The token being swapped in\n  /// @param tokenOut The token being swapped out\n  /// @param fee The fee of the token pool to consider for the pair\n  /// @param amountIn The desired input amount\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n  /// @return amountOut The amount of `tokenOut` that would be received\n  function quoteExactInputSingle(\n    address tokenIn,\n    address tokenOut,\n    uint24 fee,\n    uint256 amountIn,\n    uint160 sqrtPriceLimitX96\n  ) external returns (uint256 amountOut);\n\n  /// @notice Returns the amount in required for a given exact output swap without executing the swap\n  /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n  /// @param amountOut The amount of the last token to receive\n  /// @return amountIn The amount of first token required to be paid\n  function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n\n  /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n  /// @param tokenIn The token being swapped in\n  /// @param tokenOut The token being swapped out\n  /// @param fee The fee of the token pool to consider for the pair\n  /// @param amountOut The desired output amount\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n  /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n  function quoteExactOutputSingle(\n    address tokenIn,\n    address tokenOut,\n    uint24 fee,\n    uint256 amountOut,\n    uint160 sqrtPriceLimitX96\n  ) external returns (uint256 amountIn);\n}\n"
    },
    "contracts/FeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol\";\n\nimport { IonicComptroller } from \"./compound/ComptrollerInterface.sol\";\nimport { ICErc20 } from \"./compound/CTokenInterfaces.sol\";\nimport { CErc20Delegator } from \"./compound/CErc20Delegator.sol\";\nimport { CErc20PluginDelegate } from \"./compound/CErc20PluginDelegate.sol\";\nimport { SafeOwnableUpgradeable } from \"./ionic/SafeOwnableUpgradeable.sol\";\nimport { BasePriceOracle } from \"./oracles/BasePriceOracle.sol\";\nimport { DiamondExtension, DiamondBase } from \"./ionic/DiamondExtension.sol\";\nimport { AuthoritiesRegistry } from \"./ionic/AuthoritiesRegistry.sol\";\n\ncontract FeeDistributorStorage {\n  struct CDelegateUpgradeData {\n    address implementation;\n    bytes becomeImplementationData;\n  }\n\n  /**\n   * @notice Maps Unitroller (Comptroller proxy) addresses to the proportion of Ionic pool interest taken as a protocol fee (scaled by 1e18).\n   * @dev A value of 0 means unset whereas a negative value means 0.\n   */\n  mapping(address => int256) public customInterestFeeRates;\n\n  /**\n   * @dev Latest Comptroller implementation for each existing implementation.\n   */\n  mapping(address => address) internal _latestComptrollerImplementation;\n\n  /**\n   * @dev Latest CErc20Delegate implementation for each existing implementation.\n   */\n  mapping(uint8 => CDelegateUpgradeData) internal _latestCErc20Delegate;\n\n  /**\n   * @dev Latest Plugin implementation for each existing implementation.\n   */\n  mapping(address => address) internal _latestPluginImplementation;\n\n  mapping(address => DiamondExtension[]) public comptrollerExtensions;\n\n  mapping(address => DiamondExtension[]) public cErc20DelegateExtensions;\n\n  AuthoritiesRegistry public authoritiesRegistry;\n\n  /**\n   * @dev used as salt for the creation of new markets\n   */\n  uint256 public marketsCounter;\n\n  /**\n   * @dev Minimum borrow balance (in ETH) per user per Ionic pool asset (only checked on new borrows, not redemptions).\n   */\n  uint256 public minBorrowEth;\n\n  /**\n   * @dev Maximum utilization rate (scaled by 1e18) for Ionic pool assets (only checked on new borrows, not redemptions).\n   * No longer used as of `Rari-Capital/compound-protocol` version `fuse-v1.1.0`.\n   */\n  uint256 public maxUtilizationRate;\n\n  /**\n   * @notice The proportion of Ionic pool interest taken as a protocol fee (scaled by 1e18).\n   */\n  uint256 public defaultInterestFeeRate;\n}\n\n/**\n * @title FeeDistributor\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n * @notice FeeDistributor controls and receives protocol fees from Ionic pools and relays admin actions to Ionic pools.\n */\ncontract FeeDistributor is SafeOwnableUpgradeable, FeeDistributorStorage {\n  using AddressUpgradeable for address;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  /**\n   * @dev Initializer that sets initial values of state variables.\n   * @param _defaultInterestFeeRate The default proportion of Ionic pool interest taken as a protocol fee (scaled by 1e18).\n   */\n  function initialize(uint256 _defaultInterestFeeRate) public initializer {\n    require(_defaultInterestFeeRate <= 1e18, \"Interest fee rate cannot be more than 100%.\");\n    __SafeOwnable_init(msg.sender);\n    defaultInterestFeeRate = _defaultInterestFeeRate;\n    maxUtilizationRate = type(uint256).max;\n  }\n\n  function reinitialize(AuthoritiesRegistry _ar) public onlyOwnerOrAdmin {\n    authoritiesRegistry = _ar;\n  }\n\n  /**\n   * @dev Sets the default proportion of Ionic pool interest taken as a protocol fee.\n   * @param _defaultInterestFeeRate The default proportion of Ionic pool interest taken as a protocol fee (scaled by 1e18).\n   */\n  function _setDefaultInterestFeeRate(uint256 _defaultInterestFeeRate) external onlyOwner {\n    require(_defaultInterestFeeRate <= 1e18, \"Interest fee rate cannot be more than 100%.\");\n    defaultInterestFeeRate = _defaultInterestFeeRate;\n  }\n\n  /**\n   * @dev Withdraws accrued fees on interest.\n   * @param erc20Contract The ERC20 token address to withdraw. Set to the zero address to withdraw ETH.\n   */\n  function _withdrawAssets(address erc20Contract) external {\n    if (erc20Contract == address(0)) {\n      uint256 balance = address(this).balance;\n      require(balance > 0, \"No balance available to withdraw.\");\n      (bool success, ) = owner().call{ value: balance }(\"\");\n      require(success, \"Failed to transfer ETH balance to msg.sender.\");\n    } else {\n      IERC20Upgradeable token = IERC20Upgradeable(erc20Contract);\n      uint256 balance = token.balanceOf(address(this));\n      require(balance > 0, \"No token balance available to withdraw.\");\n      token.safeTransfer(owner(), balance);\n    }\n  }\n\n  /**\n   * @dev Sets the proportion of Ionic pool interest taken as a protocol fee.\n   * @param _minBorrowEth Minimum borrow balance (in ETH) per user per Ionic pool asset (only checked on new borrows, not redemptions).\n   * @param _maxUtilizationRate Maximum utilization rate (scaled by 1e18) for Ionic pool assets (only checked on new borrows, not redemptions).\n   */\n  function _setPoolLimits(uint256 _minBorrowEth, uint256 _maxUtilizationRate) external onlyOwner {\n    minBorrowEth = _minBorrowEth;\n    maxUtilizationRate = _maxUtilizationRate;\n  }\n\n  function getMinBorrowEth(ICErc20 _ctoken) public view returns (uint256) {\n    (, , uint256 borrowBalance, ) = _ctoken.getAccountSnapshot(_msgSender());\n    if (borrowBalance == 0) return minBorrowEth;\n    IonicComptroller comptroller = IonicComptroller(address(_ctoken.comptroller()));\n    BasePriceOracle oracle = comptroller.oracle();\n    uint256 underlyingPriceEth = oracle.price(ICErc20(address(_ctoken)).underlying());\n    uint256 underlyingDecimals = _ctoken.decimals();\n    uint256 borrowBalanceEth = (underlyingPriceEth * borrowBalance) / 10**underlyingDecimals;\n    if (borrowBalanceEth > minBorrowEth) {\n      return 0;\n    }\n    return minBorrowEth - borrowBalanceEth;\n  }\n\n  /**\n   * @dev Receives native fees.\n   */\n  receive() external payable {}\n\n  /**\n   * @dev Sends data to a contract.\n   * @param targets The contracts to which `data` will be sent.\n   * @param data The data to be sent to each of `targets`.\n   */\n  function _callPool(address[] calldata targets, bytes[] calldata data) external onlyOwner {\n    require(targets.length > 0 && targets.length == data.length, \"Array lengths must be equal and greater than 0.\");\n    for (uint256 i = 0; i < targets.length; i++) targets[i].functionCall(data[i]);\n  }\n\n  /**\n   * @dev Sends data to a contract.\n   * @param targets The contracts to which `data` will be sent.\n   * @param data The data to be sent to each of `targets`.\n   */\n  function _callPool(address[] calldata targets, bytes calldata data) external onlyOwner {\n    require(targets.length > 0, \"No target addresses specified.\");\n    for (uint256 i = 0; i < targets.length; i++) targets[i].functionCall(data);\n  }\n\n  /**\n   * @dev Deploys a CToken for an underlying ERC20\n   * @param constructorData Encoded construction data for `CToken initialize()`\n   */\n  function deployCErc20(\n    uint8 delegateType,\n    bytes calldata constructorData,\n    bytes calldata becomeImplData\n  ) external returns (address) {\n    // Make sure comptroller == msg.sender\n    (address underlying, address comptroller) = abi.decode(constructorData[0:64], (address, address));\n    require(comptroller == msg.sender, \"Comptroller is not sender.\");\n\n    // Deploy CErc20Delegator using msg.sender, underlying, and block.number as a salt\n    bytes32 salt = keccak256(abi.encodePacked(msg.sender, underlying, ++marketsCounter));\n\n    bytes memory cErc20DelegatorCreationCode = abi.encodePacked(type(CErc20Delegator).creationCode, constructorData);\n    address proxy = Create2Upgradeable.deploy(0, salt, cErc20DelegatorCreationCode);\n\n    CDelegateUpgradeData memory data = _latestCErc20Delegate[delegateType];\n    DiamondExtension delegateAsExtension = DiamondExtension(data.implementation);\n    // register the first extension\n    DiamondBase(proxy)._registerExtension(delegateAsExtension, DiamondExtension(address(0)));\n    // derive and configure the other extensions\n    DiamondExtension[] memory ctokenExts = cErc20DelegateExtensions[address(delegateAsExtension)];\n    for (uint256 i = 0; i < ctokenExts.length; i++) {\n      if (ctokenExts[i] == delegateAsExtension) continue;\n      DiamondBase(proxy)._registerExtension(ctokenExts[i], DiamondExtension(address(0)));\n    }\n    CErc20PluginDelegate(address(proxy))._becomeImplementation(becomeImplData);\n\n    return proxy;\n  }\n\n  /**\n   * @dev Latest Comptroller implementation for each existing implementation.\n   */\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address) {\n    return\n      _latestComptrollerImplementation[oldImplementation] != address(0)\n        ? _latestComptrollerImplementation[oldImplementation]\n        : oldImplementation;\n  }\n\n  /**\n   * @dev Sets the latest `Comptroller` upgrade implementation address.\n   * @param oldImplementation The old `Comptroller` implementation address to upgrade from.\n   * @param newImplementation Latest `Comptroller` implementation address.\n   */\n  function _setLatestComptrollerImplementation(address oldImplementation, address newImplementation)\n    external\n    onlyOwner\n  {\n    _latestComptrollerImplementation[oldImplementation] = newImplementation;\n  }\n\n  /**\n   * @dev Latest CErc20Delegate implementation for each existing implementation.\n   */\n  function latestCErc20Delegate(uint8 delegateType) external view returns (address, bytes memory) {\n    CDelegateUpgradeData memory data = _latestCErc20Delegate[delegateType];\n    bytes memory emptyBytes;\n    return\n      data.implementation != address(0)\n        ? (data.implementation, data.becomeImplementationData)\n        : (address(0), emptyBytes);\n  }\n\n  /**\n   * @dev Sets the latest `CErc20Delegate` upgrade implementation address and data.\n   * @param delegateType The old `CErc20Delegate` implementation address to upgrade from.\n   * @param newImplementation Latest `CErc20Delegate` implementation address.\n   * @param becomeImplementationData Data passed to the new implementation via `becomeImplementation` after upgrade.\n   */\n  function _setLatestCErc20Delegate(\n    uint8 delegateType,\n    address newImplementation,\n    bytes calldata becomeImplementationData\n  ) external onlyOwner {\n    _latestCErc20Delegate[delegateType] = CDelegateUpgradeData(newImplementation, becomeImplementationData);\n  }\n\n  /**\n   * @dev Latest Plugin implementation for each existing implementation.\n   */\n  function latestPluginImplementation(address oldImplementation) external view returns (address) {\n    return\n      _latestPluginImplementation[oldImplementation] != address(0)\n        ? _latestPluginImplementation[oldImplementation]\n        : oldImplementation;\n  }\n\n  /**\n   * @dev Sets the latest plugin upgrade implementation address.\n   * @param oldImplementation The old plugin implementation address to upgrade from.\n   * @param newImplementation Latest plugin implementation address.\n   */\n  function _setLatestPluginImplementation(address oldImplementation, address newImplementation) external onlyOwner {\n    _latestPluginImplementation[oldImplementation] = newImplementation;\n  }\n\n  /**\n   * @dev Upgrades a plugin of a CErc20PluginDelegate market to the latest implementation\n   * @param cDelegator the proxy address\n   * @return if the plugin was upgraded or not\n   */\n  function _upgradePluginToLatestImplementation(address cDelegator) external onlyOwner returns (bool) {\n    CErc20PluginDelegate market = CErc20PluginDelegate(cDelegator);\n\n    address oldPluginAddress = address(market.plugin());\n    market._updatePlugin(_latestPluginImplementation[oldPluginAddress]);\n    address newPluginAddress = address(market.plugin());\n\n    return newPluginAddress != oldPluginAddress;\n  }\n\n  /**\n   * @notice Returns the proportion of Ionic pool interest taken as a protocol fee (scaled by 1e18).\n   */\n  function interestFeeRate() external view returns (uint256) {\n    (bool success, bytes memory data) = msg.sender.staticcall(abi.encodeWithSignature(\"comptroller()\"));\n\n    if (success && data.length == 32) {\n      address comptroller = abi.decode(data, (address));\n      int256 customRate = customInterestFeeRates[comptroller];\n      if (customRate > 0) return uint256(customRate);\n      if (customRate < 0) return 0;\n    }\n\n    return defaultInterestFeeRate;\n  }\n\n  /**\n   * @dev Sets the proportion of Ionic pool interest taken as a protocol fee.\n   * @param comptroller The Unitroller (Comptroller proxy) address.\n   * @param rate The proportion of Ionic pool interest taken as a protocol fee (scaled by 1e18).\n   */\n  function _setCustomInterestFeeRate(address comptroller, int256 rate) external onlyOwner {\n    require(rate <= 1e18, \"Interest fee rate cannot be more than 100%.\");\n    customInterestFeeRates[comptroller] = rate;\n  }\n\n  function getComptrollerExtensions(address comptroller) external view returns (DiamondExtension[] memory) {\n    return comptrollerExtensions[comptroller];\n  }\n\n  function _setComptrollerExtensions(address comptroller, DiamondExtension[] calldata extensions) external onlyOwner {\n    comptrollerExtensions[comptroller] = extensions;\n  }\n\n  function _registerComptrollerExtension(\n    address payable pool,\n    DiamondExtension extensionToAdd,\n    DiamondExtension extensionToReplace\n  ) external onlyOwner {\n    DiamondBase(pool)._registerExtension(extensionToAdd, extensionToReplace);\n  }\n\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (DiamondExtension[] memory) {\n    return cErc20DelegateExtensions[cErc20Delegate];\n  }\n\n  function _setCErc20DelegateExtensions(address cErc20Delegate, DiamondExtension[] calldata extensions)\n    external\n    onlyOwner\n  {\n    cErc20DelegateExtensions[cErc20Delegate] = extensions;\n  }\n\n  function autoUpgradePool(IonicComptroller pool) external onlyOwner {\n    ICErc20[] memory markets = pool.getAllMarkets();\n\n    // auto upgrade the pool\n    pool._upgrade();\n\n    for (uint8 i = 0; i < markets.length; i++) {\n      // upgrade the market\n      markets[i]._upgrade();\n    }\n  }\n\n  function canCall(\n    address pool,\n    address user,\n    address target,\n    bytes4 functionSig\n  ) external view returns (bool) {\n    return authoritiesRegistry.canCall(pool, user, target, functionSig);\n  }\n}\n"
    },
    "contracts/ILiquidator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { ICErc20 } from \"./compound/CTokenInterfaces.sol\";\nimport \"./liquidators/IRedemptionStrategy.sol\";\nimport \"./liquidators/IFundsConversionStrategy.sol\";\n\ninterface ILiquidator {\n  /**\n   * borrower The borrower's Ethereum address.\n   * repayAmount The amount to repay to liquidate the unhealthy loan.\n   * cErc20 The borrowed CErc20 contract to repay.\n   * cTokenCollateral The cToken collateral contract to be liquidated.\n   * minProfitAmount The minimum amount of profit required for execution (in terms of `exchangeProfitTo`). Reverts if this condition is not met.\n   * redemptionStrategies The IRedemptionStrategy contracts to use, if any, to redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\n   * strategyData The data for the chosen IRedemptionStrategy contracts, if any.\n   */\n  struct LiquidateToTokensWithFlashSwapVars {\n    address borrower;\n    uint256 repayAmount;\n    ICErc20 cErc20;\n    ICErc20 cTokenCollateral;\n    address flashSwapContract;\n    uint256 minProfitAmount;\n    IRedemptionStrategy[] redemptionStrategies;\n    bytes[] strategyData;\n    IFundsConversionStrategy[] debtFundingStrategies;\n    bytes[] debtFundingStrategiesData;\n  }\n\n  function redemptionStrategiesWhitelist(address strategy) external view returns (bool);\n\n  function safeLiquidate(\n    address borrower,\n    uint256 repayAmount,\n    ICErc20 cErc20,\n    ICErc20 cTokenCollateral,\n    uint256 minOutputAmount\n  ) external returns (uint256);\n\n  function safeLiquidateToTokensWithFlashLoan(LiquidateToTokensWithFlashSwapVars calldata vars)\n    external\n    returns (uint256);\n\n  function _whitelistRedemptionStrategy(IRedemptionStrategy strategy, bool whitelisted) external;\n\n  function _whitelistRedemptionStrategies(IRedemptionStrategy[] calldata strategies, bool[] calldata whitelisted)\n    external;\n\n  function setExpressRelay(address _expressRelay) external;\n\n  function setPoolLens(address _poolLens) external;\n\n  function setHealthFactorThreshold(uint256 _healthFactorThreshold) external;\n}\n"
    },
    "contracts/ionic/AddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { SafeOwnableUpgradeable } from \"../ionic/SafeOwnableUpgradeable.sol\";\n\n/**\n * @title AddressesProvider\n * @notice The Addresses Provider serves as a central storage of system internal and external\n *         contract addresses that change between deploys and across chains\n * @author Veliko Minkov <veliko@midascapital.xyz>\n */\ncontract AddressesProvider is SafeOwnableUpgradeable {\n  mapping(string => address) private _addresses;\n  mapping(address => Contract) public plugins;\n  mapping(address => Contract) public flywheelRewards;\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\n  JarvisPool[] public jarvisPoolsConfig;\n  CurveSwapPool[] public curveSwapPoolsConfig;\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\n\n  /// @dev Initializer to set the admin that can set and change contracts addresses\n  function initialize(address owner) public initializer {\n    __SafeOwnable_init(owner);\n  }\n\n  /**\n   * @dev The contract address and a string that uniquely identifies the contract's interface\n   */\n  struct Contract {\n    address addr;\n    string contractInterface;\n  }\n\n  struct RedemptionStrategy {\n    address addr;\n    string contractInterface;\n    address outputToken;\n  }\n\n  struct FundingStrategy {\n    address addr;\n    string contractInterface;\n    address inputToken;\n  }\n\n  struct JarvisPool {\n    address syntheticToken;\n    address collateralToken;\n    address liquidityPool;\n    uint256 expirationTime;\n  }\n\n  struct CurveSwapPool {\n    address poolAddress;\n    address[] coins;\n  }\n\n  /**\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\n   * @param rewardToken the reward token address\n   * @param flywheelRewardsModule the flywheel rewards module address\n   * @param contractInterface a string that uniquely identifies the contract's interface\n   */\n  function setFlywheelRewards(\n    address rewardToken,\n    address flywheelRewardsModule,\n    string calldata contractInterface\n  ) public onlyOwner {\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\n  }\n\n  /**\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\n   * @param asset the asset address\n   * @param plugin the ERC4626 plugin address\n   * @param contractInterface a string that uniquely identifies the contract's interface\n   */\n  function setPlugin(\n    address asset,\n    address plugin,\n    string calldata contractInterface\n  ) public onlyOwner {\n    plugins[asset] = Contract(plugin, contractInterface);\n  }\n\n  /**\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\n   * @param asset the asset address\n   * @param strategy redemption strategy address\n   * @param contractInterface a string that uniquely identifies the contract's interface\n   */\n  function setRedemptionStrategy(\n    address asset,\n    address strategy,\n    string calldata contractInterface,\n    address outputToken\n  ) public onlyOwner {\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\n  }\n\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\n    return redemptionStrategiesConfig[asset];\n  }\n\n  /**\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\n   * @param asset the asset address\n   * @param strategy funding strategy address\n   * @param contractInterface a string that uniquely identifies the contract's interface\n   */\n  function setFundingStrategy(\n    address asset,\n    address strategy,\n    string calldata contractInterface,\n    address inputToken\n  ) public onlyOwner {\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\n  }\n\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\n    return fundingStrategiesConfig[asset];\n  }\n\n  /**\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\n   * @param syntheticToken the synthetic token address\n   * @param collateralToken the collateral token address\n   * @param liquidityPool the liquidity pool address\n   * @param expirationTime the operation expiration time\n   */\n  function setJarvisPool(\n    address syntheticToken,\n    address collateralToken,\n    address liquidityPool,\n    uint256 expirationTime\n  ) public onlyOwner {\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\n  }\n\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\n  }\n\n  /**\n   * @dev Sets an address for an id replacing the address saved in the addresses map\n   * @param id The id\n   * @param newAddress The address to set\n   */\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\n    _addresses[id] = newAddress;\n  }\n\n  /**\n   * @dev Returns an address by id\n   * @return The address\n   */\n  function getAddress(string calldata id) public view returns (address) {\n    return _addresses[id];\n  }\n\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\n    return curveSwapPoolsConfig;\n  }\n\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\n    return jarvisPoolsConfig;\n  }\n\n  function setBalancerPoolForTokens(\n    address inputToken,\n    address outputToken,\n    address pool\n  ) external onlyOwner {\n    balancerPoolForTokens[inputToken][outputToken] = pool;\n  }\n\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\n    return balancerPoolForTokens[inputToken][outputToken];\n  }\n}\n"
    },
    "contracts/ionic/AuthoritiesRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { PoolRolesAuthority } from \"../ionic/PoolRolesAuthority.sol\";\nimport { SafeOwnableUpgradeable } from \"../ionic/SafeOwnableUpgradeable.sol\";\nimport { IonicComptroller } from \"../compound/ComptrollerInterface.sol\";\n\nimport { TransparentUpgradeableProxy } from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\n  PoolRolesAuthority public poolAuthLogic;\n  address public leveredPositionsFactory;\n  bool public noAuthRequired;\n\n  function initialize(address _leveredPositionsFactory) public initializer {\n    __SafeOwnable_init(msg.sender);\n    leveredPositionsFactory = _leveredPositionsFactory;\n    poolAuthLogic = new PoolRolesAuthority();\n  }\n\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\n    leveredPositionsFactory = _leveredPositionsFactory;\n    poolAuthLogic = new PoolRolesAuthority();\n    // for Neon the auth is not required\n    noAuthRequired = block.chainid == 245022934;\n  }\n\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\n    require(address(poolsAuthorities[pool]) == address(0), \"already created\");\n\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \"\");\n    auth = PoolRolesAuthority(address(proxy));\n    auth.initialize(address(this));\n    poolsAuthorities[pool] = auth;\n\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\n    // sets the registry owner as the auth owner\n    reconfigureAuthority(pool);\n  }\n\n  function reconfigureAuthority(address poolAddress) public {\n    IonicComptroller pool = IonicComptroller(poolAddress);\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\n\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\n      require(address(auth) != address(0), \"no such authority\");\n      require(msg.sender == owner() || msg.sender == poolAddress, \"not owner or pool\");\n\n      auth.configureRegistryCapabilities();\n      auth.configurePoolSupplierCapabilities(pool);\n      auth.configurePoolBorrowerCapabilities(pool);\n      // everyone can be a liquidator\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\n      auth.configureLeveredPositionCapabilities(pool);\n\n      if (auth.owner() != owner()) {\n        auth.setOwner(owner());\n      }\n    }\n  }\n\n  function canCall(\n    address pool,\n    address user,\n    address target,\n    bytes4 functionSig\n  ) external view returns (bool) {\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\n    if (address(authorityForPool) == address(0)) {\n      return noAuthRequired;\n    } else {\n      // allow only if an auth exists and it allows the action\n      return authorityForPool.canCall(user, target, functionSig);\n    }\n  }\n\n  function setUserRole(\n    address pool,\n    address user,\n    uint8 role,\n    bool enabled\n  ) external {\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\n\n    require(address(poolAuth) != address(0), \"auth does not exist\");\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \"not owner or factory\");\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \"only lev pos role\");\n\n    poolAuth.setUserRole(user, role, enabled);\n  }\n}\n"
    },
    "contracts/ionic/DiamondExtension.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n/**\n * @notice a base contract for logic extensions that use the diamond pattern storage\n * to map the functions when looking up the extension contract to delegate to.\n */\nabstract contract DiamondExtension {\n  /**\n   * @return a list of all the function selectors that this logic extension exposes\n   */\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\n}\n\n// When no function exists for function called\nerror FunctionNotFound(bytes4 _functionSelector);\n\n// When no extension exists for function called\nerror ExtensionNotFound(bytes4 _functionSelector);\n\n// When the function is already added\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\n\nabstract contract DiamondBase {\n  /**\n   * @dev register a logic extension\n   * @param extensionToAdd the extension whose functions are to be added\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\n   */\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\n\n  function _listExtensions() public view returns (address[] memory) {\n    return LibDiamond.listExtensions();\n  }\n\n  fallback() external {\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\n    // Execute external function from extension using delegatecall and return any value.\n    assembly {\n      // copy function selector and any arguments\n      calldatacopy(0, 0, calldatasize())\n      // execute function call using the extension\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\n      // get any return value\n      returndatacopy(0, 0, returndatasize())\n      // return any return value or error back to the caller\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n}\n\n/**\n * @notice a library to use in a contract, whose logic is extended with diamond extension\n */\nlibrary LibDiamond {\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.extensions.diamond.storage\");\n\n  struct Function {\n    address extension;\n    bytes4 selector;\n  }\n\n  struct LogicStorage {\n    Function[] functions;\n    address[] extensions;\n  }\n\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\n    return getExtensionForSelector(msgSig, diamondStorage());\n  }\n\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\n    bytes32 position = DIAMOND_STORAGE_POSITION;\n    assembly {\n      ds.slot := position\n    }\n  }\n\n  function listExtensions() internal view returns (address[] memory) {\n    return diamondStorage().extensions;\n  }\n\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\n    if (address(extensionToReplace) != address(0)) {\n      removeExtension(extensionToReplace);\n    }\n    addExtension(extensionToAdd);\n  }\n\n  function removeExtension(DiamondExtension extension) internal {\n    LogicStorage storage ds = diamondStorage();\n    // remove all functions of the extension to replace\n    removeExtensionFunctions(extension);\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\n      if (ds.extensions[i] == address(extension)) {\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\n        ds.extensions.pop();\n      }\n    }\n  }\n\n  function addExtension(DiamondExtension extension) internal {\n    LogicStorage storage ds = diamondStorage();\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\n      require(ds.extensions[i] != address(extension), \"extension already added\");\n    }\n    addExtensionFunctions(extension);\n    ds.extensions.push(address(extension));\n  }\n\n  function removeExtensionFunctions(DiamondExtension extension) internal {\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\n    LogicStorage storage ds = diamondStorage();\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\n      bytes4 selectorToRemove = fnsToRemove[i];\n      // must never fail\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\n      // swap with the last element in the selectorAtIndex array and remove the last element\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\n      ds.functions.pop();\n    }\n  }\n\n  function addExtensionFunctions(DiamondExtension extension) internal {\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\n    LogicStorage storage ds = diamondStorage();\n    uint16 functionsCount = uint16(ds.functions.length);\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\n      bytes4 selector = fnsToAdd[functionsIndex];\n      address oldImplementation = getExtensionForSelector(selector, ds);\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\n      ds.functions.push(Function(address(extension), selector));\n      functionsCount++;\n    }\n  }\n\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\n    uint256 fnsLen = ds.functions.length;\n    for (uint256 i = 0; i < fnsLen; i++) {\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\n    }\n\n    return address(0);\n  }\n\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\n    uint16 fnsLen = uint16(ds.functions.length);\n    for (uint16 i = 0; i < fnsLen; i++) {\n      if (ds.functions[i].selector == selector) return i;\n    }\n\n    return type(uint16).max;\n  }\n}\n"
    },
    "contracts/ionic/IFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\ninterface IFlashLoanReceiver {\n  function receiveFlashLoan(\n    address borrowedAsset,\n    uint256 borrowedAmount,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/ionic/levered/ILeveredPositionFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\nimport { LeveredPosition } from \"./LeveredPosition.sol\";\nimport { IFeeDistributor } from \"../../compound/IFeeDistributor.sol\";\nimport { ILiquidatorsRegistry } from \"../../liquidators/registry/ILiquidatorsRegistry.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ILeveredPositionFactoryStorage {\n  function feeDistributor() external view returns (IFeeDistributor);\n\n  function liquidatorsRegistry() external view returns (ILiquidatorsRegistry);\n\n  function blocksPerYear() external view returns (uint256);\n\n  function owner() external view returns (address);\n}\n\ninterface ILeveredPositionFactoryBase {\n  function _setLiquidatorsRegistry(ILiquidatorsRegistry _liquidatorsRegistry) external;\n\n  function _setPairWhitelisted(\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket,\n    bool _whitelisted\n  ) external;\n}\n\ninterface ILeveredPositionFactoryFirstExtension {\n  function getRedemptionStrategies(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (IRedemptionStrategy[] memory strategies, bytes[] memory strategiesData);\n\n  function getMinBorrowNative() external view returns (uint256);\n\n  function removeClosedPosition(address closedPosition) external returns (bool removed);\n\n  function closeAndRemoveUserPosition(LeveredPosition position) external returns (bool);\n\n  function getPositionsByAccount(address account) external view returns (address[] memory, bool[] memory);\n\n  function getAccountsWithOpenPositions() external view returns (address[] memory);\n\n  function getWhitelistedCollateralMarkets() external view returns (address[] memory);\n\n  function getBorrowableMarketsByCollateral(ICErc20 _collateralMarket) external view returns (address[] memory);\n\n  function getPositionsExtension(bytes4 msgSig) external view returns (address);\n}\n\ninterface ILeveredPositionFactorySecondExtension {\n  function createPosition(ICErc20 _collateralMarket, ICErc20 _stableMarket) external returns (LeveredPosition);\n\n  function createAndFundPosition(\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket,\n    IERC20Upgradeable _fundingAsset,\n    uint256 _fundingAmount\n  ) external returns (LeveredPosition);\n\n  function createAndFundPositionAtRatio(\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket,\n    IERC20Upgradeable _fundingAsset,\n    uint256 _fundingAmount,\n    uint256 _leverageRatio\n  ) external returns (LeveredPosition);\n}\n\ninterface ILeveredPositionFactoryExtension is\n  ILeveredPositionFactoryFirstExtension,\n  ILeveredPositionFactorySecondExtension\n{}\n\ninterface ILeveredPositionFactory is\n  ILeveredPositionFactoryStorage,\n  ILeveredPositionFactoryBase,\n  ILeveredPositionFactoryExtension\n{}\n"
    },
    "contracts/ionic/levered/LeveredPosition.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport { IonicComptroller } from \"../../compound/ComptrollerInterface.sol\";\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\nimport { BasePriceOracle } from \"../../oracles/BasePriceOracle.sol\";\nimport { IFundsConversionStrategy } from \"../../liquidators/IFundsConversionStrategy.sol\";\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\nimport { ILeveredPositionFactory } from \"./ILeveredPositionFactory.sol\";\nimport { IFlashLoanReceiver } from \"../IFlashLoanReceiver.sol\";\nimport { IonicFlywheel } from \"../../ionic/strategies/flywheel/IonicFlywheel.sol\";\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { LeveredPositionStorage } from \"./LeveredPositionStorage.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ncontract LeveredPosition is LeveredPositionStorage, IFlashLoanReceiver {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  error OnlyWhenClosed();\n  error NotPositionOwner();\n  error RepayFlashLoanFailed(address asset, uint256 currentBalance, uint256 repayAmount);\n\n  error ConvertFundsFailed();\n  error ExitFailed(uint256 errorCode);\n  error RedeemFailed(uint256 errorCode);\n  error SupplyCollateralFailed(uint256 errorCode);\n  error BorrowStableFailed(uint256 errorCode);\n  error RepayBorrowFailed(uint256 errorCode);\n  error RedeemCollateralFailed(uint256 errorCode);\n  error ExtNotFound(bytes4 _functionSelector);\n\n  constructor(\n    address _positionOwner,\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket\n  ) LeveredPositionStorage(_positionOwner) {\n    IonicComptroller collateralPool = _collateralMarket.comptroller();\n    IonicComptroller stablePool = _stableMarket.comptroller();\n    require(collateralPool == stablePool, \"markets pools differ\");\n    pool = collateralPool;\n\n    collateralMarket = _collateralMarket;\n    collateralAsset = IERC20Upgradeable(_collateralMarket.underlying());\n    stableMarket = _stableMarket;\n    stableAsset = IERC20Upgradeable(_stableMarket.underlying());\n\n    factory = ILeveredPositionFactory(msg.sender);\n  }\n\n  /*----------------------------------------------------------------\n                          Mutable Functions\n  ----------------------------------------------------------------*/\n\n  function fundPosition(IERC20Upgradeable fundingAsset, uint256 amount) public {\n    fundingAsset.safeTransferFrom(msg.sender, address(this), amount);\n    _supplyCollateral(fundingAsset);\n\n    if (!pool.checkMembership(address(this), collateralMarket)) {\n      address[] memory cTokens = new address[](1);\n      cTokens[0] = address(collateralMarket);\n      pool.enterMarkets(cTokens);\n    }\n  }\n\n  function closePosition() public returns (uint256) {\n    return closePosition(msg.sender);\n  }\n\n  function closePosition(address withdrawTo) public returns (uint256 withdrawAmount) {\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\n\n    _leverDown(1e18);\n\n    // calling accrue and exit allows to redeem the full underlying balance\n    collateralMarket.accrueInterest();\n    uint256 errorCode = pool.exitMarket(address(collateralMarket));\n    if (errorCode != 0) revert ExitFailed(errorCode);\n\n    // redeem all cTokens should leave no dust\n    errorCode = collateralMarket.redeem(collateralMarket.balanceOf(address(this)));\n    if (errorCode != 0) revert RedeemFailed(errorCode);\n\n    if (stableAsset.balanceOf(address(this)) > 0) {\n      // convert all overborrowed leftovers/profits to the collateral asset\n      convertAllTo(stableAsset, collateralAsset);\n    }\n\n    // withdraw the redeemed collateral\n    withdrawAmount = collateralAsset.balanceOf(address(this));\n    collateralAsset.safeTransfer(withdrawTo, withdrawAmount);\n  }\n\n  function adjustLeverageRatio(uint256 targetRatioMantissa) public returns (uint256) {\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\n\n    // anything under 1x means removing the leverage\n    if (targetRatioMantissa <= 1e18) _leverDown(1e18);\n\n    if (getCurrentLeverageRatio() < targetRatioMantissa) _leverUp(targetRatioMantissa);\n    else _leverDown(targetRatioMantissa);\n\n    // return the de facto achieved ratio\n    return getCurrentLeverageRatio();\n  }\n\n  function receiveFlashLoan(\n    address assetAddress,\n    uint256 borrowedAmount,\n    bytes calldata data\n  ) external override {\n    if (msg.sender == address(collateralMarket)) {\n      // increasing the leverage ratio\n      uint256 stableBorrowAmount = abi.decode(data, (uint256));\n      _leverUpPostFL(stableBorrowAmount);\n      uint256 positionCollateralBalance = collateralAsset.balanceOf(address(this));\n      if (positionCollateralBalance < borrowedAmount)\n        revert RepayFlashLoanFailed(address(collateralAsset), positionCollateralBalance, borrowedAmount);\n    } else if (msg.sender == address(stableMarket)) {\n      // decreasing the leverage ratio\n      uint256 amountToRedeem = abi.decode(data, (uint256));\n      _leverDownPostFL(borrowedAmount, amountToRedeem);\n      uint256 positionStableBalance = stableAsset.balanceOf(address(this));\n      if (positionStableBalance < borrowedAmount)\n        revert RepayFlashLoanFailed(address(stableAsset), positionStableBalance, borrowedAmount);\n    } else {\n      revert(\"!fl not from either markets\");\n    }\n\n    // repay FL\n    IERC20Upgradeable(assetAddress).approve(msg.sender, borrowedAmount);\n  }\n\n  function withdrawStableLeftovers(address withdrawTo) public returns (uint256) {\n    if (msg.sender != positionOwner) revert NotPositionOwner();\n    if (!isPositionClosed()) revert OnlyWhenClosed();\n\n    uint256 stableLeftovers = stableAsset.balanceOf(address(this));\n    stableAsset.safeTransfer(withdrawTo, stableLeftovers);\n    return stableLeftovers;\n  }\n\n  function claimRewards() public {\n    claimRewards(msg.sender);\n  }\n\n  function claimRewards(address withdrawTo) public {\n    if (msg.sender != positionOwner && msg.sender != address(factory)) revert NotPositionOwner();\n\n    address[] memory flywheels = pool.getRewardsDistributors();\n\n    for (uint256 i = 0; i < flywheels.length; i++) {\n      IonicFlywheel fw = IonicFlywheel(flywheels[i]);\n      fw.accrue(ERC20(address(collateralMarket)), address(this));\n      fw.accrue(ERC20(address(stableMarket)), address(this));\n      fw.claimRewards(address(this));\n      ERC20 rewardToken = fw.rewardToken();\n      uint256 rewardsAccrued = rewardToken.balanceOf(address(this));\n      if (rewardsAccrued > 0) {\n        rewardToken.transfer(withdrawTo, rewardsAccrued);\n      }\n    }\n  }\n\n  fallback() external {\n    address extension = factory.getPositionsExtension(msg.sig);\n    if (extension == address(0)) revert ExtNotFound(msg.sig);\n    // Execute external function from extension using delegatecall and return any value.\n    assembly {\n      // copy function selector and any arguments\n      calldatacopy(0, 0, calldatasize())\n      // execute function call using the extension\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\n      // get any return value\n      returndatacopy(0, 0, returndatasize())\n      // return any return value or error back to the caller\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /*----------------------------------------------------------------\n                          View Functions\n  ----------------------------------------------------------------*/\n\n  /// @notice this is a lens fn, it is not intended to be used on-chain\n  function getAccruedRewards()\n    external\n    returns (\n      /*view*/\n      ERC20[] memory rewardTokens,\n      uint256[] memory amounts\n    )\n  {\n    address[] memory flywheels = pool.getRewardsDistributors();\n\n    rewardTokens = new ERC20[](flywheels.length);\n    amounts = new uint256[](flywheels.length);\n\n    for (uint256 i = 0; i < flywheels.length; i++) {\n      IonicFlywheel fw = IonicFlywheel(flywheels[i]);\n      fw.accrue(ERC20(address(collateralMarket)), address(this));\n      fw.accrue(ERC20(address(stableMarket)), address(this));\n      rewardTokens[i] = fw.rewardToken();\n      amounts[i] = fw.rewardsAccrued(address(this));\n    }\n  }\n\n  function getCurrentLeverageRatio() public view returns (uint256) {\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    if (positionSupplyAmount == 0) return 0;\n\n    BasePriceOracle oracle = pool.oracle();\n\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n    uint256 positionValue = (collateralAssetPrice * positionSupplyAmount) / 1e18;\n\n    uint256 debtValue = 0;\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\n    if (debtAmount > 0) {\n      uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n      debtValue = (borrowedAssetPrice * debtAmount) / 1e18;\n    }\n\n    // TODO check if positionValue > debtValue\n    // s / ( s - b )\n    return (positionValue * 1e18) / (positionValue - debtValue);\n  }\n\n  function getMinLeverageRatio() public view returns (uint256) {\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    if (positionSupplyAmount == 0) return 0;\n\n    BasePriceOracle oracle = pool.oracle();\n    uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 minStableBorrowAmount = (factory.getMinBorrowNative() * 1e18) / borrowedAssetPrice;\n    return _getLeverageRatioAfterBorrow(minStableBorrowAmount, positionSupplyAmount, 0);\n  }\n\n  function getMaxLeverageRatio() public view returns (uint256) {\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    if (positionSupplyAmount == 0) return 0;\n\n    uint256 maxBorrow = pool.getMaxRedeemOrBorrow(address(this), stableMarket, true);\n    uint256 positionBorrowAmount = stableMarket.borrowBalanceCurrent(address(this));\n    return _getLeverageRatioAfterBorrow(maxBorrow, positionSupplyAmount, positionBorrowAmount);\n  }\n\n  function _getLeverageRatioAfterBorrow(\n    uint256 newBorrowsAmount,\n    uint256 positionSupplyAmount,\n    uint256 positionBorrowAmount\n  ) internal view returns (uint256 r) {\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n\n    uint256 currentBorrowsValue = (positionBorrowAmount * stableAssetPrice) / 1e18;\n    uint256 newBorrowsValue = (newBorrowsAmount * stableAssetPrice) / 1e18;\n    uint256 positionValue = (positionSupplyAmount * collateralAssetPrice) / 1e18;\n\n    // accounting for swaps slippage\n    uint256 assumedSlippage = factory.liquidatorsRegistry().getSlippage(stableAsset, collateralAsset);\n    {\n      // add 10 bps just to not go under the min borrow value\n      assumedSlippage += 10;\n    }\n    uint256 topUpCollateralValue = (newBorrowsValue * 10000) / (10000 + assumedSlippage);\n\n    int256 s = int256(positionValue);\n    int256 b = int256(currentBorrowsValue);\n    int256 x = int256(topUpCollateralValue);\n\n    r = uint256(((s + x) * 1e18) / (s + x - b - int256(newBorrowsValue)));\n  }\n\n  function isPositionClosed() public view returns (bool) {\n    return collateralMarket.balanceOfUnderlying(address(this)) == 0;\n  }\n\n  function getEquityAmount() external view returns (uint256 equityAmount) {\n    BasePriceOracle oracle = pool.oracle();\n    uint256 borrowedAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    uint256 positionValue = (collateralAssetPrice * positionSupplyAmount) / 1e18;\n\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\n    uint256 debtValue = (borrowedAssetPrice * debtAmount) / 1e18;\n\n    uint256 equityValue = positionValue - debtValue;\n    equityAmount = (equityValue * 1e18) / collateralAssetPrice;\n  }\n\n  function getSupplyAmountDelta(uint256 targetRatio) public view returns (uint256, uint256) {\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n\n    uint256 currentRatio = getCurrentLeverageRatio();\n    bool up = targetRatio > currentRatio;\n    return _getSupplyAmountDelta(up, targetRatio, collateralAssetPrice, stableAssetPrice);\n  }\n\n  function _getSupplyAmountDelta(\n    bool up,\n    uint256 targetRatio,\n    uint256 collateralAssetPrice,\n    uint256 borrowedAssetPrice\n  ) internal view returns (uint256 supplyDelta, uint256 borrowsDelta) {\n    uint256 positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(this));\n    uint256 debtAmount = stableMarket.borrowBalanceCurrent(address(this));\n    uint256 assumedSlippage;\n    if (up) assumedSlippage = factory.liquidatorsRegistry().getSlippage(stableAsset, collateralAsset);\n    else assumedSlippage = factory.liquidatorsRegistry().getSlippage(collateralAsset, stableAsset);\n    uint256 slippageFactor = (1e18 * (10000 + assumedSlippage)) / 10000;\n\n    uint256 supplyValueDeltaAbs;\n    {\n      // s = supply value before\n      // b = borrow value before\n      // r = target ratio after\n      // c = borrow value coefficient to account for the slippage\n      int256 s = int256((collateralAssetPrice * positionSupplyAmount) / 1e18);\n      int256 b = int256((borrowedAssetPrice * debtAmount) / 1e18);\n      int256 r = int256(targetRatio);\n      int256 r1 = r - 1e18;\n      int256 c = int256(slippageFactor);\n\n      // some math magic here\n      // https://www.wolframalpha.com/input?i2d=true&i=r%3D%5C%2840%29Divide%5B%5C%2840%29s%2Bx%5C%2841%29%2C%5C%2840%29s%2Bx-b-c*x%5C%2841%29%5D+%5C%2841%29+solve+for+x\n\n      // x = supplyValueDelta\n      int256 supplyValueDelta = (((r1 * s) - (b * r)) * 1e18) / ((c * r) - (1e18 * r1));\n      supplyValueDeltaAbs = uint256((supplyValueDelta < 0) ? -supplyValueDelta : supplyValueDelta);\n    }\n\n    supplyDelta = (supplyValueDeltaAbs * 1e18) / collateralAssetPrice;\n    borrowsDelta = (supplyValueDeltaAbs * 1e18) / borrowedAssetPrice;\n\n    if (up) {\n      // stables to borrow = c * x\n      borrowsDelta = (borrowsDelta * slippageFactor) / 1e18;\n    } else {\n      // amount to redeem = c * x\n      supplyDelta = (supplyDelta * slippageFactor) / 1e18;\n    }\n  }\n\n  /*----------------------------------------------------------------\n                            Internal Functions\n  ----------------------------------------------------------------*/\n\n  function _supplyCollateral(IERC20Upgradeable fundingAsset) internal returns (uint256 amountToSupply) {\n    // in case the funding is with a different asset\n    if (address(collateralAsset) != address(fundingAsset)) {\n      // swap for collateral asset\n      convertAllTo(fundingAsset, collateralAsset);\n    }\n\n    // supply the collateral\n    amountToSupply = collateralAsset.balanceOf(address(this));\n    collateralAsset.approve(address(collateralMarket), amountToSupply);\n    uint256 errorCode = collateralMarket.mint(amountToSupply);\n    if (errorCode != 0) revert SupplyCollateralFailed(errorCode);\n  }\n\n  // @dev flash loan the needed amount, then borrow stables and swap them for the amount needed to repay the FL\n  function _leverUp(uint256 targetRatio) internal {\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n\n    (uint256 flashLoanCollateralAmount, uint256 stableToBorrow) = _getSupplyAmountDelta(\n      true,\n      targetRatio,\n      collateralAssetPrice,\n      stableAssetPrice\n    );\n\n    collateralMarket.flash(flashLoanCollateralAmount, abi.encode(stableToBorrow));\n    // the execution will first receive a callback to receiveFlashLoan()\n    // then it continues from here\n\n    // all stables are swapped for collateral to repay the FL\n    uint256 collateralLeftovers = collateralAsset.balanceOf(address(this));\n    if (collateralLeftovers > 0) {\n      collateralAsset.approve(address(collateralMarket), collateralLeftovers);\n      collateralMarket.mint(collateralLeftovers);\n    }\n  }\n\n  // @dev supply the flash loaned collateral and then borrow stables with it\n  function _leverUpPostFL(uint256 stableToBorrow) internal {\n    // supply the flash loaned collateral\n    _supplyCollateral(collateralAsset);\n\n    // borrow stables that will be swapped to repay the FL\n    uint256 errorCode = stableMarket.borrow(stableToBorrow);\n    if (errorCode != 0) revert BorrowStableFailed(errorCode);\n\n    // swap for the FL asset\n    convertAllTo(stableAsset, collateralAsset);\n  }\n\n  // @dev redeems the supplied collateral by first repaying the debt with which it was levered\n  function _leverDown(uint256 targetRatio) internal {\n    uint256 amountToRedeem;\n    uint256 borrowsToRepay;\n\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(collateralMarket);\n\n    if (targetRatio <= 1e18) {\n      // if max levering down, then derive the amount to redeem from the debt to be repaid\n      borrowsToRepay = stableMarket.borrowBalanceCurrent(address(this));\n      uint256 borrowsToRepayValueScaled = borrowsToRepay * stableAssetPrice;\n      // accounting for swaps slippage\n      uint256 assumedSlippage = factory.liquidatorsRegistry().getSlippage(collateralAsset, stableAsset);\n      uint256 amountToRedeemValueScaled = (borrowsToRepayValueScaled * (10000 + assumedSlippage)) / 10000;\n      amountToRedeem = amountToRedeemValueScaled / collateralAssetPrice;\n    } else {\n      // else derive the debt to be repaid from the amount to redeem\n      (amountToRedeem, borrowsToRepay) = _getSupplyAmountDelta(\n        false,\n        targetRatio,\n        collateralAssetPrice,\n        stableAssetPrice\n      );\n      // the slippage is already accounted for in _getSupplyAmountDelta\n    }\n\n    if (borrowsToRepay > 0) {\n      ICErc20(address(stableMarket)).flash(borrowsToRepay, abi.encode(amountToRedeem));\n      // the execution will first receive a callback to receiveFlashLoan()\n      // then it continues from here\n    }\n\n    // all the redeemed collateral is swapped for stables to repay the FL\n    uint256 stableLeftovers = stableAsset.balanceOf(address(this));\n    if (stableLeftovers > 0) {\n      uint256 borrowBalance = stableMarket.borrowBalanceCurrent(address(this));\n      if (borrowBalance > 0) {\n        // whatever is smaller\n        uint256 amountToRepay = borrowBalance > stableLeftovers ? stableLeftovers : borrowBalance;\n        stableAsset.approve(address(stableMarket), amountToRepay);\n        stableMarket.repayBorrow(amountToRepay);\n      }\n    }\n  }\n\n  function _leverDownPostFL(uint256 _flashLoanedCollateral, uint256 _amountToRedeem) internal {\n    // repay the borrows\n    uint256 borrowBalance = stableMarket.borrowBalanceCurrent(address(this));\n    uint256 repayAmount = _flashLoanedCollateral < borrowBalance ? _flashLoanedCollateral : borrowBalance;\n    stableAsset.approve(address(stableMarket), repayAmount);\n    uint256 errorCode = stableMarket.repayBorrow(repayAmount);\n    if (errorCode != 0) revert RepayBorrowFailed(errorCode);\n\n    // redeem the corresponding amount needed to repay the FL\n    errorCode = collateralMarket.redeemUnderlying(_amountToRedeem);\n    if (errorCode != 0) revert RedeemCollateralFailed(errorCode);\n\n    // swap for the FL asset\n    convertAllTo(collateralAsset, stableAsset);\n  }\n\n  function convertAllTo(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    private\n    returns (uint256 outputAmount)\n  {\n    uint256 inputAmount = inputToken.balanceOf(address(this));\n    (IRedemptionStrategy[] memory redemptionStrategies, bytes[] memory strategiesData) = factory\n      .getRedemptionStrategies(inputToken, outputToken);\n\n    if (redemptionStrategies.length == 0) revert ConvertFundsFailed();\n\n    for (uint256 i = 0; i < redemptionStrategies.length; i++) {\n      IRedemptionStrategy redemptionStrategy = redemptionStrategies[i];\n      bytes memory strategyData = strategiesData[i];\n      (outputToken, outputAmount) = convertCustomFunds(inputToken, inputAmount, redemptionStrategy, strategyData);\n      inputAmount = outputAmount;\n      inputToken = outputToken;\n    }\n  }\n\n  function convertCustomFunds(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    IRedemptionStrategy strategy,\n    bytes memory strategyData\n  ) private returns (IERC20Upgradeable, uint256) {\n    bytes memory returndata = _functionDelegateCall(\n      address(strategy),\n      abi.encodeWithSelector(strategy.redeem.selector, inputToken, inputAmount, strategyData)\n    );\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\n  }\n\n  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n    require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return _verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n  }\n\n  function _verifyCallResult(\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) private pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      if (returndata.length > 0) {\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n  }\n}\n"
    },
    "contracts/ionic/levered/LeveredPositionsLens.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport { ILeveredPositionFactory } from \"./ILeveredPositionFactory.sol\";\nimport { LeveredPosition } from \"./LeveredPosition.sol\";\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\nimport { IonicComptroller } from \"../../compound/ComptrollerInterface.sol\";\nimport { BasePriceOracle } from \"../../oracles/BasePriceOracle.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract LeveredPositionsLens is Initializable {\n  ILeveredPositionFactory public factory;\n\n  function initialize(ILeveredPositionFactory _factory) external initializer {\n    factory = _factory;\n  }\n\n  function reinitialize(ILeveredPositionFactory _factory) external reinitializer(2) {\n    factory = _factory;\n  }\n\n  /// @notice this is a lens fn, it is not intended to be used on-chain\n  /// @dev returns lists of the market addresses, names and symbols of the underlying assets of those collateral markets that are whitelisted\n  function getCollateralMarkets()\n    external\n    view\n    returns (\n      address[] memory markets,\n      IonicComptroller[] memory poolOfMarket,\n      address[] memory underlyings,\n      uint256[] memory underlyingPrices,\n      string[] memory names,\n      string[] memory symbols,\n      uint8[] memory decimals,\n      uint256[] memory totalUnderlyingSupplied,\n      uint256[] memory ratesPerBlock\n    )\n  {\n    markets = factory.getWhitelistedCollateralMarkets();\n    poolOfMarket = new IonicComptroller[](markets.length);\n    underlyings = new address[](markets.length);\n    underlyingPrices = new uint256[](markets.length);\n    names = new string[](markets.length);\n    symbols = new string[](markets.length);\n    totalUnderlyingSupplied = new uint256[](markets.length);\n    decimals = new uint8[](markets.length);\n    ratesPerBlock = new uint256[](markets.length);\n    for (uint256 i = 0; i < markets.length; i++) {\n      ICErc20 market = ICErc20(markets[i]);\n      poolOfMarket[i] = market.comptroller();\n      underlyingPrices[i] = BasePriceOracle(poolOfMarket[i].oracle()).getUnderlyingPrice(market);\n      underlyings[i] = market.underlying();\n      ERC20Upgradeable underlying = ERC20Upgradeable(underlyings[i]);\n      names[i] = underlying.name();\n      symbols[i] = underlying.symbol();\n      decimals[i] = underlying.decimals();\n      totalUnderlyingSupplied[i] = market.getTotalUnderlyingSupplied();\n      ratesPerBlock[i] = market.supplyRatePerBlock();\n    }\n  }\n\n  /// @notice this is a lens fn, it is not intended to be used on-chain\n  /// @dev returns the Rate for the chosen borrowable at the specified leverage ratio and supply amount\n  function getBorrowRateAtRatio(\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket,\n    uint256 _equityAmount,\n    uint256 _targetLeverageRatio\n  ) external view returns (uint256) {\n    IonicComptroller pool = IonicComptroller(_stableMarket.comptroller());\n    BasePriceOracle oracle = pool.oracle();\n    uint256 stableAssetPrice = oracle.getUnderlyingPrice(_stableMarket);\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(_collateralMarket);\n\n    uint256 borrowAmount = ((_targetLeverageRatio - 1e18) * _equityAmount * collateralAssetPrice) /\n      (stableAssetPrice * 1e18);\n    return _stableMarket.borrowRatePerBlockAfterBorrow(borrowAmount) * factory.blocksPerYear();\n  }\n\n  /// @notice this is a lens fn, it is not intended to be used on-chain\n  /// @dev returns lists of the market addresses, names, symbols and the current Rate for each Borrowable asset\n  function getBorrowableMarketsAndRates(ICErc20 _collateralMarket)\n    external\n    view\n    returns (\n      address[] memory markets,\n      address[] memory underlyings,\n      uint256[] memory underlyingsPrices,\n      string[] memory names,\n      string[] memory symbols,\n      uint256[] memory rates,\n      uint8[] memory decimals\n    )\n  {\n    markets = factory.getBorrowableMarketsByCollateral(_collateralMarket);\n    underlyings = new address[](markets.length);\n    names = new string[](markets.length);\n    symbols = new string[](markets.length);\n    rates = new uint256[](markets.length);\n    decimals = new uint8[](markets.length);\n    underlyingsPrices = new uint256[](markets.length);\n    for (uint256 i = 0; i < markets.length; i++) {\n      ICErc20 market = ICErc20(markets[i]);\n      address underlyingAddress = market.underlying();\n      underlyings[i] = underlyingAddress;\n      ERC20Upgradeable underlying = ERC20Upgradeable(underlyingAddress);\n      names[i] = underlying.name();\n      symbols[i] = underlying.symbol();\n      rates[i] = market.borrowRatePerBlock();\n      decimals[i] = underlying.decimals();\n      underlyingsPrices[i] = market.comptroller().oracle().getUnderlyingPrice(market);\n    }\n  }\n\n  /// @notice this is a lens fn, it is not intended to be used on-chain\n  function getNetAPY(\n    uint256 _supplyAPY,\n    uint256 _supplyAmount,\n    ICErc20 _collateralMarket,\n    ICErc20 _stableMarket,\n    uint256 _targetLeverageRatio\n  ) public view returns (int256 netAPY) {\n    if (_supplyAmount == 0 || _targetLeverageRatio <= 1e18) return 0;\n\n    IonicComptroller pool = IonicComptroller(_collateralMarket.comptroller());\n    BasePriceOracle oracle = pool.oracle();\n    // TODO the calcs can be implemented without using collateralAssetPrice\n    uint256 collateralAssetPrice = oracle.getUnderlyingPrice(_collateralMarket);\n\n    // total collateral = base collateral + levered collateral\n    uint256 totalCollateral = (_supplyAmount * _targetLeverageRatio) / 1e18;\n    uint256 yieldFromTotalSupplyScaled = _supplyAPY * totalCollateral;\n    int256 yieldValueScaled = int256((yieldFromTotalSupplyScaled * collateralAssetPrice) / 1e18);\n\n    uint256 borrowedValueScaled = (totalCollateral - _supplyAmount) * collateralAssetPrice;\n    uint256 _borrowRate = _stableMarket.borrowRatePerBlock() * factory.blocksPerYear();\n    int256 borrowInterestValueScaled = int256((_borrowRate * borrowedValueScaled) / 1e18);\n\n    int256 netValueDiffScaled = yieldValueScaled - borrowInterestValueScaled;\n\n    netAPY = ((netValueDiffScaled / int256(collateralAssetPrice)) * 1e18) / int256(_supplyAmount);\n  }\n\n  function getPositionsInfo(LeveredPosition[] calldata positions, uint256[] calldata supplyApys)\n    external\n    view\n    returns (PositionInfo[] memory infos)\n  {\n    infos = new PositionInfo[](positions.length);\n    for (uint256 i = 0; i < positions.length; i++) {\n      infos[i] = getPositionInfo(positions[i], supplyApys[i]);\n    }\n  }\n\n  function getLeverageRatioAfterFunding(LeveredPosition pos, uint256 newFunding) public view returns (uint256) {\n    uint256 equityAmount = pos.getEquityAmount();\n    if (equityAmount == 0 && newFunding == 0) return 0;\n\n    uint256 suppliedCollateralCurrent = pos.collateralMarket().balanceOfUnderlying(address(pos));\n    return ((suppliedCollateralCurrent + newFunding) * 1e18) / (equityAmount + newFunding);\n  }\n\n  function getNetApyForPositionAfterFunding(\n    LeveredPosition pos,\n    uint256 supplyAPY,\n    uint256 newFunding\n  ) public view returns (int256) {\n    return\n      getNetAPY(\n        supplyAPY,\n        pos.getEquityAmount() + newFunding,\n        pos.collateralMarket(),\n        pos.stableMarket(),\n        getLeverageRatioAfterFunding(pos, newFunding)\n      );\n  }\n\n  function getNetApyForPosition(LeveredPosition pos, uint256 supplyAPY) public view returns (int256) {\n    return getNetApyForPositionAfterFunding(pos, supplyAPY, 0);\n  }\n\n  struct PositionInfo {\n    uint256 collateralAssetPrice;\n    uint256 borrowedAssetPrice;\n    uint256 positionSupplyAmount;\n    uint256 positionValue;\n    uint256 debtAmount;\n    uint256 debtValue;\n    uint256 equityAmount;\n    uint256 equityValue;\n    int256 currentApy;\n    uint256 debtRatio;\n    uint256 liquidationThreshold;\n    uint256 safetyBuffer;\n  }\n\n  function getPositionInfo(LeveredPosition pos, uint256 supplyApy) public view returns (PositionInfo memory info) {\n    ICErc20 collateralMarket = pos.collateralMarket();\n    IonicComptroller pool = pos.pool();\n    info.collateralAssetPrice = pool.oracle().getUnderlyingPrice(collateralMarket);\n    {\n      info.positionSupplyAmount = collateralMarket.balanceOfUnderlying(address(pos));\n      info.positionValue = (info.collateralAssetPrice * info.positionSupplyAmount) / 1e18;\n      info.currentApy = getNetApyForPosition(pos, supplyApy);\n    }\n\n    {\n      ICErc20 stableMarket = pos.stableMarket();\n      info.borrowedAssetPrice = pool.oracle().getUnderlyingPrice(stableMarket);\n      info.debtAmount = stableMarket.borrowBalanceCurrent(address(pos));\n      info.debtValue = (info.borrowedAssetPrice * info.debtAmount) / 1e18;\n      info.equityValue = info.positionValue - info.debtValue;\n      info.debtRatio = info.positionValue == 0 ? 0 : (info.debtValue * 1e18) / info.positionValue;\n      info.equityAmount = (info.equityValue * 1e18) / info.collateralAssetPrice;\n    }\n\n    {\n      (, uint256 collateralFactor) = pool.markets(address(collateralMarket));\n      info.liquidationThreshold = collateralFactor;\n      info.safetyBuffer = collateralFactor - info.debtRatio;\n    }\n  }\n}\n"
    },
    "contracts/ionic/levered/LeveredPositionStorage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport { ILeveredPositionFactory } from \"./ILeveredPositionFactory.sol\";\nimport { IonicComptroller } from \"../../compound/ComptrollerInterface.sol\";\nimport { ICErc20 } from \"../../compound/CTokenInterfaces.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ncontract LeveredPositionStorage {\n  address public immutable positionOwner;\n  ILeveredPositionFactory public factory;\n\n  ICErc20 public collateralMarket;\n  ICErc20 public stableMarket;\n  IonicComptroller public pool;\n\n  IERC20Upgradeable public collateralAsset;\n  IERC20Upgradeable public stableAsset;\n\n  constructor(address _positionOwner) {\n    positionOwner = _positionOwner;\n  }\n}\n"
    },
    "contracts/ionic/PoolRolesAuthority.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IonicComptroller, ComptrollerInterface } from \"../compound/ComptrollerInterface.sol\";\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \"../compound/CTokenInterfaces.sol\";\n\nimport { RolesAuthority, Authority } from \"solmate/auth/authorities/RolesAuthority.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\n\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\n    _disableInitializers();\n  }\n\n  function initialize(address _owner) public initializer {\n    owner = _owner;\n    authority = this;\n  }\n\n  // up to 256 roles\n  uint8 public constant REGISTRY_ROLE = 0;\n  uint8 public constant SUPPLIER_ROLE = 1;\n  uint8 public constant BORROWER_ROLE = 2;\n  uint8 public constant LIQUIDATOR_ROLE = 3;\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\n\n  function configureRegistryCapabilities() external requiresAuth {\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\n      true\n    );\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\n      true\n    );\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\n      true\n    );\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\n      true\n    );\n    setRoleCapability(\n      REGISTRY_ROLE,\n      address(this),\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\n      true\n    );\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\n  }\n\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\n    _setPublicPoolSupplierCapabilities(pool, true);\n  }\n\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\n    _setPublicPoolSupplierCapabilities(pool, false);\n  }\n\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      bytes4[] memory selectors = getSupplierMarketSelectors();\n      for (uint256 j = 0; j < selectors.length; j++) {\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\n      }\n    }\n  }\n\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\n  }\n\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\n    uint8 fnsCount = 6;\n    selectors = new bytes4[](fnsCount);\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\n\n    require(fnsCount == 0, \"use the correct array length\");\n    return selectors;\n  }\n\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      bytes4[] memory selectors = getSupplierMarketSelectors();\n      for (uint256 j = 0; j < selectors.length; j++) {\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\n      }\n    }\n  }\n\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\n    _setPublicPoolBorrowerCapabilities(pool, true);\n  }\n\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\n    _setPublicPoolBorrowerCapabilities(pool, false);\n  }\n\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\n    }\n  }\n\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\n    // borrowers have the SUPPLIER_ROLE capabilities by default\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\n    }\n  }\n\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\n    }\n  }\n\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\n      // TODO this leaves redeeming open for everyone\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\n    }\n  }\n\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\n\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\n    }\n  }\n}\n"
    },
    "contracts/ionic/SafeOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\n\n/**\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\n * that will shift the other.\n */\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\n  /**\n   * @notice Pending owner of this contract\n   */\n  address public pendingOwner;\n\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\n    __Ownable_init();\n    _transferOwnership(owner_);\n  }\n\n  struct AddressSlot {\n    address value;\n  }\n\n  modifier onlyOwnerOrAdmin() {\n    bool isOwner = owner() == _msgSender();\n    if (!isOwner) {\n      address admin = _getProxyAdmin();\n      bool isAdmin = admin == _msgSender();\n      require(isAdmin, \"Ownable: caller is neither the owner nor the admin\");\n    }\n    _;\n  }\n\n  /**\n   * @notice Emitted when pendingOwner is changed\n   */\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\n\n  /**\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\n   */\n  event NewOwner(address oldOwner, address newOwner);\n\n  /**\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\n   * @param newPendingOwner New pending owner.\n   */\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\n    // Save current value, if any, for inclusion in log\n    address oldPendingOwner = pendingOwner;\n\n    // Store pendingOwner with value newPendingOwner\n    pendingOwner = newPendingOwner;\n\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\n  }\n\n  /**\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\n   * @dev Owner function for pending owner to accept role and update owner\n   */\n  function _acceptOwner() public {\n    // Check caller is pendingOwner and pendingOwner ≠ address(0)\n    require(msg.sender == pendingOwner, \"not the pending owner\");\n\n    // Save current values for inclusion in log\n    address oldOwner = owner();\n    address oldPendingOwner = pendingOwner;\n\n    // Store owner with value pendingOwner\n    _transferOwnership(pendingOwner);\n\n    // Clear the pending value\n    pendingOwner = address(0);\n\n    emit NewOwner(oldOwner, pendingOwner);\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\n  }\n\n  function renounceOwnership() public override onlyOwner {\n    // do not remove this overriding fn\n    revert(\"not used anymore\");\n  }\n\n  function transferOwnership(address newOwner) public override onlyOwner {\n    emit NewPendingOwner(pendingOwner, newOwner);\n    pendingOwner = newOwner;\n  }\n\n  function _getProxyAdmin() internal view returns (address admin) {\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n    AddressSlot storage adminSlot;\n    assembly {\n      adminSlot.slot := _ADMIN_SLOT\n    }\n    admin = adminSlot.value;\n  }\n}\n"
    },
    "contracts/ionic/strategies/flywheel/IFlywheelBooster.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\n\n/**\n @title Balance Booster Module for Flywheel\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Booster module is an optional module for virtually boosting or otherwise transforming user balances. \n         If a booster is not configured, the strategies ERC-20 balanceOf/totalSupply will be used instead.\n        \n         Boosting logic can be associated with referrals, vote-escrow, or other strategies.\n\n         SECURITY NOTE: similar to how Core needs to be notified any time the strategy user composition changes, the booster would need to be notified of any conditions which change the boosted balances atomically.\n         This prevents gaming of the reward calculation function by using manipulated balances when accruing.\n*/\ninterface IFlywheelBooster {\n    /**\n      @notice calculate the boosted supply of a strategy.\n      @param strategy the strategy to calculate boosted supply of\n      @return the boosted supply\n     */\n    function boostedTotalSupply(ERC20 strategy) external view returns (uint256);\n\n    /**\n      @notice calculate the boosted balance of a user in a given strategy.\n      @param strategy the strategy to calculate boosted balance of\n      @param user the user to calculate boosted balance of\n      @return the boosted balance\n     */\n    function boostedBalanceOf(ERC20 strategy, address user) external view returns (uint256);\n}\n"
    },
    "contracts/ionic/strategies/flywheel/IIonicFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\n\ninterface IIonicFlywheel {\n  function isRewardsDistributor() external returns (bool);\n\n  function isFlywheel() external returns (bool);\n\n  function flywheelPreSupplierAction(address market, address supplier) external;\n\n  function flywheelPreBorrowerAction(address market, address borrower) external;\n\n  function flywheelPreTransferAction(address market, address src, address dst) external;\n\n  function compAccrued(address user) external view returns (uint256);\n\n  function addMarketForRewards(ERC20 strategy) external;\n\n  function marketState(ERC20 strategy) external view returns (uint224 index, uint32 lastUpdatedTimestamp);\n}\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { IonicFlywheelCore } from \"./IonicFlywheelCore.sol\";\nimport \"./IIonicFlywheel.sol\";\n\ncontract IonicFlywheel is IonicFlywheelCore, IIonicFlywheel {\n  bool public constant isRewardsDistributor = true;\n  bool public constant isFlywheel = true;\n\n  function flywheelPreSupplierAction(address market, address supplier) external {\n    accrue(ERC20(market), supplier);\n  }\n\n  function flywheelPreBorrowerAction(address market, address borrower) external {}\n\n  function flywheelPreTransferAction(address market, address src, address dst) external {\n    accrue(ERC20(market), src, dst);\n  }\n\n  function compAccrued(address user) external view returns (uint256) {\n    return _rewardsAccrued[user];\n  }\n\n  function addMarketForRewards(ERC20 strategy) external onlyOwner {\n    _addStrategyForRewards(strategy);\n  }\n\n  // TODO remove\n  function marketState(ERC20 strategy) external view returns (uint224, uint32) {\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\n  }\n}\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheelCore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { SafeTransferLib } from \"solmate/utils/SafeTransferLib.sol\";\nimport { SafeCastLib } from \"solmate/utils/SafeCastLib.sol\";\n\nimport { IFlywheelRewards } from \"./rewards/IFlywheelRewards.sol\";\nimport { IFlywheelBooster } from \"./IFlywheelBooster.sol\";\n\nimport { SafeOwnableUpgradeable } from \"../../../ionic/SafeOwnableUpgradeable.sol\";\n\ncontract IonicFlywheelCore is SafeOwnableUpgradeable {\n  using SafeTransferLib for ERC20;\n  using SafeCastLib for uint256;\n\n  /// @notice How much rewardsToken will be send to treasury\n  uint256 public performanceFee;\n\n  /// @notice Address that gets rewardsToken accrued by performanceFee\n  address public feeRecipient;\n\n  /// @notice The token to reward\n  ERC20 public rewardToken;\n\n  /// @notice append-only list of strategies added\n  ERC20[] public allStrategies;\n\n  /// @notice the rewards contract for managing streams\n  IFlywheelRewards public flywheelRewards;\n\n  /// @notice optional booster module for calculating virtual balances on strategies\n  IFlywheelBooster public flywheelBooster;\n\n  /// @notice The accrued but not yet transferred rewards for each user\n  mapping(address => uint256) internal _rewardsAccrued;\n\n  /// @notice The strategy index and last updated per strategy\n  mapping(ERC20 => RewardsState) internal _strategyState;\n\n  /// @notice user index per strategy\n  mapping(ERC20 => mapping(address => uint224)) internal _userIndex;\n\n  constructor() {\n    // prevents the misusage of the implementation contract\n    _disableInitializers();\n  }\n\n  function initialize(\n    ERC20 _rewardToken,\n    IFlywheelRewards _flywheelRewards,\n    IFlywheelBooster _flywheelBooster,\n    address _owner\n  ) public initializer {\n    __SafeOwnable_init(msg.sender);\n\n    rewardToken = _rewardToken;\n    flywheelRewards = _flywheelRewards;\n    flywheelBooster = _flywheelBooster;\n\n    _transferOwnership(_owner);\n\n    performanceFee = 10e16; // 10%\n    feeRecipient = _owner;\n  }\n\n  /*----------------------------------------------------------------\n                        ACCRUE/CLAIM LOGIC\n    ----------------------------------------------------------------*/\n\n  /** \n      @notice Emitted when a user's rewards accrue to a given strategy.\n      @param strategy the updated rewards strategy\n      @param user the user of the rewards\n      @param rewardsDelta how many new rewards accrued to the user\n      @param rewardsIndex the market index for rewards per token accrued\n    */\n  event AccrueRewards(ERC20 indexed strategy, address indexed user, uint256 rewardsDelta, uint256 rewardsIndex);\n\n  /** \n      @notice Emitted when a user claims accrued rewards.\n      @param user the user of the rewards\n      @param amount the amount of rewards claimed\n    */\n  event ClaimRewards(address indexed user, uint256 amount);\n\n  /** \n      @notice accrue rewards for a single user on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the user to be accrued\n      @return the cumulative amount of rewards accrued to user (including prior)\n    */\n  function accrue(ERC20 strategy, address user) public returns (uint256) {\n    (uint224 index, uint32 ts) = strategyState(strategy);\n    RewardsState memory state = RewardsState(index, ts);\n\n    if (state.index == 0) return 0;\n\n    state = accrueStrategy(strategy, state);\n    return accrueUser(strategy, user, state);\n  }\n\n  /** \n      @notice accrue rewards for a two users on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the first user to be accrued\n      @param user the second user to be accrued\n      @return the cumulative amount of rewards accrued to the first user (including prior)\n      @return the cumulative amount of rewards accrued to the second user (including prior)\n    */\n  function accrue(\n    ERC20 strategy,\n    address user,\n    address secondUser\n  ) public returns (uint256, uint256) {\n    (uint224 index, uint32 ts) = strategyState(strategy);\n    RewardsState memory state = RewardsState(index, ts);\n\n    if (state.index == 0) return (0, 0);\n\n    state = accrueStrategy(strategy, state);\n    return (accrueUser(strategy, user, state), accrueUser(strategy, secondUser, state));\n  }\n\n  /** \n      @notice claim rewards for a given user\n      @param user the user claiming rewards\n      @dev this function is public, and all rewards transfer to the user\n    */\n  function claimRewards(address user) external {\n    uint256 accrued = rewardsAccrued(user);\n\n    if (accrued != 0) {\n      _rewardsAccrued[user] = 0;\n\n      rewardToken.safeTransferFrom(address(flywheelRewards), user, accrued);\n\n      emit ClaimRewards(user, accrued);\n    }\n  }\n\n  /*----------------------------------------------------------------\n                          ADMIN LOGIC\n    ----------------------------------------------------------------*/\n\n  /** \n      @notice Emitted when a new strategy is added to flywheel by the admin\n      @param newStrategy the new added strategy\n    */\n  event AddStrategy(address indexed newStrategy);\n\n  /// @notice initialize a new strategy\n  function addStrategyForRewards(ERC20 strategy) external onlyOwner {\n    _addStrategyForRewards(strategy);\n  }\n\n  function _addStrategyForRewards(ERC20 strategy) internal {\n    (uint224 index, ) = strategyState(strategy);\n    require(index == 0, \"strategy\");\n    _strategyState[strategy] = RewardsState({\n      index: (10**rewardToken.decimals()).safeCastTo224(),\n      lastUpdatedTimestamp: block.timestamp.safeCastTo32()\n    });\n\n    allStrategies.push(strategy);\n    emit AddStrategy(address(strategy));\n  }\n\n  function getAllStrategies() external view returns (ERC20[] memory) {\n    return allStrategies;\n  }\n\n  /** \n      @notice Emitted when the rewards module changes\n      @param newFlywheelRewards the new rewards module\n    */\n  event FlywheelRewardsUpdate(address indexed newFlywheelRewards);\n\n  /// @notice swap out the flywheel rewards contract\n  function setFlywheelRewards(IFlywheelRewards newFlywheelRewards) external onlyOwner {\n    if (address(flywheelRewards) != address(0)) {\n      uint256 oldRewardBalance = rewardToken.balanceOf(address(flywheelRewards));\n      if (oldRewardBalance > 0) {\n        rewardToken.safeTransferFrom(address(flywheelRewards), address(newFlywheelRewards), oldRewardBalance);\n      }\n    }\n\n    flywheelRewards = newFlywheelRewards;\n\n    emit FlywheelRewardsUpdate(address(newFlywheelRewards));\n  }\n\n  /** \n      @notice Emitted when the booster module changes\n      @param newBooster the new booster module\n    */\n  event FlywheelBoosterUpdate(address indexed newBooster);\n\n  /// @notice swap out the flywheel booster contract\n  function setBooster(IFlywheelBooster newBooster) external onlyOwner {\n    flywheelBooster = newBooster;\n\n    emit FlywheelBoosterUpdate(address(newBooster));\n  }\n\n  event UpdatedFeeSettings(\n    uint256 oldPerformanceFee,\n    uint256 newPerformanceFee,\n    address oldFeeRecipient,\n    address newFeeRecipient\n  );\n\n  /**\n   * @notice Update performanceFee and/or feeRecipient\n   * @dev Claim rewards first from the previous feeRecipient before changing it\n   */\n  function updateFeeSettings(uint256 _performanceFee, address _feeRecipient) external onlyOwner {\n    _updateFeeSettings(_performanceFee, _feeRecipient);\n  }\n\n  function _updateFeeSettings(uint256 _performanceFee, address _feeRecipient) internal {\n    emit UpdatedFeeSettings(performanceFee, _performanceFee, feeRecipient, _feeRecipient);\n\n    if (feeRecipient != _feeRecipient) {\n      _rewardsAccrued[_feeRecipient] += rewardsAccrued(feeRecipient);\n      _rewardsAccrued[feeRecipient] = 0;\n    }\n    performanceFee = _performanceFee;\n    feeRecipient = _feeRecipient;\n  }\n\n  /*----------------------------------------------------------------\n                    INTERNAL ACCOUNTING LOGIC\n    ----------------------------------------------------------------*/\n\n  struct RewardsState {\n    /// @notice The strategy's last updated index\n    uint224 index;\n    /// @notice The timestamp the index was last updated at\n    uint32 lastUpdatedTimestamp;\n  }\n\n  /// @notice accumulate global rewards on a strategy\n  function accrueStrategy(ERC20 strategy, RewardsState memory state)\n    private\n    returns (RewardsState memory rewardsState)\n  {\n    // calculate accrued rewards through module\n    uint256 strategyRewardsAccrued = flywheelRewards.getAccruedRewards(strategy, state.lastUpdatedTimestamp);\n\n    rewardsState = state;\n\n    if (strategyRewardsAccrued > 0) {\n      // use the booster or token supply to calculate reward index denominator\n      uint256 supplyTokens = address(flywheelBooster) != address(0)\n        ? flywheelBooster.boostedTotalSupply(strategy)\n        : strategy.totalSupply();\n\n      // 100% = 100e16\n      uint256 accruedFees = (strategyRewardsAccrued * performanceFee) / uint224(100e16);\n\n      _rewardsAccrued[feeRecipient] += accruedFees;\n      strategyRewardsAccrued -= accruedFees;\n\n      uint224 deltaIndex;\n\n      if (supplyTokens != 0)\n        deltaIndex = ((strategyRewardsAccrued * (10**strategy.decimals())) / supplyTokens).safeCastTo224();\n\n      // accumulate rewards per token onto the index, multiplied by fixed-point factor\n      rewardsState = RewardsState({\n        index: state.index + deltaIndex,\n        lastUpdatedTimestamp: block.timestamp.safeCastTo32()\n      });\n      _strategyState[strategy] = rewardsState;\n    }\n  }\n\n  /// @notice accumulate rewards on a strategy for a specific user\n  function accrueUser(\n    ERC20 strategy,\n    address user,\n    RewardsState memory state\n  ) private returns (uint256) {\n    // load indices\n    uint224 strategyIndex = state.index;\n    uint224 supplierIndex = userIndex(strategy, user);\n\n    // sync user index to global\n    _userIndex[strategy][user] = strategyIndex;\n\n    // if user hasn't yet accrued rewards, grant them interest from the strategy beginning if they have a balance\n    // zero balances will have no effect other than syncing to global index\n    if (supplierIndex == 0) {\n      supplierIndex = (10**rewardToken.decimals()).safeCastTo224();\n    }\n\n    uint224 deltaIndex = strategyIndex - supplierIndex;\n    // use the booster or token balance to calculate reward balance multiplier\n    uint256 supplierTokens = address(flywheelBooster) != address(0)\n      ? flywheelBooster.boostedBalanceOf(strategy, user)\n      : strategy.balanceOf(user);\n\n    // accumulate rewards by multiplying user tokens by rewardsPerToken index and adding on unclaimed\n    uint256 supplierDelta = (deltaIndex * supplierTokens) / (10**strategy.decimals());\n    uint256 supplierAccrued = rewardsAccrued(user) + supplierDelta;\n\n    _rewardsAccrued[user] = supplierAccrued;\n\n    emit AccrueRewards(strategy, user, supplierDelta, strategyIndex);\n\n    return supplierAccrued;\n  }\n\n  function rewardsAccrued(address user) public virtual returns (uint256) {\n    return _rewardsAccrued[user];\n  }\n\n  function userIndex(ERC20 strategy, address user) public virtual returns (uint224) {\n    return _userIndex[strategy][user];\n  }\n\n  function strategyState(ERC20 strategy) public virtual returns (uint224 index, uint32 lastUpdatedTimestamp) {\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\n  }\n}\n"
    },
    "contracts/ionic/strategies/flywheel/IonicFlywheelLensRouter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\n\nimport { IonicFlywheelCore } from \"./IonicFlywheelCore.sol\";\nimport { IonicComptroller } from \"../../../compound/ComptrollerInterface.sol\";\nimport { ICErc20 } from \"../../../compound/CTokenInterfaces.sol\";\nimport { BasePriceOracle } from \"../../../oracles/BasePriceOracle.sol\";\nimport { PoolDirectory } from \"../../../PoolDirectory.sol\";\n\ninterface IPriceOracle_IFLR {\n  function getUnderlyingPrice(ERC20 cToken) external view returns (uint256);\n\n  function price(address underlying) external view returns (uint256);\n}\n\ncontract IonicFlywheelLensRouter {\n  PoolDirectory public fpd;\n\n  constructor(PoolDirectory _fpd) {\n    fpd = _fpd;\n  }\n\n  struct MarketRewardsInfo {\n    /// @dev comptroller oracle price of market underlying\n    uint256 underlyingPrice;\n    ICErc20 market;\n    RewardsInfo[] rewardsInfo;\n  }\n\n  struct RewardsInfo {\n    /// @dev rewards in `rewardToken` paid per underlying staked token in `market` per second\n    uint256 rewardSpeedPerSecondPerToken;\n    /// @dev comptroller oracle price of reward token\n    uint256 rewardTokenPrice;\n    /// @dev APR scaled by 1e18. Calculated as rewardSpeedPerSecondPerToken * rewardTokenPrice * 365.25 days / underlyingPrice * 1e18 / market.exchangeRate\n    uint256 formattedAPR;\n    address flywheel;\n    address rewardToken;\n  }\n\n  function getPoolMarketRewardsInfo(IonicComptroller comptroller) external returns (MarketRewardsInfo[] memory) {\n    ICErc20[] memory markets = comptroller.getAllMarkets();\n    return _getMarketRewardsInfo(markets, comptroller);\n  }\n\n  function getMarketRewardsInfo(ICErc20[] memory markets) external returns (MarketRewardsInfo[] memory) {\n    IonicComptroller pool;\n    for (uint256 i = 0; i < markets.length; i++) {\n      ICErc20 asMarket = ICErc20(address(markets[i]));\n      if (address(pool) == address(0)) pool = asMarket.comptroller();\n      else require(asMarket.comptroller() == pool);\n    }\n    return _getMarketRewardsInfo(markets, pool);\n  }\n\n  function _getMarketRewardsInfo(ICErc20[] memory markets, IonicComptroller comptroller)\n    internal\n    returns (MarketRewardsInfo[] memory)\n  {\n    if (address(comptroller) == address(0) || markets.length == 0) return new MarketRewardsInfo[](0);\n\n    address[] memory flywheels = comptroller.getAccruingFlywheels();\n    address[] memory rewardTokens = new address[](flywheels.length);\n    uint256[] memory rewardTokenPrices = new uint256[](flywheels.length);\n    uint256[] memory rewardTokenDecimals = new uint256[](flywheels.length);\n    BasePriceOracle oracle = comptroller.oracle();\n\n    MarketRewardsInfo[] memory infoList = new MarketRewardsInfo[](markets.length);\n    for (uint256 i = 0; i < markets.length; i++) {\n      RewardsInfo[] memory rewardsInfo = new RewardsInfo[](flywheels.length);\n\n      ICErc20 market = ICErc20(address(markets[i]));\n      uint256 price = oracle.price(market.underlying()); // scaled to 1e18\n\n      if (i == 0) {\n        for (uint256 j = 0; j < flywheels.length; j++) {\n          ERC20 rewardToken = IonicFlywheelCore(flywheels[j]).rewardToken();\n          rewardTokens[j] = address(rewardToken);\n          rewardTokenPrices[j] = oracle.price(address(rewardToken)); // scaled to 1e18\n          rewardTokenDecimals[j] = uint256(rewardToken.decimals());\n        }\n      }\n\n      for (uint256 j = 0; j < flywheels.length; j++) {\n        IonicFlywheelCore flywheel = IonicFlywheelCore(flywheels[j]);\n\n        uint256 rewardSpeedPerSecondPerToken = getRewardSpeedPerSecondPerToken(\n          flywheel,\n          market,\n          rewardTokenDecimals[j]\n        );\n        uint256 apr = getApr(\n          rewardSpeedPerSecondPerToken,\n          rewardTokenPrices[j],\n          price, \n          market.exchangeRateCurrent(),\n          flywheel.flywheelBooster.address != address(0)\n        );\n\n        rewardsInfo[j] = RewardsInfo({\n          rewardSpeedPerSecondPerToken: rewardSpeedPerSecondPerToken, // scaled in 1e18\n          rewardTokenPrice: rewardTokenPrices[j],\n          formattedAPR: apr, // scaled in 1e18\n          flywheel: address(flywheel),\n          rewardToken: rewardTokens[j]\n        });\n      }\n\n      infoList[i] = MarketRewardsInfo({ market: market, rewardsInfo: rewardsInfo, underlyingPrice: price });\n    }\n\n    return infoList;\n  }\n\n  function scaleIndexDiff(uint256 indexDiff, uint256 decimals) internal pure returns (uint256) {\n    return decimals <= 18 ? uint256(indexDiff) * (10**(18 - decimals)) : uint256(indexDiff) / (10**(decimals - 18));\n  }\n\n  function getRewardSpeedPerSecondPerToken(\n    IonicFlywheelCore flywheel,\n    ICErc20 market,\n    uint256 decimals\n  ) internal returns (uint256 rewardSpeedPerSecondPerToken) {\n    ERC20 strategy = ERC20(address(market));\n    (uint224 indexBefore, uint32 lastUpdatedTimestampBefore) = flywheel.strategyState(strategy);\n    flywheel.accrue(strategy, address(0));\n    (uint224 indexAfter, uint32 lastUpdatedTimestampAfter) = flywheel.strategyState(strategy);\n    if (lastUpdatedTimestampAfter > lastUpdatedTimestampBefore) {\n      rewardSpeedPerSecondPerToken =\n        scaleIndexDiff((indexAfter - indexBefore), decimals) /\n        (lastUpdatedTimestampAfter - lastUpdatedTimestampBefore);\n    }\n  }\n\n  function getApr(\n    uint256 rewardSpeedPerSecondPerToken,\n    uint256 rewardTokenPrice,\n    uint256 underlyingPrice,\n    uint256 exchangeRate,\n    bool isBorrow\n  ) internal pure returns (uint256) {\n    if (rewardSpeedPerSecondPerToken == 0) return 0;\n    uint256 nativeSpeedPerSecondPerCToken = rewardSpeedPerSecondPerToken * rewardTokenPrice; // scaled to 1e36\n    uint256 nativeSpeedPerYearPerCToken = nativeSpeedPerSecondPerCToken * 365.25 days; // scaled to 1e36\n    uint256 assetSpeedPerYearPerCToken = nativeSpeedPerYearPerCToken / underlyingPrice; // scaled to 1e18\n    uint256 assetSpeedPerYearPerCTokenScaled = assetSpeedPerYearPerCToken * 1e18; // scaled to 1e36\n    uint256 apr = assetSpeedPerYearPerCTokenScaled;\n    if (!isBorrow) {\n      // if not borrowing, use exchange rate to scale\n      apr = assetSpeedPerYearPerCTokenScaled / exchangeRate; // scaled to 1e18\n    } else {\n      apr = assetSpeedPerYearPerCTokenScaled / 1e18; // scaled to 1e18\n    }\n    return apr;\n  }\n\n  function getRewardsAprForMarket(ICErc20 market) internal returns (int256 totalMarketRewardsApr) {\n    IonicComptroller comptroller = market.comptroller();\n    BasePriceOracle oracle = comptroller.oracle();\n    uint256 underlyingPrice = oracle.getUnderlyingPrice(market);\n\n    address[] memory flywheels = comptroller.getAccruingFlywheels();\n    for (uint256 j = 0; j < flywheels.length; j++) {\n      IonicFlywheelCore flywheel = IonicFlywheelCore(flywheels[j]);\n      ERC20 rewardToken = flywheel.rewardToken();\n\n      uint256 rewardSpeedPerSecondPerToken = getRewardSpeedPerSecondPerToken(\n        flywheel,\n        market,\n        uint256(rewardToken.decimals())\n      );\n\n      uint256 marketApr = getApr(\n        rewardSpeedPerSecondPerToken,\n        oracle.price(address(rewardToken)),\n        underlyingPrice,\n        market.exchangeRateCurrent(),\n        flywheel.flywheelBooster.address != address(0)\n      );\n\n      totalMarketRewardsApr += int256(marketApr);\n    }\n  }\n\n  function getUserNetValueDeltaForMarket(\n    address user,\n    ICErc20 market,\n    int256 offchainApr,\n    int256 blocksPerYear\n  ) internal returns (int256) {\n    IonicComptroller comptroller = market.comptroller();\n    BasePriceOracle oracle = comptroller.oracle();\n    int256 netApr = getRewardsAprForMarket(market) +\n      getUserInterestAprForMarket(user, market, blocksPerYear) +\n      offchainApr;\n    return (netApr * int256(market.balanceOfUnderlying(user)) * int256(oracle.getUnderlyingPrice(market))) / 1e36;\n  }\n\n  function getUserInterestAprForMarket(\n    address user,\n    ICErc20 market,\n    int256 blocksPerYear\n  ) internal returns (int256) {\n    uint256 borrows = market.borrowBalanceCurrent(user);\n    uint256 supplied = market.balanceOfUnderlying(user);\n    uint256 supplyRatePerBlock = market.supplyRatePerBlock();\n    uint256 borrowRatePerBlock = market.borrowRatePerBlock();\n\n    IonicComptroller comptroller = market.comptroller();\n    BasePriceOracle oracle = comptroller.oracle();\n    uint256 assetPrice = oracle.getUnderlyingPrice(market);\n    uint256 collateralValue = (supplied * assetPrice) / 1e18;\n    uint256 borrowsValue = (borrows * assetPrice) / 1e18;\n\n    uint256 yieldValuePerBlock = collateralValue * supplyRatePerBlock;\n    uint256 interestOwedValuePerBlock = borrowsValue * borrowRatePerBlock;\n\n    if (collateralValue == 0) return 0;\n    return ((int256(yieldValuePerBlock) - int256(interestOwedValuePerBlock)) * blocksPerYear) / int256(collateralValue);\n  }\n\n  struct AdjustedUserNetAprVars {\n    int256 userNetAssetsValue;\n    int256 userNetValueDelta;\n    BasePriceOracle oracle;\n    ICErc20[] markets;\n    IonicComptroller pool;\n  }\n\n  function getAdjustedUserNetApr(\n    address user,\n    int256 blocksPerYear,\n    address[] memory offchainRewardsAprMarkets,\n    int256[] memory offchainRewardsAprs\n  ) public returns (int256) {\n    AdjustedUserNetAprVars memory vars;\n\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\n    for (uint256 i = 0; i < pools.length; i++) {\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\n      vars.oracle = pool.oracle();\n      vars.markets = pool.getAllMarkets();\n      for (uint256 j = 0; j < vars.markets.length; j++) {\n        int256 offchainRewardsApr = 0;\n        for (uint256 k = 0; k < offchainRewardsAprMarkets.length; k++) {\n          if (offchainRewardsAprMarkets[k] == address(vars.markets[j])) offchainRewardsApr = offchainRewardsAprs[k];\n        }\n        vars.userNetAssetsValue +=\n          int256(vars.markets[j].balanceOfUnderlying(user) * vars.oracle.getUnderlyingPrice(vars.markets[j])) /\n          1e18;\n        vars.userNetValueDelta += getUserNetValueDeltaForMarket(\n          user,\n          vars.markets[j],\n          offchainRewardsApr,\n          blocksPerYear\n        );\n      }\n    }\n\n    if (vars.userNetAssetsValue == 0) return 0;\n    else return (vars.userNetValueDelta * 1e18) / vars.userNetAssetsValue;\n  }\n\n  function getUserNetApr(address user, int256 blocksPerYear) external returns (int256) {\n    address[] memory emptyAddrArray = new address[](0);\n    int256[] memory emptyIntArray = new int256[](0);\n    return getAdjustedUserNetApr(user, blocksPerYear, emptyAddrArray, emptyIntArray);\n  }\n\n  function getAllRewardTokens() public view returns (address[] memory uniqueRewardTokens) {\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\n\n    uint256 rewardTokensCounter;\n    for (uint256 i = 0; i < pools.length; i++) {\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\n      address[] memory fws = pool.getRewardsDistributors();\n\n      rewardTokensCounter += fws.length;\n    }\n\n    address[] memory rewardTokens = new address[](rewardTokensCounter);\n\n    uint256 uniqueRewardTokensCounter = 0;\n    for (uint256 i = 0; i < pools.length; i++) {\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\n      address[] memory fws = pool.getRewardsDistributors();\n\n      for (uint256 j = 0; j < fws.length; j++) {\n        address rwToken = address(IonicFlywheelCore(fws[j]).rewardToken());\n        if (rwToken == address(0)) break;\n\n        bool added;\n        for (uint256 k = 0; k < rewardTokens.length; k++) {\n          if (rwToken == rewardTokens[k]) {\n            added = true;\n            break;\n          }\n        }\n        if (!added) rewardTokens[uniqueRewardTokensCounter++] = rwToken;\n      }\n    }\n\n    uniqueRewardTokens = new address[](uniqueRewardTokensCounter);\n    for (uint256 i = 0; i < uniqueRewardTokensCounter; i++) {\n      uniqueRewardTokens[i] = rewardTokens[i];\n    }\n  }\n\n  function claimAllRewardTokens(address user) external returns (address[] memory, uint256[] memory) {\n    address[] memory rewardTokens = getAllRewardTokens();\n    uint256[] memory rewardsClaimedForToken = new uint256[](rewardTokens.length);\n\n    for (uint256 i = 0; i < rewardTokens.length; i++) {\n      rewardsClaimedForToken[i] = claimRewardsOfRewardToken(user, rewardTokens[i]);\n    }\n\n    return (rewardTokens, rewardsClaimedForToken);\n  }\n\n  function claimRewardsOfRewardToken(address user, address rewardToken) public returns (uint256 rewardsClaimed) {\n    uint256 balanceBefore = ERC20(rewardToken).balanceOf(user);\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\n    for (uint256 i = 0; i < pools.length; i++) {\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\n      ERC20[] memory markets;\n      {\n        ICErc20[] memory cerc20s = pool.getAllMarkets();\n        markets = new ERC20[](cerc20s.length);\n        for (uint256 j = 0; j < cerc20s.length; j++) {\n          markets[j] = ERC20(address(cerc20s[j]));\n        }\n      }\n\n      address[] memory flywheelAddresses = pool.getAccruingFlywheels();\n      for (uint256 k = 0; k < flywheelAddresses.length; k++) {\n        IonicFlywheelCore flywheel = IonicFlywheelCore(flywheelAddresses[k]);\n        if (address(flywheel.rewardToken()) == rewardToken) {\n          for (uint256 m = 0; m < markets.length; m++) {\n            flywheel.accrue(markets[m], user);\n          }\n          flywheel.claimRewards(user);\n        }\n      }\n    }\n\n    uint256 balanceAfter = ERC20(rewardToken).balanceOf(user);\n    return balanceAfter - balanceBefore;\n  }\n\n  function claimRewardsForMarket(\n    address user,\n    ERC20 market,\n    IonicFlywheelCore[] calldata flywheels,\n    bool[] calldata accrue\n  )\n    external\n    returns (\n      IonicFlywheelCore[] memory,\n      address[] memory rewardTokens,\n      uint256[] memory rewards\n    )\n  {\n    uint256 size = flywheels.length;\n    rewards = new uint256[](size);\n    rewardTokens = new address[](size);\n\n    for (uint256 i = 0; i < size; i++) {\n      uint256 newRewards;\n      if (accrue[i]) {\n        newRewards = flywheels[i].accrue(market, user);\n      } else {\n        newRewards = flywheels[i].rewardsAccrued(user);\n      }\n\n      // Take the max, because rewards are cumulative.\n      rewards[i] = rewards[i] >= newRewards ? rewards[i] : newRewards;\n\n      flywheels[i].claimRewards(user);\n      rewardTokens[i] = address(flywheels[i].rewardToken());\n    }\n\n    return (flywheels, rewardTokens, rewards);\n  }\n\n  function claimRewardsForPool(address user, IonicComptroller comptroller)\n    public\n    returns (\n      IonicFlywheelCore[] memory,\n      address[] memory,\n      uint256[] memory\n    )\n  {\n    ICErc20[] memory cerc20s = comptroller.getAllMarkets();\n    ERC20[] memory markets = new ERC20[](cerc20s.length);\n    address[] memory flywheelAddresses = comptroller.getAccruingFlywheels();\n    IonicFlywheelCore[] memory flywheels = new IonicFlywheelCore[](flywheelAddresses.length);\n    bool[] memory accrue = new bool[](flywheelAddresses.length);\n\n    for (uint256 j = 0; j < flywheelAddresses.length; j++) {\n      flywheels[j] = IonicFlywheelCore(flywheelAddresses[j]);\n      accrue[j] = true;\n    }\n\n    for (uint256 j = 0; j < cerc20s.length; j++) {\n      markets[j] = ERC20(address(cerc20s[j]));\n    }\n\n    return claimRewardsForMarkets(user, markets, flywheels, accrue);\n  }\n\n  function claimRewardsForMarkets(\n    address user,\n    ERC20[] memory markets,\n    IonicFlywheelCore[] memory flywheels,\n    bool[] memory accrue\n  )\n    public\n    returns (\n      IonicFlywheelCore[] memory,\n      address[] memory rewardTokens,\n      uint256[] memory rewards\n    )\n  {\n    rewards = new uint256[](flywheels.length);\n    rewardTokens = new address[](flywheels.length);\n\n    for (uint256 i = 0; i < flywheels.length; i++) {\n      for (uint256 j = 0; j < markets.length; j++) {\n        ERC20 market = markets[j];\n\n        uint256 newRewards;\n        if (accrue[i]) {\n          newRewards = flywheels[i].accrue(market, user);\n        } else {\n          newRewards = flywheels[i].rewardsAccrued(user);\n        }\n\n        // Take the max, because rewards are cumulative.\n        rewards[i] = rewards[i] >= newRewards ? rewards[i] : newRewards;\n      }\n\n      flywheels[i].claimRewards(user);\n      rewardTokens[i] = address(flywheels[i].rewardToken());\n    }\n\n    return (flywheels, rewardTokens, rewards);\n  }\n}\n"
    },
    "contracts/ionic/strategies/flywheel/IonicReplacingFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport \"./IonicFlywheel.sol\";\n\nimport { IFlywheelRewards } from \"./rewards/IFlywheelRewards.sol\";\nimport { IFlywheelBooster } from \"./IFlywheelBooster.sol\";\n\ncontract IonicReplacingFlywheel is IonicFlywheel {\n  IonicFlywheelCore public flywheelToReplace;\n  mapping(address => bool) private rewardsTransferred;\n\n  function reinitialize(IonicFlywheelCore _flywheelToReplace) public onlyOwnerOrAdmin {\n    flywheelToReplace = _flywheelToReplace;\n  }\n\n  function rewardsAccrued(address user) public override returns (uint256) {\n    if (address(flywheelToReplace) != address(0)) {\n      if (_rewardsAccrued[user] == 0 && !rewardsTransferred[user]) {\n        uint256 oldStateRewardsAccrued = flywheelToReplace.rewardsAccrued(user);\n        if (oldStateRewardsAccrued != 0) {\n          rewardsTransferred[user] = true;\n          _rewardsAccrued[user] = oldStateRewardsAccrued;\n        }\n      }\n    }\n    return _rewardsAccrued[user];\n  }\n\n  function strategyState(ERC20 strategy) public override returns (uint224, uint32) {\n    if (address(flywheelToReplace) != address(0)) {\n      RewardsState memory newStateStrategyState = _strategyState[strategy];\n      if (newStateStrategyState.index == 0) {\n        (uint224 index, uint32 ts) = flywheelToReplace.strategyState(strategy);\n        if (index != 0) {\n          _strategyState[strategy] = RewardsState(index, ts);\n        }\n      }\n    }\n    return (_strategyState[strategy].index, _strategyState[strategy].lastUpdatedTimestamp);\n  }\n\n  function userIndex(ERC20 strategy, address user) public override returns (uint224) {\n    if (address(flywheelToReplace) != address(0)) {\n      if (_userIndex[strategy][user] == 0) {\n        uint224 oldStateUserIndex = flywheelToReplace.userIndex(strategy, user);\n        if (oldStateUserIndex != 0) {\n          _userIndex[strategy][user] = oldStateUserIndex;\n        }\n      }\n    }\n    return _userIndex[strategy][user];\n  }\n\n  function addInitializedStrategy(ERC20 strategy) public onlyOwner {\n    (uint224 index, ) = strategyState(strategy);\n    if (index > 0) {\n      ERC20[] memory strategies = this.getAllStrategies();\n      for (uint8 i = 0; i < strategies.length; i++) {\n        require(address(strategy) != address(strategies[i]), \"!added\");\n      }\n\n      allStrategies.push(strategy);\n      emit AddStrategy(address(strategy));\n    }\n  }\n}\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/BaseFlywheelRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {SafeTransferLib, ERC20} from \"solmate/utils/SafeTransferLib.sol\";\nimport {IFlywheelRewards} from \"./IFlywheelRewards.sol\";\nimport {IonicFlywheelCore} from \"../IonicFlywheelCore.sol\";\n\n/** \n @title Flywheel Reward Module\n @notice Determines how many rewards accrue to each strategy globally over a given time period.\n @dev approves the flywheel core for the reward token to allow balances to be managed by the module but claimed from core.\n*/\nabstract contract BaseFlywheelRewards is IFlywheelRewards {\n    using SafeTransferLib for ERC20;\n\n    /// @notice thrown when caller is not the flywheel\n    error FlywheelError();\n\n    /// @notice the reward token paid\n    ERC20 public immutable override rewardToken;\n\n    /// @notice the flywheel core contract\n    IonicFlywheelCore public immutable override flywheel;\n\n    constructor(IonicFlywheelCore _flywheel) {\n        flywheel = _flywheel;\n        ERC20 _rewardToken = _flywheel.rewardToken();\n        rewardToken = _rewardToken;\n\n        _rewardToken.safeApprove(address(_flywheel), type(uint256).max);\n    }\n\n    modifier onlyFlywheel() {\n        if (msg.sender != address(flywheel)) revert FlywheelError();\n        _;\n    }\n}\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/FlywheelDynamicRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport \"./BaseFlywheelRewards.sol\";\nimport {SafeCastLib} from \"solmate/utils/SafeCastLib.sol\";\n\n/** \n @title Flywheel Dynamic Reward Stream\n @notice Determines rewards based on a dynamic reward stream.\n         Rewards are transferred linearly over a \"rewards cycle\" to prevent gaming the reward distribution. \n         The reward source can be arbitrary logic, but most common is to \"pass through\" rewards from some other source.\n         The getNextCycleRewards() hook should also transfer the next cycle's rewards to this contract to ensure proper accounting.\n*/\nabstract contract FlywheelDynamicRewards is BaseFlywheelRewards {\n    using SafeTransferLib for ERC20;\n    using SafeCastLib for uint256;\n\n    event NewRewardsCycle(uint32 indexed start, uint32 indexed end, uint192 reward);\n\n    /// @notice the length of a rewards cycle\n    uint32 public immutable rewardsCycleLength;\n\n    struct RewardsCycle {\n        uint32 start;\n        uint32 end;\n        uint192 reward;\n    }\n\n    mapping(ERC20 => RewardsCycle) public rewardsCycle;\n\n    constructor(IonicFlywheelCore _flywheel, uint32 _rewardsCycleLength) BaseFlywheelRewards(_flywheel) {\n        rewardsCycleLength = _rewardsCycleLength;\n    }\n\n    /**\n     @notice calculate and transfer accrued rewards to flywheel core\n     @param strategy the strategy to accrue rewards for\n     @return amount the amount of tokens accrued and transferred\n     */\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp)\n        external\n        override\n        onlyFlywheel\n        returns (uint256 amount)\n    {\n        RewardsCycle memory cycle = rewardsCycle[strategy];\n\n        uint32 timestamp = block.timestamp.safeCastTo32();\n\n        uint32 latest = timestamp >= cycle.end ? cycle.end : timestamp;\n        uint32 earliest = lastUpdatedTimestamp <= cycle.start ? cycle.start : lastUpdatedTimestamp;\n        if (cycle.end != 0) {\n            amount = (cycle.reward * (latest - earliest)) / (cycle.end - cycle.start);\n            assert(amount <= cycle.reward); // should never happen because latest <= cycle.end and earliest >= cycle.start\n        }\n        // if cycle has ended, reset cycle and transfer all available\n        if (timestamp >= cycle.end) {\n            uint32 end = ((timestamp + rewardsCycleLength) / rewardsCycleLength) * rewardsCycleLength;\n            uint192 rewards = getNextCycleRewards(strategy);\n\n            // reset for next cycle\n            rewardsCycle[strategy] = RewardsCycle({start: timestamp, end: end, reward: rewards});\n\n            emit NewRewardsCycle(timestamp, end, rewards);\n        }\n    }\n\n    function getNextCycleRewards(ERC20 strategy) internal virtual returns (uint192);\n}\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/FlywheelStaticRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {Auth, Authority} from \"solmate/auth/Auth.sol\";\nimport \"./BaseFlywheelRewards.sol\";\n\n/** \n @title Flywheel Static Reward Stream\n @notice Determines rewards per strategy based on a fixed reward rate per second\n*/\ncontract FlywheelStaticRewards is Auth, BaseFlywheelRewards {\n    event RewardsInfoUpdate(ERC20 indexed strategy, uint224 rewardsPerSecond, uint32 rewardsEndTimestamp);\n\n    struct RewardsInfo {\n        /// @notice Rewards per second\n        uint224 rewardsPerSecond;\n        /// @notice The timestamp the rewards end at\n        /// @dev use 0 to specify no end\n        uint32 rewardsEndTimestamp;\n    }\n\n    /// @notice rewards info per strategy\n    mapping(ERC20 => RewardsInfo) public rewardsInfo;\n\n    constructor(\n        IonicFlywheelCore _flywheel,\n        address _owner,\n        Authority _authority\n    ) Auth(_owner, _authority) BaseFlywheelRewards(_flywheel) {}\n\n    /**\n     @notice set rewards per second and rewards end time for Fei Rewards\n     @param strategy the strategy to accrue rewards for\n     @param rewards the rewards info for the strategy\n     */\n    function setRewardsInfo(ERC20 strategy, RewardsInfo calldata rewards) external requiresAuth {\n        rewardsInfo[strategy] = rewards;\n        emit RewardsInfoUpdate(strategy, rewards.rewardsPerSecond, rewards.rewardsEndTimestamp);\n    }\n\n    /**\n     @notice calculate and transfer accrued rewards to flywheel core\n     @param strategy the strategy to accrue rewards for\n     @param lastUpdatedTimestamp the last updated time for strategy\n     @return amount the amount of tokens accrued and transferred\n     */\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp)\n        external\n        view\n        override\n        onlyFlywheel\n        returns (uint256 amount)\n    {\n        RewardsInfo memory rewards = rewardsInfo[strategy];\n\n        uint256 elapsed;\n        if (rewards.rewardsEndTimestamp == 0 || rewards.rewardsEndTimestamp > block.timestamp) {\n            elapsed = block.timestamp - lastUpdatedTimestamp;\n        } else if (rewards.rewardsEndTimestamp > lastUpdatedTimestamp) {\n            elapsed = rewards.rewardsEndTimestamp - lastUpdatedTimestamp;\n        }\n\n        amount = rewards.rewardsPerSecond * elapsed;\n    }\n}\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/IFlywheelRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {IonicFlywheelCore} from \"../IonicFlywheelCore.sol\";\n\n/**\n @title Rewards Module for Flywheel\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Rewards module is responsible for:\n         * determining the ongoing reward amounts to entire strategies (core handles the logic for dividing among users)\n         * actually holding rewards that are yet to be claimed\n\n         The reward stream can follow arbitrary logic as long as the amount of rewards passed to flywheel core has been sent to this contract.\n\n         Different module strategies include:\n         * a static reward rate per second\n         * a decaying reward rate\n         * a dynamic just-in-time reward stream\n         * liquid governance reward delegation (Curve Gauge style)\n\n         SECURITY NOTE: The rewards strategy should be smooth and continuous, to prevent gaming the reward distribution by frontrunning.\n */\ninterface IFlywheelRewards {\n    /**\n     @notice calculate the rewards amount accrued to a strategy since the last update.\n     @param strategy the strategy to accrue rewards for.\n     @param lastUpdatedTimestamp the last time rewards were accrued for the strategy.\n     @return rewards the amount of rewards accrued to the market\n    */\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp) external returns (uint256 rewards);\n\n    /// @notice return the flywheel core address\n    function flywheel() external view returns (IonicFlywheelCore);\n\n    /// @notice return the reward token associated with flywheel core.\n    function rewardToken() external view returns (ERC20);\n}\n"
    },
    "contracts/ionic/strategies/flywheel/rewards/ReplacingFlywheelDynamicRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport { FlywheelDynamicRewards } from \"./FlywheelDynamicRewards.sol\";\nimport { BaseFlywheelRewards } from \"./BaseFlywheelRewards.sol\";\nimport { IonicFlywheelCore } from \"../IonicFlywheelCore.sol\";\nimport { Auth, Authority } from \"solmate/auth/Auth.sol\";\nimport { SafeTransferLib, ERC20 } from \"solmate/utils/SafeTransferLib.sol\";\n\ninterface ICERC20_RFDR {\n  function plugin() external returns (address);\n}\n\ninterface IPlugin {\n  function claimRewards() external;\n}\n\ncontract ReplacingFlywheelDynamicRewards is FlywheelDynamicRewards {\n  using SafeTransferLib for ERC20;\n\n  IonicFlywheelCore public replacedFlywheel;\n\n  constructor(\n    IonicFlywheelCore _replacedFlywheel,\n    IonicFlywheelCore _flywheel,\n    uint32 _cycleLength\n  ) FlywheelDynamicRewards(_flywheel, _cycleLength) {\n    replacedFlywheel = _replacedFlywheel;\n    // rewardToken.safeApprove(address(_replacedFlywheel), type(uint256).max);\n  }\n\n  function getNextCycleRewards(ERC20 strategy) internal override returns (uint192) {\n    if (msg.sender == address(replacedFlywheel)) {\n      return 0;\n    } else {\n      // make it work for both pulled (claimed) and pushed (transferred some other way) rewards\n      try ICERC20_RFDR(address(strategy)).plugin() returns (address plugin) {\n        try IPlugin(plugin).claimRewards() {} catch {}\n      } catch {}\n\n      uint256 rewardAmount = rewardToken.balanceOf(address(strategy));\n      if (rewardAmount != 0) {\n        rewardToken.safeTransferFrom(address(strategy), address(this), rewardAmount);\n      }\n      return uint192(rewardAmount);\n    }\n  }\n}\n"
    },
    "contracts/IonicUniV3Liquidator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"./liquidators/IRedemptionStrategy.sol\";\nimport \"./liquidators/IFundsConversionStrategy.sol\";\nimport \"./ILiquidator.sol\";\n\nimport \"./external/uniswap/IUniswapV3FlashCallback.sol\";\nimport \"./external/uniswap/IUniswapV3Pool.sol\";\nimport { IUniswapV3Quoter } from \"./external/uniswap/quoter/interfaces/IUniswapV3Quoter.sol\";\n\nimport { ICErc20 } from \"./compound/CTokenInterfaces.sol\";\n\nimport \"./PoolLens.sol\";\nimport \"@pythnetwork/express-relay-sdk-solidity/IExpressRelay.sol\";\nimport \"@pythnetwork/express-relay-sdk-solidity/IExpressRelayFeeReceiver.sol\";\n\n/**\n * @title IonicUniV3Liquidator\n * @author Veliko Minkov <v.minkov@dcvx.io> (https://github.com/vminkov)\n * @notice IonicUniV3Liquidator liquidates unhealthy borrowers with flashloan support.\n */\ncontract IonicUniV3Liquidator is OwnableUpgradeable, ILiquidator, IUniswapV3FlashCallback, IExpressRelayFeeReceiver {\n  using AddressUpgradeable for address payable;\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  event VaultReceivedETH(address sender, uint256 amount, bytes permissionKey);\n  /**\n   * @dev Cached liquidator profit exchange source.\n   * ERC20 token address or the zero address for NATIVE.\n   * For use in `safeLiquidateToTokensWithFlashLoan` after it is set by `postFlashLoanTokens`.\n   */\n  address private _liquidatorProfitExchangeSource;\n\n  /**\n   * @dev Cached flash swap amount.\n   * For use in `repayTokenFlashLoan` after it is set by `safeLiquidateToTokensWithFlashLoan`.\n   */\n  uint256 private _flashSwapAmount;\n\n  /**\n   * @dev Cached flash swap token.\n   * For use in `repayTokenFlashLoan` after it is set by `safeLiquidateToTokensWithFlashLoan`.\n   */\n  address private _flashSwapToken;\n\n  address public W_NATIVE_ADDRESS;\n  mapping(address => bool) public redemptionStrategiesWhitelist;\n  IUniswapV3Quoter public quoter;\n\n  /**\n   * @dev Addres of Pyth Express Relay for preventing value leakage in liquidations.\n   */\n  IExpressRelay public expressRelay;\n  /**\n   * @dev Pool Lens.\n   */\n  PoolLens public lens;\n  /**\n   * @dev Health Factor below which PER permissioning is bypassed.\n   */\n  uint256 public healthFactorThreshold;\n\n  modifier onlyPERPermissioned(address borrower, ICErc20 cToken) {\n    uint256 currentHealthFactor = lens.getHealthFactor(borrower, cToken.comptroller());\n    if (currentHealthFactor > healthFactorThreshold) {\n      require(expressRelay.isPermissioned(address(this), abi.encode(borrower)), \"invalid liquidation\");\n    }\n    _;\n  }\n\n  function initialize(address _wtoken, address _quoter) external initializer {\n    __Ownable_init();\n    W_NATIVE_ADDRESS = _wtoken;\n    quoter = IUniswapV3Quoter(_quoter);\n  }\n\n  /**\n   * @notice Safely liquidate an unhealthy loan (using capital from the sender), confirming that at least `minOutputAmount` in collateral is seized (or outputted by exchange if applicable).\n   * @param borrower The borrower's Ethereum address.\n   * @param repayAmount The amount to repay to liquidate the unhealthy loan.\n   * @param cErc20 The borrowed cErc20 to repay.\n   * @param cTokenCollateral The cToken collateral to be liquidated.\n   * @param minOutputAmount The minimum amount of collateral to seize (or the minimum exchange output if applicable) required for execution. Reverts if this condition is not met.\n   */\n  function safeLiquidate(\n    address borrower,\n    uint256 repayAmount,\n    ICErc20 cErc20,\n    ICErc20 cTokenCollateral,\n    uint256 minOutputAmount\n  ) external onlyPERPermissioned(borrower, cTokenCollateral) returns (uint256) {\n    // Transfer tokens in, approve to cErc20, and liquidate borrow\n    require(repayAmount > 0, \"Repay amount (transaction value) must be greater than 0.\");\n    IERC20Upgradeable underlying = IERC20Upgradeable(cErc20.underlying());\n    underlying.safeTransferFrom(msg.sender, address(this), repayAmount);\n    underlying.approve(address(cErc20), repayAmount);\n    require(cErc20.liquidateBorrow(borrower, repayAmount, address(cTokenCollateral)) == 0, \"Liquidation failed.\");\n\n    // Redeem seized cTokens for underlying asset\n    uint256 seizedCTokenAmount = cTokenCollateral.balanceOf(address(this));\n    require(seizedCTokenAmount > 0, \"No cTokens seized.\");\n    uint256 redeemResult = cTokenCollateral.redeem(seizedCTokenAmount);\n    require(redeemResult == 0, \"Error calling redeeming seized cToken: error code not equal to 0\");\n\n    return transferSeizedFunds(address(cTokenCollateral.underlying()), minOutputAmount);\n  }\n\n  /**\n   * @dev Transfers seized funds to the sender.\n   * @param erc20Contract The address of the token to transfer.\n   * @param minOutputAmount The minimum amount to transfer.\n   */\n  function transferSeizedFunds(address erc20Contract, uint256 minOutputAmount) internal returns (uint256) {\n    IERC20Upgradeable token = IERC20Upgradeable(erc20Contract);\n    uint256 seizedOutputAmount = token.balanceOf(address(this));\n    require(seizedOutputAmount >= minOutputAmount, \"Minimum token output amount not satified.\");\n    if (seizedOutputAmount > 0) token.safeTransfer(msg.sender, seizedOutputAmount);\n\n    return seizedOutputAmount;\n  }\n\n  function safeLiquidateToTokensWithFlashLoan(LiquidateToTokensWithFlashSwapVars calldata vars)\n    external\n    onlyPERPermissioned(vars.borrower, vars.cTokenCollateral)\n    returns (uint256)\n  {\n    // Input validation\n    require(vars.repayAmount > 0, \"Repay amount must be greater than 0.\");\n\n    // we want to calculate the needed flashSwapAmount on-chain to\n    // avoid errors due to changing market conditions\n    // between the time of calculating and including the tx in a block\n    uint256 fundingAmount = vars.repayAmount;\n    IERC20Upgradeable fundingToken;\n    if (vars.debtFundingStrategies.length > 0) {\n      require(\n        vars.debtFundingStrategies.length == vars.debtFundingStrategiesData.length,\n        \"Funding IFundsConversionStrategy contract array and strategy data bytes array must be the same length.\"\n      );\n      // estimate the initial (flash-swapped token) input from the expected output (debt token)\n      for (uint256 i = 0; i < vars.debtFundingStrategies.length; i++) {\n        bytes memory strategyData = vars.debtFundingStrategiesData[i];\n        IFundsConversionStrategy fcs = vars.debtFundingStrategies[i];\n        (fundingToken, fundingAmount) = fcs.estimateInputAmount(fundingAmount, strategyData);\n      }\n    } else {\n      fundingToken = IERC20Upgradeable(ICErc20(address(vars.cErc20)).underlying());\n    }\n\n    // the last outputs from estimateInputAmount are the ones to be flash-swapped\n    _flashSwapAmount = fundingAmount;\n    _flashSwapToken = address(fundingToken);\n\n    IUniswapV3Pool flashSwapPool = IUniswapV3Pool(vars.flashSwapContract);\n    bool token0IsFlashSwapFundingToken = flashSwapPool.token0() == address(fundingToken);\n    flashSwapPool.flash(\n      address(this),\n      token0IsFlashSwapFundingToken ? fundingAmount : 0,\n      !token0IsFlashSwapFundingToken ? fundingAmount : 0,\n      msg.data\n    );\n\n    return transferSeizedFunds(_liquidatorProfitExchangeSource, vars.minProfitAmount);\n  }\n\n  /**\n   * @dev Receives NATIVE from liquidations and flashloans.\n   * Requires that `msg.sender` is W_NATIVE, a CToken, or a Uniswap V2 Router, or another contract.\n   */\n  receive() external payable {\n    require(payable(msg.sender).isContract(), \"Sender is not a contract.\");\n  }\n\n  /**\n   * @notice receiveAuctionProceedings function - receives native token from the express relay\n   * You can use permission key to distribute the received funds to users who got liquidated, LPs, etc...\n   */\n  function receiveAuctionProceedings(bytes calldata permissionKey) external payable {\n    emit VaultReceivedETH(msg.sender, msg.value, permissionKey);\n  }\n\n  function withdrawAll() external onlyOwner {\n    uint256 balance = address(this).balance;\n    require(balance > 0, \"No Ether left to withdraw\");\n\n    // Transfer all Ether to the owner\n    (bool sent, ) = msg.sender.call{ value: balance }(\"\");\n    require(sent, \"Failed to send Ether\");\n  }\n\n  /**\n   * @dev Callback function for Uniswap flashloans.\n   */\n\n  function supV3FlashCallback(\n    uint256 fee0,\n    uint256 fee1,\n    bytes calldata data\n  ) external {\n    uniswapV3FlashCallback(fee0, fee1, data);\n  }\n\n  function algebraFlashCallback(\n    uint256 fee0,\n    uint256 fee1,\n    bytes calldata data\n  ) external {\n    uniswapV3FlashCallback(fee0, fee1, data);\n  }\n\n  function uniswapV3FlashCallback(\n    uint256 fee0,\n    uint256 fee1,\n    bytes calldata data\n  ) public {\n    // Liquidate unhealthy borrow, exchange seized collateral, return flashloaned funds, and exchange profit\n    // Decode params\n    LiquidateToTokensWithFlashSwapVars memory vars = abi.decode(data[4:], (LiquidateToTokensWithFlashSwapVars));\n\n    // Post token flashloan\n    // Cache liquidation profit token (or the zero address for NATIVE) for use as source for exchange later\n    _liquidatorProfitExchangeSource = postFlashLoanTokens(vars, fee0, fee1);\n  }\n\n  /**\n   * @dev Liquidate unhealthy token borrow, exchange seized collateral, return flashloaned funds, and exchange profit.\n   */\n  function postFlashLoanTokens(\n    LiquidateToTokensWithFlashSwapVars memory vars,\n    uint256 fee0,\n    uint256 fee1\n  ) private returns (address) {\n    IERC20Upgradeable debtRepaymentToken = IERC20Upgradeable(_flashSwapToken);\n    uint256 debtRepaymentAmount = _flashSwapAmount;\n\n    if (vars.debtFundingStrategies.length > 0) {\n      // loop backwards to convert the initial (flash-swapped token) input to the final expected output (debt token)\n      for (uint256 i = vars.debtFundingStrategies.length; i > 0; i--) {\n        (debtRepaymentToken, debtRepaymentAmount) = convertCustomFunds(\n          debtRepaymentToken,\n          debtRepaymentAmount,\n          vars.debtFundingStrategies[i - 1],\n          vars.debtFundingStrategiesData[i - 1]\n        );\n      }\n    }\n\n    // Approve the debt repayment transfer, liquidate and redeem the seized collateral\n    {\n      address underlyingBorrow = vars.cErc20.underlying();\n      require(\n        address(debtRepaymentToken) == underlyingBorrow,\n        \"the debt repayment funds should be converted to the underlying debt token\"\n      );\n      require(debtRepaymentAmount >= vars.repayAmount, \"debt repayment amount not enough\");\n      // Approve repayAmount to cErc20\n      IERC20Upgradeable(underlyingBorrow).approve(address(vars.cErc20), vars.repayAmount);\n\n      // Liquidate borrow\n      require(\n        vars.cErc20.liquidateBorrow(vars.borrower, vars.repayAmount, address(vars.cTokenCollateral)) == 0,\n        \"Liquidation failed.\"\n      );\n\n      // Redeem seized cTokens for underlying asset\n      uint256 seizedCTokenAmount = vars.cTokenCollateral.balanceOf(address(this));\n      require(seizedCTokenAmount > 0, \"No cTokens seized.\");\n      uint256 redeemResult = vars.cTokenCollateral.redeem(seizedCTokenAmount);\n      require(redeemResult == 0, \"Error calling redeeming seized cToken: error code not equal to 0\");\n    }\n\n    // Repay flashloan\n    return repayTokenFlashLoan(vars.cTokenCollateral, vars.redemptionStrategies, vars.strategyData, fee0, fee1);\n  }\n\n  /**\n   * @dev Repays token flashloans.\n   */\n  function repayTokenFlashLoan(\n    ICErc20 cTokenCollateral,\n    IRedemptionStrategy[] memory redemptionStrategies,\n    bytes[] memory strategyData,\n    uint256 fee0,\n    uint256 fee1\n  ) private returns (address) {\n    IUniswapV3Pool pool = IUniswapV3Pool(msg.sender);\n    uint256 flashSwapReturnAmount = _flashSwapAmount;\n    if (IUniswapV3Pool(msg.sender).token0() == _flashSwapToken) {\n      flashSwapReturnAmount += fee0;\n    } else if (IUniswapV3Pool(msg.sender).token1() == _flashSwapToken) {\n      flashSwapReturnAmount += fee1;\n    } else {\n      revert(\"wrong pool or _flashSwapToken\");\n    }\n\n    // Swap cTokenCollateral for cErc20 via Uniswap\n    // Check underlying collateral seized\n    IERC20Upgradeable underlyingCollateral = IERC20Upgradeable(ICErc20(address(cTokenCollateral)).underlying());\n    uint256 underlyingCollateralSeized = underlyingCollateral.balanceOf(address(this));\n\n    // Redeem custom collateral if liquidation strategy is set\n    if (redemptionStrategies.length > 0) {\n      require(\n        redemptionStrategies.length == strategyData.length,\n        \"IRedemptionStrategy contract array and strategy data bytes array mnust the the same length.\"\n      );\n      for (uint256 i = 0; i < redemptionStrategies.length; i++)\n        (underlyingCollateral, underlyingCollateralSeized) = redeemCustomCollateral(\n          underlyingCollateral,\n          underlyingCollateralSeized,\n          redemptionStrategies[i],\n          strategyData[i]\n        );\n    }\n\n    // Check if we can repay directly one of the sides with collateral\n    if (address(underlyingCollateral) == pool.token0() || address(underlyingCollateral) == pool.token1()) {\n      // Repay flashloan directly with collateral\n      uint256 collateralRequired;\n      if (address(underlyingCollateral) == _flashSwapToken) {\n        // repay the borrowed asset directly\n        collateralRequired = flashSwapReturnAmount;\n\n        // Repay flashloan\n        IERC20Upgradeable(_flashSwapToken).transfer(address(pool), flashSwapReturnAmount);\n      } else {\n        // TODO swap within the same pool and then repay the FL to the pool\n        bool zeroForOne = address(underlyingCollateral) == pool.token0();\n\n        {\n          collateralRequired = quoter.quoteExactOutputSingle(\n            zeroForOne ? pool.token0() : pool.token1(),\n            zeroForOne ? pool.token1() : pool.token0(),\n            pool.fee(),\n            _flashSwapAmount,\n            0 // sqrtPriceLimitX96\n          );\n        }\n        require(\n          collateralRequired <= underlyingCollateralSeized,\n          \"Token flashloan return amount greater than seized collateral.\"\n        );\n\n        // Repay flashloan\n        pool.swap(\n          address(pool),\n          zeroForOne,\n          int256(collateralRequired),\n          0, // sqrtPriceLimitX96\n          \"\"\n        );\n      }\n\n      return address(underlyingCollateral);\n    } else {\n      revert(\"the redemptions strategy did not swap to the flash swapped pool assets\");\n    }\n  }\n\n  /**\n   * @dev for security reasons only whitelisted redemption strategies may be used.\n   * Each whitelisted redemption strategy has to be checked to not be able to\n   * call `selfdestruct` with the `delegatecall` call in `redeemCustomCollateral`\n   */\n  function _whitelistRedemptionStrategy(IRedemptionStrategy strategy, bool whitelisted) external onlyOwner {\n    redemptionStrategiesWhitelist[address(strategy)] = whitelisted;\n  }\n\n  /**\n   * @dev for security reasons only whitelisted redemption strategies may be used.\n   * Each whitelisted redemption strategy has to be checked to not be able to\n   * call `selfdestruct` with the `delegatecall` call in `redeemCustomCollateral`\n   */\n  function _whitelistRedemptionStrategies(IRedemptionStrategy[] calldata strategies, bool[] calldata whitelisted)\n    external\n    onlyOwner\n  {\n    require(\n      strategies.length > 0 && strategies.length == whitelisted.length,\n      \"list of strategies empty or whitelist does not match its length\"\n    );\n\n    for (uint256 i = 0; i < strategies.length; i++) {\n      redemptionStrategiesWhitelist[address(strategies[i])] = whitelisted[i];\n    }\n  }\n\n  function setExpressRelay(address _expressRelay) external onlyOwner {\n    expressRelay = IExpressRelay(_expressRelay);\n  }\n\n  function setPoolLens(address _poolLens) external onlyOwner {\n    lens = PoolLens(_poolLens);\n  }\n\n  function setHealthFactorThreshold(uint256 _healthFactorThreshold) external onlyOwner {\n    require(_healthFactorThreshold <= 1e18, \"Invalid Health Factor Threshold\");\n    healthFactorThreshold = _healthFactorThreshold;\n  }\n\n  /**\n   * @dev Redeem \"special\" collateral tokens (before swapping the output for borrowed tokens to be repaid via Uniswap).\n   * Public visibility because we have to call this function externally if called from a payable IonicLiquidator function (for some reason delegatecall fails when called with msg.value > 0).\n   */\n  function redeemCustomCollateral(\n    IERC20Upgradeable underlyingCollateral,\n    uint256 underlyingCollateralSeized,\n    IRedemptionStrategy strategy,\n    bytes memory strategyData\n  ) private returns (IERC20Upgradeable, uint256) {\n    require(redemptionStrategiesWhitelist[address(strategy)], \"only whitelisted redemption strategies can be used\");\n\n    bytes memory returndata = _functionDelegateCall(\n      address(strategy),\n      abi.encodeWithSelector(strategy.redeem.selector, underlyingCollateral, underlyingCollateralSeized, strategyData)\n    );\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\n  }\n\n  function convertCustomFunds(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    IFundsConversionStrategy strategy,\n    bytes memory strategyData\n  ) private returns (IERC20Upgradeable, uint256) {\n    require(redemptionStrategiesWhitelist[address(strategy)], \"only whitelisted redemption strategies can be used\");\n\n    bytes memory returndata = _functionDelegateCall(\n      address(strategy),\n      abi.encodeWithSelector(strategy.convert.selector, inputToken, inputAmount, strategyData)\n    );\n    return abi.decode(returndata, (IERC20Upgradeable, uint256));\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], but performing a delegate call.\n   * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/contracts/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L37\n   */\n  function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n    require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return _verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n  }\n\n  /**\n   * @dev Used by `_functionDelegateCall` to verify the result of a delegate call.\n   * Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/contracts/blob/cb4774ace1cb84f2662fa47c573780aab937628b/contracts/utils/MulticallUpgradeable.sol#L45\n   */\n  function _verifyCallResult(\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) private pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n  }\n}\n"
    },
    "contracts/liquidators/IFundsConversionStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"./IRedemptionStrategy.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IFundsConversionStrategy is IRedemptionStrategy {\n  function convert(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    bytes memory strategyData\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\n\n  function estimateInputAmount(uint256 outputAmount, bytes memory strategyData)\n    external\n    view\n    returns (IERC20Upgradeable inputToken, uint256 inputAmount);\n}\n"
    },
    "contracts/liquidators/IRedemptionStrategy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\n/**\n * @title IRedemptionStrategy\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n */\ninterface IRedemptionStrategy {\n  /**\n   * @notice Redeems custom collateral `token` for an underlying token.\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\n   * @return outputToken The underlying ERC20 token outputted.\n   * @return outputAmount The quantity of underlying tokens outputted.\n   */\n  function redeem(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    bytes memory strategyData\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\n\n  function name() external view returns (string memory);\n}\n"
    },
    "contracts/liquidators/registry/ILiquidatorsRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { IRedemptionStrategy } from \"../../liquidators/IRedemptionStrategy.sol\";\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ILiquidatorsRegistryStorage {\n  function redemptionStrategiesByName(string memory name) external view returns (IRedemptionStrategy);\n\n  function redemptionStrategiesByTokens(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (IRedemptionStrategy);\n\n  function defaultOutputToken(IERC20Upgradeable inputToken) external view returns (IERC20Upgradeable);\n\n  function owner() external view returns (address);\n\n  function uniswapV3Fees(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external view returns (uint24);\n\n  function customUniV3Router(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (address);\n}\n\ninterface ILiquidatorsRegistryExtension {\n  function getInputTokensByOutputToken(IERC20Upgradeable outputToken) external view returns (address[] memory);\n\n  function getRedemptionStrategies(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (IRedemptionStrategy[] memory strategies, bytes[] memory strategiesData);\n\n  function getRedemptionStrategy(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (IRedemptionStrategy strategy, bytes memory strategyData);\n\n  function getAllRedemptionStrategies() external view returns (address[] memory);\n\n  function getSlippage(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\n    external\n    view\n    returns (uint256 slippage);\n\n  function swap(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    IERC20Upgradeable outputToken\n  ) external returns (uint256);\n\n  function amountOutAndSlippageOfSwap(\n    IERC20Upgradeable inputToken,\n    uint256 inputAmount,\n    IERC20Upgradeable outputToken\n  ) external returns (uint256 outputAmount, uint256 slippage);\n}\n\ninterface ILiquidatorsRegistrySecondExtension {\n  function getAllPairsStrategies()\n    external\n    view\n    returns (\n      IRedemptionStrategy[] memory strategies,\n      IERC20Upgradeable[] memory inputTokens,\n      IERC20Upgradeable[] memory outputTokens\n    );\n\n  function pairsStrategiesMatch(\n    IRedemptionStrategy[] calldata configStrategies,\n    IERC20Upgradeable[] calldata configInputTokens,\n    IERC20Upgradeable[] calldata configOutputTokens\n  ) external view returns (bool);\n\n  function uniswapPairsFeesMatch(\n    IERC20Upgradeable[] calldata configInputTokens,\n    IERC20Upgradeable[] calldata configOutputTokens,\n    uint256[] calldata configFees\n  ) external view returns (bool);\n\n  function uniswapPairsRoutersMatch(\n    IERC20Upgradeable[] calldata configInputTokens,\n    IERC20Upgradeable[] calldata configOutputTokens,\n    address[] calldata configRouters\n  ) external view returns (bool);\n\n  function _setRedemptionStrategy(\n    IRedemptionStrategy strategy,\n    IERC20Upgradeable inputToken,\n    IERC20Upgradeable outputToken\n  ) external;\n\n  function _setRedemptionStrategies(\n    IRedemptionStrategy[] calldata strategies,\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens\n  ) external;\n\n  function _resetRedemptionStrategies(\n    IRedemptionStrategy[] calldata strategies,\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens\n  ) external;\n\n  function _removeRedemptionStrategy(IRedemptionStrategy strategyToRemove) external;\n\n  function _setDefaultOutputToken(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external;\n\n  function _setUniswapV3Fees(\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens,\n    uint24[] calldata fees\n  ) external;\n\n  function _setUniswapV3Routers(\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens,\n    address[] calldata routers\n  ) external;\n\n  function _setSlippages(\n    IERC20Upgradeable[] calldata inputTokens,\n    IERC20Upgradeable[] calldata outputTokens,\n    uint256[] calldata slippages\n  ) external;\n}\n\ninterface ILiquidatorsRegistry is\n  ILiquidatorsRegistryExtension,\n  ILiquidatorsRegistrySecondExtension,\n  ILiquidatorsRegistryStorage\n{}\n"
    },
    "contracts/oracles/1337/MockPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"../../external/chainlink/AggregatorV3Interface.sol\";\n\nimport \"../BasePriceOracle.sol\";\n\n/**\n * @title MockPriceOracle\n * @notice Returns mocked prices from a Chainlink-like oracle. Used for local dev only\n * @dev Implements `PriceOracle`.\n * @author Carlo Mazzaferro <carlo.mazzaferro@gmail.com> (https://github.com/carlomazzaferro)\n */\ncontract MockPriceOracle is BasePriceOracle {\n  /**\n   * @notice The maximum number of seconds elapsed since the round was last updated before the price is considered stale. If set to 0, no limit is enforced.\n   */\n  uint256 public maxSecondsBeforePriceIsStale;\n\n  /**\n   * @dev Constructor to set `maxSecondsBeforePriceIsStale` as well as all Chainlink price feeds.\n   */\n  constructor(uint256 _maxSecondsBeforePriceIsStale) {\n    // Set maxSecondsBeforePriceIsStale\n    maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\n  }\n\n  /**\n   * @dev Returns a boolean indicating if a price feed exists for the underlying asset.\n   */\n\n  function hasPriceFeed(address underlying) external pure returns (bool) {\n    return true;\n  }\n\n  /**\n   * @dev Internal function returning the price in ETH of `underlying`.\n   */\n\n  function random() private view returns (uint256) {\n    uint256 r = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % 99;\n    r = r + 1;\n    return r;\n  }\n\n  function _price(address underlying) internal view returns (uint256) {\n    // Return 1e18 for WETH\n    if (underlying == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) return 1e18;\n\n    int256 tokenEthPrice = 1;\n    uint256 r = random();\n\n    return ((uint256(tokenEthPrice) * 1e18) / r) / 1e18;\n  }\n\n  /**\n   * @dev Returns the price in ETH of `underlying` (implements `BasePriceOracle`).\n   */\n  function price(address underlying) external view override returns (uint256) {\n    return _price(underlying);\n  }\n\n  /**\n   * @notice Returns the price in ETH of the token underlying `cToken`.\n   * @dev Implements the `PriceOracle` interface for Ionic pools (and Compound v2).\n   * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\n   */\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\n    return 1e18;\n  }\n}\n"
    },
    "contracts/oracles/BasePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"../compound/CTokenInterfaces.sol\";\n\n/**\n * @title BasePriceOracle\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\n * @dev Implements the `PriceOracle` interface.\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n */\ninterface BasePriceOracle {\n  /**\n   * @notice Get the price of an underlying asset.\n   * @param underlying The underlying asset to get the price of.\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\n   * Zero means the price is unavailable.\n   */\n  function price(address underlying) external view returns (uint256);\n\n  /**\n   * @notice Get the underlying price of a cToken asset\n   * @param cToken The cToken to get the underlying price of\n   * @return The underlying asset price mantissa (scaled by 1e18).\n   *  Zero means the price is unavailable.\n   */\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\n}\n"
    },
    "contracts/oracles/default/RedstoneAdapterPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"../../external/redstone/IRedstoneOracle.sol\";\nimport \"../BasePriceOracle.sol\";\n\n/**\n * @title RedstoneAdapterPriceOracle\n * @notice Returns prices from Redstone.\n * @dev Implements `BasePriceOracle`.\n * @author Veliko Minkov <v.minkov@dcvx.io> (https://github.com/vminkov)\n */\ncontract RedstoneAdapterPriceOracle is BasePriceOracle {\n  /**\n   * @notice The Redstone oracle contract\n   */\n  IRedstoneOracle public REDSTONE_ORACLE;\n\n  /**\n   * @dev Constructor to set admin, wtoken address and native token USD price feed address\n   * @param redstoneOracle The Redstone oracle contract address\n   */\n  constructor(address redstoneOracle) {\n    REDSTONE_ORACLE = IRedstoneOracle(redstoneOracle);\n  }\n\n  /**\n   * @notice Internal function returning the price in of `underlying`.\n   * @dev will return a price denominated in the native token\n   */\n  function _price(address underlying) internal view returns (uint256) {\n    uint256 priceInUsd = REDSTONE_ORACLE.priceOf(underlying);\n    uint256 priceOfNativeInUsd = REDSTONE_ORACLE.priceOfETH();\n    return (priceInUsd * 1e18) / priceOfNativeInUsd;\n  }\n\n  /**\n   * @notice Returns the price in of `underlying` either in the\n   * native token (implements `BasePriceOracle`).\n   */\n  function price(address underlying) external view override returns (uint256) {\n    return _price(underlying);\n  }\n\n  /**\n   * @notice Returns the price in WNATIVE of the token underlying `cToken`.\n   * @dev Implements the `BasePriceOracle` interface for Ionic pools (and Compound v2).\n   * @return Price in WNATIVE of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\n   */\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\n    // Get underlying token address\n    address underlying = cToken.underlying();\n\n    uint256 oraclePrice = _price(underlying);\n\n    uint256 underlyingDecimals = uint256(ERC20Upgradeable(underlying).decimals());\n    return\n      underlyingDecimals <= 18\n        ? uint256(oraclePrice) * (10**(18 - underlyingDecimals))\n        : uint256(oraclePrice) / (10**(underlyingDecimals - 18));\n  }\n}\n"
    },
    "contracts/oracles/default/RedstoneAdapterPriceOracleWeETH.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"../../external/redstone/IRedstoneOracle.sol\";\nimport \"../BasePriceOracle.sol\";\n\n/**\n * @title RedstoneAdapterPriceOracle\n * @notice Returns prices from Redstone.\n * @dev Implements `BasePriceOracle`.\n * @author Veliko Minkov <v.minkov@dcvx.io> (https://github.com/vminkov)\n */\ncontract RedstoneAdapterPriceOracleWeETH is BasePriceOracle {\n  /**\n   * @notice The Redstone oracle contract\n   */\n  IRedstoneOracle public REDSTONE_ORACLE;\n\n  /**\n   * @dev Constructor to set admin, wtoken address and native token USD price feed address\n   * @param redstoneOracle The Redstone oracle contract address\n   */\n  constructor(address redstoneOracle) {\n    REDSTONE_ORACLE = IRedstoneOracle(redstoneOracle);\n  }\n\n  /**\n   * @notice Internal function returning the price in of `underlying`.\n   * @dev will return a price denominated in the native token\n   */\n  function _price(address underlying) internal view returns (uint256) {\n    // special case for wrsETH\n    // if input is wrsETH, we need to get the price of rsETH\n    if (underlying == 0x04C0599Ae5A44757c0af6F9eC3b93da8976c150A) {\n      underlying = 0x028227c4dd1e5419d11Bb6fa6e661920c519D4F5;\n    }\n    uint256 priceInUsd = REDSTONE_ORACLE.priceOf(underlying);\n    uint256 priceOfNativeInUsd = REDSTONE_ORACLE.priceOfETH();\n    return (priceInUsd * 1e18) / priceOfNativeInUsd;\n  }\n\n  /**\n   * @notice Returns the price in of `underlying` either in the\n   * native token (implements `BasePriceOracle`).\n   */\n  function price(address underlying) external view override returns (uint256) {\n    return _price(underlying);\n  }\n\n  /**\n   * @notice Returns the price in WNATIVE of the token underlying `cToken`.\n   * @dev Implements the `BasePriceOracle` interface for Ionic pools (and Compound v2).\n   * @return Price in WNATIVE of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\n   */\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\n    // Get underlying token address\n    address underlying = cToken.underlying();\n\n    uint256 oraclePrice = _price(underlying);\n\n    uint256 underlyingDecimals = uint256(ERC20Upgradeable(underlying).decimals());\n    return\n      underlyingDecimals <= 18\n        ? uint256(oraclePrice) * (10**(18 - underlyingDecimals))\n        : uint256(oraclePrice) / (10**(underlyingDecimals - 18));\n  }\n}\n"
    },
    "contracts/oracles/default/RedstoneAdapterPriceOracleWrsETH.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\nimport \"../../external/redstone/IRedstoneOracle.sol\";\nimport \"../BasePriceOracle.sol\";\n\n/**\n * @title RedstoneAdapterPriceOracle\n * @notice Returns prices from Redstone.\n * @dev Implements `BasePriceOracle`.\n * @author Veliko Minkov <v.minkov@dcvx.io> (https://github.com/vminkov)\n */\ncontract RedstoneAdapterPriceOracleWrsETH is BasePriceOracle {\n  /**\n   * @notice The Redstone oracle contract\n   */\n  IRedstoneOracle public REDSTONE_ORACLE;\n\n  /**\n   * @dev Constructor to set admin, wtoken address and native token USD price feed address\n   * @param redstoneOracle The Redstone oracle contract address\n   */\n  constructor(address redstoneOracle) {\n    REDSTONE_ORACLE = IRedstoneOracle(redstoneOracle);\n  }\n\n  /**\n   * @notice Internal function returning the price in of `underlying`.\n   * @dev will return a price denominated in the native token\n   */\n  function _price(address underlying) internal view returns (uint256) {\n    // special case for wrsETH\n    // if input is wrsETH, we need to get the price of rsETH\n    if (underlying == 0xe7903B1F75C534Dd8159b313d92cDCfbC62cB3Cd) {\n      underlying = 0x4186BFC76E2E237523CBC30FD220FE055156b41F;\n    }\n    uint256 priceInUsd = REDSTONE_ORACLE.priceOf(underlying);\n    uint256 priceOfNativeInUsd = REDSTONE_ORACLE.priceOfETH();\n    return (priceInUsd * 1e18) / priceOfNativeInUsd;\n  }\n\n  /**\n   * @notice Returns the price in of `underlying` either in the\n   * native token (implements `BasePriceOracle`).\n   */\n  function price(address underlying) external view override returns (uint256) {\n    return _price(underlying);\n  }\n\n  /**\n   * @notice Returns the price in WNATIVE of the token underlying `cToken`.\n   * @dev Implements the `BasePriceOracle` interface for Ionic pools (and Compound v2).\n   * @return Price in WNATIVE of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\n   */\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\n    // Get underlying token address\n    address underlying = cToken.underlying();\n\n    uint256 oraclePrice = _price(underlying);\n\n    uint256 underlyingDecimals = uint256(ERC20Upgradeable(underlying).decimals());\n    return\n      underlyingDecimals <= 18\n        ? uint256(oraclePrice) * (10**(18 - underlyingDecimals))\n        : uint256(oraclePrice) / (10**(underlyingDecimals - 18));\n  }\n}\n"
    },
    "contracts/oracles/MasterPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\n\nimport { ICErc20 } from \"../compound/CTokenInterfaces.sol\";\n\nimport { BasePriceOracle } from \"./BasePriceOracle.sol\";\n\n/**\n * @title MasterPriceOracle\n * @notice Use a combination of price oracles.\n * @dev Implements `PriceOracle`.\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n */\ncontract MasterPriceOracle is Initializable, BasePriceOracle {\n  /**\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\n   */\n  mapping(address => BasePriceOracle) public oracles;\n\n  /**\n   * @dev Default/fallback `PriceOracle`.\n   */\n  BasePriceOracle public defaultOracle;\n\n  /**\n   * @dev The administrator of this `MasterPriceOracle`.\n   */\n  address public admin;\n\n  /**\n   * @dev Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\n   */\n  bool internal noAdminOverwrite;\n\n  /**\n   * @dev The Wrapped native asset address.\n   */\n  address public wtoken;\n\n  /**\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\n   */\n  mapping(address => BasePriceOracle) public fallbackOracles;\n\n  /**\n   * @dev Returns a boolean indicating if `admin` can overwrite existing assignments of oracles to underlying tokens.\n   */\n  function canAdminOverwrite() external view returns (bool) {\n    return !noAdminOverwrite;\n  }\n\n  /**\n   * @dev Event emitted when `admin` is changed.\n   */\n  event NewAdmin(address oldAdmin, address newAdmin);\n\n  /**\n   * @dev Event emitted when the default oracle is changed.\n   */\n  event NewDefaultOracle(address oldOracle, address newOracle);\n\n  /**\n   * @dev Event emitted when an underlying token's oracle is changed.\n   */\n  event NewOracle(address underlying, address oldOracle, address newOracle);\n\n  /**\n   * @dev  Initialize state variables.\n   * @param underlyings The underlying ERC20 token addresses to link to `_oracles`.\n   * @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`.\n   * @param _defaultOracle The default `PriceOracle` contract to use.\n   * @param _admin The admin who can assign oracles to underlying tokens.\n   * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\n   * @param _wtoken The Wrapped native asset address\n   */\n  function initialize(\n    address[] memory underlyings,\n    BasePriceOracle[] memory _oracles,\n    BasePriceOracle _defaultOracle,\n    address _admin,\n    bool _canAdminOverwrite,\n    address _wtoken\n  ) external initializer {\n    // Input validation\n    require(underlyings.length == _oracles.length, \"Lengths of both arrays must be equal.\");\n\n    // Initialize state variables\n    for (uint256 i = 0; i < underlyings.length; i++) {\n      address underlying = underlyings[i];\n      BasePriceOracle newOracle = _oracles[i];\n      oracles[underlying] = newOracle;\n      emit NewOracle(underlying, address(0), address(newOracle));\n    }\n\n    defaultOracle = _defaultOracle;\n    admin = _admin;\n    noAdminOverwrite = !_canAdminOverwrite;\n    wtoken = _wtoken;\n  }\n\n  /**\n   * @dev Sets `_oracles` for `underlyings`.\n   */\n  function add(address[] calldata underlyings, BasePriceOracle[] calldata _oracles) external onlyAdmin {\n    // Input validation\n    require(\n      underlyings.length > 0 && underlyings.length == _oracles.length,\n      \"Lengths of both arrays must be equal and greater than 0.\"\n    );\n\n    // Assign oracles to underlying tokens\n    for (uint256 i = 0; i < underlyings.length; i++) {\n      address underlying = underlyings[i];\n      address oldOracle = address(oracles[underlying]);\n      if (noAdminOverwrite)\n        require(\n          oldOracle == address(0),\n          \"Admin cannot overwrite existing assignments of oracles to underlying tokens.\"\n        );\n      BasePriceOracle newOracle = _oracles[i];\n      oracles[underlying] = newOracle;\n      emit NewOracle(underlying, oldOracle, address(newOracle));\n    }\n  }\n\n  /**\n   * @dev Sets `_oracles` for `underlyings`.\n   */\n  function addFallbacks(address[] calldata underlyings, BasePriceOracle[] calldata _oracles) external onlyAdmin {\n    // Input validation\n    require(\n      underlyings.length > 0 && underlyings.length == _oracles.length,\n      \"Lengths of both arrays must be equal and greater than 0.\"\n    );\n\n    // Assign oracles to underlying tokens\n    for (uint256 i = 0; i < underlyings.length; i++) {\n      address underlying = underlyings[i];\n      address oldOracle = address(fallbackOracles[underlying]);\n      if (noAdminOverwrite)\n        require(\n          oldOracle == address(0),\n          \"Admin cannot overwrite existing assignments of oracles to underlying tokens.\"\n        );\n      BasePriceOracle newOracle = _oracles[i];\n      fallbackOracles[underlying] = newOracle;\n      emit NewOracle(underlying, oldOracle, address(newOracle));\n    }\n  }\n\n  /**\n   * @dev Changes the default price oracle\n   */\n  function setDefaultOracle(BasePriceOracle newOracle) external onlyAdmin {\n    BasePriceOracle oldOracle = defaultOracle;\n    defaultOracle = newOracle;\n    emit NewDefaultOracle(address(oldOracle), address(newOracle));\n  }\n\n  /**\n   * @dev Changes the admin and emits an event.\n   */\n  function changeAdmin(address newAdmin) external onlyAdmin {\n    address oldAdmin = admin;\n    admin = newAdmin;\n    emit NewAdmin(oldAdmin, newAdmin);\n  }\n\n  /**\n   * @dev Modifier that checks if `msg.sender == admin`.\n   */\n  modifier onlyAdmin() {\n    require(msg.sender == admin, \"Sender is not the admin.\");\n    _;\n  }\n\n  /**\n   * @notice Returns the price in ETH of the token underlying `cToken`.\n   * @dev Implements the `PriceOracle` interface for Ionic pools (and Compound v2).\n   * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\n   */\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\n    // Get underlying ERC20 token address\n    address underlying = address(ICErc20(address(cToken)).underlying());\n\n    if (underlying == wtoken) return 1e18;\n\n    BasePriceOracle oracle = oracles[underlying];\n    BasePriceOracle fallbackOracle = fallbackOracles[underlying];\n\n    if (address(oracle) != address(0)) {\n      try oracle.getUnderlyingPrice(cToken) returns (uint256 underlyingPrice) {\n        if (underlyingPrice == 0) {\n          if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\n        } else {\n          return underlyingPrice;\n        }\n      } catch {\n        if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\n      }\n    } else {\n      if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\n    }\n    revert(\"Price oracle not found for this underlying token address.\");\n  }\n\n  /**\n   * @dev Attempts to return the price in ETH of `underlying` (implements `BasePriceOracle`).\n   */\n  function price(address underlying) public view override returns (uint256) {\n    // Return 1e18 for WETH\n    if (underlying == wtoken) return 1e18;\n\n    // Get underlying price from assigned oracle\n    BasePriceOracle oracle = oracles[underlying];\n    BasePriceOracle fallbackOracle = fallbackOracles[underlying];\n\n    if (address(oracle) != address(0)) {\n      try oracle.price(underlying) returns (uint256 underlyingPrice) {\n        if (underlyingPrice == 0) {\n          if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\n        } else {\n          return underlyingPrice;\n        }\n      } catch {\n        if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\n      }\n    } else {\n      if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\n    }\n    revert(\"Price oracle not found for this underlying token address.\");\n  }\n}\n"
    },
    "contracts/PoolDirectory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol\";\n\nimport { IonicComptroller } from \"./compound/ComptrollerInterface.sol\";\nimport { BasePriceOracle } from \"./oracles/BasePriceOracle.sol\";\nimport { Unitroller } from \"./compound/Unitroller.sol\";\nimport \"./ionic/SafeOwnableUpgradeable.sol\";\nimport \"./ionic/DiamondExtension.sol\";\n\n/**\n * @title PoolDirectory\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n * @notice PoolDirectory is a directory for Ionic interest rate pools.\n */\ncontract PoolDirectory is SafeOwnableUpgradeable {\n  /**\n   * @dev Initializes a deployer whitelist if desired.\n   * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\n   * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\n   */\n  function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\n    __SafeOwnable_init(msg.sender);\n    enforceDeployerWhitelist = _enforceDeployerWhitelist;\n    for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\n  }\n\n  /**\n   * @dev Struct for a Ionic interest rate pool.\n   */\n  struct Pool {\n    string name;\n    address creator;\n    address comptroller;\n    uint256 blockPosted;\n    uint256 timestampPosted;\n  }\n\n  /**\n   * @dev Array of Ionic interest rate pools.\n   */\n  Pool[] public pools;\n\n  /**\n   * @dev Maps Ethereum accounts to arrays of Ionic pool indexes.\n   */\n  mapping(address => uint256[]) private _poolsByAccount;\n\n  /**\n   * @dev Maps Ionic pool Comptroller addresses to bools indicating if they have been registered via the directory.\n   */\n  mapping(address => bool) public poolExists;\n\n  /**\n   * @dev Emitted when a new Ionic pool is added to the directory.\n   */\n  event PoolRegistered(uint256 index, Pool pool);\n\n  /**\n   * @dev Booleans indicating if the deployer whitelist is enforced.\n   */\n  bool public enforceDeployerWhitelist;\n\n  /**\n   * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\n   */\n  mapping(address => bool) public deployerWhitelist;\n\n  /**\n   * @dev Controls if the deployer whitelist is to be enforced.\n   * @param enforce Boolean indicating if the deployer whitelist is to be enforced.\n   */\n  function _setDeployerWhitelistEnforcement(bool enforce) external onlyOwner {\n    enforceDeployerWhitelist = enforce;\n  }\n\n  /**\n   * @dev Adds/removes Ethereum accounts to the deployer whitelist.\n   * @param deployers Array of Ethereum accounts to be whitelisted.\n   * @param status Whether to add or remove the accounts.\n   */\n  function _editDeployerWhitelist(address[] calldata deployers, bool status) external onlyOwner {\n    require(deployers.length > 0, \"No deployers supplied.\");\n    for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = status;\n  }\n\n  /**\n   * @dev Adds a new Ionic pool to the directory (without checking msg.sender).\n   * @param name The name of the pool.\n   * @param comptroller The pool's Comptroller proxy contract address.\n   * @return The index of the registered Ionic pool.\n   */\n  function _registerPool(string memory name, address comptroller) internal returns (uint256) {\n    require(!poolExists[comptroller], \"Pool already exists in the directory.\");\n    require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \"Sender is not on deployer whitelist.\");\n    require(bytes(name).length <= 100, \"No pool name supplied.\");\n    Pool memory pool = Pool(name, msg.sender, comptroller, block.number, block.timestamp);\n    pools.push(pool);\n    _poolsByAccount[msg.sender].push(pools.length - 1);\n    poolExists[comptroller] = true;\n    emit PoolRegistered(pools.length - 1, pool);\n    return pools.length - 1;\n  }\n\n  function _deprecatePool(address comptroller) external onlyOwner {\n    for (uint256 i = 0; i < pools.length; i++) {\n      if (pools[i].comptroller == comptroller) {\n        _deprecatePool(i);\n        break;\n      }\n    }\n  }\n\n  function _deprecatePool(uint256 index) public onlyOwner {\n    Pool storage ionicPool = pools[index];\n\n    require(ionicPool.comptroller != address(0), \"pool already deprecated\");\n\n    // swap with the last pool of the creator and delete\n    uint256[] storage creatorPools = _poolsByAccount[ionicPool.creator];\n    for (uint256 i = 0; i < creatorPools.length; i++) {\n      if (creatorPools[i] == index) {\n        creatorPools[i] = creatorPools[creatorPools.length - 1];\n        creatorPools.pop();\n        break;\n      }\n    }\n\n    // leave it to true to deny the re-registering of the same pool\n    poolExists[ionicPool.comptroller] = true;\n\n    // nullify the storage\n    ionicPool.comptroller = address(0);\n    ionicPool.creator = address(0);\n    ionicPool.name = \"\";\n    ionicPool.blockPosted = 0;\n    ionicPool.timestampPosted = 0;\n  }\n\n  /**\n   * @dev Deploys a new Ionic pool and adds to the directory.\n   * @param name The name of the pool.\n   * @param implementation The Comptroller implementation contract address.\n   * @param constructorData Encoded construction data for `Unitroller constructor()`\n   * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\n   * @param closeFactor The pool's close factor (scaled by 1e18).\n   * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\n   * @param priceOracle The pool's PriceOracle contract address.\n   * @return Index of the registered Ionic pool and the Unitroller proxy address.\n   */\n  function deployPool(\n    string memory name,\n    address implementation,\n    bytes calldata constructorData,\n    bool enforceWhitelist,\n    uint256 closeFactor,\n    uint256 liquidationIncentive,\n    address priceOracle\n  ) external returns (uint256, address) {\n    // Input validation\n    require(implementation != address(0), \"No Comptroller implementation contract address specified.\");\n    require(priceOracle != address(0), \"No PriceOracle contract address specified.\");\n\n    // Deploy Unitroller using msg.sender, name, and block.number as a salt\n    bytes memory unitrollerCreationCode = abi.encodePacked(type(Unitroller).creationCode, constructorData);\n    address proxy = Create2Upgradeable.deploy(\n      0,\n      keccak256(abi.encodePacked(msg.sender, name, ++poolsCounter)),\n      unitrollerCreationCode\n    );\n\n    // Setup the pool\n    IonicComptroller comptrollerProxy = IonicComptroller(proxy);\n    // Set up the extensions\n    comptrollerProxy._upgrade();\n\n    // Set pool parameters\n    require(comptrollerProxy._setCloseFactor(closeFactor) == 0, \"Failed to set pool close factor.\");\n    require(\n      comptrollerProxy._setLiquidationIncentive(liquidationIncentive) == 0,\n      \"Failed to set pool liquidation incentive.\"\n    );\n    require(comptrollerProxy._setPriceOracle(BasePriceOracle(priceOracle)) == 0, \"Failed to set pool price oracle.\");\n\n    // Whitelist\n    if (enforceWhitelist)\n      require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \"Failed to enforce supplier/borrower whitelist.\");\n\n    // Make msg.sender the admin\n    require(comptrollerProxy._setPendingAdmin(msg.sender) == 0, \"Failed to set pending admin on Unitroller.\");\n\n    // Register the pool with this PoolDirectory\n    return (_registerPool(name, proxy), proxy);\n  }\n\n  /**\n   * @notice Returns `ids` and directory information of all non-deprecated Ionic pools.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getActivePools() public view returns (uint256[] memory, Pool[] memory) {\n    uint256 count = 0;\n    for (uint256 i = 0; i < pools.length; i++) {\n      if (pools[i].comptroller != address(0)) count++;\n    }\n\n    Pool[] memory activePools = new Pool[](count);\n    uint256[] memory poolIds = new uint256[](count);\n\n    uint256 index = 0;\n    for (uint256 i = 0; i < pools.length; i++) {\n      if (pools[i].comptroller != address(0)) {\n        poolIds[index] = i;\n        activePools[index] = pools[i];\n        index++;\n      }\n    }\n\n    return (poolIds, activePools);\n  }\n\n  /**\n   * @notice Returns arrays of all Ionic pools' data.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getAllPools() public view returns (Pool[] memory) {\n    uint256 count = 0;\n    for (uint256 i = 0; i < pools.length; i++) {\n      if (pools[i].comptroller != address(0)) count++;\n    }\n\n    Pool[] memory result = new Pool[](count);\n\n    uint256 index = 0;\n    for (uint256 i = 0; i < pools.length; i++) {\n      if (pools[i].comptroller != address(0)) {\n        result[index++] = pools[i];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @notice Returns arrays of all public Ionic pool indexes and data.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getPublicPools() external view returns (uint256[] memory, Pool[] memory) {\n    uint256 arrayLength = 0;\n\n    (, Pool[] memory activePools) = getActivePools();\n    for (uint256 i = 0; i < activePools.length; i++) {\n      try IonicComptroller(activePools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\n        if (enforceWhitelist) continue;\n      } catch {}\n\n      arrayLength++;\n    }\n\n    uint256[] memory indexes = new uint256[](arrayLength);\n    Pool[] memory publicPools = new Pool[](arrayLength);\n    uint256 index = 0;\n\n    for (uint256 i = 0; i < activePools.length; i++) {\n      try IonicComptroller(activePools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\n        if (enforceWhitelist) continue;\n      } catch {}\n\n      indexes[index] = i;\n      publicPools[index] = activePools[i];\n      index++;\n    }\n\n    return (indexes, publicPools);\n  }\n\n  /**\n   * @notice Returns arrays of all public Ionic pool indexes and data.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getPoolsOfUser(address user) external view returns (uint256[] memory, Pool[] memory) {\n    uint256 arrayLength = 0;\n\n    (, Pool[] memory activePools) = getActivePools();\n    for (uint256 i = 0; i < activePools.length; i++) {\n      try IonicComptroller(activePools[i].comptroller).isUserOfPool(user) returns (bool isUsing) {\n        if (!isUsing) continue;\n      } catch {}\n\n      arrayLength++;\n    }\n\n    uint256[] memory indexes = new uint256[](arrayLength);\n    Pool[] memory poolsOfUser = new Pool[](arrayLength);\n    uint256 index = 0;\n\n    for (uint256 i = 0; i < activePools.length; i++) {\n      try IonicComptroller(activePools[i].comptroller).isUserOfPool(user) returns (bool isUsing) {\n        if (!isUsing) continue;\n      } catch {}\n\n      indexes[index] = i;\n      poolsOfUser[index] = activePools[i];\n      index++;\n    }\n\n    return (indexes, poolsOfUser);\n  }\n\n  /**\n   * @notice Returns arrays of Ionic pool indexes and data created by `account`.\n   */\n  function getPoolsByAccount(address account) external view returns (uint256[] memory, Pool[] memory) {\n    uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\n    Pool[] memory accountPools = new Pool[](_poolsByAccount[account].length);\n    (, Pool[] memory activePools) = getActivePools();\n\n    for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\n      indexes[i] = _poolsByAccount[account][i];\n      accountPools[i] = activePools[_poolsByAccount[account][i]];\n    }\n\n    return (indexes, accountPools);\n  }\n\n  /**\n   * @notice Modify existing Ionic pool name.\n   */\n  function setPoolName(uint256 index, string calldata name) external {\n    IonicComptroller _comptroller = IonicComptroller(pools[index].comptroller);\n    require(\n      (msg.sender == _comptroller.admin() && _comptroller.adminHasRights()) || msg.sender == owner(),\n      \"!permission\"\n    );\n    pools[index].name = name;\n  }\n\n  /**\n   * @dev Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\n   */\n  mapping(address => bool) public adminWhitelist;\n\n  /**\n   * @dev used as salt for the creation of new pools\n   */\n  uint256 public poolsCounter;\n\n  /**\n   * @dev Event emitted when the admin whitelist is updated.\n   */\n  event AdminWhitelistUpdated(address[] admins, bool status);\n\n  /**\n   * @dev Adds/removes Ethereum accounts to the admin whitelist.\n   * @param admins Array of Ethereum accounts to be whitelisted.\n   * @param status Whether to add or remove the accounts.\n   */\n  function _editAdminWhitelist(address[] calldata admins, bool status) external onlyOwner {\n    require(admins.length > 0, \"No admins supplied.\");\n    for (uint256 i = 0; i < admins.length; i++) adminWhitelist[admins[i]] = status;\n    emit AdminWhitelistUpdated(admins, status);\n  }\n\n  /**\n   * @notice Returns arrays of all Ionic pool indexes and data with whitelisted admins.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getPublicPoolsByVerification(bool whitelistedAdmin) external view returns (uint256[] memory, Pool[] memory) {\n    uint256 arrayLength = 0;\n\n    (, Pool[] memory activePools) = getActivePools();\n    for (uint256 i = 0; i < activePools.length; i++) {\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\n\n      try comptroller.admin() returns (address admin) {\n        if (whitelistedAdmin != adminWhitelist[admin]) continue;\n      } catch {}\n\n      arrayLength++;\n    }\n\n    uint256[] memory indexes = new uint256[](arrayLength);\n    Pool[] memory publicPools = new Pool[](arrayLength);\n    uint256 index = 0;\n\n    for (uint256 i = 0; i < activePools.length; i++) {\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\n\n      try comptroller.admin() returns (address admin) {\n        if (whitelistedAdmin != adminWhitelist[admin]) continue;\n      } catch {}\n\n      indexes[index] = i;\n      publicPools[index] = activePools[i];\n      index++;\n    }\n\n    return (indexes, publicPools);\n  }\n\n  /**\n   * @notice Returns arrays of all verified Ionic pool indexes and data for which the account is whitelisted\n   * @param account who is whitelisted in the returned verified whitelist-enabled pools.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getVerifiedPoolsOfWhitelistedAccount(address account)\n    external\n    view\n    returns (uint256[] memory, Pool[] memory)\n  {\n    uint256 arrayLength = 0;\n    (, Pool[] memory activePools) = getActivePools();\n    for (uint256 i = 0; i < activePools.length; i++) {\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\n\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\n        if (!enforceWhitelist || !comptroller.whitelist(account)) continue;\n      } catch {}\n\n      arrayLength++;\n    }\n\n    uint256[] memory indexes = new uint256[](arrayLength);\n    Pool[] memory accountWhitelistedPools = new Pool[](arrayLength);\n    uint256 index = 0;\n\n    for (uint256 i = 0; i < activePools.length; i++) {\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\n        if (!enforceWhitelist || !comptroller.whitelist(account)) continue;\n      } catch {}\n\n      indexes[index] = i;\n      accountWhitelistedPools[index] = activePools[i];\n      index++;\n    }\n\n    return (indexes, accountWhitelistedPools);\n  }\n}\n"
    },
    "contracts/PoolLens.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\nimport { IonicComptroller } from \"./compound/ComptrollerInterface.sol\";\nimport { BasePriceOracle } from \"./oracles/BasePriceOracle.sol\";\nimport { ICErc20 } from \"./compound/CTokenInterfaces.sol\";\n\nimport { PoolDirectory } from \"./PoolDirectory.sol\";\nimport { MasterPriceOracle } from \"./oracles/MasterPriceOracle.sol\";\n\n/**\n * @title PoolLens\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n * @notice PoolLens returns data on Ionic interest rate pools in mass for viewing by dApps, bots, etc.\n */\ncontract PoolLens is Initializable {\n  error ComptrollerError(uint256 errCode);\n\n  /**\n   * @notice Initialize the `PoolDirectory` contract object.\n   * @param _directory The PoolDirectory\n   * @param _name Name for the nativeToken\n   * @param _symbol Symbol for the nativeToken\n   * @param _hardcodedAddresses Underlying token addresses for a token like maker which are DSToken and/or use bytes32 for `symbol`\n   * @param _hardcodedNames Harcoded name for these tokens\n   * @param _hardcodedSymbols Harcoded symbol for these tokens\n   * @param _uniswapLPTokenNames Harcoded names for underlying uniswap LpToken\n   * @param _uniswapLPTokenSymbols Harcoded symbols for underlying uniswap LpToken\n   * @param _uniswapLPTokenDisplayNames Harcoded display names for underlying uniswap LpToken\n   */\n  function initialize(\n    PoolDirectory _directory,\n    string memory _name,\n    string memory _symbol,\n    address[] memory _hardcodedAddresses,\n    string[] memory _hardcodedNames,\n    string[] memory _hardcodedSymbols,\n    string[] memory _uniswapLPTokenNames,\n    string[] memory _uniswapLPTokenSymbols,\n    string[] memory _uniswapLPTokenDisplayNames\n  ) public initializer {\n    require(address(_directory) != address(0), \"PoolDirectory instance cannot be the zero address.\");\n    require(\n      _hardcodedAddresses.length == _hardcodedNames.length && _hardcodedAddresses.length == _hardcodedSymbols.length,\n      \"Hardcoded addresses lengths not equal.\"\n    );\n    require(\n      _uniswapLPTokenNames.length == _uniswapLPTokenSymbols.length &&\n        _uniswapLPTokenNames.length == _uniswapLPTokenDisplayNames.length,\n      \"Uniswap LP token names lengths not equal.\"\n    );\n\n    directory = _directory;\n    name = _name;\n    symbol = _symbol;\n    for (uint256 i = 0; i < _hardcodedAddresses.length; i++) {\n      hardcoded[_hardcodedAddresses[i]] = TokenData({ name: _hardcodedNames[i], symbol: _hardcodedSymbols[i] });\n    }\n\n    for (uint256 i = 0; i < _uniswapLPTokenNames.length; i++) {\n      uniswapData.push(\n        UniswapData({\n          name: _uniswapLPTokenNames[i],\n          symbol: _uniswapLPTokenSymbols[i],\n          displayName: _uniswapLPTokenDisplayNames[i]\n        })\n      );\n    }\n  }\n\n  string public name;\n  string public symbol;\n\n  struct TokenData {\n    string name;\n    string symbol;\n  }\n  mapping(address => TokenData) hardcoded;\n\n  struct UniswapData {\n    string name; // ie \"Uniswap V2\" or \"SushiSwap LP Token\"\n    string symbol; // ie \"UNI-V2\" or \"SLP\"\n    string displayName; // ie \"SushiSwap\" or \"Uniswap\"\n  }\n  UniswapData[] uniswapData;\n\n  /**\n   * @notice `PoolDirectory` contract object.\n   */\n  PoolDirectory public directory;\n\n  /**\n   * @dev Struct for Ionic pool summary data.\n   */\n  struct IonicPoolData {\n    uint256 totalSupply;\n    uint256 totalBorrow;\n    address[] underlyingTokens;\n    string[] underlyingSymbols;\n    bool whitelistedAdmin;\n  }\n\n  /**\n   * @notice Returns arrays of all public Ionic pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   */\n  function getPublicPoolsWithData()\n    external\n    returns (\n      uint256[] memory,\n      PoolDirectory.Pool[] memory,\n      IonicPoolData[] memory,\n      bool[] memory\n    )\n  {\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory publicPools) = directory.getPublicPools();\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(publicPools);\n    return (indexes, publicPools, data, errored);\n  }\n\n  /**\n   * @notice Returns arrays of all whitelisted public Ionic pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   */\n  function getPublicPoolsByVerificationWithData(bool whitelistedAdmin)\n    external\n    returns (\n      uint256[] memory,\n      PoolDirectory.Pool[] memory,\n      IonicPoolData[] memory,\n      bool[] memory\n    )\n  {\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory publicPools) = directory.getPublicPoolsByVerification(\n      whitelistedAdmin\n    );\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(publicPools);\n    return (indexes, publicPools, data, errored);\n  }\n\n  /**\n   * @notice Returns arrays of the indexes of Ionic pools created by `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   */\n  function getPoolsByAccountWithData(address account)\n    external\n    returns (\n      uint256[] memory,\n      PoolDirectory.Pool[] memory,\n      IonicPoolData[] memory,\n      bool[] memory\n    )\n  {\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory accountPools) = directory.getPoolsByAccount(account);\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(accountPools);\n    return (indexes, accountPools, data, errored);\n  }\n\n  /**\n   * @notice Returns arrays of the indexes of Ionic pools used by `user`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   */\n  function getPoolsOIonicrWithData(address user)\n    external\n    returns (\n      uint256[] memory,\n      PoolDirectory.Pool[] memory,\n      IonicPoolData[] memory,\n      bool[] memory\n    )\n  {\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory userPools) = directory.getPoolsOfUser(user);\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(userPools);\n    return (indexes, userPools, data, errored);\n  }\n\n  /**\n   * @notice Internal function returning arrays of requested Ionic pool indexes, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   */\n  function getPoolsData(PoolDirectory.Pool[] memory pools) internal returns (IonicPoolData[] memory, bool[] memory) {\n    IonicPoolData[] memory data = new IonicPoolData[](pools.length);\n    bool[] memory errored = new bool[](pools.length);\n\n    for (uint256 i = 0; i < pools.length; i++) {\n      try this.getPoolSummary(IonicComptroller(pools[i].comptroller)) returns (\n        uint256 _totalSupply,\n        uint256 _totalBorrow,\n        address[] memory _underlyingTokens,\n        string[] memory _underlyingSymbols,\n        bool _whitelistedAdmin\n      ) {\n        data[i] = IonicPoolData(_totalSupply, _totalBorrow, _underlyingTokens, _underlyingSymbols, _whitelistedAdmin);\n      } catch {\n        errored[i] = true;\n      }\n    }\n\n    return (data, errored);\n  }\n\n  /**\n   * @notice Returns total supply balance (in ETH), total borrow balance (in ETH), underlying token addresses, and underlying token symbols of a Ionic pool.\n   */\n  function getPoolSummary(IonicComptroller comptroller)\n    external\n    returns (\n      uint256,\n      uint256,\n      address[] memory,\n      string[] memory,\n      bool\n    )\n  {\n    uint256 totalBorrow = 0;\n    uint256 totalSupply = 0;\n    ICErc20[] memory cTokens = comptroller.getAllMarkets();\n    address[] memory underlyingTokens = new address[](cTokens.length);\n    string[] memory underlyingSymbols = new string[](cTokens.length);\n    BasePriceOracle oracle = comptroller.oracle();\n\n    for (uint256 i = 0; i < cTokens.length; i++) {\n      ICErc20 cToken = cTokens[i];\n      (bool isListed, ) = comptroller.markets(address(cToken));\n      if (!isListed) continue;\n      cToken.accrueInterest();\n      uint256 assetTotalBorrow = cToken.totalBorrowsCurrent();\n      uint256 assetTotalSupply = cToken.getCash() +\n        assetTotalBorrow -\n        (cToken.totalReserves() + cToken.totalAdminFees() + cToken.totalIonicFees());\n      uint256 underlyingPrice = oracle.getUnderlyingPrice(cToken);\n      totalBorrow = totalBorrow + (assetTotalBorrow * underlyingPrice) / 1e18;\n      totalSupply = totalSupply + (assetTotalSupply * underlyingPrice) / 1e18;\n\n      underlyingTokens[i] = ICErc20(address(cToken)).underlying();\n      (, underlyingSymbols[i]) = getTokenNameAndSymbol(underlyingTokens[i]);\n    }\n\n    bool whitelistedAdmin = directory.adminWhitelist(comptroller.admin());\n    return (totalSupply, totalBorrow, underlyingTokens, underlyingSymbols, whitelistedAdmin);\n  }\n\n  /**\n   * @dev Struct for a Ionic pool asset.\n   */\n  struct PoolAsset {\n    address cToken;\n    address underlyingToken;\n    string underlyingName;\n    string underlyingSymbol;\n    uint256 underlyingDecimals;\n    uint256 underlyingBalance;\n    uint256 supplyRatePerBlock;\n    uint256 borrowRatePerBlock;\n    uint256 totalSupply;\n    uint256 totalBorrow;\n    uint256 supplyBalance;\n    uint256 borrowBalance;\n    uint256 liquidity;\n    bool membership;\n    uint256 exchangeRate; // Price of cTokens in terms of underlying tokens\n    uint256 underlyingPrice; // Price of underlying tokens in ETH (scaled by 1e18)\n    address oracle;\n    uint256 collateralFactor;\n    uint256 reserveFactor;\n    uint256 adminFee;\n    uint256 ionicFee;\n    bool borrowGuardianPaused;\n    bool mintGuardianPaused;\n  }\n\n  /**\n   * @notice Returns data on the specified assets of the specified Ionic pool.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   * @param comptroller The Comptroller proxy contract address of the Ionic pool.\n   * @param cTokens The cToken contract addresses of the assets to query.\n   * @param user The user for which to get account data.\n   * @return An array of Ionic pool assets.\n   */\n  function getPoolAssetsWithData(\n    IonicComptroller comptroller,\n    ICErc20[] memory cTokens,\n    address user\n  ) internal returns (PoolAsset[] memory) {\n    uint256 arrayLength = 0;\n\n    for (uint256 i = 0; i < cTokens.length; i++) {\n      (bool isListed, ) = comptroller.markets(address(cTokens[i]));\n      if (isListed) arrayLength++;\n    }\n\n    PoolAsset[] memory detailedAssets = new PoolAsset[](arrayLength);\n    uint256 index = 0;\n    BasePriceOracle oracle = BasePriceOracle(address(comptroller.oracle()));\n\n    for (uint256 i = 0; i < cTokens.length; i++) {\n      // Check if market is listed and get collateral factor\n      (bool isListed, uint256 collateralFactorMantissa) = comptroller.markets(address(cTokens[i]));\n      if (!isListed) continue;\n\n      // Start adding data to PoolAsset\n      PoolAsset memory asset;\n      ICErc20 cToken = cTokens[i];\n      asset.cToken = address(cToken);\n\n      cToken.accrueInterest();\n\n      // Get underlying asset data\n      asset.underlyingToken = ICErc20(address(cToken)).underlying();\n      ERC20Upgradeable underlying = ERC20Upgradeable(asset.underlyingToken);\n      (asset.underlyingName, asset.underlyingSymbol) = getTokenNameAndSymbol(asset.underlyingToken);\n      asset.underlyingDecimals = underlying.decimals();\n      asset.underlyingBalance = underlying.balanceOf(user);\n\n      // Get cToken data\n      asset.supplyRatePerBlock = cToken.supplyRatePerBlock();\n      asset.borrowRatePerBlock = cToken.borrowRatePerBlock();\n      asset.liquidity = cToken.getCash();\n      asset.totalBorrow = cToken.totalBorrowsCurrent();\n      asset.totalSupply =\n        asset.liquidity +\n        asset.totalBorrow -\n        (cToken.totalReserves() + cToken.totalAdminFees() + cToken.totalIonicFees());\n      asset.supplyBalance = cToken.balanceOfUnderlying(user);\n      asset.borrowBalance = cToken.borrowBalanceCurrent(user);\n      asset.membership = comptroller.checkMembership(user, cToken);\n      asset.exchangeRate = cToken.exchangeRateCurrent(); // We would use exchangeRateCurrent but we already accrue interest above\n      asset.underlyingPrice = oracle.price(asset.underlyingToken);\n\n      // Get oracle for this cToken\n      asset.oracle = address(oracle);\n\n      try MasterPriceOracle(asset.oracle).oracles(asset.underlyingToken) returns (BasePriceOracle _oracle) {\n        asset.oracle = address(_oracle);\n      } catch {}\n\n      // More cToken data\n      asset.collateralFactor = collateralFactorMantissa;\n      asset.reserveFactor = cToken.reserveFactorMantissa();\n      asset.adminFee = cToken.adminFeeMantissa();\n      asset.ionicFee = cToken.ionicFeeMantissa();\n      asset.borrowGuardianPaused = comptroller.borrowGuardianPaused(address(cToken));\n      asset.mintGuardianPaused = comptroller.mintGuardianPaused(address(cToken));\n\n      // Add to assets array and increment index\n      detailedAssets[index] = asset;\n      index++;\n    }\n\n    return (detailedAssets);\n  }\n\n  function getBorrowCapsPerCollateral(ICErc20 borrowedAsset, IonicComptroller comptroller)\n    internal\n    view\n    returns (\n      address[] memory collateral,\n      uint256[] memory borrowCapsAgainstCollateral,\n      bool[] memory borrowingBlacklistedAgainstCollateral\n    )\n  {\n    ICErc20[] memory poolMarkets = comptroller.getAllMarkets();\n\n    collateral = new address[](poolMarkets.length);\n    borrowCapsAgainstCollateral = new uint256[](poolMarkets.length);\n    borrowingBlacklistedAgainstCollateral = new bool[](poolMarkets.length);\n\n    for (uint256 i = 0; i < poolMarkets.length; i++) {\n      address collateralAddress = address(poolMarkets[i]);\n      if (collateralAddress != address(borrowedAsset)) {\n        collateral[i] = collateralAddress;\n        borrowCapsAgainstCollateral[i] = comptroller.borrowCapForCollateral(address(borrowedAsset), collateralAddress);\n        borrowingBlacklistedAgainstCollateral[i] = comptroller.borrowingAgainstCollateralBlacklist(\n          address(borrowedAsset),\n          collateralAddress\n        );\n      }\n    }\n  }\n\n  /**\n   * @notice Returns the `name` and `symbol` of `token`.\n   * Supports Uniswap V2 and SushiSwap LP tokens as well as MKR.\n   * @param token An ERC20 token contract object.\n   * @return The `name` and `symbol`.\n   */\n  function getTokenNameAndSymbol(address token) internal view returns (string memory, string memory) {\n    // i.e. MKR is a DSToken and uses bytes32\n    if (bytes(hardcoded[token].symbol).length != 0) {\n      return (hardcoded[token].name, hardcoded[token].symbol);\n    }\n\n    // Get name and symbol from token contract\n    ERC20Upgradeable tokenContract = ERC20Upgradeable(token);\n    string memory _name = tokenContract.name();\n    string memory _symbol = tokenContract.symbol();\n\n    return (_name, _symbol);\n  }\n\n  /**\n   * @notice Returns the assets of the specified Ionic pool.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   * @param comptroller The Comptroller proxy contract of the Ionic pool.\n   * @return An array of Ionic pool assets.\n   */\n  function getPoolAssetsWithData(IonicComptroller comptroller) external returns (PoolAsset[] memory) {\n    return getPoolAssetsWithData(comptroller, comptroller.getAllMarkets(), msg.sender);\n  }\n\n  /**\n   * @dev Struct for a Ionic pool user.\n   */\n  struct IonicPoolUser {\n    address account;\n    uint256 totalBorrow;\n    uint256 totalCollateral;\n    uint256 health;\n  }\n\n  /**\n   * @notice Returns arrays of PoolAsset for a specific user\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getPoolAssetsByUser(IonicComptroller comptroller, address user) public returns (PoolAsset[] memory) {\n    PoolAsset[] memory assets = getPoolAssetsWithData(comptroller, comptroller.getAssetsIn(user), user);\n    return assets;\n  }\n\n  /**\n   * @notice returns the total supply cap for each asset in the pool\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getSupplyCapsForPool(IonicComptroller comptroller) public view returns (address[] memory, uint256[] memory) {\n    ICErc20[] memory poolMarkets = comptroller.getAllMarkets();\n\n    address[] memory assets = new address[](poolMarkets.length);\n    uint256[] memory supplyCapsPerAsset = new uint256[](poolMarkets.length);\n    for (uint256 i = 0; i < poolMarkets.length; i++) {\n      assets[i] = address(poolMarkets[i]);\n      supplyCapsPerAsset[i] = comptroller.supplyCaps(assets[i]);\n    }\n\n    return (assets, supplyCapsPerAsset);\n  }\n\n  /**\n   * @notice returns the total supply cap for each asset in the pool and the total non-whitelist supplied assets\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getSupplyCapsDataForPool(IonicComptroller comptroller)\n    public\n    view\n    returns (\n      address[] memory,\n      uint256[] memory,\n      uint256[] memory\n    )\n  {\n    ICErc20[] memory poolMarkets = comptroller.getAllMarkets();\n\n    address[] memory assets = new address[](poolMarkets.length);\n    uint256[] memory supplyCapsPerAsset = new uint256[](poolMarkets.length);\n    uint256[] memory nonWhitelistedTotalSupply = new uint256[](poolMarkets.length);\n    for (uint256 i = 0; i < poolMarkets.length; i++) {\n      assets[i] = address(poolMarkets[i]);\n      supplyCapsPerAsset[i] = comptroller.supplyCaps(assets[i]);\n      uint256 assetTotalSupplied = poolMarkets[i].getTotalUnderlyingSupplied();\n      uint256 whitelistedSuppliersSupply = comptroller.getWhitelistedSuppliersSupply(assets[i]);\n      if (whitelistedSuppliersSupply >= assetTotalSupplied) nonWhitelistedTotalSupply[i] = 0;\n      else nonWhitelistedTotalSupply[i] = assetTotalSupplied - whitelistedSuppliersSupply;\n    }\n\n    return (assets, supplyCapsPerAsset, nonWhitelistedTotalSupply);\n  }\n\n  /**\n   * @notice returns the total borrow cap and the per collateral borrowing cap/blacklist for the asset\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getBorrowCapsForAsset(ICErc20 asset)\n    public\n    view\n    returns (\n      address[] memory collateral,\n      uint256[] memory borrowCapsPerCollateral,\n      bool[] memory collateralBlacklisted,\n      uint256 totalBorrowCap\n    )\n  {\n    IonicComptroller comptroller = IonicComptroller(asset.comptroller());\n    (collateral, borrowCapsPerCollateral, collateralBlacklisted) = getBorrowCapsPerCollateral(asset, comptroller);\n    totalBorrowCap = comptroller.borrowCaps(address(asset));\n  }\n\n  /**\n   * @notice returns the total borrow cap, the per collateral borrowing cap/blacklist for the asset and the total non-whitelist borrows\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getBorrowCapsDataForAsset(ICErc20 asset)\n    public\n    view\n    returns (\n      address[] memory collateral,\n      uint256[] memory borrowCapsPerCollateral,\n      bool[] memory collateralBlacklisted,\n      uint256 totalBorrowCap,\n      uint256 nonWhitelistedTotalBorrows\n    )\n  {\n    IonicComptroller comptroller = IonicComptroller(asset.comptroller());\n    (collateral, borrowCapsPerCollateral, collateralBlacklisted) = getBorrowCapsPerCollateral(asset, comptroller);\n    totalBorrowCap = comptroller.borrowCaps(address(asset));\n    uint256 totalBorrows = asset.totalBorrowsCurrent();\n    uint256 whitelistedBorrowersBorrows = comptroller.getWhitelistedBorrowersBorrows(address(asset));\n    if (whitelistedBorrowersBorrows >= totalBorrows) nonWhitelistedTotalBorrows = 0;\n    else nonWhitelistedTotalBorrows = totalBorrows - whitelistedBorrowersBorrows;\n  }\n\n  /**\n   * @notice Returns arrays of Ionic pool indexes and data with a whitelist containing `account`.\n   * Note that the whitelist does not have to be enforced.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getWhitelistedPoolsByAccount(address account)\n    public\n    view\n    returns (uint256[] memory, PoolDirectory.Pool[] memory)\n  {\n    (, PoolDirectory.Pool[] memory pools) = directory.getActivePools();\n    uint256 arrayLength = 0;\n\n    for (uint256 i = 0; i < pools.length; i++) {\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\n\n      if (comptroller.whitelist(account)) arrayLength++;\n    }\n\n    uint256[] memory indexes = new uint256[](arrayLength);\n    PoolDirectory.Pool[] memory accountPools = new PoolDirectory.Pool[](arrayLength);\n    uint256 index = 0;\n\n    for (uint256 i = 0; i < pools.length; i++) {\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\n\n      if (comptroller.whitelist(account)) {\n        indexes[index] = i;\n        accountPools[index] = pools[i];\n        index++;\n        break;\n      }\n    }\n\n    return (indexes, accountPools);\n  }\n\n  /**\n   * @notice Returns arrays of the indexes of Ionic pools with a whitelist containing `account`, data, total supply balances (in ETH), total borrow balances (in ETH), arrays of underlying token addresses, arrays of underlying asset symbols, and booleans indicating if retrieving each pool's data failed.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   */\n  function getWhitelistedPoolsByAccountWithData(address account)\n    external\n    returns (\n      uint256[] memory,\n      PoolDirectory.Pool[] memory,\n      IonicPoolData[] memory,\n      bool[] memory\n    )\n  {\n    (uint256[] memory indexes, PoolDirectory.Pool[] memory accountPools) = getWhitelistedPoolsByAccount(account);\n    (IonicPoolData[] memory data, bool[] memory errored) = getPoolsData(accountPools);\n    return (indexes, accountPools, data, errored);\n  }\n\n  function getHealthFactor(address user, IonicComptroller pool) external view returns (uint256) {\n    return getHealthFactorHypothetical(pool, user, address(0), 0, 0, 0);\n  }\n\n  function getHealthFactorHypothetical(\n    IonicComptroller pool,\n    address account,\n    address cTokenModify,\n    uint256 redeemTokens,\n    uint256 borrowAmount,\n    uint256 repayAmount\n  ) public view returns (uint256) {\n    (uint256 err, uint256 collateralValue, uint256 liquidity, uint256 shortfall) = pool.getHypotheticalAccountLiquidity(\n      account,\n      cTokenModify,\n      redeemTokens,\n      borrowAmount,\n      repayAmount\n    );\n\n    if (err != 0) revert ComptrollerError(err);\n\n    if (shortfall > 0) {\n      // HF < 1.0\n      return (collateralValue * 1e18) / (collateralValue + shortfall);\n    } else {\n      // HF >= 1.0\n      if (collateralValue <= liquidity) return type(uint256).max;\n      else return (collateralValue * 1e18) / (collateralValue - liquidity);\n    }\n  }\n}\n"
    },
    "contracts/PoolLensSecondary.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\nimport \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\";\n\nimport { IonicComptroller } from \"./compound/ComptrollerInterface.sol\";\nimport { ICErc20 } from \"./compound/CTokenInterfaces.sol\";\nimport { IUniswapV2Pair } from \"./external/uniswap/IUniswapV2Pair.sol\";\n\nimport { PoolDirectory } from \"./PoolDirectory.sol\";\n\ninterface IRewardsDistributor_PLS {\n  function rewardToken() external view returns (address);\n\n  function compSupplySpeeds(address) external view returns (uint256);\n\n  function compBorrowSpeeds(address) external view returns (uint256);\n\n  function compAccrued(address) external view returns (uint256);\n\n  function flywheelPreSupplierAction(address cToken, address supplier) external;\n\n  function flywheelPreBorrowerAction(address cToken, address borrower) external;\n\n  function getAllMarkets() external view returns (ICErc20[] memory);\n}\n\n/**\n * @title PoolLensSecondary\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\n * @notice PoolLensSecondary returns data on Ionic interest rate pools in mass for viewing by dApps, bots, etc.\n */\ncontract PoolLensSecondary is Initializable {\n  /**\n   * @notice Constructor to set the `PoolDirectory` contract object.\n   */\n  function initialize(PoolDirectory _directory) public initializer {\n    require(address(_directory) != address(0), \"PoolDirectory instance cannot be the zero address.\");\n    directory = _directory;\n  }\n\n  /**\n   * @notice `PoolDirectory` contract object.\n   */\n  PoolDirectory public directory;\n\n  /**\n   * @notice Struct for ownership over a CToken.\n   */\n  struct CTokenOwnership {\n    address cToken;\n    address admin;\n    bool adminHasRights;\n    bool ionicAdminHasRights;\n  }\n\n  /**\n   * @notice Returns the admin, admin rights, Ionic admin (constant), Ionic admin rights, and an array of cTokens with differing properties.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   * Ideally, we can add the `view` modifier, but many cToken functions potentially modify the state.\n   */\n  function getPoolOwnership(IonicComptroller comptroller)\n    external\n    view\n    returns (\n      address,\n      bool,\n      bool,\n      CTokenOwnership[] memory\n    )\n  {\n    // Get pool ownership\n    address comptrollerAdmin = comptroller.admin();\n    bool comptrollerAdminHasRights = comptroller.adminHasRights();\n    bool comptrollerIonicAdminHasRights = comptroller.ionicAdminHasRights();\n\n    // Get cToken ownership\n    ICErc20[] memory cTokens = comptroller.getAllMarkets();\n    uint256 arrayLength = 0;\n\n    for (uint256 i = 0; i < cTokens.length; i++) {\n      ICErc20 cToken = cTokens[i];\n      (bool isListed, ) = comptroller.markets(address(cToken));\n      if (!isListed) continue;\n\n      address cTokenAdmin;\n      try cToken.admin() returns (address _cTokenAdmin) {\n        cTokenAdmin = _cTokenAdmin;\n      } catch {\n        continue;\n      }\n      bool cTokenAdminHasRights = cToken.adminHasRights();\n      bool cTokenIonicAdminHasRights = cToken.ionicAdminHasRights();\n\n      // If outlier, push to array\n      if (\n        cTokenAdmin != comptrollerAdmin ||\n        cTokenAdminHasRights != comptrollerAdminHasRights ||\n        cTokenIonicAdminHasRights != comptrollerIonicAdminHasRights\n      ) arrayLength++;\n    }\n\n    CTokenOwnership[] memory outliers = new CTokenOwnership[](arrayLength);\n    uint256 arrayIndex = 0;\n\n    for (uint256 i = 0; i < cTokens.length; i++) {\n      ICErc20 cToken = cTokens[i];\n      (bool isListed, ) = comptroller.markets(address(cToken));\n      if (!isListed) continue;\n\n      address cTokenAdmin;\n      try cToken.admin() returns (address _cTokenAdmin) {\n        cTokenAdmin = _cTokenAdmin;\n      } catch {\n        continue;\n      }\n      bool cTokenAdminHasRights = cToken.adminHasRights();\n      bool cTokenIonicAdminHasRights = cToken.ionicAdminHasRights();\n\n      // If outlier, push to array and increment array index\n      if (\n        cTokenAdmin != comptrollerAdmin ||\n        cTokenAdminHasRights != comptrollerAdminHasRights ||\n        cTokenIonicAdminHasRights != comptrollerIonicAdminHasRights\n      ) {\n        outliers[arrayIndex] = CTokenOwnership(\n          address(cToken),\n          cTokenAdmin,\n          cTokenAdminHasRights,\n          cTokenIonicAdminHasRights\n        );\n        arrayIndex++;\n      }\n    }\n\n    return (comptrollerAdmin, comptrollerAdminHasRights, comptrollerIonicAdminHasRights, outliers);\n  }\n\n  /**\n   * @notice Determine the maximum redeem amount of a cToken.\n   * @param cTokenModify The market to hypothetically redeem in.\n   * @param account The account to determine liquidity for.\n   * @return Maximum redeem amount.\n   */\n  function getMaxRedeem(address account, ICErc20 cTokenModify) external returns (uint256) {\n    return getMaxRedeemOrBorrow(account, cTokenModify, false);\n  }\n\n  /**\n   * @notice Determine the maximum borrow amount of a cToken.\n   * @param cTokenModify The market to hypothetically borrow in.\n   * @param account The account to determine liquidity for.\n   * @return Maximum borrow amount.\n   */\n  function getMaxBorrow(address account, ICErc20 cTokenModify) external returns (uint256) {\n    return getMaxRedeemOrBorrow(account, cTokenModify, true);\n  }\n\n  /**\n   * @dev Internal function to determine the maximum borrow/redeem amount of a cToken.\n   * @param cTokenModify The market to hypothetically borrow/redeem in.\n   * @param account The account to determine liquidity for.\n   * @return Maximum borrow/redeem amount.\n   */\n  function getMaxRedeemOrBorrow(\n    address account,\n    ICErc20 cTokenModify,\n    bool isBorrow\n  ) internal returns (uint256) {\n    IonicComptroller comptroller = IonicComptroller(cTokenModify.comptroller());\n    return comptroller.getMaxRedeemOrBorrow(account, cTokenModify, isBorrow);\n  }\n\n  /**\n   * @notice Returns an array of all markets, an array of all `RewardsDistributor` contracts, an array of reward token addresses for each `RewardsDistributor`, an array of supply speeds for each distributor for each, and their borrow speeds.\n   * @param comptroller The Ionic pool Comptroller to check.\n   */\n  function getRewardSpeedsByPool(IonicComptroller comptroller)\n    public\n    view\n    returns (\n      ICErc20[] memory,\n      address[] memory,\n      address[] memory,\n      uint256[][] memory,\n      uint256[][] memory\n    )\n  {\n    ICErc20[] memory allMarkets = comptroller.getAllMarkets();\n    address[] memory distributors;\n\n    try comptroller.getRewardsDistributors() returns (address[] memory _distributors) {\n      distributors = _distributors;\n    } catch {\n      distributors = new address[](0);\n    }\n\n    address[] memory rewardTokens = new address[](distributors.length);\n    uint256[][] memory supplySpeeds = new uint256[][](allMarkets.length);\n    uint256[][] memory borrowSpeeds = new uint256[][](allMarkets.length);\n\n    // Get reward tokens for each distributor\n    for (uint256 i = 0; i < distributors.length; i++) {\n      rewardTokens[i] = IRewardsDistributor_PLS(distributors[i]).rewardToken();\n    }\n\n    // Get reward speeds for each market for each distributor\n    for (uint256 i = 0; i < allMarkets.length; i++) {\n      address cToken = address(allMarkets[i]);\n      supplySpeeds[i] = new uint256[](distributors.length);\n      borrowSpeeds[i] = new uint256[](distributors.length);\n\n      for (uint256 j = 0; j < distributors.length; j++) {\n        IRewardsDistributor_PLS distributor = IRewardsDistributor_PLS(distributors[j]);\n        supplySpeeds[i][j] = distributor.compSupplySpeeds(cToken);\n        borrowSpeeds[i][j] = distributor.compBorrowSpeeds(cToken);\n      }\n    }\n\n    return (allMarkets, distributors, rewardTokens, supplySpeeds, borrowSpeeds);\n  }\n\n  /**\n   * @notice For each `Comptroller`, returns an array of all markets, an array of all `RewardsDistributor` contracts, an array of reward token addresses for each `RewardsDistributor`, an array of supply speeds for each distributor for each, and their borrow speeds.\n   * @param comptrollers The Ionic pool Comptrollers to check.\n   */\n  function getRewardSpeedsByPools(IonicComptroller[] memory comptrollers)\n    external\n    view\n    returns (\n      ICErc20[][] memory,\n      address[][] memory,\n      address[][] memory,\n      uint256[][][] memory,\n      uint256[][][] memory\n    )\n  {\n    ICErc20[][] memory allMarkets = new ICErc20[][](comptrollers.length);\n    address[][] memory distributors = new address[][](comptrollers.length);\n    address[][] memory rewardTokens = new address[][](comptrollers.length);\n    uint256[][][] memory supplySpeeds = new uint256[][][](comptrollers.length);\n    uint256[][][] memory borrowSpeeds = new uint256[][][](comptrollers.length);\n    for (uint256 i = 0; i < comptrollers.length; i++)\n      (allMarkets[i], distributors[i], rewardTokens[i], supplySpeeds[i], borrowSpeeds[i]) = getRewardSpeedsByPool(\n        comptrollers[i]\n      );\n    return (allMarkets, distributors, rewardTokens, supplySpeeds, borrowSpeeds);\n  }\n\n  /**\n   * @notice Returns unaccrued rewards by `holder` from `cToken` on `distributor`.\n   * @param holder The address to check.\n   * @param distributor The RewardsDistributor to check.\n   * @param cToken The CToken to check.\n   * @return Unaccrued (unclaimed) supply-side rewards and unaccrued (unclaimed) borrow-side rewards.\n   */\n  function getUnaccruedRewards(\n    address holder,\n    IRewardsDistributor_PLS distributor,\n    ICErc20 cToken\n  ) internal returns (uint256, uint256) {\n    // Get unaccrued supply rewards\n    uint256 compAccruedPrior = distributor.compAccrued(holder);\n    distributor.flywheelPreSupplierAction(address(cToken), holder);\n    uint256 supplyRewardsUnaccrued = distributor.compAccrued(holder) - compAccruedPrior;\n\n    // Get unaccrued borrow rewards\n    compAccruedPrior = distributor.compAccrued(holder);\n    distributor.flywheelPreBorrowerAction(address(cToken), holder);\n    uint256 borrowRewardsUnaccrued = distributor.compAccrued(holder) - compAccruedPrior;\n\n    // Return both\n    return (supplyRewardsUnaccrued, borrowRewardsUnaccrued);\n  }\n\n  /**\n   * @notice Returns all unclaimed rewards accrued by the `holder` on `distributors`.\n   * @param holder The address to check.\n   * @param distributors The `RewardsDistributor` contracts to check.\n   * @return For each of `distributors`: total quantity of unclaimed rewards, array of cTokens, array of unaccrued (unclaimed) supply-side and borrow-side rewards per cToken, and quantity of funds available in the distributor.\n   */\n  function getUnclaimedRewardsByDistributors(address holder, IRewardsDistributor_PLS[] memory distributors)\n    external\n    returns (\n      address[] memory,\n      uint256[] memory,\n      ICErc20[][] memory,\n      uint256[2][][] memory,\n      uint256[] memory\n    )\n  {\n    address[] memory rewardTokens = new address[](distributors.length);\n    uint256[] memory compUnclaimedTotal = new uint256[](distributors.length);\n    ICErc20[][] memory allMarkets = new ICErc20[][](distributors.length);\n    uint256[2][][] memory rewardsUnaccrued = new uint256[2][][](distributors.length);\n    uint256[] memory distributorFunds = new uint256[](distributors.length);\n\n    for (uint256 i = 0; i < distributors.length; i++) {\n      IRewardsDistributor_PLS distributor = distributors[i];\n      rewardTokens[i] = distributor.rewardToken();\n      allMarkets[i] = distributor.getAllMarkets();\n      rewardsUnaccrued[i] = new uint256[2][](allMarkets[i].length);\n      for (uint256 j = 0; j < allMarkets[i].length; j++)\n        (rewardsUnaccrued[i][j][0], rewardsUnaccrued[i][j][1]) = getUnaccruedRewards(\n          holder,\n          distributor,\n          allMarkets[i][j]\n        );\n      compUnclaimedTotal[i] = distributor.compAccrued(holder);\n      distributorFunds[i] = IERC20Upgradeable(rewardTokens[i]).balanceOf(address(distributor));\n    }\n\n    return (rewardTokens, compUnclaimedTotal, allMarkets, rewardsUnaccrued, distributorFunds);\n  }\n\n  /**\n   * @notice Returns arrays of indexes, `Comptroller` proxy contracts, and `RewardsDistributor` contracts for Ionic pools supplied to by `account`.\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getRewardsDistributorsBySupplier(address supplier)\n    external\n    view\n    returns (\n      uint256[] memory,\n      IonicComptroller[] memory,\n      address[][] memory\n    )\n  {\n    // Get array length\n    (, PoolDirectory.Pool[] memory pools) = directory.getActivePools();\n    uint256 arrayLength = 0;\n\n    for (uint256 i = 0; i < pools.length; i++) {\n      try IonicComptroller(pools[i].comptroller).suppliers(supplier) returns (bool isSupplier) {\n        if (isSupplier) arrayLength++;\n      } catch {}\n    }\n\n    // Build array\n    uint256[] memory indexes = new uint256[](arrayLength);\n    IonicComptroller[] memory comptrollers = new IonicComptroller[](arrayLength);\n    address[][] memory distributors = new address[][](arrayLength);\n    uint256 index = 0;\n\n    for (uint256 i = 0; i < pools.length; i++) {\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\n\n      try comptroller.suppliers(supplier) returns (bool isSupplier) {\n        if (isSupplier) {\n          indexes[index] = i;\n          comptrollers[index] = comptroller;\n\n          try comptroller.getRewardsDistributors() returns (address[] memory _distributors) {\n            distributors[index] = _distributors;\n          } catch {}\n\n          index++;\n        }\n      } catch {}\n    }\n\n    // Return distributors\n    return (indexes, comptrollers, distributors);\n  }\n\n  /**\n   * @notice The returned list of flywheels contains address(0) for flywheels for which the user has no rewards to claim\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\n   */\n  function getFlywheelsToClaim(address user)\n    external\n    view\n    returns (\n      uint256[] memory,\n      IonicComptroller[] memory,\n      address[][] memory\n    )\n  {\n    (uint256[] memory poolIds, PoolDirectory.Pool[] memory pools) = directory.getActivePools();\n\n    IonicComptroller[] memory comptrollers = new IonicComptroller[](pools.length);\n    address[][] memory distributors = new address[][](pools.length);\n\n    for (uint256 i = 0; i < pools.length; i++) {\n      IonicComptroller comptroller = IonicComptroller(pools[i].comptroller);\n      try comptroller.getRewardsDistributors() returns (address[] memory _distributors) {\n        comptrollers[i] = comptroller;\n        distributors[i] = flywheelsWithRewardsForPoolUser(user, _distributors);\n      } catch {}\n    }\n\n    return (poolIds, comptrollers, distributors);\n  }\n\n  function flywheelsWithRewardsForPoolUser(address user, address[] memory _distributors)\n    internal\n    view\n    returns (address[] memory)\n  {\n    address[] memory distributors = new address[](_distributors.length);\n    for (uint256 j = 0; j < _distributors.length; j++) {\n      if (IRewardsDistributor_PLS(_distributors[j]).compAccrued(user) > 0) {\n        distributors[j] = _distributors[j];\n      }\n    }\n\n    return distributors;\n  }\n}\n"
    },
    "contracts/test/config/BaseTest.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"forge-std/Vm.sol\";\nimport \"forge-std/Test.sol\";\nimport \"forge-std/console.sol\";\n\nimport { AddressesProvider } from \"../../ionic/AddressesProvider.sol\";\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\nabstract contract BaseTest is Test {\n  uint128 constant ETHEREUM_MAINNET = 1;\n  uint128 constant BSC_MAINNET = 56;\n  uint128 constant POLYGON_MAINNET = 137;\n  uint128 constant ARBITRUM_ONE = 42161;\n\n  uint128 constant BSC_CHAPEL = 97;\n  uint128 constant NEON_MAINNET = 245022934;\n  uint128 constant LINEA_MAINNET = 59144;\n  uint128 constant ZKEVM_MAINNET = 1101;\n  uint128 constant MODE_MAINNET = 34443;\n  uint128 constant BASE_MAINNET = 8453;\n\n  // taken from ERC1967Upgrade\n  bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  AddressesProvider public ap;\n  ProxyAdmin public dpa;\n\n  mapping(uint128 => uint256) private forkIds;\n\n  constructor() {\n    configureAddressesProvider(0);\n  }\n\n  uint256 constant CRITICAL = 100;\n  uint256 constant NORMAL = 90;\n  uint256 constant LOW = 80;\n\n  modifier importance(uint256 testImportance) {\n    uint256 runLevel = NORMAL;\n\n    try vm.envUint(\"TEST_RUN_LEVEL\") returns (uint256 level) {\n      runLevel = level;\n    } catch {\n      emit log(\"failed to get env param TEST_RUN_LEVEL\");\n    }\n\n    if (testImportance >= runLevel) {\n      _;\n    } else {\n      emit log(\"not running the test\");\n    }\n  }\n\n  modifier debuggingOnly() {\n    try vm.envBool(\"LOCAL_FORGE_ENV\") returns (bool run) {\n      if (run) _;\n    } catch {\n      emit log(\"skipping this test in the CI/CD - add LOCAL_FORGE_ENV=true to your .env file to run locally\");\n    }\n  }\n\n  modifier fork(uint128 chainid) {\n    if (shouldRunForChain(chainid)) {\n      _forkAtBlock(chainid, 0);\n      _;\n    }\n  }\n\n  modifier forkAtBlock(uint128 chainid, uint256 blockNumber) {\n    if (shouldRunForChain(chainid)) {\n      _forkAtBlock(chainid, blockNumber);\n      _;\n    }\n  }\n\n  modifier whenForking() {\n    try vm.activeFork() returns (uint256) {\n      _;\n    } catch {}\n  }\n\n  function shouldRunForChain(uint256 chainid) internal returns (bool) {\n    bool run = true;\n    try vm.envUint(\"TEST_RUN_CHAINID\") returns (uint256 envChainId) {\n      run = envChainId == chainid;\n    } catch {\n      emit log(\"failed to get env param TEST_RUN_CHAINID\");\n    }\n    return run;\n  }\n\n  function _forkAtBlock(uint128 chainid, uint256 blockNumber) internal {\n    if (block.chainid != chainid) {\n      if (blockNumber != 0) {\n        vm.selectFork(getArchiveForkId(chainid));\n        vm.rollFork(blockNumber);\n      } else {\n        vm.selectFork(getForkId(chainid));\n      }\n    }\n    configureAddressesProvider(chainid);\n    afterForkSetUp();\n  }\n\n  function getForkId(uint128 chainid, bool archive) private returns (uint256) {\n    return archive ? getForkId(chainid) : getArchiveForkId(chainid);\n  }\n\n  function getForkId(uint128 chainid) private returns (uint256) {\n    if (forkIds[chainid] == 0) {\n      if (chainid == BSC_MAINNET) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"bsc\")) + 100;\n      } else if (chainid == BSC_CHAPEL) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"bsc_chapel\")) + 100;\n      } else if (chainid == POLYGON_MAINNET) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"polygon\")) + 100;\n      } else if (chainid == NEON_MAINNET) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"neon\")) + 100;\n      } else if (chainid == ARBITRUM_ONE) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"arbitrum\")) + 100;\n      } else if (chainid == ETHEREUM_MAINNET) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"ethereum\")) + 100;\n      } else if (chainid == LINEA_MAINNET) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"linea\")) + 100;\n      } else if (chainid == ZKEVM_MAINNET) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"zkevm\")) + 100;\n      } else if (chainid == MODE_MAINNET) {\n        forkIds[chainid] = vm.createFork(vm.rpcUrl(\"mode\")) + 100;\n      }\n    }\n\n    return forkIds[chainid] - 100;\n  }\n\n  function getArchiveForkId(uint128 chainid) private returns (uint256) {\n    // store the archive rpc urls in the forkIds mapping at an offset\n    uint128 chainidWithOffset = chainid + type(uint64).max;\n    if (forkIds[chainidWithOffset] == 0) {\n      if (chainid == BSC_MAINNET) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"bsc_archive\")) + 100;\n      } else if (chainid == BSC_CHAPEL) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"bsc_chapel_archive\")) + 100;\n      } else if (chainid == POLYGON_MAINNET) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"polygon_archive\")) + 100;\n      } else if (chainid == NEON_MAINNET) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"neon_archive\")) + 100;\n      } else if (chainid == ARBITRUM_ONE) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"arbitrum_archive\")) + 100;\n      } else if (chainid == ETHEREUM_MAINNET) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"ethereum_archive\")) + 100;\n      } else if (chainid == LINEA_MAINNET) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"linea_archive\")) + 100;\n      } else if (chainid == ZKEVM_MAINNET) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"zkevm_archive\")) + 100;\n      } else if (chainid == MODE_MAINNET) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"mode_archive\")) + 100;\n      } else if (chainid == BASE_MAINNET) {\n        forkIds[chainidWithOffset] = vm.createFork(vm.rpcUrl(\"base_archive\")) + 100;\n      }\n    }\n    return forkIds[chainidWithOffset] - 100;\n  }\n\n  function afterForkSetUp() internal virtual {}\n\n  function configureAddressesProvider(uint128 chainid) private {\n    if (chainid == BSC_MAINNET) {\n      ap = AddressesProvider(address(0));\n    } else if (chainid == BSC_CHAPEL) {\n      ap = AddressesProvider(0x3dc8CE9f581e49B9E5304CF580940ad341F64c3f);\n    } else if (block.chainid == POLYGON_MAINNET) {\n      ap = AddressesProvider(0xE31baC0B582AA248c0017F87F24087cEa7A55E26);\n    } else if (chainid == NEON_MAINNET) {\n      ap = AddressesProvider(0xF4C60F6ac6b3AF54044757a1a54D76EEe28244CE);\n    } else if (chainid == ARBITRUM_ONE) {\n      ap = AddressesProvider(0x3B12BA992259Fb3855C4E1D452a754dCa2E276fC);\n    } else if (chainid == LINEA_MAINNET) {\n      ap = AddressesProvider(0x914694DA0bED80e74ef1a28029f016119782C0f1);\n    } else if (chainid == ZKEVM_MAINNET) {\n      ap = AddressesProvider(0x27aA55A3D55959261e119d75256aadAB79aE897C);\n    } else if (chainid == MODE_MAINNET) {\n      ap = AddressesProvider(0xb0033576a9E444Dd801d5B69e1b63DBC459A6115);\n    } else {\n      dpa = new ProxyAdmin();\n      AddressesProvider logic = new AddressesProvider();\n      TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(\n        address(logic),\n        address(dpa),\n        abi.encodeWithSelector(ap.initialize.selector, address(this))\n      );\n      ap = AddressesProvider(address(proxy));\n      ap.setAddress(\"DefaultProxyAdmin\", address(dpa));\n    }\n    dpa = ProxyAdmin(ap.getAddress(\"DefaultProxyAdmin\"));\n    if (ap.owner() == address(0)) {\n      ap.initialize(address(this));\n    }\n    if (ap.getAddress(\"deployer\") == address(0)) {\n      vm.prank(ap.owner());\n      ap.setAddress(\"deployer\", 0x1155b614971f16758C92c4890eD338C9e3ede6b7);\n    }\n  }\n\n  function diff(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a > b) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  }\n\n  function compareStrings(string memory a, string memory b) public pure returns (bool) {\n    return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n  }\n\n  function asArray(address value) public pure returns (address[] memory) {\n    address[] memory array = new address[](1);\n    array[0] = value;\n    return array;\n  }\n\n  function asArray(address value0, address value1) public pure returns (address[] memory) {\n    address[] memory array = new address[](2);\n    array[0] = value0;\n    array[1] = value1;\n    return array;\n  }\n\n  function asArray(\n    address value0,\n    address value1,\n    address value2\n  ) public pure returns (address[] memory) {\n    address[] memory array = new address[](3);\n    array[0] = value0;\n    array[1] = value1;\n    array[2] = value2;\n    return array;\n  }\n\n  function asArray(bool value) public pure returns (bool[] memory) {\n    bool[] memory array = new bool[](1);\n    array[0] = value;\n    return array;\n  }\n\n  function asArray(uint256 value0, uint256 value1) public pure returns (uint256[] memory) {\n    uint256[] memory array = new uint256[](2);\n    array[0] = value0;\n    array[1] = value1;\n    return array;\n  }\n\n  function asArray(uint256 value) public pure returns (uint256[] memory) {\n    uint256[] memory array = new uint256[](1);\n    array[0] = value;\n    return array;\n  }\n\n  function asArray(bytes memory value) public pure returns (bytes[] memory) {\n    bytes[] memory array = new bytes[](1);\n    array[0] = value;\n    return array;\n  }\n\n  function asArray(bytes memory value0, bytes memory value1) public pure returns (bytes[] memory) {\n    bytes[] memory array = new bytes[](2);\n    array[0] = value0;\n    array[1] = value1;\n    return array;\n  }\n\n  function asArray(\n    bytes memory value0,\n    bytes memory value1,\n    bytes memory value2\n  ) public pure returns (bytes[] memory) {\n    bytes[] memory array = new bytes[](3);\n    array[0] = value0;\n    array[1] = value1;\n    array[2] = value2;\n    return array;\n  }\n\n  function sqrt(uint256 x) public pure returns (uint256) {\n    if (x == 0) return 0;\n    uint256 xx = x;\n    uint256 r = 1;\n\n    if (xx >= 0x100000000000000000000000000000000) {\n      xx >>= 128;\n      r <<= 64;\n    }\n    if (xx >= 0x10000000000000000) {\n      xx >>= 64;\n      r <<= 32;\n    }\n    if (xx >= 0x100000000) {\n      xx >>= 32;\n      r <<= 16;\n    }\n    if (xx >= 0x10000) {\n      xx >>= 16;\n      r <<= 8;\n    }\n    if (xx >= 0x100) {\n      xx >>= 8;\n      r <<= 4;\n    }\n    if (xx >= 0x10) {\n      xx >>= 4;\n      r <<= 2;\n    }\n    if (xx >= 0x8) {\n      r <<= 1;\n    }\n\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1;\n    r = (r + x / r) >> 1; // Seven iterations should be enough\n    uint256 r1 = x / r;\n    return (r < r1 ? r : r1);\n  }\n}\n"
    },
    "contracts/test/DevTesting.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { TransparentUpgradeableProxy } from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport \"./config/BaseTest.t.sol\";\nimport { IonicComptroller } from \"../compound/ComptrollerInterface.sol\";\nimport { ComptrollerFirstExtension } from \"../compound/ComptrollerFirstExtension.sol\";\nimport { CErc20PluginRewardsDelegate } from \"../compound/CErc20PluginRewardsDelegate.sol\";\nimport { Unitroller } from \"../compound/Unitroller.sol\";\nimport { DiamondExtension } from \"../ionic/DiamondExtension.sol\";\nimport { ICErc20 } from \"../compound/CTokenInterfaces.sol\";\nimport { ISwapRouter } from \"../external/uniswap/ISwapRouter.sol\";\nimport { RedstoneAdapterPriceOracle } from \"../oracles/default/RedstoneAdapterPriceOracle.sol\";\nimport { RedstoneAdapterPriceOracleWrsETH } from \"../oracles/default/RedstoneAdapterPriceOracleWrsETH.sol\";\nimport { RedstoneAdapterPriceOracleWeETH } from \"../oracles/default/RedstoneAdapterPriceOracleWeETH.sol\";\nimport { MasterPriceOracle, BasePriceOracle } from \"../oracles/MasterPriceOracle.sol\";\nimport { PoolLens } from \"../PoolLens.sol\";\nimport { PoolLensSecondary } from \"../PoolLensSecondary.sol\";\nimport { JumpRateModel } from \"../compound/JumpRateModel.sol\";\nimport { LeveredPositionsLens } from \"../ionic/levered/LeveredPositionsLens.sol\";\nimport { IonicFlywheelLensRouter, IonicComptroller, ICErc20, ERC20, IPriceOracle_IFLR } from \"../ionic/strategies/flywheel/IonicFlywheelLensRouter.sol\";\nimport { PoolDirectory } from \"../PoolDirectory.sol\";\n\nimport \"forge-std/console.sol\";\n\nstruct HealthFactorVars {\n  uint256 usdcSupplied;\n  uint256 wethSupplied;\n  uint256 ezEthSuppled;\n  uint256 stoneSupplied;\n  uint256 wbtcSupplied;\n  uint256 weEthSupplied;\n  uint256 merlinBTCSupplied;\n  uint256 usdcBorrowed;\n  uint256 wethBorrowed;\n  uint256 ezEthBorrowed;\n  uint256 stoneBorrowed;\n  uint256 wbtcBorrowed;\n  uint256 weEthBorrowed;\n  uint256 merlinBTCBorrowed;\n  ICErc20 testCToken;\n  address testUnderlying;\n  uint256 amountBorrow;\n}\n\ncontract DevTesting is BaseTest {\n  IonicComptroller pool = IonicComptroller(0xFB3323E24743Caf4ADD0fDCCFB268565c0685556);\n  PoolLensSecondary lens2 = PoolLensSecondary(0x7Ea7BB80F3bBEE9b52e6Ed3775bA06C9C80D4154);\n  PoolLens lens = PoolLens(0x70BB19a56BfAEc65aE861E6275A90163AbDF36a6);\n  LeveredPositionsLens levPosLens;\n\n  address deployer = 0x1155b614971f16758C92c4890eD338C9e3ede6b7;\n  address multisig = 0x8Fba84867Ba458E7c6E2c024D2DE3d0b5C3ea1C2;\n\n  ICErc20 wethMarket;\n  ICErc20 usdcMarket;\n  ICErc20 usdtMarket;\n  ICErc20 wbtcMarket;\n  ICErc20 ezEthMarket;\n  ICErc20 stoneMarket;\n  ICErc20 weEthMarket;\n  ICErc20 merlinBTCMarket;\n\n  // mode mainnet assets\n  address WETH = 0x4200000000000000000000000000000000000006;\n  address USDC = 0xd988097fb8612cc24eeC14542bC03424c656005f;\n  address USDT = 0xf0F161fDA2712DB8b566946122a5af183995e2eD;\n  address WBTC = 0xcDd475325D6F564d27247D1DddBb0DAc6fA0a5CF;\n  address UNI = 0x3e7eF8f50246f725885102E8238CBba33F276747;\n  address SNX = 0x9e5AAC1Ba1a2e6aEd6b32689DFcF62A509Ca96f3;\n  address LINK = 0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb;\n  address DAI = 0xE7798f023fC62146e8Aa1b36Da45fb70855a77Ea;\n  address BAL = 0xD08a2917653d4E460893203471f0000826fb4034;\n  address AAVE = 0x7c6b91D9Be155A6Db01f749217d76fF02A7227F2;\n  address weETH = 0x04C0599Ae5A44757c0af6F9eC3b93da8976c150A;\n  address merlinBTC = 0x59889b7021243dB5B1e065385F918316cD90D46c;\n\n  function afterForkSetUp() internal override {\n    super.afterForkSetUp();\n\n    if (block.chainid == MODE_MAINNET) {\n      wethMarket = ICErc20(0x71ef7EDa2Be775E5A7aa8afD02C45F059833e9d2);\n      usdcMarket = ICErc20(0x2BE717340023C9e14C1Bb12cb3ecBcfd3c3fB038);\n      usdtMarket = ICErc20(0x94812F2eEa03A49869f95e1b5868C6f3206ee3D3);\n      wbtcMarket = ICErc20(0xd70254C3baD29504789714A7c69d60Ec1127375C);\n      ezEthMarket = ICErc20(0x59e710215d45F584f44c0FEe83DA6d43D762D857);\n      stoneMarket = ICErc20(0x959FA710CCBb22c7Ce1e59Da82A247e686629310);\n      weEthMarket = ICErc20(0xA0D844742B4abbbc43d8931a6Edb00C56325aA18);\n      merlinBTCMarket = ICErc20(0x19F245782b1258cf3e11Eda25784A378cC18c108);\n    } else {\n      ICErc20[] memory markets = pool.getAllMarkets();\n      wethMarket = markets[0];\n      usdcMarket = markets[1];\n    }\n    levPosLens = LeveredPositionsLens(ap.getAddress(\"LeveredPositionsLens\"));\n  }\n\n  function testModePoolBorrowers() public debuggingOnly fork(MODE_MAINNET) {\n    emit log_named_array(\"borrowers\", pool.getAllBorrowers());\n  }\n\n  function testModeLiquidationShortfall() public debuggingOnly fork(MODE_MAINNET) {\n    (uint256 err, uint256 collateralValue, uint256 liquidity, uint256 shortfall) = pool.getAccountLiquidity(\n      0xa75F9C8246f7269279bE4c969e7Bc6Eb619cC204\n    );\n\n    emit log_named_uint(\"err\", err);\n    emit log_named_uint(\"collateralValue\", collateralValue);\n    emit log_named_uint(\"liquidity\", liquidity);\n    emit log_named_uint(\"shortfall\", shortfall);\n  }\n\n  function testModeHealthFactor() public debuggingOnly fork(MODE_MAINNET) {\n    address rahul = 0x5A9e792143bf2708b4765C144451dCa54f559a19;\n\n    uint256 wethSupplied = wethMarket.balanceOfUnderlying(rahul);\n    uint256 usdcSupplied = usdcMarket.balanceOfUnderlying(rahul);\n    uint256 usdtSupplied = usdtMarket.balanceOfUnderlying(rahul);\n    uint256 wbtcSupplied = wbtcMarket.balanceOfUnderlying(rahul);\n    // emit log_named_uint(\"wethSupplied\", wethSupplied);\n    emit log_named_uint(\"usdcSupplied\", usdcSupplied);\n    emit log_named_uint(\"usdtSupplied\", usdtSupplied);\n    emit log_named_uint(\"wbtcSupplied\", wbtcSupplied);\n    emit log_named_uint(\"value of wethSupplied\", wethSupplied * pool.oracle().getUnderlyingPrice(wethMarket));\n    emit log_named_uint(\"value of usdcSupplied\", usdcSupplied * pool.oracle().getUnderlyingPrice(usdcMarket));\n    emit log_named_uint(\"value of usdtSupplied\", usdtSupplied * pool.oracle().getUnderlyingPrice(usdtMarket));\n    emit log_named_uint(\"value of wbtcSupplied\", wbtcSupplied * pool.oracle().getUnderlyingPrice(wbtcMarket));\n\n    PoolLens newImpl = new PoolLens();\n    //    TransparentUpgradeableProxy proxy = TransparentUpgradeableProxy(payable(address(lens)));\n    //    vm.prank(dpa.owner());\n    //    proxy.upgradeTo(address(newImpl));\n\n    uint256 hf = newImpl.getHealthFactor(rahul, pool);\n\n    emit log_named_uint(\"hf\", hf);\n  }\n\n  function testNetAprMode() public debuggingOnly forkAtBlock(MODE_MAINNET, 8479829) {\n    address user = 0x30D5047e839f079bDE1Ab16b34668f57391DacB3;\n    int256 blocks = 30 * 24 * 365 * 60;\n    IonicFlywheelLensRouter lensRouter = new IonicFlywheelLensRouter(\n      PoolDirectory(0x39C353Cf9041CcF467A04d0e78B63d961E81458a)\n    );\n    int256 apr = lensRouter.getUserNetApr(user, blocks);\n\n    emit log_named_int(\"apr\", apr);\n  }\n\n  function testModeUsdcBorrowCaps() public debuggingOnly fork(MODE_MAINNET) {\n    _testModeBorrowCaps(usdcMarket);\n  }\n\n  function testHypotheticalPosition() public debuggingOnly forkAtBlock(MODE_MAINNET, 8028296) {\n    HealthFactorVars memory vars;\n\n    address wolfy = 0x7d922bf0975424b3371074f54cC784AF738Dac0D;\n    address usdcWhale = 0x70FF197c32E922700d3ff2483D250c645979855d;\n    address wbtcWhale = 0xBD8CCf3ebE4CC2D57962cdC2756B143ce0135a6B;\n    address wethWhale = 0xD746A2a6048C5D3AFF5766a8c4A0C8cFD2311745;\n\n    address whale = wbtcWhale;\n    vars.testCToken = wethMarket;\n    vars.testUnderlying = WETH;\n    vars.amountBorrow = 1e18 / 2;\n\n    address[] memory cTokens = new address[](1);\n\n    vm.startPrank(usdcWhale);\n    ERC20(USDC).transfer(wolfy, ERC20(USDC).balanceOf(usdcWhale));\n    vm.stopPrank();\n\n    vm.startPrank(wbtcWhale);\n    ERC20(WBTC).transfer(wolfy, ERC20(WBTC).balanceOf(wbtcWhale));\n    vm.stopPrank();\n\n    vm.startPrank(wethWhale);\n    ERC20(WETH).transfer(wolfy, ERC20(WETH).balanceOf(wethWhale));\n    vm.stopPrank();\n\n    // emit log_named_uint(\"USDC balance\", ERC20(USDC).balanceOf(wolfy));\n    // emit log_named_uint(\"WBTC balance\", ERC20(WBTC).balanceOf(wolfy));\n    // emit log_named_uint(\"WETH balance\", ERC20(WETH).balanceOf(wolfy));\n\n    vm.startPrank(wolfy);\n\n    ERC20(USDC).approve(address(usdcMarket), ERC20(USDC).balanceOf(wolfy));\n    usdcMarket.mint(ERC20(USDC).balanceOf(wolfy));\n    cTokens[0] = address(usdcMarket);\n    pool.enterMarkets(cTokens);\n\n    ERC20(WBTC).approve(address(wbtcMarket), ERC20(WBTC).balanceOf(wolfy));\n    wbtcMarket.mint(ERC20(WBTC).balanceOf(wolfy));\n    cTokens[0] = address(wbtcMarket);\n    pool.enterMarkets(cTokens);\n\n    ERC20(WETH).approve(address(wethMarket), ERC20(WETH).balanceOf(wolfy));\n    wethMarket.mint(ERC20(WETH).balanceOf(wolfy));\n    cTokens[0] = address(wethMarket);\n    pool.enterMarkets(cTokens);\n\n    wethMarket.borrow(1e18);\n\n    vm.stopPrank();\n\n    vars.usdcSupplied = usdcMarket.balanceOfUnderlying(wolfy);\n    vars.wethSupplied = wethMarket.balanceOfUnderlying(wolfy);\n    vars.ezEthSuppled = ezEthMarket.balanceOfUnderlying(wolfy);\n    vars.stoneSupplied = stoneMarket.balanceOfUnderlying(wolfy);\n    vars.wbtcSupplied = wbtcMarket.balanceOfUnderlying(wolfy);\n    vars.weEthSupplied = weEthMarket.balanceOfUnderlying(wolfy);\n    vars.merlinBTCSupplied = merlinBTCMarket.balanceOfUnderlying(wolfy);\n\n    vars.usdcBorrowed = usdcMarket.borrowBalanceCurrent(wolfy);\n    vars.wethBorrowed = wethMarket.borrowBalanceCurrent(wolfy);\n    vars.ezEthBorrowed = ezEthMarket.borrowBalanceCurrent(wolfy);\n    vars.stoneBorrowed = stoneMarket.borrowBalanceCurrent(wolfy);\n    vars.wbtcBorrowed = wbtcMarket.borrowBalanceCurrent(wolfy);\n    vars.weEthBorrowed = weEthMarket.borrowBalanceCurrent(wolfy);\n    vars.merlinBTCBorrowed = merlinBTCMarket.borrowBalanceCurrent(wolfy);\n\n    emit log_named_uint(\"usdcSupplied\", vars.usdcSupplied);\n    emit log_named_uint(\"wethSupplied\", vars.wethSupplied);\n    emit log_named_uint(\"ezEthSupplied\", vars.ezEthSuppled);\n    emit log_named_uint(\"stoneSupplied\", vars.stoneSupplied);\n    emit log_named_uint(\"wbtcSupplied\", vars.wbtcSupplied);\n    emit log_named_uint(\"weEthSupplied\", vars.weEthSupplied);\n    emit log_named_uint(\"merlinBTCSupplied\", vars.merlinBTCSupplied);\n\n    emit log_named_uint(\"-------------------------------------------------\", 0);\n    emit log_named_uint(\"usdcBorrowed\", vars.usdcBorrowed);\n    emit log_named_uint(\"wethBorrowed\", vars.wethBorrowed);\n    emit log_named_uint(\"ezEthBorrowed\", vars.ezEthBorrowed);\n    emit log_named_uint(\"stoneBorrowed\", vars.stoneBorrowed);\n    emit log_named_uint(\"wbtcBorrowed\", vars.wbtcBorrowed);\n    emit log_named_uint(\"weEthBorrowed\", vars.weEthBorrowed);\n    emit log_named_uint(\"merlinBTCBorrowed\", vars.merlinBTCBorrowed);\n\n    // emit log_named_uint(\"value of usdcSupplied\", vars.usdcSupplied * pool.oracle().getUnderlyingPrice(usdcMarket));\n    // emit log_named_uint(\"value of wethSupplied\", vars.wethSupplied * pool.oracle().getUnderlyingPrice(wethMarket));\n    // emit log_named_uint(\"value of ezEthSupplied\", vars.ezEthSuppled * pool.oracle().getUnderlyingPrice(ezEthMarket));\n    // emit log_named_uint(\"value of stoneSupplied\", vars.stoneSupplied * pool.oracle().getUnderlyingPrice(stoneMarket));\n    // emit log_named_uint(\"value of wbtcSupplied\", vars.wbtcSupplied * pool.oracle().getUnderlyingPrice(wbtcMarket));\n\n    // emit log_named_uint(\"value of usdcBorrowed\", vars.usdcBorrowed * pool.oracle().getUnderlyingPrice(usdcMarket));\n    // emit log_named_uint(\"value of wethBorrowed\", vars.wethBorrowed * pool.oracle().getUnderlyingPrice(wethMarket));\n    // emit log_named_uint(\"value of ezEthBorrowed\", vars.ezEthBorrowed * pool.oracle().getUnderlyingPrice(ezEthMarket));\n    // emit log_named_uint(\"value of stoneBorrowed\", vars.stoneBorrowed * pool.oracle().getUnderlyingPrice(stoneMarket));\n    // emit log_named_uint(\"value of wbtcBorrowed\", vars.wbtcBorrowed * pool.oracle().getUnderlyingPrice(wbtcMarket));\n\n    vm.startPrank(whale);\n    ERC20(vars.testUnderlying).transfer(wolfy, ERC20(vars.testUnderlying).balanceOf(whale));\n    vm.stopPrank();\n\n    uint256 hf = lens.getHealthFactor(wolfy, pool);\n    uint256 hypothetical = lens.getHealthFactorHypothetical(\n      pool,\n      wolfy,\n      address(vars.testCToken),\n      0,\n      0,\n      vars.amountBorrow\n    );\n\n    (uint256 err, uint256 collateralValue, uint256 liquidity, uint256 shortfall) = pool.getAccountLiquidity(wolfy);\n\n    emit log_named_uint(\"-------------------------------------------------\", 0);\n    emit log_named_uint(\"Collateral Value Before\", collateralValue);\n    emit log_named_uint(\"Liquidity Before\", liquidity);\n    emit log_named_uint(\"hf before\", hf);\n    emit log_named_uint(\"hypothetical hf\", hypothetical);\n\n    vm.startPrank(wolfy);\n    ERC20(vars.testUnderlying).approve(address(vars.testCToken), vars.amountBorrow);\n    vars.testCToken.repayBorrow(vars.amountBorrow);\n    vm.stopPrank();\n\n    uint256 hfAfter = lens.getHealthFactor(wolfy, pool);\n    (err, collateralValue, liquidity, shortfall) = pool.getAccountLiquidity(wolfy);\n\n    emit log_named_uint(\"-------------------------------------------------\", 0);\n    emit log_named_uint(\"Collateral Value After\", collateralValue);\n    emit log_named_uint(\"Liquidity After\", liquidity);\n    emit log_named_uint(\"hf after\", hfAfter);\n    emit log_named_uint(\"user balance after\", ERC20(vars.testUnderlying).balanceOf(wolfy));\n    emit log_named_uint(\"new borrow balance after repay\", vars.testCToken.borrowBalanceCurrent(wolfy));\n  }\n\n  function testModeUsdtBorrowCaps() public debuggingOnly fork(MODE_MAINNET) {\n    _testModeBorrowCaps(usdtMarket);\n  }\n\n  function testModeWethBorrowCaps() public debuggingOnly fork(MODE_MAINNET) {\n    _testModeBorrowCaps(wethMarket);\n    wethMarket.accrueInterest();\n    _testModeBorrowCaps(wethMarket);\n  }\n\n  function _testModeBorrowCaps(ICErc20 market) internal {\n    uint256 borrowCapUsdc = pool.borrowCaps(address(market));\n    uint256 totalBorrowsCurrent = market.totalBorrowsCurrent();\n\n    uint256 wethBorrowAmount = 154753148031252;\n    console.log(\"borrowCapUsdc %e\", borrowCapUsdc);\n    console.log(\"totalBorrowsCurrent %e\", totalBorrowsCurrent);\n    console.log(\"new totalBorrowsCurrent %e\", totalBorrowsCurrent + wethBorrowAmount);\n  }\n\n  function testMarketMember() public debuggingOnly fork(MODE_MAINNET) {\n    address rahul = 0x5A9e792143bf2708b4765C144451dCa54f559a19;\n    ICErc20[] memory markets = pool.getAllMarkets();\n\n    for (uint256 i = 0; i < markets.length; i++) {\n      if (pool.checkMembership(rahul, markets[i])) {\n        emit log(\"is a member\");\n      } else {\n        emit log(\"NOT a member\");\n      }\n    }\n  }\n\n  function testGetCashError() public debuggingOnly fork(MODE_MAINNET) {\n    ICErc20 market = ICErc20(0x49950319aBE7CE5c3A6C90698381b45989C99b46);\n    market.getCash();\n  }\n\n  function testWrsEthBalanceOfError() public debuggingOnly fork(MODE_MAINNET) {\n    address wrsEthMarketAddress = 0x49950319aBE7CE5c3A6C90698381b45989C99b46;\n    ERC20 wrsEth = ERC20(0xe7903B1F75C534Dd8159b313d92cDCfbC62cB3Cd);\n    wrsEth.balanceOf(0x1155b614971f16758C92c4890eD338C9e3ede6b7);\n  }\n\n  function testModeRepay() public debuggingOnly fork(MODE_MAINNET) {\n    address user = 0x1A3C4E9B49e4fc595fB7e5f723159bA73a9426e7;\n    ICErc20 market = usdcMarket;\n    ERC20 asset = ERC20(market.underlying());\n\n    uint256 borrowBalance = market.borrowBalanceCurrent(user);\n    emit log_named_uint(\"borrowBalance\", borrowBalance);\n\n    vm.startPrank(user);\n    asset.approve(address(market), borrowBalance);\n    uint256 err = market.repayBorrow(borrowBalance / 2);\n\n    emit log_named_uint(\"error\", err);\n  }\n\n  function testAssetsPrices() public debuggingOnly fork(MODE_MAINNET) {\n    MasterPriceOracle mpo = MasterPriceOracle(ap.getAddress(\"MasterPriceOracle\"));\n\n    emit log_named_uint(\"WETH price\", mpo.price(WETH));\n    emit log_named_uint(\"USDC price\", mpo.price(USDC));\n    emit log_named_uint(\"USDT price\", mpo.price(USDT));\n    emit log_named_uint(\"UNI price\", mpo.price(UNI));\n    emit log_named_uint(\"SNX price\", mpo.price(SNX));\n    emit log_named_uint(\"LINK price\", mpo.price(LINK));\n    emit log_named_uint(\"DAI price\", mpo.price(DAI));\n    emit log_named_uint(\"BAL price\", mpo.price(BAL));\n    emit log_named_uint(\"AAVE price\", mpo.price(AAVE));\n    emit log_named_uint(\"WBTC price\", mpo.price(WBTC));\n  }\n\n  function testDeployedMarkets() public debuggingOnly fork(MODE_MAINNET) {\n    ICErc20[] memory markets = pool.getAllMarkets();\n\n    for (uint8 i = 0; i < markets.length; i++) {\n      emit log_named_address(\"market\", address(markets[i]));\n      emit log(markets[i].symbol());\n      emit log(markets[i].name());\n    }\n  }\n\n  function testDisableCollateralUsdc() public debuggingOnly fork(MODE_MAINNET) {\n    address user = 0xF70CBE91fB1b1AfdeB3C45Fb8CDD2E1249b5b75E;\n    address usdcMarketAddr = 0x2BE717340023C9e14C1Bb12cb3ecBcfd3c3fB038;\n\n    vm.startPrank(user);\n\n    uint256 borrowed = ICErc20(usdcMarketAddr).borrowBalanceCurrent(user);\n\n    emit log_named_uint(\"borrowed\", borrowed);\n\n    pool.exitMarket(usdcMarketAddr);\n  }\n\n  function testBorrowRateAtRatio() public debuggingOnly fork(MODE_MAINNET) {\n    uint256 rate = levPosLens.getBorrowRateAtRatio(wethMarket, ezEthMarket, 9988992945501686, 2e18);\n    emit log_named_uint(\"borrow rate at ratio\", rate);\n  }\n\n  function testAssetAsCollateralCap() public debuggingOnly fork(MODE_MAINNET) {\n    address MODE_EZETH = 0x2416092f143378750bb29b79eD961ab195CcEea5;\n    address ezEthWhale = 0x2344F131B07E6AFd943b0901C55898573F0d1561;\n\n    vm.startPrank(multisig);\n    uint256 errCode = pool._deployMarket(\n      1, //delegateType\n      abi.encode(\n        MODE_EZETH,\n        address(pool),\n        ap.getAddress(\"FeeDistributor\"),\n        0x21a455cEd9C79BC523D4E340c2B97521F4217817, // irm - jump rate model on mode\n        \"Ionic Renzo Restaked ETH\",\n        \"ionezETH\",\n        0.10e18,\n        0.10e18\n      ),\n      \"\",\n      0.70e18\n    );\n    vm.stopPrank();\n    require(errCode == 0, \"error deploying market\");\n\n    ICErc20[] memory markets = pool.getAllMarkets();\n    ICErc20 ezEthMarket = markets[markets.length - 1];\n\n    //    uint256 cap = pool.getAssetAsCollateralValueCap(ezEthMarket, usdcMarket, false, deployer);\n    uint256 cap = pool.supplyCaps(address(ezEthMarket));\n    require(cap == 0, \"non-zero cap\");\n\n    vm.startPrank(ezEthWhale);\n    ERC20(MODE_EZETH).approve(address(ezEthMarket), 1e36);\n    errCode = ezEthMarket.mint(1e18);\n    require(errCode == 0, \"should be unable to supply\");\n  }\n\n  function testNewStoneMarketCapped() public debuggingOnly fork(MODE_MAINNET) {\n    address MODE_STONE = 0x80137510979822322193FC997d400D5A6C747bf7;\n    address stoneWhale = 0x76486cbED5216C82d26Ee60113E48E06C189541A;\n\n    address redstoneOracleAddress = 0x63A1531a06F0Ac597a0DfA5A516a37073c3E1e0a;\n    RedstoneAdapterPriceOracle oracle = RedstoneAdapterPriceOracle(redstoneOracleAddress);\n    MasterPriceOracle mpo = MasterPriceOracle(ap.getAddress(\"MasterPriceOracle\"));\n\n    BasePriceOracle[] memory oracles = new BasePriceOracle[](1);\n    oracles[0] = oracle;\n    vm.prank(mpo.admin());\n    mpo.add(asArray(MODE_STONE), oracles);\n\n    vm.startPrank(multisig);\n    uint256 errCode = pool._deployMarket(\n      1, //delegateType\n      abi.encode(\n        MODE_STONE,\n        address(pool),\n        ap.getAddress(\"FeeDistributor\"),\n        0x21a455cEd9C79BC523D4E340c2B97521F4217817, // irm - jump rate model on mode\n        \"Ionic StakeStone Ether\",\n        \"ionSTONE\",\n        0.10e18,\n        0.10e18\n      ),\n      \"\",\n      0.70e18\n    );\n    vm.stopPrank();\n    require(errCode == 0, \"error deploying market\");\n\n    ICErc20[] memory markets = pool.getAllMarkets();\n    ICErc20 stoneMarket = markets[markets.length - 1];\n\n    //    uint256 cap = pool.getAssetAsCollateralValueCap(stoneMarket, usdcMarket, false, deployer);\n    uint256 cap = pool.supplyCaps(address(stoneMarket));\n    require(cap == 0, \"non-zero cap\");\n\n    vm.startPrank(stoneWhale);\n    ERC20(MODE_STONE).approve(address(stoneMarket), 1e36);\n    vm.expectRevert(\"not authorized\");\n    errCode = stoneMarket.mint(1e18);\n    //require(errCode != 0, \"should be unable to supply\");\n  }\n\n  function testRegisterSFS() public debuggingOnly fork(MODE_MAINNET) {\n    emit log_named_address(\"pool admin\", pool.admin());\n\n    vm.startPrank(multisig);\n    pool.registerInSFS();\n\n    ICErc20[] memory markets = pool.getAllMarkets();\n\n    for (uint8 i = 0; i < markets.length; i++) {\n      markets[i].registerInSFS();\n    }\n  }\n\n  function upgradePool() internal {\n    ComptrollerFirstExtension newComptrollerExtension = new ComptrollerFirstExtension();\n\n    Unitroller asUnitroller = Unitroller(payable(address(pool)));\n\n    // upgrade to the new comptroller extension\n    vm.startPrank(asUnitroller.admin());\n    asUnitroller._registerExtension(newComptrollerExtension, DiamondExtension(asUnitroller._listExtensions()[1]));\n\n    //asUnitroller._upgrade();\n    vm.stopPrank();\n  }\n\n  function testModeBorrowRate() public fork(MODE_MAINNET) {\n    //ICErc20[] memory markets = pool.getAllMarkets();\n\n    IonicComptroller pool = ezEthMarket.comptroller();\n    vm.prank(pool.admin());\n    ezEthMarket._setInterestRateModel(JumpRateModel(0x413aD59b80b1632988d478115a466bdF9B26743a));\n\n    JumpRateModel discRateModel = JumpRateModel(ezEthMarket.interestRateModel());\n\n    uint256 borrows = 200e18;\n    uint256 cash = 5000e18 - borrows;\n    uint256 reserves = 1e18;\n    uint256 rate = discRateModel.getBorrowRate(cash, borrows, reserves);\n\n    emit log_named_uint(\"rate per year %e\", rate * discRateModel.blocksPerYear());\n  }\n\n  function testModeFetchBorrowers() public fork(MODE_MAINNET) {\n    //    address[] memory borrowers = pool.getAllBorrowers();\n    //    emit log_named_uint(\"borrowers.len\", borrowers.length);\n\n    //upgradePool();\n\n    (uint256 totalPages, address[] memory borrowersPage) = pool.getPaginatedBorrowers(1, 0);\n\n    emit log_named_uint(\"total pages with 300 size (default)\", totalPages);\n\n    (totalPages, borrowersPage) = pool.getPaginatedBorrowers(totalPages - 1, 50);\n    emit log_named_array(\"last page of 300 borrowers\", borrowersPage);\n\n    (totalPages, borrowersPage) = pool.getPaginatedBorrowers(1, 50);\n    emit log_named_uint(\"total pages with 50 size\", totalPages);\n    emit log_named_array(\"page of 50 borrowers\", borrowersPage);\n\n    //    for (uint256 i = 0; i < borrowers.length; i++) {\n    //      (\n    //        uint256 error,\n    //        uint256 collateralValue,\n    //        uint256 liquidity,\n    //        uint256 shortfall\n    //      ) = pool.getAccountLiquidity(borrowers[i]);\n    //\n    //      emit log(\"\");\n    //      emit log_named_address(\"user\", borrowers[i]);\n    //      emit log_named_uint(\"collateralValue\", collateralValue);\n    //      if (liquidity > 0) emit log_named_uint(\"liquidity\", liquidity);\n    //      if (shortfall > 0) emit log_named_uint(\"SHORTFALL\", shortfall);\n    //    }\n  }\n\n  function testModeAccountLiquidity() public debuggingOnly fork(MODE_MAINNET) {\n    _testAccountLiquidity(0x0C387030a5D3AcDcde1A8DDaF26df31BbC1CE763);\n  }\n\n  function _testAccountLiquidity(address borrower) internal {\n    (uint256 error, uint256 collateralValue, uint256 liquidity, uint256 shortfall) = pool.getAccountLiquidity(borrower);\n\n    emit log(\"\");\n    emit log_named_address(\"user\", borrower);\n    emit log_named_uint(\"collateralValue\", collateralValue);\n    if (liquidity > 0) emit log_named_uint(\"liquidity\", liquidity);\n    if (shortfall > 0) emit log_named_uint(\"SHORTFALL\", shortfall);\n  }\n\n  function testModeDeployMarket() public debuggingOnly fork(MODE_MAINNET) {\n    address MODE_WEETH = 0x028227c4dd1e5419d11Bb6fa6e661920c519D4F5;\n    address weEthWhale = 0x6e55a90772B92f17f87Be04F9562f3faafd0cc38;\n\n    vm.startPrank(pool.admin());\n    uint256 errCode = pool._deployMarket(\n      1, //delegateType\n      abi.encode(\n        MODE_WEETH,\n        address(pool),\n        ap.getAddress(\"FeeDistributor\"),\n        0x21a455cEd9C79BC523D4E340c2B97521F4217817, // irm - jump rate model on mode\n        \"Ionic Wrapped eETH\",\n        \"ionweETH\",\n        0.10e18,\n        0.10e18\n      ),\n      \"\",\n      0.70e18\n    );\n    vm.stopPrank();\n    require(errCode == 0, \"error deploying market\");\n\n    ICErc20[] memory markets = pool.getAllMarkets();\n    ICErc20 weEthMarket = markets[markets.length - 1];\n\n    //    uint256 cap = pool.getAssetAsCollateralValueCap(weEthMarket, usdcMarket, false, deployer);\n    uint256 cap = pool.supplyCaps(address(weEthMarket));\n    require(cap == 0, \"non-zero cap\");\n\n    vm.startPrank(weEthWhale);\n    ERC20(MODE_WEETH).approve(address(weEthMarket), 1e36);\n    errCode = weEthMarket.mint(0.01e18);\n    require(errCode == 0, \"should be unable to supply\");\n  }\n\n  function testModeWrsETH() public debuggingOnly forkAtBlock(MODE_MAINNET, 6635923) {\n    address wrsEth = 0x4186BFC76E2E237523CBC30FD220FE055156b41F;\n    RedstoneAdapterPriceOracleWrsETH oracle = new RedstoneAdapterPriceOracleWrsETH(\n      0x7C1DAAE7BB0688C9bfE3A918A4224041c7177256\n    );\n    MasterPriceOracle mpo = MasterPriceOracle(ap.getAddress(\"MasterPriceOracle\"));\n\n    BasePriceOracle[] memory oracles = new BasePriceOracle[](1);\n    oracles[0] = oracle;\n    vm.prank(multisig);\n    mpo.add(asArray(wrsEth), oracles);\n\n    uint256 price = mpo.price(wrsEth);\n    emit log_named_uint(\"price of wrsEth\", price);\n  }\n\n  function testModeWeETH() public debuggingOnly forkAtBlock(MODE_MAINNET, 6861468) {\n    address weEth = 0x04C0599Ae5A44757c0af6F9eC3b93da8976c150A;\n    RedstoneAdapterPriceOracleWeETH oracle = new RedstoneAdapterPriceOracleWeETH(\n      0x7C1DAAE7BB0688C9bfE3A918A4224041c7177256\n    );\n    MasterPriceOracle mpo = MasterPriceOracle(ap.getAddress(\"MasterPriceOracle\"));\n\n    BasePriceOracle[] memory oracles = new BasePriceOracle[](1);\n    oracles[0] = oracle;\n    vm.prank(multisig);\n    mpo.add(asArray(weEth), oracles);\n\n    uint256 price = mpo.price(weEth);\n    emit log_named_uint(\"price of weEth\", price);\n    assertEq(price, 1036212437077011599);\n  }\n\n  function testPERLiquidation() public debuggingOnly forkAtBlock(MODE_MAINNET, 10255413) {\n    vm.prank(0x5Cc070844E98F4ceC5f2fBE1592fB1ed73aB7b48);\n    _functionCall(0xa12c1E460c06B1745EFcbfC9A1f666a8749B0e3A, hex\"20b72325000000000000000000000000f28570694a6c9cd0494955966ae75af61abf5a0700000000000000000000000000000000000000000000000001bc1214ed792fbb0000000000000000000000004341620757bee7eb4553912fafc963e59c949147000000000000000000000000c53edeafb6d502daec5a7015d67936cea0cd0f520000000000000000000000000000000000000000000000000000000000000000\", \"error in call\");\n  }\n\n  function testCtokenUpgrade() public debuggingOnly forkAtBlock(MODE_MAINNET, 10255413) {\n    CErc20PluginRewardsDelegate newImpl = new CErc20PluginRewardsDelegate();\n    TransparentUpgradeableProxy proxy = TransparentUpgradeableProxy(payable(address(wethMarket)));\n\n\n    (uint256[] memory poolIds, PoolDirectory.Pool[] memory pools) = PoolDirectory(0x39C353Cf9041CcF467A04d0e78B63d961E81458a).getActivePools();\n\n    emit log_named_uint(\"First Pool ID\", poolIds[0]);\n    emit log_named_uint(\"First Pool ID\", poolIds[1]);\n    emit log_named_string(\"First Pool Address\", pools[0].name);\n    emit log_named_string(\"First Pool Address\", pools[0].name);\n    emit log_named_address(\"First Pool Address\", pools[0].creator);\n    emit log_named_address(\"First Pool Address\", pools[1].creator);\n    emit log_named_address(\"First Pool Address\", pools[0].comptroller);\n    emit log_named_address(\"First Pool Address\", pools[1].comptroller);\n    //bytes32 bytesAtSlot = vm.load(address(proxy), 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103);\n    //address admin = address(uint160(uint256(bytesAtSlot)));\n    //vm.prank(admin);\n    //proxy.upgradeTo(address(newImpl));\n\n    //vm.prank(dpa.owner());\n    //proxy.upgradeTo(address(newImpl));\n  }\n\n  function _functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.call(data);\n\n    if (!success) {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n\n    return returndata;\n  }\n\n  function testRawCall() public debuggingOnly forkAtBlock(MODE_MAINNET, 7337902) {\n    address caller = 0x2b81E6C41636BaEa95a1Da5c688cCcd938f9Af33;\n    address target = 0x9B506A03bBFf2a842866b10BC6732da72640cd45;\n\n    ERC20(WETH).allowance(caller, target);\n\n    bytes\n      memory data = hex\"534da46000000000000000000000000059e710215d45f584f44c0fee83da6d43d762d8570000000000000000000000002be717340023c9e14c1bb12cb3ecbcfd3c3fb0380000000000000000000000002416092f143378750bb29b79ed961ab195cceea500000000000000000000000000000000000000000000000015faebcf6161ab5d00000000000000000000000000000000000000000000000029a2241af62c0000\";\n    vm.prank(caller);\n    _functionCall(target, data, \"raw call failed\");\n  }\n}\n"
    },
    "contracts/test/FLRTest.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"forge-std/Vm.sol\";\n\nimport \"./config/BaseTest.t.sol\";\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { Authority } from \"solmate/auth/Auth.sol\";\nimport { MockERC20 } from \"solmate/test/utils/mocks/MockERC20.sol\";\nimport { IERC20MetadataUpgradeable, IERC20Upgradeable } from \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\nimport { IFlywheelBooster } from \"../ionic/strategies/flywheel/IFlywheelBooster.sol\";\nimport { FlywheelStaticRewards } from \"../ionic/strategies/flywheel/rewards/FlywheelStaticRewards.sol\";\nimport { FuseFlywheelCore } from \"fuse-flywheel/FuseFlywheelCore.sol\";\n\nimport { CErc20 } from \"../compound/CToken.sol\";\nimport { IonicFlywheelLensRouter, IonicComptroller, ICErc20, ERC20, IPriceOracle_IFLR } from \"../ionic/strategies/flywheel/IonicFlywheelLensRouter.sol\";\nimport { IonicFlywheel } from \"../ionic/strategies/flywheel/IonicFlywheel.sol\";\nimport { PoolDirectory } from \"../PoolDirectory.sol\";\nimport { IonicFlywheelCore } from \"../ionic/strategies/flywheel/IonicFlywheelCore.sol\";\n\ncontract FLRTest is BaseTest {\n  address rewardToken;\n\n  IonicFlywheel flywheel;\n  FlywheelStaticRewards rewards;\n  IonicFlywheelLensRouter lensRouter;\n\n  PoolDirectory internal fpd;\n\n  function afterForkSetUp() internal override {\n    fpd = PoolDirectory(ap.getAddress(\"PoolDirectory\"));\n    lensRouter = new IonicFlywheelLensRouter(fpd);\n  }\n\n  function setUpFlywheel(\n    address _rewardToken,\n    address mkt,\n    IonicComptroller comptroller,\n    address admin\n  ) public {\n    flywheel = new IonicFlywheel();\n    flywheel.initialize(\n      ERC20(_rewardToken),\n      FlywheelStaticRewards(address(0)),\n      IFlywheelBooster(address(0)),\n      address(this)\n    );\n\n    rewards = new FlywheelStaticRewards(IonicFlywheelCore(address(flywheel)), address(this), Authority(address(0)));\n    flywheel.setFlywheelRewards(rewards);\n\n    flywheel.addStrategyForRewards(ERC20(mkt));\n\n    // add flywheel as rewardsDistributor to call flywheelPreBorrowAction / flywheelPreSupplyAction\n    vm.prank(admin);\n    require(comptroller._addRewardsDistributor(address(flywheel)) == 0);\n\n    // seed rewards to flywheel\n    deal(_rewardToken, address(rewards), 1_000_000 * (10**ERC20(_rewardToken).decimals()));\n\n    // Start reward distribution at 1 token per second\n    rewards.setRewardsInfo(\n      ERC20(mkt),\n      FlywheelStaticRewards.RewardsInfo({\n        rewardsPerSecond: uint224(789 * 10**ERC20(_rewardToken).decimals()),\n        rewardsEndTimestamp: 0\n      })\n    );\n  }\n\n  function testFuseFlywheelLensRouterBsc() public debuggingOnly fork(BSC_MAINNET) {\n    rewardToken = address(0x71be881e9C5d4465B3FfF61e89c6f3651E69B5bb); // BRZ\n    emit log_named_address(\"rewardToken\", address(rewardToken));\n    address mkt = 0x159A529c00CD4f91b65C54E77703EDb67B4942e4;\n    setUpFlywheel(rewardToken, mkt, IonicComptroller(0x5EB884651F50abc72648447dCeabF2db091e4117), ap.owner());\n    emit log_named_uint(\"mkt dec\", ERC20(mkt).decimals());\n\n    (uint224 index, uint32 lastUpdatedTimestamp) = flywheel.strategyState(ERC20(mkt));\n\n    emit log_named_uint(\"index\", index);\n    emit log_named_uint(\"lastUpdatedTimestamp\", lastUpdatedTimestamp);\n    emit log_named_uint(\"block.timestamp\", block.timestamp);\n    emit log_named_uint(\n      \"underlying price\",\n      IPriceOracle_IFLR(address(IonicComptroller(0x5EB884651F50abc72648447dCeabF2db091e4117).oracle())).price(\n        address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c)\n      )\n    );\n\n    vm.warp(block.timestamp + 10);\n\n    (uint224 rewardsPerSecond, uint32 rewardsEndTimestamp) = rewards.rewardsInfo(ERC20(mkt));\n\n    vm.prank(address(flywheel));\n    uint256 accrued = rewards.getAccruedRewards(ERC20(mkt), lastUpdatedTimestamp);\n\n    emit log_named_uint(\"accrued\", accrued);\n    emit log_named_uint(\"rewardsPerSecond\", rewardsPerSecond);\n    emit log_named_uint(\"rewardsEndTimestamp\", rewardsEndTimestamp);\n    emit log_named_uint(\"mkt ts\", ERC20(mkt).totalSupply());\n\n    IonicFlywheelLensRouter.MarketRewardsInfo[] memory marketRewardsInfos = lensRouter.getPoolMarketRewardsInfo(\n      IonicComptroller(0x5EB884651F50abc72648447dCeabF2db091e4117)\n    );\n    for (uint256 i = 0; i < marketRewardsInfos.length; i++) {\n      if (address(marketRewardsInfos[i].market) != mkt) {\n        emit log(\"NO REWARDS INFO\");\n        continue;\n      }\n\n      emit log(\"\");\n      emit log_named_address(\"RUNNING FOR MARKET\", address(marketRewardsInfos[i].market));\n      for (uint256 j = 0; j < marketRewardsInfos[i].rewardsInfo.length; j++) {\n        emit log_named_uint(\n          \"rewardSpeedPerSecondPerToken\",\n          marketRewardsInfos[i].rewardsInfo[j].rewardSpeedPerSecondPerToken\n        );\n        emit log_named_uint(\"rewardTokenPrice\", marketRewardsInfos[i].rewardsInfo[j].rewardTokenPrice);\n        emit log_named_uint(\"formattedAPR\", marketRewardsInfos[i].rewardsInfo[j].formattedAPR);\n        emit log_named_address(\"rewardToken\", address(marketRewardsInfos[i].rewardsInfo[j].rewardToken));\n      }\n    }\n  }\n\n  function testBscLensRouter() public fork(BSC_MAINNET) {\n    IonicComptroller pool = IonicComptroller(0x1851e32F34565cb95754310b031C5a2Fc0a8a905);\n    address user = 0x927d81b91c41D1961e3A7d24847b95484e60C626;\n    IonicFlywheelLensRouter router = IonicFlywheelLensRouter(ap.getAddress(\"IonicFlywheelLensRouter\"));\n\n    router.claimRewardsForPool(user, pool);\n  }\n\n  function testChapelRouter() public fork(BSC_CHAPEL) {\n    IonicFlywheelLensRouter router = IonicFlywheelLensRouter(0x3391ed1C5203168337Fa827cB5Ac8BB8B60D93B7);\n    router.getPoolMarketRewardsInfo(IonicComptroller(0x044c436b2f3EF29D30f89c121f9240cf0a08Ca4b));\n  }\n\n  function testNetAprPolygon() public fork(POLYGON_MAINNET) {\n    address user = 0x8982aa50bb919E42e9204f12e5b59D053Eb2A602;\n    int256 blocks = 26 * 24 * 365 * 60;\n    int256 apr = lensRouter.getUserNetApr(user, blocks);\n    emit log_named_int(\"apr\", apr);\n  }\n\n  function testNetAprMode() public fork(MODE_MAINNET) {\n    address user = 0x8982aa50bb919E42e9204f12e5b59D053Eb2A602;\n    int256 blocks = 30 * 24 * 365 * 60;\n    int256 apr = lensRouter.getUserNetApr(user, blocks);\n    emit log_named_int(\"apr\", apr);\n  }\n\n  function testNetAprChapel() public fork(BSC_CHAPEL) {\n    address user = 0x8982aa50bb919E42e9204f12e5b59D053Eb2A602;\n    int256 blocks = 26 * 24 * 365 * 60;\n    int256 apr = lensRouter.getUserNetApr(user, blocks);\n    emit log_named_int(\"apr\", apr);\n  }\n}\n"
    },
    "contracts/test/FlywheelUpgradesTest.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport { BaseTest } from \"./config/BaseTest.t.sol\";\n\nimport { PoolDirectory } from \"../PoolDirectory.sol\";\nimport { IonicComptroller } from \"../compound/ComptrollerInterface.sol\";\nimport { IonicFlywheelCore } from \"../ionic/strategies/flywheel/IonicFlywheelCore.sol\";\nimport { IonicReplacingFlywheel } from \"../ionic/strategies/flywheel/IonicReplacingFlywheel.sol\";\nimport { ReplacingFlywheelDynamicRewards } from \"../ionic/strategies/flywheel/rewards/ReplacingFlywheelDynamicRewards.sol\";\nimport { IonicFlywheelLensRouter } from \"../ionic/strategies/flywheel/IonicFlywheelLensRouter.sol\";\nimport { CErc20PluginRewardsDelegate } from \"../compound/CErc20PluginRewardsDelegate.sol\";\nimport { ComptrollerFirstExtension } from \"../compound/ComptrollerFirstExtension.sol\";\nimport { ICErc20 } from \"../compound/CTokenInterfaces.sol\";\nimport { Comptroller } from \"../compound/Comptroller.sol\";\n\nimport { TransparentUpgradeableProxy } from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { IFlywheelRewards } from \"flywheel/interfaces/IFlywheelRewards.sol\";\nimport { FlywheelCore } from \"flywheel/FlywheelCore.sol\";\nimport { FlywheelDynamicRewards } from \"flywheel/rewards/FlywheelDynamicRewards.sol\";\n\ncontract FlywheelUpgradesTest is BaseTest {\n  PoolDirectory internal fpd;\n\n  function afterForkSetUp() internal override {\n    fpd = PoolDirectory(ap.getAddress(\"PoolDirectory\"));\n  }\n\n  function testFlywheelUpgradeBsc() public fork(BSC_MAINNET) {\n    _testFlywheelUpgrade();\n  }\n\n  function testFlywheelUpgradePolygon() public fork(POLYGON_MAINNET) {\n    _testFlywheelUpgrade();\n  }\n\n  function _testFlywheelUpgrade() internal {\n    IonicFlywheelCore newImpl = new IonicFlywheelCore();\n\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\n\n    for (uint8 i = 0; i < pools.length; i++) {\n      IonicComptroller pool = IonicComptroller(pools[i].comptroller);\n\n      ICErc20[] memory markets = pool.getAllMarkets();\n\n      address[] memory flywheels = pool.getRewardsDistributors();\n      if (flywheels.length > 0) {\n        emit log(\"\");\n        emit log_named_address(\"pool\", address(pool));\n      }\n      for (uint8 j = 0; j < flywheels.length; j++) {\n        IonicFlywheelCore flywheel = IonicFlywheelCore(flywheels[j]);\n\n        // upgrade\n        TransparentUpgradeableProxy proxy = TransparentUpgradeableProxy(payable(flywheels[j]));\n        bytes32 bytesAtSlot = vm.load(address(proxy), _ADMIN_SLOT);\n        address admin = address(uint160(uint256(bytesAtSlot)));\n\n        if (admin != address(0)) {\n          //vm.prank(admin);\n          //proxy.upgradeTo(address(newImpl));\n          //emit log_named_address(\"upgradable flywheel\", address(flywheel));\n\n          bool anyStrategyHasPositiveIndex = false;\n\n          for (uint8 k = 0; k < markets.length; k++) {\n            ERC20 strategy = ERC20(address(markets[k]));\n            (uint224 index, uint32 ts) = flywheel.strategyState(strategy);\n            if (index > 0) {\n              anyStrategyHasPositiveIndex = true;\n              break;\n            }\n          }\n\n          if (!anyStrategyHasPositiveIndex) {\n            emit log_named_address(\"all zero index strategies flywheel\", address(flywheel));\n            //assertTrue(anyStrategyHasPositiveIndex, \"!flywheel has no strategies added or is broken\");\n          }\n        } else {\n          emit log_named_address(\"not upgradable flywheel\", address(flywheel));\n          assertTrue(false, \"flywheel proxy admin 0\");\n        }\n      }\n    }\n  }\n\n  function testPolygonFlywheelAllowance() public fork(POLYGON_MAINNET) {\n    _testAllPoolsMarketsAllowance();\n  }\n\n  function testBscFlywheelAllowance() public fork(BSC_MAINNET) {\n    _testAllPoolsMarketsAllowance();\n  }\n\n  function _testAllPoolsMarketsAllowance() internal {\n    (, PoolDirectory.Pool[] memory pools) = fpd.getActivePools();\n\n    for (uint8 i = 0; i < pools.length; i++) {\n      _testMarketsAllowance(pools[i].comptroller);\n    }\n  }\n\n  function _testMarketsAllowance(address poolAddress) internal {\n    ComptrollerFirstExtension poolExt = ComptrollerFirstExtension(poolAddress);\n    address[] memory fws = poolExt.getRewardsDistributors();\n\n    ICErc20[] memory markets = poolExt.getAllMarkets();\n\n    for (uint8 j = 0; j < markets.length; j++) {\n      string memory contractType = CErc20PluginRewardsDelegate(address(markets[j])).contractType();\n      // check it only for dynamic rewards flywheels\n      if (compareStrings(contractType, \"CErc20PluginRewardsDelegate\")) {\n        for (uint8 i = 0; i < fws.length; i++) {\n          ERC20 asStrategy = ERC20(address(markets[j]));\n          IonicFlywheelCore flywheel = IonicFlywheelCore(fws[i]);\n          (uint224 index, ) = flywheel.strategyState(asStrategy);\n          ERC20 rewToken = flywheel.rewardToken();\n          address rewardsContractAddress = address(flywheel.flywheelRewards());\n          if (index > 0) {\n            uint256 allowance = rewToken.allowance(address(asStrategy), rewardsContractAddress);\n            if (allowance == 0) {\n              assertGt(allowance, 0, \"!approved\");\n              emit log_named_address(\"flywheel rewards\", rewardsContractAddress);\n              emit log_named_address(\"strategy\", address(asStrategy));\n              emit log_named_address(\"rwtoken\", address(rewToken));\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
    },
    "contracts/test/LiquidityMining.t.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport \"forge-std/Vm.sol\";\n\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\nimport { Auth, Authority } from \"solmate/auth/Auth.sol\";\nimport { MockERC20 } from \"solmate/test/utils/mocks/MockERC20.sol\";\nimport { FlywheelStaticRewards } from \"../ionic/strategies/flywheel/rewards/FlywheelStaticRewards.sol\";\nimport { IFlywheelBooster } from \"../ionic/strategies/flywheel/IFlywheelBooster.sol\";\nimport { IFlywheelRewards } from \"../ionic/strategies/flywheel/rewards/IFlywheelRewards.sol\";\nimport { TransparentUpgradeableProxy } from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport { ICErc20 } from \"../compound/CTokenInterfaces.sol\";\nimport { CErc20 } from \"../compound/CToken.sol\";\nimport { JumpRateModel } from \"../compound/JumpRateModel.sol\";\nimport { Unitroller } from \"../compound/Unitroller.sol\";\nimport { Comptroller } from \"../compound/Comptroller.sol\";\nimport { ComptrollerFirstExtension } from \"../compound/ComptrollerFirstExtension.sol\";\nimport { CErc20Delegate } from \"../compound/CErc20Delegate.sol\";\nimport { CErc20Delegator } from \"../compound/CErc20Delegator.sol\";\nimport { IonicComptroller } from \"../compound/ComptrollerInterface.sol\";\nimport { InterestRateModel } from \"../compound/InterestRateModel.sol\";\nimport { FeeDistributor } from \"../FeeDistributor.sol\";\nimport { PoolDirectory } from \"../PoolDirectory.sol\";\nimport { AuthoritiesRegistry } from \"../ionic/AuthoritiesRegistry.sol\";\nimport { PoolRolesAuthority } from \"../ionic/PoolRolesAuthority.sol\";\n\nimport { MockPriceOracle } from \"../oracles/1337/MockPriceOracle.sol\";\nimport { CTokenFirstExtension, DiamondExtension } from \"../compound/CTokenFirstExtension.sol\";\nimport { IonicFlywheelLensRouter } from \"../ionic/strategies/flywheel/IonicFlywheelLensRouter.sol\";\nimport { IonicFlywheel } from \"../ionic/strategies/flywheel/IonicFlywheel.sol\";\nimport { IonicFlywheelCore } from \"../ionic/strategies/flywheel/IonicFlywheelCore.sol\";\n\nimport { BaseTest } from \"./config/BaseTest.t.sol\";\n\ncontract LiquidityMiningTest is BaseTest {\n  MockERC20 underlyingToken;\n  MockERC20 rewardToken;\n\n  JumpRateModel interestModel;\n  IonicComptroller comptroller;\n  CErc20Delegate cErc20Delegate;\n  ICErc20 cErc20;\n  FeeDistributor ionicAdmin;\n  PoolDirectory poolDirectory;\n\n  IonicFlywheel flywheel;\n  FlywheelStaticRewards rewards;\n  IonicFlywheelLensRouter flywheelClaimer;\n\n  address user = address(1337);\n\n  uint8 baseDecimal;\n  uint8 rewardDecimal;\n\n  address[] markets;\n  IonicFlywheelCore[] flywheelsToClaim;\n\n  function setUpBaseContracts(uint8 _baseDecimal, uint8 _rewardDecimal) public {\n    baseDecimal = _baseDecimal;\n    rewardDecimal = _rewardDecimal;\n    underlyingToken = new MockERC20(\"UnderlyingToken\", \"UT\", baseDecimal);\n    rewardToken = new MockERC20(\"RewardToken\", \"RT\", rewardDecimal);\n    interestModel = new JumpRateModel(2343665, 1 * 10**baseDecimal, 1 * 10**baseDecimal, 4 * 10**baseDecimal, 0.8e18);\n    ionicAdmin = new FeeDistributor();\n    ionicAdmin.initialize(1 * 10**(baseDecimal - 2));\n    poolDirectory = new PoolDirectory();\n    poolDirectory.initialize(false, new address[](0));\n    cErc20Delegate = new CErc20Delegate();\n    // set the new delegate as the latest\n    ionicAdmin._setLatestCErc20Delegate(cErc20Delegate.delegateType(), address(cErc20Delegate), abi.encode(address(0)));\n    DiamondExtension[] memory cErc20DelegateExtensions = new DiamondExtension[](2);\n    cErc20DelegateExtensions[0] = new CTokenFirstExtension();\n    cErc20DelegateExtensions[1] = cErc20Delegate;\n    ionicAdmin._setCErc20DelegateExtensions(address(cErc20Delegate), cErc20DelegateExtensions);\n  }\n\n  function setUpPoolAndMarket() public {\n    MockPriceOracle priceOracle = new MockPriceOracle(10);\n    Comptroller tempComptroller = new Comptroller();\n    ionicAdmin._setLatestComptrollerImplementation(address(0), address(tempComptroller));\n    DiamondExtension[] memory extensions = new DiamondExtension[](2);\n    extensions[0] = new ComptrollerFirstExtension();\n    extensions[1] = tempComptroller;\n    ionicAdmin._setComptrollerExtensions(address(tempComptroller), extensions);\n    (, address comptrollerAddress) = poolDirectory.deployPool(\n      \"TestPool\",\n      address(tempComptroller),\n      abi.encode(payable(address(ionicAdmin))),\n      false,\n      0.1e18,\n      1.1e18,\n      address(priceOracle)\n    );\n\n    Unitroller(payable(comptrollerAddress))._acceptAdmin();\n    comptroller = IonicComptroller(comptrollerAddress);\n\n    AuthoritiesRegistry impl = new AuthoritiesRegistry();\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(impl), address(1), \"\");\n    AuthoritiesRegistry newAr = AuthoritiesRegistry(address(proxy));\n    newAr.initialize(address(321));\n    ionicAdmin.reinitialize(newAr);\n    PoolRolesAuthority poolAuth = newAr.createPoolAuthority(comptrollerAddress);\n    newAr.setUserRole(comptrollerAddress, user, poolAuth.BORROWER_ROLE(), true);\n\n    vm.roll(1);\n    comptroller._deployMarket(\n      cErc20Delegate.delegateType(),\n      abi.encode(\n        address(underlyingToken),\n        comptroller,\n        payable(address(ionicAdmin)),\n        InterestRateModel(address(interestModel)),\n        \"CUnderlyingToken\",\n        \"CUT\",\n        uint256(1),\n        uint256(0)\n      ),\n      \"\",\n      0.9e18\n    );\n\n    ICErc20[] memory allMarkets = comptroller.getAllMarkets();\n    cErc20 = allMarkets[allMarkets.length - 1];\n  }\n\n  function setUpFlywheel() public {\n    IonicFlywheel impl = new IonicFlywheel();\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(impl), address(dpa), \"\");\n    flywheel = IonicFlywheel(address(proxy));\n    flywheel.initialize(rewardToken, FlywheelStaticRewards(address(0)), IFlywheelBooster(address(0)), address(this));\n    rewards = new FlywheelStaticRewards(IonicFlywheelCore(address(flywheel)), address(this), Authority(address(0)));\n    flywheel.setFlywheelRewards(rewards);\n\n    flywheelClaimer = new IonicFlywheelLensRouter(poolDirectory);\n\n    flywheel.addStrategyForRewards(ERC20(address(cErc20)));\n\n    // add flywheel as rewardsDistributor to call flywheelPreBorrowAction / flywheelPreSupplyAction\n    require(comptroller._addRewardsDistributor(address(flywheel)) == 0);\n\n    // seed rewards to flywheel\n    rewardToken.mint(address(rewards), 100 * 10**rewardDecimal);\n\n    // Start reward distribution at 1 token per second\n    rewards.setRewardsInfo(\n      ERC20(address(cErc20)),\n      FlywheelStaticRewards.RewardsInfo({ rewardsPerSecond: uint224(1 * 10**rewardDecimal), rewardsEndTimestamp: 0 })\n    );\n\n    // preparation for a later call\n    flywheelsToClaim.push(IonicFlywheelCore(address(flywheel)));\n  }\n\n  function _initialize(uint8 _baseDecimal, uint8 _rewardDecimal) internal {\n    setUpBaseContracts(_baseDecimal, _rewardDecimal);\n    setUpPoolAndMarket();\n    setUpFlywheel();\n    deposit(1 * 10**_baseDecimal);\n    vm.warp(block.timestamp + 1);\n  }\n\n  function deposit(uint256 _amount) public {\n    underlyingToken.mint(user, _amount);\n    vm.startPrank(user);\n    underlyingToken.approve(address(cErc20), _amount);\n    comptroller.enterMarkets(markets);\n    cErc20.mint(_amount);\n    vm.stopPrank();\n  }\n\n  function _testIntegration() internal {\n    uint256 percentFee = flywheel.performanceFee();\n    uint224 percent100 = 100e16; //flywheel.ONE();\n\n    // store expected rewards per token (1 token per second over total supply)\n    uint256 rewardsPerTokenPlusFee = (1 * 10**rewardDecimal * 1 * 10**baseDecimal) / cErc20.totalSupply();\n    uint256 rewardsPerTokenForFee = (rewardsPerTokenPlusFee * percentFee) / percent100;\n    uint256 rewardsPerToken = rewardsPerTokenPlusFee - rewardsPerTokenForFee;\n\n    // store expected user rewards (user balance times reward per second over 1 token)\n    uint256 userRewards = (rewardsPerToken * cErc20.balanceOf(user)) / (1 * 10**baseDecimal);\n\n    ERC20 asErc20 = ERC20(address(cErc20));\n    // accrue rewards and check against expected\n    assertEq(flywheel.accrue(asErc20, user), userRewards, \"!accrue amount\");\n\n    // check market index\n    (uint224 index, ) = flywheel.strategyState(asErc20);\n    assertEq(index, 10**rewardDecimal + rewardsPerToken, \"!index\");\n\n    // claim and check user balance\n    flywheelClaimer.claimRewardsForMarket(user, asErc20, flywheelsToClaim, asArray(true));\n    assertEq(rewardToken.balanceOf(user), userRewards, \"!user rewards\");\n\n    // mint more tokens by user and rerun test\n    deposit(1 * 10**baseDecimal);\n\n    // for next test, advance 10 seconds instead of 1 (multiply expectations by 10)\n    vm.warp(block.timestamp + 10);\n\n    uint256 rewardsPerToken2PlusFee = (1 * 10**rewardDecimal * 1 * 10**baseDecimal) / cErc20.totalSupply();\n    uint256 rewardsPerToken2ForFee = (rewardsPerToken2PlusFee * percentFee) / percent100;\n    uint256 rewardsPerToken2 = rewardsPerToken2PlusFee - rewardsPerToken2ForFee;\n\n    uint256 userRewards2 = (10 * (rewardsPerToken2 * cErc20.balanceOf(user))) / (1 * 10**baseDecimal);\n\n    // accrue all unclaimed rewards and claim them\n    flywheelClaimer.claimRewardsForMarket(user, asErc20, flywheelsToClaim, asArray(true));\n\n    emit log_named_uint(\"userRewards\", userRewards);\n    emit log_named_uint(\"userRewards2\", userRewards2);\n    // user balance should accumulate from both rewards\n    assertEq(rewardToken.balanceOf(user), userRewards + userRewards2, \"balance mismatch\");\n  }\n\n  function testIntegrationRewardStandard(uint8 i, uint8 j) public {\n    vm.assume(i > 1);\n    vm.assume(j > 1);\n    vm.assume(i < 19);\n    vm.assume(j < 19);\n\n    _initialize(i, j);\n    _testIntegration();\n  }\n}\n"
    },
    "contracts/utils/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n  /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n  /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n  /// @param data The encoded function data for each of the calls to make to this contract\n  /// @return results The results from each of the calls passed in via data\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
    },
    "contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\nimport \"./IMulticall.sol\";\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall is IMulticall {\n  /// @inheritdoc IMulticall\n  function multicall(bytes[] calldata data) public payable virtual override returns (bytes[] memory results) {\n    results = new bytes[](data.length);\n    for (uint256 i = 0; i < data.length; i++) {\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n      if (!success) {\n        // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n        if (result.length < 68) revert();\n        assembly {\n          result := add(result, 0x04)\n        }\n        revert(abi.decode(result, (string)));\n      }\n\n      results[i] = result;\n    }\n  }\n}\n"
    },
    "ds-test/test.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.5.0;\n\ncontract DSTest {\n    event log                    (string);\n    event logs                   (bytes);\n\n    event log_address            (address);\n    event log_bytes32            (bytes32);\n    event log_int                (int);\n    event log_uint               (uint);\n    event log_bytes              (bytes);\n    event log_string             (string);\n\n    event log_named_address      (string key, address val);\n    event log_named_bytes32      (string key, bytes32 val);\n    event log_named_decimal_int  (string key, int val, uint decimals);\n    event log_named_decimal_uint (string key, uint val, uint decimals);\n    event log_named_int          (string key, int val);\n    event log_named_uint         (string key, uint val);\n    event log_named_bytes        (string key, bytes val);\n    event log_named_string       (string key, string val);\n\n    bool public IS_TEST = true;\n    bool private _failed;\n\n    address constant HEVM_ADDRESS =\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n    modifier mayRevert() { _; }\n    modifier testopts(string memory) { _; }\n\n    function failed() public returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            bool globalFailed = false;\n            if (hasHEVMContext()) {\n                (, bytes memory retdata) = HEVM_ADDRESS.call(\n                    abi.encodePacked(\n                        bytes4(keccak256(\"load(address,bytes32)\")),\n                        abi.encode(HEVM_ADDRESS, bytes32(\"failed\"))\n                    )\n                );\n                globalFailed = abi.decode(retdata, (bool));\n            }\n            return globalFailed;\n        }\n    }\n\n    function fail() internal virtual {\n        if (hasHEVMContext()) {\n            (bool status, ) = HEVM_ADDRESS.call(\n                abi.encodePacked(\n                    bytes4(keccak256(\"store(address,bytes32,bytes32)\")),\n                    abi.encode(HEVM_ADDRESS, bytes32(\"failed\"), bytes32(uint256(0x01)))\n                )\n            );\n            status; // Silence compiler warnings\n        }\n        _failed = true;\n    }\n\n    function hasHEVMContext() internal view returns (bool) {\n        uint256 hevmCodeSize = 0;\n        assembly {\n            hevmCodeSize := extcodesize(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)\n        }\n        return hevmCodeSize > 0;\n    }\n\n    modifier logs_gas() {\n        uint startGas = gasleft();\n        _;\n        uint endGas = gasleft();\n        emit log_named_uint(\"gas\", startGas - endGas);\n    }\n\n    function assertTrue(bool condition) internal {\n        if (!condition) {\n            emit log(\"Error: Assertion Failed\");\n            fail();\n        }\n    }\n\n    function assertTrue(bool condition, string memory err) internal {\n        if (!condition) {\n            emit log_named_string(\"Error\", err);\n            assertTrue(condition);\n        }\n    }\n\n    function assertEq(address a, address b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [address]\");\n            emit log_named_address(\"      Left\", a);\n            emit log_named_address(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(address a, address b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes32 a, bytes32 b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [bytes32]\");\n            emit log_named_bytes32(\"      Left\", a);\n            emit log_named_bytes32(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq32(bytes32 a, bytes32 b) internal {\n        assertEq(a, b);\n    }\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\n        assertEq(a, b, err);\n    }\n\n    function assertEq(int a, int b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [int]\");\n            emit log_named_int(\"      Left\", a);\n            emit log_named_int(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(int a, int b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq(uint a, uint b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [uint]\");\n            emit log_named_uint(\"      Left\", a);\n            emit log_named_uint(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(uint a, uint b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"      Left\", a, decimals);\n            emit log_named_decimal_int(\"     Right\", b, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"      Left\", a, decimals);\n            emit log_named_decimal_uint(\"     Right\", b, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGt(uint a, uint b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(uint a, uint b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGt(int a, int b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(int a, int b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGe(uint a, uint b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(uint a, uint b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGe(int a, int b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(int a, int b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLt(uint a, uint b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(uint a, uint b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLt(int a, int b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(int a, int b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLe(uint a, uint b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(uint a, uint b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLe(int a, int b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(int a, int b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log(\"Error: a == b not satisfied [string]\");\n            emit log_named_string(\"      Left\", a);\n            emit log_named_string(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq(string memory a, string memory b, string memory err) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\n        ok = true;\n        if (a.length == b.length) {\n            for (uint i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) {\n                    ok = false;\n                }\n            }\n        } else {\n            ok = false;\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b) internal {\n        if (!checkEq0(a, b)) {\n            emit log(\"Error: a == b not satisfied [bytes]\");\n            emit log_named_bytes(\"      Left\", a);\n            emit log_named_bytes(\"     Right\", b);\n            fail();\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\n        if (!checkEq0(a, b)) {\n            emit log_named_string(\"Error\", err);\n            assertEq0(a, b);\n        }\n    }\n}\n"
    },
    "flywheel-v2/FlywheelCore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {Auth, Authority} from \"solmate/auth/Auth.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport {SafeCastLib} from \"solmate/utils/SafeCastLib.sol\";\n\nimport {IFlywheelRewards} from \"./interfaces/IFlywheelRewards.sol\";\nimport {IFlywheelBooster} from \"./interfaces/IFlywheelBooster.sol\";\n\n/**\n @title Flywheel Core Incentives Manager\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Core contract maintaings three important pieces of state:\n         * the rewards index which determines how many rewards are owed per token per strategy. User indexes track how far behind the strategy they are to lazily calculate all catch-up rewards.\n         * the accrued (unclaimed) rewards per user.\n         * references to the booster and rewards module described below.\n\n         Core does not manage any tokens directly. The rewards module maintains token balances, and approves core to pull transfer them to users when they claim.\n\n         SECURITY NOTE: For maximum accuracy and to avoid exploits, rewards accrual should be notified atomically through the accrue hook. \n         Accrue should be called any time tokens are transferred, minted, or burned.\n */\ncontract FlywheelCore is Auth {\n    using SafeTransferLib for ERC20;\n    using SafeCastLib for uint256;\n\n    /// @notice The token to reward\n    ERC20 public immutable rewardToken;\n\n    /// @notice append-only list of strategies added\n    ERC20[] public allStrategies;\n\n    /// @notice the rewards contract for managing streams\n    IFlywheelRewards public flywheelRewards;\n\n    /// @notice optional booster module for calculating virtual balances on strategies\n    IFlywheelBooster public flywheelBooster;\n\n    constructor(\n        ERC20 _rewardToken,\n        IFlywheelRewards _flywheelRewards,\n        IFlywheelBooster _flywheelBooster,\n        address _owner,\n        Authority _authority\n    ) Auth(_owner, _authority) {\n        rewardToken = _rewardToken;\n        flywheelRewards = _flywheelRewards;\n        flywheelBooster = _flywheelBooster;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        ACCRUE/CLAIM LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /** \n      @notice Emitted when a user's rewards accrue to a given strategy.\n      @param strategy the updated rewards strategy\n      @param user the user of the rewards\n      @param rewardsDelta how many new rewards accrued to the user\n      @param rewardsIndex the market index for rewards per token accrued\n    */\n    event AccrueRewards(ERC20 indexed strategy, address indexed user, uint256 rewardsDelta, uint256 rewardsIndex);\n\n    /** \n      @notice Emitted when a user claims accrued rewards.\n      @param user the user of the rewards\n      @param amount the amount of rewards claimed\n    */\n    event ClaimRewards(address indexed user, uint256 amount);\n\n    /// @notice The accrued but not yet transferred rewards for each user\n    mapping(address => uint256) public rewardsAccrued;\n\n    /** \n      @notice accrue rewards for a single user on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the user to be accrued\n      @return the cumulative amount of rewards accrued to user (including prior)\n    */\n    function accrue(ERC20 strategy, address user) public returns (uint256) {\n        RewardsState memory state = strategyState[strategy];\n\n        if (state.index == 0) return 0;\n\n        state = accrueStrategy(strategy, state);\n        return accrueUser(strategy, user, state);\n    }\n\n    /** \n      @notice accrue rewards for a two users on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the first user to be accrued\n      @param user the second user to be accrued\n      @return the cumulative amount of rewards accrued to the first user (including prior)\n      @return the cumulative amount of rewards accrued to the second user (including prior)\n    */\n    function accrue(\n        ERC20 strategy,\n        address user,\n        address secondUser\n    ) public returns (uint256, uint256) {\n        RewardsState memory state = strategyState[strategy];\n\n        if (state.index == 0) return (0, 0);\n\n        state = accrueStrategy(strategy, state);\n        return (accrueUser(strategy, user, state), accrueUser(strategy, secondUser, state));\n    }\n\n    /** \n      @notice claim rewards for a given user\n      @param user the user claiming rewards\n      @dev this function is public, and all rewards transfer to the user\n    */\n    function claimRewards(address user) external {\n        uint256 accrued = rewardsAccrued[user];\n\n        if (accrued != 0) {\n            rewardsAccrued[user] = 0;\n\n            rewardToken.safeTransferFrom(address(flywheelRewards), user, accrued);\n\n            emit ClaimRewards(user, accrued);\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                          ADMIN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /** \n      @notice Emitted when a new strategy is added to flywheel by the admin\n      @param newStrategy the new added strategy\n    */\n    event AddStrategy(address indexed newStrategy);\n\n    /// @notice initialize a new strategy\n    function addStrategyForRewards(ERC20 strategy) external requiresAuth {\n        _addStrategyForRewards(strategy);\n    }\n\n    function _addStrategyForRewards(ERC20 strategy) internal {\n        require(strategyState[strategy].index == 0, \"strategy\");\n        strategyState[strategy] = RewardsState({index: ONE, lastUpdatedTimestamp: block.timestamp.safeCastTo32()});\n\n        allStrategies.push(strategy);\n        emit AddStrategy(address(strategy));\n    }\n\n    function getAllStrategies() external view returns (ERC20[] memory) {\n        return allStrategies;\n    }\n\n    /** \n      @notice Emitted when the rewards module changes\n      @param newFlywheelRewards the new rewards module\n    */\n    event FlywheelRewardsUpdate(address indexed newFlywheelRewards);\n\n    /// @notice swap out the flywheel rewards contract\n    function setFlywheelRewards(IFlywheelRewards newFlywheelRewards) external requiresAuth {\n        uint256 oldRewardBalance = rewardToken.balanceOf(address(flywheelRewards));\n        if (oldRewardBalance > 0) {\n            rewardToken.safeTransferFrom(address(flywheelRewards), address(newFlywheelRewards), oldRewardBalance);\n        }\n\n        flywheelRewards = newFlywheelRewards;\n\n        emit FlywheelRewardsUpdate(address(newFlywheelRewards));\n    }\n\n    /** \n      @notice Emitted when the booster module changes\n      @param newBooster the new booster module\n    */\n    event FlywheelBoosterUpdate(address indexed newBooster);\n\n    /// @notice swap out the flywheel booster contract\n    function setBooster(IFlywheelBooster newBooster) external requiresAuth {\n        flywheelBooster = newBooster;\n\n        emit FlywheelBoosterUpdate(address(newBooster));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    INTERNAL ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    struct RewardsState {\n        /// @notice The strategy's last updated index\n        uint224 index;\n        /// @notice The timestamp the index was last updated at\n        uint32 lastUpdatedTimestamp;\n    }\n\n    /// @notice the fixed point factor of flywheel\n    uint224 public constant ONE = 1e18;\n\n    /// @notice The strategy index and last updated per strategy\n    mapping(ERC20 => RewardsState) public strategyState;\n\n    /// @notice user index per strategy\n    mapping(ERC20 => mapping(address => uint224)) public userIndex;\n\n    /// @notice accumulate global rewards on a strategy\n    function accrueStrategy(ERC20 strategy, RewardsState memory state)\n        private\n        returns (RewardsState memory rewardsState)\n    {\n        // calculate accrued rewards through module\n        uint256 strategyRewardsAccrued = flywheelRewards.getAccruedRewards(strategy, state.lastUpdatedTimestamp);\n\n        rewardsState = state;\n        if (strategyRewardsAccrued > 0) {\n            // use the booster or token supply to calculate reward index denominator\n            uint256 supplyTokens = address(flywheelBooster) != address(0)\n                ? flywheelBooster.boostedTotalSupply(strategy)\n                : strategy.totalSupply();\n\n            uint224 deltaIndex;\n\n            if (supplyTokens != 0) deltaIndex = ((strategyRewardsAccrued * ONE) / supplyTokens).safeCastTo224();\n\n            // accumulate rewards per token onto the index, multiplied by fixed-point factor\n            rewardsState = RewardsState({\n                index: state.index + deltaIndex,\n                lastUpdatedTimestamp: block.timestamp.safeCastTo32()\n            });\n            strategyState[strategy] = rewardsState;\n        }\n    }\n\n    /// @notice accumulate rewards on a strategy for a specific user\n    function accrueUser(\n        ERC20 strategy,\n        address user,\n        RewardsState memory state\n    ) private returns (uint256) {\n        // load indices\n        uint224 strategyIndex = state.index;\n        uint224 supplierIndex = userIndex[strategy][user];\n\n        // sync user index to global\n        userIndex[strategy][user] = strategyIndex;\n\n        // if user hasn't yet accrued rewards, grant them interest from the strategy beginning if they have a balance\n        // zero balances will have no effect other than syncing to global index\n        if (supplierIndex == 0) {\n            supplierIndex = ONE;\n        }\n\n        uint224 deltaIndex = strategyIndex - supplierIndex;\n        // use the booster or token balance to calculate reward balance multiplier\n        uint256 supplierTokens = address(flywheelBooster) != address(0)\n            ? flywheelBooster.boostedBalanceOf(strategy, user)\n            : strategy.balanceOf(user);\n\n        // accumulate rewards by multiplying user tokens by rewardsPerToken index and adding on unclaimed\n        uint256 supplierDelta = (supplierTokens * deltaIndex) / ONE;\n        uint256 supplierAccrued = rewardsAccrued[user] + supplierDelta;\n\n        rewardsAccrued[user] = supplierAccrued;\n\n        emit AccrueRewards(strategy, user, supplierDelta, strategyIndex);\n\n        return supplierAccrued;\n    }\n}\n"
    },
    "flywheel-v2/interfaces/IFlywheelBooster.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\n\n/**\n @title Balance Booster Module for Flywheel\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Booster module is an optional module for virtually boosting or otherwise transforming user balances. \n         If a booster is not configured, the strategies ERC-20 balanceOf/totalSupply will be used instead.\n        \n         Boosting logic can be associated with referrals, vote-escrow, or other strategies.\n\n         SECURITY NOTE: similar to how Core needs to be notified any time the strategy user composition changes, the booster would need to be notified of any conditions which change the boosted balances atomically.\n         This prevents gaming of the reward calculation function by using manipulated balances when accruing.\n*/\ninterface IFlywheelBooster {\n    /**\n      @notice calculate the boosted supply of a strategy.\n      @param strategy the strategy to calculate boosted supply of\n      @return the boosted supply\n     */\n    function boostedTotalSupply(ERC20 strategy) external view returns (uint256);\n\n    /**\n      @notice calculate the boosted balance of a user in a given strategy.\n      @param strategy the strategy to calculate boosted balance of\n      @param user the user to calculate boosted balance of\n      @return the boosted balance\n     */\n    function boostedBalanceOf(ERC20 strategy, address user) external view returns (uint256);\n}\n"
    },
    "flywheel-v2/interfaces/IFlywheelRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {FlywheelCore} from \"../FlywheelCore.sol\";\n\n/**\n @title Rewards Module for Flywheel\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Rewards module is responsible for:\n         * determining the ongoing reward amounts to entire strategies (core handles the logic for dividing among users)\n         * actually holding rewards that are yet to be claimed\n\n         The reward stream can follow arbitrary logic as long as the amount of rewards passed to flywheel core has been sent to this contract.\n\n         Different module strategies include:\n         * a static reward rate per second\n         * a decaying reward rate\n         * a dynamic just-in-time reward stream\n         * liquid governance reward delegation (Curve Gauge style)\n\n         SECURITY NOTE: The rewards strategy should be smooth and continuous, to prevent gaming the reward distribution by frontrunning.\n */\ninterface IFlywheelRewards {\n    /**\n     @notice calculate the rewards amount accrued to a strategy since the last update.\n     @param strategy the strategy to accrue rewards for.\n     @param lastUpdatedTimestamp the last time rewards were accrued for the strategy.\n     @return rewards the amount of rewards accrued to the market\n    */\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp) external returns (uint256 rewards);\n\n    /// @notice return the flywheel core address\n    function flywheel() external view returns (FlywheelCore);\n\n    /// @notice return the reward token associated with flywheel core.\n    function rewardToken() external view returns (ERC20);\n}\n"
    },
    "flywheel/FlywheelCore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {Auth, Authority} from \"solmate/auth/Auth.sol\";\nimport {SafeTransferLib} from \"solmate/utils/SafeTransferLib.sol\";\nimport {SafeCastLib} from \"solmate/utils/SafeCastLib.sol\";\n\nimport {IFlywheelRewards} from \"./interfaces/IFlywheelRewards.sol\";\nimport {IFlywheelBooster} from \"./interfaces/IFlywheelBooster.sol\";\n\n/**\n @title Flywheel Core Incentives Manager\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Core contract maintaings three important pieces of state:\n         * the rewards index which determines how many rewards are owed per token per strategy. User indexes track how far behind the strategy they are to lazily calculate all catch-up rewards.\n         * the accrued (unclaimed) rewards per user.\n         * references to the booster and rewards module described below.\n\n         Core does not manage any tokens directly. The rewards module maintains token balances, and approves core to pull transfer them to users when they claim.\n\n         SECURITY NOTE: For maximum accuracy and to avoid exploits, rewards accrual should be notified atomically through the accrue hook. \n         Accrue should be called any time tokens are transferred, minted, or burned.\n */\ncontract FlywheelCore is Auth {\n    using SafeTransferLib for ERC20;\n    using SafeCastLib for uint256;\n\n    /// @notice The token to reward\n    ERC20 public immutable rewardToken;\n\n    /// @notice append-only list of strategies added\n    ERC20[] public allStrategies;\n\n    /// @notice the rewards contract for managing streams\n    IFlywheelRewards public flywheelRewards;\n\n    /// @notice optional booster module for calculating virtual balances on strategies\n    IFlywheelBooster public flywheelBooster;\n\n    constructor(\n        ERC20 _rewardToken,\n        IFlywheelRewards _flywheelRewards,\n        IFlywheelBooster _flywheelBooster,\n        address _owner,\n        Authority _authority\n    ) Auth(_owner, _authority) {\n        rewardToken = _rewardToken;\n        flywheelRewards = _flywheelRewards;\n        flywheelBooster = _flywheelBooster;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        ACCRUE/CLAIM LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /** \n      @notice Emitted when a user's rewards accrue to a given strategy.\n      @param strategy the updated rewards strategy\n      @param user the user of the rewards\n      @param rewardsDelta how many new rewards accrued to the user\n      @param rewardsIndex the market index for rewards per token accrued\n    */\n    event AccrueRewards(ERC20 indexed strategy, address indexed user, uint256 rewardsDelta, uint256 rewardsIndex);\n\n    /** \n      @notice Emitted when a user claims accrued rewards.\n      @param user the user of the rewards\n      @param amount the amount of rewards claimed\n    */\n    event ClaimRewards(address indexed user, uint256 amount);\n\n    /// @notice The accrued but not yet transferred rewards for each user\n    mapping(address => uint256) public rewardsAccrued;\n\n    /** \n      @notice accrue rewards for a single user on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the user to be accrued\n      @return the cumulative amount of rewards accrued to user (including prior)\n    */\n    function accrue(ERC20 strategy, address user) public returns (uint256) {\n        RewardsState memory state = strategyState[strategy];\n\n        if (state.index == 0) return 0;\n\n        state = accrueStrategy(strategy, state);\n        return accrueUser(strategy, user, state);\n    }\n\n    /** \n      @notice accrue rewards for a two users on a strategy\n      @param strategy the strategy to accrue a user's rewards on\n      @param user the first user to be accrued\n      @param user the second user to be accrued\n      @return the cumulative amount of rewards accrued to the first user (including prior)\n      @return the cumulative amount of rewards accrued to the second user (including prior)\n    */\n    function accrue(\n        ERC20 strategy,\n        address user,\n        address secondUser\n    ) public returns (uint256, uint256) {\n        RewardsState memory state = strategyState[strategy];\n\n        if (state.index == 0) return (0, 0);\n\n        state = accrueStrategy(strategy, state);\n        return (accrueUser(strategy, user, state), accrueUser(strategy, secondUser, state));\n    }\n\n    /** \n      @notice claim rewards for a given user\n      @param user the user claiming rewards\n      @dev this function is public, and all rewards transfer to the user\n    */\n    function claimRewards(address user) external {\n        uint256 accrued = rewardsAccrued[user];\n\n        if (accrued != 0) {\n            rewardsAccrued[user] = 0;\n\n            rewardToken.safeTransferFrom(address(flywheelRewards), user, accrued);\n\n            emit ClaimRewards(user, accrued);\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                          ADMIN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    /** \n      @notice Emitted when a new strategy is added to flywheel by the admin\n      @param newStrategy the new added strategy\n    */\n    event AddStrategy(address indexed newStrategy);\n\n    /// @notice initialize a new strategy\n    function addStrategyForRewards(ERC20 strategy) external requiresAuth {\n        _addStrategyForRewards(strategy);\n    }\n\n    function _addStrategyForRewards(ERC20 strategy) internal {\n        require(strategyState[strategy].index == 0, \"strategy\");\n        strategyState[strategy] = RewardsState({index: ONE, lastUpdatedTimestamp: block.timestamp.safeCastTo32()});\n\n        allStrategies.push(strategy);\n        emit AddStrategy(address(strategy));\n    }\n\n    function getAllStrategies() external view returns (ERC20[] memory) {\n        return allStrategies;\n    }\n\n    /** \n      @notice Emitted when the rewards module changes\n      @param newFlywheelRewards the new rewards module\n    */\n    event FlywheelRewardsUpdate(address indexed newFlywheelRewards);\n\n    /// @notice swap out the flywheel rewards contract\n    function setFlywheelRewards(IFlywheelRewards newFlywheelRewards) external requiresAuth {\n        uint256 oldRewardBalance = rewardToken.balanceOf(address(flywheelRewards));\n        if (oldRewardBalance > 0) {\n            rewardToken.safeTransferFrom(address(flywheelRewards), address(newFlywheelRewards), oldRewardBalance);\n        }\n\n        flywheelRewards = newFlywheelRewards;\n\n        emit FlywheelRewardsUpdate(address(newFlywheelRewards));\n    }\n\n    /** \n      @notice Emitted when the booster module changes\n      @param newBooster the new booster module\n    */\n    event FlywheelBoosterUpdate(address indexed newBooster);\n\n    /// @notice swap out the flywheel booster contract\n    function setBooster(IFlywheelBooster newBooster) external requiresAuth {\n        flywheelBooster = newBooster;\n\n        emit FlywheelBoosterUpdate(address(newBooster));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                    INTERNAL ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    struct RewardsState {\n        /// @notice The strategy's last updated index\n        uint224 index;\n        /// @notice The timestamp the index was last updated at\n        uint32 lastUpdatedTimestamp;\n    }\n\n    /// @notice the fixed point factor of flywheel\n    uint224 public constant ONE = 1e18;\n\n    /// @notice The strategy index and last updated per strategy\n    mapping(ERC20 => RewardsState) public strategyState;\n\n    /// @notice user index per strategy\n    mapping(ERC20 => mapping(address => uint224)) public userIndex;\n\n    /// @notice accumulate global rewards on a strategy\n    function accrueStrategy(ERC20 strategy, RewardsState memory state)\n        private\n        returns (RewardsState memory rewardsState)\n    {\n        // calculate accrued rewards through module\n        uint256 strategyRewardsAccrued = flywheelRewards.getAccruedRewards(strategy, state.lastUpdatedTimestamp);\n\n        rewardsState = state;\n        if (strategyRewardsAccrued > 0) {\n            // use the booster or token supply to calculate reward index denominator\n            uint256 supplyTokens = address(flywheelBooster) != address(0)\n                ? flywheelBooster.boostedTotalSupply(strategy)\n                : strategy.totalSupply();\n\n            uint224 deltaIndex;\n\n            if (supplyTokens != 0) deltaIndex = ((strategyRewardsAccrued * ONE) / supplyTokens).safeCastTo224();\n\n            // accumulate rewards per token onto the index, multiplied by fixed-point factor\n            rewardsState = RewardsState({\n                index: state.index + deltaIndex,\n                lastUpdatedTimestamp: block.timestamp.safeCastTo32()\n            });\n            strategyState[strategy] = rewardsState;\n        }\n    }\n\n    /// @notice accumulate rewards on a strategy for a specific user\n    function accrueUser(\n        ERC20 strategy,\n        address user,\n        RewardsState memory state\n    ) private returns (uint256) {\n        // load indices\n        uint224 strategyIndex = state.index;\n        uint224 supplierIndex = userIndex[strategy][user];\n\n        // sync user index to global\n        userIndex[strategy][user] = strategyIndex;\n\n        // if user hasn't yet accrued rewards, grant them interest from the strategy beginning if they have a balance\n        // zero balances will have no effect other than syncing to global index\n        if (supplierIndex == 0) {\n            supplierIndex = ONE;\n        }\n\n        uint224 deltaIndex = strategyIndex - supplierIndex;\n        // use the booster or token balance to calculate reward balance multiplier\n        uint256 supplierTokens = address(flywheelBooster) != address(0)\n            ? flywheelBooster.boostedBalanceOf(strategy, user)\n            : strategy.balanceOf(user);\n\n        // accumulate rewards by multiplying user tokens by rewardsPerToken index and adding on unclaimed\n        uint256 supplierDelta = (supplierTokens * deltaIndex) / ONE;\n        uint256 supplierAccrued = rewardsAccrued[user] + supplierDelta;\n\n        rewardsAccrued[user] = supplierAccrued;\n\n        emit AccrueRewards(strategy, user, supplierDelta, strategyIndex);\n\n        return supplierAccrued;\n    }\n}\n"
    },
    "flywheel/interfaces/IFlywheelBooster.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\n\n/**\n @title Balance Booster Module for Flywheel\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Booster module is an optional module for virtually boosting or otherwise transforming user balances. \n         If a booster is not configured, the strategies ERC-20 balanceOf/totalSupply will be used instead.\n        \n         Boosting logic can be associated with referrals, vote-escrow, or other strategies.\n\n         SECURITY NOTE: similar to how Core needs to be notified any time the strategy user composition changes, the booster would need to be notified of any conditions which change the boosted balances atomically.\n         This prevents gaming of the reward calculation function by using manipulated balances when accruing.\n*/\ninterface IFlywheelBooster {\n    /**\n      @notice calculate the boosted supply of a strategy.\n      @param strategy the strategy to calculate boosted supply of\n      @return the boosted supply\n     */\n    function boostedTotalSupply(ERC20 strategy) external view returns (uint256);\n\n    /**\n      @notice calculate the boosted balance of a user in a given strategy.\n      @param strategy the strategy to calculate boosted balance of\n      @param user the user to calculate boosted balance of\n      @return the boosted balance\n     */\n    function boostedBalanceOf(ERC20 strategy, address user) external view returns (uint256);\n}\n"
    },
    "flywheel/interfaces/IFlywheelRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {ERC20} from \"solmate/tokens/ERC20.sol\";\nimport {FlywheelCore} from \"../FlywheelCore.sol\";\n\n/**\n @title Rewards Module for Flywheel\n @notice Flywheel is a general framework for managing token incentives.\n         It takes reward streams to various *strategies* such as staking LP tokens and divides them among *users* of those strategies.\n\n         The Rewards module is responsible for:\n         * determining the ongoing reward amounts to entire strategies (core handles the logic for dividing among users)\n         * actually holding rewards that are yet to be claimed\n\n         The reward stream can follow arbitrary logic as long as the amount of rewards passed to flywheel core has been sent to this contract.\n\n         Different module strategies include:\n         * a static reward rate per second\n         * a decaying reward rate\n         * a dynamic just-in-time reward stream\n         * liquid governance reward delegation (Curve Gauge style)\n\n         SECURITY NOTE: The rewards strategy should be smooth and continuous, to prevent gaming the reward distribution by frontrunning.\n */\ninterface IFlywheelRewards {\n    /**\n     @notice calculate the rewards amount accrued to a strategy since the last update.\n     @param strategy the strategy to accrue rewards for.\n     @param lastUpdatedTimestamp the last time rewards were accrued for the strategy.\n     @return rewards the amount of rewards accrued to the market\n    */\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp) external returns (uint256 rewards);\n\n    /// @notice return the flywheel core address\n    function flywheel() external view returns (FlywheelCore);\n\n    /// @notice return the reward token associated with flywheel core.\n    function rewardToken() external view returns (ERC20);\n}\n"
    },
    "flywheel/rewards/BaseFlywheelRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport {SafeTransferLib, ERC20} from \"solmate/utils/SafeTransferLib.sol\";\nimport {IFlywheelRewards} from \"../interfaces/IFlywheelRewards.sol\";\nimport {FlywheelCore} from \"../FlywheelCore.sol\";\n\n/** \n @title Flywheel Reward Module\n @notice Determines how many rewards accrue to each strategy globally over a given time period.\n @dev approves the flywheel core for the reward token to allow balances to be managed by the module but claimed from core.\n*/\nabstract contract BaseFlywheelRewards is IFlywheelRewards {\n    using SafeTransferLib for ERC20;\n\n    /// @notice thrown when caller is not the flywheel\n    error FlywheelError();\n\n    /// @notice the reward token paid\n    ERC20 public immutable override rewardToken;\n\n    /// @notice the flywheel core contract\n    FlywheelCore public immutable override flywheel;\n\n    constructor(FlywheelCore _flywheel) {\n        flywheel = _flywheel;\n        ERC20 _rewardToken = _flywheel.rewardToken();\n        rewardToken = _rewardToken;\n\n        _rewardToken.safeApprove(address(_flywheel), type(uint256).max);\n    }\n\n    modifier onlyFlywheel() {\n        if (msg.sender != address(flywheel)) revert FlywheelError();\n        _;\n    }\n}\n"
    },
    "flywheel/rewards/FlywheelDynamicRewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport \"./BaseFlywheelRewards.sol\";\nimport {SafeCastLib} from \"solmate/utils/SafeCastLib.sol\";\n\n/** \n @title Flywheel Dynamic Reward Stream\n @notice Determines rewards based on a dynamic reward stream.\n         Rewards are transferred linearly over a \"rewards cycle\" to prevent gaming the reward distribution. \n         The reward source can be arbitrary logic, but most common is to \"pass through\" rewards from some other source.\n         The getNextCycleRewards() hook should also transfer the next cycle's rewards to this contract to ensure proper accounting.\n*/\nabstract contract FlywheelDynamicRewards is BaseFlywheelRewards {\n    using SafeTransferLib for ERC20;\n    using SafeCastLib for uint256;\n\n    event NewRewardsCycle(uint32 indexed start, uint32 indexed end, uint192 reward);\n\n    /// @notice the length of a rewards cycle\n    uint32 public immutable rewardsCycleLength;\n\n    struct RewardsCycle {\n        uint32 start;\n        uint32 end;\n        uint192 reward;\n    }\n\n    mapping(ERC20 => RewardsCycle) public rewardsCycle;\n\n    constructor(FlywheelCore _flywheel, uint32 _rewardsCycleLength) BaseFlywheelRewards(_flywheel) {\n        rewardsCycleLength = _rewardsCycleLength;\n    }\n\n    /**\n     @notice calculate and transfer accrued rewards to flywheel core\n     @param strategy the strategy to accrue rewards for\n     @return amount the amount of tokens accrued and transferred\n     */\n    function getAccruedRewards(ERC20 strategy, uint32 lastUpdatedTimestamp)\n        external\n        override\n        onlyFlywheel\n        returns (uint256 amount)\n    {\n        RewardsCycle memory cycle = rewardsCycle[strategy];\n\n        uint32 timestamp = block.timestamp.safeCastTo32();\n\n        uint32 latest = timestamp >= cycle.end ? cycle.end : timestamp;\n        uint32 earliest = lastUpdatedTimestamp <= cycle.start ? cycle.start : lastUpdatedTimestamp;\n        if (cycle.end != 0) {\n            amount = (cycle.reward * (latest - earliest)) / (cycle.end - cycle.start);\n            assert(amount <= cycle.reward); // should never happen because latest <= cycle.end and earliest >= cycle.start\n        }\n        // if cycle has ended, reset cycle and transfer all available\n        if (timestamp >= cycle.end) {\n            uint32 end = ((timestamp + rewardsCycleLength) / rewardsCycleLength) * rewardsCycleLength;\n            uint192 rewards = getNextCycleRewards(strategy);\n\n            // reset for next cycle\n            rewardsCycle[strategy] = RewardsCycle({start: timestamp, end: end, reward: rewards});\n\n            emit NewRewardsCycle(timestamp, end, rewards);\n        }\n    }\n\n    function getNextCycleRewards(ERC20 strategy) internal virtual returns (uint192);\n}\n"
    },
    "forge-std/Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {StdStorage} from \"./StdStorage.sol\";\nimport {Vm, VmSafe} from \"./Vm.sol\";\n\nabstract contract CommonBase {\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\"hevm cheat code\"))));\n    // console.sol and console2.sol work by executing a staticcall to this address.\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\"foundry default caller\"))));\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\n    // Deterministic deployment address of the Multicall3 contract.\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\n\n    uint256 internal constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    Vm internal constant vm = Vm(VM_ADDRESS);\n    StdStorage internal stdstore;\n}\n\nabstract contract TestBase is CommonBase {}\n\nabstract contract ScriptBase is CommonBase {\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\n}\n"
    },
    "forge-std/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
    },
    "forge-std/console2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\nlibrary console2 {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(int256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, int256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
    },
    "forge-std/interfaces/IMulticall3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ninterface IMulticall3 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Call3Value {\n        address target;\n        bool allowFailure;\n        uint256 value;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes[] memory returnData);\n\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function blockAndAggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n\n    function getBasefee() external view returns (uint256 basefee);\n\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\n\n    function getBlockNumber() external view returns (uint256 blockNumber);\n\n    function getChainId() external view returns (uint256 chainid);\n\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\n\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\n\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\n\n    function getEthBalance(address addr) external view returns (uint256 balance);\n\n    function getLastBlockHash() external view returns (bytes32 blockHash);\n\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (Result[] memory returnData);\n\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n}\n"
    },
    "forge-std/StdAssertions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {DSTest} from \"ds-test/test.sol\";\nimport {stdMath} from \"./StdMath.sol\";\n\nabstract contract StdAssertions is DSTest {\n    event log_array(uint256[] val);\n    event log_array(int256[] val);\n    event log_array(address[] val);\n    event log_named_array(string key, uint256[] val);\n    event log_named_array(string key, int256[] val);\n    event log_named_array(string key, address[] val);\n\n    function fail(string memory err) internal virtual {\n        emit log_named_string(\"Error\", err);\n        fail();\n    }\n\n    function assertFalse(bool data) internal virtual {\n        assertTrue(!data);\n    }\n\n    function assertFalse(bool data, string memory err) internal virtual {\n        assertTrue(!data, err);\n    }\n\n    function assertEq(bool a, bool b) internal virtual {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [bool]\");\n            emit log_named_string(\"      Left\", a ? \"true\" : \"false\");\n            emit log_named_string(\"     Right\", b ? \"true\" : \"false\");\n            fail();\n        }\n    }\n\n    function assertEq(bool a, bool b, string memory err) internal virtual {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes memory a, bytes memory b) internal virtual {\n        assertEq0(a, b);\n    }\n\n    function assertEq(bytes memory a, bytes memory b, string memory err) internal virtual {\n        assertEq0(a, b, err);\n    }\n\n    function assertEq(uint256[] memory a, uint256[] memory b) internal virtual {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log(\"Error: a == b not satisfied [uint[]]\");\n            emit log_named_array(\"      Left\", a);\n            emit log_named_array(\"     Right\", b);\n            fail();\n        }\n    }\n\n    function assertEq(int256[] memory a, int256[] memory b) internal virtual {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log(\"Error: a == b not satisfied [int[]]\");\n            emit log_named_array(\"      Left\", a);\n            emit log_named_array(\"     Right\", b);\n            fail();\n        }\n    }\n\n    function assertEq(address[] memory a, address[] memory b) internal virtual {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log(\"Error: a == b not satisfied [address[]]\");\n            emit log_named_array(\"      Left\", a);\n            emit log_named_array(\"     Right\", b);\n            fail();\n        }\n    }\n\n    function assertEq(uint256[] memory a, uint256[] memory b, string memory err) internal virtual {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(int256[] memory a, int256[] memory b, string memory err) internal virtual {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(address[] memory a, address[] memory b, string memory err) internal virtual {\n        if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    // Legacy helper\n    function assertEqUint(uint256 a, uint256 b) internal virtual {\n        assertEq(uint256(a), uint256(b));\n    }\n\n    function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log(\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_uint(\"      Left\", a);\n            emit log_named_uint(\"     Right\", b);\n            emit log_named_uint(\" Max Delta\", maxDelta);\n            emit log_named_uint(\"     Delta\", delta);\n            fail();\n        }\n    }\n\n    function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta, string memory err) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqAbs(a, b, maxDelta);\n        }\n    }\n\n    function assertApproxEqAbsDecimal(uint256 a, uint256 b, uint256 maxDelta, uint256 decimals) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log(\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_decimal_uint(\"      Left\", a, decimals);\n            emit log_named_decimal_uint(\"     Right\", b, decimals);\n            emit log_named_decimal_uint(\" Max Delta\", maxDelta, decimals);\n            emit log_named_decimal_uint(\"     Delta\", delta, decimals);\n            fail();\n        }\n    }\n\n    function assertApproxEqAbsDecimal(uint256 a, uint256 b, uint256 maxDelta, uint256 decimals, string memory err)\n        internal\n        virtual\n    {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqAbsDecimal(a, b, maxDelta, decimals);\n        }\n    }\n\n    function assertApproxEqAbs(int256 a, int256 b, uint256 maxDelta) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log(\"Error: a ~= b not satisfied [int]\");\n            emit log_named_int(\"       Left\", a);\n            emit log_named_int(\"      Right\", b);\n            emit log_named_uint(\" Max Delta\", maxDelta);\n            emit log_named_uint(\"     Delta\", delta);\n            fail();\n        }\n    }\n\n    function assertApproxEqAbs(int256 a, int256 b, uint256 maxDelta, string memory err) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqAbs(a, b, maxDelta);\n        }\n    }\n\n    function assertApproxEqAbsDecimal(int256 a, int256 b, uint256 maxDelta, uint256 decimals) internal virtual {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log(\"Error: a ~= b not satisfied [int]\");\n            emit log_named_decimal_int(\"      Left\", a, decimals);\n            emit log_named_decimal_int(\"     Right\", b, decimals);\n            emit log_named_decimal_uint(\" Max Delta\", maxDelta, decimals);\n            emit log_named_decimal_uint(\"     Delta\", delta, decimals);\n            fail();\n        }\n    }\n\n    function assertApproxEqAbsDecimal(int256 a, int256 b, uint256 maxDelta, uint256 decimals, string memory err)\n        internal\n        virtual\n    {\n        uint256 delta = stdMath.delta(a, b);\n\n        if (delta > maxDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqAbsDecimal(a, b, maxDelta, decimals);\n        }\n    }\n\n    function assertApproxEqRel(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log(\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_uint(\"        Left\", a);\n            emit log_named_uint(\"       Right\", b);\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta, 18);\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta, 18);\n            fail();\n        }\n    }\n\n    function assertApproxEqRel(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        string memory err\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqRel(a, b, maxPercentDelta);\n        }\n    }\n\n    function assertApproxEqRelDecimal(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log(\"Error: a ~= b not satisfied [uint]\");\n            emit log_named_decimal_uint(\"        Left\", a, decimals);\n            emit log_named_decimal_uint(\"       Right\", b, decimals);\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta, 18);\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta, 18);\n            fail();\n        }\n    }\n\n    function assertApproxEqRelDecimal(\n        uint256 a,\n        uint256 b,\n        uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%\n        uint256 decimals,\n        string memory err\n    ) internal virtual {\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals);\n        }\n    }\n\n    function assertApproxEqRel(int256 a, int256 b, uint256 maxPercentDelta) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log(\"Error: a ~= b not satisfied [int]\");\n            emit log_named_int(\"        Left\", a);\n            emit log_named_int(\"       Right\", b);\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta, 18);\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta, 18);\n            fail();\n        }\n    }\n\n    function assertApproxEqRel(int256 a, int256 b, uint256 maxPercentDelta, string memory err) internal virtual {\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqRel(a, b, maxPercentDelta);\n        }\n    }\n\n    function assertApproxEqRelDecimal(int256 a, int256 b, uint256 maxPercentDelta, uint256 decimals) internal virtual {\n        if (b == 0) return assertEq(a, b); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log(\"Error: a ~= b not satisfied [int]\");\n            emit log_named_decimal_int(\"        Left\", a, decimals);\n            emit log_named_decimal_int(\"       Right\", b, decimals);\n            emit log_named_decimal_uint(\" Max % Delta\", maxPercentDelta, 18);\n            emit log_named_decimal_uint(\"     % Delta\", percentDelta, 18);\n            fail();\n        }\n    }\n\n    function assertApproxEqRelDecimal(int256 a, int256 b, uint256 maxPercentDelta, uint256 decimals, string memory err)\n        internal\n        virtual\n    {\n        if (b == 0) return assertEq(a, b, err); // If the left is 0, right must be too.\n\n        uint256 percentDelta = stdMath.percentDelta(a, b);\n\n        if (percentDelta > maxPercentDelta) {\n            emit log_named_string(\"Error\", err);\n            assertApproxEqRelDecimal(a, b, maxPercentDelta, decimals);\n        }\n    }\n\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB) internal virtual {\n        assertEqCall(target, callDataA, target, callDataB, true);\n    }\n\n    function assertEqCall(address targetA, bytes memory callDataA, address targetB, bytes memory callDataB)\n        internal\n        virtual\n    {\n        assertEqCall(targetA, callDataA, targetB, callDataB, true);\n    }\n\n    function assertEqCall(address target, bytes memory callDataA, bytes memory callDataB, bool strictRevertData)\n        internal\n        virtual\n    {\n        assertEqCall(target, callDataA, target, callDataB, strictRevertData);\n    }\n\n    function assertEqCall(\n        address targetA,\n        bytes memory callDataA,\n        address targetB,\n        bytes memory callDataB,\n        bool strictRevertData\n    ) internal virtual {\n        (bool successA, bytes memory returnDataA) = address(targetA).call(callDataA);\n        (bool successB, bytes memory returnDataB) = address(targetB).call(callDataB);\n\n        if (successA && successB) {\n            assertEq(returnDataA, returnDataB, \"Call return data does not match\");\n        }\n\n        if (!successA && !successB && strictRevertData) {\n            assertEq(returnDataA, returnDataB, \"Call revert data does not match\");\n        }\n\n        if (!successA && successB) {\n            emit log(\"Error: Calls were not equal\");\n            emit log_named_bytes(\"  Left call revert data\", returnDataA);\n            emit log_named_bytes(\" Right call return data\", returnDataB);\n            fail();\n        }\n\n        if (successA && !successB) {\n            emit log(\"Error: Calls were not equal\");\n            emit log_named_bytes(\"  Left call return data\", returnDataA);\n            emit log_named_bytes(\" Right call revert data\", returnDataB);\n            fail();\n        }\n    }\n}\n"
    },
    "forge-std/StdChains.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n/**\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\n * alias used in this contract, which can be found as the first argument to the\n * `setChainWithDefaultRpcUrl` call in the `initialize` function.\n *\n * There are two main ways to use this contract:\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\n *      `setChain(string memory chainAlias, Chain memory chain)`\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\n *\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\n * This is done in `initialize`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\n * `defaultRpcUrls`.\n *\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\n *\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\n * we want to retrieve `mainnet`'s RPC URL:\n *   - If you haven't set any mainnet chain info with `setChain`, you haven't specified that\n *     chain in `foundry.toml` and no env var is set, the default data and RPC URL will be returned.\n *   - If you have set a mainnet RPC URL in `foundry.toml` it will return that, if valid (e.g. if\n *     a URL is given or if an environment variable is given and that environment variable exists).\n *     Otherwise, the default data is returned.\n *   - If you specified data with `setChain` it will return that.\n *\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\n */\nabstract contract StdChains {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    bool private initialized;\n\n    struct ChainData {\n        string name;\n        uint256 chainId;\n        string rpcUrl;\n    }\n\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\n        string rpcUrl;\n    }\n\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n    mapping(string => Chain) private chains;\n    // Maps from the chain's alias to it's default RPC URL.\n    mapping(string => string) private defaultRpcUrls;\n    // Maps from a chain ID to it's alias.\n    mapping(uint256 => string) private idToAlias;\n\n    bool private fallbackToDefaultRpcUrls = true;\n\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initialize();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\n        initialize();\n        string memory chainAlias = idToAlias[chainId];\n\n        chain = chains[chainAlias];\n\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initialize();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }\n\n    function _toUpper(string memory str) private pure returns (string memory) {\n        bytes memory strb = bytes(str);\n        bytes memory copy = new bytes(strb.length);\n        for (uint256 i = 0; i < strb.length; i++) {\n            bytes1 b = strb[i];\n            if (b >= 0x61 && b <= 0x7A) {\n                copy[i] = bytes1(uint8(b) - 32);\n            } else {\n                copy[i] = b;\n            }\n        }\n        return string(copy);\n    }\n\n    // lookup rpcUrl, in descending order of priority:\n    // current -> config (foundry.toml) -> environment variable -> default\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain) private returns (Chain memory) {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // distinguish 'not found' from 'cannot read'\n                bytes memory notFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                if (keccak256(notFoundError) != keccak256(err) || bytes(chain.rpcUrl).length == 0) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }\n\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\n        fallbackToDefaultRpcUrls = useDefault;\n    }\n\n    function initialize() private {\n        if (initialized) return;\n\n        initialized = true;\n\n        // If adding an RPC here, make sure to test the default RPC URL in `testRpcs`\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\n        setChainWithDefaultRpcUrl(\n            \"mainnet\", ChainData(\"Mainnet\", 1, \"https://mainnet.infura.io/v3/f4a0bdad42674adab5fc0ac077ffab2b\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"goerli\", ChainData(\"Goerli\", 5, \"https://goerli.infura.io/v3/f4a0bdad42674adab5fc0ac077ffab2b\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/f4a0bdad42674adab5fc0ac077ffab2b\")\n        );\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\n        setChainWithDefaultRpcUrl(\"optimism_goerli\", ChainData(\"Optimism Goerli\", 420, \"https://goerli.optimism.io\"));\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"arbitrum_one_goerli\", ChainData(\"Arbitrum One Goerli\", 421613, \"https://goerli-rollup.arbitrum.io/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\n        setChainWithDefaultRpcUrl(\n            \"polygon_mumbai\", ChainData(\"Polygon Mumbai\", 80001, \"https://rpc-mumbai.maticvigil.com\")\n        );\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain_testnet\",\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\n        );\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\n    }\n\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }\n}\n"
    },
    "forge-std/StdCheats.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdCheatsSafe {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    bool private gasMeteringOff;\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawTx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        // json value name = function\n        string functionSig;\n        bytes32 hash;\n        // json value name = tx\n        RawTx1559Detail txDetail;\n        // json value name = type\n        string opcode;\n    }\n\n    struct RawTx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        bytes gas;\n        bytes nonce;\n        address to;\n        bytes txType;\n        bytes value;\n    }\n\n    struct Tx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        bytes32 hash;\n        Tx1559Detail txDetail;\n        string opcode;\n    }\n\n    struct Tx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 nonce;\n        address to;\n        uint256 txType;\n        uint256 value;\n    }\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct TxLegacy {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        string hash;\n        string opcode;\n        TxDetailLegacy transaction;\n    }\n\n    struct TxDetailLegacy {\n        AccessList[] accessList;\n        uint256 chainId;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 gasPrice;\n        bytes32 hash;\n        uint256 nonce;\n        bytes1 opcode;\n        bytes32 r;\n        bytes32 s;\n        uint256 txType;\n        address to;\n        uint8 v;\n        uint256 value;\n    }\n\n    struct AccessList {\n        address accessAddress;\n        bytes32[] storageKeys;\n    }\n\n    // Data structures to parse Receipt objects from the broadcast artifact.\n    // The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawReceipt {\n        bytes32 blockHash;\n        bytes blockNumber;\n        address contractAddress;\n        bytes cumulativeGasUsed;\n        bytes effectiveGasPrice;\n        address from;\n        bytes gasUsed;\n        RawReceiptLog[] logs;\n        bytes logsBloom;\n        bytes status;\n        address to;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n    }\n\n    struct Receipt {\n        bytes32 blockHash;\n        uint256 blockNumber;\n        address contractAddress;\n        uint256 cumulativeGasUsed;\n        uint256 effectiveGasPrice;\n        address from;\n        uint256 gasUsed;\n        ReceiptLog[] logs;\n        bytes logsBloom;\n        uint256 status;\n        address to;\n        bytes32 transactionHash;\n        uint256 transactionIndex;\n    }\n\n    // Data structures to parse the entire broadcast artifact, assuming the\n    // transactions conform to EIP1559.\n\n    struct EIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        Receipt[] receipts;\n        uint256 timestamp;\n        Tx1559[] transactions;\n        TxReturn[] txReturns;\n    }\n\n    struct RawEIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        RawReceipt[] receipts;\n        TxReturn[] txReturns;\n        uint256 timestamp;\n        RawTx1559[] transactions;\n    }\n\n    struct RawReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        bytes blockNumber;\n        bytes data;\n        bytes logIndex;\n        bool removed;\n        bytes32[] topics;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n        bytes transactionLogIndex;\n    }\n\n    struct ReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        uint256 blockNumber;\n        bytes data;\n        uint256 logIndex;\n        bytes32[] topics;\n        uint256 transactionIndex;\n        uint256 transactionLogIndex;\n        bool removed;\n    }\n\n    struct TxReturn {\n        string internalType;\n        string value;\n    }\n\n    function assumeNoPrecompiles(address addr) internal virtual {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        assumeNoPrecompiles(addr, chainId);\n    }\n\n    function assumeNoPrecompiles(address addr, uint256 chainId) internal pure virtual {\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\n        // address), but the same rationale for excluding them applies so we include those too.\n\n        // These should be present on all EVM-compatible chains.\n        vm.assume(addr < address(0x1) || addr > address(0x9));\n\n        // forgefmt: disable-start\n        if (chainId == 10 || chainId == 420) {\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\n        } else if (chainId == 42161 || chainId == 421613) {\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\n        } else if (chainId == 43114 || chainId == 43113) {\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\n        }\n        // forgefmt: disable-end\n    }\n\n    function readEIP1559ScriptArtifact(string memory path)\n        internal\n        view\n        virtual\n        returns (EIP1559ScriptArtifact memory)\n    {\n        string memory data = vm.readFile(path);\n        bytes memory parsedData = vm.parseJson(data);\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\n        EIP1559ScriptArtifact memory artifact;\n        artifact.libraries = rawArtifact.libraries;\n        artifact.path = rawArtifact.path;\n        artifact.timestamp = rawArtifact.timestamp;\n        artifact.pending = rawArtifact.pending;\n        artifact.txReturns = rawArtifact.txReturns;\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\n        return artifact;\n    }\n\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\n        for (uint256 i; i < rawTxs.length; i++) {\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\n        }\n        return txs;\n    }\n\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\n        Tx1559 memory transaction;\n        transaction.arguments = rawTx.arguments;\n        transaction.contractName = rawTx.contractName;\n        transaction.functionSig = rawTx.functionSig;\n        transaction.hash = rawTx.hash;\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\n        transaction.opcode = rawTx.opcode;\n        return transaction;\n    }\n\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\n        internal\n        pure\n        virtual\n        returns (Tx1559Detail memory)\n    {\n        Tx1559Detail memory txDetail;\n        txDetail.data = rawDetail.data;\n        txDetail.from = rawDetail.from;\n        txDetail.to = rawDetail.to;\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\n        txDetail.txType = _bytesToUint(rawDetail.txType);\n        txDetail.value = _bytesToUint(rawDetail.value);\n        txDetail.gas = _bytesToUint(rawDetail.gas);\n        txDetail.accessList = rawDetail.accessList;\n        return txDetail;\n    }\n\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\n        return rawToConvertedEIPTx1559s(rawTxs);\n    }\n\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\n        return rawToConvertedEIPTx1559(rawTx);\n    }\n\n    // Analogous to readTransactions, but for receipts.\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }\n\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\n        return rawToConvertedReceipt(rawReceipt);\n    }\n\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\n        for (uint256 i; i < rawReceipts.length; i++) {\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\n        }\n        return receipts;\n    }\n\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\n        Receipt memory receipt;\n        receipt.blockHash = rawReceipt.blockHash;\n        receipt.to = rawReceipt.to;\n        receipt.from = rawReceipt.from;\n        receipt.contractAddress = rawReceipt.contractAddress;\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\n        receipt.status = _bytesToUint(rawReceipt.status);\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\n        receipt.logsBloom = rawReceipt.logsBloom;\n        receipt.transactionHash = rawReceipt.transactionHash;\n        return receipt;\n    }\n\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\n        internal\n        pure\n        virtual\n        returns (ReceiptLog[] memory)\n    {\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\n        for (uint256 i; i < rawLogs.length; i++) {\n            logs[i].logAddress = rawLogs[i].logAddress;\n            logs[i].blockHash = rawLogs[i].blockHash;\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\n            logs[i].data = rawLogs[i].data;\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\n            logs[i].topics = rawLogs[i].topics;\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\n            logs[i].removed = rawLogs[i].removed;\n        }\n        return logs;\n    }\n\n    // Deploy a contract by fetching the contract bytecode from\n    // the artifacts directory\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }\n\n    function deployCode(string memory what) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\n    }\n\n    /// @dev deploy contract with value on construction\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }\n\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\n    }\n\n    // creates a labeled address and the corresponding private key\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }\n\n    // creates a labeled address\n    function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }\n\n    function deriveRememberKey(string memory mnemonic, uint32 index)\n        internal\n        virtual\n        returns (address who, uint256 privateKey)\n    {\n        privateKey = vm.deriveKey(mnemonic, index);\n        who = vm.rememberKey(privateKey);\n    }\n\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    function isFork() internal view virtual returns (bool status) {\n        try vm.activeFork() {\n            status = true;\n        } catch (bytes memory) {}\n    }\n\n    modifier skipWhenForking() {\n        if (!isFork()) {\n            _;\n        }\n    }\n\n    modifier skipWhenNotForking() {\n        if (isFork()) {\n            _;\n        }\n    }\n\n    modifier noGasMetering() {\n        vm.pauseGasMetering();\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\n        // it back on until we exit the top level function that used the modifier\n        //\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\n        // so we only turn metering back on at the end of the funcA\n        bool gasStartedOff = gasMeteringOff;\n        gasMeteringOff = true;\n\n        _;\n\n        // if gas metering was on when this modifier was called, turn it back on at the end\n        if (!gasStartedOff) {\n            gasMeteringOff = false;\n            vm.resumeGasMetering();\n        }\n    }\n\n    // a cheat for fuzzing addresses that are payable only\n    // see https://github.com/foundry-rs/foundry/issues/3631\n    function assumePayable(address addr) internal virtual {\n        (bool success,) = payable(addr).call{value: 0}(\"\");\n        vm.assume(success);\n    }\n}\n\n// Wrappers around cheatcodes to avoid footguns\nabstract contract StdCheats is StdCheatsSafe {\n    using stdStorage for StdStorage;\n\n    StdStorage private stdstore;\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    // Skip forward or rewind time by the specified number of seconds\n    function skip(uint256 time) internal virtual {\n        vm.warp(block.timestamp + time);\n    }\n\n    function rewind(uint256 time) internal virtual {\n        vm.warp(block.timestamp - time);\n    }\n\n    // Setup a prank from an address that has some ether\n    function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender, origin);\n    }\n\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender, origin);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }\n\n    function startHoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    // tx.origin is set to the origin parameter\n    function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function changePrank(address msgSender) internal virtual {\n        vm.stopPrank();\n        vm.startPrank(msgSender);\n    }\n\n    // The same as Vm's `deal`\n    // Use the alternative signature for ERC20 tokens\n    function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }\n\n    // Set the balance of an account for any ERC20 token\n    // Use the alternative signature to update `totalSupply`\n    function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }\n\n    // Set the balance of an account for any ERC1155 token\n    // Use the alternative signature to update `totalSupply`\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }\n\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.call(abi.encodeWithSelector(0x70a08231, to));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.call(abi.encodeWithSelector(0x18160ddd));\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\n        }\n    }\n\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.call(abi.encodeWithSelector(0x00fdd58e, to, id));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.call(abi.encodeWithSelector(0xbd85b039, id));\n            require(\n                totSupData.length != 0,\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\n            );\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\n        }\n    }\n\n    function dealERC721(address token, address to, uint256 id) internal virtual {\n        // check if token id is already minted and the actual owner.\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\n\n        // get owner current balance\n        (, bytes memory fromBalData) = token.call(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\n\n        // get new user current balance\n        (, bytes memory toBalData) = token.call(abi.encodeWithSelector(0x70a08231, to));\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\n\n        // update balances\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\n\n        // update owner\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\n    }\n}\n"
    },
    "forge-std/StdError.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdError {\n    bytes public constant assertionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x01);\n    bytes public constant arithmeticError = abi.encodeWithSignature(\"Panic(uint256)\", 0x11);\n    bytes public constant divisionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x12);\n    bytes public constant enumConversionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x21);\n    bytes public constant encodeStorageError = abi.encodeWithSignature(\"Panic(uint256)\", 0x22);\n    bytes public constant popError = abi.encodeWithSignature(\"Panic(uint256)\", 0x31);\n    bytes public constant indexOOBError = abi.encodeWithSignature(\"Panic(uint256)\", 0x32);\n    bytes public constant memOverflowError = abi.encodeWithSignature(\"Panic(uint256)\", 0x41);\n    bytes public constant zeroVarError = abi.encodeWithSignature(\"Panic(uint256)\", 0x51);\n}\n"
    },
    "forge-std/StdInvariant.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ncontract StdInvariant {\n    struct FuzzSelector {\n        address addr;\n        bytes4[] selectors;\n    }\n\n    address[] private _excludedContracts;\n    address[] private _excludedSenders;\n    address[] private _targetedContracts;\n    address[] private _targetedSenders;\n\n    string[] private _excludedArtifacts;\n    string[] private _targetedArtifacts;\n\n    FuzzSelector[] private _targetedArtifactSelectors;\n    FuzzSelector[] private _targetedSelectors;\n\n    // Functions for users:\n    // These are intended to be called in tests.\n\n    function excludeContract(address newExcludedContract_) internal {\n        _excludedContracts.push(newExcludedContract_);\n    }\n\n    function excludeSender(address newExcludedSender_) internal {\n        _excludedSenders.push(newExcludedSender_);\n    }\n\n    function excludeArtifact(string memory newExcludedArtifact_) internal {\n        _excludedArtifacts.push(newExcludedArtifact_);\n    }\n\n    function targetArtifact(string memory newTargetedArtifact_) internal {\n        _targetedArtifacts.push(newTargetedArtifact_);\n    }\n\n    function targetArtifactSelector(FuzzSelector memory newTargetedArtifactSelector_) internal {\n        _targetedArtifactSelectors.push(newTargetedArtifactSelector_);\n    }\n\n    function targetContract(address newTargetedContract_) internal {\n        _targetedContracts.push(newTargetedContract_);\n    }\n\n    function targetSelector(FuzzSelector memory newTargetedSelector_) internal {\n        _targetedSelectors.push(newTargetedSelector_);\n    }\n\n    function targetSender(address newTargetedSender_) internal {\n        _targetedSenders.push(newTargetedSender_);\n    }\n\n    // Functions for forge:\n    // These are called by forge to run invariant tests and don't need to be called in tests.\n\n    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n}\n"
    },
    "forge-std/StdJson.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing JSON files\n// To parse:\n// ```\n// using stdJson for string;\n// string memory json = vm.readFile(\"some_peth\");\n// json.parseUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdJson for string;\n// string memory json = \"deploymentArtifact\";\n// Contract contract = new Contract();\n// json.serialize(\"contractAddress\", address(contract));\n// json = json.serialize(\"deploymentTimes\", uint(1));\n// // store the stringified JSON to the 'json' variable we have been using as a key\n// // as we won't need it any longer\n// string memory json2 = \"finalArtifact\";\n// string memory final = json2.serialize(\"depArtifact\", json);\n// final.write(\"<some_path>\");\n// ```\n\nlibrary stdJson {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key) internal returns (uint256) {\n        return vm.parseJsonUint(json, key);\n    }\n\n    function readUintArray(string memory json, string memory key) internal returns (uint256[] memory) {\n        return vm.parseJsonUintArray(json, key);\n    }\n\n    function readInt(string memory json, string memory key) internal returns (int256) {\n        return vm.parseJsonInt(json, key);\n    }\n\n    function readIntArray(string memory json, string memory key) internal returns (int256[] memory) {\n        return vm.parseJsonIntArray(json, key);\n    }\n\n    function readBytes32(string memory json, string memory key) internal returns (bytes32) {\n        return vm.parseJsonBytes32(json, key);\n    }\n\n    function readBytes32Array(string memory json, string memory key) internal returns (bytes32[] memory) {\n        return vm.parseJsonBytes32Array(json, key);\n    }\n\n    function readString(string memory json, string memory key) internal returns (string memory) {\n        return vm.parseJsonString(json, key);\n    }\n\n    function readStringArray(string memory json, string memory key) internal returns (string[] memory) {\n        return vm.parseJsonStringArray(json, key);\n    }\n\n    function readAddress(string memory json, string memory key) internal returns (address) {\n        return vm.parseJsonAddress(json, key);\n    }\n\n    function readAddressArray(string memory json, string memory key) internal returns (address[] memory) {\n        return vm.parseJsonAddressArray(json, key);\n    }\n\n    function readBool(string memory json, string memory key) internal returns (bool) {\n        return vm.parseJsonBool(json, key);\n    }\n\n    function readBoolArray(string memory json, string memory key) internal returns (bool[] memory) {\n        return vm.parseJsonBoolArray(json, key);\n    }\n\n    function readBytes(string memory json, string memory key) internal returns (bytes memory) {\n        return vm.parseJsonBytes(json, key);\n    }\n\n    function readBytesArray(string memory json, string memory key) internal returns (bytes[] memory) {\n        return vm.parseJsonBytesArray(json, key);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeJson(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeJson(jsonKey, path, valueKey);\n    }\n}\n"
    },
    "forge-std/StdMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN) {\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n        }\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n"
    },
    "forge-std/StdStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => uint256))) slots;\n    mapping(address => mapping(bytes4 => mapping(bytes32 => bool))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes32[] memory ins = self._keys;\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\n            return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\n        }\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\n        vm.record();\n        bytes32 fdat;\n        {\n            (, bytes memory rdat) = who.staticcall(cald);\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\n        }\n\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n        if (reads.length == 1) {\n            bytes32 curr = vm.load(who, reads[0]);\n            if (curr == bytes32(0)) {\n                emit WARNING_UninitedSlot(who, uint256(reads[0]));\n            }\n            if (fdat != curr) {\n                require(\n                    false,\n                    \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\n                );\n            }\n            emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[0]));\n            self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[0]);\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\n        } else if (reads.length > 1) {\n            for (uint256 i = 0; i < reads.length; i++) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n                // store\n                vm.store(who, reads[i], bytes32(hex\"1337\"));\n                bool success;\n                bytes memory rdat;\n                {\n                    (success, rdat) = who.staticcall(cald);\n                    fdat = bytesToBytes32(rdat, 32 * field_depth);\n                }\n\n                if (success && fdat == bytes32(hex\"1337\")) {\n                    // we found which of the slots is the actual one\n                    emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));\n                    self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);\n                    self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\n                    vm.store(who, reads[i], prev);\n                    break;\n                }\n                vm.store(who, reads[i], prev);\n            }\n        } else {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))],\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n\n        return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        address t = self._target;\n        uint256 s = find(self);\n        return abi.encode(vm.load(t, bytes32(s)));\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.find(self);\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes32[] memory ins = self._keys;\n\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\n            find(self);\n        }\n        bytes32 slot = bytes32(self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]);\n\n        bytes32 fdat;\n        {\n            (, bytes memory rdat) = who.staticcall(cald);\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\n        }\n        bytes32 curr = vm.load(who, slot);\n\n        if (fdat != curr) {\n            require(\n                false,\n                \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\n            );\n        }\n        vm.store(who, slot, set);\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    // Private function so needs to be copied over\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    // Private function so needs to be copied over\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "forge-std/StdStyle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nlibrary StdStyle {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string constant RED = \"\\u001b[91m\";\n    string constant GREEN = \"\\u001b[92m\";\n    string constant YELLOW = \"\\u001b[93m\";\n    string constant BLUE = \"\\u001b[94m\";\n    string constant MAGENTA = \"\\u001b[95m\";\n    string constant CYAN = \"\\u001b[96m\";\n    string constant BOLD = \"\\u001b[1m\";\n    string constant DIM = \"\\u001b[2m\";\n    string constant ITALIC = \"\\u001b[3m\";\n    string constant UNDERLINE = \"\\u001b[4m\";\n    string constant INVERSE = \"\\u001b[7m\";\n    string constant RESET = \"\\u001b[0m\";\n\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\n        return string(abi.encodePacked(style, self, RESET));\n    }\n\n    function red(string memory self) internal pure returns (string memory) {\n        return styleConcat(RED, self);\n    }\n\n    function red(uint256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(int256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(address self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(bool self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes(bytes memory self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function green(string memory self) internal pure returns (string memory) {\n        return styleConcat(GREEN, self);\n    }\n\n    function green(uint256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(int256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(address self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(bool self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function yellow(string memory self) internal pure returns (string memory) {\n        return styleConcat(YELLOW, self);\n    }\n\n    function yellow(uint256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(int256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(address self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(bool self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function blue(string memory self) internal pure returns (string memory) {\n        return styleConcat(BLUE, self);\n    }\n\n    function blue(uint256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(int256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(address self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(bool self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function magenta(string memory self) internal pure returns (string memory) {\n        return styleConcat(MAGENTA, self);\n    }\n\n    function magenta(uint256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(int256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(address self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(bool self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function cyan(string memory self) internal pure returns (string memory) {\n        return styleConcat(CYAN, self);\n    }\n\n    function cyan(uint256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(int256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(address self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(bool self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function bold(string memory self) internal pure returns (string memory) {\n        return styleConcat(BOLD, self);\n    }\n\n    function bold(uint256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(int256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(address self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(bool self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function dim(string memory self) internal pure returns (string memory) {\n        return styleConcat(DIM, self);\n    }\n\n    function dim(uint256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(int256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(address self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(bool self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function italic(string memory self) internal pure returns (string memory) {\n        return styleConcat(ITALIC, self);\n    }\n\n    function italic(uint256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(int256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(address self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(bool self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function underline(string memory self) internal pure returns (string memory) {\n        return styleConcat(UNDERLINE, self);\n    }\n\n    function underline(uint256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(int256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(address self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(bool self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function inverse(string memory self) internal pure returns (string memory) {\n        return styleConcat(INVERSE, self);\n    }\n\n    function inverse(uint256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(int256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(address self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(bool self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n}\n"
    },
    "forge-std/StdUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\n// TODO Remove import.\nimport {VmSafe} from \"./Vm.sol\";\n\nabstract contract StdUtils {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n    uint256 private constant INT256_MIN_ABS =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, warp that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }\n\n    function bound(uint256 x, uint256 min, uint256 max) internal view virtual returns (uint256 result) {\n        result = _bound(x, min, max);\n        console2_log(\"Bound Result\", result);\n    }\n\n    function bound(int256 x, int256 min, int256 max) internal view virtual returns (int256 result) {\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\n\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\n        // int256 : -(2**255) ~ (2**255 - 1)\n        // uint256:     0     ~ (2**256 - 1)\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\n        //\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\n        // So, use `~uint256(x) + 1` instead.\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\n\n        uint256 y = _bound(_x, _min, _max);\n\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\n        console2_log(\"Bound result\", vm.toString(result));\n    }\n\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        // forgefmt: disable-start\n        // The integer zero is treated as an empty byte string, and as a result it only has a length prefix, 0x80, computed via 0x80 + 0.\n        // A one byte integer uses its own value as its length prefix, there is no additional \"0x80 + length\" prefix that comes before it.\n        if (nonce == 0x00)      return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, bytes1(0x80))));\n        if (nonce <= 0x7f)      return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployer, uint8(nonce))));\n\n        // Nonces greater than 1 byte all follow a consistent encoding scheme, where each value is preceded by a prefix of 0x80 + length.\n        if (nonce <= 2**8 - 1)  return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployer, bytes1(0x81), uint8(nonce))));\n        if (nonce <= 2**16 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd8), bytes1(0x94), deployer, bytes1(0x82), uint16(nonce))));\n        if (nonce <= 2**24 - 1) return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployer, bytes1(0x83), uint24(nonce))));\n        // forgefmt: disable-end\n\n        // More details about RLP encoding can be found here: https://eth.wiki/fundamentals/rlp\n        // 0xda = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x84 ++ nonce)\n        // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\n        // 0x84 = 0x80 + 0x04 (0x04 = the bytes length of the nonce, 4 bytes, in hex)\n        // We assume nobody can have a nonce large enough to require more than 32 bytes.\n        return addressFromLast20Bytes(\n            keccak256(abi.encodePacked(bytes1(0xda), bytes1(0x94), deployer, bytes1(0x84), uint32(nonce)))\n        );\n    }\n\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\n        internal\n        pure\n        virtual\n        returns (address)\n    {\n        return addressFromLast20Bytes(keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, initcodeHash)));\n    }\n\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        return computeCreate2Address(salt, initCodeHash, CREATE2_FACTORY);\n    }\n\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }\n\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    /// @param args the ABI-encoded arguments to the constructor of C\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }\n\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n    function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n\n    function console2_log(string memory p0, uint256 p1) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n        status;\n    }\n\n    function console2_log(string memory p0, string memory p1) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n        status;\n    }\n}\n"
    },
    "forge-std/Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\n// 💬 ABOUT\n// Standard Library's default Test\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {StdAssertions} from \"./StdAssertions.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheats} from \"./StdCheats.sol\";\nimport {stdError} from \"./StdError.sol\";\nimport {StdInvariant} from \"./StdInvariant.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {Vm} from \"./Vm.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\n\n// 📦 BOILERPLATE\nimport {TestBase} from \"./Base.sol\";\nimport {DSTest} from \"ds-test/test.sol\";\n\n// ⭐️ TEST\nabstract contract Test is DSTest, StdAssertions, StdChains, StdCheats, StdInvariant, StdUtils, TestBase {\n// Note: IS_TEST() must return true.\n// Note: Must have failure system, https://github.com/dapphub/ds-test/blob/cd98eff28324bfac652e63a239a60632a761790b/src/test.sol#L39-L76.\n}\n"
    },
    "forge-std/Vm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\n// Cheatcodes are marked as view/pure/none using the following rules:\n// 0. A call's observable behaviour includes its return value, logs, reverts and state writes,\n// 1. If you can influence a later call's observable behaviour, you're neither `view` nor `pure (you are modifying some state be it the EVM, interpreter, filesystem, etc),\n// 2. Otherwise if you can be influenced by an earlier call, or if reading some state, you're `view`,\n// 3. Otherwise you're `pure`.\n\ninterface VmSafe {\n    struct Log {\n        bytes32[] topics;\n        bytes data;\n        address emitter;\n    }\n\n    struct Rpc {\n        string key;\n        string url;\n    }\n\n    struct FsMetadata {\n        bool isDir;\n        bool isSymlink;\n        uint256 length;\n        bool readOnly;\n        uint256 modified;\n        uint256 accessed;\n        uint256 created;\n    }\n\n    // Loads a storage slot from an address\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n    // Signs data\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n    // Gets the address for a given private key\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n    // Gets the nonce of an account\n    function getNonce(address account) external view returns (uint64 nonce);\n    // Performs a foreign function call via the terminal\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n    // Sets environment variables\n    function setEnv(string calldata name, string calldata value) external;\n    // Reads environment variables, (name) => (value)\n    function envBool(string calldata name) external view returns (bool value);\n    function envUint(string calldata name) external view returns (uint256 value);\n    function envInt(string calldata name) external view returns (int256 value);\n    function envAddress(string calldata name) external view returns (address value);\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n    function envString(string calldata name) external view returns (string memory value);\n    function envBytes(string calldata name) external view returns (bytes memory value);\n    // Reads environment variables as arrays\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\n    // Read environment variables with default value\n    function envOr(string calldata name, bool defaultValue) external returns (bool value);\n    function envOr(string calldata name, uint256 defaultValue) external returns (uint256 value);\n    function envOr(string calldata name, int256 defaultValue) external returns (int256 value);\n    function envOr(string calldata name, address defaultValue) external returns (address value);\n    function envOr(string calldata name, bytes32 defaultValue) external returns (bytes32 value);\n    function envOr(string calldata name, string calldata defaultValue) external returns (string memory value);\n    function envOr(string calldata name, bytes calldata defaultValue) external returns (bytes memory value);\n    // Read environment variables as arrays with default value\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\n        external\n        returns (bool[] memory value);\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\n        external\n        returns (uint256[] memory value);\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\n        external\n        returns (int256[] memory value);\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\n        external\n        returns (address[] memory value);\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\n        external\n        returns (bytes32[] memory value);\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\n        external\n        returns (string[] memory value);\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\n        external\n        returns (bytes[] memory value);\n    // Records all storage reads and writes\n    function record() external;\n    // Gets all accessed reads and write slot from a recording session, for a given address\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n    // Gets the _creation_ bytecode from an artifact file. Takes in the relative path to the json file\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\n    // Gets the _deployed_ bytecode from an artifact file. Takes in the relative path to the json file\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\n    // Labels an address in call traces\n    function label(address account, string calldata newLabel) external;\n    // Using the address that calls the test contract, has the next call (at this call depth only) create a transaction that can later be signed and sent onchain\n    function broadcast() external;\n    // Has the next call (at this call depth only) create a transaction with the address provided as the sender that can later be signed and sent onchain\n    function broadcast(address signer) external;\n    // Has the next call (at this call depth only) create a transaction with the private key provided as the sender that can later be signed and sent onchain\n    function broadcast(uint256 privateKey) external;\n    // Using the address that calls the test contract, has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain\n    function startBroadcast() external;\n    // Has all subsequent calls (at this call depth only) create transactions with the address provided that can later be signed and sent onchain\n    function startBroadcast(address signer) external;\n    // Has all subsequent calls (at this call depth only) create transactions with the private key provided that can later be signed and sent onchain\n    function startBroadcast(uint256 privateKey) external;\n    // Stops collecting onchain transactions\n    function stopBroadcast() external;\n    // Reads the entire content of file to string\n    function readFile(string calldata path) external view returns (string memory data);\n    // Reads the entire content of file as binary. Path is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n    // Get the path of the current project root\n    function projectRoot() external view returns (string memory path);\n    // Get the metadata for a file/directory\n    function fsMetadata(string calldata fileOrDir) external returns (FsMetadata memory metadata);\n    // Reads next line of file to string\n    function readLine(string calldata path) external view returns (string memory line);\n    // Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    function writeFile(string calldata path, string calldata data) external;\n    // Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    // Path is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n    // Writes line to file, creating a file if it does not exist.\n    function writeLine(string calldata path, string calldata data) external;\n    // Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    function closeFile(string calldata path) external;\n    // Removes file. This cheatcode will revert in the following situations, but is not limited to just these cases:\n    // - Path points to a directory.\n    // - The file doesn't exist.\n    // - The user lacks permissions to remove the file.\n    function removeFile(string calldata path) external;\n    // Convert values to a string\n    function toString(address value) external pure returns (string memory stringifiedValue);\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n    // Convert values from a string\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n    // Record all the transaction logs\n    function recordLogs() external;\n    // Gets all the recorded logs\n    function getRecordedLogs() external returns (Log[] memory logs);\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path m/44'/60'/0'/0/{index}\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at {derivationPath}{index}\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\n        external\n        pure\n        returns (uint256 privateKey);\n    // Adds a private key to the local forge wallet and returns the address\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n    //\n    // parseJson\n    //\n    // ----\n    // In case the returned value is a JSON object, it's encoded as a ABI-encoded tuple. As JSON objects\n    // don't have the notion of ordered, but tuples do, they JSON object is encoded with it's fields ordered in\n    // ALPHABETICAL order. That means that in order to successfully decode the tuple, we need to define a tuple that\n    // encodes the fields in the same order, which is alphabetical. In the case of Solidity structs, they are encoded\n    // as tuples, with the attributes in the order in which they are defined.\n    // For example: json = { 'a': 1, 'b': 0xa4tb......3xs}\n    // a: uint256\n    // b: address\n    // To decode that json, we need to define a struct or a tuple as follows:\n    // struct json = { uint256 a; address b; }\n    // If we defined a json struct with the opposite order, meaning placing the address b first, it would try to\n    // decode the tuple in that order, and thus fail.\n    // ----\n    // Given a string of JSON, return it as ABI-encoded\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    // The following parseJson cheatcodes will do type coercion, for the type that they indicate.\n    // For example, parseJsonUint will coerce all values to a uint256. That includes stringified numbers '12'\n    // and hex numbers '0xEF'.\n    // Type coercion works ONLY for discrete values or arrays. That means that the key must return a value or array, not\n    // a JSON object.\n    function parseJsonUint(string calldata, string calldata) external returns (uint256);\n    function parseJsonUintArray(string calldata, string calldata) external returns (uint256[] memory);\n    function parseJsonInt(string calldata, string calldata) external returns (int256);\n    function parseJsonIntArray(string calldata, string calldata) external returns (int256[] memory);\n    function parseJsonBool(string calldata, string calldata) external returns (bool);\n    function parseJsonBoolArray(string calldata, string calldata) external returns (bool[] memory);\n    function parseJsonAddress(string calldata, string calldata) external returns (address);\n    function parseJsonAddressArray(string calldata, string calldata) external returns (address[] memory);\n    function parseJsonString(string calldata, string calldata) external returns (string memory);\n    function parseJsonStringArray(string calldata, string calldata) external returns (string[] memory);\n    function parseJsonBytes(string calldata, string calldata) external returns (bytes memory);\n    function parseJsonBytesArray(string calldata, string calldata) external returns (bytes[] memory);\n    function parseJsonBytes32(string calldata, string calldata) external returns (bytes32);\n    function parseJsonBytes32Array(string calldata, string calldata) external returns (bytes32[] memory);\n\n    // Serialize a key and value to a JSON object stored in-memory that can be later written to a file\n    // It returns the stringified version of the specific JSON file up to that moment.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n        external\n        returns (string memory json);\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n        external\n        returns (string memory json);\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n        external\n        returns (string memory json);\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n        external\n        returns (string memory json);\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n        external\n        returns (string memory json);\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n        external\n        returns (string memory json);\n\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n        external\n        returns (string memory json);\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n        external\n        returns (string memory json);\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n        external\n        returns (string memory json);\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n        external\n        returns (string memory json);\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n        external\n        returns (string memory json);\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n        external\n        returns (string memory json);\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n        external\n        returns (string memory json);\n\n    //\n    // writeJson\n    //\n    // ----\n    // Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    // Let's assume we want to write the following JSON to a file:\n    //\n    // { \"boolean\": true, \"number\": 342, \"object\": { \"title\": \"finally json serialization\" } }\n    //\n    // ```\n    //  string memory json1 = \"some key\";\n    //  vm.serializeBool(json1, \"boolean\", true);\n    //  vm.serializeBool(json1, \"number\", uint256(342));\n    //  json2 = \"some other key\";\n    //  string memory output = vm.serializeString(json2, \"title\", \"finally json serialization\");\n    //  string memory finalJson = vm.serialize(json1, \"object\", output);\n    //  vm.writeJson(finalJson, \"./output/example.json\");\n    // ```\n    // The critical insight is that every invocation of serialization will return the stringified version of the JSON\n    // up to that point. That means we can construct arbitrary JSON objects and then use the return stringified version\n    // to serialize them as values to another JSON object.\n    //\n    // json1 and json2 are simply keys used by the backend to keep track of the objects. So vm.serializeJson(json1,..)\n    // will find the object in-memory that is keyed by \"some key\".\n    function writeJson(string calldata json, string calldata path) external;\n    // Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key>\n    // This is useful to replace a specific value of a JSON file, without having to parse the entire thing\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n    // Returns the RPC url for the given alias\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n    // Returns all rpc urls and their aliases `[alias, url][]`\n    function rpcUrls() external view returns (string[2][] memory urls);\n    // Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n    // If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n    // Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n    // Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n}\n\ninterface Vm is VmSafe {\n    // Sets block.timestamp\n    function warp(uint256 newTimestamp) external;\n    // Sets block.height\n    function roll(uint256 newHeight) external;\n    // Sets block.basefee\n    function fee(uint256 newBasefee) external;\n    // Sets block.difficulty\n    function difficulty(uint256 newDifficulty) external;\n    // Sets block.chainid\n    function chainId(uint256 newChainId) external;\n    // Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n    // Sets the nonce of an account; must be higher than the current nonce of the account\n    function setNonce(address account, uint64 newNonce) external;\n    // Sets the *next* call's msg.sender to be the input address\n    function prank(address msgSender) external;\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\n    function startPrank(address msgSender) external;\n    // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\n    function prank(address msgSender, address txOrigin) external;\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\n    function startPrank(address msgSender, address txOrigin) external;\n    // Resets subsequent calls' msg.sender to be `address(this)`\n    function stopPrank() external;\n    // Sets an address' balance\n    function deal(address account, uint256 newBalance) external;\n    // Sets an address' code\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n    // Expects an error on next call\n    function expectRevert(bytes calldata revertData) external;\n    function expectRevert(bytes4 revertData) external;\n    function expectRevert() external;\n    // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\n    // logs were emitted in the expected order with the expected topics and data (as specified by the booleans)\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\n        external;\n    // Mocks a call to an address, returning specified data.\n    // Calldata can either be strict or a partial match, e.g. if you only\n    // pass a Solidity selector to the expected calldata, then the entire Solidity\n    // function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n    // Mocks a call to an address with a specific msg.value, returning specified data.\n    // Calldata match takes precedence over msg.value in case of ambiguity.\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\n    // Clears all mocked calls\n    function clearMockedCalls() external;\n    // Expects a call to an address with the specified calldata.\n    // Calldata can either be a strict or a partial match\n    function expectCall(address callee, bytes calldata data) external;\n    // Expects a call to an address with the specified msg.value and calldata\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n    // Expect a call to an address with the specified msg.value, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n    // Expect a call to an address with the specified msg.value and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\n    // Sets block.coinbase\n    function coinbase(address newCoinbase) external;\n    // Snapshot the current state of the evm.\n    // Returns the id of the snapshot that was created.\n    // To revert a snapshot use `revertTo`\n    function snapshot() external returns (uint256 snapshotId);\n    // Revert the state of the EVM to a previous snapshot\n    // Takes the snapshot id to revert to.\n    // This deletes the snapshot and all snapshots taken after the given snapshot id.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n    // Creates a new fork with the given endpoint and block and returns the identifier of the fork\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n    // Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n    // Creates a new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before the transaction,\n    // and returns the identifier of the fork\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n    // Creates _and_ also selects a new fork with the given endpoint and block and returns the identifier of the fork\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n    // Creates _and_ also selects new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before\n    // the transaction, returns the identifier of the fork\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n    // Creates _and_ also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n    // Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n    // Updates the currently active fork to given block number\n    // This is similar to `roll` but for the currently active fork\n    function rollFork(uint256 blockNumber) external;\n    // Updates the currently active fork to given transaction\n    // this will `rollFork` with the number of the block the transaction was mined in and replays all transaction mined before it in the block\n    function rollFork(bytes32 txHash) external;\n    // Updates the given fork to given block number\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n    // Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n    // Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    // Meaning, changes made to the state of this account will be kept when switching forks\n    function makePersistent(address account) external;\n    function makePersistent(address account0, address account1) external;\n    function makePersistent(address account0, address account1, address account2) external;\n    function makePersistent(address[] calldata accounts) external;\n    // Revokes persistent status from the address, previously added via `makePersistent`\n    function revokePersistent(address account) external;\n    function revokePersistent(address[] calldata accounts) external;\n    // Returns true if the account is marked as persistent\n    function isPersistent(address account) external view returns (bool persistent);\n    // In forking mode, explicitly grant the given address cheatcode access\n    function allowCheatcodes(address account) external;\n    // Fetches the given transaction from the active fork and executes it on the current state\n    function transact(bytes32 txHash) external;\n    // Fetches the given transaction from the given fork and executes it on the current state\n    function transact(uint256 forkId, bytes32 txHash) external;\n}\n"
    },
    "fuse-flywheel/FuseFlywheelCore.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.10;\n\nimport \"flywheel-v2/FlywheelCore.sol\";\n\ncontract FuseFlywheelCore is FlywheelCore {\n    bool public constant isRewardsDistributor = true;\n\n    bool public constant isFlywheel = true;\n\n    constructor(\n        ERC20 _rewardToken,\n        IFlywheelRewards _flywheelRewards,\n        IFlywheelBooster _flywheelBooster,\n        address _owner,\n        Authority _authority\n    )\n        FlywheelCore(\n            _rewardToken,\n            _flywheelRewards,\n            _flywheelBooster,\n            _owner,\n            _authority\n        )\n    {}\n\n    function flywheelPreSupplierAction(ERC20 market, address supplier)\n        external\n    {\n        accrue(market, supplier);\n    }\n\n    function flywheelPreBorrowerAction(ERC20 market, address borrower)\n        external\n    {}\n\n    function flywheelPreTransferAction(\n        ERC20 market,\n        address src,\n        address dst\n    ) external {\n        accrue(market, src, dst);\n    }\n\n    function compAccrued(address user) external view returns (uint256) {\n        return rewardsAccrued[user];\n    }\n\n    function addMarketForRewards(ERC20 strategy) external requiresAuth {\n        _addStrategyForRewards(strategy);\n    }\n\n    function marketState(ERC20 strategy)\n        external\n        view\n        returns (RewardsState memory)\n    {\n        return strategyState[strategy];\n    }\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2Upgradeable {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "solmate/auth/Auth.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\nabstract contract Auth {\n    event OwnerUpdated(address indexed user, address indexed newOwner);\n\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\n\n    address public owner;\n\n    Authority public authority;\n\n    constructor(address _owner, Authority _authority) {\n        owner = _owner;\n        authority = _authority;\n\n        emit OwnerUpdated(msg.sender, _owner);\n        emit AuthorityUpdated(msg.sender, _authority);\n    }\n\n    modifier requiresAuth() virtual {\n        require(isAuthorized(msg.sender, msg.sig), \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\n\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\n    }\n\n    function setAuthority(Authority newAuthority) public virtual {\n        // We check if the caller is the owner first because we want to ensure they can\n        // always swap out the authority even if it's reverting or using up a lot of gas.\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\n\n        authority = newAuthority;\n\n        emit AuthorityUpdated(msg.sender, newAuthority);\n    }\n\n    function setOwner(address newOwner) public virtual requiresAuth {\n        owner = newOwner;\n\n        emit OwnerUpdated(msg.sender, newOwner);\n    }\n}\n\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\ninterface Authority {\n    function canCall(\n        address user,\n        address target,\n        bytes4 functionSig\n    ) external view returns (bool);\n}\n"
    },
    "solmate/auth/authorities/RolesAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {Auth, Authority} from \"../Auth.sol\";\n\n/// @notice Role based Authority that supports up to 256 roles.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\ncontract RolesAuthority is Auth, Authority {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\n\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\n\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\n\n    /*//////////////////////////////////////////////////////////////\n                            ROLE/USER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => bytes32) public getUserRoles;\n\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\n\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\n\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\n    }\n\n    function doesRoleHaveCapability(\n        uint8 role,\n        address target,\n        bytes4 functionSig\n    ) public view virtual returns (bool) {\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                           AUTHORIZATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function canCall(\n        address user,\n        address target,\n        bytes4 functionSig\n    ) public view virtual override returns (bool) {\n        return\n            isCapabilityPublic[target][functionSig] ||\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                   ROLE CAPABILITY CONFIGURATION LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setPublicCapability(\n        address target,\n        bytes4 functionSig,\n        bool enabled\n    ) public virtual requiresAuth {\n        isCapabilityPublic[target][functionSig] = enabled;\n\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\n    }\n\n    function setRoleCapability(\n        uint8 role,\n        address target,\n        bytes4 functionSig,\n        bool enabled\n    ) public virtual requiresAuth {\n        if (enabled) {\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\n        } else {\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\n        }\n\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                       USER ROLE ASSIGNMENT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setUserRole(\n        address user,\n        uint8 role,\n        bool enabled\n    ) public virtual requiresAuth {\n        if (enabled) {\n            getUserRoles[user] |= bytes32(1 << role);\n        } else {\n            getUserRoles[user] &= ~bytes32(1 << role);\n        }\n\n        emit UserRoleUpdated(user, role, enabled);\n    }\n}\n"
    },
    "solmate/test/utils/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../../../tokens/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) ERC20(_name, _symbol, _decimals) {}\n\n    function mint(address to, uint256 value) public virtual {\n        _mint(to, value);\n    }\n\n    function burn(address from, uint256 value) public virtual {\n        _burn(from, value);\n    }\n}\n"
    },
    "solmate/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "solmate/utils/SafeCastLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Safe unsigned integer casting library that reverts on overflow.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeCastLib.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\nlibrary SafeCastLib {\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\n        require(x < 1 << 248);\n\n        y = uint248(x);\n    }\n\n    function safeCastTo224(uint256 x) internal pure returns (uint224 y) {\n        require(x < 1 << 224);\n\n        y = uint224(x);\n    }\n\n    function safeCastTo192(uint256 x) internal pure returns (uint192 y) {\n        require(x < 1 << 192);\n\n        y = uint192(x);\n    }\n\n    function safeCastTo160(uint256 x) internal pure returns (uint160 y) {\n        require(x < 1 << 160);\n\n        y = uint160(x);\n    }\n\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\n        require(x < 1 << 128);\n\n        y = uint128(x);\n    }\n\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\n        require(x < 1 << 96);\n\n        y = uint96(x);\n    }\n\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\n        require(x < 1 << 64);\n\n        y = uint64(x);\n    }\n\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\n        require(x < 1 << 32);\n\n        y = uint32(x);\n    }\n\n    function safeCastTo24(uint256 x) internal pure returns (uint24 y) {\n        require(x < 1 << 24);\n\n        y = uint24(x);\n    }\n\n    function safeCastTo16(uint256 x) internal pure returns (uint16 y) {\n        require(x < 1 << 16);\n\n        y = uint16(x);\n    }\n\n    function safeCastTo8(uint256 x) internal pure returns (uint8 y) {\n        require(x < 1 << 8);\n\n        y = uint8(x);\n    }\n}\n"
    },
    "solmate/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}