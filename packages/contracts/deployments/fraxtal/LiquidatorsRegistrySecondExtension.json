{
  "address": "0x45A4a3eBb986083597Ac3B34ee2d7dcC3Be8c5C1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_getExtensionFunctions",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRedemptionStrategy",
          "name": "strategyToRemove",
          "type": "address"
        }
      ],
      "name": "_removeRedemptionStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "strategies",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "inputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "outputTokens",
          "type": "address[]"
        }
      ],
      "name": "_resetRedemptionStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        }
      ],
      "name": "_setDefaultOutputToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "strategies",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "inputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "outputTokens",
          "type": "address[]"
        }
      ],
      "name": "_setRedemptionStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRedemptionStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        }
      ],
      "name": "_setRedemptionStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "inputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "outputTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "slippages",
          "type": "uint256[]"
        }
      ],
      "name": "_setSlippages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "inputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "outputTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint24[]",
          "name": "fees",
          "type": "uint24[]"
        }
      ],
      "name": "_setUniswapV3Fees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "inputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "outputTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "routers",
          "type": "address[]"
        }
      ],
      "name": "_setUniswapV3Routers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ap",
      "outputs": [
        {
          "internalType": "contract AddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "customUniV3Router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "defaultOutputToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairsStrategies",
      "outputs": [
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "strategies",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "inputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "outputTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRedemptionStrategy[]",
          "name": "configStrategies",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "configInputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "configOutputTokens",
          "type": "address[]"
        }
      ],
      "name": "pairsStrategiesMatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "redemptionStrategiesByName",
      "outputs": [
        {
          "internalType": "contract IRedemptionStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redemptionStrategiesByTokens",
      "outputs": [
        {
          "internalType": "contract IRedemptionStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "configInputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "configOutputTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "configFees",
          "type": "uint256[]"
        }
      ],
      "name": "uniswapPairsFeesMatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "configInputTokens",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "configOutputTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "configRouters",
          "type": "address[]"
        }
      ],
      "name": "uniswapPairsRoutersMatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniswapV3Fees",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x47b277f085eaead0b29df9c8ece2155e0f259ba6ffc8eba3c5cb47f037bc2eba",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0x45A4a3eBb986083597Ac3B34ee2d7dcC3Be8c5C1",
    "transactionIndex": 1,
    "gasUsed": "2110633",
    "logsBloom": "0x
    "blockHash": "0x9d8625371a20fec0c11c8e70f8e5a05e5d12083fff13be532cc4ea3f56c1d875",
    "transactionHash": "0x47b277f085eaead0b29df9c8ece2155e0f259ba6ffc8eba3c5cb47f037bc2eba",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8065875,
        "transactionHash": "0x47b277f085eaead0b29df9c8ece2155e0f259ba6ffc8eba3c5cb47f037bc2eba",
        "address": "0x45A4a3eBb986083597Ac3B34ee2d7dcC3Be8c5C1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001155b614971f16758c92c4890ed338c9e3ede6b7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9d8625371a20fec0c11c8e70f8e5a05e5d12083fff13be532cc4ea3f56c1d875"
      }
    ],
    "blockNumber": 8065875,
    "cumulativeGasUsed": "2156654",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "49404c9788cc2cd20379cd4520092cf4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_getExtensionFunctions\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRedemptionStrategy\",\"name\":\"strategyToRemove\",\"type\":\"address\"}],\"name\":\"_removeRedemptionStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"outputTokens\",\"type\":\"address[]\"}],\"name\":\"_resetRedemptionStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"_setDefaultOutputToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"outputTokens\",\"type\":\"address[]\"}],\"name\":\"_setRedemptionStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRedemptionStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"_setRedemptionStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"outputTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"slippages\",\"type\":\"uint256[]\"}],\"name\":\"_setSlippages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"outputTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"fees\",\"type\":\"uint24[]\"}],\"name\":\"_setUniswapV3Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"outputTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"}],\"name\":\"_setUniswapV3Routers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ap\",\"outputs\":[{\"internalType\":\"contract AddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customUniV3Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"defaultOutputToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairsStrategies\",\"outputs\":[{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"inputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"outputTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRedemptionStrategy[]\",\"name\":\"configStrategies\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"configInputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"configOutputTokens\",\"type\":\"address[]\"}],\"name\":\"pairsStrategiesMatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"redemptionStrategiesByName\",\"outputs\":[{\"internalType\":\"contract IRedemptionStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redemptionStrategiesByTokens\",\"outputs\":[{\"internalType\":\"contract IRedemptionStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"configInputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"configOutputTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"configFees\",\"type\":\"uint256[]\"}],\"name\":\"uniswapPairsFeesMatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"configInputTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"configOutputTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"configRouters\",\"type\":\"address[]\"}],\"name\":\"uniswapPairsRoutersMatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapV3Fees\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_getExtensionFunctions()\":{\"returns\":{\"_0\":\"a list of all the function selectors that this logic extension exposes\"}},\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol\":\"LiquidatorsRegistrySecondExtension\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0x6adb35bab98e4b2aeafeba8d975dd22db19800b7bb15ec58e4fb78c837eeb054\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x636eab608b4563c01e88042aba9330e6fe69af2c567fe1adf4d85731974ac81d\",\"license\":\"MIT\"},\"contracts/ionic/AddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title AddressesProvider\\n * @notice The Addresses Provider serves as a central storage of system internal and external\\n *         contract addresses that change between deploys and across chains\\n * @author Veliko Minkov <veliko@midascapital.xyz>\\n */\\ncontract AddressesProvider is SafeOwnableUpgradeable {\\n  mapping(string => address) private _addresses;\\n  mapping(address => Contract) public plugins;\\n  mapping(address => Contract) public flywheelRewards;\\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\\n  JarvisPool[] public jarvisPoolsConfig;\\n  CurveSwapPool[] public curveSwapPoolsConfig;\\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\\n\\n  /// @dev Initializer to set the admin that can set and change contracts addresses\\n  function initialize(address owner) public initializer {\\n    __SafeOwnable_init(owner);\\n  }\\n\\n  /**\\n   * @dev The contract address and a string that uniquely identifies the contract's interface\\n   */\\n  struct Contract {\\n    address addr;\\n    string contractInterface;\\n  }\\n\\n  struct RedemptionStrategy {\\n    address addr;\\n    string contractInterface;\\n    address outputToken;\\n  }\\n\\n  struct FundingStrategy {\\n    address addr;\\n    string contractInterface;\\n    address inputToken;\\n  }\\n\\n  struct JarvisPool {\\n    address syntheticToken;\\n    address collateralToken;\\n    address liquidityPool;\\n    uint256 expirationTime;\\n  }\\n\\n  struct CurveSwapPool {\\n    address poolAddress;\\n    address[] coins;\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\\n   * @param rewardToken the reward token address\\n   * @param flywheelRewardsModule the flywheel rewards module address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setFlywheelRewards(\\n    address rewardToken,\\n    address flywheelRewardsModule,\\n    string calldata contractInterface\\n  ) public onlyOwner {\\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\\n   * @param asset the asset address\\n   * @param plugin the ERC4626 plugin address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setPlugin(\\n    address asset,\\n    address plugin,\\n    string calldata contractInterface\\n  ) public onlyOwner {\\n    plugins[asset] = Contract(plugin, contractInterface);\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\\n   * @param asset the asset address\\n   * @param strategy redemption strategy address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setRedemptionStrategy(\\n    address asset,\\n    address strategy,\\n    string calldata contractInterface,\\n    address outputToken\\n  ) public onlyOwner {\\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\\n  }\\n\\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\\n    return redemptionStrategiesConfig[asset];\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\\n   * @param asset the asset address\\n   * @param strategy funding strategy address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setFundingStrategy(\\n    address asset,\\n    address strategy,\\n    string calldata contractInterface,\\n    address inputToken\\n  ) public onlyOwner {\\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\\n  }\\n\\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\\n    return fundingStrategiesConfig[asset];\\n  }\\n\\n  /**\\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\\n   * @param syntheticToken the synthetic token address\\n   * @param collateralToken the collateral token address\\n   * @param liquidityPool the liquidity pool address\\n   * @param expirationTime the operation expiration time\\n   */\\n  function setJarvisPool(\\n    address syntheticToken,\\n    address collateralToken,\\n    address liquidityPool,\\n    uint256 expirationTime\\n  ) public onlyOwner {\\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\\n  }\\n\\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\\n  }\\n\\n  /**\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\\n    _addresses[id] = newAddress;\\n  }\\n\\n  /**\\n   * @dev Returns an address by id\\n   * @return The address\\n   */\\n  function getAddress(string calldata id) public view returns (address) {\\n    return _addresses[id];\\n  }\\n\\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\\n    return curveSwapPoolsConfig;\\n  }\\n\\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\\n    return jarvisPoolsConfig;\\n  }\\n\\n  function setBalancerPoolForTokens(\\n    address inputToken,\\n    address outputToken,\\n    address pool\\n  ) external onlyOwner {\\n    balancerPoolForTokens[inputToken][outputToken] = pool;\\n  }\\n\\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\\n    return balancerPoolForTokens[inputToken][outputToken];\\n  }\\n}\\n\",\"keccak256\":\"0xf48e9e8b2150408c1c6b68dd957226c342ba47396da792fdaa0922f539a7e163\",\"license\":\"AGPL-3.0-only\"},\"contracts/ionic/DiamondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice a base contract for logic extensions that use the diamond pattern storage\\n * to map the functions when looking up the extension contract to delegate to.\\n */\\nabstract contract DiamondExtension {\\n  /**\\n   * @return a list of all the function selectors that this logic extension exposes\\n   */\\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\\n}\\n\\n// When no function exists for function called\\nerror FunctionNotFound(bytes4 _functionSelector);\\n\\n// When no extension exists for function called\\nerror ExtensionNotFound(bytes4 _functionSelector);\\n\\n// When the function is already added\\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\\n\\nabstract contract DiamondBase {\\n  /**\\n   * @dev register a logic extension\\n   * @param extensionToAdd the extension whose functions are to be added\\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\\n   */\\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\\n\\n  function _listExtensions() public view returns (address[] memory) {\\n    return LibDiamond.listExtensions();\\n  }\\n\\n  fallback() external {\\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\\n    // Execute external function from extension using delegatecall and return any value.\\n    assembly {\\n      // copy function selector and any arguments\\n      calldatacopy(0, 0, calldatasize())\\n      // execute function call using the extension\\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\\n      // get any return value\\n      returndatacopy(0, 0, returndatasize())\\n      // return any return value or error back to the caller\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * @notice a library to use in a contract, whose logic is extended with diamond extension\\n */\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.extensions.diamond.storage\\\");\\n\\n  struct Function {\\n    address extension;\\n    bytes4 selector;\\n  }\\n\\n  struct LogicStorage {\\n    Function[] functions;\\n    address[] extensions;\\n  }\\n\\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\\n    return getExtensionForSelector(msgSig, diamondStorage());\\n  }\\n\\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  function listExtensions() internal view returns (address[] memory) {\\n    return diamondStorage().extensions;\\n  }\\n\\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\\n    if (address(extensionToReplace) != address(0)) {\\n      removeExtension(extensionToReplace);\\n    }\\n    addExtension(extensionToAdd);\\n  }\\n\\n  function removeExtension(DiamondExtension extension) internal {\\n    LogicStorage storage ds = diamondStorage();\\n    // remove all functions of the extension to replace\\n    removeExtensionFunctions(extension);\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\n      if (ds.extensions[i] == address(extension)) {\\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\\n        ds.extensions.pop();\\n      }\\n    }\\n  }\\n\\n  function addExtension(DiamondExtension extension) internal {\\n    LogicStorage storage ds = diamondStorage();\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\n      require(ds.extensions[i] != address(extension), \\\"extension already added\\\");\\n    }\\n    addExtensionFunctions(extension);\\n    ds.extensions.push(address(extension));\\n  }\\n\\n  function removeExtensionFunctions(DiamondExtension extension) internal {\\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\\n    LogicStorage storage ds = diamondStorage();\\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\\n      bytes4 selectorToRemove = fnsToRemove[i];\\n      // must never fail\\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\\n      // swap with the last element in the selectorAtIndex array and remove the last element\\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\\n      ds.functions.pop();\\n    }\\n  }\\n\\n  function addExtensionFunctions(DiamondExtension extension) internal {\\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\\n    LogicStorage storage ds = diamondStorage();\\n    uint16 functionsCount = uint16(ds.functions.length);\\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\\n      bytes4 selector = fnsToAdd[functionsIndex];\\n      address oldImplementation = getExtensionForSelector(selector, ds);\\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\\n      ds.functions.push(Function(address(extension), selector));\\n      functionsCount++;\\n    }\\n  }\\n\\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\\n    uint256 fnsLen = ds.functions.length;\\n    for (uint256 i = 0; i < fnsLen; i++) {\\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\\n    }\\n\\n    return address(0);\\n  }\\n\\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\\n    uint16 fnsLen = uint16(ds.functions.length);\\n    for (uint16 i = 0; i < fnsLen; i++) {\\n      if (ds.functions[i].selector == selector) return i;\\n    }\\n\\n    return type(uint16).max;\\n  }\\n}\\n\",\"keccak256\":\"0x6d33291928e3c255f0276fa465dcc5ea88d74a6562241a39ad2e52ae8abaf7bc\",\"license\":\"UNLICENSED\"},\"contracts/ionic/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nabstract contract SafeOwnable is Ownable2Step {\\n  function renounceOwnership() public override onlyOwner {\\n    revert(\\\"renounce ownership not allowed\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x197d918d773af5d2d6b0235539ede726a9dd5f5153e4c0356a5700f2d85c836f\",\"license\":\"UNLICENSED\"},\"contracts/ionic/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\\n * that will shift the other.\\n */\\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\\n  /**\\n   * @notice Pending owner of this contract\\n   */\\n  address public pendingOwner;\\n\\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\\n    __Ownable_init();\\n    _transferOwnership(owner_);\\n  }\\n\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  modifier onlyOwnerOrAdmin() {\\n    bool isOwner = owner() == _msgSender();\\n    if (!isOwner) {\\n      address admin = _getProxyAdmin();\\n      bool isAdmin = admin == _msgSender();\\n      require(isAdmin, \\\"Ownable: caller is neither the owner nor the admin\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Emitted when pendingOwner is changed\\n   */\\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\\n\\n  /**\\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\\n   */\\n  event NewOwner(address oldOwner, address newOwner);\\n\\n  /**\\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\n   * @param newPendingOwner New pending owner.\\n   */\\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingOwner = pendingOwner;\\n\\n    // Store pendingOwner with value newPendingOwner\\n    pendingOwner = newPendingOwner;\\n\\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\\n   * @dev Owner function for pending owner to accept role and update owner\\n   */\\n  function _acceptOwner() public {\\n    // Check caller is pendingOwner and pendingOwner \\u2260 address(0)\\n    require(msg.sender == pendingOwner, \\\"not the pending owner\\\");\\n\\n    // Save current values for inclusion in log\\n    address oldOwner = owner();\\n    address oldPendingOwner = pendingOwner;\\n\\n    // Store owner with value pendingOwner\\n    _transferOwnership(pendingOwner);\\n\\n    // Clear the pending value\\n    pendingOwner = address(0);\\n\\n    emit NewOwner(oldOwner, pendingOwner);\\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n  }\\n\\n  function renounceOwnership() public override onlyOwner {\\n    // do not remove this overriding fn\\n    revert(\\\"not used anymore\\\");\\n  }\\n\\n  function transferOwnership(address newOwner) public override onlyOwner {\\n    emit NewPendingOwner(pendingOwner, newOwner);\\n    pendingOwner = newOwner;\\n  }\\n\\n  function _getProxyAdmin() internal view returns (address admin) {\\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    AddressSlot storage adminSlot;\\n    assembly {\\n      adminSlot.slot := _ADMIN_SLOT\\n    }\\n    admin = adminSlot.value;\\n  }\\n}\\n\",\"keccak256\":\"0x73f50a022ee86874b63ebd7e418b5948ef2913e32cb80024fe3cd4f17be7f2a5\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/IRedemptionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title IRedemptionStrategy\\n * @notice Redeems seized wrapped token collateral for an underlying token for use as a step in a liquidation.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface IRedemptionStrategy {\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount);\\n\\n  function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x4cf72f79d325ed14f3c8d52e013a8d1f8bfe15b59553bbd9dff251761baf60dd\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/registry/ILiquidatorsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IRedemptionStrategy } from \\\"../../liquidators/IRedemptionStrategy.sol\\\";\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ILiquidatorsRegistryStorage {\\n  function redemptionStrategiesByName(string memory name) external view returns (IRedemptionStrategy);\\n\\n  function redemptionStrategiesByTokens(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\\n    external\\n    view\\n    returns (IRedemptionStrategy);\\n\\n  function defaultOutputToken(IERC20Upgradeable inputToken) external view returns (IERC20Upgradeable);\\n\\n  function owner() external view returns (address);\\n\\n  function uniswapV3Fees(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external view returns (uint24);\\n\\n  function customUniV3Router(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\\n    external\\n    view\\n    returns (address);\\n}\\n\\ninterface ILiquidatorsRegistryExtension {\\n  function getInputTokensByOutputToken(IERC20Upgradeable outputToken) external view returns (address[] memory);\\n\\n  function getRedemptionStrategies(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\\n    external\\n    view\\n    returns (IRedemptionStrategy[] memory strategies, bytes[] memory strategiesData);\\n\\n  function getRedemptionStrategy(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\\n    external\\n    view\\n    returns (IRedemptionStrategy strategy, bytes memory strategyData);\\n\\n  function getAllRedemptionStrategies() external view returns (address[] memory);\\n\\n  function getSlippage(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken)\\n    external\\n    view\\n    returns (uint256 slippage);\\n\\n  function swap(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    IERC20Upgradeable outputToken\\n  ) external returns (uint256);\\n\\n  function amountOutAndSlippageOfSwap(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    IERC20Upgradeable outputToken\\n  ) external returns (uint256 outputAmount, uint256 slippage);\\n}\\n\\ninterface ILiquidatorsRegistrySecondExtension {\\n  function getAllPairsStrategies()\\n    external\\n    view\\n    returns (\\n      IRedemptionStrategy[] memory strategies,\\n      IERC20Upgradeable[] memory inputTokens,\\n      IERC20Upgradeable[] memory outputTokens\\n    );\\n\\n  function pairsStrategiesMatch(\\n    IRedemptionStrategy[] calldata configStrategies,\\n    IERC20Upgradeable[] calldata configInputTokens,\\n    IERC20Upgradeable[] calldata configOutputTokens\\n  ) external view returns (bool);\\n\\n  function uniswapPairsFeesMatch(\\n    IERC20Upgradeable[] calldata configInputTokens,\\n    IERC20Upgradeable[] calldata configOutputTokens,\\n    uint256[] calldata configFees\\n  ) external view returns (bool);\\n\\n  function uniswapPairsRoutersMatch(\\n    IERC20Upgradeable[] calldata configInputTokens,\\n    IERC20Upgradeable[] calldata configOutputTokens,\\n    address[] calldata configRouters\\n  ) external view returns (bool);\\n\\n  function _setRedemptionStrategy(\\n    IRedemptionStrategy strategy,\\n    IERC20Upgradeable inputToken,\\n    IERC20Upgradeable outputToken\\n  ) external;\\n\\n  function _setRedemptionStrategies(\\n    IRedemptionStrategy[] calldata strategies,\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens\\n  ) external;\\n\\n  function _resetRedemptionStrategies(\\n    IRedemptionStrategy[] calldata strategies,\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens\\n  ) external;\\n\\n  function _removeRedemptionStrategy(IRedemptionStrategy strategyToRemove) external;\\n\\n  function _setDefaultOutputToken(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external;\\n\\n  function _setUniswapV3Fees(\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens,\\n    uint24[] calldata fees\\n  ) external;\\n\\n  function _setUniswapV3Routers(\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens,\\n    address[] calldata routers\\n  ) external;\\n\\n  function _setSlippages(\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens,\\n    uint256[] calldata slippages\\n  ) external;\\n}\\n\\ninterface ILiquidatorsRegistry is\\n  ILiquidatorsRegistryExtension,\\n  ILiquidatorsRegistrySecondExtension,\\n  ILiquidatorsRegistryStorage\\n{}\\n\",\"keccak256\":\"0x4fe6a2db7d5ca2855ff683baa4e394498d3b97ee8b23b42ff0e005d0113975f4\",\"license\":\"UNLICENSED\"},\"contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ILiquidatorsRegistry.sol\\\";\\nimport \\\"./LiquidatorsRegistryStorage.sol\\\";\\n\\nimport \\\"../../ionic/DiamondExtension.sol\\\";\\n\\ncontract LiquidatorsRegistrySecondExtension is\\n  LiquidatorsRegistryStorage,\\n  DiamondExtension,\\n  ILiquidatorsRegistrySecondExtension\\n{\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  function _getExtensionFunctions() external pure override returns (bytes4[] memory) {\\n    uint8 fnsCount = 12;\\n    bytes4[] memory functionSelectors = new bytes4[](fnsCount);\\n    functionSelectors[--fnsCount] = this.getAllPairsStrategies.selector;\\n    functionSelectors[--fnsCount] = this.pairsStrategiesMatch.selector;\\n    functionSelectors[--fnsCount] = this.uniswapPairsFeesMatch.selector;\\n    functionSelectors[--fnsCount] = this.uniswapPairsRoutersMatch.selector;\\n    functionSelectors[--fnsCount] = this._setSlippages.selector;\\n    functionSelectors[--fnsCount] = this._setUniswapV3Fees.selector;\\n    functionSelectors[--fnsCount] = this._setUniswapV3Routers.selector;\\n    functionSelectors[--fnsCount] = this._setDefaultOutputToken.selector;\\n    functionSelectors[--fnsCount] = this._setRedemptionStrategy.selector;\\n    functionSelectors[--fnsCount] = this._setRedemptionStrategies.selector;\\n    functionSelectors[--fnsCount] = this._removeRedemptionStrategy.selector;\\n    functionSelectors[--fnsCount] = this._resetRedemptionStrategies.selector;\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n    return functionSelectors;\\n  }\\n\\n  function _setSlippages(\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens,\\n    uint256[] calldata slippages\\n  ) external onlyOwner {\\n    require(slippages.length == inputTokens.length && inputTokens.length == outputTokens.length, \\\"!arrays len\\\");\\n\\n    for (uint256 i = 0; i < slippages.length; i++) {\\n      conversionSlippage[inputTokens[i]][outputTokens[i]] = slippages[i];\\n    }\\n  }\\n\\n  function _setUniswapV3Fees(\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens,\\n    uint24[] calldata fees\\n  ) external onlyOwner {\\n    require(fees.length == inputTokens.length && inputTokens.length == outputTokens.length, \\\"!arrays len\\\");\\n\\n    for (uint256 i = 0; i < fees.length; i++) {\\n      uniswapV3Fees[inputTokens[i]][outputTokens[i]] = fees[i];\\n    }\\n  }\\n\\n  function _setUniswapV3Routers(\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens,\\n    address[] calldata routers\\n  ) external onlyOwner {\\n    require(routers.length == inputTokens.length && inputTokens.length == outputTokens.length, \\\"!arrays len\\\");\\n\\n    for (uint256 i = 0; i < routers.length; i++) {\\n      customUniV3Router[inputTokens[i]][outputTokens[i]] = routers[i];\\n    }\\n  }\\n\\n  function _setDefaultOutputToken(IERC20Upgradeable inputToken, IERC20Upgradeable outputToken) external onlyOwner {\\n    defaultOutputToken[inputToken] = outputToken;\\n  }\\n\\n  function _setRedemptionStrategy(\\n    IRedemptionStrategy strategy,\\n    IERC20Upgradeable inputToken,\\n    IERC20Upgradeable outputToken\\n  ) public onlyOwner {\\n    string memory name = strategy.name();\\n    IRedemptionStrategy oldStrategy = redemptionStrategiesByName[name];\\n\\n    redemptionStrategiesByTokens[inputToken][outputToken] = strategy;\\n    redemptionStrategiesByName[name] = strategy;\\n\\n    redemptionStrategies.remove(address(oldStrategy));\\n    redemptionStrategies.add(address(strategy));\\n\\n    if (defaultOutputToken[inputToken] == IERC20Upgradeable(address(0))) {\\n      defaultOutputToken[inputToken] = outputToken;\\n    }\\n    inputTokensByOutputToken[outputToken].add(address(inputToken));\\n    outputTokensSet.add(address(outputToken));\\n  }\\n\\n  function _setRedemptionStrategies(\\n    IRedemptionStrategy[] calldata strategies,\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens\\n  ) external onlyOwner {\\n    require(strategies.length == inputTokens.length && inputTokens.length == outputTokens.length, \\\"!arrays len\\\");\\n    for (uint256 i = 0; i < strategies.length; i++) {\\n      _setRedemptionStrategy(strategies[i], inputTokens[i], outputTokens[i]);\\n    }\\n  }\\n\\n  function _resetRedemptionStrategies(\\n    IRedemptionStrategy[] calldata strategies,\\n    IERC20Upgradeable[] calldata inputTokens,\\n    IERC20Upgradeable[] calldata outputTokens\\n  ) external onlyOwner {\\n    require(strategies.length == inputTokens.length && inputTokens.length == outputTokens.length, \\\"!arrays len\\\");\\n\\n    // empty the input/output token mappings/sets\\n    address[] memory _outputTokens = outputTokensSet.values();\\n    for (uint256 i = 0; i < _outputTokens.length; i++) {\\n      IERC20Upgradeable _outputToken = IERC20Upgradeable(_outputTokens[i]);\\n      address[] memory _inputTokens = inputTokensByOutputToken[_outputToken].values();\\n      for (uint256 j = 0; j < _inputTokens.length; j++) {\\n        IERC20Upgradeable _inputToken = IERC20Upgradeable(_inputTokens[j]);\\n        redemptionStrategiesByTokens[_inputToken][_outputToken] = IRedemptionStrategy(address(0));\\n        inputTokensByOutputToken[_outputToken].remove(_inputTokens[j]);\\n        defaultOutputToken[_inputToken] = IERC20Upgradeable(address(0));\\n      }\\n      outputTokensSet.remove(_outputTokens[i]);\\n    }\\n\\n    // empty the strategies mappings/sets\\n    address[] memory _currentStrategies = redemptionStrategies.values();\\n    for (uint256 i = 0; i < _currentStrategies.length; i++) {\\n      IRedemptionStrategy _currentStrategy = IRedemptionStrategy(_currentStrategies[i]);\\n      string memory _name = _currentStrategy.name();\\n      redemptionStrategiesByName[_name] = IRedemptionStrategy(address(0));\\n      redemptionStrategies.remove(_currentStrategies[i]);\\n    }\\n\\n    // write the new strategies and their tokens configs\\n    for (uint256 i = 0; i < strategies.length; i++) {\\n      _setRedemptionStrategy(strategies[i], inputTokens[i], outputTokens[i]);\\n    }\\n  }\\n\\n  function _removeRedemptionStrategy(IRedemptionStrategy strategyToRemove) external onlyOwner {\\n    // check all the input/output tokens if they match the strategy to remove\\n    address[] memory _outputTokens = outputTokensSet.values();\\n    for (uint256 i = 0; i < _outputTokens.length; i++) {\\n      IERC20Upgradeable _outputToken = IERC20Upgradeable(_outputTokens[i]);\\n      address[] memory _inputTokens = inputTokensByOutputToken[_outputToken].values();\\n      for (uint256 j = 0; j < _inputTokens.length; j++) {\\n        IERC20Upgradeable _inputToken = IERC20Upgradeable(_inputTokens[j]);\\n        IRedemptionStrategy _currentStrategy = redemptionStrategiesByTokens[_inputToken][_outputToken];\\n\\n        // only nullify the input/output tokens config if the strategy matches\\n        if (_currentStrategy == strategyToRemove) {\\n          redemptionStrategiesByTokens[_inputToken][_outputToken] = IRedemptionStrategy(address(0));\\n          inputTokensByOutputToken[_outputToken].remove(_inputTokens[j]);\\n          if (defaultOutputToken[_inputToken] == _outputToken) {\\n            defaultOutputToken[_inputToken] = IERC20Upgradeable(address(0));\\n          }\\n        }\\n      }\\n      if (inputTokensByOutputToken[_outputToken].length() == 0) {\\n        outputTokensSet.remove(address(_outputToken));\\n      }\\n    }\\n\\n    redemptionStrategiesByName[strategyToRemove.name()] = IRedemptionStrategy(address(0));\\n    redemptionStrategies.remove(address(strategyToRemove));\\n  }\\n\\n  function uniswapPairsFeesMatch(\\n    IERC20Upgradeable[] calldata configInputTokens,\\n    IERC20Upgradeable[] calldata configOutputTokens,\\n    uint256[] calldata configFees\\n  ) external view returns (bool) {\\n    // find a match for each config fee\\n    for (uint256 i = 0; i < configFees.length; i++) {\\n      if (uniswapV3Fees[configInputTokens[i]][configOutputTokens[i]] != configFees[i]) return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  function uniswapPairsRoutersMatch(\\n    IERC20Upgradeable[] calldata configInputTokens,\\n    IERC20Upgradeable[] calldata configOutputTokens,\\n    address[] calldata configRouters\\n  ) external view returns (bool) {\\n    // find a match for each config router\\n    for (uint256 i = 0; i < configRouters.length; i++) {\\n      if (customUniV3Router[configInputTokens[i]][configOutputTokens[i]] != configRouters[i]) return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  function pairsStrategiesMatch(\\n    IRedemptionStrategy[] calldata configStrategies,\\n    IERC20Upgradeable[] calldata configInputTokens,\\n    IERC20Upgradeable[] calldata configOutputTokens\\n  ) external view returns (bool) {\\n    (\\n      IRedemptionStrategy[] memory onChainStrategies,\\n      IERC20Upgradeable[] memory onChainInputTokens,\\n      IERC20Upgradeable[] memory onChainOutputTokens\\n    ) = getAllPairsStrategies();\\n    // find a match for each config strategy\\n    for (uint256 i = 0; i < configStrategies.length; i++) {\\n      bool foundMatch = false;\\n      for (uint256 j = 0; j < onChainStrategies.length; j++) {\\n        if (\\n          onChainStrategies[j] == configStrategies[i] &&\\n          onChainInputTokens[j] == configInputTokens[i] &&\\n          onChainOutputTokens[j] == configOutputTokens[i]\\n        ) {\\n          foundMatch = true;\\n          break;\\n        }\\n      }\\n      if (!foundMatch) return false;\\n    }\\n\\n    // find a match for each on-chain strategy\\n    for (uint256 i = 0; i < onChainStrategies.length; i++) {\\n      bool foundMatch = false;\\n      for (uint256 j = 0; j < configStrategies.length; j++) {\\n        if (\\n          onChainStrategies[i] == configStrategies[j] &&\\n          onChainInputTokens[i] == configInputTokens[j] &&\\n          onChainOutputTokens[i] == configOutputTokens[j]\\n        ) {\\n          foundMatch = true;\\n          break;\\n        }\\n      }\\n      if (!foundMatch) return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  function getAllPairsStrategies()\\n    public\\n    view\\n    returns (\\n      IRedemptionStrategy[] memory strategies,\\n      IERC20Upgradeable[] memory inputTokens,\\n      IERC20Upgradeable[] memory outputTokens\\n    )\\n  {\\n    address[] memory _outputTokens = outputTokensSet.values();\\n    uint256 pairsCounter = 0;\\n\\n    {\\n      for (uint256 i = 0; i < _outputTokens.length; i++) {\\n        IERC20Upgradeable _outputToken = IERC20Upgradeable(_outputTokens[i]);\\n        address[] memory _inputTokens = inputTokensByOutputToken[_outputToken].values();\\n        pairsCounter += _inputTokens.length;\\n      }\\n\\n      strategies = new IRedemptionStrategy[](pairsCounter);\\n      inputTokens = new IERC20Upgradeable[](pairsCounter);\\n      outputTokens = new IERC20Upgradeable[](pairsCounter);\\n    }\\n\\n    pairsCounter = 0;\\n    for (uint256 i = 0; i < _outputTokens.length; i++) {\\n      IERC20Upgradeable _outputToken = IERC20Upgradeable(_outputTokens[i]);\\n      address[] memory _inputTokens = inputTokensByOutputToken[_outputToken].values();\\n      for (uint256 j = 0; j < _inputTokens.length; j++) {\\n        IERC20Upgradeable _inputToken = IERC20Upgradeable(_inputTokens[j]);\\n        strategies[pairsCounter] = redemptionStrategiesByTokens[_inputToken][_outputToken];\\n        inputTokens[pairsCounter] = _inputToken;\\n        outputTokens[pairsCounter] = _outputToken;\\n        pairsCounter++;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8473f080499ad93ee4fe23a08c8f2e23f0ad708daffa1deb5e9725e70c80dd09\",\"license\":\"GPL-3.0\"},\"contracts/liquidators/registry/LiquidatorsRegistryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport \\\"../IRedemptionStrategy.sol\\\";\\nimport { SafeOwnable } from \\\"../../ionic/SafeOwnable.sol\\\";\\nimport { AddressesProvider } from \\\"../../ionic/AddressesProvider.sol\\\";\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract LiquidatorsRegistryStorage is SafeOwnable {\\n  AddressesProvider public ap;\\n\\n  EnumerableSet.AddressSet internal redemptionStrategies;\\n  mapping(string => IRedemptionStrategy) public redemptionStrategiesByName;\\n  mapping(IERC20Upgradeable => mapping(IERC20Upgradeable => IRedemptionStrategy)) public redemptionStrategiesByTokens;\\n  mapping(IERC20Upgradeable => IERC20Upgradeable) public defaultOutputToken;\\n  mapping(IERC20Upgradeable => EnumerableSet.AddressSet) internal inputTokensByOutputToken;\\n  EnumerableSet.AddressSet internal outputTokensSet;\\n\\n  mapping(IERC20Upgradeable => mapping(IERC20Upgradeable => uint256)) internal conversionSlippage;\\n  mapping(IERC20Upgradeable => mapping(IERC20Upgradeable => uint256)) internal conversionSlippageUpdated;\\n\\n  mapping(IERC20Upgradeable => mapping(IERC20Upgradeable => uint24)) public uniswapV3Fees;\\n  mapping(IERC20Upgradeable => mapping(IERC20Upgradeable => address)) public customUniV3Router;\\n}\\n\",\"keccak256\":\"0x95840e79c504ab6ee1d0cf9ff5fcec2424a64dc6ed57f0bf4831f65c89fc9109\",\"license\":\"GPL-3.0\"},\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2b54ec184943843041ab77f61988b5060f6f03acbfe92cdc125f95f00891da\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0\",\"license\":\"MIT\"},\"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063d7341acf1161007c578063d7341acf1461035d578063dee7fe4814610370578063e187a7dd146103a4578063e30c3978146103b7578063eb29d9f8146103c8578063f2fde38b146103db57600080fd5b80638da5cb5b146102955780638db87c27146102a6578063a1bb91e3146102cf578063a700f9e4146102e2578063aeabb62114610316578063c8ff6fee1461032957600080fd5b8063514b49d911610115578063514b49d9146102375780635495a6d71461024a578063715018a61461025d57806372c9889c1461026557806379ba50971461027857806389f8132e1461028057600080fd5b80630d856eef1461015d5780632434cb7f1461017d5780633322d87714610192578063366eda2e146101b5578063398cd955146101c85780633c4f743c1461020c575b600080fd5b6101656103ee565b60405161017493929190611f82565b60405180910390f35b61019061018b366004612002565b6106da565b005b6101a56101a0366004612087565b610710565b6040519015158152602001610174565b6101906101c3366004612087565b610a0e565b6101f86101d6366004612002565b600d60209081526000928352604080842090915290825290205462ffffff1681565b60405162ffffff9091168152602001610174565b60025461021f906001600160a01b031681565b6040516001600160a01b039091168152602001610174565b610190610245366004612121565b610ae7565b610190610258366004612087565b610da0565b610190610e96565b610190610273366004612087565b610ee6565b610190611001565b61028861107b565b604051610174919061213e565b6000546001600160a01b031661021f565b61021f6102b4366004612121565b6007602052600090815260409020546001600160a01b031681565b6101906102dd366004612087565b611408565b61021f6102f0366004612002565b60066020908152600092835260408084209091529082529020546001600160a01b031681565b6101a5610324366004612087565b61178a565b61021f610337366004612002565b600e6020908152600092835260408084209091529082529020546001600160a01b031681565b61019061036b36600461218c565b611886565b61021f61037e366004612246565b80516020818301810180516005825292820191909301209152546001600160a01b031681565b6101906103b2366004612087565b611a30565b6001546001600160a01b031661021f565b6101a56103d6366004612087565b611b49565b6101906103e9366004612121565b611c22565b606080606060006103ff6009611ce3565b90506000805b8251811015610481576000838281518110610422576104226122c6565b60200260200101519050600061045b60086000846001600160a01b03166001600160a01b03168152602001908152602001600020611ce3565b905080518461046a91906122f2565b9350505080806104799061230a565b915050610405565b508067ffffffffffffffff81111561049b5761049b6121d7565b6040519080825280602002602001820160405280156104c4578160200160208202803683370190505b5094508067ffffffffffffffff8111156104e0576104e06121d7565b604051908082528060200260200182016040528015610509578160200160208202803683370190505b5093508067ffffffffffffffff811115610525576105256121d7565b60405190808252806020026020018201604052801561054e578160200160208202803683370190505b5092506000905060005b82518110156106d2576000838281518110610575576105756122c6565b6020026020010151905060006105ae60086000846001600160a01b03166001600160a01b03168152602001908152602001600020611ce3565b905060005b81518110156106bc5760008282815181106105d0576105d06122c6565b6020908102919091018101516001600160a01b038082166000908152600684526040808220898416835290945292909220548c51919350909116908b908890811061061d5761061d6122c6565b60200260200101906001600160a01b031690816001600160a01b03168152505080898781518110610650576106506122c6565b60200260200101906001600160a01b031690816001600160a01b03168152505083888781518110610683576106836122c6565b6001600160a01b0390921660209283029190910190910152856106a58161230a565b9650505080806106b49061230a565b9150506105b3565b50505080806106ca9061230a565b915050610558565b505050909192565b6106e2611cf7565b6001600160a01b03918216600090815260076020526040902080546001600160a01b03191691909216179055565b60008060008061071e6103ee565b92509250925060005b8981101561088f576000805b8551811015610868578c8c8481811061074e5761074e6122c6565b90506020020160208101906107639190612121565b6001600160a01b031686828151811061077e5761077e6122c6565b60200260200101516001600160a01b03161480156107ec57508a8a848181106107a9576107a96122c6565b90506020020160208101906107be9190612121565b6001600160a01b03168582815181106107d9576107d96122c6565b60200260200101516001600160a01b0316145b80156108485750888884818110610805576108056122c6565b905060200201602081019061081a9190612121565b6001600160a01b0316848281518110610835576108356122c6565b60200260200101516001600160a01b0316145b156108565760019150610868565b806108608161230a565b915050610733565b508061087c57600095505050505050610a04565b50806108878161230a565b915050610727565b5060005b83518110156109fb576000805b8b8110156109d4578c8c828181106108ba576108ba6122c6565b90506020020160208101906108cf9190612121565b6001600160a01b03168684815181106108ea576108ea6122c6565b60200260200101516001600160a01b031614801561095857508a8a82818110610915576109156122c6565b905060200201602081019061092a9190612121565b6001600160a01b0316858481518110610945576109456122c6565b60200260200101516001600160a01b0316145b80156109b45750888882818110610971576109716122c6565b90506020020160208101906109869190612121565b6001600160a01b03168484815181106109a1576109a16122c6565b60200260200101516001600160a01b0316145b156109c257600191506109d4565b806109cc8161230a565b9150506108a0565b50806109e857600095505050505050610a04565b50806109f38161230a565b915050610893565b50600193505050505b9695505050505050565b610a16611cf7565b8483148015610a2457508281145b610a495760405162461bcd60e51b8152600401610a4090612325565b60405180910390fd5b60005b85811015610ade57610acc878783818110610a6957610a696122c6565b9050602002016020810190610a7e9190612121565b868684818110610a9057610a906122c6565b9050602002016020810190610aa59190612121565b858585818110610ab757610ab76122c6565b905060200201602081019061036b9190612121565b80610ad68161230a565b915050610a4c565b50505050505050565b610aef611cf7565b6000610afb6009611ce3565b905060005b8151811015610ce9576000828281518110610b1d57610b1d6122c6565b602002602001015190506000610b5660086000846001600160a01b03166001600160a01b03168152602001908152602001600020611ce3565b905060005b8151811015610ca1576000828281518110610b7857610b786122c6565b6020908102919091018101516001600160a01b038082166000908152600684526040808220898416835290945292909220549092508116908816811415610c8c576001600160a01b03808316600090815260066020908152604080832093891683529290522080546001600160a01b03191690558351610c3f90859085908110610c0457610c046122c6565b602002602001015160086000886001600160a01b03166001600160a01b03168152602001908152602001600020611d5390919063ffffffff16565b506001600160a01b0382811660009081526007602052604090205481169086161415610c8c576001600160a01b038216600090815260076020526040902080546001600160a01b03191690555b50508080610c999061230a565b915050610b5b565b506001600160a01b0382166000908152600860205260409020610cc390611d68565b610cd457610cd2600983611d53565b505b50508080610ce19061230a565b915050610b00565b5060006005836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d54919081019061237a565b604051610d6191906123f1565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055610d9b600383611d53565b505050565b610da8611cf7565b8085148015610db657508483145b610dd25760405162461bcd60e51b8152600401610a4090612325565b60005b81811015610ade57828282818110610def57610def6122c6565b90506020020135600b6000898985818110610e0c57610e0c6122c6565b9050602002016020810190610e219190612121565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610e5557610e556122c6565b9050602002016020810190610e6a9190612121565b6001600160a01b0316815260208101919091526040016000205580610e8e8161230a565b915050610dd5565b610e9e611cf7565b60405162461bcd60e51b815260206004820152601e60248201527f72656e6f756e6365206f776e657273686970206e6f7420616c6c6f77656400006044820152606401610a40565b610eee611cf7565b8085148015610efc57508483145b610f185760405162461bcd60e51b8152600401610a4090612325565b60005b81811015610ade57828282818110610f3557610f356122c6565b9050602002016020810190610f4a9190612121565b600e6000898985818110610f6057610f606122c6565b9050602002016020810190610f759190612121565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110610fa957610fa96122c6565b9050602002016020810190610fbe9190612121565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905580610ff98161230a565b915050610f1b565b60015433906001600160a01b0316811461106f5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610a40565b61107881611d72565b50565b60408051600c8082526101a0820190925260609190600090826020820161018080368337019050509050630d856eef60e01b816110b78461240d565b93508360ff16815181106110cd576110cd6122c6565b6001600160e01b031990921660209283029190910190910152633322d87760e01b816110f88461240d565b93508360ff168151811061110e5761110e6122c6565b6001600160e01b031990921660209283029190910190910152631d653b3f60e31b816111398461240d565b93508360ff168151811061114f5761114f6122c6565b6001600160e01b03199092166020928302919091019091015263aeabb62160e01b8161117a8461240d565b93508360ff1681518110611190576111906122c6565b6001600160e01b031990921660209283029190910190910152635495a6d760e01b816111bb8461240d565b93508360ff16815181106111d1576111d16122c6565b6001600160e01b03199092166020928302919091019091015263e187a7dd60e01b816111fc8461240d565b93508360ff1681518110611212576112126122c6565b6001600160e01b031990921660209283029190910190910152631cb2622760e21b8161123d8461240d565b93508360ff1681518110611253576112536122c6565b6001600160e01b031990921660209283029190910190910152632434cb7f60e01b8161127e8461240d565b93508360ff1681518110611294576112946122c6565b6001600160e01b03199092166020928302919091019091015263d7341acf60e01b816112bf8461240d565b93508360ff16815181106112d5576112d56122c6565b6001600160e01b031990921660209283029190910190910152631b376d1760e11b816113008461240d565b93508360ff1681518110611316576113166122c6565b6001600160e01b03199092166020928302919091019091015263514b49d960e01b816113418461240d565b93508360ff1681518110611357576113576122c6565b6001600160e01b03199092166020928302919091019091015263a1bb91e360e01b816113828461240d565b93508360ff1681518110611398576113986122c6565b6001600160e01b03199092166020928302919091019091015260ff8216156114025760405162461bcd60e51b815260206004820152601c60248201527f7573652074686520636f7272656374206172726179206c656e677468000000006044820152606401610a40565b92915050565b611410611cf7565b848314801561141e57508281145b61143a5760405162461bcd60e51b8152600401610a4090612325565b60006114466009611ce3565b905060005b81518110156115d4576000828281518110611468576114686122c6565b6020026020010151905060006114a160086000846001600160a01b03166001600160a01b03168152602001908152602001600020611ce3565b905060005b81518110156115905760008282815181106114c3576114c36122c6565b6020908102919091018101516001600160a01b03808216600090815260068452604080822092891682529190935290912080546001600160a01b031916905583519091506115589084908490811061151d5761151d6122c6565b602002602001015160086000876001600160a01b03166001600160a01b03168152602001908152602001600020611d5390919063ffffffff16565b506001600160a01b0316600090815260076020526040902080546001600160a01b0319169055806115888161230a565b9150506114a6565b506115be8484815181106115a6576115a66122c6565b60200260200101516009611d5390919063ffffffff16565b50505080806115cc9061230a565b91505061144b565b5060006115e16003611ce3565b905060005b81518110156116fe576000828281518110611603576116036122c6565b602002602001015190506000816001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801561164d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611675919081019061237a565b9050600060058260405161168991906123f1565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506116e88484815181106116d0576116d06122c6565b60200260200101516003611d5390919063ffffffff16565b50505080806116f69061230a565b9150506115e6565b5060005b8781101561177f5761176d89898381811061171f5761171f6122c6565b90506020020160208101906117349190612121565b888884818110611746576117466122c6565b905060200201602081019061175b9190612121565b878785818110610ab757610ab76122c6565b806117778161230a565b915050611702565b505050505050505050565b6000805b82811015611878578383828181106117a8576117a86122c6565b90506020020160208101906117bd9190612121565b6001600160a01b0316600e60008a8a858181106117dc576117dc6122c6565b90506020020160208101906117f19190612121565b6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110611825576118256122c6565b905060200201602081019061183a9190612121565b6001600160a01b0390811682526020820192909252604001600020541614611866576000915050610a04565b806118708161230a565b91505061178e565b506001979650505050505050565b61188e611cf7565b6000836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156118ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118f6919081019061237a565b9050600060058260405161190a91906123f1565b9081526040805160209281900383018120546001600160a01b0388811660009081526006865284812089831682529095529290932080546001600160a01b0319168984161790559116915085906005906119659085906123f1565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905561199f600382611d53565b506119ab600386611d8b565b506001600160a01b03848116600090815260076020526040902054166119fa576001600160a01b03848116600090815260076020526040902080546001600160a01b0319169185169190911790555b6001600160a01b0383166000908152600860205260409020611a1c9085611d8b565b50611a28600984611d8b565b505050505050565b611a38611cf7565b8085148015611a4657508483145b611a625760405162461bcd60e51b8152600401610a4090612325565b60005b81811015610ade57828282818110611a7f57611a7f6122c6565b9050602002016020810190611a94919061242a565b600d6000898985818110611aaa57611aaa6122c6565b9050602002016020810190611abf9190612121565b6001600160a01b03166001600160a01b031681526020019081526020016000206000878785818110611af357611af36122c6565b9050602002016020810190611b089190612121565b6001600160a01b031681526020810191909152604001600020805462ffffff191662ffffff9290921691909117905580611b418161230a565b915050611a65565b6000805b8281101561187857838382818110611b6757611b676122c6565b90506020020135600d60008a8a85818110611b8457611b846122c6565b9050602002016020810190611b999190612121565b6001600160a01b03166001600160a01b031681526020019081526020016000206000888885818110611bcd57611bcd6122c6565b9050602002016020810190611be29190612121565b6001600160a01b0316815260208101919091526040016000205462ffffff1614611c10576000915050610a04565b80611c1a8161230a565b915050611b4d565b611c2a611cf7565b600180546001600160a01b0383166001600160a01b03199091168117909155611c5b6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000611cf083611da0565b9392505050565b6000546001600160a01b03163314611d515760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a40565b565b6000611cf0836001600160a01b038416611dfc565b6000611402825490565b600180546001600160a01b031916905561107881611c93565b6000611cf0836001600160a01b038416611eef565b606081600001805480602002602001604051908101604052809291908181526020018280548015611df057602002820191906000526020600020905b815481526020019060010190808311611ddc575b50505050509050919050565b60008181526001830160205260408120548015611ee5576000611e2060018361244f565b8554909150600090611e349060019061244f565b9050818114611e99576000866000018281548110611e5457611e546122c6565b9060005260206000200154905080876000018481548110611e7757611e776122c6565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611eaa57611eaa612466565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611402565b6000915050611402565b6000818152600183016020526040812054611f3657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611402565b506000611402565b600081518084526020808501945080840160005b83811015611f775781516001600160a01b031687529582019590820190600101611f52565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b82811015611fc45781516001600160a01b031684529284019290840190600101611f9f565b50505083810382850152611fd88187611f3e565b9150508281036040840152610a048185611f3e565b6001600160a01b038116811461107857600080fd5b6000806040838503121561201557600080fd5b823561202081611fed565b9150602083013561203081611fed565b809150509250929050565b60008083601f84011261204d57600080fd5b50813567ffffffffffffffff81111561206557600080fd5b6020830191508360208260051b850101111561208057600080fd5b9250929050565b600080600080600080606087890312156120a057600080fd5b863567ffffffffffffffff808211156120b857600080fd5b6120c48a838b0161203b565b909850965060208901359150808211156120dd57600080fd5b6120e98a838b0161203b565b9096509450604089013591508082111561210257600080fd5b5061210f89828a0161203b565b979a9699509497509295939492505050565b60006020828403121561213357600080fd5b8135611cf081611fed565b6020808252825182820181905260009190848201906040850190845b818110156121805783516001600160e01b0319168352928401929184019160010161215a565b50909695505050505050565b6000806000606084860312156121a157600080fd5b83356121ac81611fed565b925060208401356121bc81611fed565b915060408401356121cc81611fed565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612216576122166121d7565b604052919050565b600067ffffffffffffffff821115612238576122386121d7565b50601f01601f191660200190565b60006020828403121561225857600080fd5b813567ffffffffffffffff81111561226f57600080fd5b8201601f8101841361228057600080fd5b803561229361228e8261221e565b6121ed565b8181528560208385010111156122a857600080fd5b81602084016020830137600091810160200191909152949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115612305576123056122dc565b500190565b600060001982141561231e5761231e6122dc565b5060010190565b6020808252600b908201526a10b0b93930bcb9903632b760a91b604082015260600190565b60005b8381101561236557818101518382015260200161234d565b83811115612374576000848401525b50505050565b60006020828403121561238c57600080fd5b815167ffffffffffffffff8111156123a357600080fd5b8201601f810184136123b457600080fd5b80516123c261228e8261221e565b8181528560208385010111156123d757600080fd5b6123e882602083016020860161234a565b95945050505050565b6000825161240381846020870161234a565b9190910192915050565b600060ff821680612420576124206122dc565b6000190192915050565b60006020828403121561243c57600080fd5b813562ffffff81168114611cf057600080fd5b600082821015612461576124616122dc565b500390565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ac03726472f477f18f904c24e6e7f7118c33a17c584435285b1fd9b0954001b964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_getExtensionFunctions()": {
        "returns": {
          "_0": "a list of all the function selectors that this logic extension exposes"
        }
      },
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 67627,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "ap",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AddressesProvider)42154"
      },
      {
        "astId": 67630,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "redemptionStrategies",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)2039_storage"
      },
      {
        "astId": 67635,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "redemptionStrategiesByName",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_contract(IRedemptionStrategy)58580)"
      },
      {
        "astId": 67644,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "redemptionStrategiesByTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_contract(IRedemptionStrategy)58580))"
      },
      {
        "astId": 67650,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "defaultOutputToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IERC20Upgradeable)166333,t_contract(IERC20Upgradeable)166333)"
      },
      {
        "astId": 67656,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "inputTokensByOutputToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_contract(IERC20Upgradeable)166333,t_struct(AddressSet)2039_storage)"
      },
      {
        "astId": 67659,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "outputTokensSet",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(AddressSet)2039_storage"
      },
      {
        "astId": 67667,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "conversionSlippage",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_uint256))"
      },
      {
        "astId": 67675,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "conversionSlippageUpdated",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_uint256))"
      },
      {
        "astId": 67683,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "uniswapV3Fees",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_uint24))"
      },
      {
        "astId": 67691,
        "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
        "label": "customUniV3Router",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AddressesProvider)42154": {
        "encoding": "inplace",
        "label": "contract AddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)166333": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IRedemptionStrategy)58580": {
        "encoding": "inplace",
        "label": "contract IRedemptionStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_address)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_contract(IERC20Upgradeable)166333)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => contract IERC20Upgradeable)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20Upgradeable)166333"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_contract(IRedemptionStrategy)58580)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => contract IRedemptionStrategy)",
        "numberOfBytes": "32",
        "value": "t_contract(IRedemptionStrategy)58580"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_address))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => mapping(contract IERC20Upgradeable => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20Upgradeable)166333,t_address)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_contract(IRedemptionStrategy)58580))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => mapping(contract IERC20Upgradeable => contract IRedemptionStrategy))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20Upgradeable)166333,t_contract(IRedemptionStrategy)58580)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_uint24))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => mapping(contract IERC20Upgradeable => uint24))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20Upgradeable)166333,t_uint24)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_mapping(t_contract(IERC20Upgradeable)166333,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => mapping(contract IERC20Upgradeable => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20Upgradeable)166333,t_uint256)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_struct(AddressSet)2039_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2039_storage"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_uint24)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_mapping(t_contract(IERC20Upgradeable)166333,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)166333",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_contract(IRedemptionStrategy)58580)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract IRedemptionStrategy)",
        "numberOfBytes": "32",
        "value": "t_contract(IRedemptionStrategy)58580"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2039_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2038,
            "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1724_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1724_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1719,
            "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1723,
            "contract": "contracts/liquidators/registry/LiquidatorsRegistrySecondExtension.sol:LiquidatorsRegistrySecondExtension",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}