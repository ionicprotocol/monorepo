{
  "address": "0x83188e4Ddc25f3D1A69C3010f5C74ADF73E0f769",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyVotedOrDeposited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DistributeWindow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumVotingNumberTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonZeroVotes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDistributeWindow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelistedNFT",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "RewardAccumulatorDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardAccumulator",
          "type": "address"
        }
      ],
      "name": "RewardAccumulatorNotAlive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokensArrayEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyPools",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnequalLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroWeight",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Abstained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "rewardAccumulators",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "bribes",
          "type": "address[]"
        }
      ],
      "name": "BribesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAlive",
          "type": "bool"
        }
      ],
      "name": "DistributionTimelockAliveToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "GovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mpo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "lpTokens",
          "type": "address[]"
        }
      ],
      "name": "LpTokensSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "enum IVoter.MarketSide[]",
          "name": "marketSides",
          "type": "uint8[]"
        },
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "rewardAccumulators",
          "type": "address[]"
        }
      ],
      "name": "MarketRewardAccumulatorsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketAddress",
              "type": "address"
            },
            {
              "internalType": "enum IVoter.MarketSide",
              "name": "side",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IVoter.Market[]",
          "name": "markets",
          "type": "tuple[]"
        }
      ],
      "name": "MarketsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maxVotingNum",
          "type": "uint256"
        }
      ],
      "name": "MaxVotingNumSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mpo",
          "type": "address"
        }
      ],
      "name": "MpoSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum IVoter.MarketSide",
          "name": "marketSide",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAlive",
          "type": "bool"
        }
      ],
      "name": "RewardAccumulatorAliveToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "WhitelistNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "WhitelistToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "marketAddress",
              "type": "address"
            },
            {
              "internalType": "enum IVoter.MarketSide",
              "name": "side",
              "type": "uint8"
            }
          ],
          "internalType": "struct IVoter.Market[]",
          "name": "_markets",
          "type": "tuple[]"
        }
      ],
      "name": "addMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "baseWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochVoteEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochVoteStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLpRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpAsset",
          "type": "address"
        }
      ],
      "name": "getVoteDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "marketVotes",
              "type": "address[]"
            },
            {
              "internalType": "enum IVoter.MarketSide[]",
              "name": "marketVoteSides",
              "type": "uint8[]"
            },
            {
              "internalType": "uint256[]",
              "name": "votes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "usedWeight",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVoter.VoteDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "contract MasterPriceOracle",
          "name": "_mpo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isWhitelistedNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastVoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "marketToRewardAccumulators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketVoteSide",
      "outputs": [
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "marketAddress",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "side",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxVotingNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mpo",
      "outputs": [
        {
          "internalType": "contract MasterPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardAccumulatorToBribe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardAccumulators",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        }
      ],
      "name": "setBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "setGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lpTokens",
          "type": "address[]"
        }
      ],
      "name": "setLpTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_markets",
          "type": "address[]"
        },
        {
          "internalType": "enum IVoter.MarketSide[]",
          "name": "_marketSides",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "_rewardAccumulators",
          "type": "address[]"
        }
      ],
      "name": "setMarketRewardAccumulators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxVotingNum",
          "type": "uint256"
        }
      ],
      "name": "setMaxVotingNum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mpo",
          "type": "address"
        }
      ],
      "name": "setMpo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isAlive",
          "type": "bool"
        }
      ],
      "name": "toggleDistributionTimelockAlive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "_marketSide",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_isAlive",
          "type": "bool"
        }
      ],
      "name": "toggleRewardAccumulatorAlive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usedWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_marketVote",
          "type": "address[]"
        },
        {
          "internalType": "enum IVoter.MarketSide[]",
          "name": "_marketVoteSide",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVoter.MarketSide",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "whitelistNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "whitelistToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5955507b56582d05dca00fdc9593c9eec513b313f9fb4659f302b197edaa9f9c",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0x83188e4Ddc25f3D1A69C3010f5C74ADF73E0f769",
    "transactionIndex": 1,
    "gasUsed": "4106486",
    "logsBloom": "0x
    "blockHash": "0x5e8583a424ef0d1c40b724ed4bafc720efd0d232aa9dfe4c785ea56df1290b05",
    "transactionHash": "0x5955507b56582d05dca00fdc9593c9eec513b313f9fb4659f302b197edaa9f9c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15628634,
        "transactionHash": "0x5955507b56582d05dca00fdc9593c9eec513b313f9fb4659f302b197edaa9f9c",
        "address": "0x83188e4Ddc25f3D1A69C3010f5C74ADF73E0f769",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x5e8583a424ef0d1c40b724ed4bafc720efd0d232aa9dfe4c785ea56df1290b05"
      }
    ],
    "blockNumber": 15628634,
    "cumulativeGasUsed": "4150301",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e80c3ac672326d6dc8195bcd28be67f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyVotedOrDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributeWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumVotingNumberTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonZeroVotes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDistributeWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistedNFT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"RewardAccumulatorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAccumulator\",\"type\":\"address\"}],\"name\":\"RewardAccumulatorNotAlive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensArrayEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyPools\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroWeight\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"rewardAccumulators\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"bribes\",\"type\":\"address[]\"}],\"name\":\"BribesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAlive\",\"type\":\"bool\"}],\"name\":\"DistributionTimelockAliveToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"GovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mpo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"LpTokensSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"enum IVoter.MarketSide[]\",\"name\":\"marketSides\",\"type\":\"uint8[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"rewardAccumulators\",\"type\":\"address[]\"}],\"name\":\"MarketRewardAccumulatorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"side\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IVoter.Market[]\",\"name\":\"markets\",\"type\":\"tuple[]\"}],\"name\":\"MarketsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxVotingNum\",\"type\":\"uint256\"}],\"name\":\"MaxVotingNumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mpo\",\"type\":\"address\"}],\"name\":\"MpoSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"marketSide\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAlive\",\"type\":\"bool\"}],\"name\":\"RewardAccumulatorAliveToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"WhitelistNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"WhitelistToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"side\",\"type\":\"uint8\"}],\"internalType\":\"struct IVoter.Market[]\",\"name\":\"_markets\",\"type\":\"tuple[]\"}],\"name\":\"addMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochVoteEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochVoteStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLpRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpAsset\",\"type\":\"address\"}],\"name\":\"getVoteDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"marketVotes\",\"type\":\"address[]\"},{\"internalType\":\"enum IVoter.MarketSide[]\",\"name\":\"marketVoteSides\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"votes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"usedWeight\",\"type\":\"uint256\"}],\"internalType\":\"struct IVoter.VoteDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"contract MasterPriceOracle\",\"name\":\"_mpo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isWhitelistedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"marketToRewardAccumulators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketVoteSide\",\"outputs\":[{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"marketAddress\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"side\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVotingNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpo\",\"outputs\":[{\"internalType\":\"contract MasterPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAccumulatorToBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardAccumulators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"}],\"name\":\"setBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"}],\"name\":\"setLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_markets\",\"type\":\"address[]\"},{\"internalType\":\"enum IVoter.MarketSide[]\",\"name\":\"_marketSides\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardAccumulators\",\"type\":\"address[]\"}],\"name\":\"setMarketRewardAccumulators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxVotingNum\",\"type\":\"uint256\"}],\"name\":\"setMaxVotingNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mpo\",\"type\":\"address\"}],\"name\":\"setMpo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isAlive\",\"type\":\"bool\"}],\"name\":\"toggleDistributionTimelockAlive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"_marketSide\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isAlive\",\"type\":\"bool\"}],\"name\":\"toggleRewardAccumulatorAlive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_marketVote\",\"type\":\"address[]\"},{\"internalType\":\"enum IVoter.MarketSide[]\",\"name\":\"_marketVoteSide\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVoter.MarketSide\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\",\"events\":{\"Abstained(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"pool\":\"Address of the pool.\",\"timestamp\":\"Timestamp of the vote.\",\"tokenId\":\"ID of the token.\",\"totalWeight\":\"Total weight of the vote.\",\"voter\":\"Address of the voter.\",\"weight\":\"Weight of the vote.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NotifyReward(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of the reward.\",\"reward\":\"Address of the reward.\",\"sender\":\"Address of the sender.\"}},\"Voted(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"pool\":\"Address of the pool.\",\"timestamp\":\"Timestamp of the vote.\",\"tokenId\":\"ID of the token.\",\"totalWeight\":\"Total weight of the vote.\",\"voter\":\"Address of the voter.\",\"weight\":\"Weight of the vote.\"}},\"WhitelistNFT(address,uint256,bool)\":{\"params\":{\"_bool\":\"Boolean indicating whitelist status.\",\"tokenId\":\"ID of the token.\",\"whitelister\":\"Address of the whitelister.\"}},\"WhitelistToken(address,address,bool)\":{\"params\":{\"_bool\":\"Boolean indicating whitelist status.\",\"token\":\"Address of the token.\",\"whitelister\":\"Address of the whitelister.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addMarkets((address,uint8)[])\":{\"params\":{\"_markets\":\"Array of Market structs to be added.\"}},\"claimBribes(address[],address[][],uint256)\":{\"details\":\"Utility to help batch bribe claims.\",\"params\":{\"_bribes\":\"Array of BribeVotingReward contracts to collect from.\",\"_tokenId\":\"ID of veNFT that you wish to claim bribes for.\",\"_tokens\":\"Array of tokens that are used as bribes.\"}},\"epochNext(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp to calculate the next epoch for.\"},\"returns\":{\"_0\":\"The next epoch.\"}},\"epochStart(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp to calculate the epoch start for.\"},\"returns\":{\"_0\":\"The start of the epoch.\"}},\"epochVoteEnd(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp to calculate the voting end for.\"},\"returns\":{\"_0\":\"The end of the voting period.\"}},\"epochVoteStart(uint256)\":{\"params\":{\"_timestamp\":\"The timestamp to calculate the voting start for.\"},\"returns\":{\"_0\":\"The start of the voting period.\"}},\"getAllLpRewardTokens()\":{\"returns\":{\"_0\":\"An array of addresses representing all LP reward tokens.\"}},\"getVoteDetails(uint256,address)\":{\"params\":{\"_lpAsset\":\"The address of the LP asset.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"A struct containing vote details.\"}},\"initialize(address[],address,address,address)\":{\"custom:reverts\":\"TokensArrayEmpty if the _tokens array is empty.\",\"details\":\"Requires initialization with at least one reward token.\",\"params\":{\"_mpo\":\"The MasterPriceOracle contract address.\",\"_rewardToken\":\"The address of the reward token.\",\"_tokens\":\"An array of token addresses to be whitelisted.\",\"_ve\":\"The address of the veION contract.\"}},\"marketsLength()\":{\"returns\":{\"_0\":\"The number of markets.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"poke(uint256)\":{\"params\":{\"_tokenId\":\"ID of veNFT whose balance you wish to update.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reset(uint256)\":{\"details\":\"Cannot reset in the same epoch that you voted in.      Can vote or deposit into a managed NFT again after reset.\",\"params\":{\"_tokenId\":\"ID of veNFT that you are resetting.\"}},\"setBribes(address[],address[])\":{\"params\":{\"_bribes\":\"Array of bribe addresses.\",\"_rewardAccumulators\":\"Array of reward accumulator addresses.\"}},\"setGovernor(address)\":{\"params\":{\"_governor\":\"Address of the new governor.\"}},\"setLpTokens(address[])\":{\"params\":{\"_lpTokens\":\"Array of LP token addresses.\"}},\"setMarketRewardAccumulators(address[],uint8[],address[])\":{\"params\":{\"_marketSides\":\"Array of market sides.\",\"_markets\":\"Array of market addresses.\",\"_rewardAccumulators\":\"Array of reward accumulator addresses.\"}},\"setMaxVotingNum(uint256)\":{\"params\":{\"_maxVotingNum\":\"Maximum number of votes allowed.\"}},\"setMpo(address)\":{\"params\":{\"_mpo\":\"Address of the Master Price Oracle.\"}},\"toggleDistributionTimelockAlive(bool)\":{\"params\":{\"_isAlive\":\"Boolean indicating if the timelock is alive.\"}},\"toggleRewardAccumulatorAlive(address,uint8,bool)\":{\"params\":{\"_isAlive\":\"Boolean indicating if the reward accumulator is alive.\",\"_market\":\"Address of the market.\",\"_marketSide\":\"Side of the market.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"vote(uint256,address[],uint8[],uint256[])\":{\"details\":\"Can only vote or deposit into a managed NFT once per epoch.      Can only vote for gauges that have not been killed.      Throws if length of _poolVote and _weights do not match.\",\"params\":{\"_marketVoteSide\":\"Array of market vote sides you are voting for.\",\"_poolVote\":\"Array of pools you are voting for.\",\"_tokenId\":\"ID of veNFT you are voting with.\",\"_weights\":\"Weights of pools.\"}},\"whitelistNFT(uint256,bool)\":{\"details\":\"Throws if not called by governor.      Throws if already whitelisted.\",\"params\":{\"_bool\":\"Boolean indicating whitelist status.\",\"_tokenId\":\"ID of the token.\"}},\"whitelistToken(address,bool)\":{\"details\":\"Throws if not called by governor.\",\"params\":{\"_bool\":\"Boolean indicating whitelist status.\",\"_token\":\"Address of the token.\"}}},\"title\":\"Voter Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyVotedOrDeposited()\":[{\"notice\":\"Error thrown when a user has already voted or deposited.\"}],\"DistributeWindow()\":[{\"notice\":\"Error thrown when an action is attempted outside the distribution window.\"}],\"MarketAlreadyExists()\":[{\"notice\":\"Error thrown when a market already exists.\"}],\"MaximumVotingNumberTooLow()\":[{\"notice\":\"Error thrown when the maximum voting number is too low.\"}],\"MismatchedArrayLengths()\":[{\"notice\":\"Error thrown when array lengths do not match.\"}],\"NonZeroVotes()\":[{\"notice\":\"Error thrown when there are non-zero votes.\"}],\"NotDistributeWindow()\":[{\"notice\":\"Error thrown when an action is attempted outside the distribution window.\"}],\"NotGovernor()\":[{\"notice\":\"Error thrown when the caller is not the governor.\"}],\"NotOwner()\":[{\"notice\":\"Error thrown when the caller is not the owner.\"}],\"NotWhitelistedNFT()\":[{\"notice\":\"Error thrown when an NFT is not whitelisted.\"}],\"RewardAccumulatorDoesNotExist(address)\":[{\"notice\":\"Error thrown when a reward accumulator does not exist for a given pool.\"}],\"RewardAccumulatorNotAlive(address)\":[{\"notice\":\"Error thrown when a reward accumulator is not alive.\"}],\"SameValue()\":[{\"notice\":\"Error thrown when the same value is provided.\"}],\"TokensArrayEmpty()\":[{\"notice\":\"Error thrown when the tokens array is empty.\"}],\"TooManyPools()\":[{\"notice\":\"Error thrown when there are too many pools.\"}],\"UnequalLengths()\":[{\"notice\":\"Error thrown when array lengths are unequal.\"}],\"ZeroAddress()\":[{\"notice\":\"Error thrown when an address is zero.\"}],\"ZeroWeight()\":[{\"notice\":\"Error thrown when the weight is zero.\"}]},\"events\":{\"Abstained(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a vote is abstained.\"},\"NotifyReward(address,address,uint256)\":{\"notice\":\"Event emitted when a reward is notified.\"},\"Voted(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a vote is cast.\"},\"WhitelistNFT(address,uint256,bool)\":{\"notice\":\"Event emitted when an NFT is whitelisted.\"},\"WhitelistToken(address,address,bool)\":{\"notice\":\"Event emitted when a token is whitelisted.\"}},\"kind\":\"user\",\"methods\":{\"addMarkets((address,uint8)[])\":{\"notice\":\"Add new markets.\"},\"baseWeights(uint256,address,uint8,address)\":{\"notice\":\"Mapping from NFT to Pool to LP Asset to Base Weights\"},\"claimBribes(address[],address[][],uint256)\":{\"notice\":\"Claim bribes for a given NFT.\"},\"distributeRewards()\":{\"notice\":\"Distributes rewards to eligible markets.\"},\"epochNext(uint256)\":{\"notice\":\"Get the next epoch for a given timestamp.\"},\"epochStart(uint256)\":{\"notice\":\"Get the start of the epoch for a given timestamp.\"},\"epochVoteEnd(uint256)\":{\"notice\":\"Get the end of the voting period for a given timestamp.\"},\"epochVoteStart(uint256)\":{\"notice\":\"Get the start of the voting period for a given timestamp.\"},\"getAllLpRewardTokens()\":{\"notice\":\"Get all LP reward tokens.\"},\"getVoteDetails(uint256,address)\":{\"notice\":\"Get vote details for a specific token ID and LP asset.\"},\"governor()\":{\"notice\":\"Standard OZ IGovernor using ve for vote weights\"},\"initialize(address[],address,address,address)\":{\"notice\":\"Initializes the Voter contract with the specified parameters.\"},\"isAlive(address)\":{\"notice\":\"Mapping from Reward Accumulator to Liveness status\"},\"isWhitelistedNFT(uint256)\":{\"notice\":\"Mapping from TokenId to Whitelisted status\"},\"isWhitelistedToken(address)\":{\"notice\":\"Mapping from Token to Whitelisted status\"},\"lastVoted(uint256)\":{\"notice\":\"Mapping from NFT to Timestamp of last vote (ensures single vote per epoch)\"},\"lpTokens(uint256)\":{\"notice\":\"List of LP tokens\"},\"marketToRewardAccumulators(address,uint8)\":{\"notice\":\"Mapping from Market to Market Side to Reward Accumulator\"},\"marketVote(uint256,address,uint256)\":{\"notice\":\"Mapping from NFT to List of markets voted for by NFT\"},\"marketVoteSide(uint256,address,uint256)\":{\"notice\":\"Mapping from NFT to List of market vote sides voted for by NFT\"},\"markets(uint256)\":{\"notice\":\"All markets viable for incentives\"},\"marketsLength()\":{\"notice\":\"Get the number of markets.\"},\"maxVotingNum()\":{\"notice\":\"Maximum number of markets one voter can vote for at once\"},\"mpo()\":{\"notice\":\"Master Price Oracle instance\"},\"poke(uint256)\":{\"notice\":\"Update voting balances in voting rewards contracts.\"},\"reset(uint256)\":{\"notice\":\"Reset voting state. Required if you wish to make changes to veNFT state.\"},\"rewardAccumulatorToBribe(address)\":{\"notice\":\"Mapping from Reward Accumulator to Bribes Voting Reward\"},\"setBribes(address[],address[])\":{\"notice\":\"Set bribes for reward accumulators.\"},\"setGovernor(address)\":{\"notice\":\"Set a new governor.\"},\"setLpTokens(address[])\":{\"notice\":\"Set the LP tokens.\"},\"setMarketRewardAccumulators(address[],uint8[],address[])\":{\"notice\":\"Set reward accumulators for markets.\"},\"setMaxVotingNum(uint256)\":{\"notice\":\"Set the maximum number of votes.\"},\"setMpo(address)\":{\"notice\":\"Set the Master Price Oracle (MPO) address.\"},\"toggleDistributionTimelockAlive(bool)\":{\"notice\":\"Toggle the alive status of a timelock on distributing rewards.\"},\"toggleRewardAccumulatorAlive(address,uint8,bool)\":{\"notice\":\"Toggle the alive status of a reward accumulator.\"},\"totalWeight(address)\":{\"notice\":\"Total Voting Weights for each address\"},\"usedWeights(uint256,address)\":{\"notice\":\"Mapping from NFT to Total voting weight of NFT\"},\"ve()\":{\"notice\":\"The ve token that governs these contracts\"},\"vote(uint256,address[],uint8[],uint256[])\":{\"notice\":\"Vote for pools. Votes distributed proportionally based on weights.\"},\"votes(uint256,address,uint8,address)\":{\"notice\":\"Mapping from NFT to Pool to LP Asset to Votes\"},\"weights(address,uint8,address)\":{\"notice\":\"Mapping from Market to Market Side to LP Asset to weights\"},\"whitelistNFT(uint256,bool)\":{\"notice\":\"Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\"},\"whitelistToken(address,bool)\":{\"notice\":\"Whitelist (or unwhitelist) token for use in bribes.\"}},\"notice\":\"This contract allows veION holders to vote for various markets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/Voter.sol\":\"Voter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7dce633611f5149fa8dec27ccd28b88dc590fecbebdb7785d1f6728dae1e1c4f\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2b54ec184943843041ab77f61988b5060f6f03acbfe92cdc125f95f00891da\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xefe5b03cf4147c27e7e38a1b8ddb3e0dc7f0ba8f6be71627d962fa91c98943dd\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\n     * See {_beforeConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\n     * See {_afterConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called before \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\n     * {ERC721Consecutive}.\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\n     */\\n    function _beforeConsecutiveTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /*first*/\\n        uint96 size\\n    ) internal virtual {\\n        if (from != address(0)) {\\n            _balances[from] -= size;\\n        }\\n        if (to != address(0)) {\\n            _balances[to] += size;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\n     * {ERC721Consecutive}.\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\n     */\\n    function _afterConsecutiveTokenTransfer(\\n        address, /*from*/\\n        address, /*to*/\\n        uint256, /*first*/\\n        uint96 /*size*/\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xcb972e21a5fd838e749739a88d702f97263f1317906974787c469b85b1d41ac2\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x20ad2fc58bb29dd0c35a3ecd1c01a8e0641320cda53c8044e2d31a7644b48767\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x0c2ac2e8ea31517e8a807e6fe8a3cf6de47ae76a5e8ed8ca60a209efa12aab69\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb49137b771712774960cca0acf428499e2aa85f179fe03712e5c06c5a6ab6316\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xa6a787e7a901af6511e19aa53e1a00352db215a011d2c7a438d0582dd5da76f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f211a9dd6bc7e4bc6c98a062d4729b821b7ff391a888215a48872b205117749\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb9b373ec337797b9f8822171cb191095cb11e729a4fde4c207d25b8b642fb93\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x636eab608b4563c01e88042aba9330e6fe69af2c567fe1adf4d85731974ac81d\",\"license\":\"MIT\"},\"adrastia-periphery/rates/IHistoricalRates.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./RateLibrary.sol\\\";\\n\\n/**\\n * @title IHistoricalRates\\n * @notice An interface that defines a contract that stores historical rates.\\n */\\ninterface IHistoricalRates {\\n    /// @notice Gets an rate for a token at a specific index.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param index The index of the rate to get, where index 0 contains the latest rate, and the last\\n    ///   index contains the oldest rate (uses reverse chronological ordering).\\n    /// @return rate The rate for the token at the specified index.\\n    function getRateAt(address token, uint256 index) external view returns (RateLibrary.Rate memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(address token, uint256 amount) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the latest rates for a token.\\n    /// @param token The address of the token to get the rates for.\\n    /// @param amount The number of rates to get.\\n    /// @param offset The index of the first rate to get (default: 0).\\n    /// @param increment The increment between rates to get (default: 1).\\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\\n    function getRates(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view returns (RateLibrary.Rate[] memory);\\n\\n    /// @notice Gets the number of rates for a token.\\n    /// @param token The address of the token to get the number of rates for.\\n    /// @return count The number of rates for the token.\\n    function getRatesCount(address token) external view returns (uint256);\\n\\n    /// @notice Gets the capacity of rates for a token.\\n    /// @param token The address of the token to get the capacity of rates for.\\n    /// @return capacity The capacity of rates for the token.\\n    function getRatesCapacity(address token) external view returns (uint256);\\n\\n    /// @notice Sets the capacity of rates for a token.\\n    /// @param token The address of the token to set the capacity of rates for.\\n    /// @param amount The new capacity of rates for the token.\\n    function setRatesCapacity(address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2754968c368df628f1ed00c2016b1a73f0f9b44f29e48d405887ad108723b3af\",\"license\":\"MIT\"},\"adrastia-periphery/rates/RateLibrary.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary RateLibrary {\\n    struct Rate {\\n        uint64 target;\\n        uint64 current;\\n        uint32 timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x397b79cf9f183afa76db3c8d10cffb408e31ba154900f671a7e93c071bacbff4\",\"license\":\"MIT\"},\"contracts/adrastia/PrudentiaLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nlibrary PrudentiaLib {\\n  struct PrudentiaConfig {\\n    address controller; // Adrastia Prudentia controller address\\n    uint8 offset; // Offset for delayed rate activation\\n    int8 decimalShift; // Positive values scale the rate up (in powers of 10), negative values scale the rate down\\n  }\\n}\\n\",\"keccak256\":\"0x8cc50f1a5dab30e0c205b0bba5f58c18eda9ebf01c661895c8f40678b86bf31f\",\"license\":\"UNLICENSED\"},\"contracts/compound/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IonicComptroller } from \\\"./ComptrollerInterface.sol\\\";\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\nimport { ComptrollerV3Storage } from \\\"./ComptrollerStorage.sol\\\";\\nimport { AddressesProvider } from \\\"../ionic/AddressesProvider.sol\\\";\\n\\nabstract contract CTokenAdminStorage {\\n  /*\\n   * Administrator for Ionic\\n   */\\n  address payable public ionicAdmin;\\n}\\n\\nabstract contract CErc20Storage is CTokenAdminStorage {\\n  /**\\n   * @dev Guard variable for re-entrancy checks\\n   */\\n  bool internal _notEntered;\\n\\n  /**\\n   * @notice EIP-20 token name for this token\\n   */\\n  string public name;\\n\\n  /**\\n   * @notice EIP-20 token symbol for this token\\n   */\\n  string public symbol;\\n\\n  /**\\n   * @notice EIP-20 token decimals for this token\\n   */\\n  uint8 public decimals;\\n\\n  /*\\n   * Maximum borrow rate that can ever be applied (.0005% / block)\\n   */\\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  /*\\n   * Maximum fraction of interest that can be set aside for reserves + fees\\n   */\\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\\n\\n  /**\\n   * @notice Contract which oversees inter-cToken operations\\n   */\\n  IonicComptroller public comptroller;\\n\\n  /**\\n   * @notice Model which tells what the current interest rate should be\\n   */\\n  InterestRateModel public interestRateModel;\\n\\n  /*\\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n   */\\n  uint256 internal initialExchangeRateMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for admin fees\\n   */\\n  uint256 public adminFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for Ionic fees\\n   */\\n  uint256 public ionicFeeMantissa;\\n\\n  /**\\n   * @notice Fraction of interest currently set aside for reserves\\n   */\\n  uint256 public reserveFactorMantissa;\\n\\n  /**\\n   * @notice Block number that interest was last accrued at\\n   */\\n  uint256 public accrualBlockNumber;\\n\\n  /**\\n   * @notice Accumulator of the total earned interest rate since the opening of the market\\n   */\\n  uint256 public borrowIndex;\\n\\n  /**\\n   * @notice Total amount of outstanding borrows of the underlying in this market\\n   */\\n  uint256 public totalBorrows;\\n\\n  /**\\n   * @notice Total amount of reserves of the underlying held in this market\\n   */\\n  uint256 public totalReserves;\\n\\n  /**\\n   * @notice Total amount of admin fees of the underlying held in this market\\n   */\\n  uint256 public totalAdminFees;\\n\\n  /**\\n   * @notice Total amount of Ionic fees of the underlying held in this market\\n   */\\n  uint256 public totalIonicFees;\\n\\n  /**\\n   * @notice Total number of tokens in circulation\\n   */\\n  uint256 public totalSupply;\\n\\n  /*\\n   * Official record of token balances for each account\\n   */\\n  mapping(address => uint256) internal accountTokens;\\n\\n  /*\\n   * Approved token transfer amounts on behalf of others\\n   */\\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\\n\\n  /**\\n   * @notice Container for borrow balance information\\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n   */\\n  struct BorrowSnapshot {\\n    uint256 principal;\\n    uint256 interestIndex;\\n  }\\n\\n  /*\\n   * Mapping of account addresses to outstanding borrow balances\\n   */\\n  mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n  /*\\n   * Share of seized collateral that is added to reserves\\n   */\\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n  /*\\n   * Share of seized collateral taken as fees\\n   */\\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\\n\\n  /**\\n   * @notice Underlying asset for this CToken\\n   */\\n  address public underlying;\\n\\n  /**\\n   * @notice Addresses Provider\\n   */\\n  AddressesProvider public ap;\\n}\\n\\nabstract contract CTokenBaseEvents {\\n  /* ERC20 */\\n\\n  /**\\n   * @notice EIP20 Transfer event\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /*** Admin Events ***/\\n\\n  /**\\n   * @notice Event emitted when interestRateModel is changed\\n   */\\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n  /**\\n   * @notice Event emitted when the reserve factor is changed\\n   */\\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n  /**\\n   * @notice Event emitted when the admin fee is changed\\n   */\\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\\n\\n  /**\\n   * @notice Event emitted when the Ionic fee is changed\\n   */\\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\\n\\n  /**\\n   * @notice EIP20 Approval event\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Event emitted when interest is accrued\\n   */\\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\\n}\\n\\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\\n  event Flash(address receiver, uint256 amount);\\n}\\n\\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\\n  /*** Market Events ***/\\n\\n  /**\\n   * @notice Event emitted when tokens are minted\\n   */\\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n  /**\\n   * @notice Event emitted when tokens are redeemed\\n   */\\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n  /**\\n   * @notice Event emitted when underlying is borrowed\\n   */\\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is repaid\\n   */\\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\\n\\n  /**\\n   * @notice Event emitted when a borrow is liquidated\\n   */\\n  event LiquidateBorrow(\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral,\\n    uint256 seizeTokens\\n  );\\n\\n  /**\\n   * @notice Event emitted when the reserves are added\\n   */\\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n  /**\\n   * @notice Event emitted when the reserves are reduced\\n   */\\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n}\\n\\ninterface CTokenFirstExtensionInterface {\\n  /*** User Interface ***/\\n\\n  function transfer(address dst, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\\n\\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\\n\\n  function getAccountSnapshot(address account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function exchangeRateCurrent() external view returns (uint256);\\n\\n  function accrueInterest() external returns (uint256);\\n\\n  function totalBorrowsCurrent() external view returns (uint256);\\n\\n  function borrowBalanceCurrent(address account) external view returns (uint256);\\n\\n  function getTotalUnderlyingSupplied() external view returns (uint256);\\n\\n  function balanceOfUnderlying(address owner) external view returns (uint256);\\n\\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n  function flash(uint256 amount, bytes calldata data) external;\\n\\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\\n\\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\\n\\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\\n\\n  function registerInSFS() external returns (uint256);\\n}\\n\\ninterface CTokenSecondExtensionInterface {\\n  function mint(uint256 mintAmount) external returns (uint256);\\n\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n  function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n  function liquidateBorrow(\\n    address borrower,\\n    uint256 repayAmount,\\n    address cTokenCollateral\\n  ) external returns (uint256);\\n\\n  function getCash() external view returns (uint256);\\n\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external returns (uint256);\\n\\n  /*** Admin Functions ***/\\n\\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\\n\\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\\n\\n  function selfTransferOut(address to, uint256 amount) external;\\n\\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\\n}\\n\\ninterface CDelegatorInterface {\\n  function implementation() external view returns (address);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\\n\\n  /**\\n   * @dev upgrades the implementation if necessary\\n   */\\n  function _upgrade() external;\\n}\\n\\ninterface CDelegateInterface {\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes calldata data) external;\\n\\n  function delegateType() external pure returns (uint8);\\n\\n  function contractType() external pure returns (string memory);\\n}\\n\\nabstract contract CErc20AdminBase is CErc20Storage {\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\\n    return\\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\\n  }\\n}\\n\\nabstract contract CErc20FirstExtensionBase is\\n  CErc20AdminBase,\\n  CTokenFirstExtensionEvents,\\n  CTokenFirstExtensionInterface\\n{}\\n\\nabstract contract CTokenSecondExtensionBase is\\n  CErc20AdminBase,\\n  CTokenSecondExtensionEvents,\\n  CTokenSecondExtensionInterface,\\n  CDelegateInterface\\n{}\\n\\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\\n\\ninterface CErc20StorageInterface {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function ionicAdmin() external view returns (address);\\n\\n  function ionicAdminHasRights() external view returns (bool);\\n\\n  function comptroller() external view returns (IonicComptroller);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function adminFeeMantissa() external view returns (uint256);\\n\\n  function ionicFeeMantissa() external view returns (uint256);\\n\\n  function reserveFactorMantissa() external view returns (uint256);\\n\\n  function protocolSeizeShareMantissa() external view returns (uint256);\\n\\n  function feeSeizeShareMantissa() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalAdminFees() external view returns (uint256);\\n\\n  function totalIonicFees() external view returns (uint256);\\n\\n  function totalBorrows() external view returns (uint256);\\n\\n  function accrualBlockNumber() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function borrowIndex() external view returns (uint256);\\n\\n  function interestRateModel() external view returns (address);\\n}\\n\\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\\n  function plugin() external view returns (address);\\n}\\n\\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\\n  function approve(address, address) external;\\n}\\n\\ninterface ICErc20 is\\n  CErc20StorageInterface,\\n  CTokenSecondExtensionInterface,\\n  CTokenFirstExtensionInterface,\\n  CDelegatorInterface,\\n  CDelegateInterface\\n{}\\n\\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\\n  function _updatePlugin(address _plugin) external;\\n}\\n\\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\\n\",\"keccak256\":\"0x7cc75051a5fa860b9ee93d0ba1ac0608921f02308aeff786ce8bbd8d8a70489a\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { BasePriceOracle } from \\\"../oracles/BasePriceOracle.sol\\\";\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { DiamondExtension } from \\\"../ionic/DiamondExtension.sol\\\";\\nimport { ComptrollerV4Storage } from \\\"../compound/ComptrollerStorage.sol\\\";\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\nimport { IHistoricalRates } from \\\"adrastia-periphery/rates/IHistoricalRates.sol\\\";\\n\\ninterface ComptrollerInterface {\\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\\n\\n  function _becomeImplementation() external;\\n\\n  function _deployMarket(\\n    uint8 delegateType,\\n    bytes memory constructorData,\\n    bytes calldata becomeImplData,\\n    uint256 collateralFactorMantissa\\n  ) external returns (uint256);\\n\\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\\n\\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\\n\\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\\n\\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\\n\\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\\n\\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\\n\\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\\n\\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\\n\\n  function _addRewardsDistributor(address distributor) external returns (uint256);\\n\\n  function getHypotheticalAccountLiquidity(\\n    address account,\\n    address cTokenModify,\\n    uint256 redeemTokens,\\n    uint256 borrowAmount,\\n    uint256 repayAmount\\n  ) external view returns (uint256, uint256, uint256, uint256);\\n\\n  function getMaxRedeemOrBorrow(address account, ICErc20 cToken, bool isBorrow) external view returns (uint256);\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n  function exitMarket(address cToken) external returns (uint256);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\\n\\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256);\\n\\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\\n\\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256);\\n\\n  function borrowVerify(address cToken, address borrower) external;\\n\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\\n\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function repayBorrowVerify(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external;\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external returns (uint256);\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external returns (uint256);\\n  \\n  function seizeVerify(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external;\\n\\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external returns (uint256);\\n  \\n  function transferVerify(address cToken, address src, address dst, uint256 transferTokens) external;\\n\\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external;\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function getAccountLiquidity(\\n    address account\\n  ) external view returns (uint256 error, uint256 collateralValue, uint256 liquidity, uint256 shortfall);\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 repayAmount\\n  ) external view returns (uint256, uint256);\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  function _beforeNonReentrant() external;\\n\\n  function _afterNonReentrant() external;\\n\\n  /*** New supply and borrow cap view functions ***/\\n\\n  /**\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveSupplyCaps(address cToken) external view returns (uint256 supplyCap);\\n\\n  /**\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveBorrowCaps(address cToken) external view returns (uint256 borrowCap);\\n}\\n\\ninterface ComptrollerStorageInterface {\\n  function admin() external view returns (address);\\n\\n  function adminHasRights() external view returns (bool);\\n\\n  function ionicAdmin() external view returns (address);\\n\\n  function ionicAdminHasRights() external view returns (bool);\\n\\n  function pendingAdmin() external view returns (address);\\n\\n  function oracle() external view returns (BasePriceOracle);\\n\\n  function pauseGuardian() external view returns (address);\\n\\n  function closeFactorMantissa() external view returns (uint256);\\n\\n  function liquidationIncentiveMantissa() external view returns (uint256);\\n\\n  function isUserOfPool(address user) external view returns (bool);\\n\\n  function whitelist(address account) external view returns (bool);\\n\\n  function enforceWhitelist() external view returns (bool);\\n\\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\\n\\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\\n\\n  function suppliers(address account) external view returns (bool);\\n\\n  function cTokensByUnderlying(address) external view returns (address);\\n\\n  /**\\n   * Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the supply cap. Instead, use\\n   * `effectiveSupplyCaps` to get the correct supply cap.\\n   * @param cToken The address of the cToken.\\n   * @return The supply cap in the units of the underlying asset.\\n   */\\n  function supplyCaps(address cToken) external view returns (uint256);\\n\\n  /**\\n   * Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the borrow cap. Instead, use\\n   * `effectiveBorrowCaps` to get the correct borrow cap.\\n   * @param cToken The address of the cToken.\\n   * @return The borrow cap in the units of the underlying asset.\\n   */\\n  function borrowCaps(address cToken) external view returns (uint256);\\n\\n  function markets(address cToken) external view returns (bool, uint256);\\n\\n  function accountAssets(address, uint256) external view returns (address);\\n\\n  function borrowGuardianPaused(address cToken) external view returns (bool);\\n\\n  function mintGuardianPaused(address cToken) external view returns (bool);\\n\\n  function rewardsDistributors(uint256) external view returns (address);\\n}\\n\\ninterface SFSRegister {\\n  function register(address _recipient) external returns (uint256 tokenId);\\n}\\n\\ninterface ComptrollerExtensionInterface {\\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\\n\\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\\n\\n  function getAllMarkets() external view returns (ICErc20[] memory);\\n\\n  function getAllBorrowers() external view returns (address[] memory);\\n\\n  function getAllBorrowersCount() external view returns (uint256);\\n\\n  function getPaginatedBorrowers(\\n    uint256 page,\\n    uint256 pageSize\\n  ) external view returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\\n\\n  function getRewardsDistributors() external view returns (address[] memory);\\n\\n  function getAccruingFlywheels() external view returns (address[] memory);\\n\\n  function _supplyCapWhitelist(address cToken, address account, bool whitelisted) external;\\n\\n  function _setBorrowCapForCollateral(address cTokenBorrow, address cTokenCollateral, uint256 borrowCap) external;\\n\\n  function _setBorrowCapForCollateralWhitelist(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account,\\n    bool whitelisted\\n  ) external;\\n\\n  function isBorrowCapForCollateralWhitelisted(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account\\n  ) external view returns (bool);\\n\\n  function _blacklistBorrowingAgainstCollateral(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    bool blacklisted\\n  ) external;\\n\\n  function _blacklistBorrowingAgainstCollateralWhitelist(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account,\\n    bool whitelisted\\n  ) external;\\n\\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\\n    address cTokenBorrow,\\n    address cTokenCollateral,\\n    address account\\n  ) external view returns (bool);\\n\\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\\n\\n  function _borrowCapWhitelist(address cToken, address account, bool whitelisted) external;\\n\\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\\n\\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\\n\\n  function getWhitelist() external view returns (address[] memory);\\n\\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\\n\\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\\n\\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\\n\\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\\n\\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\\n\\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\\n\\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\\n\\n  function _setTransferPaused(bool state) external returns (bool);\\n\\n  function _setSeizePaused(bool state) external returns (bool);\\n\\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\\n\\n  function getAssetAsCollateralValueCap(\\n    ICErc20 collateral,\\n    ICErc20 cTokenModify,\\n    bool redeeming,\\n    address account\\n  ) external view returns (uint256);\\n\\n  function registerInSFS() external returns (uint256);\\n}\\n\\ninterface ComptrollerPrudentiaCapsExtInterface {\\n  /**\\n   * @notice Retrieves Adrastia Prudentia borrow cap config from storage.\\n   * @return The config.\\n   */\\n  function getBorrowCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\n\\n  /**\\n   * @notice Retrieves Adrastia Prudentia supply cap config from storage.\\n   * @return The config.\\n   */\\n  function getSupplyCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\\n\\n  /**\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native supply caps.\\n   * @param newConfig The new config.\\n   */\\n  function _setSupplyCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\n\\n  /**\\n   * @notice Sets the Adrastia Prudentia supply cap config.\\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native borrow caps.\\n   * @param newConfig The new config.\\n   */\\n  function _setBorrowCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\\n}\\n\\ninterface UnitrollerInterface {\\n  function comptrollerImplementation() external view returns (address);\\n\\n  function _upgrade() external;\\n\\n  function _acceptAdmin() external returns (uint256);\\n\\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\\n\\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\\n}\\n\\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\\n\\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\\n\\ninterface IonicComptroller is\\n  ComptrollerInterface,\\n  ComptrollerExtensionInterface,\\n  UnitrollerInterface,\\n  ComptrollerStorageInterface\\n{\\n\\n}\\n\\nabstract contract ComptrollerBase is ComptrollerV4Storage {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  /**\\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveSupplyCaps(address cToken) public view virtual returns (uint256 supplyCap) {\\n    PrudentiaLib.PrudentiaConfig memory capConfig = supplyCapConfig;\\n\\n    // Check if we're using Adrastia Prudentia for the supply cap\\n    if (capConfig.controller != address(0)) {\\n      // We have a controller, so we're using Adrastia Prudentia\\n\\n      address underlyingToken = ICErc20(cToken).underlying();\\n\\n      // Get the supply cap from Adrastia Prudentia\\n      supplyCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\n\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\n      // must scale the supply cap to get the correct amount\\n\\n      int256 scaleByDecimals = 18;\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n      if (success && data.length == 32) {\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\n      }\\n\\n      scaleByDecimals += capConfig.decimalShift;\\n\\n      if (scaleByDecimals >= 0) {\\n        // We're scaling up, so we need to multiply\\n        supplyCap *= 10 ** uint256(scaleByDecimals);\\n      } else {\\n        // We're scaling down, so we need to divide\\n        supplyCap /= 10 ** uint256(-scaleByDecimals);\\n      }\\n    } else {\\n      // We don't have a controller, so we're using the local supply cap\\n\\n      // Get the supply cap from the local supply cap\\n      supplyCap = supplyCaps[cToken];\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\\n   * @param cToken The address of the cToken.\\n   */\\n  function effectiveBorrowCaps(address cToken) public view virtual returns (uint256 borrowCap) {\\n    PrudentiaLib.PrudentiaConfig memory capConfig = borrowCapConfig;\\n\\n    // Check if we're using Adrastia Prudentia for the borrow cap\\n    if (capConfig.controller != address(0)) {\\n      // We have a controller, so we're using Adrastia Prudentia\\n\\n      address underlyingToken = ICErc20(cToken).underlying();\\n\\n      // Get the borrow cap from Adrastia Prudentia\\n      borrowCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\\n\\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\\n      // must scale the supply cap to get the correct amount\\n\\n      int256 scaleByDecimals = 18;\\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n      if (success && data.length == 32) {\\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\\n      }\\n\\n      scaleByDecimals += capConfig.decimalShift;\\n\\n      if (scaleByDecimals >= 0) {\\n        // We're scaling up, so we need to multiply\\n        borrowCap *= 10 ** uint256(scaleByDecimals);\\n      } else {\\n        // We're scaling down, so we need to divide\\n        borrowCap /= 10 ** uint256(-scaleByDecimals);\\n      }\\n    } else {\\n      // We don't have a controller, so we're using the local borrow cap\\n      borrowCap = borrowCaps[cToken];\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x266ec3c26b454cfa72bab45fa8e0bc9e3d44e8ec0cd4770304a14cc84c8f80d3\",\"license\":\"UNLICENSED\"},\"contracts/compound/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IFeeDistributor.sol\\\";\\nimport \\\"../oracles/BasePriceOracle.sol\\\";\\nimport { ICErc20 } from \\\"./CTokenInterfaces.sol\\\";\\nimport { PrudentiaLib } from \\\"../adrastia/PrudentiaLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n  /*\\n   * Administrator for Ionic\\n   */\\n  address payable public ionicAdmin;\\n\\n  /**\\n   * @notice Administrator for this contract\\n   */\\n  address public admin;\\n\\n  /**\\n   * @notice Pending administrator for this contract\\n   */\\n  address public pendingAdmin;\\n\\n  /**\\n   * @notice Whether or not the Ionic admin has admin rights\\n   */\\n  bool public ionicAdminHasRights = true;\\n\\n  /**\\n   * @notice Whether or not the admin has admin rights\\n   */\\n  bool public adminHasRights = true;\\n\\n  /**\\n   * @notice Returns a boolean indicating if the sender has admin rights\\n   */\\n  function hasAdminRights() internal view returns (bool) {\\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\\n  }\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n  /**\\n   * @notice Oracle which gives the price of any given asset\\n   */\\n  BasePriceOracle public oracle;\\n\\n  /**\\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n   */\\n  uint256 public closeFactorMantissa;\\n\\n  /**\\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\\n   */\\n  uint256 public liquidationIncentiveMantissa;\\n\\n  /*\\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\\n   */\\n  uint256 internal maxAssets;\\n\\n  /**\\n   * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n   */\\n  mapping(address => ICErc20[]) public accountAssets;\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n  struct Market {\\n    // Whether or not this market is listed\\n    bool isListed;\\n    // Multiplier representing the most one can borrow against their collateral in this market.\\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\\n    // Must be between 0 and 1, and stored as a mantissa.\\n    uint256 collateralFactorMantissa;\\n    // Per-market mapping of \\\"accounts in this asset\\\"\\n    mapping(address => bool) accountMembership;\\n  }\\n\\n  /**\\n   * @notice Official mapping of cTokens -> Market metadata\\n   * @dev Used e.g. to determine if a market is supported\\n   */\\n  mapping(address => Market) public markets;\\n\\n  /// @notice A list of all markets\\n  ICErc20[] public allMarkets;\\n\\n  /**\\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\\n   */\\n  mapping(address => bool) internal borrowers;\\n\\n  /// @notice A list of all borrowers who have entered markets\\n  address[] public allBorrowers;\\n\\n  // Indexes of borrower account addresses in the `allBorrowers` array\\n  mapping(address => uint256) internal borrowerIndexes;\\n\\n  /**\\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\\n   */\\n  mapping(address => bool) public suppliers;\\n\\n  /// @notice All cTokens addresses mapped by their underlying token addresses\\n  mapping(address => ICErc20) public cTokensByUnderlying;\\n\\n  /// @notice Whether or not the supplier whitelist is enforced\\n  bool public enforceWhitelist;\\n\\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\\n  mapping(address => bool) public whitelist;\\n\\n  /// @notice An array of all whitelisted accounts\\n  address[] public whitelistArray;\\n\\n  // Indexes of account addresses in the `whitelistArray` array\\n  mapping(address => uint256) internal whitelistIndexes;\\n\\n  /**\\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n   *  Actions which allow users to remove their own assets cannot be paused.\\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n   */\\n  address public pauseGuardian;\\n  bool public _mintGuardianPaused;\\n  bool public _borrowGuardianPaused;\\n  bool public transferGuardianPaused;\\n  bool public seizeGuardianPaused;\\n  mapping(address => bool) public mintGuardianPaused;\\n  mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n  /// @dev If Adrastia Prudentia is enabled, the values the borrow cap guardian sets are ignored.\\n  address public borrowCapGuardian;\\n\\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveBorrowCaps` instead.\\n  mapping(address => uint256) public borrowCaps;\\n\\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveSupplyCaps` instead.\\n  mapping(address => uint256) public supplyCaps;\\n\\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\\n  address[] public rewardsDistributors;\\n\\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\\n  bool internal _notEntered;\\n\\n  /// @dev Whether or not _notEntered has been initialized\\n  bool internal _notEnteredInitialized;\\n\\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\\n  address[] public nonAccruingRewardsDistributors;\\n\\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\\n\\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\\n    internal borrowingAgainstCollateralBlacklistWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\\n\\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n  /// @dev Adrastia Prudentia config for controlling borrow caps.\\n  PrudentiaLib.PrudentiaConfig internal borrowCapConfig;\\n\\n  /// @dev Adrastia Prudentia config for controlling supply caps.\\n  PrudentiaLib.PrudentiaConfig internal supplyCapConfig;\\n}\\n\",\"keccak256\":\"0xa4a8110e666a93c1228c914f1414131e0f3b93385826bb72f6f93d429e514286\",\"license\":\"UNLICENSED\"},\"contracts/compound/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../ionic/AuthoritiesRegistry.sol\\\";\\n\\ninterface IFeeDistributor {\\n  function minBorrowEth() external view returns (uint256);\\n\\n  function maxUtilizationRate() external view returns (uint256);\\n\\n  function interestFeeRate() external view returns (uint256);\\n\\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\\n\\n  function latestCErc20Delegate(uint8 delegateType)\\n    external\\n    view\\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\\n\\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\\n\\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\\n\\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\\n\\n  function deployCErc20(\\n    uint8 delegateType,\\n    bytes calldata constructorData,\\n    bytes calldata becomeImplData\\n  ) external returns (address);\\n\\n  function canCall(\\n    address pool,\\n    address user,\\n    address target,\\n    bytes4 functionSig\\n  ) external view returns (bool);\\n\\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\\n\\n  fallback() external payable;\\n\\n  receive() external payable;\\n}\\n\",\"keccak256\":\"0xa822e2942e6a88851968d5f3bda48709713c84d556031a1dd3db5dfd06121d3e\",\"license\":\"UNLICENSED\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\",\"license\":\"UNLICENSED\"},\"contracts/ionic/AddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title AddressesProvider\\n * @notice The Addresses Provider serves as a central storage of system internal and external\\n *         contract addresses that change between deploys and across chains\\n * @author Veliko Minkov <veliko@midascapital.xyz>\\n */\\ncontract AddressesProvider is SafeOwnableUpgradeable {\\n  mapping(string => address) private _addresses;\\n  mapping(address => Contract) public plugins;\\n  mapping(address => Contract) public flywheelRewards;\\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\\n  JarvisPool[] public jarvisPoolsConfig;\\n  CurveSwapPool[] public curveSwapPoolsConfig;\\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\\n\\n  /// @dev Initializer to set the admin that can set and change contracts addresses\\n  function initialize(address owner) public initializer {\\n    __SafeOwnable_init(owner);\\n  }\\n\\n  /**\\n   * @dev The contract address and a string that uniquely identifies the contract's interface\\n   */\\n  struct Contract {\\n    address addr;\\n    string contractInterface;\\n  }\\n\\n  struct RedemptionStrategy {\\n    address addr;\\n    string contractInterface;\\n    address outputToken;\\n  }\\n\\n  struct FundingStrategy {\\n    address addr;\\n    string contractInterface;\\n    address inputToken;\\n  }\\n\\n  struct JarvisPool {\\n    address syntheticToken;\\n    address collateralToken;\\n    address liquidityPool;\\n    uint256 expirationTime;\\n  }\\n\\n  struct CurveSwapPool {\\n    address poolAddress;\\n    address[] coins;\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\\n   * @param rewardToken the reward token address\\n   * @param flywheelRewardsModule the flywheel rewards module address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setFlywheelRewards(\\n    address rewardToken,\\n    address flywheelRewardsModule,\\n    string calldata contractInterface\\n  ) public onlyOwner {\\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\\n   * @param asset the asset address\\n   * @param plugin the ERC4626 plugin address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setPlugin(\\n    address asset,\\n    address plugin,\\n    string calldata contractInterface\\n  ) public onlyOwner {\\n    plugins[asset] = Contract(plugin, contractInterface);\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\\n   * @param asset the asset address\\n   * @param strategy redemption strategy address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setRedemptionStrategy(\\n    address asset,\\n    address strategy,\\n    string calldata contractInterface,\\n    address outputToken\\n  ) public onlyOwner {\\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\\n  }\\n\\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\\n    return redemptionStrategiesConfig[asset];\\n  }\\n\\n  /**\\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\\n   * @param asset the asset address\\n   * @param strategy funding strategy address\\n   * @param contractInterface a string that uniquely identifies the contract's interface\\n   */\\n  function setFundingStrategy(\\n    address asset,\\n    address strategy,\\n    string calldata contractInterface,\\n    address inputToken\\n  ) public onlyOwner {\\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\\n  }\\n\\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\\n    return fundingStrategiesConfig[asset];\\n  }\\n\\n  /**\\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\\n   * @param syntheticToken the synthetic token address\\n   * @param collateralToken the collateral token address\\n   * @param liquidityPool the liquidity pool address\\n   * @param expirationTime the operation expiration time\\n   */\\n  function setJarvisPool(\\n    address syntheticToken,\\n    address collateralToken,\\n    address liquidityPool,\\n    uint256 expirationTime\\n  ) public onlyOwner {\\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\\n  }\\n\\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\\n  }\\n\\n  /**\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\\n    _addresses[id] = newAddress;\\n  }\\n\\n  /**\\n   * @dev Returns an address by id\\n   * @return The address\\n   */\\n  function getAddress(string calldata id) public view returns (address) {\\n    return _addresses[id];\\n  }\\n\\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\\n    return curveSwapPoolsConfig;\\n  }\\n\\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\\n    return jarvisPoolsConfig;\\n  }\\n\\n  function setBalancerPoolForTokens(\\n    address inputToken,\\n    address outputToken,\\n    address pool\\n  ) external onlyOwner {\\n    balancerPoolForTokens[inputToken][outputToken] = pool;\\n  }\\n\\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\\n    return balancerPoolForTokens[inputToken][outputToken];\\n  }\\n}\\n\",\"keccak256\":\"0xf48e9e8b2150408c1c6b68dd957226c342ba47396da792fdaa0922f539a7e163\",\"license\":\"AGPL-3.0-only\"},\"contracts/ionic/AuthoritiesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { PoolRolesAuthority } from \\\"../ionic/PoolRolesAuthority.sol\\\";\\nimport { SafeOwnableUpgradeable } from \\\"../ionic/SafeOwnableUpgradeable.sol\\\";\\nimport { IonicComptroller } from \\\"../compound/ComptrollerInterface.sol\\\";\\n\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\\n  PoolRolesAuthority public poolAuthLogic;\\n  address public leveredPositionsFactory;\\n  bool public noAuthRequired;\\n\\n  function initialize(address _leveredPositionsFactory) public initializer {\\n    __SafeOwnable_init(msg.sender);\\n    leveredPositionsFactory = _leveredPositionsFactory;\\n    poolAuthLogic = new PoolRolesAuthority();\\n  }\\n\\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\\n    leveredPositionsFactory = _leveredPositionsFactory;\\n    poolAuthLogic = new PoolRolesAuthority();\\n    // for Neon the auth is not required\\n    noAuthRequired = block.chainid == 245022934;\\n  }\\n\\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\\n    require(address(poolsAuthorities[pool]) == address(0), \\\"already created\\\");\\n\\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \\\"\\\");\\n    auth = PoolRolesAuthority(address(proxy));\\n    auth.initialize(address(this));\\n    poolsAuthorities[pool] = auth;\\n\\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\\n    // sets the registry owner as the auth owner\\n    reconfigureAuthority(pool);\\n  }\\n\\n  function reconfigureAuthority(address poolAddress) public {\\n    IonicComptroller pool = IonicComptroller(poolAddress);\\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\\n\\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\\n      require(address(auth) != address(0), \\\"no such authority\\\");\\n      require(msg.sender == owner() || msg.sender == poolAddress, \\\"not owner or pool\\\");\\n\\n      auth.configureRegistryCapabilities();\\n      auth.configurePoolSupplierCapabilities(pool);\\n      auth.configurePoolBorrowerCapabilities(pool);\\n      // everyone can be a liquidator\\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\\n      auth.configureLeveredPositionCapabilities(pool);\\n\\n      if (auth.owner() != owner()) {\\n        auth.setOwner(owner());\\n      }\\n    }\\n  }\\n\\n  function canCall(\\n    address pool,\\n    address user,\\n    address target,\\n    bytes4 functionSig\\n  ) external view returns (bool) {\\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\\n    if (address(authorityForPool) == address(0)) {\\n      return noAuthRequired;\\n    } else {\\n      // allow only if an auth exists and it allows the action\\n      return authorityForPool.canCall(user, target, functionSig);\\n    }\\n  }\\n\\n  function setUserRole(\\n    address pool,\\n    address user,\\n    uint8 role,\\n    bool enabled\\n  ) external {\\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\\n\\n    require(address(poolAuth) != address(0), \\\"auth does not exist\\\");\\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \\\"not owner or factory\\\");\\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \\\"only lev pos role\\\");\\n\\n    poolAuth.setUserRole(user, role, enabled);\\n  }\\n}\\n\",\"keccak256\":\"0x98fc1f8a735b5759fc7524e3065ae322703d2771e7ec429e1cc9b60a4b1028dd\",\"license\":\"UNLICENSED\"},\"contracts/ionic/DiamondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice a base contract for logic extensions that use the diamond pattern storage\\n * to map the functions when looking up the extension contract to delegate to.\\n */\\nabstract contract DiamondExtension {\\n  /**\\n   * @return a list of all the function selectors that this logic extension exposes\\n   */\\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\\n}\\n\\n// When no function exists for function called\\nerror FunctionNotFound(bytes4 _functionSelector);\\n\\n// When no extension exists for function called\\nerror ExtensionNotFound(bytes4 _functionSelector);\\n\\n// When the function is already added\\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\\n\\nabstract contract DiamondBase {\\n  /**\\n   * @dev register a logic extension\\n   * @param extensionToAdd the extension whose functions are to be added\\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\\n   */\\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\\n\\n  function _listExtensions() public view returns (address[] memory) {\\n    return LibDiamond.listExtensions();\\n  }\\n\\n  fallback() external {\\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\\n    // Execute external function from extension using delegatecall and return any value.\\n    assembly {\\n      // copy function selector and any arguments\\n      calldatacopy(0, 0, calldatasize())\\n      // execute function call using the extension\\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\\n      // get any return value\\n      returndatacopy(0, 0, returndatasize())\\n      // return any return value or error back to the caller\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * @notice a library to use in a contract, whose logic is extended with diamond extension\\n */\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.extensions.diamond.storage\\\");\\n\\n  struct Function {\\n    address extension;\\n    bytes4 selector;\\n  }\\n\\n  struct LogicStorage {\\n    Function[] functions;\\n    address[] extensions;\\n  }\\n\\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\\n    return getExtensionForSelector(msgSig, diamondStorage());\\n  }\\n\\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  function listExtensions() internal view returns (address[] memory) {\\n    return diamondStorage().extensions;\\n  }\\n\\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\\n    if (address(extensionToReplace) != address(0)) {\\n      removeExtension(extensionToReplace);\\n    }\\n    addExtension(extensionToAdd);\\n  }\\n\\n  function removeExtension(DiamondExtension extension) internal {\\n    LogicStorage storage ds = diamondStorage();\\n    // remove all functions of the extension to replace\\n    removeExtensionFunctions(extension);\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\n      if (ds.extensions[i] == address(extension)) {\\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\\n        ds.extensions.pop();\\n      }\\n    }\\n  }\\n\\n  function addExtension(DiamondExtension extension) internal {\\n    LogicStorage storage ds = diamondStorage();\\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\\n      require(ds.extensions[i] != address(extension), \\\"extension already added\\\");\\n    }\\n    addExtensionFunctions(extension);\\n    ds.extensions.push(address(extension));\\n  }\\n\\n  function removeExtensionFunctions(DiamondExtension extension) internal {\\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\\n    LogicStorage storage ds = diamondStorage();\\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\\n      bytes4 selectorToRemove = fnsToRemove[i];\\n      // must never fail\\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\\n      // swap with the last element in the selectorAtIndex array and remove the last element\\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\\n      ds.functions.pop();\\n    }\\n  }\\n\\n  function addExtensionFunctions(DiamondExtension extension) internal {\\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\\n    LogicStorage storage ds = diamondStorage();\\n    uint16 functionsCount = uint16(ds.functions.length);\\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\\n      bytes4 selector = fnsToAdd[functionsIndex];\\n      address oldImplementation = getExtensionForSelector(selector, ds);\\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\\n      ds.functions.push(Function(address(extension), selector));\\n      functionsCount++;\\n    }\\n  }\\n\\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\\n    uint256 fnsLen = ds.functions.length;\\n    for (uint256 i = 0; i < fnsLen; i++) {\\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\\n    }\\n\\n    return address(0);\\n  }\\n\\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\\n    uint16 fnsLen = uint16(ds.functions.length);\\n    for (uint16 i = 0; i < fnsLen; i++) {\\n      if (ds.functions[i].selector == selector) return i;\\n    }\\n\\n    return type(uint16).max;\\n  }\\n}\\n\",\"keccak256\":\"0x6d33291928e3c255f0276fa465dcc5ea88d74a6562241a39ad2e52ae8abaf7bc\",\"license\":\"UNLICENSED\"},\"contracts/ionic/PoolRolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport { IonicComptroller, ComptrollerInterface } from \\\"../compound/ComptrollerInterface.sol\\\";\\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \\\"../compound/CTokenInterfaces.sol\\\";\\n\\nimport { RolesAuthority, Authority } from \\\"solmate/auth/authorities/RolesAuthority.sol\\\";\\n\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _owner) public initializer {\\n    owner = _owner;\\n    authority = this;\\n  }\\n\\n  // up to 256 roles\\n  uint8 public constant REGISTRY_ROLE = 0;\\n  uint8 public constant SUPPLIER_ROLE = 1;\\n  uint8 public constant BORROWER_ROLE = 2;\\n  uint8 public constant LIQUIDATOR_ROLE = 3;\\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\\n\\n  function configureRegistryCapabilities() external requiresAuth {\\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(\\n      REGISTRY_ROLE,\\n      address(this),\\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\\n      true\\n    );\\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\\n  }\\n\\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolSupplierCapabilities(pool, true);\\n  }\\n\\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolSupplierCapabilities(pool, false);\\n  }\\n\\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\n      for (uint256 j = 0; j < selectors.length; j++) {\\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\\n      }\\n    }\\n  }\\n\\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\\n  }\\n\\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\\n    uint8 fnsCount = 6;\\n    selectors = new bytes4[](fnsCount);\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\\n\\n    require(fnsCount == 0, \\\"use the correct array length\\\");\\n    return selectors;\\n  }\\n\\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      bytes4[] memory selectors = getSupplierMarketSelectors();\\n      for (uint256 j = 0; j < selectors.length; j++) {\\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\\n      }\\n    }\\n  }\\n\\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolBorrowerCapabilities(pool, true);\\n  }\\n\\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    _setPublicPoolBorrowerCapabilities(pool, false);\\n  }\\n\\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\\n    }\\n  }\\n\\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\\n    // borrowers have the SUPPLIER_ROLE capabilities by default\\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\n    }\\n  }\\n\\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n    }\\n  }\\n\\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\\n      // TODO this leaves redeeming open for everyone\\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n    }\\n  }\\n\\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\\n    for (uint256 i = 0; i < allMarkets.length; i++) {\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\\n\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x233d26db3755cf0c7bf0bba3a695a742bbfc15fd168fb76bbe307c5ac259b5bf\",\"license\":\"UNLICENSED\"},\"contracts/ionic/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\\n * that will shift the other.\\n */\\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\\n  /**\\n   * @notice Pending owner of this contract\\n   */\\n  address public pendingOwner;\\n\\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\\n    __Ownable_init();\\n    _transferOwnership(owner_);\\n  }\\n\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  modifier onlyOwnerOrAdmin() {\\n    bool isOwner = owner() == _msgSender();\\n    if (!isOwner) {\\n      address admin = _getProxyAdmin();\\n      bool isAdmin = admin == _msgSender();\\n      require(isAdmin, \\\"Ownable: caller is neither the owner nor the admin\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Emitted when pendingOwner is changed\\n   */\\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\\n\\n  /**\\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\\n   */\\n  event NewOwner(address oldOwner, address newOwner);\\n\\n  /**\\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\n   * @param newPendingOwner New pending owner.\\n   */\\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\\n    // Save current value, if any, for inclusion in log\\n    address oldPendingOwner = pendingOwner;\\n\\n    // Store pendingOwner with value newPendingOwner\\n    pendingOwner = newPendingOwner;\\n\\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n  }\\n\\n  /**\\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\\n   * @dev Owner function for pending owner to accept role and update owner\\n   */\\n  function _acceptOwner() public {\\n    // Check caller is pendingOwner and pendingOwner \\u2260 address(0)\\n    require(msg.sender == pendingOwner, \\\"not the pending owner\\\");\\n\\n    // Save current values for inclusion in log\\n    address oldOwner = owner();\\n    address oldPendingOwner = pendingOwner;\\n\\n    // Store owner with value pendingOwner\\n    _transferOwnership(pendingOwner);\\n\\n    // Clear the pending value\\n    pendingOwner = address(0);\\n\\n    emit NewOwner(oldOwner, pendingOwner);\\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n  }\\n\\n  function renounceOwnership() public override onlyOwner {\\n    // do not remove this overriding fn\\n    revert(\\\"not used anymore\\\");\\n  }\\n\\n  function transferOwnership(address newOwner) public override onlyOwner {\\n    emit NewPendingOwner(pendingOwner, newOwner);\\n    pendingOwner = newOwner;\\n  }\\n\\n  function _getProxyAdmin() internal view returns (address admin) {\\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n    AddressSlot storage adminSlot;\\n    assembly {\\n      adminSlot.slot := _ADMIN_SLOT\\n    }\\n    admin = adminSlot.value;\\n  }\\n}\\n\",\"keccak256\":\"0x74641db987b6d12c8c412818b8a7708332778736193b2cb127ea54e80b334186\",\"license\":\"UNLICENSED\"},\"contracts/oracles/BasePriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../compound/CTokenInterfaces.sol\\\";\\n\\n/**\\n * @title BasePriceOracle\\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\\n * @dev Implements the `PriceOracle` interface.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ninterface BasePriceOracle {\\n  /**\\n   * @notice Get the price of an underlying asset.\\n   * @param underlying The underlying asset to get the price of.\\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\\n   * Zero means the price is unavailable.\\n   */\\n  function price(address underlying) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the underlying price of a cToken asset\\n   * @param cToken The cToken to get the underlying price of\\n   * @return The underlying asset price mantissa (scaled by 1e18).\\n   *  Zero means the price is unavailable.\\n   */\\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xed2a27a8dc71a4280c0ef19d3165ff237d8066ae782e750b071bb39d12e73404\",\"license\":\"UNLICENSED\"},\"contracts/oracles/MasterPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { ICErc20 } from \\\"../compound/CTokenInterfaces.sol\\\";\\n\\nimport { BasePriceOracle } from \\\"./BasePriceOracle.sol\\\";\\n\\n/**\\n * @title MasterPriceOracle\\n * @notice Use a combination of price oracles.\\n * @dev Implements `PriceOracle`.\\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\\n */\\ncontract MasterPriceOracle is Initializable, BasePriceOracle {\\n  /**\\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\\n   */\\n  mapping(address => BasePriceOracle) public oracles;\\n\\n  /**\\n   * @dev Default/fallback `PriceOracle`.\\n   */\\n  BasePriceOracle public defaultOracle;\\n\\n  /**\\n   * @dev The administrator of this `MasterPriceOracle`.\\n   */\\n  address public admin;\\n\\n  /**\\n   * @dev Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   */\\n  bool internal noAdminOverwrite;\\n\\n  /**\\n   * @dev The Wrapped native asset address.\\n   */\\n  address public wtoken;\\n\\n  /**\\n   * @dev Maps underlying token addresses to `PriceOracle` contracts (can be `BasePriceOracle` contracts too).\\n   */\\n  mapping(address => BasePriceOracle) public fallbackOracles;\\n\\n  /**\\n   * @dev Returns a boolean indicating if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   */\\n  function canAdminOverwrite() external view returns (bool) {\\n    return !noAdminOverwrite;\\n  }\\n\\n  /**\\n   * @dev Event emitted when `admin` is changed.\\n   */\\n  event NewAdmin(address oldAdmin, address newAdmin);\\n\\n  /**\\n   * @dev Event emitted when the default oracle is changed.\\n   */\\n  event NewDefaultOracle(address oldOracle, address newOracle);\\n\\n  /**\\n   * @dev Event emitted when an underlying token's oracle is changed.\\n   */\\n  event NewOracle(address underlying, address oldOracle, address newOracle);\\n\\n  /**\\n   * @dev  Initialize state variables.\\n   * @param underlyings The underlying ERC20 token addresses to link to `_oracles`.\\n   * @param _oracles The `PriceOracle` contracts to be assigned to `underlyings`.\\n   * @param _defaultOracle The default `PriceOracle` contract to use.\\n   * @param _admin The admin who can assign oracles to underlying tokens.\\n   * @param _canAdminOverwrite Controls if `admin` can overwrite existing assignments of oracles to underlying tokens.\\n   * @param _wtoken The Wrapped native asset address\\n   */\\n  function initialize(\\n    address[] memory underlyings,\\n    BasePriceOracle[] memory _oracles,\\n    BasePriceOracle _defaultOracle,\\n    address _admin,\\n    bool _canAdminOverwrite,\\n    address _wtoken\\n  ) external initializer {\\n    // Input validation\\n    require(underlyings.length == _oracles.length, \\\"Lengths of both arrays must be equal.\\\");\\n\\n    // Initialize state variables\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\n      address underlying = underlyings[i];\\n      BasePriceOracle newOracle = _oracles[i];\\n      oracles[underlying] = newOracle;\\n      emit NewOracle(underlying, address(0), address(newOracle));\\n    }\\n\\n    defaultOracle = _defaultOracle;\\n    admin = _admin;\\n    noAdminOverwrite = !_canAdminOverwrite;\\n    wtoken = _wtoken;\\n  }\\n\\n  /**\\n   * @dev Sets `_oracles` for `underlyings`.\\n   */\\n  function add(address[] calldata underlyings, BasePriceOracle[] calldata _oracles) external onlyAdmin {\\n    // Input validation\\n    require(\\n      underlyings.length > 0 && underlyings.length == _oracles.length,\\n      \\\"Lengths of both arrays must be equal and greater than 0.\\\"\\n    );\\n\\n    // Assign oracles to underlying tokens\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\n      address underlying = underlyings[i];\\n      address oldOracle = address(oracles[underlying]);\\n      if (noAdminOverwrite)\\n        require(\\n          oldOracle == address(0),\\n          \\\"Admin cannot overwrite existing assignments of oracles to underlying tokens.\\\"\\n        );\\n      BasePriceOracle newOracle = _oracles[i];\\n      oracles[underlying] = newOracle;\\n      emit NewOracle(underlying, oldOracle, address(newOracle));\\n    }\\n  }\\n\\n  /**\\n   * @dev Sets `_oracles` for `underlyings`.\\n   */\\n  function addFallbacks(address[] calldata underlyings, BasePriceOracle[] calldata _oracles) external onlyAdmin {\\n    // Input validation\\n    require(\\n      underlyings.length > 0 && underlyings.length == _oracles.length,\\n      \\\"Lengths of both arrays must be equal and greater than 0.\\\"\\n    );\\n\\n    // Assign oracles to underlying tokens\\n    for (uint256 i = 0; i < underlyings.length; i++) {\\n      address underlying = underlyings[i];\\n      address oldOracle = address(fallbackOracles[underlying]);\\n      if (noAdminOverwrite)\\n        require(\\n          oldOracle == address(0),\\n          \\\"Admin cannot overwrite existing assignments of oracles to underlying tokens.\\\"\\n        );\\n      BasePriceOracle newOracle = _oracles[i];\\n      fallbackOracles[underlying] = newOracle;\\n      emit NewOracle(underlying, oldOracle, address(newOracle));\\n    }\\n  }\\n\\n  /**\\n   * @dev Changes the default price oracle\\n   */\\n  function setDefaultOracle(BasePriceOracle newOracle) external onlyAdmin {\\n    BasePriceOracle oldOracle = defaultOracle;\\n    defaultOracle = newOracle;\\n    emit NewDefaultOracle(address(oldOracle), address(newOracle));\\n  }\\n\\n  /**\\n   * @dev Changes the admin and emits an event.\\n   */\\n  function changeAdmin(address newAdmin) external onlyAdmin {\\n    address oldAdmin = admin;\\n    admin = newAdmin;\\n    emit NewAdmin(oldAdmin, newAdmin);\\n  }\\n\\n  /**\\n   * @dev Modifier that checks if `msg.sender == admin`.\\n   */\\n  modifier onlyAdmin() {\\n    require(msg.sender == admin, \\\"Sender is not the admin.\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the price in ETH of the token underlying `cToken`.\\n   * @dev Implements the `PriceOracle` interface for Ionic pools (and Compound v2).\\n   * @return Price in ETH of the token underlying `cToken`, scaled by `10 ** (36 - underlyingDecimals)`.\\n   */\\n  function getUnderlyingPrice(ICErc20 cToken) external view override returns (uint256) {\\n    // Get underlying ERC20 token address\\n    address underlying = address(ICErc20(address(cToken)).underlying());\\n\\n    if (underlying == wtoken) return 1e18;\\n\\n    BasePriceOracle oracle = oracles[underlying];\\n    BasePriceOracle fallbackOracle = fallbackOracles[underlying];\\n\\n    if (address(oracle) != address(0)) {\\n      try oracle.getUnderlyingPrice(cToken) returns (uint256 underlyingPrice) {\\n        if (underlyingPrice == 0) {\\n          if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\n        } else {\\n          return underlyingPrice;\\n        }\\n      } catch {\\n        if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\n      }\\n    } else {\\n      if (address(fallbackOracle) != address(0)) return fallbackOracle.getUnderlyingPrice(cToken);\\n    }\\n    revert(\\\"Price oracle not found for this underlying token address.\\\");\\n  }\\n\\n  /**\\n   * @dev Attempts to return the price in ETH of `underlying` (implements `BasePriceOracle`).\\n   */\\n  function price(address underlying) public view override returns (uint256) {\\n    // Return 1e18 for WETH\\n    if (underlying == wtoken) return 1e18;\\n\\n    // Get underlying price from assigned oracle\\n    BasePriceOracle oracle = oracles[underlying];\\n    BasePriceOracle fallbackOracle = fallbackOracles[underlying];\\n\\n    if (address(oracle) != address(0)) {\\n      try oracle.price(underlying) returns (uint256 underlyingPrice) {\\n        if (underlyingPrice == 0) {\\n          if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\n        } else {\\n          return underlyingPrice;\\n        }\\n      } catch {\\n        if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\n      }\\n    } else {\\n      if (address(fallbackOracle) != address(0)) return fallbackOracle.price(underlying);\\n    }\\n    revert(\\\"Price oracle not found for this underlying token address.\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x876694d42ec930cab6ceeb90ad4d442a9e60b196d34acdc19530928709477adc\",\"license\":\"UNLICENSED\"},\"contracts/veION/Voter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { IVoter } from \\\"./interfaces/IVoter.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IonicTimeLibrary } from \\\"./libraries/IonicTimeLibrary.sol\\\";\\nimport { IveION } from \\\"./interfaces/IveION.sol\\\";\\nimport { IBribeRewards } from \\\"./interfaces/IBribeRewards.sol\\\";\\nimport { IonicComptroller } from \\\"../compound/ComptrollerInterface.sol\\\";\\nimport { ICErc20 } from \\\"../compound/CTokenInterfaces.sol\\\";\\nimport { MasterPriceOracle } from \\\"../oracles/MasterPriceOracle.sol\\\";\\nimport { ERC721Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title Voter Contract\\n * @notice This contract allows veION holders to vote for various markets\\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\\n */\\ncontract Voter is IVoter, Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\\n  using SafeERC20 for IERC20;\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           State Variables                                 \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  ///@notice The ve token that governs these contracts\\n  address public ve;\\n  ///@notice Base token of ve contract\\n  address internal rewardToken;\\n  ///@notice Standard OZ IGovernor using ve for vote weights\\n  address public governor;\\n  ///@notice Master Price Oracle instance\\n  MasterPriceOracle public mpo;\\n  ///@notice List of LP tokens\\n  address[] public lpTokens;\\n  ///@notice Total Voting Weights for each address\\n  mapping(address => uint256) public totalWeight;\\n  ///@notice Maximum number of markets one voter can vote for at once\\n  uint256 public maxVotingNum;\\n  ///@notice Minimum value for maxVotingNum\\n  uint256 internal constant MIN_MAXVOTINGNUM = 10;\\n  ///@notice All markets viable for incentives\\n  Market[] public markets;\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                                Mappings                                   \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  ///@notice Mapping from Reward Accumulator to Bribes Voting Reward\\n  mapping(address => address) public rewardAccumulatorToBribe;\\n  ///@notice Mapping from Market to Market Side to LP Asset to weights\\n  mapping(address => mapping(MarketSide => mapping(address => uint256))) public weights;\\n  ///@notice Mapping from NFT to Pool to LP Asset to Votes\\n  mapping(uint256 => mapping(address => mapping(MarketSide => mapping(address => uint256)))) public votes;\\n  ///@notice Mapping from NFT to Pool to LP Asset to Base Weights\\n  mapping(uint256 => mapping(address => mapping(MarketSide => mapping(address => uint256)))) public baseWeights;\\n  ///@notice Mapping from NFT to List of markets voted for by NFT\\n  mapping(uint256 => mapping(address => address[])) public marketVote;\\n  ///@notice Mapping from NFT to List of market vote sides voted for by NFT\\n  mapping(uint256 => mapping(address => MarketSide[])) public marketVoteSide;\\n  ///@notice Mapping from NFT to Total voting weight of NFT\\n  mapping(uint256 => mapping(address => uint256)) public usedWeights;\\n  ///@notice Mapping from NFT to Timestamp of last vote (ensures single vote per epoch)\\n  mapping(uint256 => uint256) public lastVoted;\\n  ///@notice Mapping from Token to Whitelisted status\\n  mapping(address => bool) public isWhitelistedToken;\\n  ///@notice Mapping from TokenId to Whitelisted status\\n  mapping(uint256 => bool) public isWhitelistedNFT;\\n  ///@notice Mapping from Reward Accumulator to Liveness status\\n  mapping(address => bool) public isAlive;\\n  ///@notice Mapping from Market to Market Side to Reward Accumulator\\n  mapping(address => mapping(MarketSide => address)) public marketToRewardAccumulators;\\n\\n  bool distributionTimelockAlive;\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                               Modifiers                                   \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  /**\\n   * @notice Modifier to ensure that the function is called only in a new epoch since the last vote.\\n   * @dev Reverts if the current epoch start time is less than or equal to the last voted timestamp for the given token ID.\\n   *      Also reverts if the current time is within the vote distribution window.\\n   * @param _tokenId The ID of the veNFT to check the last voted timestamp.\\n   */\\n  modifier onlyNewEpoch(uint256 _tokenId) {\\n    if (IonicTimeLibrary.epochStart(block.timestamp) <= lastVoted[_tokenId]) revert AlreadyVotedOrDeposited();\\n    if (block.timestamp <= IonicTimeLibrary.epochVoteStart(block.timestamp)) revert DistributeWindow();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Modifier to ensure that the function is called only by the governance address.\\n   * @dev Reverts if the caller is not the current governor.\\n   */\\n  modifier onlyGovernance() {\\n    if (msg.sender != governor) revert NotGovernor();\\n    _;\\n  }\\n\\n  constructor() {\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\n  }\\n\\n  /**\\n   * @notice Initializes the Voter contract with the specified parameters.\\n   * @dev Requires initialization with at least one reward token.\\n   * @param _tokens An array of token addresses to be whitelisted.\\n   * @param _mpo The MasterPriceOracle contract address.\\n   * @param _rewardToken The address of the reward token.\\n   * @param _ve The address of the veION contract.\\n   * @custom:reverts TokensArrayEmpty if the _tokens array is empty.\\n   */\\n  function initialize(\\n    address[] calldata _tokens,\\n    MasterPriceOracle _mpo,\\n    address _rewardToken,\\n    address _ve\\n  ) external initializer {\\n    __Ownable2Step_init();\\n    __ReentrancyGuard_init();\\n    uint256 _length = _tokens.length;\\n    if (_length == 0) revert TokensArrayEmpty();\\n    for (uint256 i = 0; i < _length; i++) {\\n      _whitelistToken(_tokens[i], true);\\n    }\\n    mpo = _mpo;\\n    rewardToken = _rewardToken;\\n    ve = _ve;\\n    governor = msg.sender;\\n\\n    emit Initialized(_tokens, address(_mpo), _rewardToken, _ve, governor);\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           External Functions                              \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /// @inheritdoc IVoter\\n  function vote(\\n    uint256 _tokenId,\\n    address[] calldata _marketVote,\\n    MarketSide[] calldata _marketVoteSide,\\n    uint256[] calldata _weights\\n  ) external nonReentrant onlyNewEpoch(_tokenId) {\\n    VoteLocalVars memory vars;\\n    vars.sender = msg.sender;\\n    if (ERC721Upgradeable(ve).ownerOf(_tokenId) != vars.sender) revert NotOwner();\\n    if (\\n      _marketVote.length != _marketVoteSide.length ||\\n      _marketVoteSide.length != _weights.length ||\\n      _weights.length != _marketVote.length\\n    ) revert UnequalLengths();\\n    if (_marketVote.length > maxVotingNum) revert TooManyPools();\\n    vars.timestamp = block.timestamp;\\n    if ((vars.timestamp > IonicTimeLibrary.epochVoteEnd(vars.timestamp)) && !isWhitelistedNFT[_tokenId])\\n      revert NotWhitelistedNFT();\\n    uint256 totalVoteWeight = 0;\\n\\n    for (uint256 i = 0; i < _marketVote.length; i++) {\\n      totalVoteWeight += _weights[i];\\n    }\\n    for (uint256 i = 0; i < lpTokens.length; i++) {\\n      _reset(_tokenId, lpTokens[i]);\\n    }\\n\\n    lastVoted[_tokenId] = vars.timestamp;\\n    (vars.votingLPs, vars.votingLPBalances, vars.boosts) = IveION(ve).balanceOfNFT(_tokenId);\\n    for (uint256 j = 0; j < vars.votingLPs.length; j++) {\\n      _vote(\\n        _tokenId,\\n        vars.votingLPs[j],\\n        (vars.votingLPBalances[j] * vars.boosts[j]) / 1e18,\\n        _marketVote,\\n        _marketVoteSide,\\n        _weights,\\n        totalVoteWeight\\n      );\\n    }\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function poke(uint256 _tokenId) external nonReentrant {\\n    if (block.timestamp <= IonicTimeLibrary.epochVoteStart(block.timestamp)) revert DistributeWindow();\\n    (address[] memory _votingLPs, uint256[] memory _votingLPBalances, uint256[] memory _boosts) = IveION(ve)\\n      .balanceOfNFT(_tokenId);\\n\\n    for (uint256 i = 0; i < _votingLPs.length; i++) {\\n      uint256 effectiveBalance = (_votingLPBalances[i] * _boosts[i]) / 1e18;\\n      _poke(_tokenId, lpTokens[i], effectiveBalance);\\n    }\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function reset(uint256 _tokenId) public nonReentrant onlyNewEpoch(_tokenId) {\\n    if (ERC721Upgradeable(ve).ownerOf(_tokenId) != msg.sender) revert NotOwner();\\n    for (uint256 i = 0; i < lpTokens.length; i++) {\\n      _reset(_tokenId, lpTokens[i]);\\n    }\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external nonReentrant {\\n    if (_bribes.length != _tokens.length) revert UnequalLengths();\\n    if (ERC721Upgradeable(ve).ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\n    uint256 _length = _bribes.length;\\n    for (uint256 i = 0; i < _length; i++) {\\n      IBribeRewards(_bribes[i]).getReward(_tokenId, _tokens[i]);\\n    }\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           Admin External Functions                        \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /// @inheritdoc IVoter\\n  function distributeRewards() external onlyGovernance {\\n    if (distributionTimelockAlive && block.timestamp <= IonicTimeLibrary.epochVoteEnd(block.timestamp)) revert NotDistributeWindow();\\n    uint256 _reward = IERC20(rewardToken).balanceOf(address(this));\\n    uint256 _totalLPValueETH = _calculateTotalLPValue();\\n    for (uint256 i = 0; i < markets.length; i++) {\\n      uint256 _marketWeightETH = _calculateMarketLPValue(markets[i].marketAddress, markets[i].side);\\n      if (_marketWeightETH > 0) {\\n        IERC20(rewardToken).safeTransfer(\\n          marketToRewardAccumulators[markets[i].marketAddress][markets[i].side],\\n          (_reward * _marketWeightETH) / _totalLPValueETH\\n        );\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function whitelistToken(address _token, bool _bool) external onlyGovernance {\\n    _whitelistToken(_token, _bool);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external onlyGovernance {\\n    address _sender = msg.sender;\\n    isWhitelistedNFT[_tokenId] = _bool;\\n    emit WhitelistNFT(_sender, _tokenId, _bool);\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           Internal Functions                              \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /**\\n   * @notice Internal function to handle voting logic for a given token ID and voting asset.\\n   * @param _tokenId The ID of the token used for voting.\\n   * @param _votingAsset The address of the asset being used for voting.\\n   * @param _votingAssetBalance The balance of the voting asset.\\n   * @param _marketVote An array of market addresses to vote for.\\n   * @param _marketVoteSide An array of market sides corresponding to the markets.\\n   * @param _weights An array of weights for each market.\\n   * @param totalVoteWeight The total weight of the vote.\\n   */\\n  function _vote(\\n    uint256 _tokenId,\\n    address _votingAsset,\\n    uint256 _votingAssetBalance,\\n    address[] memory _marketVote,\\n    MarketSide[] memory _marketVoteSide,\\n    uint256[] memory _weights,\\n    uint256 totalVoteWeight\\n  ) internal {\\n    VoteVars memory vars;\\n    uint256 marketVoteLength = _marketVote.length;\\n    for (uint256 i = 0; i < marketVoteLength; i++) {\\n      vars.market = _marketVote[i];\\n      vars.marketSide = _marketVoteSide[i];\\n      vars.rewardAccumulator = marketToRewardAccumulators[vars.market][vars.marketSide];\\n      vars.bribes = rewardAccumulatorToBribe[vars.rewardAccumulator];\\n      if (_weights[i] == 0) revert ZeroWeight();\\n      if (vars.rewardAccumulator == address(0)) revert RewardAccumulatorDoesNotExist(vars.market);\\n      if (!isAlive[vars.rewardAccumulator]) revert RewardAccumulatorNotAlive(vars.rewardAccumulator);\\n\\n      vars.marketWeight = (_weights[i] * _votingAssetBalance) / totalVoteWeight;\\n      if (votes[_tokenId][vars.market][vars.marketSide][_votingAsset] != 0) revert NonZeroVotes();\\n\\n      marketVote[_tokenId][_votingAsset].push(vars.market);\\n      marketVoteSide[_tokenId][_votingAsset].push(vars.marketSide);\\n\\n      weights[vars.market][vars.marketSide][_votingAsset] += vars.marketWeight;\\n      votes[_tokenId][vars.market][vars.marketSide][_votingAsset] += vars.marketWeight;\\n      baseWeights[_tokenId][vars.market][vars.marketSide][_votingAsset] = _weights[i];\\n      IBribeRewards(vars.bribes).deposit(_votingAsset, uint256(vars.marketWeight), _tokenId);\\n      vars.usedWeight += vars.marketWeight;\\n      vars.totalWeight += vars.marketWeight;\\n      emit Voted(\\n        msg.sender,\\n        vars.market,\\n        _tokenId,\\n        vars.marketWeight,\\n        weights[vars.market][vars.marketSide][_votingAsset],\\n        block.timestamp\\n      );\\n    }\\n    IveION(ve).voting(_tokenId, true);\\n    totalWeight[_votingAsset] += uint256(vars.totalWeight);\\n    usedWeights[_tokenId][_votingAsset] = uint256(vars.usedWeight);\\n  }\\n\\n  /**\\n   * @notice Internal function to update voting balances for a given token ID and voting asset.\\n   * @param _tokenId The ID of the token whose voting balance is being updated.\\n   * @param _votingAsset The address of the asset being used for voting.\\n   * @param _votingAssetBalance The balance of the voting asset.\\n   */\\n  function _poke(uint256 _tokenId, address _votingAsset, uint256 _votingAssetBalance) internal {\\n    address[] memory _marketVote = marketVote[_tokenId][_votingAsset];\\n    MarketSide[] memory _marketVoteSide = marketVoteSide[_tokenId][_votingAsset];\\n    uint256 _marketCnt = _marketVote.length;\\n    uint256[] memory _weights = new uint256[](_marketCnt);\\n    uint256 totalVoteWeight = 0;\\n\\n    for (uint256 i = 0; i < _marketCnt; i++) {\\n      _weights[i] = baseWeights[_tokenId][_marketVote[i]][_marketVoteSide[i]][_votingAsset];\\n    }\\n\\n    for (uint256 i = 0; i < _marketVote.length; i++) {\\n      totalVoteWeight += _weights[i];\\n    }\\n\\n    _reset(_tokenId, _votingAsset);\\n    _vote(_tokenId, _votingAsset, _votingAssetBalance, _marketVote, _marketVoteSide, _weights, totalVoteWeight);\\n  }\\n\\n  /**\\n   * @notice Internal function to reset voting state for a given token ID and voting asset.\\n   * @param _tokenId The ID of the token whose voting state is being reset.\\n   * @param _votingAsset The address of the asset being used for voting.\\n   */\\n  function _reset(uint256 _tokenId, address _votingAsset) internal {\\n    address[] storage _marketVote = marketVote[_tokenId][_votingAsset];\\n    MarketSide[] storage _marketVoteSide = marketVoteSide[_tokenId][_votingAsset];\\n    uint256 _marketVoteCnt = _marketVote.length;\\n\\n    for (uint256 i = 0; i < _marketVoteCnt; i++) {\\n      address _market = _marketVote[i];\\n      MarketSide _marketSide = _marketVoteSide[i];\\n\\n      uint256 _votes = votes[_tokenId][_market][_marketSide][_votingAsset];\\n      if (_votes != 0) {\\n        weights[_market][_marketSide][_votingAsset] -= _votes;\\n        delete votes[_tokenId][_market][_marketSide][_votingAsset];\\n        IBribeRewards(rewardAccumulatorToBribe[marketToRewardAccumulators[_market][_marketSide]]).withdraw(\\n          _votingAsset,\\n          uint256(_votes),\\n          _tokenId\\n        );\\n        totalWeight[_votingAsset] -= _votes;\\n        emit Abstained(\\n          msg.sender,\\n          _market,\\n          _tokenId,\\n          _votes,\\n          weights[_market][_marketSide][_votingAsset],\\n          block.timestamp\\n        );\\n      }\\n    }\\n    usedWeights[_tokenId][_votingAsset] = 0;\\n    delete marketVote[_tokenId][_votingAsset];\\n    delete marketVoteSide[_tokenId][_votingAsset];\\n    IveION(ve).voting(_tokenId, false);\\n  }\\n\\n  /**\\n   * @notice Internal function to whitelist or unwhitelist a token for use in bribes.\\n   * @param _token The address of the token to be whitelisted or unwhitelisted.\\n   * @param _bool Boolean indicating whether to whitelist (true) or unwhitelist (false) the token.\\n   */\\n  function _whitelistToken(address _token, bool _bool) internal {\\n    isWhitelistedToken[_token] = _bool;\\n    emit WhitelistToken(msg.sender, _token, _bool);\\n  }\\n\\n  /**\\n   * @notice Internal function to calculate the ETH value of a given amount of LP tokens.\\n   * @param amount The amount of LP tokens.\\n   * @param lpToken The address of the LP token.\\n   * @return The ETH value of the given amount of LP tokens.\\n   */\\n  function _getTokenEthValue(uint256 amount, address lpToken) internal view returns (uint256) {\\n    uint256 tokenPriceInEth = mpo.price(lpToken); // Fetch price of 1 lpToken in ETH\\n    uint256 ethValue = amount * tokenPriceInEth;\\n    return ethValue;\\n  }\\n\\n  /**\\n   * @notice Internal function to calculate the total ETH value of all LP tokens in the markets.\\n   * @return _totalLPValueETH The total ETH value of all LP tokens.\\n   */\\n  function _calculateTotalLPValue() internal view returns (uint256 _totalLPValueETH) {\\n    uint256 marketLength = markets.length;\\n    for (uint256 i = 0; i < marketLength; i++)\\n      _totalLPValueETH += _calculateMarketLPValue(markets[i].marketAddress, markets[i].side);\\n  }\\n\\n  /**\\n   * @notice Internal function to calculate the ETH value of LP tokens for a specific market.\\n   * @param _market The address of the market.\\n   * @param _marketSide The side of the market.\\n   * @return _marketLPValueETH The ETH value of LP tokens for the specified market.\\n   */\\n  function _calculateMarketLPValue(\\n    address _market,\\n    MarketSide _marketSide\\n  ) internal view returns (uint256 _marketLPValueETH) {\\n    uint256 lpTokensLength = lpTokens.length;\\n    for (uint256 i = 0; i < lpTokensLength; i++) {\\n      uint256 _lpAmount = weights[_market][_marketSide][lpTokens[i]];\\n      uint256 tokenEthValue = _getTokenEthValue(_lpAmount, lpTokens[i]);\\n      _marketLPValueETH += tokenEthValue;\\n    }\\n  }\\n\\n  /**\\n   * @notice Internal function to check if a market exists.\\n   * @param _marketAddress The address of the market.\\n   * @param _marketSide The side of the market.\\n   * @return True if the market exists, false otherwise.\\n   */\\n  function _marketExists(address _marketAddress, MarketSide _marketSide) internal view returns (bool) {\\n    uint256 marketLength = markets.length;\\n    for (uint256 j = 0; j < marketLength; j++) {\\n      if (markets[j].marketAddress == _marketAddress && markets[j].side == _marketSide) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           Setter Functions                                \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /// @inheritdoc IVoter\\n  function setLpTokens(address[] memory _lpTokens) external onlyOwner {\\n    require(_lpTokens.length != 0, \\\"LpTokens array cannot be empty\\\");\\n    lpTokens = _lpTokens;\\n    emit LpTokensSet(_lpTokens);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function setMpo(address _mpo) external onlyOwner {\\n    if (_mpo == address(0)) revert ZeroAddress();\\n    mpo = MasterPriceOracle(_mpo);\\n    emit MpoSet(_mpo);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function setGovernor(address _governor) public onlyOwner {\\n    if (_governor == address(0)) revert ZeroAddress();\\n    governor = _governor;\\n    emit GovernorSet(_governor);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function addMarkets(Market[] calldata _markets) external onlyGovernance {\\n    for (uint256 i = 0; i < _markets.length; i++) {\\n      Market memory newMarket = _markets[i];\\n      if (_marketExists(newMarket.marketAddress, newMarket.side)) revert MarketAlreadyExists();\\n      markets.push(newMarket);\\n    }\\n    emit MarketsAdded(_markets);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function setMarketRewardAccumulators(\\n    address[] calldata _markets,\\n    MarketSide[] calldata _marketSides,\\n    address[] calldata _rewardAccumulators\\n  ) external onlyGovernance {\\n    uint256 _length = _markets.length;\\n    if (_marketSides.length != _length) revert MismatchedArrayLengths();\\n    if (_rewardAccumulators.length != _length) revert MismatchedArrayLengths();\\n    for (uint256 i = 0; i < _length; i++) {\\n      marketToRewardAccumulators[_markets[i]][_marketSides[i]] = _rewardAccumulators[i];\\n      isAlive[_rewardAccumulators[i]] = true;\\n    }\\n    emit MarketRewardAccumulatorsSet(_markets, _marketSides, _rewardAccumulators);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external onlyGovernance {\\n    uint256 _length = _bribes.length;\\n    if (_rewardAccumulators.length != _length) revert MismatchedArrayLengths();\\n    for (uint256 i = 0; i < _length; i++) {\\n      rewardAccumulatorToBribe[_rewardAccumulators[i]] = _bribes[i];\\n    }\\n    emit BribesSet(_rewardAccumulators, _bribes);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function setMaxVotingNum(uint256 _maxVotingNum) external onlyGovernance {\\n    if (_maxVotingNum < MIN_MAXVOTINGNUM) revert MaximumVotingNumberTooLow();\\n    if (_maxVotingNum == maxVotingNum) revert SameValue();\\n    maxVotingNum = _maxVotingNum;\\n    emit MaxVotingNumSet(_maxVotingNum);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function toggleRewardAccumulatorAlive(\\n    address _market,\\n    MarketSide _marketSide,\\n    bool _isAlive\\n  ) external onlyGovernance {\\n    address _rewardAccumulator = marketToRewardAccumulators[_market][_marketSide];\\n    if (_rewardAccumulator == address(0)) revert RewardAccumulatorDoesNotExist(_market);\\n    isAlive[_rewardAccumulator] = _isAlive;\\n    emit RewardAccumulatorAliveToggled(_market, _marketSide, _isAlive);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function toggleDistributionTimelockAlive(bool _isAlive) external onlyGovernance {\\n    distributionTimelockAlive = _isAlive;\\n    emit DistributionTimelockAliveToggled(_isAlive);\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           Pure/View Functions                             \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /// @inheritdoc IVoter\\n  function epochStart(uint256 _timestamp) external pure returns (uint256) {\\n    return IonicTimeLibrary.epochStart(_timestamp);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function epochNext(uint256 _timestamp) external pure returns (uint256) {\\n    return IonicTimeLibrary.epochNext(_timestamp);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256) {\\n    return IonicTimeLibrary.epochVoteStart(_timestamp);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256) {\\n    return IonicTimeLibrary.epochVoteEnd(_timestamp);\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function marketsLength() external view returns (uint256) {\\n    return markets.length;\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function getAllLpRewardTokens() external view returns (address[] memory) {\\n    return lpTokens;\\n  }\\n\\n  /// @inheritdoc IVoter\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory) {\\n    uint256 length = marketVote[_tokenId][_lpAsset].length;\\n    address[] memory _marketVotes = new address[](length);\\n    MarketSide[] memory _marketVoteSides = new MarketSide[](length);\\n    uint256[] memory _votes = new uint256[](length);\\n\\n    for (uint256 i = 0; i < length; i++) {\\n      _marketVotes[i] = marketVote[_tokenId][_lpAsset][i];\\n      _marketVoteSides[i] = marketVoteSide[_tokenId][_lpAsset][i];\\n      _votes[i] = votes[_tokenId][_marketVotes[i]][_marketVoteSides[i]][_lpAsset];\\n    }\\n\\n    uint256 _usedWeight = usedWeights[_tokenId][_lpAsset];\\n\\n    return\\n      VoteDetails({\\n        marketVotes: _marketVotes,\\n        marketVoteSides: _marketVoteSides,\\n        votes: _votes,\\n        usedWeight: _usedWeight\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0x4ab2b89d21d748df0e3cfa304b8941223b8355c816f6bc81ee0e2d010ce4c3ac\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IBribeRewards.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\ninterface IBribeRewards {\\n  /// @notice A checkpoint for marking balance\\n  struct Checkpoint {\\n    uint256 timestamp;\\n    uint256 balanceOf;\\n  }\\n\\n  /// @notice A checkpoint for marking supply\\n  struct SupplyCheckpoint {\\n    uint256 timestamp;\\n    uint256 supply;\\n  }\\n\\n  struct EarnedVars {\\n    uint256 totalReward;\\n    uint256 reward;\\n    uint256 supplyValue;\\n    uint256 epochBalanceValue;\\n    uint256 currTs;\\n    uint256 index;\\n    uint256 numEpochs;\\n    uint256 overallBalance;\\n    uint256 overallSupply;\\n    uint256 historicalPrice;\\n  }\\n\\n  error InvalidReward();\\n  error Unauthorized();\\n  error InvalidGauge();\\n  error InvalidEscrowToken();\\n  error SingleTokenExpected();\\n  error InvalidVotingEscrow();\\n  error TokenNotWhitelisted();\\n  error AmountCannotBeZero();\\n  error HistoricalPriceNotSet(address lpToken, uint256 epochStart);\\n\\n  event Deposit(address indexed user, uint256 indexed tokenId, uint256 amount);\\n  event Withdraw(address indexed user, uint256 indexed tokenId, uint256 amount);\\n  event RewardNotification(address indexed user, address indexed rewardToken, uint256 indexed epoch, uint256 amount);\\n  event RewardsClaimed(address indexed user, address indexed rewardToken, uint256 amount);\\n  event HistoricalPriceSet(uint256 indexed epochTimestamp, address indexed lpToken, uint256 price);\\n\\n  /// @notice Deposit an amount into the bribe rewards contract for a specific veNFT\\n  /// @dev Can only be called internally by authorized entities.\\n  /// @param lpToken  Address of the liquidity pool token\\n  /// @param amount   Amount to be deposited for the veNFT\\n  /// @param tokenId  Unique identifier of the veNFT\\n  function deposit(address lpToken, uint256 amount, uint256 tokenId) external;\\n\\n  /// @notice Withdraw an amount from the bribe rewards contract for a specific veNFT\\n  /// @dev Can only be called internally by authorized entities.\\n  /// @param lpToken  Address of the liquidity pool token\\n  /// @param amount   Amount to be withdrawn for the veNFT\\n  /// @param tokenId  Unique identifier of the veNFT\\n  function withdraw(address lpToken, uint256 amount, uint256 tokenId) external;\\n\\n  /// @notice Claim the rewards earned by a veNFT holder\\n  /// @param tokenId  Unique identifier of the veNFT\\n  /// @param tokens   Array of tokens to claim rewards for\\n  function getReward(uint256 tokenId, address[] memory tokens) external;\\n\\n  /// @notice Notify the contract about new rewards for stakers\\n  /// @param token    Address of the reward token\\n  /// @param amount   Amount of the reward token to be added\\n  function notifyRewardAmount(address token, uint256 amount) external;\\n\\n  /// @notice Get the prior balance index for a veNFT at a specific timestamp\\n  /// @dev Timestamp must be in the past or present.\\n  /// @param tokenId      The veNFT token ID to check\\n  /// @param lpToken      Address of the liquidity pool token\\n  /// @param timestamp    The timestamp to get the balance at\\n  /// @return The balance index at the given timestamp\\n  function getPriorBalanceIndex(uint256 tokenId, address lpToken, uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Get the prior supply index at a specific timestamp\\n  /// @dev Timestamp must be in the past or present.\\n  /// @param timestamp The timestamp to get the supply index at\\n  /// @return The supply index at the given timestamp\\n  function getPriorSupplyIndex(uint256 timestamp, address lpToken) external view returns (uint256);\\n\\n  /// @notice Calculate the rewards earned for a specific token and veNFT\\n  /// @param token Address of the reward token\\n  /// @param tokenId Unique identifier of the veNFT\\n  /// @return Amount of the reward token earned\\n  function earned(address token, uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x56541b7ffe5138a51cb37b5490e4c5f025553cdc4baf4d6c76d19f0f14a08575\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IVoter\\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\\n */\\ninterface IVoter {\\n  /// @notice Error thrown when a user has already voted or deposited.\\n  error AlreadyVotedOrDeposited();\\n\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\n  error DistributeWindow();\\n\\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\\n  error RewardAccumulatorDoesNotExist(address _pool);\\n\\n  /// @notice Error thrown when a reward accumulator is not alive.\\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\\n\\n  /// @notice Error thrown when a market already exists.\\n  error MarketAlreadyExists();\\n\\n  /// @notice Error thrown when the maximum voting number is too low.\\n  error MaximumVotingNumberTooLow();\\n\\n  /// @notice Error thrown when array lengths do not match.\\n  error MismatchedArrayLengths();\\n\\n  /// @notice Error thrown when there are non-zero votes.\\n  error NonZeroVotes();\\n\\n  /// @notice Error thrown when the caller is not the owner.\\n  error NotOwner();\\n\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\n  error NotDistributeWindow();\\n\\n  /// @notice Error thrown when the caller is not the governor.\\n  error NotGovernor();\\n\\n  /// @notice Error thrown when an NFT is not whitelisted.\\n  error NotWhitelistedNFT();\\n\\n  /// @notice Error thrown when the same value is provided.\\n  error SameValue();\\n\\n  /// @notice Error thrown when there are too many pools.\\n  error TooManyPools();\\n\\n  /// @notice Error thrown when array lengths are unequal.\\n  error UnequalLengths();\\n\\n  /// @notice Error thrown when an address is zero.\\n  error ZeroAddress();\\n\\n  /// @notice Error thrown when the tokens array is empty.\\n  error TokensArrayEmpty();\\n\\n  /// @notice Error thrown when the weight is zero.\\n  error ZeroWeight();\\n\\n  /**\\n   * @notice Struct to store vote details.\\n   * @param marketVotes Array of market addresses voted for.\\n   * @param marketVoteSides Array of market sides voted for.\\n   * @param votes Array of vote weights.\\n   * @param usedWeight Total weight used in voting.\\n   */\\n  struct VoteDetails {\\n    address[] marketVotes;\\n    MarketSide[] marketVoteSides;\\n    uint256[] votes;\\n    uint256 usedWeight;\\n  }\\n\\n  /**\\n   * @notice Struct to store market information.\\n   * @param marketAddress Address of the market.\\n   * @param side Side of the market (Supply or Borrow).\\n   */\\n  struct Market {\\n    address marketAddress;\\n    MarketSide side;\\n  }\\n\\n  /**\\n   * @notice Struct to store variables used in voting.\\n   * @param totalWeight Total weight available for voting.\\n   * @param usedWeight Weight used in voting.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param rewardAccumulator Address of the reward accumulator.\\n   * @param marketWeight Weight of the market.\\n   * @param bribes Address of the bribes.\\n   */\\n  struct VoteVars {\\n    uint256 totalWeight;\\n    uint256 usedWeight;\\n    address market;\\n    MarketSide marketSide;\\n    address rewardAccumulator;\\n    uint256 marketWeight;\\n    address bribes;\\n  }\\n\\n  /**\\n   * @notice Struct to store local variables used in voting.\\n   * @param sender Address of the sender.\\n   * @param timestamp Timestamp of the vote.\\n   * @param votingLPs Array of voting LP addresses.\\n   * @param votingLPBalances Array of voting LP balances.\\n   * @param boosts Array of boosts.\\n   */\\n  struct VoteLocalVars {\\n    address sender;\\n    uint256 timestamp;\\n    address[] votingLPs;\\n    uint256[] votingLPBalances;\\n    uint256[] boosts;\\n  }\\n\\n  /**\\n   * @notice Enum to represent the side of a market.\\n   */\\n  enum MarketSide {\\n    Supply,\\n    Borrow\\n  }\\n\\n  /**\\n   * @notice Event emitted when a vote is cast.\\n   * @param voter Address of the voter.\\n   * @param pool Address of the pool.\\n   * @param tokenId ID of the token.\\n   * @param weight Weight of the vote.\\n   * @param totalWeight Total weight of the vote.\\n   * @param timestamp Timestamp of the vote.\\n   */\\n  event Voted(\\n    address indexed voter,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 weight,\\n    uint256 totalWeight,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when a vote is abstained.\\n   * @param voter Address of the voter.\\n   * @param pool Address of the pool.\\n   * @param tokenId ID of the token.\\n   * @param weight Weight of the vote.\\n   * @param totalWeight Total weight of the vote.\\n   * @param timestamp Timestamp of the vote.\\n   */\\n  event Abstained(\\n    address indexed voter,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 weight,\\n    uint256 totalWeight,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when a reward is notified.\\n   * @param sender Address of the sender.\\n   * @param reward Address of the reward.\\n   * @param amount Amount of the reward.\\n   */\\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\n\\n  /**\\n   * @notice Event emitted when a token is whitelisted.\\n   * @param whitelister Address of the whitelister.\\n   * @param token Address of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\\n\\n  /**\\n   * @notice Event emitted when an NFT is whitelisted.\\n   * @param whitelister Address of the whitelister.\\n   * @param tokenId ID of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\\n\\n  event LpTokensSet(address[] indexed lpTokens);\\n  event MpoSet(address indexed mpo);\\n  event GovernorSet(address indexed governor);\\n  event MarketsAdded(Market[] markets);\\n  event MarketRewardAccumulatorsSet(\\n    address[] indexed markets,\\n    MarketSide[] indexed marketSides,\\n    address[] indexed rewardAccumulators\\n  );\\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\\n  event DistributionTimelockAliveToggled(bool isAlive);\\n\\n  /**\\n   * @notice Get the weight of a market.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param lpToken Address of the LP token.\\n   * @return The weight of the market.\\n   */\\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the votes for a token.\\n   * @param tokenId ID of the token.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param lpToken Address of the LP token.\\n   * @return The votes for the token.\\n   */\\n  function votes(\\n    uint256 tokenId,\\n    address market,\\n    MarketSide marketSide,\\n    address lpToken\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the used weights for a token.\\n   * @param tokenId ID of the token.\\n   * @param lpToken Address of the LP token.\\n   * @return The used weights for the token.\\n   */\\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the last voted timestamp for a token.\\n   * @param tokenId ID of the token.\\n   * @return The last voted timestamp for the token.\\n   */\\n  function lastVoted(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @notice Check if a token is whitelisted.\\n   * @param token Address of the token.\\n   * @return True if the token is whitelisted, false otherwise.\\n   */\\n  function isWhitelistedToken(address token) external view returns (bool);\\n\\n  /**\\n   * @notice Check if an NFT is whitelisted.\\n   * @param tokenId ID of the token.\\n   * @return True if the NFT is whitelisted, false otherwise.\\n   */\\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\n\\n  /**\\n   * @notice Get the address of the ve contract.\\n   * @return The address of the ve contract.\\n   */\\n  function ve() external view returns (address);\\n\\n  /**\\n   * @notice Get the address of the governor.\\n   * @return The address of the governor.\\n   */\\n  function governor() external view returns (address);\\n\\n  /**\\n   * @notice Update voting balances in voting rewards contracts.\\n   * @param _tokenId ID of veNFT whose balance you wish to update.\\n   */\\n  function poke(uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\\n   *      Can only vote for gauges that have not been killed.\\n   *      Throws if length of _poolVote and _weights do not match.\\n   * @param _tokenId ID of veNFT you are voting with.\\n   * @param _poolVote Array of pools you are voting for.\\n   * @param _marketVoteSide Array of market vote sides you are voting for.\\n   * @param _weights Weights of pools.\\n   */\\n  function vote(\\n    uint256 _tokenId,\\n    address[] calldata _poolVote,\\n    MarketSide[] calldata _marketVoteSide,\\n    uint256[] calldata _weights\\n  ) external;\\n\\n  /**\\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\\n   * @dev Cannot reset in the same epoch that you voted in.\\n   *      Can vote or deposit into a managed NFT again after reset.\\n   * @param _tokenId ID of veNFT that you are resetting.\\n   */\\n  function reset(uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Distributes rewards to eligible markets.\\n   */\\n  function distributeRewards() external;\\n\\n  /**\\n   * @notice Claim bribes for a given NFT.\\n   * @dev Utility to help batch bribe claims.\\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\\n   * @param _tokens Array of tokens that are used as bribes.\\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\\n   */\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\\n   * @dev Throws if not called by governor.\\n   * @param _token Address of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  function whitelistToken(address _token, bool _bool) external;\\n\\n  /**\\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\n   * @dev Throws if not called by governor.\\n   *      Throws if already whitelisted.\\n   * @param _tokenId ID of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\\n\\n  /**\\n   * @notice Set the LP tokens.\\n   * @param _lpTokens Array of LP token addresses.\\n   */\\n  function setLpTokens(address[] memory _lpTokens) external;\\n\\n  /**\\n   * @notice Set the Master Price Oracle (MPO) address.\\n   * @param _mpo Address of the Master Price Oracle.\\n   */\\n  function setMpo(address _mpo) external;\\n\\n  /**\\n   * @notice Set a new governor.\\n   * @param _governor Address of the new governor.\\n   */\\n  function setGovernor(address _governor) external;\\n\\n  /**\\n   * @notice Add new markets.\\n   * @param _markets Array of Market structs to be added.\\n   */\\n  function addMarkets(Market[] calldata _markets) external;\\n\\n  /**\\n   * @notice Set reward accumulators for markets.\\n   * @param _markets Array of market addresses.\\n   * @param _marketSides Array of market sides.\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\n   */\\n  function setMarketRewardAccumulators(\\n    address[] calldata _markets,\\n    MarketSide[] calldata _marketSides,\\n    address[] calldata _rewardAccumulators\\n  ) external;\\n\\n  /**\\n   * @notice Set bribes for reward accumulators.\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\n   * @param _bribes Array of bribe addresses.\\n   */\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\\n\\n  /**\\n   * @notice Set the maximum number of votes.\\n   * @param _maxVotingNum Maximum number of votes allowed.\\n   */\\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\\n\\n  /**\\n   * @notice Toggle the alive status of a reward accumulator.\\n   * @param _market Address of the market.\\n   * @param _marketSide Side of the market.\\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\\n   */\\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\\n\\n  /**\\n   * @notice Toggle the alive status of a timelock on distributing rewards.\\n   * @param _isAlive Boolean indicating if the timelock is alive.\\n   */\\n  function toggleDistributionTimelockAlive(bool _isAlive) external;\\n\\n  /**\\n   * @notice Get the start of the epoch for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the epoch start for.\\n   * @return The start of the epoch.\\n   */\\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the next epoch for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the next epoch for.\\n   * @return The next epoch.\\n   */\\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the start of the voting period for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the voting start for.\\n   * @return The start of the voting period.\\n   */\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the end of the voting period for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the voting end for.\\n   * @return The end of the voting period.\\n   */\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the number of markets.\\n   * @return The number of markets.\\n   */\\n  function marketsLength() external view returns (uint256);\\n\\n  /**\\n   * @notice Get all LP reward tokens.\\n   * @return An array of addresses representing all LP reward tokens.\\n   */\\n  function getAllLpRewardTokens() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Get vote details for a specific token ID and LP asset.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpAsset The address of the LP asset.\\n   * @return A struct containing vote details.\\n   */\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\\n}\\n\",\"keccak256\":\"0x25f8d850f6c35830ed387227d0a65f48392a2ca6153214f1bcd53dda23a3ac17\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveION.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\nimport \\\"./IveIONCore.sol\\\";\\nimport \\\"./IveIONFirstExtension.sol\\\";\\nimport \\\"./IveIONSecondExtension.sol\\\";\\n\\n/// @title IveION Interface\\n/// @notice Interface for veION contract\\ninterface IveION is IveIONStructsEnumsErrorsEvents, IveIONCore, IveIONFirstExtension, IveIONSecondExtension {\\n  // Constants\\n  function PRECISION() external view returns (uint256);\\n\\n  // State Variables\\n  function s_tokenId() external view returns (uint256);\\n  function s_limitedBoost() external view returns (uint256);\\n  function s_limitedBoostActive() external view returns (bool);\\n  function s_veAERO() external view returns (address);\\n  function s_aeroVoting() external view returns (address);\\n  function s_ionicPool() external view returns (address);\\n  function s_voter() external view returns (address);\\n  function s_aeroVoterBoost() external view returns (uint256);\\n  function s_minimumLockDuration() external view returns (uint256);\\n  function s_maxEarlyWithdrawFee() external view returns (uint256);\\n  function ap() external view returns (address);\\n  function implementation() external view returns (address);\\n\\n  // Mappings\\n  function s_minimumLockAmount(LpTokenType lpTokenType) external view returns (uint256);\\n  function s_whitelistedToken(address token) external view returns (bool);\\n  function s_lpType(address token) external view returns (LpTokenType);\\n  function s_canSplit(address user) external view returns (bool);\\n  function s_locked(uint256 tokenId, LpTokenType lpTokenType) external view returns (LockedBalance memory);\\n  function s_userPointEpoch(uint256 tokenId, LpTokenType lpTokenType) external view returns (uint256);\\n  function s_userPointHistory(\\n    uint256 tokenId,\\n    LpTokenType lpTokenType,\\n    uint256 epoch\\n  ) external view returns (UserPoint memory);\\n  function s_voted(uint256 tokenId) external view returns (bool);\\n  function s_supply(LpTokenType lpTokenType) external view returns (uint256);\\n  function s_permanentLockBalance(LpTokenType lpTokenType) external view returns (uint256);\\n  function s_stakeStrategy(LpTokenType lpTokenType) external view returns (address);\\n  function s_underlyingStake(uint256 tokenId, address token) external view returns (uint256);\\n  function s_protocolFees(LpTokenType lpTokenType) external view returns (uint256);\\n  function s_distributedFees(LpTokenType lpTokenType) external view returns (uint256);\\n  function s_delegations(\\n    uint256 delegatorTokenId,\\n    uint256 delegateeTokenId,\\n    LpTokenType lpTokenType\\n  ) external view returns (uint256);\\n  function s_userCumulativeAssetValues(address user, address token) external view returns (uint256);\\n  function s_delegatorsBlocked(uint256 tokenId, address token) external view returns (bool);\\n\\n  // Openzeppelin functions\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n  function ownerOf(uint256 tokenId) external returns (address);\\n  function owner() external returns (address);\\n  function balanceOf(address owner) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf123672e490955766b90bec710b2144ee076a90702462d274703d5f7483bde74\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\n\\n/// @title IveION Interface\\n/// @notice Interface for veION contract\\ninterface IveIONCore {\\n  /**\\n   * @notice Creates a new lock for multiple tokens and assigns it to a specified address\\n   * @param _tokenAddress Array of token addresses to lock\\n   * @param _tokenAmount Array of token amounts to lock\\n   * @param _duration Array of lock durations\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\n   * @param _to Address to assign the lock to\\n   * @return The ID of the newly created veNFT\\n   */\\n  function createLockFor(\\n    address[] memory _tokenAddress,\\n    uint256[] memory _tokenAmount,\\n    uint256[] memory _duration,\\n    bool[] memory _stakeUnderlying,\\n    address _to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Creates a new lock for multiple tokens\\n   * @param _tokenAddress Array of token addresses to lock\\n   * @param _tokenAmount Array of token amounts to lock\\n   * @param _duration Array of lock durations\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\n   * @return The ID of the newly created veNFT\\n   */\\n  function createLock(\\n    address[] calldata _tokenAddress,\\n    uint256[] calldata _tokenAmount,\\n    uint256[] calldata _duration,\\n    bool[] memory _stakeUnderlying\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Increases the amount of tokens locked for a specific veNFT\\n   * @param _tokenAddress Address of the token to increase lock amount for\\n   * @param _tokenId ID of the veNFT\\n   * @param _tokenAmount Amount of tokens to add to the lock\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\n   */\\n  function increaseAmount(\\n    address _tokenAddress,\\n    uint256 _tokenId,\\n    uint256 _tokenAmount,\\n    bool _stakeUnderlying\\n  ) external;\\n\\n  /**\\n   * @notice Locks additional asset type for an existing veNFT\\n   * @param _tokenAddress Address of the new token to lock\\n   * @param _tokenAmount Amount of tokens to lock\\n   * @param _tokenId ID of the veNFT\\n   * @param _duration Duration of the lock\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\n   */\\n  function lockAdditionalAsset(\\n    address _tokenAddress,\\n    uint256 _tokenAmount,\\n    uint256 _tokenId,\\n    uint256 _duration,\\n    bool _stakeUnderlying\\n  ) external;\\n\\n  /**\\n   * @notice Increases the lock duration for a specific token in a veNFT\\n   * @param _tokenAddress Address of the token\\n   * @param _tokenId ID of the veNFT\\n   * @param _lockDuration New lock duration to extend to\\n   */\\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external;\\n\\n  /**\\n   * @notice Delegates voting power from one veNFT to another.\\n   * @param fromTokenId The ID of the veNFT from which voting power is delegated.\\n   * @param toTokenId The ID of the veNFT to which voting power is delegated.\\n   * @param lpToken The address of the LP token associated with the delegation.\\n   * @param amount The amount of voting power to delegate.\\n   */\\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external;\\n\\n  /**\\n   * @notice Removes delegatees from a specific veNFT\\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\\n   * @param lpToken Address of the LP token associated with the delegation\\n   * @param amounts Array of amounts of voting power to remove from each delegatee\\n   */\\n  function removeDelegatees(\\n    uint256 fromTokenId,\\n    uint256[] memory toTokenIds,\\n    address lpToken,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /**\\n   * @notice Removes delegators from a specific veNFT\\n   * @param fromTokenIds Array of veNFT IDs that are delegators to be removed\\n   * @param toTokenId ID of the veNFT from which delegators are removed\\n   * @param lpToken Address of the LP token associated with the delegation\\n   * @param amounts Array of amounts of voting power to remove from each delegator\\n   */\\n  function removeDelegators(\\n    uint256[] memory fromTokenIds,\\n    uint256 toTokenId,\\n    address lpToken,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /**\\n   * @notice Locks a token permanently.\\n   * @param _tokenAddress The address of the token to lock.\\n   * @param _tokenId The ID of the token to lock.\\n   */\\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Unlocks a permanently locked token.\\n   * @param _tokenAddress The address of the token to unlock.\\n   * @param _tokenId The ID of the token to unlock.\\n   */\\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Updates voting status for a veNFT\\n   * @param _tokenId ID of the veNFT\\n   * @param _voting Voting status\\n   */\\n  function voting(uint256 _tokenId, bool _voting) external;\\n\\n  /**\\n   * @notice Sets the implementation addresses for the veION contract extensions.\\n   * @dev This function can only be called by authorized entities.\\n   * @param _veIONFirstExtension The address of the first extension contract.\\n   * @param _veIONSecondExtension The address of the second extension contract.\\n   */\\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external;\\n}\\n\\n/// @title IAeroVotingEscrow Interface\\n/// @notice Interface for Aero Voting Escrow contract\\ninterface IAeroVotingEscrow {\\n  /**\\n   * @notice Returns the balance of the specified owner.\\n   * @param _owner The address of the owner.\\n   * @return The balance of the owner.\\n   */\\n  function balanceOf(address _owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Retrieves the token ID at a specific index for a given owner.\\n   * @param _owner The address of the owner.\\n   * @param _index The index of the token ID in the owner's list.\\n   * @return The token ID at the specified index.\\n   */\\n  function ownerToNFTokenIdList(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\\n/// @title IAeroVoter Interface\\n/// @notice Interface for Aero Voter contract\\ninterface IAeroVoter {\\n  /**\\n   * @notice Returns the list of pools voted for by a specific token ID.\\n   * @param tokenId The ID of the token.\\n   * @return An array of addresses representing the pools voted for.\\n   */\\n  function poolVote(uint256 tokenId) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Retrieves the weight of a specific pool.\\n   * @param pool The address of the pool.\\n   * @return The weight of the pool.\\n   */\\n  function weights(address pool) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the number of votes a specific token ID has for a given pool.\\n   * @param tokenId The ID of the token.\\n   * @param pool The address of the pool.\\n   * @return The number of votes for the pool.\\n   */\\n  function votes(uint256 tokenId, address pool) external view returns (uint256);\\n}\\n\\ninterface IAddressesProvider {\\n  function getAddress(string calldata id) external view returns (address);\\n}\\n\\ninterface IMasterPriceOracle {\\n  function price(address underlying) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa5c71c00549a034b394fb6aa4a681453b219406ff77a184de3fbc667fd5709b3\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONFirstExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./IveIONStructsEnumsErrorsEvents.sol\\\";\\n\\n/// @title IveION Interface First Extensions\\n/// @notice Interface for veION contract\\ninterface IveIONFirstExtension is IveIONStructsEnumsErrorsEvents {\\n  /**\\n   * @notice Withdraws tokens associated with a specific token ID.\\n   * @param _tokenAddress The address of the token to withdraw.\\n   * @param _tokenId The ID of the token to withdraw.\\n   */\\n  function withdraw(address _tokenAddress, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Merges two token IDs into one.\\n   * @param _from The ID of the token to merge from.\\n   * @param _to The ID of the token to merge into.\\n   */\\n  function merge(uint256 _from, uint256 _to) external;\\n\\n  /**\\n   * @notice Splits a token into two separate tokens.\\n   * @param _tokenAddress The address of the token to split.\\n   * @param _from The ID of the token to split.\\n   * @param _splitAmount The amount to split from the original token.\\n   * @return _tokenId1 The ID of the first resulting token.\\n   * @return _tokenId2 The ID of the second resulting token.\\n   */\\n  function split(\\n    address _tokenAddress,\\n    uint256 _from,\\n    uint256 _splitAmount\\n  ) external returns (uint256 _tokenId1, uint256 _tokenId2);\\n\\n  /**\\n   * @notice Claims emissions for a specific token.\\n   * @param _tokenAddress The address of the token for which to claim emissions.\\n   */\\n  function claimEmissions(address _tokenAddress) external;\\n\\n  /**\\n   * @notice Allows or blocks delegators for a specific token ID.\\n   * @param _tokenId The ID of the token.\\n   * @param _tokenAddress The address of the token.\\n   * @param _blocked Boolean indicating if delegators are blocked.\\n   */\\n  function allowDelegators(uint256 _tokenId, address _tokenAddress, bool _blocked) external;\\n\\n  /**\\n   * @notice Retrieves the balance of a specific NFT.\\n   * @param _tokenId The ID of the NFT.\\n   * @return _assets An array of asset addresses.\\n   * @return _balances An array of balances for each asset.\\n   * @return _boosts An array of boost values for each asset.\\n   */\\n  function balanceOfNFT(\\n    uint256 _tokenId\\n  ) external view returns (address[] memory _assets, uint256[] memory _balances, uint256[] memory _boosts);\\n\\n  /**\\n   * @notice Retrieves the total ETH value of tokens owned by a specific address.\\n   * @param _owner The address of the owner.\\n   * @return totalValue The total ETH value of the tokens.\\n   */\\n  function getTotalEthValueOfTokens(address _owner) external view returns (uint256 totalValue);\\n}\\n\",\"keccak256\":\"0xc3281db97782ca5e75cab9d2ac6e0c9789a35403181438c8e065894f4e7be24f\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONSecondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./IveIONStructsEnumsErrorsEvents.sol\\\";\\n\\n/// @title IveION Interface Second Extension\\n/// @notice Interface for veION contract\\ninterface IveIONSecondExtension is IveIONStructsEnumsErrorsEvents {\\n  /**\\n   * @notice Whitelists or removes tokens from the whitelist.\\n   * @param _tokens An array of token addresses to be whitelisted or removed.\\n   * @param _isWhitelisted An array of booleans indicating the whitelist status for each token.\\n   */\\n  function whitelistTokens(address[] memory _tokens, bool[] memory _isWhitelisted) external;\\n\\n  /**\\n   * @notice Withdraws protocol fees for a specific token to a recipient address.\\n   * @param _tokenAddress The address of the token for which protocol fees are to be withdrawn.\\n   * @param _recipient The address to which the protocol fees will be sent.\\n   */\\n  function withdrawProtocolFees(address _tokenAddress, address _recipient) external;\\n\\n  /**\\n   * @notice Withdraws distributed fees for a specific token to a recipient address.\\n   * @param _tokenAddress The address of the token for which distributed fees are to be withdrawn.\\n   * @param _recipient The address to which the distributed fees will be sent.\\n   */\\n  function withdrawDistributedFees(address _tokenAddress, address _recipient) external;\\n\\n  /**\\n   * @notice Toggles the ability to split tokens for a specific account.\\n   * @param _account The address of the account.\\n   * @param _isAllowed Boolean indicating if splitting is allowed.\\n   */\\n  function toggleSplit(address _account, bool _isAllowed) external;\\n\\n  /**\\n   * @notice Toggles the limited boost feature.\\n   * @param _isBoosted Boolean indicating if the boost is active.\\n   */\\n  function toggleLimitedBoost(bool _isBoosted) external;\\n\\n  /**\\n   * @notice Sets the amount for a limited time boost.\\n   * @param _boostAmount The amount of the boost.\\n   */\\n  function setLimitedTimeBoost(uint256 _boostAmount) external;\\n\\n  /**\\n   * @notice Sets the address of the voter.\\n   * @param _voter The address of the voter.\\n   */\\n  function setVoter(address _voter) external;\\n\\n  /**\\n   * @notice Sets the minimum lock amount for a specific token.\\n   * @param _tokenAddress The address of the token.\\n   * @param _minimumAmount The minimum amount to lock.\\n   */\\n  function setMinimumLockAmount(address _tokenAddress, uint256 _minimumAmount) external;\\n\\n  /**\\n   * @notice Sets the minimum lock duration.\\n   * @param _minimumLockDuration The minimum duration for locking.\\n   */\\n  function setMinimumLockDuration(uint256 _minimumLockDuration) external;\\n\\n  /**\\n   * @notice Sets the address of the Ionic Pool.\\n   * @param _ionicPool The address of the Ionic Pool.\\n   */\\n  function setIonicPool(address _ionicPool) external;\\n\\n  /**\\n   * @notice Sets the address of the Aero Voting contract.\\n   * @param _aeroVoting The address of the Aero Voting contract.\\n   */\\n  function setAeroVoting(address _aeroVoting) external;\\n\\n  /**\\n   * @notice Sets the boost amount for Aero Voter.\\n   * @param _aeroVoterBoost The boost amount for Aero Voter.\\n   */\\n  function setAeroVoterBoost(uint256 _aeroVoterBoost) external;\\n\\n  /**\\n   * @notice Sets the maximum early withdrawal fee.\\n   * @param _maxEarlyWithdrawFee The maximum fee for early withdrawal.\\n   */\\n  function setMaxEarlyWithdrawFee(uint256 _maxEarlyWithdrawFee) external;\\n\\n  /**\\n   * @notice Sets the LP token type for a specific token.\\n   * @param _token The address of the token.\\n   * @param _type The LP token type.\\n   */\\n  function setLpTokenType(address _token, LpTokenType _type) external;\\n\\n  /**\\n   * @notice Sets the stake strategy for a specific LP token type.\\n   * @param _lpType The LP token type.\\n   * @param _strategy The stake strategy.\\n   */\\n  function setStakeStrategy(LpTokenType _lpType, IStakeStrategy _strategy) external;\\n\\n  /**\\n   * @notice Sets the address of the veAERO contract.\\n   * @param _veAERO The address of the veAERO contract.\\n   */\\n  function setVeAERO(address _veAERO) external;\\n\\n  /**\\n   * @notice Retrieves the lock information for a specific user.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @return A LockedBalance struct containing lock details.\\n   */\\n  function getUserLock(uint256 _tokenId, LpTokenType _lpType) external view returns (LockedBalance memory);\\n\\n  /**\\n   * @notice Retrieves the token IDs owned by a specific address.\\n   * @param _owner The address of the owner.\\n   * @return An array of token IDs owned by the address.\\n   */\\n  function getOwnedTokenIds(address _owner) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Retrieves the assets locked for a specific token ID.\\n   * @param _tokenId The ID of the token.\\n   * @return An array of addresses representing the locked assets.\\n   */\\n  function getAssetsLocked(uint256 _tokenId) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Retrieves the delegatees for a specific token ID and LP token type.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @return An array of delegatee IDs.\\n   */\\n  function getDelegatees(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Retrieves the delegators for a specific token ID and LP token type.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @return An array of delegator IDs.\\n   */\\n  function getDelegators(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Retrieves the user point for a specific token ID, LP token type, and epoch.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @param _epoch The epoch number.\\n   * @return A UserPoint struct containing user point details.\\n   */\\n  function getUserPoint(uint256 _tokenId, LpTokenType _lpType, uint256 _epoch) external view returns (UserPoint memory);\\n}\\n\",\"keccak256\":\"0x83039c6af4d8d701d98b54c76a8e6d3d2fdea11d75b741a52f2a821ae7694e9b\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONStructsEnumsErrorsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\ninterface IveIONStructsEnumsErrorsEvents {\\n  /**\\n   * @notice Structure representing a locked balance\\n   * @param tokenAddress Address of the token\\n   * @param amount Amount of tokens locked\\n   * @param delegateAmount Amount of tokens delegated\\n   * @param start Start time of the lock\\n   * @param end End time of the lock\\n   * @param isPermanent Indicates if the lock is permanent\\n   * @param boost Boost value for the lock\\n   */\\n  struct LockedBalance {\\n    address tokenAddress;\\n    uint256 amount;\\n    uint256 delegateAmount;\\n    uint256 start;\\n    uint256 end;\\n    bool isPermanent;\\n    uint256 boost;\\n  }\\n\\n  /**\\n   * @notice Structure representing a delegation\\n   * @param amount Amount of tokens delegated\\n   * @param delegatee ID of the delegatee\\n   */\\n  struct Delegation {\\n    uint256 amount;\\n    uint256 delegatee;\\n  }\\n\\n  /**\\n   * @notice Structure representing a user point\\n   * @param bias Bias value\\n   * @param slope Slope value, representing -dweight / dt\\n   * @param ts Timestamp of the point\\n   * @param blk Block number of the point\\n   * @param permanent Permanent value\\n   * @param permanentDelegate Permanent delegate value\\n   */\\n  struct UserPoint {\\n    uint256 bias;\\n    uint256 slope;\\n    uint256 ts;\\n    uint256 blk;\\n    uint256 permanent;\\n    uint256 permanentDelegate;\\n  }\\n\\n  /**\\n   * @notice Structure representing a global point\\n   * @param bias Bias value\\n   * @param slope Slope value, representing -dweight / dt\\n   * @param ts Timestamp of the point\\n   * @param blk Block number of the point\\n   * @param permanentLockBalance Permanent lock balance\\n   */\\n  struct GlobalPoint {\\n    int128 bias;\\n    int128 slope;\\n    uint256 ts;\\n    uint256 blk;\\n    uint256 permanentLockBalance;\\n  }\\n\\n  /**\\n   * @notice Structure representing a checkpoint\\n   * @param fromTimestamp Timestamp from which the checkpoint is valid\\n   * @param owner Address of the owner\\n   * @param delegatedBalance Balance that has been delegated\\n   * @param delegatee ID of the delegatee\\n   */\\n  struct Checkpoint {\\n    uint256 fromTimestamp;\\n    address owner;\\n    uint256 delegatedBalance;\\n    uint256 delegatee;\\n  }\\n\\n  /**\\n   * @notice Enum representing deposit types\\n   */\\n  enum DepositType {\\n    DEPOSIT_FOR_TYPE,\\n    CREATE_LOCK_TYPE,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_UNLOCK_TIME,\\n    LOCK_ADDITIONAL\\n  }\\n\\n  /**\\n   * @notice Enum representing LP token types\\n   */\\n  enum LpTokenType {\\n    Mode_Velodrome_5050_ION_MODE,\\n    Mode_Balancer_8020_ION_ETH,\\n    Base_Aerodrome_5050_ION_wstETH,\\n    Base_Balancer_8020_ION_ETH,\\n    Optimism_Velodrome_5050_ION_OP,\\n    Optimism_Balancer_8020_ION_ETH\\n  }\\n\\n  error LockDurationNotInFuture();\\n  error ZeroAmount();\\n  error LockDurationTooLong();\\n  error TokenNotWhitelisted();\\n  error NotOwner();\\n  error AlreadyVoted();\\n  error PermanentLock();\\n  error NoLockFound();\\n  error LockExpired();\\n  error SameNFT();\\n  error SplitNotAllowed();\\n  error AmountTooBig();\\n  error NotPermanentLock();\\n  error TokenHasDelegatees();\\n  error TokenHasDelegators();\\n  error NotVoter();\\n  error MinimumNotMet();\\n  error ArrayMismatch();\\n  error LockDurationTooShort();\\n  error DuplicateAsset();\\n  error SplitTooSmall();\\n  error NotEnoughRemainingAfterSplit();\\n  error NoDelegationBetweenTokens(uint256 _tokenId1, uint256 _tokenId2);\\n  error NoUnderlyingStake();\\n  error NotAcceptingDelegators();\\n  error BoostAmountMustBeGreaterThanZero();\\n  error InvalidAddress();\\n  error MinimumAmountMustBeGreaterThanZero();\\n  error MinimumLockDurationMustBeGreaterThanZero();\\n  error AeroBoostAmountMustBeGreaterThanZero();\\n  error MaxEarlyWithdrawFeeMustBeGreaterThanZero();\\n  error InvalidTokenAddress();\\n  error InvalidStrategyAddress();\\n  error InvalidVeAEROAddress();\\n\\n  event Deposit(\\n    address indexed provider,\\n    uint256 indexed tokenId,\\n    DepositType indexed depositType,\\n    uint256 value,\\n    uint256 locktime,\\n    uint256 ts\\n  );\\n  event Withdraw(address indexed provider, uint256 indexed tokenId, uint256 value, uint256 ts);\\n  event Supply(uint256 prevSupply, uint256 supply);\\n  event Delegated(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\n  event DelegationRemoved(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\n  event ProtocolFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\n  event DistributedFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\n  event SplitToggle(address indexed account, bool isAllowed);\\n  event LimitedBoostToggled(bool isBoosted);\\n  event LimitedTimeBoostSet(uint256 boostAmount);\\n  event VoterSet(address indexed newVoter);\\n  event AeroVotingSet(address indexed newAeroVoting);\\n  event AeroVoterBoostSet(uint256 newAeroVoterBoost);\\n  event TokensWhitelisted(address[] token, bool[] isWhitelisted);\\n  event LpTokenTypeSet(address indexed token, LpTokenType lpTokenType);\\n  event VeAEROSet(address indexed veAERO);\\n  event StakeStrategySet(LpTokenType indexed lpTokenType, address indexed strategy);\\n  event MinimumLockAmountSet(address indexed tokenAddress, uint256 minimumAmount);\\n  event MinimumLockDurationSet(uint256 minimumDuration);\\n  event IonicPoolSet(address indexed newIonicPool);\\n  event SplitCompleted(\\n    uint256 indexed fromTokenId,\\n    uint256 indexed tokenId1,\\n    uint256 indexed tokenId2,\\n    uint256 splitAmount,\\n    address tokenAddress\\n  );\\n  event MergeCompleted(\\n    uint256 indexed fromTokenId,\\n    uint256 indexed toTokenId,\\n    address[] assetsLocked,\\n    uint256 lengthOfAssets\\n  );\\n  event EmissionsClaimed(address indexed claimant, address indexed tokenAddress);\\n  event MaxEarlyWithdrawFeeSet(uint256 maxEarlyWithdrawFee);\\n  event PermanentLockCreated(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n  event PermanentLockRemoved(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n  event Voted(uint256 _tokenId, bool _voting);\\n  event DelegatorsBlocked(uint256 indexed _tokenId, address indexed _lpToken, bool _blocked);\\n  event Initialized(address indexed addressesProvider);\\n  event ExtensionsSet(address indexed _firstExtension, address indexed _secondExtension);\\n}\\n\",\"keccak256\":\"0x5d61a2f9ccb98d8fdb42ce6a96531f7cad4da402e8cef8c6dad7f69c45ab242e\",\"license\":\"UNLICENSED\"},\"contracts/veION/libraries/IonicTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nlibrary IonicTimeLibrary {\\n  uint256 internal constant _WEEK = 7 days;\\n\\n  /// @dev Returns start of epoch based on current timestamp\\n  function epochStart(uint256 timestamp) internal pure returns (uint256) {\\n    unchecked {\\n      return timestamp - (timestamp % _WEEK);\\n    }\\n  }\\n\\n  /// @dev Returns start of next epoch / end of current epoch\\n  function epochNext(uint256 timestamp) internal pure returns (uint256) {\\n    unchecked {\\n      return timestamp - (timestamp % _WEEK) + _WEEK;\\n    }\\n  }\\n\\n  /// @dev Returns start of voting window\\n  function epochVoteStart(uint256 timestamp) internal pure returns (uint256) {\\n    unchecked {\\n      return timestamp - (timestamp % _WEEK) + 1 hours;\\n    }\\n  }\\n\\n  /// @dev Returns end of voting window / beginning of unrestricted voting window\\n  function epochVoteEnd(uint256 timestamp) internal pure returns (uint256) {\\n    unchecked {\\n      return timestamp - (timestamp % _WEEK) + _WEEK - 12 hours;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x99dd07407c942b54423f54b3941ae06e7518917bd01287a1a3ac37a0fe1bd72a\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/IStakeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IStakeStrategy\\n * @notice Interface for the VeloIonModeStakingModeReward contract.\\n */\\ninterface IStakeStrategy {\\n  /// @notice Emitted when the contract is initialized\\n  event Initialized(\\n    address indexed escrow,\\n    address indexed stakingToken,\\n    address indexed stakingContract,\\n    address stakingWalletImplementation\\n  );\\n\\n  /// @notice Emitted when tokens are staked\\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\\n\\n  /// @notice Emitted when rewards are claimed\\n  event Claimed(address indexed from, address indexed veloWallet);\\n\\n  /// @notice Emitted when tokens are withdrawn\\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\\n\\n  /// @notice Emitted when staking wallet is transferred\\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice Emitted when escrow is set\\n  event EscrowSet(address indexed newEscrow);\\n\\n  /// @notice Emitted when staking token is set\\n  event StakingTokenSet(address indexed newStakingToken);\\n\\n  /// @notice Emitted when staking contract is set\\n  event StakingContractSet(address indexed newStakingContract);\\n\\n  /// @notice Emitted when upgradeable beacon is set\\n  event UpgradeableBeaconSet(address indexed newBeacon);\\n\\n  /**\\n   * @notice Stakes a specified amount of tokens from a given address.\\n   * @param _from The address from which tokens will be staked.\\n   * @param _amount The amount of tokens to stake.\\n   * @param _data Additional data that might be needed for staking.\\n   */\\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\\n\\n  /**\\n   * @notice Claims rewards for a given address.\\n   * @param _from The address for which to claim rewards.\\n   */\\n  function claim(address _from) external;\\n\\n  /**\\n   * @notice Withdraws a specified amount of tokens for a given address.\\n   * @param _owner The address from which tokens will be withdrawn.\\n   * @param _amount The amount of tokens to withdraw.\\n   */\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\\n\\n  /**\\n   * @notice Returns the current reward rate for the staking strategy.\\n   * @return The reward rate as a uint256.\\n   */\\n  function rewardRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the period finish time for the staking strategy.\\n   * @return The period finish time as a uint256.\\n   */\\n  function periodFinish() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the balance of a specific address.\\n   * @param account The address to query the balance of.\\n   * @return The balance as a uint256.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total supply of staked tokens.\\n   * @return The total supply as a uint256.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the reward token for the staking strategy.\\n   * @return The address of the reward token.\\n   */\\n  function rewardToken() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the staking contract.\\n   * @return The address of the staking contract.\\n   */\\n  function stakingContract() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the staking token.\\n   * @return The address of the staking token.\\n   */\\n  function stakingToken() external view returns (address);\\n\\n  /**\\n   * @notice Returns the staking wallet address for a specific user.\\n   * @param user The address of the user.\\n   * @return The address of the user's staking wallet.\\n   */\\n  function userStakingWallet(address user) external view returns (address);\\n\\n  /**\\n   * @notice Transfers the staking wallet from one user to another.\\n   * @param from The current owner of the staking wallet.\\n   * @param to The new owner of the staking wallet.\\n   */\\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\\n\\n  /**\\n   * @notice Sets the escrow address.\\n   * @param _escrow The address of the new escrow.\\n   */\\n  function setEscrow(address _escrow) external;\\n\\n  /**\\n   * @notice Sets the staking token address.\\n   * @param _stakingToken The address of the new staking token.\\n   */\\n  function setStakingToken(address _stakingToken) external;\\n\\n  /**\\n   * @notice Sets the staking contract address.\\n   * @param _stakingContract The address of the new staking contract.\\n   */\\n  function setStakingContract(address _stakingContract) external;\\n\\n  /**\\n   * @notice Sets the address of the  beacon.\\n   * @param _beacon The address of the new beacon contract.\\n   */\\n  function setUpgradeableBeacon(address _beacon) external;\\n}\\n\",\"keccak256\":\"0xfb173875a979116e52d450310c4f05e1cc6a9bd07a6b667fe02e75d71b55f73c\",\"license\":\"UNLICENSED\"},\"solmate/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n\\n    constructor(address _owner, Authority _authority) {\\n        owner = _owner;\\n        authority = _authority;\\n\\n        emit OwnerUpdated(msg.sender, _owner);\\n        emit AuthorityUpdated(msg.sender, _authority);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd5cf8213a40d727af89c93dd359ad68984c123c1a1a93fc9ad7ba62b3436fb75\",\"license\":\"AGPL-3.0-only\"},\"solmate/auth/authorities/RolesAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {Auth, Authority} from \\\"../Auth.sol\\\";\\n\\n/// @notice Role based Authority that supports up to 256 roles.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\\ncontract RolesAuthority is Auth, Authority {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\\n\\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\\n\\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ROLE/USER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => bytes32) public getUserRoles;\\n\\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\\n\\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\\n\\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\\n    }\\n\\n    function doesRoleHaveCapability(\\n        uint8 role,\\n        address target,\\n        bytes4 functionSig\\n    ) public view virtual returns (bool) {\\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           AUTHORIZATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) public view virtual override returns (bool) {\\n        return\\n            isCapabilityPublic[target][functionSig] ||\\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                   ROLE CAPABILITY CONFIGURATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setPublicCapability(\\n        address target,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        isCapabilityPublic[target][functionSig] = enabled;\\n\\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\\n    }\\n\\n    function setRoleCapability(\\n        uint8 role,\\n        address target,\\n        bytes4 functionSig,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        if (enabled) {\\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\\n        } else {\\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\\n        }\\n\\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                       USER ROLE ASSIGNMENT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setUserRole(\\n        address user,\\n        uint8 role,\\n        bool enabled\\n    ) public virtual requiresAuth {\\n        if (enabled) {\\n            getUserRoles[user] |= bytes32(1 << role);\\n        } else {\\n            getUserRoles[user] &= ~bytes32(1 << role);\\n        }\\n\\n        emit UserRoleUpdated(user, role, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x278247a2c5b0accb60af8d3749e34ab5d4436ee4f35a8fff301aaa25ab690762\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6148d080620000f46000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80637dc5421a11610167578063ce62db09116100ce578063e34e8fd011610087578063e34e8fd0146106be578063e8b3fd57146106d1578063ebb1d413146106da578063f2fde38b146106fa578063f3594be01461070d578063faeb7bd51461072d57600080fd5b8063ce62db0914610631578063d46005b114610651578063d4e2616f14610664578063d58b15d414610687578063e2819d5c1461069a578063e30c3978146106ad57600080fd5b8063ab37f48611610120578063ab37f486146105a1578063b1283e77146105c4578063bd31251f146105e5578063c42cf535146105f8578063c975fec41461060b578063caa5c5d41461061e57600080fd5b80637dc5421a14610515578063880e36fc1461054f5780638da5cb5b146105625780639fdc1c7e14610573578063a540254414610586578063aa9354a31461058e57600080fd5b806332145f901161020b5780636eb172e3116101c45780636eb172e3146104c45780636f4a2cd0146104d75780636f59dd8f146104df578063715018a6146104f25780637715ee75146104fa57806379ba50971461050d57600080fd5b806332145f901461042f57806339e9f3b6146104425780633d3b6f351461045557806352ed72c31461046857806366a5e7e21461049c5780636e13fffe146104af57600080fd5b80631f8507161161025d5780631f8507161461039257806324f52f4f146103a5578063290a9127146103b85780632935df9e146103e957806330331b2f14610409578063310bd74b1461041c57600080fd5b806304d5a8cf146102a557806309b7617b146102eb5780630c340a24146103245780630ffb1d8b146103375780631703e5f91461034c5780631bb5e2dc1461037f575b600080fd5b6102ce6102b3366004613abb565b60d1602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103166102f9366004613ad8565b60d760209081526000928352604080842090915290825290205481565b6040519081526020016102e2565b60cb546102ce906001600160a01b031681565b61034a610345366004613b16565b610767565b005b61036f61035a366004613abb565b60db6020526000908152604090205460ff1681565b60405190151581526020016102e2565b6102ce61038d366004613b44565b6107a0565b60c9546102ce906001600160a01b031681565b61034a6103b3366004613ba8565b6107ca565b6103166103c6366004613c55565b60d260209081526000938452604080852082529284528284209052825290205481565b6103fc6103f7366004613ad8565b610a07565b6040516102e29190613d4a565b61034a610417366004613b44565b610d65565b61034a61042a366004613b44565b610e07565b61034a61043d366004613b44565b610f63565b610316610450366004613b44565b6110be565b60cc546102ce906001600160a01b031681565b6102ce610476366004613ded565b60dc6020908152600092835260408084209091529082529020546001600160a01b031681565b6102ce6104aa366004613e22565b6110d1565b6104b7611116565b6040516102e29190613e94565b61034a6104d2366004613ea7565b611178565b61034a6112e2565b61034a6104ed366004613ffc565b611517565b61034a6115ca565b61034a610508366004614030565b6115de565b61034a611758565b61031661052336600461410c565b60d360209081526000948552604080862082529385528385208152918452828420909152825290205481565b61031661055d366004613b44565b6117cf565b6033546001600160a01b03166102ce565b61034a61058136600461415d565b6117e0565b60d054610316565b61031661059c366004613b44565b611c37565b61036f6105af366004613abb565b60d96020526000908152604090205460ff1681565b6105d76105d2366004613b44565b611c46565b6040516102e2929190614200565b61034a6105f3366004613abb565b611c7b565b61034a610606366004613abb565b611cf4565b61034a61061936600461421d565b611d6d565b61034a61062c366004614288565b611eaf565b61064461063f366004613e22565b611f21565b6040516102e291906142a5565b61034a61065f3660046142b3565b611f71565b61036f610672366004613b44565b60da6020526000908152604090205460ff1681565b610316610695366004613b44565b612181565b61034a6106a836600461432f565b612195565b6065546001600160a01b03166102ce565b61034a6106cc366004614354565b61220e565b61031660cf5481565b6103166106e8366004613abb565b60ce6020526000908152604090205481565b61034a610708366004613abb565b61233b565b61031661071b366004613b44565b60d86020526000908152604090205481565b61031661073b36600461410c565b60d460209081526000948552604080862082529385528385208152918452828420909152825290205481565b60cb546001600160a01b0316331461079257604051633b8d9d7560e21b815260040160405180910390fd5b61079c82826123ac565b5050565b60cd81815481106107b057600080fd5b6000918252602090912001546001600160a01b0316905081565b60cb546001600160a01b031633146107f557604051633b8d9d7560e21b815260040160405180910390fd5b8483811461081657604051632b477e7160e11b815260040160405180910390fd5b81811461083657604051632b477e7160e11b815260040160405180910390fd5b60005b8181101561098d5783838281811061085357610853614392565b90506020020160208101906108689190613abb565b60dc60008a8a8581811061087e5761087e614392565b90506020020160208101906108939190613abb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008888858181106108c7576108c7614392565b90506020020160208101906108dc91906143a8565b60018111156108ed576108ed613c9e565b60018111156108fe576108fe613c9e565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160db600086868581811061094857610948614392565b905060200201602081019061095d9190613abb565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610839565b50828260405161099e9291906143c3565b604051809103902085856040516109b6929190614405565b604051809103902088886040516109ce9291906143c3565b604051908190038120907fff4266c7dba361bc4ce6e86cc8fd87b2d5e94e60527231375cc8fb565f8b32b290600090a450505050505050565b610a326040518060800160405280606081526020016060815260200160608152602001600081525090565b600083815260d5602090815260408083206001600160a01b038616845290915281205490816001600160401b03811115610a6e57610a6e613f1b565b604051908082528060200260200182016040528015610a97578160200160208202803683370190505b5090506000826001600160401b03811115610ab457610ab4613f1b565b604051908082528060200260200182016040528015610add578160200160208202803683370190505b5090506000836001600160401b03811115610afa57610afa613f1b565b604051908082528060200260200182016040528015610b23578160200160208202803683370190505b50905060005b84811015610d1c57600088815260d5602090815260408083206001600160a01b038b1684529091529020805482908110610b6557610b65614392565b9060005260206000200160009054906101000a90046001600160a01b0316848281518110610b9557610b95614392565b6001600160a01b0392831660209182029290920181019190915260008a815260d682526040808220938b1682529290915220805482908110610bd957610bd9614392565b90600052602060002090602091828204019190069054906101000a900460ff16838281518110610c0b57610c0b614392565b60200260200101906001811115610c2457610c24613c9e565b90816001811115610c3757610c37613c9e565b905250600088815260d3602052604081208551909190869084908110610c5f57610c5f614392565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000848381518110610c9b57610c9b614392565b60200260200101516001811115610cb457610cb4613c9e565b6001811115610cc557610cc5613c9e565b81526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110610d0957610d09614392565b6020908102919091010152600101610b29565b50600087815260d7602090815260408083206001600160a01b038a1684528252918290205482516080810184529586529085019390935283015260608201529150505b92915050565b60cb546001600160a01b03163314610d9057604051633b8d9d7560e21b815260040160405180910390fd5b600a811015610db257604051632db4ddc160e11b815260040160405180910390fd5b60cf548103610dd45760405163c23f6ccb60e01b815260040160405180910390fd5b60cf81905560405181907f570570b221cb14706e1bd90180bd79e47d0375cf953ccd13f34fcaa1073646d190600090a250565b610e0f612403565b600081815260d860205260409020548190610e2f4262093a808106900390565b11610e4d5760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e10014211610e7a57604051635a780bad60e01b815260040160405180910390fd5b60c9546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e90602401602060405180830381865afa158015610ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee79190614438565b6001600160a01b031614610f0e576040516330cd747160e01b815260040160405180910390fd5b60005b60cd54811015610f5457610f4c8360cd8381548110610f3257610f32614392565b6000918252602090912001546001600160a01b031661245c565b600101610f11565b5050610f606001609755565b50565b610f6b612403565b62093a80429081069003610e10014211610f9857604051635a780bad60e01b815260040160405180910390fd5b60c9546040516339f890b560e21b815260048101839052600091829182916001600160a01b03169063e7e242d490602401600060405180830381865afa158015610fe6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261100e91908101906144b4565b92509250925060005b83518110156110b0576000670de0b6b3a764000083838151811061103d5761103d614392565b602002602001015185848151811061105757611057614392565b602002602001015161106991906145b2565b61107391906145c9565b90506110a78660cd848154811061108c5761108c614392565b6000918252602090912001546001600160a01b031683612902565b50600101611017565b50505050610f606001609755565b600062093a8082068203610e1001610d5f565b60d560205282600052604060002060205281600052604060002081815481106110f957600080fd5b6000918252602090912001546001600160a01b0316925083915050565b606060cd80548060200260200160405190810160405280929190818152602001828054801561116e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611150575b5050505050905090565b60cb546001600160a01b031633146111a357604051633b8d9d7560e21b815260040160405180910390fd5b60005b818110156112a45760008383838181106111c2576111c2614392565b9050604002018036038101906111d891906145eb565b90506111ec81600001518260200151612bb6565b1561120a57604051630313b28560e01b815260040160405180910390fd5b60d080546001808201835560009290925282517fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb90910180546001600160a01b031981166001600160a01b039093169283178255602085015185949293909284926001600160a81b03191690911790600160a01b90849081111561129057611290613c9e565b021790555050600190920191506111a69050565b507f5577e527c22d6c9a43929d204c9bfc33fa089326ce69b3ca9f8cc52caf1cb33282826040516112d6929190614647565b60405180910390a15050565b60cb546001600160a01b0316331461130d57604051633b8d9d7560e21b815260040160405180910390fd5b60dd5460ff16801561132d575062093a80429081069003620891c0014211155b1561134b576040516355bf6a7160e01b815260040160405180910390fd5b60ca546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b891906146b0565b905060006113c4612c71565b905060005b60d05481101561151257600061143260d083815481106113eb576113eb614392565b60009182526020909120015460d080546001600160a01b03909216918590811061141757611417614392565b600091825260209091200154600160a01b900460ff16612cdc565b905080156115095761150960dc600060d0858154811061145457611454614392565b60009182526020808320909101546001600160a01b03168352820192909252604001812060d080549192918690811061148f5761148f614392565b600091825260209091200154600160a01b900460ff1660018111156114b6576114b6613c9e565b60018111156114c7576114c7613c9e565b81526020810191909152604001600020546001600160a01b0316846114ec84886145b2565b6114f691906145c9565b60ca546001600160a01b03169190612dc8565b506001016113c9565b505050565b61151f612e1a565b80516000036115755760405162461bcd60e51b815260206004820152601e60248201527f4c70546f6b656e732061727261792063616e6e6f7420626520656d707479000060448201526064015b60405180910390fd5b80516115889060cd9060208401906139ed565b508060405161159791906146c9565b604051908190038120907f46475a5acc517188c629ae24ba62499dcb1de5aed40b269f5d0ab378fc3d447790600090a250565b6115d2612e1a565b6115dc6000612e74565b565b6115e6612403565b81518351146116085760405163332ac86360e21b815260040160405180910390fd5b3360c9546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190614438565b6001600160a01b0316146116a1576040516330cd747160e01b815260040160405180910390fd5b825160005b8181101561174c578481815181106116c0576116c0614392565b60200260200101516001600160a01b031663f5f8d365848684815181106116e9576116e9614392565b60200260200101516040518363ffffffff1660e01b815260040161170e929190614708565b600060405180830381600087803b15801561172857600080fd5b505af115801561173c573d6000803e3d6000fd5b5050600190920191506116a69050565b50506115126001609755565b60655433906001600160a01b031681146117c65760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161156c565b610f6081612e74565b600062093a80808306830301610d5f565b6117e8612403565b600087815260d8602052604090205487906118084262093a808106900390565b116118265760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e1001421161185357604051635a780bad60e01b815260040160405180910390fd5b61188e6040518060a0016040528060006001600160a01b03168152602001600081526020016060815260200160608152602001606081525090565b3380825260c9546040516331a9108f60e11b8152600481018c90526001600160a01b0390911690636352211e90602401602060405180830381865afa1580156118db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ff9190614438565b6001600160a01b031614611926576040516330cd747160e01b815260040160405180910390fd5b86851415806119355750848314155b806119405750828714155b1561195e5760405163332ac86360e21b815260040160405180910390fd5b60cf548711156119815760405163ebcfae4b60e01b815260040160405180910390fd5b4260208201819052620891c062093a8082068203011080156119b25750600089815260da602052604090205460ff16155b156119d057604051630392978d60e41b815260040160405180910390fd5b6000805b88811015611a0a578585828181106119ee576119ee614392565b9050602002013582611a009190614721565b91506001016119d4565b5060005b60cd54811015611a3757611a2f8b60cd8381548110610f3257610f32614392565b600101611a0e565b5060208281015160008c815260d89092526040918290205560c95490516339f890b560e21b8152600481018c90526001600160a01b039091169063e7e242d490602401600060405180830381865afa158015611a97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611abf91908101906144b4565b60808501526060840152604083015260005b826040015151811015611c2057611c188b84604001518381518110611af857611af8614392565b6020026020010151670de0b6b3a764000086608001518581518110611b1f57611b1f614392565b602002602001015187606001518681518110611b3d57611b3d614392565b6020026020010151611b4f91906145b2565b611b5991906145c9565b8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508b9250612e8d915050565b600101611ad1565b50505050611c2e6001609755565b50505050505050565b600062093a8082068203610d5f565b60d08181548110611c5657600080fd5b6000918252602090912001546001600160a01b0381169150600160a01b900460ff1682565b611c83612e1a565b6001600160a01b038116611caa5760405163d92e233d60e01b815260040160405180910390fd5b60cc80546001600160a01b0319166001600160a01b0383169081179091556040517f676e14d1d2e92c005e4dcfbba61af630b9ca19e16f69be0371d88b368f2b2cb390600090a250565b611cfc612e1a565b6001600160a01b038116611d235760405163d92e233d60e01b815260040160405180910390fd5b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517f1cbb37f5a02c38ab13773cb770fae505cce417a4d81560117389e3a9f7e001f290600090a250565b60cb546001600160a01b03163314611d9857604051633b8d9d7560e21b815260040160405180910390fd5b80838114611db957604051632b477e7160e11b815260040160405180910390fd5b60005b81811015611e4f57838382818110611dd657611dd6614392565b9050602002016020810190611deb9190613abb565b60d16000888885818110611e0157611e01614392565b9050602002016020810190611e169190613abb565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b03191692909116919091179055600101611dbc565b508282604051611e609291906143c3565b60405180910390208585604051611e789291906143c3565b604051908190038120907f3cbe37144c7485400be82bfd3641a31b2f85267b60edcf9ef2ec012b5c4eef4890600090a35050505050565b60cb546001600160a01b03163314611eda57604051633b8d9d7560e21b815260040160405180910390fd5b60dd805460ff19168215159081179091556040519081527f6efa5ade2635e3df319c8c9b1b674023447896f669114b6191c2a96b1659d34d9060200160405180910390a150565b60d66020528260005260406000206020528160005260406000208181548110611f4957600080fd5b906000526020600020906020918282040191900692509250509054906101000a900460ff1681565b600054610100900460ff1615808015611f915750600054600160ff909116105b80611fab5750303b158015611fab575060005460ff166001145b61200e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161156c565b6000805460ff191660011790558015612031576000805461ff0019166101001790555b6120396135f7565b612041613626565b84600081900361206357604051620d28ef60eb1b815260040160405180910390fd5b60005b818110156120a75761209f88888381811061208357612083614392565b90506020020160208101906120989190613abb565b60016123ac565b600101612066565b5060cc80546001600160a01b03199081166001600160a01b038881169190911790925560ca8054821687841617905560c9805482169286169290921790915560cb8054339216821790556040517f4a3eb0674631610761ddae0e34a5390318f5ec24f3b1ef5ea015f4dff914e4c99161212a918a918a918a918a918a9190614734565b60405180910390a1508015612179576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b600062093a8082068203620891c001610d5f565b60cb546001600160a01b031633146121c057604051633b8d9d7560e21b815260040160405180910390fd5b600082815260da6020526040808220805460ff191684151590811790915590513392859184917f8a6ff732c8641e1e34d771e1f8b1673e988c1abdfb694ebdf6c910a5e3d0d85391a4505050565b60cb546001600160a01b0316331461223957604051633b8d9d7560e21b815260040160405180910390fd5b6001600160a01b038316600090815260dc602052604081208184600181111561226457612264613c9e565b600181111561227557612275613c9e565b81526020810191909152604001600020546001600160a01b03169050806122ba576040516323b5f32160e21b81526001600160a01b038516600482015260240161156c565b6001600160a01b038116600090815260db60205260409020805460ff19168315151790558260018111156122f0576122f0613c9e565b846001600160a01b03167f1e5b8e1351cfab07ad44bc6532bf1bb2dccdddc5bbda4d8109aa55064e63d0fb8460405161232d911515815260200190565b60405180910390a350505050565b612343612e1a565b606580546001600160a01b0383166001600160a01b031990911681179091556123746033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6001600160a01b038216600081815260d96020526040808220805460ff1916851515908117909155905190929133917f44948130cf88523dbc150908a47dd6332c33a01a3869d7f2fa78e51d5a5f9c579190a45050565b6002609754036124555760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161156c565b6002609755565b600082815260d5602090815260408083206001600160a01b03851680855290835281842086855260d6845282852091855292528220815491929091905b818110156128215760008482815481106124b5576124b5614392565b600091825260208220015485546001600160a01b0390911692508590849081106124e1576124e1614392565b6000918252602080832081830401548b845260d3825260408085206001600160a01b0388168652909252908320601f9092166101000a900460ff1692508183600181111561253157612531613c9e565b600181111561254257612542613c9e565b8152602080820192909252604090810160009081206001600160a01b038c16825290925290205490508015612816576001600160a01b038316600090815260d260205260408120829184600181111561259d5761259d613c9e565b60018111156125ae576125ae613c9e565b815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546125ee91906147ac565b9091555050600089815260d3602090815260408083206001600160a01b038716845290915281209083600181111561262857612628613c9e565b600181111561263957612639613c9e565b8152602080820192909252604090810160009081206001600160a01b03808d1683529084528282208290558616815260dc909252812060d191908185600181111561268657612686613c9e565b600181111561269757612697613c9e565b815260208082019290925260409081016000908120546001600160a01b03908116855292840194909452918201909220549051635ae2fb3960e11b81528a8316600482015260248101849052604481018c905291169063b5c5f67290606401600060405180830381600087803b15801561271057600080fd5b505af1158015612724573d6000803e3d6000fd5b505050506001600160a01b038816600090815260ce6020526040812080548392906127509084906147ac565b90915550506001600160a01b038316600081815260d2602052604081208b929133917fadab630928b1d46214641293704a312ee7ad87e03ae14a7fd95e7308b93998df918691908860018111156127a9576127a9613c9e565b60018111156127ba576127ba613c9e565b815260200190815260200160002060008e6001600160a01b03166001600160a01b03168152602001908152602001600020544260405161280d939291909283526020830191909152604082015260600190565b60405180910390a45b505050600101612499565b50600085815260d7602090815260408083206001600160a01b03881680855290835281842084905588845260d58352818420908452909152812061286491613a52565b600085815260d6602090815260408083206001600160a01b0388168452909152812061288f91613a70565b60c954604051632d27a2cd60e11b815260048101879052600060248201526001600160a01b0390911690635a4f459a90604401600060405180830381600087803b1580156128dc57600080fd5b505af11580156128f0573d6000803e3d6000fd5b505050505050505050565b6001609755565b600083815260d5602090815260408083206001600160a01b038616845282528083208054825181850281018501909352808352919290919083018282801561297357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612955575b505050600087815260d6602090815260408083206001600160a01b038a168452825280832080548251818502810185019093528083529697509295909450919250830182828015612a1357602002820191906000526020600020906000905b82829054906101000a900460ff1660018111156129f1576129f1613c9e565b8152602060019283018181049485019490930390920291018084116129d25790505b505050505090506000825190506000816001600160401b03811115612a3a57612a3a613f1b565b604051908082528060200260200182016040528015612a63578160200160208202803683370190505b5090506000805b83811015612b565760d460008a81526020019081526020016000206000878381518110612a9957612a99614392565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000868381518110612ad557612ad5614392565b60200260200101516001811115612aee57612aee613c9e565b6001811115612aff57612aff613c9e565b81526020019081526020016000206000896001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110612b4357612b43614392565b6020908102919091010152600101612a6a565b5060005b8551811015612b9257828181518110612b7557612b75614392565b602002602001015182612b889190614721565b9150600101612b5a565b50612b9d888861245c565b612bac88888888888787612e8d565b5050505050505050565b60d054600090815b81811015612c6657846001600160a01b031660d08281548110612be357612be3614392565b6000918252602090912001546001600160a01b0316148015612c4e5750836001811115612c1257612c12613c9e565b60d08281548110612c2557612c25614392565b600091825260209091200154600160a01b900460ff166001811115612c4c57612c4c613c9e565b145b15612c5e57600192505050610d5f565b600101612bbe565b506000949350505050565b60d054600090815b81811015612cd757612cc360d08281548110612c9757612c97614392565b60009182526020909120015460d080546001600160a01b03909216918490811061141757611417614392565b612ccd9084614721565b9250600101612c79565b505090565b60cd54600090815b81811015612dc0576001600160a01b038516600090815260d26020526040812081866001811115612d1757612d17613c9e565b6001811115612d2857612d28613c9e565b8152602001908152602001600020600060cd8481548110612d4b57612d4b614392565b60009182526020808320909101546001600160a01b0316835282019290925260400181205460cd8054919350612da89184919086908110612d8e57612d8e614392565b6000918252602090912001546001600160a01b0316613655565b9050612db48186614721565b94505050600101612ce4565b505092915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526115129084906136de565b6033546001600160a01b031633146115dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161156c565b606580546001600160a01b0319169055610f60816137b0565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152845160005b8181101561352c57868181518110612ee557612ee5614392565b60209081029190910101516001600160a01b031660408401528551869082908110612f1257612f12614392565b602002602001015183606001906001811115612f3057612f30613c9e565b90816001811115612f4357612f43613c9e565b9052506040808401516001600160a01b0316600090815260dc60205290812060608501519091906001811115612f7b57612f7b613c9e565b6001811115612f8c57612f8c613c9e565b815260208082019290925260409081016000908120546001600160a01b0390811660808801819052825260d190935220541660c08401528451859082908110612fd757612fd7614392565b6020026020010151600003612fff576040516319a2a9bd60e01b815260040160405180910390fd5b60808301516001600160a01b031661303b5760408084015190516323b5f32160e21b81526001600160a01b03909116600482015260240161156c565b60808301516001600160a01b0316600090815260db602052604090205460ff16613089576080830151604051635daa415360e01b81526001600160a01b03909116600482015260240161156c565b838886838151811061309d5761309d614392565b60200260200101516130af91906145b2565b6130b991906145c9565b60a084015260008a815260d360209081526040808320818701516001600160a01b031684529091528120606085015190919060018111156130fc576130fc613c9e565b600181111561310d5761310d613c9e565b8152602080820192909252604090810160009081206001600160a01b038d168252909252902054156131525760405163315f6a3d60e01b815260040160405180910390fd5b60008a815260d5602090815260408083206001600160a01b038d8116808652918452828520888401518154600180820184559288528688200180546001600160a01b03191691909316179091558e855260d684528285209185529083529083206060870151815480840183559185529383902092810490920180549092601f166101000a60ff8102199091169184908111156131f0576131f0613c9e565b021790555060a08301516040808501516001600160a01b0316600090815260d26020529081206060860151909190600181111561322f5761322f613c9e565b600181111561324057613240613c9e565b815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546132809190614721565b909155505060a083015160008b815260d360209081526040808320818801516001600160a01b031684529091528120606086015190919060018111156132c8576132c8613c9e565b60018111156132d9576132d9613c9e565b815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546133199190614721565b9250508190555084818151811061333257613332614392565b60209081029190910181015160008c815260d483526040808220878201516001600160a01b03168352909352918220606086015191929091600181111561337b5761337b613c9e565b600181111561338c5761338c613c9e565b8152602080820192909252604090810160009081206001600160a01b038e811680845291909452908290209390935560c086015160a08701519151630efe6a8b60e01b815260048101949094526024840191909152604483018d90521690630efe6a8b90606401600060405180830381600087803b15801561340d57600080fd5b505af1158015613421573d6000803e3d6000fd5b505050508260a001518360200181815161343b9190614721565b90525060a083015183518490613452908390614721565b90525060408084015160a08501516001600160a01b03909116600081815260d260205292832060608701518e94929333937f452d440efc30dfa14a0ef803ccb55936af860ec6a6960ed27f129bef913f296a93919260018111156134b8576134b8613c9e565b60018111156134c9576134c9613c9e565b815260200190815260200160002060008f6001600160a01b03166001600160a01b03168152602001908152602001600020544260405161351c939291909283526020830191909152604082015260600190565b60405180910390a4600101612ecb565b5060c954604051632d27a2cd60e11b8152600481018b9052600160248201526001600160a01b0390911690635a4f459a90604401600060405180830381600087803b15801561357a57600080fd5b505af115801561358e573d6000803e3d6000fd5b505083516001600160a01b038b16600090815260ce6020526040812080549294509250906135bd908490614721565b909155505050602090810151600098895260d782526040808a206001600160a01b039099168a529790915295909620949094555050505050565b600054610100900460ff1661361e5760405162461bcd60e51b815260040161156c906147bf565b6115dc613802565b600054610100900460ff1661364d5760405162461bcd60e51b815260040161156c906147bf565b6115dc613832565b60cc546040516315d5220f60e31b81526001600160a01b038381166004830152600092839291169063aea9107890602401602060405180830381865afa1580156136a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c791906146b0565b905060006136d582866145b2565b95945050505050565b6000613733826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138599092919063ffffffff16565b8051909150156115125780806020019051810190613751919061480a565b6115125760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161156c565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166138295760405162461bcd60e51b815260040161156c906147bf565b6115dc33612e74565b600054610100900460ff166128fb5760405162461bcd60e51b815260040161156c906147bf565b60606138688484600085613872565b90505b9392505050565b6060824710156138d35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161156c565b600080866001600160a01b031685876040516138ef919061484b565b60006040518083038185875af1925050503d806000811461392c576040519150601f19603f3d011682016040523d82523d6000602084013e613931565b606091505b50915091506139428783838761394f565b925050505b949350505050565b606083156139be5782516000036139b7576001600160a01b0385163b6139b75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161156c565b5081613947565b61394783838151156139d35781518083602001fd5b8060405162461bcd60e51b815260040161156c9190614867565b828054828255906000526020600020908101928215613a42579160200282015b82811115613a4257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613a0d565b50613a4e929150613a91565b5090565b5080546000825590600052602060002090810190610f609190613a91565b50805460008255601f016020900490600052602060002090810190610f6091905b5b80821115613a4e5760008155600101613a92565b6001600160a01b0381168114610f6057600080fd5b600060208284031215613acd57600080fd5b813561386b81613aa6565b60008060408385031215613aeb57600080fd5b823591506020830135613afd81613aa6565b809150509250929050565b8015158114610f6057600080fd5b60008060408385031215613b2957600080fd5b8235613b3481613aa6565b91506020830135613afd81613b08565b600060208284031215613b5657600080fd5b5035919050565b60008083601f840112613b6f57600080fd5b5081356001600160401b03811115613b8657600080fd5b6020830191508360208260051b8501011115613ba157600080fd5b9250929050565b60008060008060008060608789031215613bc157600080fd5b86356001600160401b0380821115613bd857600080fd5b613be48a838b01613b5d565b90985096506020890135915080821115613bfd57600080fd5b613c098a838b01613b5d565b90965094506040890135915080821115613c2257600080fd5b50613c2f89828a01613b5d565b979a9699509497509295939492505050565b803560028110613c5057600080fd5b919050565b600080600060608486031215613c6a57600080fd5b8335613c7581613aa6565b9250613c8360208501613c41565b91506040840135613c9381613aa6565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60028110613cd257634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452602080850194506020840160005b83811015613d0e57613cfe878351613cb4565b9582019590820190600101613ceb565b509495945050505050565b60008151808452602080850194506020840160005b83811015613d0e57815187529582019590820190600101613d2e565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b80831015613d985783516001600160a01b03168252928401926001929092019190840190613d6f565b50838701519350601f19925082868203016040870152613db88185613cd6565b93505050604085015181858403016060860152613dd58382613d19565b92505050606084015160808401528091505092915050565b60008060408385031215613e0057600080fd5b8235613e0b81613aa6565b9150613e1960208401613c41565b90509250929050565b600080600060608486031215613e3757600080fd5b833592506020840135613e4981613aa6565b929592945050506040919091013590565b60008151808452602080850194506020840160005b83811015613d0e5781516001600160a01b031687529582019590820190600101613e6f565b60208152600061386b6020830184613e5a565b60008060208385031215613eba57600080fd5b82356001600160401b0380821115613ed157600080fd5b818501915085601f830112613ee557600080fd5b813581811115613ef457600080fd5b8660208260061b8501011115613f0957600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613f5957613f59613f1b565b604052919050565b60006001600160401b03821115613f7a57613f7a613f1b565b5060051b60200190565b600082601f830112613f9557600080fd5b81356020613faa613fa583613f61565b613f31565b8083825260208201915060208460051b870101935086841115613fcc57600080fd5b602086015b84811015613ff1578035613fe481613aa6565b8352918301918301613fd1565b509695505050505050565b60006020828403121561400e57600080fd5b81356001600160401b0381111561402457600080fd5b61394784828501613f84565b60008060006060848603121561404557600080fd5b83356001600160401b038082111561405c57600080fd5b61406887838801613f84565b945060209150818601358181111561407f57600080fd5b8601601f8101881361409057600080fd5b803561409e613fa582613f61565b81815260059190911b8201840190848101908a8311156140bd57600080fd5b8584015b838110156140f5578035868111156140d95760008081fd5b6140e78d8983890101613f84565b8452509186019186016140c1565b50979a979950505050604095909501359450505050565b6000806000806080858703121561412257600080fd5b84359350602085013561413481613aa6565b925061414260408601613c41565b9150606085013561415281613aa6565b939692955090935050565b60008060008060008060006080888a03121561417857600080fd5b8735965060208801356001600160401b038082111561419657600080fd5b6141a28b838c01613b5d565b909850965060408a01359150808211156141bb57600080fd5b6141c78b838c01613b5d565b909650945060608a01359150808211156141e057600080fd5b506141ed8a828b01613b5d565b989b979a50959850939692959293505050565b6001600160a01b03831681526040810161386b6020830184613cb4565b6000806000806040858703121561423357600080fd5b84356001600160401b038082111561424a57600080fd5b61425688838901613b5d565b9096509450602087013591508082111561426f57600080fd5b5061427c87828801613b5d565b95989497509550505050565b60006020828403121561429a57600080fd5b813561386b81613b08565b60208101610d5f8284613cb4565b6000806000806000608086880312156142cb57600080fd5b85356001600160401b038111156142e157600080fd5b6142ed88828901613b5d565b909650945050602086013561430181613aa6565b9250604086013561431181613aa6565b9150606086013561432181613aa6565b809150509295509295909350565b6000806040838503121561434257600080fd5b823591506020830135613afd81613b08565b60008060006060848603121561436957600080fd5b833561437481613aa6565b925061438260208501613c41565b91506040840135613c9381613b08565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156143ba57600080fd5b61386b82613c41565b60008184825b858110156143fa5781356143dc81613aa6565b6001600160a01b0316835260209283019291909101906001016143c9565b509095945050505050565b60008184825b858110156143fa576144258361442084613c41565b613cb4565b602092830192919091019060010161440b565b60006020828403121561444a57600080fd5b815161386b81613aa6565b600082601f83011261446657600080fd5b81516020614476613fa583613f61565b8083825260208201915060208460051b87010193508684111561449857600080fd5b602086015b84811015613ff1578051835291830191830161449d565b6000806000606084860312156144c957600080fd5b83516001600160401b03808211156144e057600080fd5b818601915086601f8301126144f457600080fd5b81516020614504613fa583613f61565b82815260059290921b8401810191818101908a84111561452357600080fd5b948201945b8386101561454a57855161453b81613aa6565b82529482019490820190614528565b9189015191975090935050508082111561456357600080fd5b61456f87838801614455565b9350604086015191508082111561458557600080fd5b5061459286828701614455565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d5f57610d5f61459c565b6000826145e657634e487b7160e01b600052601260045260246000fd5b500490565b6000604082840312156145fd57600080fd5b604051604081018181106001600160401b038211171561461f5761461f613f1b565b604052823561462d81613aa6565b815261463b60208401613c41565b60208201529392505050565b6020808252818101839052600090604080840186845b878110156146a357813561467081613aa6565b6001600160a01b03168352614686828601613c41565b61469286850182613cb4565b50918301919083019060010161465d565b5090979650505050505050565b6000602082840312156146c257600080fd5b5051919050565b815160009082906020808601845b838110156146fc5781516001600160a01b0316855293820193908201906001016146d7565b50929695505050505050565b8281526040602082015260006138686040830184613e5a565b80820180821115610d5f57610d5f61459c565b60a0808252810186905260008760c08301825b8981101561477757823561475a81613aa6565b6001600160a01b0316825260209283019290910190600101614747565b506001600160a01b03978816602085015295871660408401525050918416606083015290921660809092019190915292915050565b81810381811115610d5f57610d5f61459c565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561481c57600080fd5b815161386b81613b08565b60005b8381101561484257818101518382015260200161482a565b50506000910152565b6000825161485d818460208701614827565b9190910192915050565b6020815260008251806020840152614886816040850160208701614827565b601f01601f1916919091016040019291505056fea2646970667358221220fe31f4a977552692e97c914c78ad4fdcd75b7ab141658f9ff751b2bdffba00a864736f6c63430008160033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)",
    "events": {
      "Abstained(address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "pool": "Address of the pool.",
          "timestamp": "Timestamp of the vote.",
          "tokenId": "ID of the token.",
          "totalWeight": "Total weight of the vote.",
          "voter": "Address of the voter.",
          "weight": "Weight of the vote."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NotifyReward(address,address,uint256)": {
        "params": {
          "amount": "Amount of the reward.",
          "reward": "Address of the reward.",
          "sender": "Address of the sender."
        }
      },
      "Voted(address,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "pool": "Address of the pool.",
          "timestamp": "Timestamp of the vote.",
          "tokenId": "ID of the token.",
          "totalWeight": "Total weight of the vote.",
          "voter": "Address of the voter.",
          "weight": "Weight of the vote."
        }
      },
      "WhitelistNFT(address,uint256,bool)": {
        "params": {
          "_bool": "Boolean indicating whitelist status.",
          "tokenId": "ID of the token.",
          "whitelister": "Address of the whitelister."
        }
      },
      "WhitelistToken(address,address,bool)": {
        "params": {
          "_bool": "Boolean indicating whitelist status.",
          "token": "Address of the token.",
          "whitelister": "Address of the whitelister."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addMarkets((address,uint8)[])": {
        "params": {
          "_markets": "Array of Market structs to be added."
        }
      },
      "claimBribes(address[],address[][],uint256)": {
        "details": "Utility to help batch bribe claims.",
        "params": {
          "_bribes": "Array of BribeVotingReward contracts to collect from.",
          "_tokenId": "ID of veNFT that you wish to claim bribes for.",
          "_tokens": "Array of tokens that are used as bribes."
        }
      },
      "epochNext(uint256)": {
        "params": {
          "_timestamp": "The timestamp to calculate the next epoch for."
        },
        "returns": {
          "_0": "The next epoch."
        }
      },
      "epochStart(uint256)": {
        "params": {
          "_timestamp": "The timestamp to calculate the epoch start for."
        },
        "returns": {
          "_0": "The start of the epoch."
        }
      },
      "epochVoteEnd(uint256)": {
        "params": {
          "_timestamp": "The timestamp to calculate the voting end for."
        },
        "returns": {
          "_0": "The end of the voting period."
        }
      },
      "epochVoteStart(uint256)": {
        "params": {
          "_timestamp": "The timestamp to calculate the voting start for."
        },
        "returns": {
          "_0": "The start of the voting period."
        }
      },
      "getAllLpRewardTokens()": {
        "returns": {
          "_0": "An array of addresses representing all LP reward tokens."
        }
      },
      "getVoteDetails(uint256,address)": {
        "params": {
          "_lpAsset": "The address of the LP asset.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "A struct containing vote details."
        }
      },
      "initialize(address[],address,address,address)": {
        "custom:reverts": "TokensArrayEmpty if the _tokens array is empty.",
        "details": "Requires initialization with at least one reward token.",
        "params": {
          "_mpo": "The MasterPriceOracle contract address.",
          "_rewardToken": "The address of the reward token.",
          "_tokens": "An array of token addresses to be whitelisted.",
          "_ve": "The address of the veION contract."
        }
      },
      "marketsLength()": {
        "returns": {
          "_0": "The number of markets."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "poke(uint256)": {
        "params": {
          "_tokenId": "ID of veNFT whose balance you wish to update."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reset(uint256)": {
        "details": "Cannot reset in the same epoch that you voted in.      Can vote or deposit into a managed NFT again after reset.",
        "params": {
          "_tokenId": "ID of veNFT that you are resetting."
        }
      },
      "setBribes(address[],address[])": {
        "params": {
          "_bribes": "Array of bribe addresses.",
          "_rewardAccumulators": "Array of reward accumulator addresses."
        }
      },
      "setGovernor(address)": {
        "params": {
          "_governor": "Address of the new governor."
        }
      },
      "setLpTokens(address[])": {
        "params": {
          "_lpTokens": "Array of LP token addresses."
        }
      },
      "setMarketRewardAccumulators(address[],uint8[],address[])": {
        "params": {
          "_marketSides": "Array of market sides.",
          "_markets": "Array of market addresses.",
          "_rewardAccumulators": "Array of reward accumulator addresses."
        }
      },
      "setMaxVotingNum(uint256)": {
        "params": {
          "_maxVotingNum": "Maximum number of votes allowed."
        }
      },
      "setMpo(address)": {
        "params": {
          "_mpo": "Address of the Master Price Oracle."
        }
      },
      "toggleDistributionTimelockAlive(bool)": {
        "params": {
          "_isAlive": "Boolean indicating if the timelock is alive."
        }
      },
      "toggleRewardAccumulatorAlive(address,uint8,bool)": {
        "params": {
          "_isAlive": "Boolean indicating if the reward accumulator is alive.",
          "_market": "Address of the market.",
          "_marketSide": "Side of the market."
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "vote(uint256,address[],uint8[],uint256[])": {
        "details": "Can only vote or deposit into a managed NFT once per epoch.      Can only vote for gauges that have not been killed.      Throws if length of _poolVote and _weights do not match.",
        "params": {
          "_marketVoteSide": "Array of market vote sides you are voting for.",
          "_poolVote": "Array of pools you are voting for.",
          "_tokenId": "ID of veNFT you are voting with.",
          "_weights": "Weights of pools."
        }
      },
      "whitelistNFT(uint256,bool)": {
        "details": "Throws if not called by governor.      Throws if already whitelisted.",
        "params": {
          "_bool": "Boolean indicating whitelist status.",
          "_tokenId": "ID of the token."
        }
      },
      "whitelistToken(address,bool)": {
        "details": "Throws if not called by governor.",
        "params": {
          "_bool": "Boolean indicating whitelist status.",
          "_token": "Address of the token."
        }
      }
    },
    "title": "Voter Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyVotedOrDeposited()": [
        {
          "notice": "Error thrown when a user has already voted or deposited."
        }
      ],
      "DistributeWindow()": [
        {
          "notice": "Error thrown when an action is attempted outside the distribution window."
        }
      ],
      "MarketAlreadyExists()": [
        {
          "notice": "Error thrown when a market already exists."
        }
      ],
      "MaximumVotingNumberTooLow()": [
        {
          "notice": "Error thrown when the maximum voting number is too low."
        }
      ],
      "MismatchedArrayLengths()": [
        {
          "notice": "Error thrown when array lengths do not match."
        }
      ],
      "NonZeroVotes()": [
        {
          "notice": "Error thrown when there are non-zero votes."
        }
      ],
      "NotDistributeWindow()": [
        {
          "notice": "Error thrown when an action is attempted outside the distribution window."
        }
      ],
      "NotGovernor()": [
        {
          "notice": "Error thrown when the caller is not the governor."
        }
      ],
      "NotOwner()": [
        {
          "notice": "Error thrown when the caller is not the owner."
        }
      ],
      "NotWhitelistedNFT()": [
        {
          "notice": "Error thrown when an NFT is not whitelisted."
        }
      ],
      "RewardAccumulatorDoesNotExist(address)": [
        {
          "notice": "Error thrown when a reward accumulator does not exist for a given pool."
        }
      ],
      "RewardAccumulatorNotAlive(address)": [
        {
          "notice": "Error thrown when a reward accumulator is not alive."
        }
      ],
      "SameValue()": [
        {
          "notice": "Error thrown when the same value is provided."
        }
      ],
      "TokensArrayEmpty()": [
        {
          "notice": "Error thrown when the tokens array is empty."
        }
      ],
      "TooManyPools()": [
        {
          "notice": "Error thrown when there are too many pools."
        }
      ],
      "UnequalLengths()": [
        {
          "notice": "Error thrown when array lengths are unequal."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Error thrown when an address is zero."
        }
      ],
      "ZeroWeight()": [
        {
          "notice": "Error thrown when the weight is zero."
        }
      ]
    },
    "events": {
      "Abstained(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when a vote is abstained."
      },
      "NotifyReward(address,address,uint256)": {
        "notice": "Event emitted when a reward is notified."
      },
      "Voted(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when a vote is cast."
      },
      "WhitelistNFT(address,uint256,bool)": {
        "notice": "Event emitted when an NFT is whitelisted."
      },
      "WhitelistToken(address,address,bool)": {
        "notice": "Event emitted when a token is whitelisted."
      }
    },
    "kind": "user",
    "methods": {
      "addMarkets((address,uint8)[])": {
        "notice": "Add new markets."
      },
      "baseWeights(uint256,address,uint8,address)": {
        "notice": "Mapping from NFT to Pool to LP Asset to Base Weights"
      },
      "claimBribes(address[],address[][],uint256)": {
        "notice": "Claim bribes for a given NFT."
      },
      "distributeRewards()": {
        "notice": "Distributes rewards to eligible markets."
      },
      "epochNext(uint256)": {
        "notice": "Get the next epoch for a given timestamp."
      },
      "epochStart(uint256)": {
        "notice": "Get the start of the epoch for a given timestamp."
      },
      "epochVoteEnd(uint256)": {
        "notice": "Get the end of the voting period for a given timestamp."
      },
      "epochVoteStart(uint256)": {
        "notice": "Get the start of the voting period for a given timestamp."
      },
      "getAllLpRewardTokens()": {
        "notice": "Get all LP reward tokens."
      },
      "getVoteDetails(uint256,address)": {
        "notice": "Get vote details for a specific token ID and LP asset."
      },
      "governor()": {
        "notice": "Standard OZ IGovernor using ve for vote weights"
      },
      "initialize(address[],address,address,address)": {
        "notice": "Initializes the Voter contract with the specified parameters."
      },
      "isAlive(address)": {
        "notice": "Mapping from Reward Accumulator to Liveness status"
      },
      "isWhitelistedNFT(uint256)": {
        "notice": "Mapping from TokenId to Whitelisted status"
      },
      "isWhitelistedToken(address)": {
        "notice": "Mapping from Token to Whitelisted status"
      },
      "lastVoted(uint256)": {
        "notice": "Mapping from NFT to Timestamp of last vote (ensures single vote per epoch)"
      },
      "lpTokens(uint256)": {
        "notice": "List of LP tokens"
      },
      "marketToRewardAccumulators(address,uint8)": {
        "notice": "Mapping from Market to Market Side to Reward Accumulator"
      },
      "marketVote(uint256,address,uint256)": {
        "notice": "Mapping from NFT to List of markets voted for by NFT"
      },
      "marketVoteSide(uint256,address,uint256)": {
        "notice": "Mapping from NFT to List of market vote sides voted for by NFT"
      },
      "markets(uint256)": {
        "notice": "All markets viable for incentives"
      },
      "marketsLength()": {
        "notice": "Get the number of markets."
      },
      "maxVotingNum()": {
        "notice": "Maximum number of markets one voter can vote for at once"
      },
      "mpo()": {
        "notice": "Master Price Oracle instance"
      },
      "poke(uint256)": {
        "notice": "Update voting balances in voting rewards contracts."
      },
      "reset(uint256)": {
        "notice": "Reset voting state. Required if you wish to make changes to veNFT state."
      },
      "rewardAccumulatorToBribe(address)": {
        "notice": "Mapping from Reward Accumulator to Bribes Voting Reward"
      },
      "setBribes(address[],address[])": {
        "notice": "Set bribes for reward accumulators."
      },
      "setGovernor(address)": {
        "notice": "Set a new governor."
      },
      "setLpTokens(address[])": {
        "notice": "Set the LP tokens."
      },
      "setMarketRewardAccumulators(address[],uint8[],address[])": {
        "notice": "Set reward accumulators for markets."
      },
      "setMaxVotingNum(uint256)": {
        "notice": "Set the maximum number of votes."
      },
      "setMpo(address)": {
        "notice": "Set the Master Price Oracle (MPO) address."
      },
      "toggleDistributionTimelockAlive(bool)": {
        "notice": "Toggle the alive status of a timelock on distributing rewards."
      },
      "toggleRewardAccumulatorAlive(address,uint8,bool)": {
        "notice": "Toggle the alive status of a reward accumulator."
      },
      "totalWeight(address)": {
        "notice": "Total Voting Weights for each address"
      },
      "usedWeights(uint256,address)": {
        "notice": "Mapping from NFT to Total voting weight of NFT"
      },
      "ve()": {
        "notice": "The ve token that governs these contracts"
      },
      "vote(uint256,address[],uint8[],uint256[])": {
        "notice": "Vote for pools. Votes distributed proportionally based on weights."
      },
      "votes(uint256,address,uint8,address)": {
        "notice": "Mapping from NFT to Pool to LP Asset to Votes"
      },
      "weights(address,uint8,address)": {
        "notice": "Mapping from Market to Market Side to LP Asset to weights"
      },
      "whitelistNFT(uint256,bool)": {
        "notice": "Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip."
      },
      "whitelistToken(address,bool)": {
        "notice": "Whitelist (or unwhitelist) token for use in bribes."
      }
    },
    "notice": "This contract allows veION holders to vote for various markets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2341,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 27300,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "ve",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 27303,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "rewardToken",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 27306,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "governor",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 27310,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "mpo",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(MasterPriceOracle)20751"
      },
      {
        "astId": 27314,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "lpTokens",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 27319,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "totalWeight",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27322,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "maxVotingNum",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 27331,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "markets",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_struct(Market)30366_storage)dyn_storage"
      },
      {
        "astId": 27336,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "rewardAccumulatorToBribe",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 27346,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "weights",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_mapping(t_enum(MarketSide)30402,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 27358,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "votes",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_enum(MarketSide)30402,t_mapping(t_address,t_uint256))))"
      },
      {
        "astId": 27370,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "baseWeights",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_enum(MarketSide)30402,t_mapping(t_address,t_uint256))))"
      },
      {
        "astId": 27378,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "marketVote",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 27387,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "marketVoteSide",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_array(t_enum(MarketSide)30402)dyn_storage))"
      },
      {
        "astId": 27394,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "usedWeights",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 27399,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "lastVoted",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 27404,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "isWhitelistedToken",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 27409,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "isWhitelistedNFT",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 27414,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "isAlive",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 27422,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "marketToRewardAccumulators",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_mapping(t_enum(MarketSide)30402,t_address))"
      },
      {
        "astId": 27424,
        "contract": "contracts/veION/Voter.sol:Voter",
        "label": "distributionTimelockAlive",
        "offset": 0,
        "slot": "221",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(MarketSide)30402)dyn_storage": {
        "base": "t_enum(MarketSide)30402",
        "encoding": "dynamic_array",
        "label": "enum IVoter.MarketSide[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Market)30366_storage)dyn_storage": {
        "base": "t_struct(Market)30366_storage",
        "encoding": "dynamic_array",
        "label": "struct IVoter.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MasterPriceOracle)20751": {
        "encoding": "inplace",
        "label": "contract MasterPriceOracle",
        "numberOfBytes": "20"
      },
      "t_enum(MarketSide)30402": {
        "encoding": "inplace",
        "label": "enum IVoter.MarketSide",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_enum(MarketSide)30402)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IVoter.MarketSide[])",
        "numberOfBytes": "32",
        "value": "t_array(t_enum(MarketSide)30402)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_enum(MarketSide)30402,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum IVoter.MarketSide => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(MarketSide)30402,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_enum(MarketSide)30402,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum IVoter.MarketSide => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(MarketSide)30402,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(MarketSide)30402,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(MarketSide)30402",
        "label": "mapping(enum IVoter.MarketSide => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_enum(MarketSide)30402,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(MarketSide)30402",
        "label": "mapping(enum IVoter.MarketSide => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_array(t_enum(MarketSide)30402)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => enum IVoter.MarketSide[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_enum(MarketSide)30402)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_enum(MarketSide)30402,t_mapping(t_address,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(enum IVoter.MarketSide => mapping(address => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_enum(MarketSide)30402,t_mapping(t_address,t_uint256)))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Market)30366_storage": {
        "encoding": "inplace",
        "label": "struct IVoter.Market",
        "members": [
          {
            "astId": 30362,
            "contract": "contracts/veION/Voter.sol:Voter",
            "label": "marketAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 30365,
            "contract": "contracts/veION/Voter.sol:Voter",
            "label": "side",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(MarketSide)30402"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}