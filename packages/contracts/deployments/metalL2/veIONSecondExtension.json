{
  "address": "0xb6c55DF813C38635665151eE504837E1316f3654",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AeroBoostAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BoostAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStrategyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVeAEROAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationNotInFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxEarlyWithdrawFeeMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumLockDurationMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumNotMet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId2",
          "type": "uint256"
        }
      ],
      "name": "NoDelegationBetweenTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLockFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoUnderlyingStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAcceptingDelegators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughRemainingAfterSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVoter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasDelegatees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasDelegators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAeroVoterBoost",
          "type": "uint256"
        }
      ],
      "name": "AeroVoterBoostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAeroVoting",
          "type": "address"
        }
      ],
      "name": "AeroVotingSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelegationRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_blocked",
          "type": "bool"
        }
      ],
      "name": "DelegatorsBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.DepositType",
          "name": "depositType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "EmissionsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_firstExtension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_secondExtension",
          "type": "address"
        }
      ],
      "name": "ExtensionsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressesProvider",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newIonicPool",
          "type": "address"
        }
      ],
      "name": "IonicPoolSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBoosted",
          "type": "bool"
        }
      ],
      "name": "LimitedBoostToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boostAmount",
          "type": "uint256"
        }
      ],
      "name": "LimitedTimeBoostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "lpTokenType",
          "type": "uint8"
        }
      ],
      "name": "LpTokenTypeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxEarlyWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "MaxEarlyWithdrawFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetsLocked",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lengthOfAssets",
          "type": "uint256"
        }
      ],
      "name": "MergeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "MinimumLockAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDuration",
          "type": "uint256"
        }
      ],
      "name": "MinimumLockDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PermanentLockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PermanentLockRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "splitAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "SplitCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "SplitToggle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "lpTokenType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StakeStrategySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "isWhitelisted",
          "type": "bool[]"
        }
      ],
      "name": "TokensWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "veAERO",
          "type": "address"
        }
      ],
      "name": "VeAEROSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_voting",
          "type": "bool"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newVoter",
          "type": "address"
        }
      ],
      "name": "VoterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ap",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAssetsLocked",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        }
      ],
      "name": "getDelegatees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        }
      ],
      "name": "getDelegators",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnedTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        }
      ],
      "name": "getUserLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegateAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPermanent",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IveIONStructsEnumsErrorsEvents.LockedBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "getUserPoint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bias",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blk",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "permanent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "permanentDelegate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IveIONStructsEnumsErrorsEvents.UserPoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_aeroVoterBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_aeroVoting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_canSplit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_delegations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_delegatorsBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_distributedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_ionicPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_limitedBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_limitedBoostActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_locked",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delegateAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPermanent",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_lpType",
      "outputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_maxEarlyWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_minimumLockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_minimumLockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_permanentLockBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_protocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_stakeStrategy",
      "outputs": [
        {
          "internalType": "contract IStakeStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_underlyingStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userCumulativeAssetValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_userPointHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bias",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slope",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permanent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permanentDelegate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_veAERO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_voted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_whitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aeroVoterBoost",
          "type": "uint256"
        }
      ],
      "name": "setAeroVoterBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aeroVoting",
          "type": "address"
        }
      ],
      "name": "setAeroVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ionicPool",
          "type": "address"
        }
      ],
      "name": "setIonicPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boostAmount",
          "type": "uint256"
        }
      ],
      "name": "setLimitedTimeBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "setLpTokenType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxEarlyWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "setMaxEarlyWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumLockAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumLockDuration",
          "type": "uint256"
        }
      ],
      "name": "setMinimumLockDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        },
        {
          "internalType": "contract IStakeStrategy",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStakeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veAERO",
          "type": "address"
        }
      ],
      "name": "setVeAERO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "setVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isBoosted",
          "type": "bool"
        }
      ],
      "name": "toggleLimitedBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAllowed",
          "type": "bool"
        }
      ],
      "name": "toggleSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veIONFirstExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veIONSecondExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_isWhitelisted",
          "type": "bool[]"
        }
      ],
      "name": "whitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "withdrawDistributedFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x722ed893f8d7e5e78a0ec722b972134e0987cdd2bf21ff697ecb8061e4067bd6",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0xb6c55DF813C38635665151eE504837E1316f3654",
    "transactionIndex": 1,
    "gasUsed": "2765606",
    "logsBloom": "0x
    "blockHash": "0x7273b4135170a051942fca7f4915be503f67ae0e3c0dd3685f901ee80f668588",
    "transactionHash": "0x722ed893f8d7e5e78a0ec722b972134e0987cdd2bf21ff697ecb8061e4067bd6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15628281,
        "transactionHash": "0x722ed893f8d7e5e78a0ec722b972134e0987cdd2bf21ff697ecb8061e4067bd6",
        "address": "0xb6c55DF813C38635665151eE504837E1316f3654",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x7273b4135170a051942fca7f4915be503f67ae0e3c0dd3685f901ee80f668588"
      }
    ],
    "blockNumber": 15628281,
    "cumulativeGasUsed": "2809421",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e80c3ac672326d6dc8195bcd28be67f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AeroBoostAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoostAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVeAEROAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationNotInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxEarlyWithdrawFeeMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumLockDurationMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"}],\"name\":\"NoDelegationBetweenTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLockFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoUnderlyingStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAcceptingDelegators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughRemainingAfterSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasDelegatees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasDelegators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAeroVoterBoost\",\"type\":\"uint256\"}],\"name\":\"AeroVoterBoostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAeroVoting\",\"type\":\"address\"}],\"name\":\"AeroVotingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_blocked\",\"type\":\"bool\"}],\"name\":\"DelegatorsBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.DepositType\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EmissionsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstExtension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_secondExtension\",\"type\":\"address\"}],\"name\":\"ExtensionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIonicPool\",\"type\":\"address\"}],\"name\":\"IonicPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBoosted\",\"type\":\"bool\"}],\"name\":\"LimitedBoostToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostAmount\",\"type\":\"uint256\"}],\"name\":\"LimitedTimeBoostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"lpTokenType\",\"type\":\"uint8\"}],\"name\":\"LpTokenTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEarlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"MaxEarlyWithdrawFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetsLocked\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lengthOfAssets\",\"type\":\"uint256\"}],\"name\":\"MergeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"MinimumLockAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDuration\",\"type\":\"uint256\"}],\"name\":\"MinimumLockDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PermanentLockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PermanentLockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"splitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"SplitCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"SplitToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"lpTokenType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StakeStrategySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"isWhitelisted\",\"type\":\"bool[]\"}],\"name\":\"TokensWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"veAERO\",\"type\":\"address\"}],\"name\":\"VeAEROSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_voting\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVoter\",\"type\":\"address\"}],\"name\":\"VoterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ap\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetsLocked\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"}],\"name\":\"getDelegatees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"}],\"name\":\"getDelegators\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"}],\"name\":\"getUserLock\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IveIONStructsEnumsErrorsEvents.LockedBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getUserPoint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanentDelegate\",\"type\":\"uint256\"}],\"internalType\":\"struct IveIONStructsEnumsErrorsEvents.UserPoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_aeroVoterBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_aeroVoting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_canSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_delegations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_delegatorsBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_distributedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_ionicPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_limitedBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_limitedBoostActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_locked\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_lpType\",\"outputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_maxEarlyWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_minimumLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_minimumLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_permanentLockBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_stakeStrategy\",\"outputs\":[{\"internalType\":\"contract IStakeStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_underlyingStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userCumulativeAssetValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_userPointHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanentDelegate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_veAERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_whitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aeroVoterBoost\",\"type\":\"uint256\"}],\"name\":\"setAeroVoterBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aeroVoting\",\"type\":\"address\"}],\"name\":\"setAeroVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ionicPool\",\"type\":\"address\"}],\"name\":\"setIonicPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boostAmount\",\"type\":\"uint256\"}],\"name\":\"setLimitedTimeBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setLpTokenType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxEarlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setMaxEarlyWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumLockDuration\",\"type\":\"uint256\"}],\"name\":\"setMinimumLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"},{\"internalType\":\"contract IStakeStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStakeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veAERO\",\"type\":\"address\"}],\"name\":\"setVeAERO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBoosted\",\"type\":\"bool\"}],\"name\":\"toggleLimitedBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"toggleSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veIONFirstExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veIONSecondExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isWhitelisted\",\"type\":\"bool[]\"}],\"name\":\"whitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawDistributedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getAssetsLocked(uint256)\":{\"params\":{\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"An array of addresses representing the locked assets.\"}},\"getDelegatees(uint256,uint8)\":{\"params\":{\"_lpType\":\"The LP token type.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"An array of delegatee IDs.\"}},\"getDelegators(uint256,uint8)\":{\"params\":{\"_lpType\":\"The LP token type.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"An array of delegator IDs.\"}},\"getOwnedTokenIds(address)\":{\"params\":{\"_owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"An array of token IDs owned by the address.\"}},\"getUserLock(uint256,uint8)\":{\"params\":{\"_lpType\":\"The LP token type.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"A LockedBalance struct containing lock details.\"}},\"getUserPoint(uint256,uint8,uint256)\":{\"params\":{\"_epoch\":\"The epoch number.\",\"_lpType\":\"The LP token type.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"A UserPoint struct containing user point details.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAeroVoterBoost(uint256)\":{\"params\":{\"_aeroVoterBoost\":\"The boost amount for Aero Voter.\"}},\"setAeroVoting(address)\":{\"params\":{\"_aeroVoting\":\"The address of the Aero Voting contract.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setIonicPool(address)\":{\"params\":{\"_ionicPool\":\"The address of the Ionic Pool.\"}},\"setLimitedTimeBoost(uint256)\":{\"params\":{\"_boostAmount\":\"The amount of the boost.\"}},\"setLpTokenType(address,uint8)\":{\"params\":{\"_token\":\"The address of the token.\",\"_type\":\"The LP token type.\"}},\"setMaxEarlyWithdrawFee(uint256)\":{\"params\":{\"_maxEarlyWithdrawFee\":\"The maximum fee for early withdrawal.\"}},\"setMinimumLockAmount(address,uint256)\":{\"params\":{\"_minimumAmount\":\"The minimum amount to lock.\",\"_tokenAddress\":\"The address of the token.\"}},\"setMinimumLockDuration(uint256)\":{\"params\":{\"_minimumLockDuration\":\"The minimum duration for locking.\"}},\"setStakeStrategy(uint8,address)\":{\"params\":{\"_lpType\":\"The LP token type.\",\"_strategy\":\"The stake strategy.\"}},\"setVeAERO(address)\":{\"params\":{\"_veAERO\":\"The address of the veAERO contract.\"}},\"setVoter(address)\":{\"params\":{\"_voter\":\"The address of the voter.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"toggleLimitedBoost(bool)\":{\"params\":{\"_isBoosted\":\"Boolean indicating if the boost is active.\"}},\"toggleSplit(address,bool)\":{\"params\":{\"_account\":\"The address of the account.\",\"_isAllowed\":\"Boolean indicating if splitting is allowed.\"}},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"whitelistTokens(address[],bool[])\":{\"params\":{\"_isWhitelisted\":\"An array of booleans indicating the whitelist status for each token.\",\"_tokens\":\"An array of token addresses to be whitelisted or removed.\"}},\"withdrawDistributedFees(address,address)\":{\"params\":{\"_recipient\":\"The address to which the distributed fees will be sent.\",\"_tokenAddress\":\"The address of the token for which distributed fees are to be withdrawn.\"}},\"withdrawProtocolFees(address,address)\":{\"params\":{\"_recipient\":\"The address to which the protocol fees will be sent.\",\"_tokenAddress\":\"The address of the token for which protocol fees are to be withdrawn.\"}}},\"title\":\"veION Contract Second Extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PRECISION()\":{\"notice\":\"Precision used for calculations, set to 1e18.\"},\"ap()\":{\"notice\":\"The AddressesProvider contract used for address management.\"},\"getAssetsLocked(uint256)\":{\"notice\":\"Retrieves the assets locked for a specific token ID.\"},\"getDelegatees(uint256,uint8)\":{\"notice\":\"Retrieves the delegatees for a specific token ID and LP token type.\"},\"getDelegators(uint256,uint8)\":{\"notice\":\"Retrieves the delegators for a specific token ID and LP token type.\"},\"getOwnedTokenIds(address)\":{\"notice\":\"Retrieves the token IDs owned by a specific address.\"},\"getUserLock(uint256,uint8)\":{\"notice\":\"Retrieves the lock information for a specific user.\"},\"getUserPoint(uint256,uint8,uint256)\":{\"notice\":\"Retrieves the user point for a specific token ID, LP token type, and epoch.\"},\"s_aeroVoterBoost()\":{\"notice\":\"The boost amount for AeroVoter.\"},\"s_aeroVoting()\":{\"notice\":\"Address of the AeroVoting contract.\"},\"s_ionicPool()\":{\"notice\":\"Address of the Ionic Pool.\"},\"s_limitedBoost()\":{\"notice\":\"The amount of limited boost available.\"},\"s_limitedBoostActive()\":{\"notice\":\"Indicates whether the limited boost is active.\"},\"s_maxEarlyWithdrawFee()\":{\"notice\":\"The maximum fee for early withdrawal.\"},\"s_minimumLockDuration()\":{\"notice\":\"The minimum duration for locking.\"},\"s_tokenId()\":{\"notice\":\"The current token ID counter.\"},\"s_veAERO()\":{\"notice\":\"Address of the veAERO contract.\"},\"s_voter()\":{\"notice\":\"Address of the voter contract.\"},\"setAeroVoterBoost(uint256)\":{\"notice\":\"Sets the boost amount for Aero Voter.\"},\"setAeroVoting(address)\":{\"notice\":\"Sets the address of the Aero Voting contract.\"},\"setIonicPool(address)\":{\"notice\":\"Sets the address of the Ionic Pool.\"},\"setLimitedTimeBoost(uint256)\":{\"notice\":\"Sets the amount for a limited time boost.\"},\"setLpTokenType(address,uint8)\":{\"notice\":\"Sets the LP token type for a specific token.\"},\"setMaxEarlyWithdrawFee(uint256)\":{\"notice\":\"Sets the maximum early withdrawal fee.\"},\"setMinimumLockAmount(address,uint256)\":{\"notice\":\"Sets the minimum lock amount for a specific token.\"},\"setMinimumLockDuration(uint256)\":{\"notice\":\"Sets the minimum lock duration.\"},\"setStakeStrategy(uint8,address)\":{\"notice\":\"Sets the stake strategy for a specific LP token type.\"},\"setVeAERO(address)\":{\"notice\":\"Sets the address of the veAERO contract.\"},\"setVoter(address)\":{\"notice\":\"Sets the address of the voter.\"},\"toggleLimitedBoost(bool)\":{\"notice\":\"Toggles the limited boost feature.\"},\"toggleSplit(address,bool)\":{\"notice\":\"Toggles the ability to split tokens for a specific account.\"},\"veIONFirstExtension()\":{\"notice\":\"The address of the logic contract for the veION first extension.\"},\"veIONSecondExtension()\":{\"notice\":\"The address of the logic contract for the veION second extension.\"},\"whitelistTokens(address[],bool[])\":{\"notice\":\"Whitelists or removes tokens from the whitelist.\"},\"withdrawDistributedFees(address,address)\":{\"notice\":\"Withdraws distributed fees for a specific token to a recipient address.\"},\"withdrawProtocolFees(address,address)\":{\"notice\":\"Withdraws protocol fees for a specific token to a recipient address.\"}},\"notice\":\"This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/veIONSecondExtension.sol\":\"veIONSecondExtension\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7dce633611f5149fa8dec27ccd28b88dc590fecbebdb7785d1f6728dae1e1c4f\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2b54ec184943843041ab77f61988b5060f6f03acbfe92cdc125f95f00891da\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xefe5b03cf4147c27e7e38a1b8ddb3e0dc7f0ba8f6be71627d962fa91c98943dd\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\n     * See {_beforeConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\n     * See {_afterConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called before \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\n     * {ERC721Consecutive}.\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\n     */\\n    function _beforeConsecutiveTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /*first*/\\n        uint96 size\\n    ) internal virtual {\\n        if (from != address(0)) {\\n            _balances[from] -= size;\\n        }\\n        if (to != address(0)) {\\n            _balances[to] += size;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\n     * {ERC721Consecutive}.\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\n     */\\n    function _afterConsecutiveTokenTransfer(\\n        address, /*from*/\\n        address, /*to*/\\n        uint256, /*first*/\\n        uint96 /*size*/\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xcb972e21a5fd838e749739a88d702f97263f1317906974787c469b85b1d41ac2\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x20ad2fc58bb29dd0c35a3ecd1c01a8e0641320cda53c8044e2d31a7644b48767\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x0c2ac2e8ea31517e8a807e6fe8a3cf6de47ae76a5e8ed8ca60a209efa12aab69\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb49137b771712774960cca0acf428499e2aa85f179fe03712e5c06c5a6ab6316\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f211a9dd6bc7e4bc6c98a062d4729b821b7ff391a888215a48872b205117749\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x636eab608b4563c01e88042aba9330e6fe69af2c567fe1adf4d85731974ac81d\",\"license\":\"MIT\"},\"contracts/veION/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IVoter\\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\\n */\\ninterface IVoter {\\n  /// @notice Error thrown when a user has already voted or deposited.\\n  error AlreadyVotedOrDeposited();\\n\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\n  error DistributeWindow();\\n\\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\\n  error RewardAccumulatorDoesNotExist(address _pool);\\n\\n  /// @notice Error thrown when a reward accumulator is not alive.\\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\\n\\n  /// @notice Error thrown when a market already exists.\\n  error MarketAlreadyExists();\\n\\n  /// @notice Error thrown when the maximum voting number is too low.\\n  error MaximumVotingNumberTooLow();\\n\\n  /// @notice Error thrown when array lengths do not match.\\n  error MismatchedArrayLengths();\\n\\n  /// @notice Error thrown when there are non-zero votes.\\n  error NonZeroVotes();\\n\\n  /// @notice Error thrown when the caller is not the owner.\\n  error NotOwner();\\n\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\n  error NotDistributeWindow();\\n\\n  /// @notice Error thrown when the caller is not the governor.\\n  error NotGovernor();\\n\\n  /// @notice Error thrown when an NFT is not whitelisted.\\n  error NotWhitelistedNFT();\\n\\n  /// @notice Error thrown when the same value is provided.\\n  error SameValue();\\n\\n  /// @notice Error thrown when there are too many pools.\\n  error TooManyPools();\\n\\n  /// @notice Error thrown when array lengths are unequal.\\n  error UnequalLengths();\\n\\n  /// @notice Error thrown when an address is zero.\\n  error ZeroAddress();\\n\\n  /// @notice Error thrown when the tokens array is empty.\\n  error TokensArrayEmpty();\\n\\n  /// @notice Error thrown when the weight is zero.\\n  error ZeroWeight();\\n\\n  /**\\n   * @notice Struct to store vote details.\\n   * @param marketVotes Array of market addresses voted for.\\n   * @param marketVoteSides Array of market sides voted for.\\n   * @param votes Array of vote weights.\\n   * @param usedWeight Total weight used in voting.\\n   */\\n  struct VoteDetails {\\n    address[] marketVotes;\\n    MarketSide[] marketVoteSides;\\n    uint256[] votes;\\n    uint256 usedWeight;\\n  }\\n\\n  /**\\n   * @notice Struct to store market information.\\n   * @param marketAddress Address of the market.\\n   * @param side Side of the market (Supply or Borrow).\\n   */\\n  struct Market {\\n    address marketAddress;\\n    MarketSide side;\\n  }\\n\\n  /**\\n   * @notice Struct to store variables used in voting.\\n   * @param totalWeight Total weight available for voting.\\n   * @param usedWeight Weight used in voting.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param rewardAccumulator Address of the reward accumulator.\\n   * @param marketWeight Weight of the market.\\n   * @param bribes Address of the bribes.\\n   */\\n  struct VoteVars {\\n    uint256 totalWeight;\\n    uint256 usedWeight;\\n    address market;\\n    MarketSide marketSide;\\n    address rewardAccumulator;\\n    uint256 marketWeight;\\n    address bribes;\\n  }\\n\\n  /**\\n   * @notice Struct to store local variables used in voting.\\n   * @param sender Address of the sender.\\n   * @param timestamp Timestamp of the vote.\\n   * @param votingLPs Array of voting LP addresses.\\n   * @param votingLPBalances Array of voting LP balances.\\n   * @param boosts Array of boosts.\\n   */\\n  struct VoteLocalVars {\\n    address sender;\\n    uint256 timestamp;\\n    address[] votingLPs;\\n    uint256[] votingLPBalances;\\n    uint256[] boosts;\\n  }\\n\\n  /**\\n   * @notice Enum to represent the side of a market.\\n   */\\n  enum MarketSide {\\n    Supply,\\n    Borrow\\n  }\\n\\n  /**\\n   * @notice Event emitted when a vote is cast.\\n   * @param voter Address of the voter.\\n   * @param pool Address of the pool.\\n   * @param tokenId ID of the token.\\n   * @param weight Weight of the vote.\\n   * @param totalWeight Total weight of the vote.\\n   * @param timestamp Timestamp of the vote.\\n   */\\n  event Voted(\\n    address indexed voter,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 weight,\\n    uint256 totalWeight,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when a vote is abstained.\\n   * @param voter Address of the voter.\\n   * @param pool Address of the pool.\\n   * @param tokenId ID of the token.\\n   * @param weight Weight of the vote.\\n   * @param totalWeight Total weight of the vote.\\n   * @param timestamp Timestamp of the vote.\\n   */\\n  event Abstained(\\n    address indexed voter,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 weight,\\n    uint256 totalWeight,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when a reward is notified.\\n   * @param sender Address of the sender.\\n   * @param reward Address of the reward.\\n   * @param amount Amount of the reward.\\n   */\\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\n\\n  /**\\n   * @notice Event emitted when a token is whitelisted.\\n   * @param whitelister Address of the whitelister.\\n   * @param token Address of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\\n\\n  /**\\n   * @notice Event emitted when an NFT is whitelisted.\\n   * @param whitelister Address of the whitelister.\\n   * @param tokenId ID of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\\n\\n  event LpTokensSet(address[] indexed lpTokens);\\n  event MpoSet(address indexed mpo);\\n  event GovernorSet(address indexed governor);\\n  event MarketsAdded(Market[] markets);\\n  event MarketRewardAccumulatorsSet(\\n    address[] indexed markets,\\n    MarketSide[] indexed marketSides,\\n    address[] indexed rewardAccumulators\\n  );\\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\\n  event DistributionTimelockAliveToggled(bool isAlive);\\n\\n  /**\\n   * @notice Get the weight of a market.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param lpToken Address of the LP token.\\n   * @return The weight of the market.\\n   */\\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the votes for a token.\\n   * @param tokenId ID of the token.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param lpToken Address of the LP token.\\n   * @return The votes for the token.\\n   */\\n  function votes(\\n    uint256 tokenId,\\n    address market,\\n    MarketSide marketSide,\\n    address lpToken\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the used weights for a token.\\n   * @param tokenId ID of the token.\\n   * @param lpToken Address of the LP token.\\n   * @return The used weights for the token.\\n   */\\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the last voted timestamp for a token.\\n   * @param tokenId ID of the token.\\n   * @return The last voted timestamp for the token.\\n   */\\n  function lastVoted(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @notice Check if a token is whitelisted.\\n   * @param token Address of the token.\\n   * @return True if the token is whitelisted, false otherwise.\\n   */\\n  function isWhitelistedToken(address token) external view returns (bool);\\n\\n  /**\\n   * @notice Check if an NFT is whitelisted.\\n   * @param tokenId ID of the token.\\n   * @return True if the NFT is whitelisted, false otherwise.\\n   */\\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\n\\n  /**\\n   * @notice Get the address of the ve contract.\\n   * @return The address of the ve contract.\\n   */\\n  function ve() external view returns (address);\\n\\n  /**\\n   * @notice Get the address of the governor.\\n   * @return The address of the governor.\\n   */\\n  function governor() external view returns (address);\\n\\n  /**\\n   * @notice Update voting balances in voting rewards contracts.\\n   * @param _tokenId ID of veNFT whose balance you wish to update.\\n   */\\n  function poke(uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\\n   *      Can only vote for gauges that have not been killed.\\n   *      Throws if length of _poolVote and _weights do not match.\\n   * @param _tokenId ID of veNFT you are voting with.\\n   * @param _poolVote Array of pools you are voting for.\\n   * @param _marketVoteSide Array of market vote sides you are voting for.\\n   * @param _weights Weights of pools.\\n   */\\n  function vote(\\n    uint256 _tokenId,\\n    address[] calldata _poolVote,\\n    MarketSide[] calldata _marketVoteSide,\\n    uint256[] calldata _weights\\n  ) external;\\n\\n  /**\\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\\n   * @dev Cannot reset in the same epoch that you voted in.\\n   *      Can vote or deposit into a managed NFT again after reset.\\n   * @param _tokenId ID of veNFT that you are resetting.\\n   */\\n  function reset(uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Distributes rewards to eligible markets.\\n   */\\n  function distributeRewards() external;\\n\\n  /**\\n   * @notice Claim bribes for a given NFT.\\n   * @dev Utility to help batch bribe claims.\\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\\n   * @param _tokens Array of tokens that are used as bribes.\\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\\n   */\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\\n   * @dev Throws if not called by governor.\\n   * @param _token Address of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  function whitelistToken(address _token, bool _bool) external;\\n\\n  /**\\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\n   * @dev Throws if not called by governor.\\n   *      Throws if already whitelisted.\\n   * @param _tokenId ID of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\\n\\n  /**\\n   * @notice Set the LP tokens.\\n   * @param _lpTokens Array of LP token addresses.\\n   */\\n  function setLpTokens(address[] memory _lpTokens) external;\\n\\n  /**\\n   * @notice Set the Master Price Oracle (MPO) address.\\n   * @param _mpo Address of the Master Price Oracle.\\n   */\\n  function setMpo(address _mpo) external;\\n\\n  /**\\n   * @notice Set a new governor.\\n   * @param _governor Address of the new governor.\\n   */\\n  function setGovernor(address _governor) external;\\n\\n  /**\\n   * @notice Add new markets.\\n   * @param _markets Array of Market structs to be added.\\n   */\\n  function addMarkets(Market[] calldata _markets) external;\\n\\n  /**\\n   * @notice Set reward accumulators for markets.\\n   * @param _markets Array of market addresses.\\n   * @param _marketSides Array of market sides.\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\n   */\\n  function setMarketRewardAccumulators(\\n    address[] calldata _markets,\\n    MarketSide[] calldata _marketSides,\\n    address[] calldata _rewardAccumulators\\n  ) external;\\n\\n  /**\\n   * @notice Set bribes for reward accumulators.\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\n   * @param _bribes Array of bribe addresses.\\n   */\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\\n\\n  /**\\n   * @notice Set the maximum number of votes.\\n   * @param _maxVotingNum Maximum number of votes allowed.\\n   */\\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\\n\\n  /**\\n   * @notice Toggle the alive status of a reward accumulator.\\n   * @param _market Address of the market.\\n   * @param _marketSide Side of the market.\\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\\n   */\\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\\n\\n  /**\\n   * @notice Toggle the alive status of a timelock on distributing rewards.\\n   * @param _isAlive Boolean indicating if the timelock is alive.\\n   */\\n  function toggleDistributionTimelockAlive(bool _isAlive) external;\\n\\n  /**\\n   * @notice Get the start of the epoch for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the epoch start for.\\n   * @return The start of the epoch.\\n   */\\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the next epoch for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the next epoch for.\\n   * @return The next epoch.\\n   */\\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the start of the voting period for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the voting start for.\\n   * @return The start of the voting period.\\n   */\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the end of the voting period for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the voting end for.\\n   * @return The end of the voting period.\\n   */\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the number of markets.\\n   * @return The number of markets.\\n   */\\n  function marketsLength() external view returns (uint256);\\n\\n  /**\\n   * @notice Get all LP reward tokens.\\n   * @return An array of addresses representing all LP reward tokens.\\n   */\\n  function getAllLpRewardTokens() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Get vote details for a specific token ID and LP asset.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpAsset The address of the LP asset.\\n   * @return A struct containing vote details.\\n   */\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\\n}\\n\",\"keccak256\":\"0x25f8d850f6c35830ed387227d0a65f48392a2ca6153214f1bcd53dda23a3ac17\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\n\\n/// @title IveION Interface\\n/// @notice Interface for veION contract\\ninterface IveIONCore {\\n  /**\\n   * @notice Creates a new lock for multiple tokens and assigns it to a specified address\\n   * @param _tokenAddress Array of token addresses to lock\\n   * @param _tokenAmount Array of token amounts to lock\\n   * @param _duration Array of lock durations\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\n   * @param _to Address to assign the lock to\\n   * @return The ID of the newly created veNFT\\n   */\\n  function createLockFor(\\n    address[] memory _tokenAddress,\\n    uint256[] memory _tokenAmount,\\n    uint256[] memory _duration,\\n    bool[] memory _stakeUnderlying,\\n    address _to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Creates a new lock for multiple tokens\\n   * @param _tokenAddress Array of token addresses to lock\\n   * @param _tokenAmount Array of token amounts to lock\\n   * @param _duration Array of lock durations\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\n   * @return The ID of the newly created veNFT\\n   */\\n  function createLock(\\n    address[] calldata _tokenAddress,\\n    uint256[] calldata _tokenAmount,\\n    uint256[] calldata _duration,\\n    bool[] memory _stakeUnderlying\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Increases the amount of tokens locked for a specific veNFT\\n   * @param _tokenAddress Address of the token to increase lock amount for\\n   * @param _tokenId ID of the veNFT\\n   * @param _tokenAmount Amount of tokens to add to the lock\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\n   */\\n  function increaseAmount(\\n    address _tokenAddress,\\n    uint256 _tokenId,\\n    uint256 _tokenAmount,\\n    bool _stakeUnderlying\\n  ) external;\\n\\n  /**\\n   * @notice Locks additional asset type for an existing veNFT\\n   * @param _tokenAddress Address of the new token to lock\\n   * @param _tokenAmount Amount of tokens to lock\\n   * @param _tokenId ID of the veNFT\\n   * @param _duration Duration of the lock\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\n   */\\n  function lockAdditionalAsset(\\n    address _tokenAddress,\\n    uint256 _tokenAmount,\\n    uint256 _tokenId,\\n    uint256 _duration,\\n    bool _stakeUnderlying\\n  ) external;\\n\\n  /**\\n   * @notice Increases the lock duration for a specific token in a veNFT\\n   * @param _tokenAddress Address of the token\\n   * @param _tokenId ID of the veNFT\\n   * @param _lockDuration New lock duration to extend to\\n   */\\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external;\\n\\n  /**\\n   * @notice Delegates voting power from one veNFT to another.\\n   * @param fromTokenId The ID of the veNFT from which voting power is delegated.\\n   * @param toTokenId The ID of the veNFT to which voting power is delegated.\\n   * @param lpToken The address of the LP token associated with the delegation.\\n   * @param amount The amount of voting power to delegate.\\n   */\\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external;\\n\\n  /**\\n   * @notice Removes delegatees from a specific veNFT\\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\\n   * @param lpToken Address of the LP token associated with the delegation\\n   * @param amounts Array of amounts of voting power to remove from each delegatee\\n   */\\n  function removeDelegatees(\\n    uint256 fromTokenId,\\n    uint256[] memory toTokenIds,\\n    address lpToken,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /**\\n   * @notice Removes delegators from a specific veNFT\\n   * @param fromTokenIds Array of veNFT IDs that are delegators to be removed\\n   * @param toTokenId ID of the veNFT from which delegators are removed\\n   * @param lpToken Address of the LP token associated with the delegation\\n   * @param amounts Array of amounts of voting power to remove from each delegator\\n   */\\n  function removeDelegators(\\n    uint256[] memory fromTokenIds,\\n    uint256 toTokenId,\\n    address lpToken,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /**\\n   * @notice Locks a token permanently.\\n   * @param _tokenAddress The address of the token to lock.\\n   * @param _tokenId The ID of the token to lock.\\n   */\\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Unlocks a permanently locked token.\\n   * @param _tokenAddress The address of the token to unlock.\\n   * @param _tokenId The ID of the token to unlock.\\n   */\\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Updates voting status for a veNFT\\n   * @param _tokenId ID of the veNFT\\n   * @param _voting Voting status\\n   */\\n  function voting(uint256 _tokenId, bool _voting) external;\\n\\n  /**\\n   * @notice Sets the implementation addresses for the veION contract extensions.\\n   * @dev This function can only be called by authorized entities.\\n   * @param _veIONFirstExtension The address of the first extension contract.\\n   * @param _veIONSecondExtension The address of the second extension contract.\\n   */\\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external;\\n}\\n\\n/// @title IAeroVotingEscrow Interface\\n/// @notice Interface for Aero Voting Escrow contract\\ninterface IAeroVotingEscrow {\\n  /**\\n   * @notice Returns the balance of the specified owner.\\n   * @param _owner The address of the owner.\\n   * @return The balance of the owner.\\n   */\\n  function balanceOf(address _owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Retrieves the token ID at a specific index for a given owner.\\n   * @param _owner The address of the owner.\\n   * @param _index The index of the token ID in the owner's list.\\n   * @return The token ID at the specified index.\\n   */\\n  function ownerToNFTokenIdList(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\\n/// @title IAeroVoter Interface\\n/// @notice Interface for Aero Voter contract\\ninterface IAeroVoter {\\n  /**\\n   * @notice Returns the list of pools voted for by a specific token ID.\\n   * @param tokenId The ID of the token.\\n   * @return An array of addresses representing the pools voted for.\\n   */\\n  function poolVote(uint256 tokenId) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Retrieves the weight of a specific pool.\\n   * @param pool The address of the pool.\\n   * @return The weight of the pool.\\n   */\\n  function weights(address pool) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the number of votes a specific token ID has for a given pool.\\n   * @param tokenId The ID of the token.\\n   * @param pool The address of the pool.\\n   * @return The number of votes for the pool.\\n   */\\n  function votes(uint256 tokenId, address pool) external view returns (uint256);\\n}\\n\\ninterface IAddressesProvider {\\n  function getAddress(string calldata id) external view returns (address);\\n}\\n\\ninterface IMasterPriceOracle {\\n  function price(address underlying) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa5c71c00549a034b394fb6aa4a681453b219406ff77a184de3fbc667fd5709b3\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONSecondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./IveIONStructsEnumsErrorsEvents.sol\\\";\\n\\n/// @title IveION Interface Second Extension\\n/// @notice Interface for veION contract\\ninterface IveIONSecondExtension is IveIONStructsEnumsErrorsEvents {\\n  /**\\n   * @notice Whitelists or removes tokens from the whitelist.\\n   * @param _tokens An array of token addresses to be whitelisted or removed.\\n   * @param _isWhitelisted An array of booleans indicating the whitelist status for each token.\\n   */\\n  function whitelistTokens(address[] memory _tokens, bool[] memory _isWhitelisted) external;\\n\\n  /**\\n   * @notice Withdraws protocol fees for a specific token to a recipient address.\\n   * @param _tokenAddress The address of the token for which protocol fees are to be withdrawn.\\n   * @param _recipient The address to which the protocol fees will be sent.\\n   */\\n  function withdrawProtocolFees(address _tokenAddress, address _recipient) external;\\n\\n  /**\\n   * @notice Withdraws distributed fees for a specific token to a recipient address.\\n   * @param _tokenAddress The address of the token for which distributed fees are to be withdrawn.\\n   * @param _recipient The address to which the distributed fees will be sent.\\n   */\\n  function withdrawDistributedFees(address _tokenAddress, address _recipient) external;\\n\\n  /**\\n   * @notice Toggles the ability to split tokens for a specific account.\\n   * @param _account The address of the account.\\n   * @param _isAllowed Boolean indicating if splitting is allowed.\\n   */\\n  function toggleSplit(address _account, bool _isAllowed) external;\\n\\n  /**\\n   * @notice Toggles the limited boost feature.\\n   * @param _isBoosted Boolean indicating if the boost is active.\\n   */\\n  function toggleLimitedBoost(bool _isBoosted) external;\\n\\n  /**\\n   * @notice Sets the amount for a limited time boost.\\n   * @param _boostAmount The amount of the boost.\\n   */\\n  function setLimitedTimeBoost(uint256 _boostAmount) external;\\n\\n  /**\\n   * @notice Sets the address of the voter.\\n   * @param _voter The address of the voter.\\n   */\\n  function setVoter(address _voter) external;\\n\\n  /**\\n   * @notice Sets the minimum lock amount for a specific token.\\n   * @param _tokenAddress The address of the token.\\n   * @param _minimumAmount The minimum amount to lock.\\n   */\\n  function setMinimumLockAmount(address _tokenAddress, uint256 _minimumAmount) external;\\n\\n  /**\\n   * @notice Sets the minimum lock duration.\\n   * @param _minimumLockDuration The minimum duration for locking.\\n   */\\n  function setMinimumLockDuration(uint256 _minimumLockDuration) external;\\n\\n  /**\\n   * @notice Sets the address of the Ionic Pool.\\n   * @param _ionicPool The address of the Ionic Pool.\\n   */\\n  function setIonicPool(address _ionicPool) external;\\n\\n  /**\\n   * @notice Sets the address of the Aero Voting contract.\\n   * @param _aeroVoting The address of the Aero Voting contract.\\n   */\\n  function setAeroVoting(address _aeroVoting) external;\\n\\n  /**\\n   * @notice Sets the boost amount for Aero Voter.\\n   * @param _aeroVoterBoost The boost amount for Aero Voter.\\n   */\\n  function setAeroVoterBoost(uint256 _aeroVoterBoost) external;\\n\\n  /**\\n   * @notice Sets the maximum early withdrawal fee.\\n   * @param _maxEarlyWithdrawFee The maximum fee for early withdrawal.\\n   */\\n  function setMaxEarlyWithdrawFee(uint256 _maxEarlyWithdrawFee) external;\\n\\n  /**\\n   * @notice Sets the LP token type for a specific token.\\n   * @param _token The address of the token.\\n   * @param _type The LP token type.\\n   */\\n  function setLpTokenType(address _token, LpTokenType _type) external;\\n\\n  /**\\n   * @notice Sets the stake strategy for a specific LP token type.\\n   * @param _lpType The LP token type.\\n   * @param _strategy The stake strategy.\\n   */\\n  function setStakeStrategy(LpTokenType _lpType, IStakeStrategy _strategy) external;\\n\\n  /**\\n   * @notice Sets the address of the veAERO contract.\\n   * @param _veAERO The address of the veAERO contract.\\n   */\\n  function setVeAERO(address _veAERO) external;\\n\\n  /**\\n   * @notice Retrieves the lock information for a specific user.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @return A LockedBalance struct containing lock details.\\n   */\\n  function getUserLock(uint256 _tokenId, LpTokenType _lpType) external view returns (LockedBalance memory);\\n\\n  /**\\n   * @notice Retrieves the token IDs owned by a specific address.\\n   * @param _owner The address of the owner.\\n   * @return An array of token IDs owned by the address.\\n   */\\n  function getOwnedTokenIds(address _owner) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Retrieves the assets locked for a specific token ID.\\n   * @param _tokenId The ID of the token.\\n   * @return An array of addresses representing the locked assets.\\n   */\\n  function getAssetsLocked(uint256 _tokenId) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Retrieves the delegatees for a specific token ID and LP token type.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @return An array of delegatee IDs.\\n   */\\n  function getDelegatees(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Retrieves the delegators for a specific token ID and LP token type.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @return An array of delegator IDs.\\n   */\\n  function getDelegators(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Retrieves the user point for a specific token ID, LP token type, and epoch.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @param _epoch The epoch number.\\n   * @return A UserPoint struct containing user point details.\\n   */\\n  function getUserPoint(uint256 _tokenId, LpTokenType _lpType, uint256 _epoch) external view returns (UserPoint memory);\\n}\\n\",\"keccak256\":\"0x83039c6af4d8d701d98b54c76a8e6d3d2fdea11d75b741a52f2a821ae7694e9b\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONStructsEnumsErrorsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\ninterface IveIONStructsEnumsErrorsEvents {\\n  /**\\n   * @notice Structure representing a locked balance\\n   * @param tokenAddress Address of the token\\n   * @param amount Amount of tokens locked\\n   * @param delegateAmount Amount of tokens delegated\\n   * @param start Start time of the lock\\n   * @param end End time of the lock\\n   * @param isPermanent Indicates if the lock is permanent\\n   * @param boost Boost value for the lock\\n   */\\n  struct LockedBalance {\\n    address tokenAddress;\\n    uint256 amount;\\n    uint256 delegateAmount;\\n    uint256 start;\\n    uint256 end;\\n    bool isPermanent;\\n    uint256 boost;\\n  }\\n\\n  /**\\n   * @notice Structure representing a delegation\\n   * @param amount Amount of tokens delegated\\n   * @param delegatee ID of the delegatee\\n   */\\n  struct Delegation {\\n    uint256 amount;\\n    uint256 delegatee;\\n  }\\n\\n  /**\\n   * @notice Structure representing a user point\\n   * @param bias Bias value\\n   * @param slope Slope value, representing -dweight / dt\\n   * @param ts Timestamp of the point\\n   * @param blk Block number of the point\\n   * @param permanent Permanent value\\n   * @param permanentDelegate Permanent delegate value\\n   */\\n  struct UserPoint {\\n    uint256 bias;\\n    uint256 slope;\\n    uint256 ts;\\n    uint256 blk;\\n    uint256 permanent;\\n    uint256 permanentDelegate;\\n  }\\n\\n  /**\\n   * @notice Structure representing a global point\\n   * @param bias Bias value\\n   * @param slope Slope value, representing -dweight / dt\\n   * @param ts Timestamp of the point\\n   * @param blk Block number of the point\\n   * @param permanentLockBalance Permanent lock balance\\n   */\\n  struct GlobalPoint {\\n    int128 bias;\\n    int128 slope;\\n    uint256 ts;\\n    uint256 blk;\\n    uint256 permanentLockBalance;\\n  }\\n\\n  /**\\n   * @notice Structure representing a checkpoint\\n   * @param fromTimestamp Timestamp from which the checkpoint is valid\\n   * @param owner Address of the owner\\n   * @param delegatedBalance Balance that has been delegated\\n   * @param delegatee ID of the delegatee\\n   */\\n  struct Checkpoint {\\n    uint256 fromTimestamp;\\n    address owner;\\n    uint256 delegatedBalance;\\n    uint256 delegatee;\\n  }\\n\\n  /**\\n   * @notice Enum representing deposit types\\n   */\\n  enum DepositType {\\n    DEPOSIT_FOR_TYPE,\\n    CREATE_LOCK_TYPE,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_UNLOCK_TIME,\\n    LOCK_ADDITIONAL\\n  }\\n\\n  /**\\n   * @notice Enum representing LP token types\\n   */\\n  enum LpTokenType {\\n    Mode_Velodrome_5050_ION_MODE,\\n    Mode_Balancer_8020_ION_ETH,\\n    Base_Aerodrome_5050_ION_wstETH,\\n    Base_Balancer_8020_ION_ETH,\\n    Optimism_Velodrome_5050_ION_OP,\\n    Optimism_Balancer_8020_ION_ETH\\n  }\\n\\n  error LockDurationNotInFuture();\\n  error ZeroAmount();\\n  error LockDurationTooLong();\\n  error TokenNotWhitelisted();\\n  error NotOwner();\\n  error AlreadyVoted();\\n  error PermanentLock();\\n  error NoLockFound();\\n  error LockExpired();\\n  error SameNFT();\\n  error SplitNotAllowed();\\n  error AmountTooBig();\\n  error NotPermanentLock();\\n  error TokenHasDelegatees();\\n  error TokenHasDelegators();\\n  error NotVoter();\\n  error MinimumNotMet();\\n  error ArrayMismatch();\\n  error LockDurationTooShort();\\n  error DuplicateAsset();\\n  error SplitTooSmall();\\n  error NotEnoughRemainingAfterSplit();\\n  error NoDelegationBetweenTokens(uint256 _tokenId1, uint256 _tokenId2);\\n  error NoUnderlyingStake();\\n  error NotAcceptingDelegators();\\n  error BoostAmountMustBeGreaterThanZero();\\n  error InvalidAddress();\\n  error MinimumAmountMustBeGreaterThanZero();\\n  error MinimumLockDurationMustBeGreaterThanZero();\\n  error AeroBoostAmountMustBeGreaterThanZero();\\n  error MaxEarlyWithdrawFeeMustBeGreaterThanZero();\\n  error InvalidTokenAddress();\\n  error InvalidStrategyAddress();\\n  error InvalidVeAEROAddress();\\n\\n  event Deposit(\\n    address indexed provider,\\n    uint256 indexed tokenId,\\n    DepositType indexed depositType,\\n    uint256 value,\\n    uint256 locktime,\\n    uint256 ts\\n  );\\n  event Withdraw(address indexed provider, uint256 indexed tokenId, uint256 value, uint256 ts);\\n  event Supply(uint256 prevSupply, uint256 supply);\\n  event Delegated(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\n  event DelegationRemoved(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\n  event ProtocolFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\n  event DistributedFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\n  event SplitToggle(address indexed account, bool isAllowed);\\n  event LimitedBoostToggled(bool isBoosted);\\n  event LimitedTimeBoostSet(uint256 boostAmount);\\n  event VoterSet(address indexed newVoter);\\n  event AeroVotingSet(address indexed newAeroVoting);\\n  event AeroVoterBoostSet(uint256 newAeroVoterBoost);\\n  event TokensWhitelisted(address[] token, bool[] isWhitelisted);\\n  event LpTokenTypeSet(address indexed token, LpTokenType lpTokenType);\\n  event VeAEROSet(address indexed veAERO);\\n  event StakeStrategySet(LpTokenType indexed lpTokenType, address indexed strategy);\\n  event MinimumLockAmountSet(address indexed tokenAddress, uint256 minimumAmount);\\n  event MinimumLockDurationSet(uint256 minimumDuration);\\n  event IonicPoolSet(address indexed newIonicPool);\\n  event SplitCompleted(\\n    uint256 indexed fromTokenId,\\n    uint256 indexed tokenId1,\\n    uint256 indexed tokenId2,\\n    uint256 splitAmount,\\n    address tokenAddress\\n  );\\n  event MergeCompleted(\\n    uint256 indexed fromTokenId,\\n    uint256 indexed toTokenId,\\n    address[] assetsLocked,\\n    uint256 lengthOfAssets\\n  );\\n  event EmissionsClaimed(address indexed claimant, address indexed tokenAddress);\\n  event MaxEarlyWithdrawFeeSet(uint256 maxEarlyWithdrawFee);\\n  event PermanentLockCreated(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n  event PermanentLockRemoved(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n  event Voted(uint256 _tokenId, bool _voting);\\n  event DelegatorsBlocked(uint256 indexed _tokenId, address indexed _lpToken, bool _blocked);\\n  event Initialized(address indexed addressesProvider);\\n  event ExtensionsSet(address indexed _firstExtension, address indexed _secondExtension);\\n}\\n\",\"keccak256\":\"0x5d61a2f9ccb98d8fdb42ce6a96531f7cad4da402e8cef8c6dad7f69c45ab242e\",\"license\":\"UNLICENSED\"},\"contracts/veION/libraries/BalanceLogicLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../interfaces/IveIONStructsEnumsErrorsEvents.sol\\\";\\n\\nlibrary BalanceLogicLibrary {\\n  uint256 internal constant _WEEK = 1 weeks;\\n\\n  /// @notice Calculates the voting power for a given NFT at a specific time.\\n  /// @dev This function is compatible with the ERC20 `balanceOf` interface for Aragon.\\n  ///      It retrieves the last user point before a specified timestamp and computes the voting power at that time.\\n  /// @param s_userPointEpoch Mapping of user point epochs for all tokens.\\n  /// @param s_userPointHistory Mapping of user point history for all tokens.\\n  /// @param _lpType The type of LP token associated with the NFT.\\n  /// @param _tokenId The ID of the NFT for which to calculate voting power.\\n  /// @param _t The epoch time at which to calculate the voting power.\\n  /// @param _isPermanent A boolean indicating if the lock is permanent.\\n  /// @return The calculated voting power of the user at the specified time.\\n  function balanceOfNFTAt(\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)) storage s_userPointEpoch,\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))\\n      storage s_userPointHistory,\\n    IveIONStructsEnumsErrorsEvents.LpTokenType _lpType,\\n    uint256 _tokenId,\\n    uint256 _t,\\n    bool _isPermanent\\n  ) internal view returns (uint256) {\\n    uint256 _epoch = getPastUserPointIndex(s_userPointEpoch, s_userPointHistory, _lpType, _tokenId, _t);\\n    // epoch 0 is an empty point\\n    if (_epoch == 0) return 0;\\n    IveIONStructsEnumsErrorsEvents.UserPoint memory lastPoint = s_userPointHistory[_tokenId][_lpType][_epoch];\\n    if (_isPermanent) {\\n      return lastPoint.permanent + lastPoint.permanentDelegate;\\n    } else {\\n      uint256 reduction = lastPoint.slope * (_t - lastPoint.ts);\\n      if (reduction > lastPoint.bias) {\\n        lastPoint.bias = 0;\\n      } else {\\n        lastPoint.bias -= reduction;\\n      }\\n      return lastPoint.bias;\\n    }\\n  }\\n\\n  /// @notice Binary search to get the user point index for a token id at or prior to a given timestamp\\n  /// @dev If a user point does not exist prior to the timestamp, this will return 0.\\n  /// @param s_userPointEpoch State of all user point epochs\\n  /// @param s_userPointHistory State of all user point history\\n  /// @param _tokenId .\\n  /// @param _timestamp .\\n  /// @return User point index\\n  function getPastUserPointIndex(\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)) storage s_userPointEpoch,\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))\\n      storage s_userPointHistory,\\n    IveIONStructsEnumsErrorsEvents.LpTokenType _lpType,\\n    uint256 _tokenId,\\n    uint256 _timestamp\\n  ) internal view returns (uint256) {\\n    uint256 _userEpoch = s_userPointEpoch[_tokenId][_lpType];\\n    if (_userEpoch == 0) return 0;\\n    // First check most recent balance\\n    if (s_userPointHistory[_tokenId][_lpType][_userEpoch].ts <= _timestamp) return (_userEpoch);\\n    // Next check implicit zero balance\\n    if (s_userPointHistory[_tokenId][_lpType][1].ts > _timestamp) return 0;\\n    uint256 lower = 0;\\n    uint256 upper = _userEpoch;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      IveIONStructsEnumsErrorsEvents.UserPoint storage userPoint = s_userPointHistory[_tokenId][_lpType][center];\\n      if (userPoint.ts == _timestamp) {\\n        return center;\\n      } else if (userPoint.ts < _timestamp) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return lower;\\n  }\\n}\\n\",\"keccak256\":\"0xd3dcb5e95ac92907381b512a381861130e0cd65148e1ce7b476753b3ae9b3cb0\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/IStakeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IStakeStrategy\\n * @notice Interface for the VeloIonModeStakingModeReward contract.\\n */\\ninterface IStakeStrategy {\\n  /// @notice Emitted when the contract is initialized\\n  event Initialized(\\n    address indexed escrow,\\n    address indexed stakingToken,\\n    address indexed stakingContract,\\n    address stakingWalletImplementation\\n  );\\n\\n  /// @notice Emitted when tokens are staked\\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\\n\\n  /// @notice Emitted when rewards are claimed\\n  event Claimed(address indexed from, address indexed veloWallet);\\n\\n  /// @notice Emitted when tokens are withdrawn\\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\\n\\n  /// @notice Emitted when staking wallet is transferred\\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice Emitted when escrow is set\\n  event EscrowSet(address indexed newEscrow);\\n\\n  /// @notice Emitted when staking token is set\\n  event StakingTokenSet(address indexed newStakingToken);\\n\\n  /// @notice Emitted when staking contract is set\\n  event StakingContractSet(address indexed newStakingContract);\\n\\n  /// @notice Emitted when upgradeable beacon is set\\n  event UpgradeableBeaconSet(address indexed newBeacon);\\n\\n  /**\\n   * @notice Stakes a specified amount of tokens from a given address.\\n   * @param _from The address from which tokens will be staked.\\n   * @param _amount The amount of tokens to stake.\\n   * @param _data Additional data that might be needed for staking.\\n   */\\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\\n\\n  /**\\n   * @notice Claims rewards for a given address.\\n   * @param _from The address for which to claim rewards.\\n   */\\n  function claim(address _from) external;\\n\\n  /**\\n   * @notice Withdraws a specified amount of tokens for a given address.\\n   * @param _owner The address from which tokens will be withdrawn.\\n   * @param _amount The amount of tokens to withdraw.\\n   */\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\\n\\n  /**\\n   * @notice Returns the current reward rate for the staking strategy.\\n   * @return The reward rate as a uint256.\\n   */\\n  function rewardRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the period finish time for the staking strategy.\\n   * @return The period finish time as a uint256.\\n   */\\n  function periodFinish() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the balance of a specific address.\\n   * @param account The address to query the balance of.\\n   * @return The balance as a uint256.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total supply of staked tokens.\\n   * @return The total supply as a uint256.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the reward token for the staking strategy.\\n   * @return The address of the reward token.\\n   */\\n  function rewardToken() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the staking contract.\\n   * @return The address of the staking contract.\\n   */\\n  function stakingContract() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the staking token.\\n   * @return The address of the staking token.\\n   */\\n  function stakingToken() external view returns (address);\\n\\n  /**\\n   * @notice Returns the staking wallet address for a specific user.\\n   * @param user The address of the user.\\n   * @return The address of the user's staking wallet.\\n   */\\n  function userStakingWallet(address user) external view returns (address);\\n\\n  /**\\n   * @notice Transfers the staking wallet from one user to another.\\n   * @param from The current owner of the staking wallet.\\n   * @param to The new owner of the staking wallet.\\n   */\\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\\n\\n  /**\\n   * @notice Sets the escrow address.\\n   * @param _escrow The address of the new escrow.\\n   */\\n  function setEscrow(address _escrow) external;\\n\\n  /**\\n   * @notice Sets the staking token address.\\n   * @param _stakingToken The address of the new staking token.\\n   */\\n  function setStakingToken(address _stakingToken) external;\\n\\n  /**\\n   * @notice Sets the staking contract address.\\n   * @param _stakingContract The address of the new staking contract.\\n   */\\n  function setStakingContract(address _stakingContract) external;\\n\\n  /**\\n   * @notice Sets the address of the  beacon.\\n   * @param _beacon The address of the new beacon contract.\\n   */\\n  function setUpgradeableBeacon(address _beacon) external;\\n}\\n\",\"keccak256\":\"0xfb173875a979116e52d450310c4f05e1cc6a9bd07a6b667fe02e75d71b55f73c\",\"license\":\"UNLICENSED\"},\"contracts/veION/veIONSecondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport { ERC721Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\nimport { IMasterPriceOracle, IAeroVotingEscrow, IAeroVoter } from \\\"./interfaces/IveIONCore.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IVoter } from \\\"./interfaces/IVoter.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { veIONStorage } from \\\"./veIONStorage.sol\\\";\\nimport { BalanceLogicLibrary } from \\\"./libraries/BalanceLogicLibrary.sol\\\";\\nimport { IveIONSecondExtension } from \\\"./interfaces/IveIONSecondExtension.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IAddressesProvider } from \\\"./interfaces/IveIONCore.sol\\\";\\nimport { IStakeStrategy } from \\\"./stake/IStakeStrategy.sol\\\";\\n\\n/**\\n * @title veION Contract Second Extension\\n * @notice This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\\n */\\ncontract veIONSecondExtension is\\n  Ownable2StepUpgradeable,\\n  ERC721Upgradeable,\\n  ReentrancyGuardUpgradeable,\\n  veIONStorage,\\n  IveIONSecondExtension\\n{\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using SafeERC20 for IERC20;\\n\\n  constructor() {\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function whitelistTokens(address[] memory _tokens, bool[] memory _isWhitelisted) external onlyOwner {\\n    require(_tokens.length == _isWhitelisted.length, \\\"Unequal Arrays\\\");\\n    for (uint256 i; i < _tokens.length; i++) s_whitelistedToken[_tokens[i]] = _isWhitelisted[i];\\n    emit TokensWhitelisted(_tokens, _isWhitelisted);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function withdrawProtocolFees(address _tokenAddress, address _recipient) external onlyOwner {\\n    LpTokenType lpType = s_lpType[_tokenAddress];\\n    uint256 protocolFees = s_protocolFees[lpType];\\n    require(protocolFees > 0, \\\"No protocol fees available\\\");\\n    s_protocolFees[lpType] = 0;\\n    IERC20(_tokenAddress).safeTransfer(_recipient, protocolFees);\\n    emit ProtocolFeesWithdrawn(_tokenAddress, _recipient, protocolFees);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function withdrawDistributedFees(address _tokenAddress, address _recipient) external onlyOwner {\\n    LpTokenType lpType = s_lpType[_tokenAddress];\\n    uint256 distributedFees = s_distributedFees[lpType];\\n    require(distributedFees > 0, \\\"No distributed fees available\\\");\\n    s_distributedFees[lpType] = 0;\\n    IERC20(_tokenAddress).safeTransfer(_recipient, distributedFees);\\n    emit DistributedFeesWithdrawn(_tokenAddress, _recipient, distributedFees);\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           Setter Functions                                \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function toggleSplit(address _account, bool _isAllowed) external onlyOwner {\\n    s_canSplit[_account] = _isAllowed;\\n    emit SplitToggle(_account, _isAllowed);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function toggleLimitedBoost(bool _isBoosted) external onlyOwner {\\n    s_limitedBoostActive = _isBoosted;\\n    emit LimitedBoostToggled(_isBoosted);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setLimitedTimeBoost(uint256 _boostAmount) external onlyOwner {\\n    if (_boostAmount <= 0) revert BoostAmountMustBeGreaterThanZero();\\n    s_limitedBoost = _boostAmount;\\n    emit LimitedTimeBoostSet(_boostAmount);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setVoter(address _voter) external onlyOwner {\\n    if (address(_voter) == address(0)) revert InvalidAddress();\\n    s_voter = _voter;\\n    emit VoterSet(_voter);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setMinimumLockAmount(address _tokenAddress, uint256 _minimumAmount) external onlyOwner {\\n    if (_minimumAmount <= 0) revert MinimumAmountMustBeGreaterThanZero();\\n    LpTokenType lpType = s_lpType[_tokenAddress];\\n    s_minimumLockAmount[lpType] = _minimumAmount;\\n    emit MinimumLockAmountSet(_tokenAddress, _minimumAmount);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setMinimumLockDuration(uint256 _minimumLockDuration) external onlyOwner {\\n    if (_minimumLockDuration <= 0) revert MinimumLockDurationMustBeGreaterThanZero();\\n    s_minimumLockDuration = _minimumLockDuration;\\n    emit MinimumLockDurationSet(_minimumLockDuration);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setIonicPool(address _ionicPool) external onlyOwner {\\n    if (address(_ionicPool) == address(0)) revert InvalidAddress();\\n    s_ionicPool = _ionicPool;\\n    emit IonicPoolSet(_ionicPool);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setAeroVoting(address _aeroVoting) external onlyOwner {\\n    if (address(_aeroVoting) == address(0)) revert InvalidAddress();\\n    s_aeroVoting = _aeroVoting;\\n    emit AeroVotingSet(_aeroVoting);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setAeroVoterBoost(uint256 _aeroVoterBoost) external onlyOwner {\\n    if (_aeroVoterBoost <= 0) revert AeroBoostAmountMustBeGreaterThanZero();\\n    s_aeroVoterBoost = _aeroVoterBoost;\\n    emit AeroVoterBoostSet(_aeroVoterBoost);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setMaxEarlyWithdrawFee(uint256 _maxEarlyWithdrawFee) external onlyOwner {\\n    if (_maxEarlyWithdrawFee <= 0) revert MaxEarlyWithdrawFeeMustBeGreaterThanZero();\\n    s_maxEarlyWithdrawFee = _maxEarlyWithdrawFee;\\n    emit MaxEarlyWithdrawFeeSet(_maxEarlyWithdrawFee);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setLpTokenType(address _token, LpTokenType _type) external onlyOwner {\\n    if (_token == address(0)) revert InvalidTokenAddress();\\n    s_lpType[_token] = _type;\\n    emit LpTokenTypeSet(_token, _type);\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setStakeStrategy(LpTokenType _lpType, IStakeStrategy _strategy) external onlyOwner {\\n    if (address(_strategy) == address(0)) revert InvalidStrategyAddress();\\n    s_stakeStrategy[_lpType] = IStakeStrategy(_strategy);\\n    emit StakeStrategySet(_lpType, address(_strategy));\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function setVeAERO(address _veAERO) external onlyOwner {\\n    if (_veAERO == address(0)) revert InvalidVeAEROAddress();\\n    s_veAERO = _veAERO;\\n    emit VeAEROSet(_veAERO);\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           View Functions                                  \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function getUserLock(uint256 _tokenId, LpTokenType _lpType) external view returns (LockedBalance memory) {\\n    return s_locked[_tokenId][_lpType];\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function getOwnedTokenIds(address _owner) external view returns (uint256[] memory) {\\n    return s_ownerToTokenIds[_owner].values();\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function getAssetsLocked(uint256 _tokenId) external view returns (address[] memory) {\\n    return s_assetsLocked[_tokenId].values();\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function getDelegatees(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory) {\\n    return s_delegatees[_tokenId][_lpType].values();\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function getDelegators(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory) {\\n    return s_delegators[_tokenId][_lpType].values();\\n  }\\n\\n  /// @inheritdoc IveIONSecondExtension\\n  function getUserPoint(\\n    uint256 _tokenId,\\n    LpTokenType _lpType,\\n    uint256 _epoch\\n  ) external view returns (UserPoint memory) {\\n    return s_userPointHistory[_tokenId][_lpType][_epoch];\\n  }\\n}\\n\",\"keccak256\":\"0x8b13543d69c162f5ceba549e15859d86f4480cd05d16b777c1e9504c6c8a2731\",\"license\":\"UNLICENSED\"},\"contracts/veION/veIONStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport { IAddressesProvider } from \\\"./interfaces/IveIONCore.sol\\\";\\nimport { IStakeStrategy } from \\\"./stake/IStakeStrategy.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./interfaces/IveIONStructsEnumsErrorsEvents.sol\\\";\\n\\nabstract contract veIONStorage is IveIONStructsEnumsErrorsEvents {\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                                Constants                                  \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  /// @notice Represents the duration of one week in seconds.\\n  uint256 internal constant _WEEK = 1 weeks;\\n  /// @notice Represents the maximum lock time in seconds (2 years).\\n  uint256 internal constant _MAXTIME = 2 * 365 * 86400;\\n  /// @notice Precision used for calculations, set to 1e18.\\n  uint256 public constant PRECISION = 1e18;\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                             State Variables                               \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  /// @notice The current token ID counter.\\n  uint256 public s_tokenId;\\n  /// @notice The amount of limited boost available.\\n  uint256 public s_limitedBoost;\\n  /// @notice Indicates whether the limited boost is active.\\n  bool public s_limitedBoostActive;\\n  /// @notice Address of the veAERO contract.\\n  address public s_veAERO;\\n  /// @notice Address of the AeroVoting contract.\\n  address public s_aeroVoting;\\n  /// @notice Address of the Ionic Pool.\\n  address public s_ionicPool;\\n  /// @notice Address of the voter contract.\\n  address public s_voter;\\n  /// @notice The boost amount for AeroVoter.\\n  uint256 public s_aeroVoterBoost;\\n  /// @notice The minimum duration for locking.\\n  uint256 public s_minimumLockDuration;\\n  /// @notice The maximum fee for early withdrawal.\\n  uint256 public s_maxEarlyWithdrawFee;\\n  /// @notice The AddressesProvider contract used for address management.\\n  IAddressesProvider public ap;\\n  /// @notice The address of the logic contract for the veION first extension.\\n  address public veIONFirstExtension;\\n  /// @notice The address of the logic contract for the veION second extension.\\n  address public veIONSecondExtension;\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                                Mappings                                   \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  /// @dev Maps LP token types to their minimum lock amounts.\\n  mapping(LpTokenType => uint256) public s_minimumLockAmount;\\n  /// @dev Maps token addresses to their whitelist status.\\n  mapping(address => bool) public s_whitelistedToken;\\n  /// @dev Maps token addresses to their corresponding LP token types.\\n  mapping(address => LpTokenType) public s_lpType;\\n  /// @dev Maps user addresses to their ability to split.\\n  mapping(address => bool) public s_canSplit;\\n  /// @dev Maps token IDs and LP token types to their locked balances.\\n  mapping(uint256 => mapping(LpTokenType => LockedBalance)) public s_locked;\\n  /// @dev Maps token IDs and LP token types to user epochs.\\n  mapping(uint256 => mapping(LpTokenType => uint256)) public s_userPointEpoch;\\n  /// @dev Maps token IDs and LP token types to user point history.\\n  mapping(uint256 => mapping(LpTokenType => UserPoint[1000000000])) public s_userPointHistory;\\n  /// @dev Maps token IDs to sets of locked asset addresses.\\n  mapping(uint256 => EnumerableSet.AddressSet) internal s_assetsLocked;\\n  /// @dev Maps token IDs to their voting status.\\n  mapping(uint256 => bool) public s_voted;\\n  /// @dev Maps LP token types to their total supply.\\n  mapping(LpTokenType => uint256) public s_supply;\\n  /// @dev Maps LP token types to their permanent lock balances.\\n  mapping(LpTokenType => uint256) public s_permanentLockBalance;\\n  /// @dev Maps LP token types to their underlying stake strategies.\\n  mapping(LpTokenType => IStakeStrategy) public s_stakeStrategy;\\n  /// @dev Maps token IDs and LP token addresses to their underlying stake amounts.\\n  mapping(uint256 => mapping(address => uint256)) public s_underlyingStake;\\n  /// @dev Maps LP token types to their protocol fees.\\n  mapping(LpTokenType => uint256) public s_protocolFees;\\n  /// @dev Maps LP token types to their distributed fees.\\n  mapping(LpTokenType => uint256) public s_distributedFees;\\n  /// @dev Maps delegators, delegatees, and LP token types to delegation amounts.\\n  mapping(uint256 => mapping(uint256 => mapping(LpTokenType => uint256))) public s_delegations;\\n  /// @dev Maps token IDs and LP token types to sets of delegatees.\\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegatees;\\n  /// @dev Maps token IDs and LP token types to sets of delegators.\\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegators;\\n  /// @dev Maps owner addresses to sets of token IDs they own.\\n  mapping(address => EnumerableSet.UintSet) internal s_ownerToTokenIds;\\n  /// @dev Maps user addresses and token addresses to cumulative asset values.\\n  mapping(address => mapping(address => uint256)) public s_userCumulativeAssetValues;\\n  /// @dev Maps token Id and lp onto delegator permissioning.\\n  mapping(uint256 => mapping(address => bool)) public s_delegatorsBlocked;\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xda94bc4414fcae5a53d393a20b3d2ee9944fcf9e77b1a7591d615a1d03ffb23e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61309080620000f46000396000f3fe608060405234801561001057600080fd5b506004361061041d5760003560e01c806392415b081161022b578063c155bcc011610130578063e10bbe53116100b8578063e985e9c511610087578063e985e9c514610ba5578063ec09409514610be1578063eec83d8714610c05578063f2fde38b14610c0f578063fab64d1c14610c2257600080fd5b8063e10bbe5314610b20578063e1d514bd14610b33578063e30c397814610b54578063e526789414610b6557600080fd5b8063cc8cb245116100ff578063cc8cb24514610ac5578063cf7b287f14610ae6578063d8a8261114610af9578063d9e3eee214610b03578063df25197414610b1657600080fd5b8063c155bcc014610a1c578063c682ee6814610a7b578063c87b56dd14610a9f578063c9ebe07414610ab257600080fd5b8063ab2d99db116101b3578063b88d4fde11610182578063b88d4fde14610995578063b92a20fa146109a8578063b9e77c5f146109bb578063ba99c4df146109cf578063bae1cb5e146109fb57600080fd5b8063ab2d99db14610930578063ad975d711461093a578063b1113baf14610953578063b5250df31461098257600080fd5b80639ac1cc9d116101fa5780639ac1cc9d146107e7578063a22cb4651461088c578063a285ab8f1461089f578063a7d1ea851461090e578063aaf5eb681461092157600080fd5b806392415b081461078857806395d89b41146107b957806397f819a3146107c157806398008116146107d457600080fd5b80633d2cdbd11161033157806370a08231116102b95780637f8f6768116102885780637f8f67681461071c57806380e13a571461072f57806384cf379c146107505780638da5cb5b14610764578063907aa86a1461077557600080fd5b806370a08231146106d5578063715018a6146106e857806372b4c276146106f057806379ba50971461071457600080fd5b80634fac7e41116103005780634fac7e4114610654578063535d9aaf146106745780636352211e146106a05780636b2fe4c7146106b35780636cbdce56146106c157600080fd5b80633d2cdbd11461060757806342787d2a1461061b57806342842e0e1461062e5780634bc2a6571461064157600080fd5b806312ba89ef116103b457806323b872dd1161038357806323b872dd14610590578063282bbb3d146105a35780632879e840146105b657806333230dc0146105e05780633c4f743c146105f357600080fd5b806312ba89ef1461051f57806314b3bdde14610551578063171314f1146105655780631df595c71461056f57600080fd5b806307b67fe8116103f057806307b67fe814610487578063081812fc146104c1578063095ea7b3146104ec57806311e7b0ee146104ff57600080fd5b806301ffc9a71461042257806303de63551461044a57806304f6c0ef1461045f57806306fdde0314610472575b600080fd5b6104356104303660046127cc565b610c35565b60405190151581526020015b60405180910390f35b61045d6104583660046128ef565b610c87565b005b61045d61046d3660046129b1565b610d8b565b61047a610df1565b6040516104419190612a1a565b6104b3610495366004612a41565b61013e60209081526000928352604080842090915290825290205481565b604051908152602001610441565b6104d46104cf3660046129b1565b610e83565b6040516001600160a01b039091168152602001610441565b61045d6104fa366004612a6d565b610eaa565b61051261050d3660046129b1565b610fbf565b6040516104419190612ade565b6104b361052d366004612af1565b61014860209081526000938452604080852082529284528284209052825290205481565b610137546104d4906001600160a01b031681565b6104b361012d5481565b6104b361057d366004612b26565b6101466020526000908152604090205481565b61045d61059e366004612b41565b610fda565b61045d6105b1366004612b82565b61100b565b6104d46105c4366004612b26565b610144602052600090815260409020546001600160a01b031681565b61045d6105ee366004612bbb565b61115b565b610136546104d4906001600160a01b031681565b610131546104d4906001600160a01b031681565b61045d6106293660046129b1565b6111c4565b61045d61063c366004612b41565b611223565b61045d61064f366004612be9565b61123e565b610667610662366004612be9565b6112b8565b6040516104419190612c06565b6104b3610682366004612c4a565b61014560209081526000928352604080842090915290825290205481565b6104d46106ae3660046129b1565b6112dd565b61012f546104359060ff1681565b610130546104d4906001600160a01b031681565b6104b36106e3366004612be9565b61133d565b61045d6113c3565b6104356106fe366004612be9565b61013a6020526000908152604090205460ff1681565b61045d6113d7565b61045d61072a366004612c6f565b611451565b6104b361073d366004612b26565b6101476020526000908152604090205481565b610138546104d4906001600160a01b031681565b6033546001600160a01b03166104d4565b61045d610783366004612be9565b611514565b6107ac610796366004612be9565b61013b6020526000908152604090205460ff1681565b6040516104419190612ca1565b61047a611596565b61045d6107cf366004612cc9565b6115a5565b61045d6107e23660046129b1565b6115ef565b61084b6107f5366004612a41565b61013d60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0390951695939492939192909160ff169087565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091526080840152151560a083015260c082015260e001610441565b61045d61089a366004612bbb565b61164e565b6108b26108ad366004612a41565b61165d565b604051610441919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a08281015115159082015260c0918201519181019190915260e00190565b61045d61091c366004612be9565b61174e565b6104b3670de0b6b3a764000081565b6104b36101345481565b61012f546104d49061010090046001600160a01b031681565b610435610961366004612c4a565b61014d60209081526000928352604080842090915290825290205460ff1681565b61045d610990366004612be9565b6117c8565b61045d6109a3366004612ce6565b611842565b6106676109b6366004612a41565b61187a565b610132546104d4906001600160a01b031681565b6104b36109dd366004612b82565b61014c60209081526000928352604080842090915290825290205481565b6104b3610a09366004612b26565b6101436020526000908152604090205481565b610a2f610a2a366004612daa565b6118ce565b6040516104419190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b610435610a89366004612be9565b61013c6020526000908152604090205460ff1681565b61047a610aad3660046129b1565b6119b0565b610667610ac0366004612a41565b611a23565b6104b3610ad3366004612b26565b6101396020526000908152604090205481565b61045d610af4366004612b82565b611a4c565b6104b36101335481565b61045d610b113660046129b1565b611b8e565b6104b361012e5481565b61045d610b2e366004612ddf565b611bed565b6104b3610b41366004612b26565b6101426020526000908152604090205481565b6065546001600160a01b03166104d4565b610b78610b73366004612daa565b611c90565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610441565b610435610bb3366004612b82565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b610435610bef3660046129b1565b6101416020526000908152604090205460ff1681565b6104b36101355481565b61045d610c1d366004612be9565b611ce9565b61045d610c30366004612a6d565b611d5a565b60006001600160e01b031982166380ac58cd60e01b1480610c6657506001600160e01b03198216635b5e139f60e01b145b80610c8157506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c8f611e24565b8051825114610cd65760405162461bcd60e51b815260206004820152600e60248201526d556e657175616c2041727261797360901b60448201526064015b60405180910390fd5b60005b8251811015610d4d57818181518110610cf457610cf4612e0b565b602002602001015161013a6000858481518110610d1357610d13612e0b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610cd9565b507fbf5096a6d1add2f85fe6ebea9648302d19fbbe070cd2addfd4feb0404e3c5ec78282604051610d7f929190612e21565b60405180910390a15050565b610d93611e24565b60008111610db45760405163f39f74b360e01b815260040160405180910390fd5b6101348190556040518181527f0be752d502ead9f7f68ae425a37976abee08f7d72a78e613d13a0c1ac153915f906020015b60405180910390a150565b606060c98054610e0090612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2c90612e7a565b8015610e795780601f10610e4e57610100808354040283529160200191610e79565b820191906000526020600020905b815481529060010190602001808311610e5c57829003601f168201915b5050505050905090565b6000610e8e82611e7e565b50600090815260cd60205260409020546001600160a01b031690565b6000610eb5826112dd565b9050806001600160a01b0316836001600160a01b031603610f225760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ccd565b336001600160a01b0382161480610f3e5750610f3e8133610bb3565b610fb05760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610ccd565b610fba8383611edd565b505050565b600081815261014060205260409020606090610c8190611f4b565b610fe43382611f58565b6110005760405162461bcd60e51b8152600401610ccd90612eb4565b610fba838383611fd7565b611013611e24565b6001600160a01b038216600090815261013b602052604081205460ff16906101478183600581111561104757611047612c8b565b600581111561105857611058612c8b565b8152602001908152602001600020549050600081116110b95760405162461bcd60e51b815260206004820152601d60248201527f4e6f206469737472696275746564206665657320617661696c61626c650000006044820152606401610ccd565b600061014760008460058111156110d2576110d2612c8b565b60058111156110e3576110e3612c8b565b81526020810191909152604001600020556111086001600160a01b038516848361213b565b826001600160a01b0316846001600160a01b03167fcbc4ab91c952e7e6ed4b369ec497a7aaf379137633bd4d355577a7c76419618b8360405161114d91815260200190565b60405180910390a350505050565b611163611e24565b6001600160a01b038216600081815261013c6020908152604091829020805460ff191685151590811790915591519182527f9db1cf179d0876ce4f974e3f64ddab5032746efc3c59432edf0e6b6e2bd2dfd091015b60405180910390a25050565b6111cc611e24565b600081116111ed576040516365fc48eb60e11b815260040160405180910390fd5b6101358190556040518181527f156aaac524effac794528a7ca0a1dbe7129a9b9d3f295b760d64bef536ca436090602001610de6565b610fba83838360405180602001604052806000815250611842565b611246611e24565b6001600160a01b03811661126d5760405163e6c4247b60e01b815260040160405180910390fd5b61013280546001600160a01b0319166001600160a01b0383169081179091556040517f5bb4a0f5a67f7c49cfc7820adfab4690a3752cf969544ddd8445b970d3643e8990600090a250565b6001600160a01b038116600090815261014b60205260409020606090610c8190611f4b565b600081815260cb60205260408120546001600160a01b031680610c815760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ccd565b60006001600160a01b0382166113a75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610ccd565b506001600160a01b0316600090815260cc602052604090205490565b6113cb611e24565b6113d5600061218d565b565b60655433906001600160a01b031681146114455760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610ccd565b61144e8161218d565b50565b611459611e24565b6001600160a01b03811661148057604051633408148f60e01b815260040160405180910390fd5b80610144600084600581111561149857611498612c8b565b60058111156114a9576114a9612c8b565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b0392831617905581168260058111156114e7576114e7612c8b565b6040517f69acf97fd12837c9357ae72cfdb1361a5bd84a74e37233e40a5f9110cbc9a75c90600090a35050565b61151c611e24565b6001600160a01b038116611543576040516334ae666d60e11b815260040160405180910390fd5b61012f8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040517f1beed9e24b9c447b27eb5862cdcacda05e4e55118ee98ef8083d0c83fb54c7bb90600090a250565b606060ca8054610e0090612e7a565b6115ad611e24565b61012f805460ff19168215159081179091556040519081527f4bd8979d750a61e726f6fd518e42571bc79eab2e9a5e89f2d8f3fb6d05ac576e90602001610de6565b6115f7611e24565b600081116116185760405163adce4e6160e01b815260040160405180910390fd5b6101338190556040518181527f71a72c53992c043705dbc76ba88418d35e5a069dce8a1aaadda0d798e142402f90602001610de6565b6116593383836121a6565b5050565b6116a86040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b600083815261013d60205260408120908360058111156116ca576116ca612c8b565b60058111156116db576116db612c8b565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c08201529392505050565b611756611e24565b6001600160a01b03811661177d5760405163e6c4247b60e01b815260040160405180910390fd5b61013180546001600160a01b0319166001600160a01b0383169081179091556040517f49c796b1e172f860133b87d22894b27200b2cbea8ffda486bf37e0cf803f53af90600090a250565b6117d0611e24565b6001600160a01b0381166117f75760405163e6c4247b60e01b815260040160405180910390fd5b61013080546001600160a01b0319166001600160a01b0383169081179091556040517fb91c20ae38c6bc22c2eb333490be8628525bc85a485bd9e20dce75a95de7a13290600090a250565b61184c3383611f58565b6118685760405162461bcd60e51b8152600401610ccd90612eb4565b61187484848484612274565b50505050565b600082815261014a602052604081206060916118c791908460058111156118a3576118a3612c8b565b60058111156118b4576118b4612c8b565b8152602001908152602001600020611f4b565b9392505050565b6119076040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600084815261013f602052604081209084600581111561192957611929612c8b565b600581111561193a5761193a612c8b565b815260200190815260200160002082633b9aca00811061195c5761195c612e0b565b600602016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505090509392505050565b60606119bb82611e7e565b60006119d260408051602081019091526000815290565b905060008151116119f257604051806020016040528060008152506118c7565b806119fc846122a7565b604051602001611a0d929190612f01565b6040516020818303038152906040529392505050565b6000828152610149602052604081206060916118c791908460058111156118a3576118a3612c8b565b611a54611e24565b6001600160a01b038216600090815261013b602052604081205460ff169061014681836005811115611a8857611a88612c8b565b6005811115611a9957611a99612c8b565b815260200190815260200160002054905060008111611afa5760405162461bcd60e51b815260206004820152601a60248201527f4e6f2070726f746f636f6c206665657320617661696c61626c650000000000006044820152606401610ccd565b60006101466000846005811115611b1357611b13612c8b565b6005811115611b2457611b24612c8b565b8152602081019190915260400160002055611b496001600160a01b038516848361213b565b826001600160a01b0316846001600160a01b03167f8fc241308ffc17817e6a8c6a52a8f7cd4931dfca0c539fd35a630311c7e4c57b8360405161114d91815260200190565b611b96611e24565b60008111611bb75760405163182ee11160e01b815260040160405180910390fd5b61012e8190556040518181527f066da2681c5121aabd66066271138cc311ba9ad71c54cdaeccc19cbe66c05b3090602001610de6565b611bf5611e24565b6001600160a01b038216611c1c57604051630f58058360e11b815260040160405180910390fd5b6001600160a01b038216600090815261013b60205260409020805482919060ff19166001836005811115611c5257611c52612c8b565b0217905550816001600160a01b03167f33a422346a4e32d03bc696513b91a0f308168216b86d2755c105915e98a84496826040516111b89190612ca1565b61013f60205282600052604060002060205281600052604060002081633b9aca008110611cbc57600080fd5b60060201805460018201546002830154600384015460048501546005909501549397509195509350919086565b611cf1611e24565b606580546001600160a01b0383166001600160a01b03199091168117909155611d226033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b611d62611e24565b60008111611d8357604051630deb46b560e01b815260040160405180910390fd5b6001600160a01b038216600090815261013b602052604081205460ff1690829061013990836005811115611db957611db9612c8b565b6005811115611dca57611dca612c8b565b815260200190815260200160002081905550826001600160a01b03167f981b29cb3dc7c129fa6efe203391595b7ab61b5e383bd381cef0ec1642ba68e783604051611e1791815260200190565b60405180910390a2505050565b6033546001600160a01b031633146113d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ccd565b600081815260cb60205260409020546001600160a01b031661144e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ccd565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f12826112dd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060006118c78361233a565b600080611f64836112dd565b9050806001600160a01b0316846001600160a01b03161480611fab57506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b80611fcf5750836001600160a01b0316611fc484610e83565b6001600160a01b0316145b949350505050565b826001600160a01b0316611fea826112dd565b6001600160a01b0316146120105760405162461bcd60e51b8152600401610ccd90612f30565b6001600160a01b0382166120725760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ccd565b826001600160a01b0316612085826112dd565b6001600160a01b0316146120ab5760405162461bcd60e51b8152600401610ccd90612f30565b600081815260cd6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260cc855283862080546000190190559087168086528386208054600101905586865260cb90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fba908490612396565b606580546001600160a01b031916905561144e81612468565b816001600160a01b0316836001600160a01b0316036122075760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ccd565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61227f848484611fd7565b61228b848484846124ba565b6118745760405162461bcd60e51b8152600401610ccd90612f75565b606060006122b4836125bb565b600101905060008167ffffffffffffffff8111156122d4576122d46127e9565b6040519080825280601f01601f1916602001820160405280156122fe576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461230857509392505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561238a57602002820191906000526020600020905b815481526020019060010190808311612376575b50505050509050919050565b60006123eb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126939092919063ffffffff16565b805190915015610fba57808060200190518101906124099190612fc7565b610fba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ccd565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156125b057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906124fe903390899088908890600401612fe4565b6020604051808303816000875af1925050508015612539575060408051601f3d908101601f1916820190925261253691810190613021565b60015b612596573d808015612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b50805160000361258e5760405162461bcd60e51b8152600401610ccd90612f75565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611fcf565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106125fa5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612626576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061264457662386f26fc10000830492506010015b6305f5e100831061265c576305f5e100830492506008015b612710831061267057612710830492506004015b60648310612682576064830492506002015b600a8310610c815760010192915050565b6060611fcf848460008585600080866001600160a01b031685876040516126ba919061303e565b60006040518083038185875af1925050503d80600081146126f7576040519150601f19603f3d011682016040523d82523d6000602084013e6126fc565b606091505b509150915061270d87838387612718565b979650505050505050565b60608315612787578251600003612780576001600160a01b0385163b6127805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ccd565b5081611fcf565b611fcf838381511561279c5781518083602001fd5b8060405162461bcd60e51b8152600401610ccd9190612a1a565b6001600160e01b03198116811461144e57600080fd5b6000602082840312156127de57600080fd5b81356118c7816127b6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612828576128286127e9565b604052919050565b600067ffffffffffffffff82111561284a5761284a6127e9565b5060051b60200190565b6001600160a01b038116811461144e57600080fd5b801515811461144e57600080fd5b600082601f83011261288857600080fd5b8135602061289d61289883612830565b6127ff565b8083825260208201915060208460051b8701019350868411156128bf57600080fd5b602086015b848110156128e45780356128d781612869565b83529183019183016128c4565b509695505050505050565b6000806040838503121561290257600080fd5b823567ffffffffffffffff8082111561291a57600080fd5b818501915085601f83011261292e57600080fd5b8135602061293e61289883612830565b82815260059290921b8401810191818101908984111561295d57600080fd5b948201945b8386101561298457853561297581612854565b82529482019490820190612962565b9650508601359250508082111561299a57600080fd5b506129a785828601612877565b9150509250929050565b6000602082840312156129c357600080fd5b5035919050565b60005b838110156129e55781810151838201526020016129cd565b50506000910152565b60008151808452612a068160208601602086016129ca565b601f01601f19169290920160200192915050565b6020815260006118c760208301846129ee565b803560068110612a3c57600080fd5b919050565b60008060408385031215612a5457600080fd5b82359150612a6460208401612a2d565b90509250929050565b60008060408385031215612a8057600080fd5b8235612a8b81612854565b946020939093013593505050565b60008151808452602080850194506020840160005b83811015612ad35781516001600160a01b031687529582019590820190600101612aae565b509495945050505050565b6020815260006118c76020830184612a99565b600080600060608486031215612b0657600080fd5b8335925060208401359150612b1d60408501612a2d565b90509250925092565b600060208284031215612b3857600080fd5b6118c782612a2d565b600080600060608486031215612b5657600080fd5b8335612b6181612854565b92506020840135612b7181612854565b929592945050506040919091013590565b60008060408385031215612b9557600080fd5b8235612ba081612854565b91506020830135612bb081612854565b809150509250929050565b60008060408385031215612bce57600080fd5b8235612bd981612854565b91506020830135612bb081612869565b600060208284031215612bfb57600080fd5b81356118c781612854565b6020808252825182820181905260009190848201906040850190845b81811015612c3e57835183529284019291840191600101612c22565b50909695505050505050565b60008060408385031215612c5d57600080fd5b823591506020830135612bb081612854565b60008060408385031215612c8257600080fd5b612ba083612a2d565b634e487b7160e01b600052602160045260246000fd5b6020810160068310612cc357634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215612cdb57600080fd5b81356118c781612869565b60008060008060808587031215612cfc57600080fd5b8435612d0781612854565b9350602085810135612d1881612854565b935060408601359250606086013567ffffffffffffffff80821115612d3c57600080fd5b818801915088601f830112612d5057600080fd5b813581811115612d6257612d626127e9565b612d74601f8201601f191685016127ff565b91508082528984828501011115612d8a57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080600060608486031215612dbf57600080fd5b83359250612dcf60208501612a2d565b9150604084013590509250925092565b60008060408385031215612df257600080fd5b8235612dfd81612854565b9150612a6460208401612a2d565b634e487b7160e01b600052603260045260246000fd5b604081526000612e346040830185612a99565b82810360208481019190915284518083528582019282019060005b81811015612e6d578451151583529383019391830191600101612e4f565b5090979650505050505050565b600181811c90821680612e8e57607f821691505b602082108103612eae57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008351612f138184602088016129ca565b835190830190612f278183602088016129ca565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060208284031215612fd957600080fd5b81516118c781612869565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613017908301846129ee565b9695505050505050565b60006020828403121561303357600080fd5b81516118c7816127b6565b600082516130508184602087016129ca565b919091019291505056fea26469706673582212207a9254cddce495ef40f18074ee70a909ac42c203aa8e64a74951f50af5a03db064736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061041d5760003560e01c806392415b081161022b578063c155bcc011610130578063e10bbe53116100b8578063e985e9c511610087578063e985e9c514610ba5578063ec09409514610be1578063eec83d8714610c05578063f2fde38b14610c0f578063fab64d1c14610c2257600080fd5b8063e10bbe5314610b20578063e1d514bd14610b33578063e30c397814610b54578063e526789414610b6557600080fd5b8063cc8cb245116100ff578063cc8cb24514610ac5578063cf7b287f14610ae6578063d8a8261114610af9578063d9e3eee214610b03578063df25197414610b1657600080fd5b8063c155bcc014610a1c578063c682ee6814610a7b578063c87b56dd14610a9f578063c9ebe07414610ab257600080fd5b8063ab2d99db116101b3578063b88d4fde11610182578063b88d4fde14610995578063b92a20fa146109a8578063b9e77c5f146109bb578063ba99c4df146109cf578063bae1cb5e146109fb57600080fd5b8063ab2d99db14610930578063ad975d711461093a578063b1113baf14610953578063b5250df31461098257600080fd5b80639ac1cc9d116101fa5780639ac1cc9d146107e7578063a22cb4651461088c578063a285ab8f1461089f578063a7d1ea851461090e578063aaf5eb681461092157600080fd5b806392415b081461078857806395d89b41146107b957806397f819a3146107c157806398008116146107d457600080fd5b80633d2cdbd11161033157806370a08231116102b95780637f8f6768116102885780637f8f67681461071c57806380e13a571461072f57806384cf379c146107505780638da5cb5b14610764578063907aa86a1461077557600080fd5b806370a08231146106d5578063715018a6146106e857806372b4c276146106f057806379ba50971461071457600080fd5b80634fac7e41116103005780634fac7e4114610654578063535d9aaf146106745780636352211e146106a05780636b2fe4c7146106b35780636cbdce56146106c157600080fd5b80633d2cdbd11461060757806342787d2a1461061b57806342842e0e1461062e5780634bc2a6571461064157600080fd5b806312ba89ef116103b457806323b872dd1161038357806323b872dd14610590578063282bbb3d146105a35780632879e840146105b657806333230dc0146105e05780633c4f743c146105f357600080fd5b806312ba89ef1461051f57806314b3bdde14610551578063171314f1146105655780631df595c71461056f57600080fd5b806307b67fe8116103f057806307b67fe814610487578063081812fc146104c1578063095ea7b3146104ec57806311e7b0ee146104ff57600080fd5b806301ffc9a71461042257806303de63551461044a57806304f6c0ef1461045f57806306fdde0314610472575b600080fd5b6104356104303660046127cc565b610c35565b60405190151581526020015b60405180910390f35b61045d6104583660046128ef565b610c87565b005b61045d61046d3660046129b1565b610d8b565b61047a610df1565b6040516104419190612a1a565b6104b3610495366004612a41565b61013e60209081526000928352604080842090915290825290205481565b604051908152602001610441565b6104d46104cf3660046129b1565b610e83565b6040516001600160a01b039091168152602001610441565b61045d6104fa366004612a6d565b610eaa565b61051261050d3660046129b1565b610fbf565b6040516104419190612ade565b6104b361052d366004612af1565b61014860209081526000938452604080852082529284528284209052825290205481565b610137546104d4906001600160a01b031681565b6104b361012d5481565b6104b361057d366004612b26565b6101466020526000908152604090205481565b61045d61059e366004612b41565b610fda565b61045d6105b1366004612b82565b61100b565b6104d46105c4366004612b26565b610144602052600090815260409020546001600160a01b031681565b61045d6105ee366004612bbb565b61115b565b610136546104d4906001600160a01b031681565b610131546104d4906001600160a01b031681565b61045d6106293660046129b1565b6111c4565b61045d61063c366004612b41565b611223565b61045d61064f366004612be9565b61123e565b610667610662366004612be9565b6112b8565b6040516104419190612c06565b6104b3610682366004612c4a565b61014560209081526000928352604080842090915290825290205481565b6104d46106ae3660046129b1565b6112dd565b61012f546104359060ff1681565b610130546104d4906001600160a01b031681565b6104b36106e3366004612be9565b61133d565b61045d6113c3565b6104356106fe366004612be9565b61013a6020526000908152604090205460ff1681565b61045d6113d7565b61045d61072a366004612c6f565b611451565b6104b361073d366004612b26565b6101476020526000908152604090205481565b610138546104d4906001600160a01b031681565b6033546001600160a01b03166104d4565b61045d610783366004612be9565b611514565b6107ac610796366004612be9565b61013b6020526000908152604090205460ff1681565b6040516104419190612ca1565b61047a611596565b61045d6107cf366004612cc9565b6115a5565b61045d6107e23660046129b1565b6115ef565b61084b6107f5366004612a41565b61013d60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0390951695939492939192909160ff169087565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091526080840152151560a083015260c082015260e001610441565b61045d61089a366004612bbb565b61164e565b6108b26108ad366004612a41565b61165d565b604051610441919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a08281015115159082015260c0918201519181019190915260e00190565b61045d61091c366004612be9565b61174e565b6104b3670de0b6b3a764000081565b6104b36101345481565b61012f546104d49061010090046001600160a01b031681565b610435610961366004612c4a565b61014d60209081526000928352604080842090915290825290205460ff1681565b61045d610990366004612be9565b6117c8565b61045d6109a3366004612ce6565b611842565b6106676109b6366004612a41565b61187a565b610132546104d4906001600160a01b031681565b6104b36109dd366004612b82565b61014c60209081526000928352604080842090915290825290205481565b6104b3610a09366004612b26565b6101436020526000908152604090205481565b610a2f610a2a366004612daa565b6118ce565b6040516104419190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b610435610a89366004612be9565b61013c6020526000908152604090205460ff1681565b61047a610aad3660046129b1565b6119b0565b610667610ac0366004612a41565b611a23565b6104b3610ad3366004612b26565b6101396020526000908152604090205481565b61045d610af4366004612b82565b611a4c565b6104b36101335481565b61045d610b113660046129b1565b611b8e565b6104b361012e5481565b61045d610b2e366004612ddf565b611bed565b6104b3610b41366004612b26565b6101426020526000908152604090205481565b6065546001600160a01b03166104d4565b610b78610b73366004612daa565b611c90565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610441565b610435610bb3366004612b82565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b610435610bef3660046129b1565b6101416020526000908152604090205460ff1681565b6104b36101355481565b61045d610c1d366004612be9565b611ce9565b61045d610c30366004612a6d565b611d5a565b60006001600160e01b031982166380ac58cd60e01b1480610c6657506001600160e01b03198216635b5e139f60e01b145b80610c8157506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c8f611e24565b8051825114610cd65760405162461bcd60e51b815260206004820152600e60248201526d556e657175616c2041727261797360901b60448201526064015b60405180910390fd5b60005b8251811015610d4d57818181518110610cf457610cf4612e0b565b602002602001015161013a6000858481518110610d1357610d13612e0b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610cd9565b507fbf5096a6d1add2f85fe6ebea9648302d19fbbe070cd2addfd4feb0404e3c5ec78282604051610d7f929190612e21565b60405180910390a15050565b610d93611e24565b60008111610db45760405163f39f74b360e01b815260040160405180910390fd5b6101348190556040518181527f0be752d502ead9f7f68ae425a37976abee08f7d72a78e613d13a0c1ac153915f906020015b60405180910390a150565b606060c98054610e0090612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2c90612e7a565b8015610e795780601f10610e4e57610100808354040283529160200191610e79565b820191906000526020600020905b815481529060010190602001808311610e5c57829003601f168201915b5050505050905090565b6000610e8e82611e7e565b50600090815260cd60205260409020546001600160a01b031690565b6000610eb5826112dd565b9050806001600160a01b0316836001600160a01b031603610f225760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ccd565b336001600160a01b0382161480610f3e5750610f3e8133610bb3565b610fb05760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610ccd565b610fba8383611edd565b505050565b600081815261014060205260409020606090610c8190611f4b565b610fe43382611f58565b6110005760405162461bcd60e51b8152600401610ccd90612eb4565b610fba838383611fd7565b611013611e24565b6001600160a01b038216600090815261013b602052604081205460ff16906101478183600581111561104757611047612c8b565b600581111561105857611058612c8b565b8152602001908152602001600020549050600081116110b95760405162461bcd60e51b815260206004820152601d60248201527f4e6f206469737472696275746564206665657320617661696c61626c650000006044820152606401610ccd565b600061014760008460058111156110d2576110d2612c8b565b60058111156110e3576110e3612c8b565b81526020810191909152604001600020556111086001600160a01b038516848361213b565b826001600160a01b0316846001600160a01b03167fcbc4ab91c952e7e6ed4b369ec497a7aaf379137633bd4d355577a7c76419618b8360405161114d91815260200190565b60405180910390a350505050565b611163611e24565b6001600160a01b038216600081815261013c6020908152604091829020805460ff191685151590811790915591519182527f9db1cf179d0876ce4f974e3f64ddab5032746efc3c59432edf0e6b6e2bd2dfd091015b60405180910390a25050565b6111cc611e24565b600081116111ed576040516365fc48eb60e11b815260040160405180910390fd5b6101358190556040518181527f156aaac524effac794528a7ca0a1dbe7129a9b9d3f295b760d64bef536ca436090602001610de6565b610fba83838360405180602001604052806000815250611842565b611246611e24565b6001600160a01b03811661126d5760405163e6c4247b60e01b815260040160405180910390fd5b61013280546001600160a01b0319166001600160a01b0383169081179091556040517f5bb4a0f5a67f7c49cfc7820adfab4690a3752cf969544ddd8445b970d3643e8990600090a250565b6001600160a01b038116600090815261014b60205260409020606090610c8190611f4b565b600081815260cb60205260408120546001600160a01b031680610c815760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ccd565b60006001600160a01b0382166113a75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610ccd565b506001600160a01b0316600090815260cc602052604090205490565b6113cb611e24565b6113d5600061218d565b565b60655433906001600160a01b031681146114455760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610ccd565b61144e8161218d565b50565b611459611e24565b6001600160a01b03811661148057604051633408148f60e01b815260040160405180910390fd5b80610144600084600581111561149857611498612c8b565b60058111156114a9576114a9612c8b565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b0392831617905581168260058111156114e7576114e7612c8b565b6040517f69acf97fd12837c9357ae72cfdb1361a5bd84a74e37233e40a5f9110cbc9a75c90600090a35050565b61151c611e24565b6001600160a01b038116611543576040516334ae666d60e11b815260040160405180910390fd5b61012f8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040517f1beed9e24b9c447b27eb5862cdcacda05e4e55118ee98ef8083d0c83fb54c7bb90600090a250565b606060ca8054610e0090612e7a565b6115ad611e24565b61012f805460ff19168215159081179091556040519081527f4bd8979d750a61e726f6fd518e42571bc79eab2e9a5e89f2d8f3fb6d05ac576e90602001610de6565b6115f7611e24565b600081116116185760405163adce4e6160e01b815260040160405180910390fd5b6101338190556040518181527f71a72c53992c043705dbc76ba88418d35e5a069dce8a1aaadda0d798e142402f90602001610de6565b6116593383836121a6565b5050565b6116a86040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b600083815261013d60205260408120908360058111156116ca576116ca612c8b565b60058111156116db576116db612c8b565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c08201529392505050565b611756611e24565b6001600160a01b03811661177d5760405163e6c4247b60e01b815260040160405180910390fd5b61013180546001600160a01b0319166001600160a01b0383169081179091556040517f49c796b1e172f860133b87d22894b27200b2cbea8ffda486bf37e0cf803f53af90600090a250565b6117d0611e24565b6001600160a01b0381166117f75760405163e6c4247b60e01b815260040160405180910390fd5b61013080546001600160a01b0319166001600160a01b0383169081179091556040517fb91c20ae38c6bc22c2eb333490be8628525bc85a485bd9e20dce75a95de7a13290600090a250565b61184c3383611f58565b6118685760405162461bcd60e51b8152600401610ccd90612eb4565b61187484848484612274565b50505050565b600082815261014a602052604081206060916118c791908460058111156118a3576118a3612c8b565b60058111156118b4576118b4612c8b565b8152602001908152602001600020611f4b565b9392505050565b6119076040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600084815261013f602052604081209084600581111561192957611929612c8b565b600581111561193a5761193a612c8b565b815260200190815260200160002082633b9aca00811061195c5761195c612e0b565b600602016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505090509392505050565b60606119bb82611e7e565b60006119d260408051602081019091526000815290565b905060008151116119f257604051806020016040528060008152506118c7565b806119fc846122a7565b604051602001611a0d929190612f01565b6040516020818303038152906040529392505050565b6000828152610149602052604081206060916118c791908460058111156118a3576118a3612c8b565b611a54611e24565b6001600160a01b038216600090815261013b602052604081205460ff169061014681836005811115611a8857611a88612c8b565b6005811115611a9957611a99612c8b565b815260200190815260200160002054905060008111611afa5760405162461bcd60e51b815260206004820152601a60248201527f4e6f2070726f746f636f6c206665657320617661696c61626c650000000000006044820152606401610ccd565b60006101466000846005811115611b1357611b13612c8b565b6005811115611b2457611b24612c8b565b8152602081019190915260400160002055611b496001600160a01b038516848361213b565b826001600160a01b0316846001600160a01b03167f8fc241308ffc17817e6a8c6a52a8f7cd4931dfca0c539fd35a630311c7e4c57b8360405161114d91815260200190565b611b96611e24565b60008111611bb75760405163182ee11160e01b815260040160405180910390fd5b61012e8190556040518181527f066da2681c5121aabd66066271138cc311ba9ad71c54cdaeccc19cbe66c05b3090602001610de6565b611bf5611e24565b6001600160a01b038216611c1c57604051630f58058360e11b815260040160405180910390fd5b6001600160a01b038216600090815261013b60205260409020805482919060ff19166001836005811115611c5257611c52612c8b565b0217905550816001600160a01b03167f33a422346a4e32d03bc696513b91a0f308168216b86d2755c105915e98a84496826040516111b89190612ca1565b61013f60205282600052604060002060205281600052604060002081633b9aca008110611cbc57600080fd5b60060201805460018201546002830154600384015460048501546005909501549397509195509350919086565b611cf1611e24565b606580546001600160a01b0383166001600160a01b03199091168117909155611d226033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b611d62611e24565b60008111611d8357604051630deb46b560e01b815260040160405180910390fd5b6001600160a01b038216600090815261013b602052604081205460ff1690829061013990836005811115611db957611db9612c8b565b6005811115611dca57611dca612c8b565b815260200190815260200160002081905550826001600160a01b03167f981b29cb3dc7c129fa6efe203391595b7ab61b5e383bd381cef0ec1642ba68e783604051611e1791815260200190565b60405180910390a2505050565b6033546001600160a01b031633146113d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ccd565b600081815260cb60205260409020546001600160a01b031661144e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ccd565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f12826112dd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060006118c78361233a565b600080611f64836112dd565b9050806001600160a01b0316846001600160a01b03161480611fab57506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b80611fcf5750836001600160a01b0316611fc484610e83565b6001600160a01b0316145b949350505050565b826001600160a01b0316611fea826112dd565b6001600160a01b0316146120105760405162461bcd60e51b8152600401610ccd90612f30565b6001600160a01b0382166120725760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ccd565b826001600160a01b0316612085826112dd565b6001600160a01b0316146120ab5760405162461bcd60e51b8152600401610ccd90612f30565b600081815260cd6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260cc855283862080546000190190559087168086528386208054600101905586865260cb90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fba908490612396565b606580546001600160a01b031916905561144e81612468565b816001600160a01b0316836001600160a01b0316036122075760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ccd565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61227f848484611fd7565b61228b848484846124ba565b6118745760405162461bcd60e51b8152600401610ccd90612f75565b606060006122b4836125bb565b600101905060008167ffffffffffffffff8111156122d4576122d46127e9565b6040519080825280601f01601f1916602001820160405280156122fe576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461230857509392505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561238a57602002820191906000526020600020905b815481526020019060010190808311612376575b50505050509050919050565b60006123eb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126939092919063ffffffff16565b805190915015610fba57808060200190518101906124099190612fc7565b610fba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ccd565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156125b057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906124fe903390899088908890600401612fe4565b6020604051808303816000875af1925050508015612539575060408051601f3d908101601f1916820190925261253691810190613021565b60015b612596573d808015612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b50805160000361258e5760405162461bcd60e51b8152600401610ccd90612f75565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611fcf565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106125fa5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612626576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061264457662386f26fc10000830492506010015b6305f5e100831061265c576305f5e100830492506008015b612710831061267057612710830492506004015b60648310612682576064830492506002015b600a8310610c815760010192915050565b6060611fcf848460008585600080866001600160a01b031685876040516126ba919061303e565b60006040518083038185875af1925050503d80600081146126f7576040519150601f19603f3d011682016040523d82523d6000602084013e6126fc565b606091505b509150915061270d87838387612718565b979650505050505050565b60608315612787578251600003612780576001600160a01b0385163b6127805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ccd565b5081611fcf565b611fcf838381511561279c5781518083602001fd5b8060405162461bcd60e51b8152600401610ccd9190612a1a565b6001600160e01b03198116811461144e57600080fd5b6000602082840312156127de57600080fd5b81356118c7816127b6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612828576128286127e9565b604052919050565b600067ffffffffffffffff82111561284a5761284a6127e9565b5060051b60200190565b6001600160a01b038116811461144e57600080fd5b801515811461144e57600080fd5b600082601f83011261288857600080fd5b8135602061289d61289883612830565b6127ff565b8083825260208201915060208460051b8701019350868411156128bf57600080fd5b602086015b848110156128e45780356128d781612869565b83529183019183016128c4565b509695505050505050565b6000806040838503121561290257600080fd5b823567ffffffffffffffff8082111561291a57600080fd5b818501915085601f83011261292e57600080fd5b8135602061293e61289883612830565b82815260059290921b8401810191818101908984111561295d57600080fd5b948201945b8386101561298457853561297581612854565b82529482019490820190612962565b9650508601359250508082111561299a57600080fd5b506129a785828601612877565b9150509250929050565b6000602082840312156129c357600080fd5b5035919050565b60005b838110156129e55781810151838201526020016129cd565b50506000910152565b60008151808452612a068160208601602086016129ca565b601f01601f19169290920160200192915050565b6020815260006118c760208301846129ee565b803560068110612a3c57600080fd5b919050565b60008060408385031215612a5457600080fd5b82359150612a6460208401612a2d565b90509250929050565b60008060408385031215612a8057600080fd5b8235612a8b81612854565b946020939093013593505050565b60008151808452602080850194506020840160005b83811015612ad35781516001600160a01b031687529582019590820190600101612aae565b509495945050505050565b6020815260006118c76020830184612a99565b600080600060608486031215612b0657600080fd5b8335925060208401359150612b1d60408501612a2d565b90509250925092565b600060208284031215612b3857600080fd5b6118c782612a2d565b600080600060608486031215612b5657600080fd5b8335612b6181612854565b92506020840135612b7181612854565b929592945050506040919091013590565b60008060408385031215612b9557600080fd5b8235612ba081612854565b91506020830135612bb081612854565b809150509250929050565b60008060408385031215612bce57600080fd5b8235612bd981612854565b91506020830135612bb081612869565b600060208284031215612bfb57600080fd5b81356118c781612854565b6020808252825182820181905260009190848201906040850190845b81811015612c3e57835183529284019291840191600101612c22565b50909695505050505050565b60008060408385031215612c5d57600080fd5b823591506020830135612bb081612854565b60008060408385031215612c8257600080fd5b612ba083612a2d565b634e487b7160e01b600052602160045260246000fd5b6020810160068310612cc357634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215612cdb57600080fd5b81356118c781612869565b60008060008060808587031215612cfc57600080fd5b8435612d0781612854565b9350602085810135612d1881612854565b935060408601359250606086013567ffffffffffffffff80821115612d3c57600080fd5b818801915088601f830112612d5057600080fd5b813581811115612d6257612d626127e9565b612d74601f8201601f191685016127ff565b91508082528984828501011115612d8a57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080600060608486031215612dbf57600080fd5b83359250612dcf60208501612a2d565b9150604084013590509250925092565b60008060408385031215612df257600080fd5b8235612dfd81612854565b9150612a6460208401612a2d565b634e487b7160e01b600052603260045260246000fd5b604081526000612e346040830185612a99565b82810360208481019190915284518083528582019282019060005b81811015612e6d578451151583529383019391830191600101612e4f565b5090979650505050505050565b600181811c90821680612e8e57607f821691505b602082108103612eae57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008351612f138184602088016129ca565b835190830190612f278183602088016129ca565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060208284031215612fd957600080fd5b81516118c781612869565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613017908301846129ee565b9695505050505050565b60006020828403121561303357600080fd5b81516118c7816127b6565b600082516130508184602087016129ca565b919091019291505056fea26469706673582212207a9254cddce495ef40f18074ee70a909ac42c203aa8e64a74951f50af5a03db064736f6c63430008160033",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getAssetsLocked(uint256)": {
        "params": {
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "An array of addresses representing the locked assets."
        }
      },
      "getDelegatees(uint256,uint8)": {
        "params": {
          "_lpType": "The LP token type.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "An array of delegatee IDs."
        }
      },
      "getDelegators(uint256,uint8)": {
        "params": {
          "_lpType": "The LP token type.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "An array of delegator IDs."
        }
      },
      "getOwnedTokenIds(address)": {
        "params": {
          "_owner": "The address of the owner."
        },
        "returns": {
          "_0": "An array of token IDs owned by the address."
        }
      },
      "getUserLock(uint256,uint8)": {
        "params": {
          "_lpType": "The LP token type.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "A LockedBalance struct containing lock details."
        }
      },
      "getUserPoint(uint256,uint8,uint256)": {
        "params": {
          "_epoch": "The epoch number.",
          "_lpType": "The LP token type.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "A UserPoint struct containing user point details."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAeroVoterBoost(uint256)": {
        "params": {
          "_aeroVoterBoost": "The boost amount for Aero Voter."
        }
      },
      "setAeroVoting(address)": {
        "params": {
          "_aeroVoting": "The address of the Aero Voting contract."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setIonicPool(address)": {
        "params": {
          "_ionicPool": "The address of the Ionic Pool."
        }
      },
      "setLimitedTimeBoost(uint256)": {
        "params": {
          "_boostAmount": "The amount of the boost."
        }
      },
      "setLpTokenType(address,uint8)": {
        "params": {
          "_token": "The address of the token.",
          "_type": "The LP token type."
        }
      },
      "setMaxEarlyWithdrawFee(uint256)": {
        "params": {
          "_maxEarlyWithdrawFee": "The maximum fee for early withdrawal."
        }
      },
      "setMinimumLockAmount(address,uint256)": {
        "params": {
          "_minimumAmount": "The minimum amount to lock.",
          "_tokenAddress": "The address of the token."
        }
      },
      "setMinimumLockDuration(uint256)": {
        "params": {
          "_minimumLockDuration": "The minimum duration for locking."
        }
      },
      "setStakeStrategy(uint8,address)": {
        "params": {
          "_lpType": "The LP token type.",
          "_strategy": "The stake strategy."
        }
      },
      "setVeAERO(address)": {
        "params": {
          "_veAERO": "The address of the veAERO contract."
        }
      },
      "setVoter(address)": {
        "params": {
          "_voter": "The address of the voter."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "toggleLimitedBoost(bool)": {
        "params": {
          "_isBoosted": "Boolean indicating if the boost is active."
        }
      },
      "toggleSplit(address,bool)": {
        "params": {
          "_account": "The address of the account.",
          "_isAllowed": "Boolean indicating if splitting is allowed."
        }
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "whitelistTokens(address[],bool[])": {
        "params": {
          "_isWhitelisted": "An array of booleans indicating the whitelist status for each token.",
          "_tokens": "An array of token addresses to be whitelisted or removed."
        }
      },
      "withdrawDistributedFees(address,address)": {
        "params": {
          "_recipient": "The address to which the distributed fees will be sent.",
          "_tokenAddress": "The address of the token for which distributed fees are to be withdrawn."
        }
      },
      "withdrawProtocolFees(address,address)": {
        "params": {
          "_recipient": "The address to which the protocol fees will be sent.",
          "_tokenAddress": "The address of the token for which protocol fees are to be withdrawn."
        }
      }
    },
    "title": "veION Contract Second Extension",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PRECISION()": {
        "notice": "Precision used for calculations, set to 1e18."
      },
      "ap()": {
        "notice": "The AddressesProvider contract used for address management."
      },
      "getAssetsLocked(uint256)": {
        "notice": "Retrieves the assets locked for a specific token ID."
      },
      "getDelegatees(uint256,uint8)": {
        "notice": "Retrieves the delegatees for a specific token ID and LP token type."
      },
      "getDelegators(uint256,uint8)": {
        "notice": "Retrieves the delegators for a specific token ID and LP token type."
      },
      "getOwnedTokenIds(address)": {
        "notice": "Retrieves the token IDs owned by a specific address."
      },
      "getUserLock(uint256,uint8)": {
        "notice": "Retrieves the lock information for a specific user."
      },
      "getUserPoint(uint256,uint8,uint256)": {
        "notice": "Retrieves the user point for a specific token ID, LP token type, and epoch."
      },
      "s_aeroVoterBoost()": {
        "notice": "The boost amount for AeroVoter."
      },
      "s_aeroVoting()": {
        "notice": "Address of the AeroVoting contract."
      },
      "s_ionicPool()": {
        "notice": "Address of the Ionic Pool."
      },
      "s_limitedBoost()": {
        "notice": "The amount of limited boost available."
      },
      "s_limitedBoostActive()": {
        "notice": "Indicates whether the limited boost is active."
      },
      "s_maxEarlyWithdrawFee()": {
        "notice": "The maximum fee for early withdrawal."
      },
      "s_minimumLockDuration()": {
        "notice": "The minimum duration for locking."
      },
      "s_tokenId()": {
        "notice": "The current token ID counter."
      },
      "s_veAERO()": {
        "notice": "Address of the veAERO contract."
      },
      "s_voter()": {
        "notice": "Address of the voter contract."
      },
      "setAeroVoterBoost(uint256)": {
        "notice": "Sets the boost amount for Aero Voter."
      },
      "setAeroVoting(address)": {
        "notice": "Sets the address of the Aero Voting contract."
      },
      "setIonicPool(address)": {
        "notice": "Sets the address of the Ionic Pool."
      },
      "setLimitedTimeBoost(uint256)": {
        "notice": "Sets the amount for a limited time boost."
      },
      "setLpTokenType(address,uint8)": {
        "notice": "Sets the LP token type for a specific token."
      },
      "setMaxEarlyWithdrawFee(uint256)": {
        "notice": "Sets the maximum early withdrawal fee."
      },
      "setMinimumLockAmount(address,uint256)": {
        "notice": "Sets the minimum lock amount for a specific token."
      },
      "setMinimumLockDuration(uint256)": {
        "notice": "Sets the minimum lock duration."
      },
      "setStakeStrategy(uint8,address)": {
        "notice": "Sets the stake strategy for a specific LP token type."
      },
      "setVeAERO(address)": {
        "notice": "Sets the address of the veAERO contract."
      },
      "setVoter(address)": {
        "notice": "Sets the address of the voter."
      },
      "toggleLimitedBoost(bool)": {
        "notice": "Toggles the limited boost feature."
      },
      "toggleSplit(address,bool)": {
        "notice": "Toggles the ability to split tokens for a specific account."
      },
      "veIONFirstExtension()": {
        "notice": "The address of the logic contract for the veION first extension."
      },
      "veIONSecondExtension()": {
        "notice": "The address of the logic contract for the veION second extension."
      },
      "whitelistTokens(address[],bool[])": {
        "notice": "Whitelists or removes tokens from the whitelist."
      },
      "withdrawDistributedFees(address,address)": {
        "notice": "Withdraws distributed fees for a specific token to a recipient address."
      },
      "withdrawProtocolFees(address,address)": {
        "notice": "Withdraws protocol fees for a specific token to a recipient address."
      }
    },
    "notice": "This contract manages the veION framework, enabling the staking and management LP tokens for voting power.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2341,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2641,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 903,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 905,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 909,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_owners",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 913,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_balances",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 917,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 923,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1854,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 38683,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_tokenId",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 38686,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_limitedBoost",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 38689,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_limitedBoostActive",
        "offset": 0,
        "slot": "303",
        "type": "t_bool"
      },
      {
        "astId": 38692,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_veAERO",
        "offset": 1,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 38695,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_aeroVoting",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 38698,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_ionicPool",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 38701,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_voter",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 38704,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_aeroVoterBoost",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 38707,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_minimumLockDuration",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 38710,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_maxEarlyWithdrawFee",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 38714,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "ap",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IAddressesProvider)31261"
      },
      {
        "astId": 38717,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "veIONFirstExtension",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      },
      {
        "astId": 38720,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "veIONSecondExtension",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 38726,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_minimumLockAmount",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38731,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_whitelistedToken",
        "offset": 0,
        "slot": "314",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 38737,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_lpType",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_address,t_enum(LpTokenType)31614)"
      },
      {
        "astId": 38742,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_canSplit",
        "offset": 0,
        "slot": "316",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 38751,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_locked",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(LockedBalance)31557_storage))"
      },
      {
        "astId": 38759,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_userPointEpoch",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256))"
      },
      {
        "astId": 38770,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_userPointHistory",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_array(t_struct(UserPoint)31577_storage)1000000000_storage))"
      },
      {
        "astId": 38776,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_assetsLocked",
        "offset": 0,
        "slot": "320",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)7269_storage)"
      },
      {
        "astId": 38781,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_voted",
        "offset": 0,
        "slot": "321",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 38787,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_supply",
        "offset": 0,
        "slot": "322",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38793,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_permanentLockBalance",
        "offset": 0,
        "slot": "323",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38800,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_stakeStrategy",
        "offset": 0,
        "slot": "324",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_contract(IStakeStrategy)32404)"
      },
      {
        "astId": 38807,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_underlyingStake",
        "offset": 0,
        "slot": "325",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 38813,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_protocolFees",
        "offset": 0,
        "slot": "326",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38819,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_distributedFees",
        "offset": 0,
        "slot": "327",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38829,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_delegations",
        "offset": 0,
        "slot": "328",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256)))"
      },
      {
        "astId": 38838,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_delegatees",
        "offset": 0,
        "slot": "329",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage))"
      },
      {
        "astId": 38847,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_delegators",
        "offset": 0,
        "slot": "330",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage))"
      },
      {
        "astId": 38853,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_ownerToTokenIds",
        "offset": 0,
        "slot": "331",
        "type": "t_mapping(t_address,t_struct(UintSet)7426_storage)"
      },
      {
        "astId": 38860,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_userCumulativeAssetValues",
        "offset": 0,
        "slot": "332",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 38867,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_delegatorsBlocked",
        "offset": 0,
        "slot": "333",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 38871,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "334",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserPoint)31577_storage)1000000000_storage": {
        "base": "t_struct(UserPoint)31577_storage",
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]",
        "numberOfBytes": "192000000000"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressesProvider)31261": {
        "encoding": "inplace",
        "label": "contract IAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IStakeStrategy)32404": {
        "encoding": "inplace",
        "label": "contract IStakeStrategy",
        "numberOfBytes": "20"
      },
      "t_enum(LpTokenType)31614": {
        "encoding": "inplace",
        "label": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(LpTokenType)31614)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IveIONStructsEnumsErrorsEvents.LpTokenType)",
        "numberOfBytes": "32",
        "value": "t_enum(LpTokenType)31614"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)7426_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)7426_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_array(t_struct(UserPoint)31577_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserPoint)31577_storage)1000000000_storage"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_contract(IStakeStrategy)32404)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => contract IStakeStrategy)",
        "numberOfBytes": "32",
        "value": "t_contract(IStakeStrategy)32404"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_struct(LockedBalance)31557_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)31557_storage"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)7426_storage"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_array(t_struct(UserPoint)31577_storage)1000000000_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)31614,t_array(t_struct(UserPoint)31577_storage)1000000000_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(LockedBalance)31557_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.LockedBalance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)31614,t_struct(LockedBalance)31557_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct EnumerableSet.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256))"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)7269_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7269_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7269_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7268,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6954_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockedBalance)31557_storage": {
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.LockedBalance",
        "members": [
          {
            "astId": 31544,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 31546,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31548,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "delegateAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31550,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "start",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 31552,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "end",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 31554,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "isPermanent",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 31556,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "boost",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)6954_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6949,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6953,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)7426_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 7425,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6954_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserPoint)31577_storage": {
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.UserPoint",
        "members": [
          {
            "astId": 31566,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31568,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "slope",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31570,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "ts",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31572,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "blk",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 31574,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "permanent",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 31576,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "permanentDelegate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}