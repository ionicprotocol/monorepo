{
  "address": "0x26afCE6fdd6Fe80499A6aF11bCad3EA9eB8bf260",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AeroBoostAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BoostAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStrategyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVeAEROAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationNotInFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxEarlyWithdrawFeeMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumLockDurationMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumNotMet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId2",
          "type": "uint256"
        }
      ],
      "name": "NoDelegationBetweenTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLockFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoUnderlyingStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAcceptingDelegators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughRemainingAfterSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVoter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasDelegatees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasDelegators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAeroVoterBoost",
          "type": "uint256"
        }
      ],
      "name": "AeroVoterBoostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAeroVoting",
          "type": "address"
        }
      ],
      "name": "AeroVotingSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelegationRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_blocked",
          "type": "bool"
        }
      ],
      "name": "DelegatorsBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.DepositType",
          "name": "depositType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "EmissionsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_firstExtension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_secondExtension",
          "type": "address"
        }
      ],
      "name": "ExtensionsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressesProvider",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newIonicPool",
          "type": "address"
        }
      ],
      "name": "IonicPoolSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBoosted",
          "type": "bool"
        }
      ],
      "name": "LimitedBoostToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boostAmount",
          "type": "uint256"
        }
      ],
      "name": "LimitedTimeBoostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "lpTokenType",
          "type": "uint8"
        }
      ],
      "name": "LpTokenTypeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxEarlyWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "MaxEarlyWithdrawFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetsLocked",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lengthOfAssets",
          "type": "uint256"
        }
      ],
      "name": "MergeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "MinimumLockAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDuration",
          "type": "uint256"
        }
      ],
      "name": "MinimumLockDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PermanentLockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PermanentLockRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "splitAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "SplitCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "SplitToggle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "lpTokenType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StakeStrategySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "isWhitelisted",
          "type": "bool[]"
        }
      ],
      "name": "TokensWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "veAERO",
          "type": "address"
        }
      ],
      "name": "VeAEROSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_voting",
          "type": "bool"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newVoter",
          "type": "address"
        }
      ],
      "name": "VoterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_blocked",
          "type": "bool"
        }
      ],
      "name": "allowDelegators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ap",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "balanceOfNFT",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_boosts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "claimEmissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getTotalEthValueOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "merge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "toTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "removeDelegatees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_aeroVoterBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_aeroVoting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_canSplit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_delegations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_delegatorsBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_distributedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_ionicPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_limitedBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_limitedBoostActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_locked",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delegateAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPermanent",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_lpType",
      "outputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_maxEarlyWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_minimumLockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_minimumLockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_permanentLockBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_protocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_stakeStrategy",
      "outputs": [
        {
          "internalType": "contract IStakeStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_underlyingStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userCumulativeAssetValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_userPointHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bias",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slope",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permanent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permanentDelegate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_veAERO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_voted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_whitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_splitAmount",
          "type": "uint256"
        }
      ],
      "name": "split",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId2",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veIONFirstExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veIONSecondExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x64df75b7d4f1c225d489174db1ba24ebc583ae4d164d3d8bd8548967db7a60a6",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0x26afCE6fdd6Fe80499A6aF11bCad3EA9eB8bf260",
    "transactionIndex": 1,
    "gasUsed": "5187993",
    "logsBloom": "0x
    "blockHash": "0xd217c8a8e5aa68959f0c561f1ebb167fc9a8dcd3b338de176c3d870dd2681b4e",
    "transactionHash": "0x64df75b7d4f1c225d489174db1ba24ebc583ae4d164d3d8bd8548967db7a60a6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15628278,
        "transactionHash": "0x64df75b7d4f1c225d489174db1ba24ebc583ae4d164d3d8bd8548967db7a60a6",
        "address": "0x26afCE6fdd6Fe80499A6aF11bCad3EA9eB8bf260",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xd217c8a8e5aa68959f0c561f1ebb167fc9a8dcd3b338de176c3d870dd2681b4e"
      }
    ],
    "blockNumber": 15628278,
    "cumulativeGasUsed": "5231808",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e80c3ac672326d6dc8195bcd28be67f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AeroBoostAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoostAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVeAEROAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationNotInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxEarlyWithdrawFeeMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumLockDurationMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"}],\"name\":\"NoDelegationBetweenTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLockFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoUnderlyingStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAcceptingDelegators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughRemainingAfterSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasDelegatees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasDelegators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAeroVoterBoost\",\"type\":\"uint256\"}],\"name\":\"AeroVoterBoostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAeroVoting\",\"type\":\"address\"}],\"name\":\"AeroVotingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_blocked\",\"type\":\"bool\"}],\"name\":\"DelegatorsBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.DepositType\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EmissionsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstExtension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_secondExtension\",\"type\":\"address\"}],\"name\":\"ExtensionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIonicPool\",\"type\":\"address\"}],\"name\":\"IonicPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBoosted\",\"type\":\"bool\"}],\"name\":\"LimitedBoostToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostAmount\",\"type\":\"uint256\"}],\"name\":\"LimitedTimeBoostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"lpTokenType\",\"type\":\"uint8\"}],\"name\":\"LpTokenTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEarlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"MaxEarlyWithdrawFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetsLocked\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lengthOfAssets\",\"type\":\"uint256\"}],\"name\":\"MergeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"MinimumLockAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDuration\",\"type\":\"uint256\"}],\"name\":\"MinimumLockDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PermanentLockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PermanentLockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"splitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"SplitCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"SplitToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"lpTokenType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StakeStrategySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"isWhitelisted\",\"type\":\"bool[]\"}],\"name\":\"TokensWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"veAERO\",\"type\":\"address\"}],\"name\":\"VeAEROSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_voting\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVoter\",\"type\":\"address\"}],\"name\":\"VoterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blocked\",\"type\":\"bool\"}],\"name\":\"allowDelegators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ap\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFT\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_boosts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimEmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTotalEthValueOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"toTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"removeDelegatees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_aeroVoterBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_aeroVoting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_canSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_delegations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_delegatorsBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_distributedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_ionicPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_limitedBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_limitedBoostActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_locked\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_lpType\",\"outputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_maxEarlyWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_minimumLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_minimumLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_permanentLockBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_stakeStrategy\",\"outputs\":[{\"internalType\":\"contract IStakeStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_underlyingStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userCumulativeAssetValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_userPointHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanentDelegate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_veAERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_whitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_splitAmount\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veIONFirstExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veIONSecondExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"allowDelegators(uint256,address,bool)\":{\"params\":{\"_blocked\":\"Boolean indicating if delegators are blocked.\",\"_tokenAddress\":\"The address of the token.\",\"_tokenId\":\"The ID of the token.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"balanceOfNFT(uint256)\":{\"params\":{\"_tokenId\":\"The ID of the NFT.\"},\"returns\":{\"_assets\":\"An array of asset addresses.\",\"_balances\":\"An array of balances for each asset.\",\"_boosts\":\"An array of boost values for each asset.\"}},\"claimEmissions(address)\":{\"params\":{\"_tokenAddress\":\"The address of the token for which to claim emissions.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getTotalEthValueOfTokens(address)\":{\"params\":{\"_owner\":\"The address of the owner.\"},\"returns\":{\"totalValue\":\"The total ETH value of the tokens.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"merge(uint256,uint256)\":{\"params\":{\"_from\":\"The ID of the token to merge from.\",\"_to\":\"The ID of the token to merge into.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"removeDelegatees(uint256,uint256[],address,uint256[])\":{\"params\":{\"amounts\":\"Array of amounts of voting power to remove from each delegatee\",\"fromTokenId\":\"ID of the veNFT from which delegatees are removed\",\"lpToken\":\"Address of the LP token associated with the delegation\",\"toTokenIds\":\"Array of veNFT IDs that are delegatees to be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"split(address,uint256,uint256)\":{\"params\":{\"_from\":\"The ID of the token to split.\",\"_splitAmount\":\"The amount to split from the original token.\",\"_tokenAddress\":\"The address of the token to split.\"},\"returns\":{\"_tokenId1\":\"The ID of the first resulting token.\",\"_tokenId2\":\"The ID of the second resulting token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"params\":{\"_tokenAddress\":\"The address of the token to withdraw.\",\"_tokenId\":\"The ID of the token to withdraw.\"}}},\"title\":\"veION Contract First Extensions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PRECISION()\":{\"notice\":\"Precision used for calculations, set to 1e18.\"},\"allowDelegators(uint256,address,bool)\":{\"notice\":\"Allows or blocks delegators for a specific token ID.\"},\"ap()\":{\"notice\":\"The AddressesProvider contract used for address management.\"},\"balanceOfNFT(uint256)\":{\"notice\":\"Retrieves the balance of a specific NFT.\"},\"claimEmissions(address)\":{\"notice\":\"Claims emissions for a specific token.\"},\"getTotalEthValueOfTokens(address)\":{\"notice\":\"Retrieves the total ETH value of tokens owned by a specific address.\"},\"merge(uint256,uint256)\":{\"notice\":\"Merges two token IDs into one.\"},\"removeDelegatees(uint256,uint256[],address,uint256[])\":{\"notice\":\"Removes delegatees from a specific veNFT\"},\"s_aeroVoterBoost()\":{\"notice\":\"The boost amount for AeroVoter.\"},\"s_aeroVoting()\":{\"notice\":\"Address of the AeroVoting contract.\"},\"s_ionicPool()\":{\"notice\":\"Address of the Ionic Pool.\"},\"s_limitedBoost()\":{\"notice\":\"The amount of limited boost available.\"},\"s_limitedBoostActive()\":{\"notice\":\"Indicates whether the limited boost is active.\"},\"s_maxEarlyWithdrawFee()\":{\"notice\":\"The maximum fee for early withdrawal.\"},\"s_minimumLockDuration()\":{\"notice\":\"The minimum duration for locking.\"},\"s_tokenId()\":{\"notice\":\"The current token ID counter.\"},\"s_veAERO()\":{\"notice\":\"Address of the veAERO contract.\"},\"s_voter()\":{\"notice\":\"Address of the voter contract.\"},\"split(address,uint256,uint256)\":{\"notice\":\"Splits a token into two separate tokens.\"},\"veIONFirstExtension()\":{\"notice\":\"The address of the logic contract for the veION first extension.\"},\"veIONSecondExtension()\":{\"notice\":\"The address of the logic contract for the veION second extension.\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws tokens associated with a specific token ID.\"}},\"notice\":\"This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/veIONFirstExtension.sol\":\"veIONFirstExtension\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7dce633611f5149fa8dec27ccd28b88dc590fecbebdb7785d1f6728dae1e1c4f\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2b54ec184943843041ab77f61988b5060f6f03acbfe92cdc125f95f00891da\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xefe5b03cf4147c27e7e38a1b8ddb3e0dc7f0ba8f6be71627d962fa91c98943dd\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\n     * See {_beforeConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\n     * See {_afterConsecutiveTokenTransfer}.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called before \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\n     * {ERC721Consecutive}.\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\n     */\\n    function _beforeConsecutiveTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /*first*/\\n        uint96 size\\n    ) internal virtual {\\n        if (from != address(0)) {\\n            _balances[from] -= size;\\n        }\\n        if (to != address(0)) {\\n            _balances[to] += size;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\n     * {ERC721Consecutive}.\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\n     */\\n    function _afterConsecutiveTokenTransfer(\\n        address, /*from*/\\n        address, /*to*/\\n        uint256, /*first*/\\n        uint96 /*size*/\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xcb972e21a5fd838e749739a88d702f97263f1317906974787c469b85b1d41ac2\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x20ad2fc58bb29dd0c35a3ecd1c01a8e0641320cda53c8044e2d31a7644b48767\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a3b4afc301241e2629ad192fa02e0f8626e3cf38ab6f45342bfd7afbde16ee0\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x0c2ac2e8ea31517e8a807e6fe8a3cf6de47ae76a5e8ed8ca60a209efa12aab69\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb49137b771712774960cca0acf428499e2aa85f179fe03712e5c06c5a6ab6316\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f211a9dd6bc7e4bc6c98a062d4729b821b7ff391a888215a48872b205117749\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb94eac067c85cd79a4195c0a1f4a878e9827329045c12475a0199f1ae17b9700\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x636eab608b4563c01e88042aba9330e6fe69af2c567fe1adf4d85731974ac81d\",\"license\":\"MIT\"},\"contracts/veION/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IVoter\\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\\n */\\ninterface IVoter {\\n  /// @notice Error thrown when a user has already voted or deposited.\\n  error AlreadyVotedOrDeposited();\\n\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\n  error DistributeWindow();\\n\\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\\n  error RewardAccumulatorDoesNotExist(address _pool);\\n\\n  /// @notice Error thrown when a reward accumulator is not alive.\\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\\n\\n  /// @notice Error thrown when a market already exists.\\n  error MarketAlreadyExists();\\n\\n  /// @notice Error thrown when the maximum voting number is too low.\\n  error MaximumVotingNumberTooLow();\\n\\n  /// @notice Error thrown when array lengths do not match.\\n  error MismatchedArrayLengths();\\n\\n  /// @notice Error thrown when there are non-zero votes.\\n  error NonZeroVotes();\\n\\n  /// @notice Error thrown when the caller is not the owner.\\n  error NotOwner();\\n\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\n  error NotDistributeWindow();\\n\\n  /// @notice Error thrown when the caller is not the governor.\\n  error NotGovernor();\\n\\n  /// @notice Error thrown when an NFT is not whitelisted.\\n  error NotWhitelistedNFT();\\n\\n  /// @notice Error thrown when the same value is provided.\\n  error SameValue();\\n\\n  /// @notice Error thrown when there are too many pools.\\n  error TooManyPools();\\n\\n  /// @notice Error thrown when array lengths are unequal.\\n  error UnequalLengths();\\n\\n  /// @notice Error thrown when an address is zero.\\n  error ZeroAddress();\\n\\n  /// @notice Error thrown when the tokens array is empty.\\n  error TokensArrayEmpty();\\n\\n  /// @notice Error thrown when the weight is zero.\\n  error ZeroWeight();\\n\\n  /**\\n   * @notice Struct to store vote details.\\n   * @param marketVotes Array of market addresses voted for.\\n   * @param marketVoteSides Array of market sides voted for.\\n   * @param votes Array of vote weights.\\n   * @param usedWeight Total weight used in voting.\\n   */\\n  struct VoteDetails {\\n    address[] marketVotes;\\n    MarketSide[] marketVoteSides;\\n    uint256[] votes;\\n    uint256 usedWeight;\\n  }\\n\\n  /**\\n   * @notice Struct to store market information.\\n   * @param marketAddress Address of the market.\\n   * @param side Side of the market (Supply or Borrow).\\n   */\\n  struct Market {\\n    address marketAddress;\\n    MarketSide side;\\n  }\\n\\n  /**\\n   * @notice Struct to store variables used in voting.\\n   * @param totalWeight Total weight available for voting.\\n   * @param usedWeight Weight used in voting.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param rewardAccumulator Address of the reward accumulator.\\n   * @param marketWeight Weight of the market.\\n   * @param bribes Address of the bribes.\\n   */\\n  struct VoteVars {\\n    uint256 totalWeight;\\n    uint256 usedWeight;\\n    address market;\\n    MarketSide marketSide;\\n    address rewardAccumulator;\\n    uint256 marketWeight;\\n    address bribes;\\n  }\\n\\n  /**\\n   * @notice Struct to store local variables used in voting.\\n   * @param sender Address of the sender.\\n   * @param timestamp Timestamp of the vote.\\n   * @param votingLPs Array of voting LP addresses.\\n   * @param votingLPBalances Array of voting LP balances.\\n   * @param boosts Array of boosts.\\n   */\\n  struct VoteLocalVars {\\n    address sender;\\n    uint256 timestamp;\\n    address[] votingLPs;\\n    uint256[] votingLPBalances;\\n    uint256[] boosts;\\n  }\\n\\n  /**\\n   * @notice Enum to represent the side of a market.\\n   */\\n  enum MarketSide {\\n    Supply,\\n    Borrow\\n  }\\n\\n  /**\\n   * @notice Event emitted when a vote is cast.\\n   * @param voter Address of the voter.\\n   * @param pool Address of the pool.\\n   * @param tokenId ID of the token.\\n   * @param weight Weight of the vote.\\n   * @param totalWeight Total weight of the vote.\\n   * @param timestamp Timestamp of the vote.\\n   */\\n  event Voted(\\n    address indexed voter,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 weight,\\n    uint256 totalWeight,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when a vote is abstained.\\n   * @param voter Address of the voter.\\n   * @param pool Address of the pool.\\n   * @param tokenId ID of the token.\\n   * @param weight Weight of the vote.\\n   * @param totalWeight Total weight of the vote.\\n   * @param timestamp Timestamp of the vote.\\n   */\\n  event Abstained(\\n    address indexed voter,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 weight,\\n    uint256 totalWeight,\\n    uint256 timestamp\\n  );\\n\\n  /**\\n   * @notice Event emitted when a reward is notified.\\n   * @param sender Address of the sender.\\n   * @param reward Address of the reward.\\n   * @param amount Amount of the reward.\\n   */\\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\n\\n  /**\\n   * @notice Event emitted when a token is whitelisted.\\n   * @param whitelister Address of the whitelister.\\n   * @param token Address of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\\n\\n  /**\\n   * @notice Event emitted when an NFT is whitelisted.\\n   * @param whitelister Address of the whitelister.\\n   * @param tokenId ID of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\\n\\n  event LpTokensSet(address[] indexed lpTokens);\\n  event MpoSet(address indexed mpo);\\n  event GovernorSet(address indexed governor);\\n  event MarketsAdded(Market[] markets);\\n  event MarketRewardAccumulatorsSet(\\n    address[] indexed markets,\\n    MarketSide[] indexed marketSides,\\n    address[] indexed rewardAccumulators\\n  );\\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\\n  event DistributionTimelockAliveToggled(bool isAlive);\\n\\n  /**\\n   * @notice Get the weight of a market.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param lpToken Address of the LP token.\\n   * @return The weight of the market.\\n   */\\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the votes for a token.\\n   * @param tokenId ID of the token.\\n   * @param market Address of the market.\\n   * @param marketSide Side of the market.\\n   * @param lpToken Address of the LP token.\\n   * @return The votes for the token.\\n   */\\n  function votes(\\n    uint256 tokenId,\\n    address market,\\n    MarketSide marketSide,\\n    address lpToken\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the used weights for a token.\\n   * @param tokenId ID of the token.\\n   * @param lpToken Address of the LP token.\\n   * @return The used weights for the token.\\n   */\\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the last voted timestamp for a token.\\n   * @param tokenId ID of the token.\\n   * @return The last voted timestamp for the token.\\n   */\\n  function lastVoted(uint256 tokenId) external view returns (uint256);\\n\\n  /**\\n   * @notice Check if a token is whitelisted.\\n   * @param token Address of the token.\\n   * @return True if the token is whitelisted, false otherwise.\\n   */\\n  function isWhitelistedToken(address token) external view returns (bool);\\n\\n  /**\\n   * @notice Check if an NFT is whitelisted.\\n   * @param tokenId ID of the token.\\n   * @return True if the NFT is whitelisted, false otherwise.\\n   */\\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\n\\n  /**\\n   * @notice Get the address of the ve contract.\\n   * @return The address of the ve contract.\\n   */\\n  function ve() external view returns (address);\\n\\n  /**\\n   * @notice Get the address of the governor.\\n   * @return The address of the governor.\\n   */\\n  function governor() external view returns (address);\\n\\n  /**\\n   * @notice Update voting balances in voting rewards contracts.\\n   * @param _tokenId ID of veNFT whose balance you wish to update.\\n   */\\n  function poke(uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\\n   *      Can only vote for gauges that have not been killed.\\n   *      Throws if length of _poolVote and _weights do not match.\\n   * @param _tokenId ID of veNFT you are voting with.\\n   * @param _poolVote Array of pools you are voting for.\\n   * @param _marketVoteSide Array of market vote sides you are voting for.\\n   * @param _weights Weights of pools.\\n   */\\n  function vote(\\n    uint256 _tokenId,\\n    address[] calldata _poolVote,\\n    MarketSide[] calldata _marketVoteSide,\\n    uint256[] calldata _weights\\n  ) external;\\n\\n  /**\\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\\n   * @dev Cannot reset in the same epoch that you voted in.\\n   *      Can vote or deposit into a managed NFT again after reset.\\n   * @param _tokenId ID of veNFT that you are resetting.\\n   */\\n  function reset(uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Distributes rewards to eligible markets.\\n   */\\n  function distributeRewards() external;\\n\\n  /**\\n   * @notice Claim bribes for a given NFT.\\n   * @dev Utility to help batch bribe claims.\\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\\n   * @param _tokens Array of tokens that are used as bribes.\\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\\n   */\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\\n   * @dev Throws if not called by governor.\\n   * @param _token Address of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  function whitelistToken(address _token, bool _bool) external;\\n\\n  /**\\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\n   * @dev Throws if not called by governor.\\n   *      Throws if already whitelisted.\\n   * @param _tokenId ID of the token.\\n   * @param _bool Boolean indicating whitelist status.\\n   */\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\\n\\n  /**\\n   * @notice Set the LP tokens.\\n   * @param _lpTokens Array of LP token addresses.\\n   */\\n  function setLpTokens(address[] memory _lpTokens) external;\\n\\n  /**\\n   * @notice Set the Master Price Oracle (MPO) address.\\n   * @param _mpo Address of the Master Price Oracle.\\n   */\\n  function setMpo(address _mpo) external;\\n\\n  /**\\n   * @notice Set a new governor.\\n   * @param _governor Address of the new governor.\\n   */\\n  function setGovernor(address _governor) external;\\n\\n  /**\\n   * @notice Add new markets.\\n   * @param _markets Array of Market structs to be added.\\n   */\\n  function addMarkets(Market[] calldata _markets) external;\\n\\n  /**\\n   * @notice Set reward accumulators for markets.\\n   * @param _markets Array of market addresses.\\n   * @param _marketSides Array of market sides.\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\n   */\\n  function setMarketRewardAccumulators(\\n    address[] calldata _markets,\\n    MarketSide[] calldata _marketSides,\\n    address[] calldata _rewardAccumulators\\n  ) external;\\n\\n  /**\\n   * @notice Set bribes for reward accumulators.\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\n   * @param _bribes Array of bribe addresses.\\n   */\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\\n\\n  /**\\n   * @notice Set the maximum number of votes.\\n   * @param _maxVotingNum Maximum number of votes allowed.\\n   */\\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\\n\\n  /**\\n   * @notice Toggle the alive status of a reward accumulator.\\n   * @param _market Address of the market.\\n   * @param _marketSide Side of the market.\\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\\n   */\\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\\n\\n  /**\\n   * @notice Toggle the alive status of a timelock on distributing rewards.\\n   * @param _isAlive Boolean indicating if the timelock is alive.\\n   */\\n  function toggleDistributionTimelockAlive(bool _isAlive) external;\\n\\n  /**\\n   * @notice Get the start of the epoch for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the epoch start for.\\n   * @return The start of the epoch.\\n   */\\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the next epoch for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the next epoch for.\\n   * @return The next epoch.\\n   */\\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the start of the voting period for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the voting start for.\\n   * @return The start of the voting period.\\n   */\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the end of the voting period for a given timestamp.\\n   * @param _timestamp The timestamp to calculate the voting end for.\\n   * @return The end of the voting period.\\n   */\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\\n\\n  /**\\n   * @notice Get the number of markets.\\n   * @return The number of markets.\\n   */\\n  function marketsLength() external view returns (uint256);\\n\\n  /**\\n   * @notice Get all LP reward tokens.\\n   * @return An array of addresses representing all LP reward tokens.\\n   */\\n  function getAllLpRewardTokens() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Get vote details for a specific token ID and LP asset.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpAsset The address of the LP asset.\\n   * @return A struct containing vote details.\\n   */\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\\n}\\n\",\"keccak256\":\"0x25f8d850f6c35830ed387227d0a65f48392a2ca6153214f1bcd53dda23a3ac17\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\n\\n/// @title IveION Interface\\n/// @notice Interface for veION contract\\ninterface IveIONCore {\\n  /**\\n   * @notice Creates a new lock for multiple tokens and assigns it to a specified address\\n   * @param _tokenAddress Array of token addresses to lock\\n   * @param _tokenAmount Array of token amounts to lock\\n   * @param _duration Array of lock durations\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\n   * @param _to Address to assign the lock to\\n   * @return The ID of the newly created veNFT\\n   */\\n  function createLockFor(\\n    address[] memory _tokenAddress,\\n    uint256[] memory _tokenAmount,\\n    uint256[] memory _duration,\\n    bool[] memory _stakeUnderlying,\\n    address _to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Creates a new lock for multiple tokens\\n   * @param _tokenAddress Array of token addresses to lock\\n   * @param _tokenAmount Array of token amounts to lock\\n   * @param _duration Array of lock durations\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\n   * @return The ID of the newly created veNFT\\n   */\\n  function createLock(\\n    address[] calldata _tokenAddress,\\n    uint256[] calldata _tokenAmount,\\n    uint256[] calldata _duration,\\n    bool[] memory _stakeUnderlying\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Increases the amount of tokens locked for a specific veNFT\\n   * @param _tokenAddress Address of the token to increase lock amount for\\n   * @param _tokenId ID of the veNFT\\n   * @param _tokenAmount Amount of tokens to add to the lock\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\n   */\\n  function increaseAmount(\\n    address _tokenAddress,\\n    uint256 _tokenId,\\n    uint256 _tokenAmount,\\n    bool _stakeUnderlying\\n  ) external;\\n\\n  /**\\n   * @notice Locks additional asset type for an existing veNFT\\n   * @param _tokenAddress Address of the new token to lock\\n   * @param _tokenAmount Amount of tokens to lock\\n   * @param _tokenId ID of the veNFT\\n   * @param _duration Duration of the lock\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\n   */\\n  function lockAdditionalAsset(\\n    address _tokenAddress,\\n    uint256 _tokenAmount,\\n    uint256 _tokenId,\\n    uint256 _duration,\\n    bool _stakeUnderlying\\n  ) external;\\n\\n  /**\\n   * @notice Increases the lock duration for a specific token in a veNFT\\n   * @param _tokenAddress Address of the token\\n   * @param _tokenId ID of the veNFT\\n   * @param _lockDuration New lock duration to extend to\\n   */\\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external;\\n\\n  /**\\n   * @notice Delegates voting power from one veNFT to another.\\n   * @param fromTokenId The ID of the veNFT from which voting power is delegated.\\n   * @param toTokenId The ID of the veNFT to which voting power is delegated.\\n   * @param lpToken The address of the LP token associated with the delegation.\\n   * @param amount The amount of voting power to delegate.\\n   */\\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external;\\n\\n  /**\\n   * @notice Removes delegatees from a specific veNFT\\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\\n   * @param lpToken Address of the LP token associated with the delegation\\n   * @param amounts Array of amounts of voting power to remove from each delegatee\\n   */\\n  function removeDelegatees(\\n    uint256 fromTokenId,\\n    uint256[] memory toTokenIds,\\n    address lpToken,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /**\\n   * @notice Removes delegators from a specific veNFT\\n   * @param fromTokenIds Array of veNFT IDs that are delegators to be removed\\n   * @param toTokenId ID of the veNFT from which delegators are removed\\n   * @param lpToken Address of the LP token associated with the delegation\\n   * @param amounts Array of amounts of voting power to remove from each delegator\\n   */\\n  function removeDelegators(\\n    uint256[] memory fromTokenIds,\\n    uint256 toTokenId,\\n    address lpToken,\\n    uint256[] memory amounts\\n  ) external;\\n\\n  /**\\n   * @notice Locks a token permanently.\\n   * @param _tokenAddress The address of the token to lock.\\n   * @param _tokenId The ID of the token to lock.\\n   */\\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Unlocks a permanently locked token.\\n   * @param _tokenAddress The address of the token to unlock.\\n   * @param _tokenId The ID of the token to unlock.\\n   */\\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Updates voting status for a veNFT\\n   * @param _tokenId ID of the veNFT\\n   * @param _voting Voting status\\n   */\\n  function voting(uint256 _tokenId, bool _voting) external;\\n\\n  /**\\n   * @notice Sets the implementation addresses for the veION contract extensions.\\n   * @dev This function can only be called by authorized entities.\\n   * @param _veIONFirstExtension The address of the first extension contract.\\n   * @param _veIONSecondExtension The address of the second extension contract.\\n   */\\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external;\\n}\\n\\n/// @title IAeroVotingEscrow Interface\\n/// @notice Interface for Aero Voting Escrow contract\\ninterface IAeroVotingEscrow {\\n  /**\\n   * @notice Returns the balance of the specified owner.\\n   * @param _owner The address of the owner.\\n   * @return The balance of the owner.\\n   */\\n  function balanceOf(address _owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Retrieves the token ID at a specific index for a given owner.\\n   * @param _owner The address of the owner.\\n   * @param _index The index of the token ID in the owner's list.\\n   * @return The token ID at the specified index.\\n   */\\n  function ownerToNFTokenIdList(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\\n/// @title IAeroVoter Interface\\n/// @notice Interface for Aero Voter contract\\ninterface IAeroVoter {\\n  /**\\n   * @notice Returns the list of pools voted for by a specific token ID.\\n   * @param tokenId The ID of the token.\\n   * @return An array of addresses representing the pools voted for.\\n   */\\n  function poolVote(uint256 tokenId) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Retrieves the weight of a specific pool.\\n   * @param pool The address of the pool.\\n   * @return The weight of the pool.\\n   */\\n  function weights(address pool) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the number of votes a specific token ID has for a given pool.\\n   * @param tokenId The ID of the token.\\n   * @param pool The address of the pool.\\n   * @return The number of votes for the pool.\\n   */\\n  function votes(uint256 tokenId, address pool) external view returns (uint256);\\n}\\n\\ninterface IAddressesProvider {\\n  function getAddress(string calldata id) external view returns (address);\\n}\\n\\ninterface IMasterPriceOracle {\\n  function price(address underlying) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa5c71c00549a034b394fb6aa4a681453b219406ff77a184de3fbc667fd5709b3\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONFirstExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./IveIONStructsEnumsErrorsEvents.sol\\\";\\n\\n/// @title IveION Interface First Extensions\\n/// @notice Interface for veION contract\\ninterface IveIONFirstExtension is IveIONStructsEnumsErrorsEvents {\\n  /**\\n   * @notice Withdraws tokens associated with a specific token ID.\\n   * @param _tokenAddress The address of the token to withdraw.\\n   * @param _tokenId The ID of the token to withdraw.\\n   */\\n  function withdraw(address _tokenAddress, uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Merges two token IDs into one.\\n   * @param _from The ID of the token to merge from.\\n   * @param _to The ID of the token to merge into.\\n   */\\n  function merge(uint256 _from, uint256 _to) external;\\n\\n  /**\\n   * @notice Splits a token into two separate tokens.\\n   * @param _tokenAddress The address of the token to split.\\n   * @param _from The ID of the token to split.\\n   * @param _splitAmount The amount to split from the original token.\\n   * @return _tokenId1 The ID of the first resulting token.\\n   * @return _tokenId2 The ID of the second resulting token.\\n   */\\n  function split(\\n    address _tokenAddress,\\n    uint256 _from,\\n    uint256 _splitAmount\\n  ) external returns (uint256 _tokenId1, uint256 _tokenId2);\\n\\n  /**\\n   * @notice Claims emissions for a specific token.\\n   * @param _tokenAddress The address of the token for which to claim emissions.\\n   */\\n  function claimEmissions(address _tokenAddress) external;\\n\\n  /**\\n   * @notice Allows or blocks delegators for a specific token ID.\\n   * @param _tokenId The ID of the token.\\n   * @param _tokenAddress The address of the token.\\n   * @param _blocked Boolean indicating if delegators are blocked.\\n   */\\n  function allowDelegators(uint256 _tokenId, address _tokenAddress, bool _blocked) external;\\n\\n  /**\\n   * @notice Retrieves the balance of a specific NFT.\\n   * @param _tokenId The ID of the NFT.\\n   * @return _assets An array of asset addresses.\\n   * @return _balances An array of balances for each asset.\\n   * @return _boosts An array of boost values for each asset.\\n   */\\n  function balanceOfNFT(\\n    uint256 _tokenId\\n  ) external view returns (address[] memory _assets, uint256[] memory _balances, uint256[] memory _boosts);\\n\\n  /**\\n   * @notice Retrieves the total ETH value of tokens owned by a specific address.\\n   * @param _owner The address of the owner.\\n   * @return totalValue The total ETH value of the tokens.\\n   */\\n  function getTotalEthValueOfTokens(address _owner) external view returns (uint256 totalValue);\\n}\\n\",\"keccak256\":\"0xc3281db97782ca5e75cab9d2ac6e0c9789a35403181438c8e065894f4e7be24f\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONStructsEnumsErrorsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\ninterface IveIONStructsEnumsErrorsEvents {\\n  /**\\n   * @notice Structure representing a locked balance\\n   * @param tokenAddress Address of the token\\n   * @param amount Amount of tokens locked\\n   * @param delegateAmount Amount of tokens delegated\\n   * @param start Start time of the lock\\n   * @param end End time of the lock\\n   * @param isPermanent Indicates if the lock is permanent\\n   * @param boost Boost value for the lock\\n   */\\n  struct LockedBalance {\\n    address tokenAddress;\\n    uint256 amount;\\n    uint256 delegateAmount;\\n    uint256 start;\\n    uint256 end;\\n    bool isPermanent;\\n    uint256 boost;\\n  }\\n\\n  /**\\n   * @notice Structure representing a delegation\\n   * @param amount Amount of tokens delegated\\n   * @param delegatee ID of the delegatee\\n   */\\n  struct Delegation {\\n    uint256 amount;\\n    uint256 delegatee;\\n  }\\n\\n  /**\\n   * @notice Structure representing a user point\\n   * @param bias Bias value\\n   * @param slope Slope value, representing -dweight / dt\\n   * @param ts Timestamp of the point\\n   * @param blk Block number of the point\\n   * @param permanent Permanent value\\n   * @param permanentDelegate Permanent delegate value\\n   */\\n  struct UserPoint {\\n    uint256 bias;\\n    uint256 slope;\\n    uint256 ts;\\n    uint256 blk;\\n    uint256 permanent;\\n    uint256 permanentDelegate;\\n  }\\n\\n  /**\\n   * @notice Structure representing a global point\\n   * @param bias Bias value\\n   * @param slope Slope value, representing -dweight / dt\\n   * @param ts Timestamp of the point\\n   * @param blk Block number of the point\\n   * @param permanentLockBalance Permanent lock balance\\n   */\\n  struct GlobalPoint {\\n    int128 bias;\\n    int128 slope;\\n    uint256 ts;\\n    uint256 blk;\\n    uint256 permanentLockBalance;\\n  }\\n\\n  /**\\n   * @notice Structure representing a checkpoint\\n   * @param fromTimestamp Timestamp from which the checkpoint is valid\\n   * @param owner Address of the owner\\n   * @param delegatedBalance Balance that has been delegated\\n   * @param delegatee ID of the delegatee\\n   */\\n  struct Checkpoint {\\n    uint256 fromTimestamp;\\n    address owner;\\n    uint256 delegatedBalance;\\n    uint256 delegatee;\\n  }\\n\\n  /**\\n   * @notice Enum representing deposit types\\n   */\\n  enum DepositType {\\n    DEPOSIT_FOR_TYPE,\\n    CREATE_LOCK_TYPE,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_UNLOCK_TIME,\\n    LOCK_ADDITIONAL\\n  }\\n\\n  /**\\n   * @notice Enum representing LP token types\\n   */\\n  enum LpTokenType {\\n    Mode_Velodrome_5050_ION_MODE,\\n    Mode_Balancer_8020_ION_ETH,\\n    Base_Aerodrome_5050_ION_wstETH,\\n    Base_Balancer_8020_ION_ETH,\\n    Optimism_Velodrome_5050_ION_OP,\\n    Optimism_Balancer_8020_ION_ETH\\n  }\\n\\n  error LockDurationNotInFuture();\\n  error ZeroAmount();\\n  error LockDurationTooLong();\\n  error TokenNotWhitelisted();\\n  error NotOwner();\\n  error AlreadyVoted();\\n  error PermanentLock();\\n  error NoLockFound();\\n  error LockExpired();\\n  error SameNFT();\\n  error SplitNotAllowed();\\n  error AmountTooBig();\\n  error NotPermanentLock();\\n  error TokenHasDelegatees();\\n  error TokenHasDelegators();\\n  error NotVoter();\\n  error MinimumNotMet();\\n  error ArrayMismatch();\\n  error LockDurationTooShort();\\n  error DuplicateAsset();\\n  error SplitTooSmall();\\n  error NotEnoughRemainingAfterSplit();\\n  error NoDelegationBetweenTokens(uint256 _tokenId1, uint256 _tokenId2);\\n  error NoUnderlyingStake();\\n  error NotAcceptingDelegators();\\n  error BoostAmountMustBeGreaterThanZero();\\n  error InvalidAddress();\\n  error MinimumAmountMustBeGreaterThanZero();\\n  error MinimumLockDurationMustBeGreaterThanZero();\\n  error AeroBoostAmountMustBeGreaterThanZero();\\n  error MaxEarlyWithdrawFeeMustBeGreaterThanZero();\\n  error InvalidTokenAddress();\\n  error InvalidStrategyAddress();\\n  error InvalidVeAEROAddress();\\n\\n  event Deposit(\\n    address indexed provider,\\n    uint256 indexed tokenId,\\n    DepositType indexed depositType,\\n    uint256 value,\\n    uint256 locktime,\\n    uint256 ts\\n  );\\n  event Withdraw(address indexed provider, uint256 indexed tokenId, uint256 value, uint256 ts);\\n  event Supply(uint256 prevSupply, uint256 supply);\\n  event Delegated(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\n  event DelegationRemoved(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\n  event ProtocolFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\n  event DistributedFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\n  event SplitToggle(address indexed account, bool isAllowed);\\n  event LimitedBoostToggled(bool isBoosted);\\n  event LimitedTimeBoostSet(uint256 boostAmount);\\n  event VoterSet(address indexed newVoter);\\n  event AeroVotingSet(address indexed newAeroVoting);\\n  event AeroVoterBoostSet(uint256 newAeroVoterBoost);\\n  event TokensWhitelisted(address[] token, bool[] isWhitelisted);\\n  event LpTokenTypeSet(address indexed token, LpTokenType lpTokenType);\\n  event VeAEROSet(address indexed veAERO);\\n  event StakeStrategySet(LpTokenType indexed lpTokenType, address indexed strategy);\\n  event MinimumLockAmountSet(address indexed tokenAddress, uint256 minimumAmount);\\n  event MinimumLockDurationSet(uint256 minimumDuration);\\n  event IonicPoolSet(address indexed newIonicPool);\\n  event SplitCompleted(\\n    uint256 indexed fromTokenId,\\n    uint256 indexed tokenId1,\\n    uint256 indexed tokenId2,\\n    uint256 splitAmount,\\n    address tokenAddress\\n  );\\n  event MergeCompleted(\\n    uint256 indexed fromTokenId,\\n    uint256 indexed toTokenId,\\n    address[] assetsLocked,\\n    uint256 lengthOfAssets\\n  );\\n  event EmissionsClaimed(address indexed claimant, address indexed tokenAddress);\\n  event MaxEarlyWithdrawFeeSet(uint256 maxEarlyWithdrawFee);\\n  event PermanentLockCreated(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n  event PermanentLockRemoved(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\n  event Voted(uint256 _tokenId, bool _voting);\\n  event DelegatorsBlocked(uint256 indexed _tokenId, address indexed _lpToken, bool _blocked);\\n  event Initialized(address indexed addressesProvider);\\n  event ExtensionsSet(address indexed _firstExtension, address indexed _secondExtension);\\n}\\n\",\"keccak256\":\"0x5d61a2f9ccb98d8fdb42ce6a96531f7cad4da402e8cef8c6dad7f69c45ab242e\",\"license\":\"UNLICENSED\"},\"contracts/veION/libraries/BalanceLogicLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport \\\"../interfaces/IveIONStructsEnumsErrorsEvents.sol\\\";\\n\\nlibrary BalanceLogicLibrary {\\n  uint256 internal constant _WEEK = 1 weeks;\\n\\n  /// @notice Calculates the voting power for a given NFT at a specific time.\\n  /// @dev This function is compatible with the ERC20 `balanceOf` interface for Aragon.\\n  ///      It retrieves the last user point before a specified timestamp and computes the voting power at that time.\\n  /// @param s_userPointEpoch Mapping of user point epochs for all tokens.\\n  /// @param s_userPointHistory Mapping of user point history for all tokens.\\n  /// @param _lpType The type of LP token associated with the NFT.\\n  /// @param _tokenId The ID of the NFT for which to calculate voting power.\\n  /// @param _t The epoch time at which to calculate the voting power.\\n  /// @param _isPermanent A boolean indicating if the lock is permanent.\\n  /// @return The calculated voting power of the user at the specified time.\\n  function balanceOfNFTAt(\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)) storage s_userPointEpoch,\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))\\n      storage s_userPointHistory,\\n    IveIONStructsEnumsErrorsEvents.LpTokenType _lpType,\\n    uint256 _tokenId,\\n    uint256 _t,\\n    bool _isPermanent\\n  ) internal view returns (uint256) {\\n    uint256 _epoch = getPastUserPointIndex(s_userPointEpoch, s_userPointHistory, _lpType, _tokenId, _t);\\n    // epoch 0 is an empty point\\n    if (_epoch == 0) return 0;\\n    IveIONStructsEnumsErrorsEvents.UserPoint memory lastPoint = s_userPointHistory[_tokenId][_lpType][_epoch];\\n    if (_isPermanent) {\\n      return lastPoint.permanent + lastPoint.permanentDelegate;\\n    } else {\\n      uint256 reduction = lastPoint.slope * (_t - lastPoint.ts);\\n      if (reduction > lastPoint.bias) {\\n        lastPoint.bias = 0;\\n      } else {\\n        lastPoint.bias -= reduction;\\n      }\\n      return lastPoint.bias;\\n    }\\n  }\\n\\n  /// @notice Binary search to get the user point index for a token id at or prior to a given timestamp\\n  /// @dev If a user point does not exist prior to the timestamp, this will return 0.\\n  /// @param s_userPointEpoch State of all user point epochs\\n  /// @param s_userPointHistory State of all user point history\\n  /// @param _tokenId .\\n  /// @param _timestamp .\\n  /// @return User point index\\n  function getPastUserPointIndex(\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)) storage s_userPointEpoch,\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))\\n      storage s_userPointHistory,\\n    IveIONStructsEnumsErrorsEvents.LpTokenType _lpType,\\n    uint256 _tokenId,\\n    uint256 _timestamp\\n  ) internal view returns (uint256) {\\n    uint256 _userEpoch = s_userPointEpoch[_tokenId][_lpType];\\n    if (_userEpoch == 0) return 0;\\n    // First check most recent balance\\n    if (s_userPointHistory[_tokenId][_lpType][_userEpoch].ts <= _timestamp) return (_userEpoch);\\n    // Next check implicit zero balance\\n    if (s_userPointHistory[_tokenId][_lpType][1].ts > _timestamp) return 0;\\n    uint256 lower = 0;\\n    uint256 upper = _userEpoch;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      IveIONStructsEnumsErrorsEvents.UserPoint storage userPoint = s_userPointHistory[_tokenId][_lpType][center];\\n      if (userPoint.ts == _timestamp) {\\n        return center;\\n      } else if (userPoint.ts < _timestamp) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return lower;\\n  }\\n}\\n\",\"keccak256\":\"0xd3dcb5e95ac92907381b512a381861130e0cd65148e1ce7b476753b3ae9b3cb0\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/IStakeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IStakeStrategy\\n * @notice Interface for the VeloIonModeStakingModeReward contract.\\n */\\ninterface IStakeStrategy {\\n  /// @notice Emitted when the contract is initialized\\n  event Initialized(\\n    address indexed escrow,\\n    address indexed stakingToken,\\n    address indexed stakingContract,\\n    address stakingWalletImplementation\\n  );\\n\\n  /// @notice Emitted when tokens are staked\\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\\n\\n  /// @notice Emitted when rewards are claimed\\n  event Claimed(address indexed from, address indexed veloWallet);\\n\\n  /// @notice Emitted when tokens are withdrawn\\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\\n\\n  /// @notice Emitted when staking wallet is transferred\\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice Emitted when escrow is set\\n  event EscrowSet(address indexed newEscrow);\\n\\n  /// @notice Emitted when staking token is set\\n  event StakingTokenSet(address indexed newStakingToken);\\n\\n  /// @notice Emitted when staking contract is set\\n  event StakingContractSet(address indexed newStakingContract);\\n\\n  /// @notice Emitted when upgradeable beacon is set\\n  event UpgradeableBeaconSet(address indexed newBeacon);\\n\\n  /**\\n   * @notice Stakes a specified amount of tokens from a given address.\\n   * @param _from The address from which tokens will be staked.\\n   * @param _amount The amount of tokens to stake.\\n   * @param _data Additional data that might be needed for staking.\\n   */\\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\\n\\n  /**\\n   * @notice Claims rewards for a given address.\\n   * @param _from The address for which to claim rewards.\\n   */\\n  function claim(address _from) external;\\n\\n  /**\\n   * @notice Withdraws a specified amount of tokens for a given address.\\n   * @param _owner The address from which tokens will be withdrawn.\\n   * @param _amount The amount of tokens to withdraw.\\n   */\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\\n\\n  /**\\n   * @notice Returns the current reward rate for the staking strategy.\\n   * @return The reward rate as a uint256.\\n   */\\n  function rewardRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the period finish time for the staking strategy.\\n   * @return The period finish time as a uint256.\\n   */\\n  function periodFinish() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the balance of a specific address.\\n   * @param account The address to query the balance of.\\n   * @return The balance as a uint256.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total supply of staked tokens.\\n   * @return The total supply as a uint256.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the reward token for the staking strategy.\\n   * @return The address of the reward token.\\n   */\\n  function rewardToken() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the staking contract.\\n   * @return The address of the staking contract.\\n   */\\n  function stakingContract() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the staking token.\\n   * @return The address of the staking token.\\n   */\\n  function stakingToken() external view returns (address);\\n\\n  /**\\n   * @notice Returns the staking wallet address for a specific user.\\n   * @param user The address of the user.\\n   * @return The address of the user's staking wallet.\\n   */\\n  function userStakingWallet(address user) external view returns (address);\\n\\n  /**\\n   * @notice Transfers the staking wallet from one user to another.\\n   * @param from The current owner of the staking wallet.\\n   * @param to The new owner of the staking wallet.\\n   */\\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\\n\\n  /**\\n   * @notice Sets the escrow address.\\n   * @param _escrow The address of the new escrow.\\n   */\\n  function setEscrow(address _escrow) external;\\n\\n  /**\\n   * @notice Sets the staking token address.\\n   * @param _stakingToken The address of the new staking token.\\n   */\\n  function setStakingToken(address _stakingToken) external;\\n\\n  /**\\n   * @notice Sets the staking contract address.\\n   * @param _stakingContract The address of the new staking contract.\\n   */\\n  function setStakingContract(address _stakingContract) external;\\n\\n  /**\\n   * @notice Sets the address of the  beacon.\\n   * @param _beacon The address of the new beacon contract.\\n   */\\n  function setUpgradeableBeacon(address _beacon) external;\\n}\\n\",\"keccak256\":\"0xfb173875a979116e52d450310c4f05e1cc6a9bd07a6b667fe02e75d71b55f73c\",\"license\":\"UNLICENSED\"},\"contracts/veION/veIONFirstExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport { ERC721Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\nimport { IMasterPriceOracle, IAeroVotingEscrow, IAeroVoter } from \\\"./interfaces/IveIONCore.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IVoter } from \\\"./interfaces/IVoter.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { veIONStorage } from \\\"./veIONStorage.sol\\\";\\nimport { BalanceLogicLibrary } from \\\"./libraries/BalanceLogicLibrary.sol\\\";\\nimport { IveIONFirstExtension } from \\\"./interfaces/IveIONFirstExtension.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IAddressesProvider } from \\\"./interfaces/IveIONCore.sol\\\";\\nimport { IStakeStrategy } from \\\"./stake/IStakeStrategy.sol\\\";\\n\\n/**\\n * @title veION Contract First Extensions\\n * @notice This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\\n */\\ncontract veIONFirstExtension is\\n  Ownable2StepUpgradeable,\\n  ERC721Upgradeable,\\n  ReentrancyGuardUpgradeable,\\n  veIONStorage,\\n  IveIONFirstExtension\\n{\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using SafeERC20 for IERC20;\\n\\n  constructor() {\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           External Functions                              \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /// @inheritdoc IveIONFirstExtension\\n  function withdraw(address _tokenAddress, uint256 _tokenId) external nonReentrant {\\n    address sender = _msgSender();\\n    LpTokenType _lpType = s_lpType[_tokenAddress];\\n    LockedBalance memory oldLocked = s_locked[_tokenId][_lpType];\\n\\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\n    if (s_voted[_tokenId]) revert AlreadyVoted();\\n    if (oldLocked.isPermanent) revert PermanentLock();\\n    if (!s_whitelistedToken[_tokenAddress]) revert TokenNotWhitelisted();\\n    if (oldLocked.amount == 0 || !s_assetsLocked[_tokenId].contains(_tokenAddress)) revert NoLockFound();\\n\\n    uint256 value = oldLocked.amount;\\n    s_userCumulativeAssetValues[sender][_tokenAddress] -= value;\\n    uint256 fee = 0;\\n\\n    if (block.timestamp < oldLocked.end) {\\n      uint256 daysLocked = ((oldLocked.end - oldLocked.start) * 1e18) / 1 days;\\n      uint256 daysLeft = ((oldLocked.end - block.timestamp) * 1e18) / 1 days;\\n      uint256 timeFactor = (daysLeft * 1e18) / daysLocked;\\n      uint256 veLPLocked = s_supply[_lpType];\\n      uint256 LPInCirculation = IERC20(_tokenAddress).totalSupply();\\n      uint256 ratioFactor = 1e18 - (veLPLocked * 1e18) / LPInCirculation;\\n      fee = (timeFactor * ratioFactor * oldLocked.boost) / 1e36;\\n      if (fee > s_maxEarlyWithdrawFee) fee = s_maxEarlyWithdrawFee;\\n      fee = (value * fee) / 1e18;\\n      value -= fee;\\n\\n      uint256 feeToDistribute = (fee * 75) / 100;\\n      uint256 feeToProtocol = fee - feeToDistribute;\\n      s_protocolFees[_lpType] += feeToProtocol;\\n      s_distributedFees[_lpType] += feeToDistribute;\\n    }\\n\\n    s_locked[_tokenId][_lpType] = LockedBalance(address(0), 0, 0, 0, 0, false, 0);\\n    s_assetsLocked[_tokenId].remove(_tokenAddress);\\n    uint256 supplyBefore = s_supply[_lpType];\\n\\n    uint256 amountStaked = s_underlyingStake[_tokenId][_tokenAddress];\\n    if (amountStaked != 0) {\\n      (IStakeStrategy _stakeStrategy, ) = _getStakeStrategy(_lpType);\\n      if (address(_stakeStrategy) != address(0)) {\\n        _handleTokenWithdrawStake(sender, address(this), _tokenId, _tokenAddress, amountStaked, _stakeStrategy);\\n      }\\n    }\\n\\n    s_supply[_lpType] = supplyBefore - oldLocked.amount;\\n    _checkpoint(_tokenId, LockedBalance(address(0), 0, 0, 0, 0, false, 0), _lpType);\\n\\n    // Check if all LP types for this token have zero balance\\n    bool shouldBurn = true;\\n    address[] memory lockedAssets = s_assetsLocked[_tokenId].values();\\n    uint256 lockedAssetsLength = lockedAssets.length;\\n    for (uint256 i = 0; i < lockedAssetsLength; i++) {\\n      LpTokenType assetLpType = s_lpType[lockedAssets[i]];\\n      if (s_locked[_tokenId][assetLpType].amount > 0) {\\n        shouldBurn = false;\\n        break;\\n      }\\n    }\\n\\n    if (shouldBurn) _burn(_tokenId);\\n\\n    IERC20(_tokenAddress).safeTransfer(sender, value);\\n    emit Withdraw(sender, _tokenId, value, block.timestamp);\\n    emit Supply(supplyBefore, supplyBefore - oldLocked.amount);\\n  }\\n\\n  /// @inheritdoc IveIONFirstExtension\\n  function merge(uint256 _from, uint256 _to) external nonReentrant {\\n    if (_from == _to) revert SameNFT();\\n    if (s_voted[_from] || s_voted[_to]) revert AlreadyVoted();\\n    if (ownerOf(_from) != _msgSender()) revert NotOwner();\\n    if (ownerOf(_to) != _msgSender()) revert NotOwner();\\n\\n    address[] memory assetsLocked = s_assetsLocked[_from].values();\\n    uint256 assetsLockedLength = assetsLocked.length;\\n    for (uint256 i = 0; i < assetsLockedLength; i++) {\\n      address asset = assetsLocked[i];\\n      LpTokenType lpType = s_lpType[asset];\\n\\n      LockedBalance memory oldLockedTo = s_locked[_to][lpType];\\n      LockedBalance memory oldLockedFrom = s_locked[_from][lpType];\\n\\n      if (oldLockedTo.end != 0 && oldLockedTo.end <= block.timestamp) revert LockExpired();\\n      if (oldLockedFrom.end != 0 && oldLockedFrom.end <= block.timestamp) revert LockExpired();\\n      if (oldLockedFrom.isPermanent) revert PermanentLock();\\n      if (oldLockedTo.isPermanent) revert PermanentLock();\\n\\n      LockedBalance memory newLockedTo;\\n\\n      newLockedTo.tokenAddress = asset;\\n      newLockedTo.amount = oldLockedTo.amount + oldLockedFrom.amount;\\n      newLockedTo.start = oldLockedTo.start < oldLockedFrom.start && oldLockedTo.start != 0\\n        ? oldLockedTo.start\\n        : oldLockedFrom.start;\\n      newLockedTo.end = oldLockedTo.end > oldLockedFrom.end ? oldLockedTo.end : oldLockedFrom.end;\\n      newLockedTo.boost = _calculateBoost(newLockedTo.end - newLockedTo.start);\\n\\n      s_locked[_from][lpType] = LockedBalance(address(0), 0, 0, 0, 0, false, 0);\\n      _checkpoint(_from, LockedBalance(address(0), 0, 0, 0, 0, false, 0), lpType);\\n      s_locked[_to][lpType] = newLockedTo;\\n      _checkpoint(_to, newLockedTo, lpType);\\n\\n      s_assetsLocked[_from].remove(asset);\\n      if (!s_assetsLocked[_to].contains(asset)) {\\n        s_assetsLocked[_to].add(asset);\\n      }\\n\\n      if (s_underlyingStake[_from][asset] != 0) {\\n        s_underlyingStake[_to][asset] += s_underlyingStake[_from][asset];\\n        s_underlyingStake[_from][asset] = 0;\\n      }\\n    }\\n    _burn(_from);\\n    emit MergeCompleted(_from, _to, assetsLocked, assetsLocked.length);\\n  }\\n\\n  /// @inheritdoc IveIONFirstExtension\\n  function split(\\n    address _tokenAddress,\\n    uint256 _from,\\n    uint256 _splitAmount\\n  ) external nonReentrant returns (uint256 _tokenId1, uint256 _tokenId2) {\\n    address ownerFrom = _ownerOf(_from);\\n    LpTokenType _lpType = s_lpType[_tokenAddress];\\n    LockedBalance memory oldLocked = s_locked[_from][_lpType];\\n    uint256 minimumLockAmount = s_minimumLockAmount[_lpType];\\n\\n    if (s_voted[_from]) revert AlreadyVoted();\\n    if (!s_canSplit[ownerFrom] && !s_canSplit[address(0)]) revert SplitNotAllowed();\\n    if (ownerFrom != _msgSender()) revert NotOwner();\\n    if (oldLocked.end <= block.timestamp && !oldLocked.isPermanent) revert LockExpired();\\n    if (_splitAmount >= oldLocked.amount) revert AmountTooBig();\\n    if (_splitAmount < minimumLockAmount) revert SplitTooSmall();\\n    if (oldLocked.amount - _splitAmount < minimumLockAmount) revert NotEnoughRemainingAfterSplit();\\n\\n    LockedBalance memory oldLockedTemp = oldLocked;\\n\\n    oldLocked.amount -= _splitAmount;\\n    s_locked[_from][_lpType] = oldLocked;\\n    _checkpoint(_from, oldLocked, _lpType);\\n\\n    LockedBalance memory splitLocked = oldLockedTemp;\\n    splitLocked.amount = _splitAmount;\\n    _tokenId2 = _createSplitVE(ownerFrom, splitLocked, _lpType, _tokenAddress);\\n    _tokenId1 = _from;\\n\\n    if (s_underlyingStake[_from][_tokenAddress] != 0) {\\n      s_underlyingStake[_from][_tokenAddress] -= _splitAmount;\\n      s_underlyingStake[_tokenId2][_tokenAddress] = _splitAmount;\\n    }\\n\\n    emit SplitCompleted(_from, _tokenId1, _tokenId2, _splitAmount, _tokenAddress);\\n  }\\n\\n  /// @inheritdoc IveIONFirstExtension\\n  function claimEmissions(address _tokenAddress) external nonReentrant {\\n    LpTokenType _lpType = s_lpType[_tokenAddress];\\n    IStakeStrategy _stakeStrategy = s_stakeStrategy[_lpType];\\n    if (_stakeStrategy.userStakingWallet(_msgSender()) == address(0)) revert NoUnderlyingStake();\\n    _stakeStrategy.claim(_msgSender());\\n    emit EmissionsClaimed(_msgSender(), _tokenAddress);\\n  }\\n\\n  /**\\n   * @notice Overrides the _burn function from ERC721 to include additional logic for bridging.\\n   * @param tokenId Token ID to burn.\\n   */\\n  function _burn(uint256 tokenId) internal override {\\n    super._burn(tokenId);\\n  }\\n\\n  /**\\n   * @notice Hook that is called before any token transfer. This includes minting\\n   * and burning. It updates the ownership mappings and handles delegation and\\n   * staking logic when transferring tokens between addresses.\\n   *\\n   * @param from The address which previously owned the token.\\n   * @param to The address that will receive the token.\\n   * @param tokenId The ID of the token being transferred.\\n   */\\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n\\n    if (from != address(0)) s_ownerToTokenIds[from].remove(tokenId);\\n    if (to != address(0)) s_ownerToTokenIds[to].add(tokenId);\\n\\n    if (from != address(0) && to != address(0)) {\\n      address[] memory assetsLocked = s_assetsLocked[tokenId].values();\\n      uint256 assetsLockedLength = assetsLocked.length;\\n      for (uint256 i = 0; i < assetsLockedLength; i++) {\\n        address asset = assetsLocked[i];\\n        LpTokenType _lpType = s_lpType[asset];\\n\\n        uint256[] memory delegatees = s_delegatees[tokenId][_lpType].values();\\n        uint256[] memory amounts = new uint256[](delegatees.length);\\n        uint256 delegateesLength = delegatees.length;\\n        for (uint256 j = 0; j < delegateesLength; j++) {\\n          amounts[j] = type(uint256).max;\\n        }\\n\\n        if (delegateesLength != 0) {\\n          removeDelegatees(tokenId, delegatees, asset, amounts);\\n        }\\n\\n        uint256 amountStaked = s_underlyingStake[tokenId][asset];\\n        if (amountStaked != 0) {\\n          IStakeStrategy _stakeStrategy = s_stakeStrategy[_lpType];\\n          _stakeStrategy.transferStakingWallet(from, to, amountStaked);\\n        }\\n\\n        LockedBalance memory lock = s_locked[tokenId][_lpType];\\n        s_userCumulativeAssetValues[from][asset] -= lock.amount;\\n        s_userCumulativeAssetValues[to][asset] += lock.amount;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Internal function to remove a delegation between two veNFTs.\\n   * @param fromTokenId ID of the veNFT from which delegation is being removed.\\n   * @param toTokenId ID of the veNFT to which delegation is being removed.\\n   * @param lpToken Address of the LP token associated with the delegation.\\n   * @param amount Amount of delegation to remove.\\n   */\\n  function _removeDelegation(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) internal {\\n    LpTokenType lpType = s_lpType[lpToken];\\n    LockedBalance memory fromLocked = s_locked[fromTokenId][lpType];\\n    LockedBalance memory toLocked = s_locked[toTokenId][lpType];\\n\\n    if (ownerOf(fromTokenId) != _msgSender() && ownerOf(toTokenId) != _msgSender()) revert NotOwner();\\n    if (s_delegations[fromTokenId][toTokenId][lpType] == 0) revert NoDelegationBetweenTokens(fromTokenId, toTokenId);\\n\\n    amount = amount > s_delegations[fromTokenId][toTokenId][lpType]\\n      ? s_delegations[fromTokenId][toTokenId][lpType]\\n      : amount;\\n\\n    toLocked.delegateAmount -= amount;\\n    fromLocked.amount += amount;\\n\\n    s_delegations[fromTokenId][toTokenId][lpType] -= amount;\\n    if (s_delegations[fromTokenId][toTokenId][lpType] == 0) {\\n      s_delegatees[fromTokenId][lpType].remove(toTokenId);\\n      s_delegators[toTokenId][lpType].remove(fromTokenId);\\n    }\\n\\n    s_locked[toTokenId][lpType] = toLocked;\\n    s_locked[fromTokenId][lpType] = fromLocked;\\n    _checkpoint(toTokenId, s_locked[toTokenId][lpType], lpType);\\n    _checkpoint(fromTokenId, s_locked[fromTokenId][lpType], lpType);\\n\\n    if (s_voted[toTokenId]) IVoter(s_voter).poke(toTokenId);\\n    if (s_voted[fromTokenId]) IVoter(s_voter).poke(fromTokenId);\\n\\n    emit DelegationRemoved(fromTokenId, toTokenId, lpToken, amount);\\n  }\\n\\n  /**\\n   * @notice Removes delegatees from a specific veNFT\\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\\n   * @param lpToken Address of the LP token associated with the delegation\\n   * @param amounts Array of amounts of voting power to remove from each delegatee\\n   */\\n  function removeDelegatees(\\n    uint256 fromTokenId,\\n    uint256[] memory toTokenIds,\\n    address lpToken,\\n    uint256[] memory amounts\\n  ) public nonReentrant {\\n    if (toTokenIds.length != amounts.length) revert ArrayMismatch();\\n    uint256 toTokenIdsLength = toTokenIds.length;\\n    for (uint256 i = 0; i < toTokenIdsLength; i++) {\\n      _removeDelegation(fromTokenId, toTokenIds[i], lpToken, amounts[i]);\\n    }\\n  }\\n\\n  /// @inheritdoc IveIONFirstExtension\\n  function allowDelegators(uint256 _tokenId, address _tokenAddress, bool _blocked) external nonReentrant {\\n    if (ownerOf(_tokenId) != _msgSender()) revert NotOwner();\\n    s_delegatorsBlocked[_tokenId][_tokenAddress] = _blocked;\\n    emit DelegatorsBlocked(_tokenId, _tokenAddress, _blocked);\\n  }\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                           Internal Functions                              \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /**\\n   * @notice Handles the withdrawal of staked tokens using a specified staking strategy.\\n   * @param _owner The address of the owner of the stake.\\n   * @param _withdrawTo The address to which the withdrawn tokens are sent.\\n   * @param _tokenId The ID of the token being withdrawn.\\n   * @param _tokenAddress The address of the token being withdrawn.\\n   * @param _tokenAmount The amount of tokens to withdraw.\\n   * @param _stakeStrategy The staking strategy to use for withdrawal.\\n   */\\n  function _handleTokenWithdrawStake(\\n    address _owner,\\n    address _withdrawTo,\\n    uint256 _tokenId,\\n    address _tokenAddress,\\n    uint256 _tokenAmount,\\n    IStakeStrategy _stakeStrategy\\n  ) internal {\\n    _stakeStrategy.claim(_owner);\\n    _stakeStrategy.withdraw(_owner, _withdrawTo, _tokenAmount);\\n    s_underlyingStake[_tokenId][_tokenAddress] -= _tokenAmount;\\n  }\\n\\n  /**\\n   * @notice Updates the user point history and epoch for a given token and LP token type.\\n   * @param _tokenId The ID of the token.\\n   * @param _newLocked The new locked balance information.\\n   * @param _lpType The LP token type.\\n   */\\n  function _checkpoint(uint256 _tokenId, LockedBalance memory _newLocked, LpTokenType _lpType) internal {\\n    UserPoint memory uNew;\\n    uNew.permanent = _newLocked.isPermanent ? _newLocked.amount : 0;\\n    uNew.permanentDelegate = _newLocked.isPermanent ? _newLocked.delegateAmount : 0;\\n\\n    if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\\n      uNew.slope = _newLocked.amount / _MAXTIME;\\n      uNew.bias = uNew.slope * (_newLocked.end - block.timestamp);\\n    }\\n\\n    uNew.ts = block.timestamp;\\n    uNew.blk = block.number;\\n    uint256 userEpoch = s_userPointEpoch[_tokenId][_lpType];\\n    if (userEpoch != 0 && s_userPointHistory[_tokenId][_lpType][userEpoch].ts == block.timestamp) {\\n      s_userPointHistory[_tokenId][_lpType][userEpoch] = uNew;\\n    } else {\\n      s_userPointEpoch[_tokenId][_lpType] = ++userEpoch;\\n      s_userPointHistory[_tokenId][_lpType][userEpoch] = uNew;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the boost for a given lock duration.\\n   * @param _duration The duration of the lock.\\n   * @return The calculated boost value.\\n   */\\n  function _calculateBoost(uint256 _duration) internal view returns (uint256) {\\n    uint256 minDuration = s_minimumLockDuration;\\n    uint256 maxDuration = _MAXTIME;\\n    uint256 minBoost = 1e18;\\n    uint256 maxBoost = 2e18;\\n\\n    if (_duration <= minDuration) {\\n      return minBoost;\\n    } else if (_duration >= maxDuration) {\\n      return maxBoost;\\n    } else {\\n      return minBoost + ((_duration - minDuration) * (maxBoost - minBoost)) / (maxDuration - minDuration);\\n    }\\n  }\\n\\n  /**\\n   * @notice Creates a new split veNFT with specified locked balance and LP token type.\\n   * @param _to The address to which the new veNFT is attributed.\\n   * @param _newLocked The locked balance information for the new veNFT.\\n   * @param _lpType The LP token type.\\n   * @param _tokenAddress The address of the token being locked.\\n   * @return _tokenId The ID of the newly created veNFT.\\n   */\\n  function _createSplitVE(\\n    address _to,\\n    LockedBalance memory _newLocked,\\n    LpTokenType _lpType,\\n    address _tokenAddress\\n  ) private returns (uint256 _tokenId) {\\n    _tokenId = ++s_tokenId;\\n    _safeMint(_to, _tokenId);\\n    s_locked[_tokenId][_lpType] = _newLocked;\\n    s_assetsLocked[_tokenId].add(_tokenAddress);\\n    _checkpoint(_tokenId, _newLocked, _lpType);\\n  }\\n\\n  /**\\n   * @notice Retrieves the staking strategy and data for a given LP token type.\\n   * @param _lpType The LP token type.\\n   * @return _stakeStrategy The staking strategy for the LP token type.\\n   * @return _stakeData The staking data for the LP token type.\\n   */\\n  function _getStakeStrategy(\\n    LpTokenType _lpType\\n  ) internal view returns (IStakeStrategy _stakeStrategy, bytes memory _stakeData) {\\n    IStakeStrategy strategy = s_stakeStrategy[_lpType];\\n    return (strategy, \\\"\\\");\\n  }\\n\\n  /**\\n   * @notice Calculates the total boost for a given token ID and LP token type.\\n   * @param _tokenId The ID of the token.\\n   * @param _lpType The LP token type.\\n   * @return The total boost value.\\n   */\\n  function _getTotalBoost(uint256 _tokenId, LpTokenType _lpType) internal view returns (uint256) {\\n    uint256 totalBoost = s_locked[_tokenId][_lpType].boost;\\n    if (s_limitedBoostActive) totalBoost += s_limitedBoost;\\n    if (s_veAERO == address(0)) return totalBoost;\\n\\n    address _owner = ownerOf(_tokenId);\\n    IAeroVoter aeroVoter = IAeroVoter(s_aeroVoting);\\n    IAeroVotingEscrow veAERO = IAeroVotingEscrow(s_veAERO);\\n    uint256 _balance = veAERO.balanceOf(_owner);\\n    for (uint256 i = 0; i < _balance; i++) {\\n      uint256 veAeroTokenId = veAERO.ownerToNFTokenIdList(_owner, i);\\n      uint256 weightToVoteRatio = (aeroVoter.votes(veAeroTokenId, s_ionicPool) * 1e18) / aeroVoter.weights(s_ionicPool);\\n      totalBoost += (s_aeroVoterBoost * weightToVoteRatio) / 1e18;\\n    }\\n\\n    return totalBoost;\\n  }\\n\\n  /**\\n   * @notice Retrieves the ETH price of a given token.\\n   * @dev Uses the MasterPriceOracle to fetch the price.\\n   * @param _token The address of the token for which the ETH price is requested.\\n   * @return The ETH price of the specified token.\\n   */\\n  function _getEthPrice(address _token) internal view returns (uint256) {\\n    IMasterPriceOracle mpo = IMasterPriceOracle(ap.getAddress(\\\"MasterPriceOracle\\\"));\\n    return mpo.price(_token);\\n  }\\n\\n  // // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // // \\u2551                           View Functions                                  \\u2551\\n  // // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n  /// @inheritdoc IveIONFirstExtension\\n  function balanceOfNFT(\\n    uint256 _tokenId\\n  ) public view returns (address[] memory _assets, uint256[] memory _balances, uint256[] memory _boosts) {\\n    address[] memory assetsLocked = s_assetsLocked[_tokenId].values();\\n\\n    _assets = new address[](assetsLocked.length);\\n    _balances = new uint256[](assetsLocked.length);\\n    _boosts = new uint256[](assetsLocked.length);\\n    uint256 assetsLockedLength = assetsLocked.length;\\n    for (uint256 i = 0; i < assetsLockedLength; i++) {\\n      address asset = assetsLocked[i];\\n      LpTokenType lpType = s_lpType[asset];\\n      LockedBalance memory lockedBalance = s_locked[_tokenId][lpType];\\n      _boosts[i] = _getTotalBoost(_tokenId, lpType);\\n      _assets[i] = asset;\\n      _balances[i] = BalanceLogicLibrary.balanceOfNFTAt(\\n        s_userPointEpoch,\\n        s_userPointHistory,\\n        lpType,\\n        _tokenId,\\n        block.timestamp,\\n        lockedBalance.isPermanent\\n      );\\n    }\\n\\n    return (_assets, _balances, _boosts);\\n  }\\n\\n  /// @inheritdoc IveIONFirstExtension\\n  function getTotalEthValueOfTokens(address _owner) external view returns (uint256 totalValue) {\\n    IVoter voter = IVoter(s_voter);\\n    address[] memory lpTokens = voter.getAllLpRewardTokens();\\n    uint256 lpTokensLength = lpTokens.length;\\n    for (uint256 i = 0; i < lpTokensLength; i++) {\\n      uint256 ethValue = (s_userCumulativeAssetValues[_owner][lpTokens[i]] * _getEthPrice(lpTokens[i])) / PRECISION;\\n      totalValue += ethValue;\\n    }\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n   * function in the contract matches the call data.\\n   */\\n  fallback() external {\\n    address impl = veIONSecondExtension;\\n    require(impl != address(0), \\\"Implementation not set\\\");\\n\\n    assembly {\\n      calldatacopy(0, 0, calldatasize())\\n\\n      let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\n\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc8708e62193da4c416082aecc54e2b6e69aa7d5ce6eed65ad99ebbfb8415a8cb\",\"license\":\"UNLICENSED\"},\"contracts/veION/veIONStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.22;\\n\\nimport { IAddressesProvider } from \\\"./interfaces/IveIONCore.sol\\\";\\nimport { IStakeStrategy } from \\\"./stake/IStakeStrategy.sol\\\";\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./interfaces/IveIONStructsEnumsErrorsEvents.sol\\\";\\n\\nabstract contract veIONStorage is IveIONStructsEnumsErrorsEvents {\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                                Constants                                  \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  /// @notice Represents the duration of one week in seconds.\\n  uint256 internal constant _WEEK = 1 weeks;\\n  /// @notice Represents the maximum lock time in seconds (2 years).\\n  uint256 internal constant _MAXTIME = 2 * 365 * 86400;\\n  /// @notice Precision used for calculations, set to 1e18.\\n  uint256 public constant PRECISION = 1e18;\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                             State Variables                               \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  /// @notice The current token ID counter.\\n  uint256 public s_tokenId;\\n  /// @notice The amount of limited boost available.\\n  uint256 public s_limitedBoost;\\n  /// @notice Indicates whether the limited boost is active.\\n  bool public s_limitedBoostActive;\\n  /// @notice Address of the veAERO contract.\\n  address public s_veAERO;\\n  /// @notice Address of the AeroVoting contract.\\n  address public s_aeroVoting;\\n  /// @notice Address of the Ionic Pool.\\n  address public s_ionicPool;\\n  /// @notice Address of the voter contract.\\n  address public s_voter;\\n  /// @notice The boost amount for AeroVoter.\\n  uint256 public s_aeroVoterBoost;\\n  /// @notice The minimum duration for locking.\\n  uint256 public s_minimumLockDuration;\\n  /// @notice The maximum fee for early withdrawal.\\n  uint256 public s_maxEarlyWithdrawFee;\\n  /// @notice The AddressesProvider contract used for address management.\\n  IAddressesProvider public ap;\\n  /// @notice The address of the logic contract for the veION first extension.\\n  address public veIONFirstExtension;\\n  /// @notice The address of the logic contract for the veION second extension.\\n  address public veIONSecondExtension;\\n\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\n  // \\u2551                                Mappings                                   \\u2551\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n  /// @dev Maps LP token types to their minimum lock amounts.\\n  mapping(LpTokenType => uint256) public s_minimumLockAmount;\\n  /// @dev Maps token addresses to their whitelist status.\\n  mapping(address => bool) public s_whitelistedToken;\\n  /// @dev Maps token addresses to their corresponding LP token types.\\n  mapping(address => LpTokenType) public s_lpType;\\n  /// @dev Maps user addresses to their ability to split.\\n  mapping(address => bool) public s_canSplit;\\n  /// @dev Maps token IDs and LP token types to their locked balances.\\n  mapping(uint256 => mapping(LpTokenType => LockedBalance)) public s_locked;\\n  /// @dev Maps token IDs and LP token types to user epochs.\\n  mapping(uint256 => mapping(LpTokenType => uint256)) public s_userPointEpoch;\\n  /// @dev Maps token IDs and LP token types to user point history.\\n  mapping(uint256 => mapping(LpTokenType => UserPoint[1000000000])) public s_userPointHistory;\\n  /// @dev Maps token IDs to sets of locked asset addresses.\\n  mapping(uint256 => EnumerableSet.AddressSet) internal s_assetsLocked;\\n  /// @dev Maps token IDs to their voting status.\\n  mapping(uint256 => bool) public s_voted;\\n  /// @dev Maps LP token types to their total supply.\\n  mapping(LpTokenType => uint256) public s_supply;\\n  /// @dev Maps LP token types to their permanent lock balances.\\n  mapping(LpTokenType => uint256) public s_permanentLockBalance;\\n  /// @dev Maps LP token types to their underlying stake strategies.\\n  mapping(LpTokenType => IStakeStrategy) public s_stakeStrategy;\\n  /// @dev Maps token IDs and LP token addresses to their underlying stake amounts.\\n  mapping(uint256 => mapping(address => uint256)) public s_underlyingStake;\\n  /// @dev Maps LP token types to their protocol fees.\\n  mapping(LpTokenType => uint256) public s_protocolFees;\\n  /// @dev Maps LP token types to their distributed fees.\\n  mapping(LpTokenType => uint256) public s_distributedFees;\\n  /// @dev Maps delegators, delegatees, and LP token types to delegation amounts.\\n  mapping(uint256 => mapping(uint256 => mapping(LpTokenType => uint256))) public s_delegations;\\n  /// @dev Maps token IDs and LP token types to sets of delegatees.\\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegatees;\\n  /// @dev Maps token IDs and LP token types to sets of delegators.\\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegators;\\n  /// @dev Maps owner addresses to sets of token IDs they own.\\n  mapping(address => EnumerableSet.UintSet) internal s_ownerToTokenIds;\\n  /// @dev Maps user addresses and token addresses to cumulative asset values.\\n  mapping(address => mapping(address => uint256)) public s_userCumulativeAssetValues;\\n  /// @dev Maps token Id and lp onto delegator permissioning.\\n  mapping(uint256 => mapping(address => bool)) public s_delegatorsBlocked;\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xda94bc4414fcae5a53d393a20b3d2ee9944fcf9e77b1a7591d615a1d03ffb23e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "allowDelegators(uint256,address,bool)": {
        "params": {
          "_blocked": "Boolean indicating if delegators are blocked.",
          "_tokenAddress": "The address of the token.",
          "_tokenId": "The ID of the token."
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "balanceOfNFT(uint256)": {
        "params": {
          "_tokenId": "The ID of the NFT."
        },
        "returns": {
          "_assets": "An array of asset addresses.",
          "_balances": "An array of balances for each asset.",
          "_boosts": "An array of boost values for each asset."
        }
      },
      "claimEmissions(address)": {
        "params": {
          "_tokenAddress": "The address of the token for which to claim emissions."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getTotalEthValueOfTokens(address)": {
        "params": {
          "_owner": "The address of the owner."
        },
        "returns": {
          "totalValue": "The total ETH value of the tokens."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "merge(uint256,uint256)": {
        "params": {
          "_from": "The ID of the token to merge from.",
          "_to": "The ID of the token to merge into."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "removeDelegatees(uint256,uint256[],address,uint256[])": {
        "params": {
          "amounts": "Array of amounts of voting power to remove from each delegatee",
          "fromTokenId": "ID of the veNFT from which delegatees are removed",
          "lpToken": "Address of the LP token associated with the delegation",
          "toTokenIds": "Array of veNFT IDs that are delegatees to be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "split(address,uint256,uint256)": {
        "params": {
          "_from": "The ID of the token to split.",
          "_splitAmount": "The amount to split from the original token.",
          "_tokenAddress": "The address of the token to split."
        },
        "returns": {
          "_tokenId1": "The ID of the first resulting token.",
          "_tokenId2": "The ID of the second resulting token."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "params": {
          "_tokenAddress": "The address of the token to withdraw.",
          "_tokenId": "The ID of the token to withdraw."
        }
      }
    },
    "title": "veION Contract First Extensions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PRECISION()": {
        "notice": "Precision used for calculations, set to 1e18."
      },
      "allowDelegators(uint256,address,bool)": {
        "notice": "Allows or blocks delegators for a specific token ID."
      },
      "ap()": {
        "notice": "The AddressesProvider contract used for address management."
      },
      "balanceOfNFT(uint256)": {
        "notice": "Retrieves the balance of a specific NFT."
      },
      "claimEmissions(address)": {
        "notice": "Claims emissions for a specific token."
      },
      "getTotalEthValueOfTokens(address)": {
        "notice": "Retrieves the total ETH value of tokens owned by a specific address."
      },
      "merge(uint256,uint256)": {
        "notice": "Merges two token IDs into one."
      },
      "removeDelegatees(uint256,uint256[],address,uint256[])": {
        "notice": "Removes delegatees from a specific veNFT"
      },
      "s_aeroVoterBoost()": {
        "notice": "The boost amount for AeroVoter."
      },
      "s_aeroVoting()": {
        "notice": "Address of the AeroVoting contract."
      },
      "s_ionicPool()": {
        "notice": "Address of the Ionic Pool."
      },
      "s_limitedBoost()": {
        "notice": "The amount of limited boost available."
      },
      "s_limitedBoostActive()": {
        "notice": "Indicates whether the limited boost is active."
      },
      "s_maxEarlyWithdrawFee()": {
        "notice": "The maximum fee for early withdrawal."
      },
      "s_minimumLockDuration()": {
        "notice": "The minimum duration for locking."
      },
      "s_tokenId()": {
        "notice": "The current token ID counter."
      },
      "s_veAERO()": {
        "notice": "Address of the veAERO contract."
      },
      "s_voter()": {
        "notice": "Address of the voter contract."
      },
      "split(address,uint256,uint256)": {
        "notice": "Splits a token into two separate tokens."
      },
      "veIONFirstExtension()": {
        "notice": "The address of the logic contract for the veION first extension."
      },
      "veIONSecondExtension()": {
        "notice": "The address of the logic contract for the veION second extension."
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraws tokens associated with a specific token ID."
      }
    },
    "notice": "This contract manages the veION framework, enabling the staking and management LP tokens for voting power.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2341,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2641,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 903,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 905,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 909,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_owners",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 913,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_balances",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 917,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 923,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1854,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 38683,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_tokenId",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 38686,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_limitedBoost",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 38689,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_limitedBoostActive",
        "offset": 0,
        "slot": "303",
        "type": "t_bool"
      },
      {
        "astId": 38692,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_veAERO",
        "offset": 1,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 38695,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_aeroVoting",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 38698,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_ionicPool",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 38701,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_voter",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 38704,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_aeroVoterBoost",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 38707,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_minimumLockDuration",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 38710,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_maxEarlyWithdrawFee",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 38714,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "ap",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IAddressesProvider)31261"
      },
      {
        "astId": 38717,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "veIONFirstExtension",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      },
      {
        "astId": 38720,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "veIONSecondExtension",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 38726,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_minimumLockAmount",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38731,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_whitelistedToken",
        "offset": 0,
        "slot": "314",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 38737,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_lpType",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_address,t_enum(LpTokenType)31614)"
      },
      {
        "astId": 38742,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_canSplit",
        "offset": 0,
        "slot": "316",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 38751,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_locked",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(LockedBalance)31557_storage))"
      },
      {
        "astId": 38759,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_userPointEpoch",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256))"
      },
      {
        "astId": 38770,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_userPointHistory",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_array(t_struct(UserPoint)31577_storage)1000000000_storage))"
      },
      {
        "astId": 38776,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_assetsLocked",
        "offset": 0,
        "slot": "320",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)7269_storage)"
      },
      {
        "astId": 38781,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_voted",
        "offset": 0,
        "slot": "321",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 38787,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_supply",
        "offset": 0,
        "slot": "322",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38793,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_permanentLockBalance",
        "offset": 0,
        "slot": "323",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38800,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_stakeStrategy",
        "offset": 0,
        "slot": "324",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_contract(IStakeStrategy)32404)"
      },
      {
        "astId": 38807,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_underlyingStake",
        "offset": 0,
        "slot": "325",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 38813,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_protocolFees",
        "offset": 0,
        "slot": "326",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38819,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_distributedFees",
        "offset": 0,
        "slot": "327",
        "type": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      {
        "astId": 38829,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_delegations",
        "offset": 0,
        "slot": "328",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256)))"
      },
      {
        "astId": 38838,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_delegatees",
        "offset": 0,
        "slot": "329",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage))"
      },
      {
        "astId": 38847,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_delegators",
        "offset": 0,
        "slot": "330",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage))"
      },
      {
        "astId": 38853,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_ownerToTokenIds",
        "offset": 0,
        "slot": "331",
        "type": "t_mapping(t_address,t_struct(UintSet)7426_storage)"
      },
      {
        "astId": 38860,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_userCumulativeAssetValues",
        "offset": 0,
        "slot": "332",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 38867,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "s_delegatorsBlocked",
        "offset": 0,
        "slot": "333",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 38871,
        "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "334",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserPoint)31577_storage)1000000000_storage": {
        "base": "t_struct(UserPoint)31577_storage",
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]",
        "numberOfBytes": "192000000000"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressesProvider)31261": {
        "encoding": "inplace",
        "label": "contract IAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IStakeStrategy)32404": {
        "encoding": "inplace",
        "label": "contract IStakeStrategy",
        "numberOfBytes": "20"
      },
      "t_enum(LpTokenType)31614": {
        "encoding": "inplace",
        "label": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(LpTokenType)31614)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IveIONStructsEnumsErrorsEvents.LpTokenType)",
        "numberOfBytes": "32",
        "value": "t_enum(LpTokenType)31614"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)7426_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)7426_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_array(t_struct(UserPoint)31577_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserPoint)31577_storage)1000000000_storage"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_contract(IStakeStrategy)32404)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => contract IStakeStrategy)",
        "numberOfBytes": "32",
        "value": "t_contract(IStakeStrategy)32404"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_struct(LockedBalance)31557_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)31557_storage"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)7426_storage"
      },
      "t_mapping(t_enum(LpTokenType)31614,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)31614",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_array(t_struct(UserPoint)31577_storage)1000000000_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)31614,t_array(t_struct(UserPoint)31577_storage)1000000000_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(LockedBalance)31557_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.LockedBalance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)31614,t_struct(LockedBalance)31557_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct EnumerableSet.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)31614,t_struct(UintSet)7426_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)31614,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)31614,t_uint256))"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)7269_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7269_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7269_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7268,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6954_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockedBalance)31557_storage": {
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.LockedBalance",
        "members": [
          {
            "astId": 31544,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 31546,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31548,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "delegateAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31550,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "start",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 31552,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "end",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 31554,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "isPermanent",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 31556,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "boost",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)6954_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6949,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6953,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)7426_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 7425,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6954_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserPoint)31577_storage": {
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.UserPoint",
        "members": [
          {
            "astId": 31566,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31568,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "slope",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31570,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "ts",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31572,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "blk",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 31574,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "permanent",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 31576,
            "contract": "contracts/veION/veIONFirstExtension.sol:veIONFirstExtension",
            "label": "permanentDelegate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}