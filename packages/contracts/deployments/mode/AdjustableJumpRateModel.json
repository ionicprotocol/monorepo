{
  "address": "0x0829dC88A8144E29e13560E4373Fe728237b0473",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "blocksPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseRatePerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplierPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jumpMultiplierPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kink",
              "type": "uint256"
            }
          ],
          "internalType": "struct InterestRateModelParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRatePerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jumpMultiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kink",
          "type": "uint256"
        }
      ],
      "name": "NewInterestParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "blocksPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseRatePerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplierPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "jumpMultiplierPerYear",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kink",
              "type": "uint256"
            }
          ],
          "internalType": "struct InterestRateModelParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "_setIrmParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInterestRateModel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jumpMultiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "utilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c18f1e2d5a256d09e8cb3b7f305a83deb3cebd40b2b960bc63dd5013c63022e",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0x0829dC88A8144E29e13560E4373Fe728237b0473",
    "transactionIndex": 2,
    "gasUsed": "612644",
    "logsBloom": "0x
    "blockHash": "0xb03aec2a8c2dcb30782b807d0810287e52e7c6d50a24ebc0f98fb0f78e8493a3",
    "transactionHash": "0x5c18f1e2d5a256d09e8cb3b7f305a83deb3cebd40b2b960bc63dd5013c63022e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 19263810,
        "transactionHash": "0x5c18f1e2d5a256d09e8cb3b7f305a83deb3cebd40b2b960bc63dd5013c63022e",
        "address": "0x0829dC88A8144E29e13560E4373Fe728237b0473",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001155b614971f16758c92c4890ed338c9e3ede6b7"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xb03aec2a8c2dcb30782b807d0810287e52e7c6d50a24ebc0f98fb0f78e8493a3"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 19263810,
        "transactionHash": "0x5c18f1e2d5a256d09e8cb3b7f305a83deb3cebd40b2b960bc63dd5013c63022e",
        "address": "0x0829dC88A8144E29e13560E4373Fe728237b0473",
        "topics": [
          "0x6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0xb03aec2a8c2dcb30782b807d0810287e52e7c6d50a24ebc0f98fb0f78e8493a3"
      }
    ],
    "blockNumber": 19263810,
    "cumulativeGasUsed": "834104",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "blocksPerYear": 15768000,
      "baseRatePerYear": 0,
      "multiplierPerYear": 0,
      "jumpMultiplierPerYear": 0,
      "kink": 0
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "c7cfc85cd18ef98285767dd0bc6813f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blocksPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"internalType\":\"struct InterestRateModelParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"name\":\"NewInterestParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blocksPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"internalType\":\"struct InterestRateModelParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"_setIrmParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpMultiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The borrow rate percentage per block as a mantissa (scaled by 1e18)\"}},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserveFactorMantissa\":\"The current reserve factor for the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The supply rate percentage per block as a mantissa (scaled by 1e18)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"utilizationRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market (currently unused)\"},\"returns\":{\"_0\":\"The utilization rate as a mantissa between [0, 1e18]\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseRatePerBlock()\":{\"notice\":\"The base interest rate which is the y-intercept when utilization rate is 0\"},\"blocksPerYear()\":{\"notice\":\"The approximate number of blocks per year that is assumed by the interest rate model\"},\"constructor\":{\"notice\":\"Initialise an interest rate model\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the current borrow rate per block, with the error code expected by the market\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current supply rate per block\"},\"isInterestRateModel()\":{\"notice\":\"Indicator that this is an InterestRateModel contract (for inspection)\"},\"jumpMultiplierPerBlock()\":{\"notice\":\"The multiplierPerBlock after hitting a specified utilization point\"},\"kink()\":{\"notice\":\"The utilization point at which the jump multiplier is applied\"},\"multiplierPerBlock()\":{\"notice\":\"The multiplier of utilization rate that gives the slope of the interest rate\"},\"utilizationRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ionic/irms/AdjustableJumpRateModel.sol\":\"AdjustableJumpRateModel\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\",\"license\":\"UNLICENSED\"},\"contracts/compound/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, errorMessage);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot underflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot underflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, errorMessage);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers.\\n   * Reverts on division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers.\\n   * Reverts with custom message on division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x9a5b4d600de35b6029d66ddbfa6bc79813b06a6e90344a5a606849ec9751b6dc\",\"license\":\"UNLICENSED\"},\"contracts/ionic/irms/AdjustableJumpRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../compound/InterestRateModel.sol\\\";\\nimport \\\"../../compound/SafeMath.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Compound's JumpRateModel Contract\\n * @author Compound\\n */\\n\\nstruct InterestRateModelParams {\\n  uint256 blocksPerYear; // The approximate number of blocks per year\\n  uint256 baseRatePerYear; // The approximate target base APR, as a mantissa (scaled by 1e18)\\n  uint256 multiplierPerYear; // The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n  uint256 jumpMultiplierPerYear; // The multiplierPerBlock after hitting a specified utilization point\\n  uint256 kink; // The utilization point at which the jump multiplier is applied\\n}\\n\\ncontract AdjustableJumpRateModel is Ownable, InterestRateModel {\\n  using SafeMath for uint256;\\n\\n  event NewInterestParams(\\n    uint256 baseRatePerBlock,\\n    uint256 multiplierPerBlock,\\n    uint256 jumpMultiplierPerBlock,\\n    uint256 kink\\n  );\\n\\n  /**\\n   * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n   */\\n  uint256 public blocksPerYear;\\n\\n  /**\\n   * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n   */\\n  uint256 public multiplierPerBlock;\\n\\n  /**\\n   * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n   */\\n  uint256 public baseRatePerBlock;\\n\\n  /**\\n   * @notice The multiplierPerBlock after hitting a specified utilization point\\n   */\\n  uint256 public jumpMultiplierPerBlock;\\n\\n  /**\\n   * @notice The utilization point at which the jump multiplier is applied\\n   */\\n  uint256 public kink;\\n\\n  /**\\n   * @notice Initialise an interest rate model\\n   */\\n\\n  constructor(InterestRateModelParams memory params) {\\n    blocksPerYear = params.blocksPerYear;\\n    baseRatePerBlock = params.baseRatePerYear.div(blocksPerYear);\\n    multiplierPerBlock = params.multiplierPerYear.div(blocksPerYear);\\n    jumpMultiplierPerBlock = params.jumpMultiplierPerYear.div(blocksPerYear);\\n    kink = params.kink;\\n\\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n  }\\n\\n  /**\\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market (currently unused)\\n   * @return The utilization rate as a mantissa between [0, 1e18]\\n   */\\n  function utilizationRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public pure returns (uint256) {\\n    // Utilization rate is 0 when there are no borrows\\n    if (borrows == 0) {\\n      return 0;\\n    }\\n\\n    return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\n  }\\n\\n  function _setIrmParameters(InterestRateModelParams memory params) public onlyOwner {\\n    blocksPerYear = params.blocksPerYear;\\n    baseRatePerBlock = params.baseRatePerYear.div(blocksPerYear);\\n    multiplierPerBlock = params.multiplierPerYear.div(blocksPerYear);\\n    jumpMultiplierPerBlock = params.jumpMultiplierPerYear.div(blocksPerYear);\\n    kink = params.kink;\\n    emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n  }\\n\\n  /**\\n   * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market\\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view override returns (uint256) {\\n    uint256 util = utilizationRate(cash, borrows, reserves);\\n\\n    if (util <= kink) {\\n      return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n    } else {\\n      uint256 normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n      uint256 excessUtil = util.sub(kink);\\n      return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the current supply rate per block\\n   * @param cash The amount of cash in the market\\n   * @param borrows The amount of borrows in the market\\n   * @param reserves The amount of reserves in the market\\n   * @param reserveFactorMantissa The current reserve factor for the market\\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual override returns (uint256) {\\n    uint256 oneMinusReserveFactor = uint256(1e18).sub(reserveFactorMantissa);\\n    uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\\n    uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\\n    return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\\n  }\\n}\\n\",\"keccak256\":\"0x70bfdf3121d35f0784296781cf30651b632377c8fb0bb0acc0229744d17d07ca\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b92380380610b9283398101604081905261002f916101b5565b610038336100d6565b80516001819055602082015161004d91610126565b600355600154604082015161006191610126565b600255600154606082015161007591610126565b6004819055608082810151600581905560035460025460408051928352602083019190915281019390935260608301527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d910160405180910390a1506102a3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061016e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061017560201b60201c565b9392505050565b6000818361019f5760405162461bcd60e51b81526004016101969190610232565b60405180910390fd5b5060006101ac8486610281565b95945050505050565b600060a082840312156101c757600080fd5b60405160a081016001600160401b03811182821017156101f757634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020808352835180602085015260005b8181101561026057858101830151858201604001528201610244565b506000604082860101526040601f19601f8301168501019250505092915050565b60008261029e57634e487b7160e01b600052601260045260246000fd5b500490565b6108e0806102b26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b9f9850a11610066578063b9f9850a14610182578063f14039de1461018b578063f2fde38b14610194578063fd2da339146101a757600080fd5b80638da5cb5b1461014b578063a385fb9614610166578063b81688161461016f57600080fd5b806315f24053146100d45780632191f92a146100fa5780632fffcf50146101125780636e71e2d814610127578063715018a61461013a5780638726bb8914610142575b600080fd5b6100e76100e23660046106e1565b6101b0565b6040519081526020015b60405180910390f35b610102600181565b60405190151581526020016100f1565b61012561012036600461070d565b61027c565b005b6100e76101353660046106e1565b61031f565b610125610362565b6100e760025481565b6000546040516001600160a01b0390911681526020016100f1565b6100e760015481565b6100e761017d36600461078b565b610376565b6100e760045481565b6100e760035481565b6101256101a23660046107bd565b6103e3565b6100e760055481565b6000806101be85858561031f565b90506005548111610204576101fc6003546101f6670de0b6b3a76400006101f06002548661046190919063ffffffff16565b906104ec565b9061052e565b915050610275565b600061022f6003546101f6670de0b6b3a76400006101f060025460055461046190919063ffffffff16565b905060006102486005548461058d90919063ffffffff16565b905061026f826101f6670de0b6b3a76400006101f06004548661046190919063ffffffff16565b93505050505b9392505050565b6102846105cf565b805160018190556020820151610299916104ec565b60035560015460408201516102ad916104ec565b60025560015460608201516102c1916104ec565b6004819055608082810151600581905560035460025460408051928352602083019190915281019390935260608301527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d910160405180910390a150565b60008260000361033157506000610275565b61035a61034883610342878761052e565b9061058d565b6101f085670de0b6b3a7640000610461565b949350505050565b61036a6105cf565b6103746000610629565b565b60008061038b670de0b6b3a76400008461058d565b9050600061039a8787876101b0565b905060006103b4670de0b6b3a76400006101f08486610461565b90506103d7670de0b6b3a76400006101f0836103d18c8c8c61031f565b90610461565b98975050505050505050565b6103eb6105cf565b6001600160a01b0381166104555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61045e81610629565b50565b600082600003610473575060006104e6565b600061047f83856107fc565b90508261048c8583610813565b146104e35760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161044c565b90505b92915050565b60006104e383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610679565b60008061053b8385610835565b9050838110156104e35760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161044c565b60006104e383836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506106b0565b6000546001600160a01b031633146103745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818361069a5760405162461bcd60e51b815260040161044c9190610848565b5060006106a78486610813565b95945050505050565b600081848411156106d45760405162461bcd60e51b815260040161044c9190610848565b5060006106a78486610897565b6000806000606084860312156106f657600080fd5b505081359360208301359350604090920135919050565b600060a0828403121561071f57600080fd5b60405160a0810181811067ffffffffffffffff8211171561075057634e487b7160e01b600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600080600080608085870312156107a157600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156107cf57600080fd5b81356001600160a01b03811681146104e357600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104e6576104e66107e6565b60008261083057634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156104e6576104e66107e6565b60006020808352835180602085015260005b818110156108765785810183015185820160400152820161085a565b506000604082860101526040601f19601f8301168501019250505092915050565b818103818111156104e6576104e66107e656fea26469706673582212209c6c464bfdebed136ed511013ef1f6762c2fa4ad238373f34b79a986f429aada64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b9f9850a11610066578063b9f9850a14610182578063f14039de1461018b578063f2fde38b14610194578063fd2da339146101a757600080fd5b80638da5cb5b1461014b578063a385fb9614610166578063b81688161461016f57600080fd5b806315f24053146100d45780632191f92a146100fa5780632fffcf50146101125780636e71e2d814610127578063715018a61461013a5780638726bb8914610142575b600080fd5b6100e76100e23660046106e1565b6101b0565b6040519081526020015b60405180910390f35b610102600181565b60405190151581526020016100f1565b61012561012036600461070d565b61027c565b005b6100e76101353660046106e1565b61031f565b610125610362565b6100e760025481565b6000546040516001600160a01b0390911681526020016100f1565b6100e760015481565b6100e761017d36600461078b565b610376565b6100e760045481565b6100e760035481565b6101256101a23660046107bd565b6103e3565b6100e760055481565b6000806101be85858561031f565b90506005548111610204576101fc6003546101f6670de0b6b3a76400006101f06002548661046190919063ffffffff16565b906104ec565b9061052e565b915050610275565b600061022f6003546101f6670de0b6b3a76400006101f060025460055461046190919063ffffffff16565b905060006102486005548461058d90919063ffffffff16565b905061026f826101f6670de0b6b3a76400006101f06004548661046190919063ffffffff16565b93505050505b9392505050565b6102846105cf565b805160018190556020820151610299916104ec565b60035560015460408201516102ad916104ec565b60025560015460608201516102c1916104ec565b6004819055608082810151600581905560035460025460408051928352602083019190915281019390935260608301527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d910160405180910390a150565b60008260000361033157506000610275565b61035a61034883610342878761052e565b9061058d565b6101f085670de0b6b3a7640000610461565b949350505050565b61036a6105cf565b6103746000610629565b565b60008061038b670de0b6b3a76400008461058d565b9050600061039a8787876101b0565b905060006103b4670de0b6b3a76400006101f08486610461565b90506103d7670de0b6b3a76400006101f0836103d18c8c8c61031f565b90610461565b98975050505050505050565b6103eb6105cf565b6001600160a01b0381166104555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61045e81610629565b50565b600082600003610473575060006104e6565b600061047f83856107fc565b90508261048c8583610813565b146104e35760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161044c565b90505b92915050565b60006104e383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610679565b60008061053b8385610835565b9050838110156104e35760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161044c565b60006104e383836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506106b0565b6000546001600160a01b031633146103745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000818361069a5760405162461bcd60e51b815260040161044c9190610848565b5060006106a78486610813565b95945050505050565b600081848411156106d45760405162461bcd60e51b815260040161044c9190610848565b5060006106a78486610897565b6000806000606084860312156106f657600080fd5b505081359360208301359350604090920135919050565b600060a0828403121561071f57600080fd5b60405160a0810181811067ffffffffffffffff8211171561075057634e487b7160e01b600052604160045260246000fd5b806040525082358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600080600080608085870312156107a157600080fd5b5050823594602084013594506040840135936060013592509050565b6000602082840312156107cf57600080fd5b81356001600160a01b03811681146104e357600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104e6576104e66107e6565b60008261083057634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156104e6576104e66107e6565b60006020808352835180602085015260005b818110156108765785810183015185820160400152820161085a565b506000604082860101526040601f19601f8301168501019250505092915050565b818103818111156104e6576104e66107e656fea26469706673582212209c6c464bfdebed136ed511013ef1f6762c2fa4ad238373f34b79a986f429aada64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBorrowRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The borrow rate percentage per block as a mantissa (scaled by 1e18)"
        }
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserveFactorMantissa": "The current reserve factor for the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The supply rate percentage per block as a mantissa (scaled by 1e18)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market (currently unused)"
        },
        "returns": {
          "_0": "The utilization rate as a mantissa between [0, 1e18]"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseRatePerBlock()": {
        "notice": "The base interest rate which is the y-intercept when utilization rate is 0"
      },
      "blocksPerYear()": {
        "notice": "The approximate number of blocks per year that is assumed by the interest rate model"
      },
      "constructor": {
        "notice": "Initialise an interest rate model"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "notice": "Calculates the current borrow rate per block, with the error code expected by the market"
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the current supply rate per block"
      },
      "isInterestRateModel()": {
        "notice": "Indicator that this is an InterestRateModel contract (for inspection)"
      },
      "jumpMultiplierPerBlock()": {
        "notice": "The multiplierPerBlock after hitting a specified utilization point"
      },
      "kink()": {
        "notice": "The utilization point at which the jump multiplier is applied"
      },
      "multiplierPerBlock()": {
        "notice": "The multiplier of utilization rate that gives the slope of the interest rate"
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "notice": "Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8095,
        "contract": "contracts/ionic/irms/AdjustableJumpRateModel.sol:AdjustableJumpRateModel",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 57068,
        "contract": "contracts/ionic/irms/AdjustableJumpRateModel.sol:AdjustableJumpRateModel",
        "label": "blocksPerYear",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 57071,
        "contract": "contracts/ionic/irms/AdjustableJumpRateModel.sol:AdjustableJumpRateModel",
        "label": "multiplierPerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 57074,
        "contract": "contracts/ionic/irms/AdjustableJumpRateModel.sol:AdjustableJumpRateModel",
        "label": "baseRatePerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 57077,
        "contract": "contracts/ionic/irms/AdjustableJumpRateModel.sol:AdjustableJumpRateModel",
        "label": "jumpMultiplierPerBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 57080,
        "contract": "contracts/ionic/irms/AdjustableJumpRateModel.sol:AdjustableJumpRateModel",
        "label": "kink",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}