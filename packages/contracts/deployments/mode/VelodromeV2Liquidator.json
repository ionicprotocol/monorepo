{
  "address": "0xA1aBF92ef468464962aF1CEFFB44631a6fFb33ec",
  "abi": [
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "strategyData",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08658a2cacbf30220427b6d5acaf5e1818cdb78c20f817185ee15a76b6f4ec60",
  "receipt": {
    "to": null,
    "from": "0x1155b614971f16758C92c4890eD338C9e3ede6b7",
    "contractAddress": "0xA1aBF92ef468464962aF1CEFFB44631a6fFb33ec",
    "transactionIndex": 2,
    "gasUsed": "479780",
    "logsBloom": "0x
    "blockHash": "0x604239aca192be0b1b97a191f0c18c2bdc7f6f9d4c5fce857ec17091ee579f9a",
    "transactionHash": "0x08658a2cacbf30220427b6d5acaf5e1818cdb78c20f817185ee15a76b6f4ec60",
    "logs": [],
    "blockNumber": 13887543,
    "cumulativeGasUsed": "1491318",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9b5ecd9776bc67be36597ea476997bc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"strategyData\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"redeem(address,uint256,bytes)\":{\"params\":{\"inputAmount\":\"The amount of the input wrapped token to be redeemed for an underlying token.\",\"inputToken\":\"The input wrapped token to be redeemed for an underlying token.\",\"strategyData\":\"The ABI-encoded data to be used in the redemption strategy logic.\"},\"returns\":{\"outputAmount\":\"The quantity of underlying tokens outputted.\",\"outputToken\":\"The underlying ERC20 token outputted.\"}}},\"title\":\"VelodromeV2Liquidator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"redeem(address,uint256,bytes)\":{\"notice\":\"Redeems custom collateral `token` for an underlying token.\"}},\"notice\":\"Exchanges seized token collateral for underlying tokens via a Velodrome V2 router for use as a step in a liquidation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidators/VelodromeV2Liquidator.sol\":\"VelodromeV2Liquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/external/velodrome/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRouter {\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    error ETHTransferFailed();\\n    error Expired();\\n    error InsufficientAmount();\\n    error InsufficientAmountA();\\n    error InsufficientAmountB();\\n    error InsufficientAmountADesired();\\n    error InsufficientAmountBDesired();\\n    error InsufficientLiquidity();\\n    error InsufficientOutputAmount();\\n    error InvalidPath();\\n    error OnlyWETH();\\n    error SameAddresses();\\n    error ZeroAddress();\\n\\n    /// @notice Address of Velodrome v2 pool factory\\n    function factory() external view returns (address);\\n\\n    /// @notice Address of Velodrome v2 pool implementation\\n    function poolImplementation() external view returns (address);\\n\\n    /// @notice Sort two tokens by which address value is less than the other\\n    /// @param tokenA   Address of token to sort\\n    /// @param tokenB   Address of token to sort\\n    /// @return token0  Lower address value between tokenA and tokenB\\n    /// @return token1  Higher address value between tokenA and tokenB\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    /// @notice Calculate the address of a pool by its' factory.\\n    /// @dev Returns a randomly generated address for a nonexistent pool\\n    /// @param tokenA   Address of token to query\\n    /// @param tokenB   Address of token to query\\n    /// @param stable   True if pool is stable, false if volatile\\n    function poolFor(address tokenA, address tokenB, bool stable) external view returns (address pool);\\n\\n    /// @notice Fetch and sort the reserves for a pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @return reserveA    Amount of reserves of the sorted token A\\n    /// @return reserveB    Amount of reserves of the sorted token B\\n    function getReserves(address tokenA, address tokenB, bool stable)\\n        external\\n        view\\n        returns (uint256 reserveA, uint256 reserveB);\\n\\n    /// @notice Perform chained getAmountOut calculations on any number of pools\\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n    // **** ADD LIQUIDITY ****\\n\\n    /// @notice Quote the amount deposited into a Pool\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\n    /// @return amountA         Amount of tokenA to actually deposit\\n    /// @return amountB         Amount of tokenB to actually deposit\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /// @notice Quote the amount of liquidity removed from a Pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param liquidity    Amount of liquidity to remove\\n    /// @return amountA     Amount of tokenA received\\n    /// @return amountB     Amount of tokenB received\\n    function quoteRemoveLiquidity(address tokenA, address tokenB, bool stable, uint256 liquidity)\\n        external\\n        view\\n        returns (uint256 amountA, uint256 amountB);\\n\\n    /// @notice Add liquidity of two tokens to a Pool\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\n    /// @param amountAMin       Minimum amount of tokenA to deposit\\n    /// @param amountBMin       Minimum amount of tokenB to deposit\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountA         Amount of tokenA to actually deposit\\n    /// @return amountB         Amount of tokenB to actually deposit\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /// @notice Add liquidity of a token and WETH (transferred as ETH) to a Pool\\n    /// @param token                .\\n    /// @param stable               True if pool is stable, false if volatile\\n    /// @param amountTokenDesired   Amount of token desired to deposit\\n    /// @param amountTokenMin       Minimum amount of token to deposit\\n    /// @param amountETHMin         Minimum amount of ETH to deposit\\n    /// @param to                   Recipient of liquidity token\\n    /// @param deadline             Deadline to add liquidity\\n    /// @return amountToken         Amount of token to actually deposit\\n    /// @return amountETH           Amount of tokenETH to actually deposit\\n    /// @return liquidity           Amount of liquidity token returned from deposit\\n    function addLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    // **** REMOVE LIQUIDITY ****\\n\\n    /// @notice Remove liquidity of two tokens from a Pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param liquidity    Amount of liquidity to remove\\n    /// @param amountAMin   Minimum amount of tokenA to receive\\n    /// @param amountBMin   Minimum amount of tokenB to receive\\n    /// @param to           Recipient of tokens received\\n    /// @param deadline     Deadline to remove liquidity\\n    /// @return amountA     Amount of tokenA received\\n    /// @return amountB     Amount of tokenB received\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    /// @notice Remove liquidity of a token and WETH (returned as ETH) from a Pool\\n    /// @param token            .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param liquidity        Amount of liquidity to remove\\n    /// @param amountTokenMin   Minimum amount of token to receive\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountToken     Amount of token received\\n    /// @return amountETH       Amount of ETH received\\n    function removeLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    /// @notice Remove liquidity of a fee-on-transfer token and WETH (returned as ETH) from a Pool\\n    /// @param token            .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param liquidity        Amount of liquidity to remove\\n    /// @param amountTokenMin   Minimum amount of token to receive\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountETH       Amount of ETH received\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    /// @notice Swap one token for another\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /// @notice Swap ETH for a token\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactETHForTokens(uint256 amountOutMin, Route[] calldata routes, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n\\n    /// @notice Swap a token for WETH (returned as ETH)\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired ETH\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xc6c6073a142cca35e078d333a30c4ac3369ce21d05b309aee8eaa10282f52042\",\"license\":\"MIT\"},\"contracts/liquidators/VelodromeV2Liquidator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { IRouter } from \\\"../external/velodrome/IRouter.sol\\\";\\n\\n/**\\n * @title VelodromeV2Liquidator\\n * @notice Exchanges seized token collateral for underlying tokens via a Velodrome V2 router for use as a step in a liquidation.\\n */\\ncontract VelodromeV2Liquidator {\\n  function _swap(IRouter router, uint256 inputAmount, IRouter.Route[] memory swapPath) internal {\\n    router.swapExactTokensForTokens(inputAmount, 0, swapPath, address(this), block.timestamp);\\n  }\\n\\n  function name() public pure virtual returns (string memory) {\\n    return \\\"VelodromeV2Liquidator\\\";\\n  }\\n\\n  /**\\n   * @notice Redeems custom collateral `token` for an underlying token.\\n   * @param inputToken The input wrapped token to be redeemed for an underlying token.\\n   * @param inputAmount The amount of the input wrapped token to be redeemed for an underlying token.\\n   * @param strategyData The ABI-encoded data to be used in the redemption strategy logic.\\n   * @return outputToken The underlying ERC20 token outputted.\\n   * @return outputAmount The quantity of underlying tokens outputted.\\n   */\\n  function redeem(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) external returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    return _convert(inputToken, inputAmount, strategyData);\\n  }\\n\\n  function _convert(\\n    IERC20Upgradeable inputToken,\\n    uint256 inputAmount,\\n    bytes memory strategyData\\n  ) internal returns (IERC20Upgradeable outputToken, uint256 outputAmount) {\\n    // Get Uniswap router and path\\n    (IRouter router, IRouter.Route[] memory swapPath) = abi.decode(strategyData, (IRouter, IRouter.Route[]));\\n    require(swapPath.length >= 1 && swapPath[0].from == address(inputToken), \\\"Invalid VelodromeV2Liquidator swap path.\\\");\\n\\n    // Swap underlying tokens\\n    inputToken.approve(address(router), inputAmount);\\n\\n    // call the relevant fn depending on the uni v2 fork specifics\\n    _swap(router, inputAmount, swapPath);\\n\\n    // Get new collateral\\n    outputToken = IERC20Upgradeable(swapPath[swapPath.length - 1].to);\\n    outputAmount = outputToken.balanceOf(address(this));\\n  }\\n}\\n\",\"keccak256\":\"0xd0ea8e07eaca9c43678f877e361f569de9a70349258118cda4fc1c1c3d58f9bc\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107b7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007b575b600080fd5b60408051808201825260158152742b32b637b23937b6b2ab192634b8bab4b230ba37b960591b60208201529051610072919061032c565b60405180910390f35b61008e610089366004610403565b6100ad565b604080516001600160a01b039093168352602083019190915201610072565b6000806100bb8585856100c7565b91509150935093915050565b600080600080848060200190518101906100e191906104ed565b9150915060018151101580156101265750866001600160a01b03168160008151811061010f5761010f6105e0565b6020026020010151600001516001600160a01b0316145b6101875760405162461bcd60e51b815260206004820152602860248201527f496e76616c69642056656c6f64726f6d6556324c697175696461746f7220737760448201526730b8103830ba341760c11b606482015260840160405180910390fd5b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa91906105f6565b506102068287836102aa565b80600182516102159190610618565b81518110610225576102256105e0565b60209081029190910181015101516040516370a0823160e01b81523060048201529094506001600160a01b038516906370a0823190602401602060405180830381865afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e919061063f565b92505050935093915050565b604051631e82ecdb60e31b81526001600160a01b0384169063f41766d8906102df908590600090869030904290600401610658565b6000604051808303816000875af11580156102fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032691908101906106f0565b50505050565b60006020808352835180602085015260005b8181101561035a5785810183015185820160400152820161033e565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461039057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156103cc576103cc610393565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103fb576103fb610393565b604052919050565b60008060006060848603121561041857600080fd5b83356104238161037b565b92506020848101359250604085013567ffffffffffffffff8082111561044857600080fd5b818701915087601f83011261045c57600080fd5b81358181111561046e5761046e610393565b610480601f8201601f191685016103d2565b9150808252888482850101111561049657600080fd5b80848401858401376000848284010152508093505050509250925092565b600067ffffffffffffffff8211156104ce576104ce610393565b5060051b60200190565b805180151581146104e857600080fd5b919050565b600080604080848603121561050157600080fd5b835161050c8161037b565b8093505060208085015167ffffffffffffffff81111561052b57600080fd5b8501601f8101871361053c57600080fd5b805161054f61054a826104b4565b6103d2565b8181526060918202830184019184820191908a84111561056e57600080fd5b938501935b838510156105cf5780858c03121561058b5760008081fd5b6105936103a9565b855161059e8161037b565b8152858701516105ad8161037b565b818801526105bc8689016104d8565b8189015283529384019391850191610573565b508096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561060857600080fd5b610611826104d8565b9392505050565b8181038181111561063957634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561065157600080fd5b5051919050565b600060a082018783526020876020850152604060a0604086015282885180855260c08701915060208a01945060005b818110156106c457855180516001600160a01b03908116855286820151168685015284015115158484015294840194606090920191600101610687565b50506001600160a01b038816606087015293506106e092505050565b8260808301529695505050505050565b6000602080838503121561070357600080fd5b825167ffffffffffffffff81111561071a57600080fd5b8301601f8101851361072b57600080fd5b805161073961054a826104b4565b81815260059190911b8201830190838101908783111561075857600080fd5b928401925b828410156107765783518252928401929084019061075d565b97965050505050505056fea2646970667358221220c2b29c16ebe6a26b7dc35d0e2145f02f532dfa264812b4b6248f427e55c6c52d64736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b57806310badf4e1461007b575b600080fd5b60408051808201825260158152742b32b637b23937b6b2ab192634b8bab4b230ba37b960591b60208201529051610072919061032c565b60405180910390f35b61008e610089366004610403565b6100ad565b604080516001600160a01b039093168352602083019190915201610072565b6000806100bb8585856100c7565b91509150935093915050565b600080600080848060200190518101906100e191906104ed565b9150915060018151101580156101265750866001600160a01b03168160008151811061010f5761010f6105e0565b6020026020010151600001516001600160a01b0316145b6101875760405162461bcd60e51b815260206004820152602860248201527f496e76616c69642056656c6f64726f6d6556324c697175696461746f7220737760448201526730b8103830ba341760c11b606482015260840160405180910390fd5b60405163095ea7b360e01b81526001600160a01b0383811660048301526024820188905288169063095ea7b3906044016020604051808303816000875af11580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa91906105f6565b506102068287836102aa565b80600182516102159190610618565b81518110610225576102256105e0565b60209081029190910181015101516040516370a0823160e01b81523060048201529094506001600160a01b038516906370a0823190602401602060405180830381865afa15801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e919061063f565b92505050935093915050565b604051631e82ecdb60e31b81526001600160a01b0384169063f41766d8906102df908590600090869030904290600401610658565b6000604051808303816000875af11580156102fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032691908101906106f0565b50505050565b60006020808352835180602085015260005b8181101561035a5785810183015185820160400152820161033e565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461039057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156103cc576103cc610393565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156103fb576103fb610393565b604052919050565b60008060006060848603121561041857600080fd5b83356104238161037b565b92506020848101359250604085013567ffffffffffffffff8082111561044857600080fd5b818701915087601f83011261045c57600080fd5b81358181111561046e5761046e610393565b610480601f8201601f191685016103d2565b9150808252888482850101111561049657600080fd5b80848401858401376000848284010152508093505050509250925092565b600067ffffffffffffffff8211156104ce576104ce610393565b5060051b60200190565b805180151581146104e857600080fd5b919050565b600080604080848603121561050157600080fd5b835161050c8161037b565b8093505060208085015167ffffffffffffffff81111561052b57600080fd5b8501601f8101871361053c57600080fd5b805161054f61054a826104b4565b6103d2565b8181526060918202830184019184820191908a84111561056e57600080fd5b938501935b838510156105cf5780858c03121561058b5760008081fd5b6105936103a9565b855161059e8161037b565b8152858701516105ad8161037b565b818801526105bc8689016104d8565b8189015283529384019391850191610573565b508096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561060857600080fd5b610611826104d8565b9392505050565b8181038181111561063957634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561065157600080fd5b5051919050565b600060a082018783526020876020850152604060a0604086015282885180855260c08701915060208a01945060005b818110156106c457855180516001600160a01b03908116855286820151168685015284015115158484015294840194606090920191600101610687565b50506001600160a01b038816606087015293506106e092505050565b8260808301529695505050505050565b6000602080838503121561070357600080fd5b825167ffffffffffffffff81111561071a57600080fd5b8301601f8101851361072b57600080fd5b805161073961054a826104b4565b81815260059190911b8201830190838101908783111561075857600080fd5b928401925b828410156107765783518252928401929084019061075d565b97965050505050505056fea2646970667358221220c2b29c16ebe6a26b7dc35d0e2145f02f532dfa264812b4b6248f427e55c6c52d64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "redeem(address,uint256,bytes)": {
        "params": {
          "inputAmount": "The amount of the input wrapped token to be redeemed for an underlying token.",
          "inputToken": "The input wrapped token to be redeemed for an underlying token.",
          "strategyData": "The ABI-encoded data to be used in the redemption strategy logic."
        },
        "returns": {
          "outputAmount": "The quantity of underlying tokens outputted.",
          "outputToken": "The underlying ERC20 token outputted."
        }
      }
    },
    "title": "VelodromeV2Liquidator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "redeem(address,uint256,bytes)": {
        "notice": "Redeems custom collateral `token` for an underlying token."
      }
    },
    "notice": "Exchanges seized token collateral for underlying tokens via a Velodrome V2 router for use as a step in a liquidation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}