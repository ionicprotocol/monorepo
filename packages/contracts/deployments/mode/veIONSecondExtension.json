{
  "address": "0x0AeC5eeA2378B9B9DBa01620dE80D562E230E894",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AeroBoostAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BoostAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStrategyAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVeAEROAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationNotInFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxEarlyWithdrawFeeMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumAmountMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumLockDurationMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumNotMet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId2",
          "type": "uint256"
        }
      ],
      "name": "NoDelegationBetweenTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLockFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoUnderlyingStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAcceptingDelegators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughRemainingAfterSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVoter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasDelegatees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenHasDelegators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAeroVoterBoost",
          "type": "uint256"
        }
      ],
      "name": "AeroVoterBoostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAeroVoting",
          "type": "address"
        }
      ],
      "name": "AeroVotingSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelegationRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_blocked",
          "type": "bool"
        }
      ],
      "name": "DelegatorsBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.DepositType",
          "name": "depositType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "EmissionsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_firstExtension",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_secondExtension",
          "type": "address"
        }
      ],
      "name": "ExtensionsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addressesProvider",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newIonicPool",
          "type": "address"
        }
      ],
      "name": "IonicPoolSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBoosted",
          "type": "bool"
        }
      ],
      "name": "LimitedBoostToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boostAmount",
          "type": "uint256"
        }
      ],
      "name": "LimitedTimeBoostSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "lpTokenType",
          "type": "uint8"
        }
      ],
      "name": "LpTokenTypeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxEarlyWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "MaxEarlyWithdrawFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetsLocked",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lengthOfAssets",
          "type": "uint256"
        }
      ],
      "name": "MergeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "MinimumLockAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumDuration",
          "type": "uint256"
        }
      ],
      "name": "MinimumLockDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PermanentLockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PermanentLockRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "splitAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "SplitCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAllowed",
          "type": "bool"
        }
      ],
      "name": "SplitToggle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "lpTokenType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StakeStrategySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "token",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "isWhitelisted",
          "type": "bool[]"
        }
      ],
      "name": "TokensWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "veAERO",
          "type": "address"
        }
      ],
      "name": "VeAEROSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_voting",
          "type": "bool"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newVoter",
          "type": "address"
        }
      ],
      "name": "VoterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ap",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAssetsLocked",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        }
      ],
      "name": "getDelegatees",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        }
      ],
      "name": "getDelegators",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnedTokenIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        }
      ],
      "name": "getUserLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegateAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPermanent",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IveIONStructsEnumsErrorsEvents.LockedBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "getUserPoint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "bias",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blk",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "permanent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "permanentDelegate",
              "type": "uint256"
            }
          ],
          "internalType": "struct IveIONStructsEnumsErrorsEvents.UserPoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_aeroVoterBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_aeroVoting",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_canSplit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_delegations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_delegatorsBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_distributedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_ionicPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_limitedBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_limitedBoostActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_locked",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delegateAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPermanent",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_lpType",
      "outputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_maxEarlyWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_minimumLockAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_minimumLockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_permanentLockBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_protocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_stakeStrategy",
      "outputs": [
        {
          "internalType": "contract IStakeStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_underlyingStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userCumulativeAssetValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "s_userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_userPointHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bias",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slope",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permanent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "permanentDelegate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_veAERO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_voted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_whitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aeroVoterBoost",
          "type": "uint256"
        }
      ],
      "name": "setAeroVoterBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aeroVoting",
          "type": "address"
        }
      ],
      "name": "setAeroVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ionicPool",
          "type": "address"
        }
      ],
      "name": "setIonicPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boostAmount",
          "type": "uint256"
        }
      ],
      "name": "setLimitedTimeBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "setLpTokenType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxEarlyWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "setMaxEarlyWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumLockAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumLockDuration",
          "type": "uint256"
        }
      ],
      "name": "setMinimumLockDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
          "name": "_lpType",
          "type": "uint8"
        },
        {
          "internalType": "contract IStakeStrategy",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStakeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veAERO",
          "type": "address"
        }
      ],
      "name": "setVeAERO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "setVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isBoosted",
          "type": "bool"
        }
      ],
      "name": "toggleLimitedBoost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isAllowed",
          "type": "bool"
        }
      ],
      "name": "toggleSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veIONFirstExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veIONSecondExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_isWhitelisted",
          "type": "bool[]"
        }
      ],
      "name": "whitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "withdrawDistributedFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9754c7030447df7badaf56ac14e0aed858c9f5a5cdf8dee40bbff283bc23b59",
  "receipt": {
    "to": null,
    "from": "0x7d922bf0975424b3371074f54cC784AF738Dac0D",
    "contractAddress": "0x0AeC5eeA2378B9B9DBa01620dE80D562E230E894",
    "transactionIndex": 4,
    "gasUsed": "2765606",
    "logsBloom": "0x
    "blockHash": "0x13fcf4b1abe8e5a5c03b6abc71bba1ca70d1237284f0556a915f4df9c663b56e",
    "transactionHash": "0xc9754c7030447df7badaf56ac14e0aed858c9f5a5cdf8dee40bbff283bc23b59",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 18751932,
        "transactionHash": "0xc9754c7030447df7badaf56ac14e0aed858c9f5a5cdf8dee40bbff283bc23b59",
        "address": "0x0AeC5eeA2378B9B9DBa01620dE80D562E230E894",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 15,
        "blockHash": "0x13fcf4b1abe8e5a5c03b6abc71bba1ca70d1237284f0556a915f4df9c663b56e"
      }
    ],
    "blockNumber": 18751932,
    "cumulativeGasUsed": "3559553",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "617d0785d8e73dba2d9c825400a47024",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AeroBoostAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoostAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategyAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVeAEROAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationNotInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxEarlyWithdrawFeeMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumAmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumLockDurationMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"}],\"name\":\"NoDelegationBetweenTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLockFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoUnderlyingStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAcceptingDelegators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughRemainingAfterSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasDelegatees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasDelegators\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAeroVoterBoost\",\"type\":\"uint256\"}],\"name\":\"AeroVoterBoostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAeroVoting\",\"type\":\"address\"}],\"name\":\"AeroVotingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelegationRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_blocked\",\"type\":\"bool\"}],\"name\":\"DelegatorsBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.DepositType\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EmissionsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstExtension\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_secondExtension\",\"type\":\"address\"}],\"name\":\"ExtensionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addressesProvider\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIonicPool\",\"type\":\"address\"}],\"name\":\"IonicPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBoosted\",\"type\":\"bool\"}],\"name\":\"LimitedBoostToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boostAmount\",\"type\":\"uint256\"}],\"name\":\"LimitedTimeBoostSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"lpTokenType\",\"type\":\"uint8\"}],\"name\":\"LpTokenTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEarlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"MaxEarlyWithdrawFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetsLocked\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lengthOfAssets\",\"type\":\"uint256\"}],\"name\":\"MergeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"}],\"name\":\"MinimumLockAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumDuration\",\"type\":\"uint256\"}],\"name\":\"MinimumLockDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PermanentLockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PermanentLockRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"splitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"SplitCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"SplitToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"lpTokenType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StakeStrategySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"isWhitelisted\",\"type\":\"bool[]\"}],\"name\":\"TokensWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"veAERO\",\"type\":\"address\"}],\"name\":\"VeAEROSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_voting\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVoter\",\"type\":\"address\"}],\"name\":\"VoterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ap\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetsLocked\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"}],\"name\":\"getDelegatees\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"}],\"name\":\"getDelegators\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnedTokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"}],\"name\":\"getUserLock\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IveIONStructsEnumsErrorsEvents.LockedBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"getUserPoint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanentDelegate\",\"type\":\"uint256\"}],\"internalType\":\"struct IveIONStructsEnumsErrorsEvents.UserPoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_aeroVoterBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_aeroVoting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_canSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_delegations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_delegatorsBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_distributedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_ionicPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_limitedBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_limitedBoostActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_locked\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_lpType\",\"outputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_maxEarlyWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_minimumLockAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_minimumLockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_permanentLockBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_stakeStrategy\",\"outputs\":[{\"internalType\":\"contract IStakeStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_underlyingStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userCumulativeAssetValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"s_userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_userPointHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanentDelegate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_veAERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_whitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aeroVoterBoost\",\"type\":\"uint256\"}],\"name\":\"setAeroVoterBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aeroVoting\",\"type\":\"address\"}],\"name\":\"setAeroVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ionicPool\",\"type\":\"address\"}],\"name\":\"setIonicPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boostAmount\",\"type\":\"uint256\"}],\"name\":\"setLimitedTimeBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setLpTokenType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxEarlyWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setMaxEarlyWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumLockDuration\",\"type\":\"uint256\"}],\"name\":\"setMinimumLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IveIONStructsEnumsErrorsEvents.LpTokenType\",\"name\":\"_lpType\",\"type\":\"uint8\"},{\"internalType\":\"contract IStakeStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStakeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veAERO\",\"type\":\"address\"}],\"name\":\"setVeAERO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isBoosted\",\"type\":\"bool\"}],\"name\":\"toggleLimitedBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"toggleSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veIONFirstExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veIONSecondExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isWhitelisted\",\"type\":\"bool[]\"}],\"name\":\"whitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawDistributedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getAssetsLocked(uint256)\":{\"params\":{\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"An array of addresses representing the locked assets.\"}},\"getDelegatees(uint256,uint8)\":{\"params\":{\"_lpType\":\"The LP token type.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"An array of delegatee IDs.\"}},\"getDelegators(uint256,uint8)\":{\"params\":{\"_lpType\":\"The LP token type.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"An array of delegator IDs.\"}},\"getOwnedTokenIds(address)\":{\"params\":{\"_owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"An array of token IDs owned by the address.\"}},\"getUserLock(uint256,uint8)\":{\"params\":{\"_lpType\":\"The LP token type.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"A LockedBalance struct containing lock details.\"}},\"getUserPoint(uint256,uint8,uint256)\":{\"params\":{\"_epoch\":\"The epoch number.\",\"_lpType\":\"The LP token type.\",\"_tokenId\":\"The ID of the token.\"},\"returns\":{\"_0\":\"A UserPoint struct containing user point details.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setAeroVoterBoost(uint256)\":{\"params\":{\"_aeroVoterBoost\":\"The boost amount for Aero Voter.\"}},\"setAeroVoting(address)\":{\"params\":{\"_aeroVoting\":\"The address of the Aero Voting contract.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setIonicPool(address)\":{\"params\":{\"_ionicPool\":\"The address of the Ionic Pool.\"}},\"setLimitedTimeBoost(uint256)\":{\"params\":{\"_boostAmount\":\"The amount of the boost.\"}},\"setLpTokenType(address,uint8)\":{\"params\":{\"_token\":\"The address of the token.\",\"_type\":\"The LP token type.\"}},\"setMaxEarlyWithdrawFee(uint256)\":{\"params\":{\"_maxEarlyWithdrawFee\":\"The maximum fee for early withdrawal.\"}},\"setMinimumLockAmount(address,uint256)\":{\"params\":{\"_minimumAmount\":\"The minimum amount to lock.\",\"_tokenAddress\":\"The address of the token.\"}},\"setMinimumLockDuration(uint256)\":{\"params\":{\"_minimumLockDuration\":\"The minimum duration for locking.\"}},\"setStakeStrategy(uint8,address)\":{\"params\":{\"_lpType\":\"The LP token type.\",\"_strategy\":\"The stake strategy.\"}},\"setVeAERO(address)\":{\"params\":{\"_veAERO\":\"The address of the veAERO contract.\"}},\"setVoter(address)\":{\"params\":{\"_voter\":\"The address of the voter.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"toggleLimitedBoost(bool)\":{\"params\":{\"_isBoosted\":\"Boolean indicating if the boost is active.\"}},\"toggleSplit(address,bool)\":{\"params\":{\"_account\":\"The address of the account.\",\"_isAllowed\":\"Boolean indicating if splitting is allowed.\"}},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"whitelistTokens(address[],bool[])\":{\"params\":{\"_isWhitelisted\":\"An array of booleans indicating the whitelist status for each token.\",\"_tokens\":\"An array of token addresses to be whitelisted or removed.\"}},\"withdrawDistributedFees(address,address)\":{\"params\":{\"_recipient\":\"The address to which the distributed fees will be sent.\",\"_tokenAddress\":\"The address of the token for which distributed fees are to be withdrawn.\"}},\"withdrawProtocolFees(address,address)\":{\"params\":{\"_recipient\":\"The address to which the protocol fees will be sent.\",\"_tokenAddress\":\"The address of the token for which protocol fees are to be withdrawn.\"}}},\"title\":\"veION Contract Second Extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PRECISION()\":{\"notice\":\"Precision used for calculations, set to 1e18.\"},\"ap()\":{\"notice\":\"The AddressesProvider contract used for address management.\"},\"getAssetsLocked(uint256)\":{\"notice\":\"Retrieves the assets locked for a specific token ID.\"},\"getDelegatees(uint256,uint8)\":{\"notice\":\"Retrieves the delegatees for a specific token ID and LP token type.\"},\"getDelegators(uint256,uint8)\":{\"notice\":\"Retrieves the delegators for a specific token ID and LP token type.\"},\"getOwnedTokenIds(address)\":{\"notice\":\"Retrieves the token IDs owned by a specific address.\"},\"getUserLock(uint256,uint8)\":{\"notice\":\"Retrieves the lock information for a specific user.\"},\"getUserPoint(uint256,uint8,uint256)\":{\"notice\":\"Retrieves the user point for a specific token ID, LP token type, and epoch.\"},\"s_aeroVoterBoost()\":{\"notice\":\"The boost amount for AeroVoter.\"},\"s_aeroVoting()\":{\"notice\":\"Address of the AeroVoting contract.\"},\"s_ionicPool()\":{\"notice\":\"Address of the Ionic Pool.\"},\"s_limitedBoost()\":{\"notice\":\"The amount of limited boost available.\"},\"s_limitedBoostActive()\":{\"notice\":\"Indicates whether the limited boost is active.\"},\"s_maxEarlyWithdrawFee()\":{\"notice\":\"The maximum fee for early withdrawal.\"},\"s_minimumLockDuration()\":{\"notice\":\"The minimum duration for locking.\"},\"s_tokenId()\":{\"notice\":\"The current token ID counter.\"},\"s_veAERO()\":{\"notice\":\"Address of the veAERO contract.\"},\"s_voter()\":{\"notice\":\"Address of the voter contract.\"},\"setAeroVoterBoost(uint256)\":{\"notice\":\"Sets the boost amount for Aero Voter.\"},\"setAeroVoting(address)\":{\"notice\":\"Sets the address of the Aero Voting contract.\"},\"setIonicPool(address)\":{\"notice\":\"Sets the address of the Ionic Pool.\"},\"setLimitedTimeBoost(uint256)\":{\"notice\":\"Sets the amount for a limited time boost.\"},\"setLpTokenType(address,uint8)\":{\"notice\":\"Sets the LP token type for a specific token.\"},\"setMaxEarlyWithdrawFee(uint256)\":{\"notice\":\"Sets the maximum early withdrawal fee.\"},\"setMinimumLockAmount(address,uint256)\":{\"notice\":\"Sets the minimum lock amount for a specific token.\"},\"setMinimumLockDuration(uint256)\":{\"notice\":\"Sets the minimum lock duration.\"},\"setStakeStrategy(uint8,address)\":{\"notice\":\"Sets the stake strategy for a specific LP token type.\"},\"setVeAERO(address)\":{\"notice\":\"Sets the address of the veAERO contract.\"},\"setVoter(address)\":{\"notice\":\"Sets the address of the voter.\"},\"toggleLimitedBoost(bool)\":{\"notice\":\"Toggles the limited boost feature.\"},\"toggleSplit(address,bool)\":{\"notice\":\"Toggles the ability to split tokens for a specific account.\"},\"veIONFirstExtension()\":{\"notice\":\"The address of the logic contract for the veION first extension.\"},\"veIONSecondExtension()\":{\"notice\":\"The address of the logic contract for the veION second extension.\"},\"whitelistTokens(address[],bool[])\":{\"notice\":\"Whitelists or removes tokens from the whitelist.\"},\"withdrawDistributedFees(address,address)\":{\"notice\":\"Withdraws distributed fees for a specific token to a recipient address.\"},\"withdrawProtocolFees(address,address)\":{\"notice\":\"Withdraws protocol fees for a specific token to a recipient address.\"}},\"notice\":\"This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/veION/veIONSecondExtension.sol\":\"veIONSecondExtension\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available all functions\\r\\n * from parent (Ownable).\\r\\n */\\r\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\r\\n    function __Ownable2Step_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending owner.\\r\\n     */\\r\\n    function pendingOwner() public view virtual returns (address) {\\r\\n        return _pendingOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\r\\n        _pendingOwner = newOwner;\\r\\n        emit OwnershipTransferStarted(owner(), newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual override {\\r\\n        delete _pendingOwner;\\r\\n        super._transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The new owner accepts the ownership transfer.\\r\\n     */\\r\\n    function acceptOwnership() external {\\r\\n        address sender = _msgSender();\\r\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\r\\n        _transferOwnership(sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xc02ae28ae149c0475b5b98088ecc53b1b6310d906506c5522f598f02d88f9131\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    function __Ownable_init() internal onlyInitializing {\\r\\n        __Ownable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __Ownable_init_unchained() internal onlyInitializing {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xcf4a2c2c1a8b1570ee9a7059c218de1efbc9050239b1111dcfc24081391d11b7\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\r\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\r\\n * case an upgrade adds a module that needs to be initialized.\\r\\n *\\r\\n * For example:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * contract MyToken is ERC20Upgradeable {\\r\\n *     function initialize() initializer public {\\r\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\r\\n *     }\\r\\n * }\\r\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\r\\n *     function initializeV2() reinitializer(2) public {\\r\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n *\\r\\n * [CAUTION]\\r\\n * ====\\r\\n * Avoid leaving a contract uninitialized.\\r\\n *\\r\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\r\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\r\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\r\\n *\\r\\n * [.hljs-theme-light.nopadding]\\r\\n * ```\\r\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n * constructor() {\\r\\n *     _disableInitializers();\\r\\n * }\\r\\n * ```\\r\\n * ====\\r\\n */\\r\\nabstract contract Initializable {\\r\\n    /**\\r\\n     * @dev Indicates that the contract has been initialized.\\r\\n     * @custom:oz-retyped-from bool\\r\\n     */\\r\\n    uint8 private _initialized;\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates that the contract is in the process of being initialized.\\r\\n     */\\r\\n    bool private _initializing;\\r\\n\\r\\n    /**\\r\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\r\\n     */\\r\\n    event Initialized(uint8 version);\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\r\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\r\\n     *\\r\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\r\\n     * constructor.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier initializer() {\\r\\n        bool isTopLevelCall = !_initializing;\\r\\n        require(\\r\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\r\\n            \\\"Initializable: contract is already initialized\\\"\\r\\n        );\\r\\n        _initialized = 1;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = true;\\r\\n        }\\r\\n        _;\\r\\n        if (isTopLevelCall) {\\r\\n            _initializing = false;\\r\\n            emit Initialized(1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\r\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\r\\n     * used to initialize parent contracts.\\r\\n     *\\r\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\r\\n     * are added through upgrades and that require initialization.\\r\\n     *\\r\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\r\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\r\\n     *\\r\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\r\\n     * a contract, executing them in the right order is up to the developer or operator.\\r\\n     *\\r\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\r\\n     *\\r\\n     * Emits an {Initialized} event.\\r\\n     */\\r\\n    modifier reinitializer(uint8 version) {\\r\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\r\\n        _initialized = version;\\r\\n        _initializing = true;\\r\\n        _;\\r\\n        _initializing = false;\\r\\n        emit Initialized(version);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\r\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\r\\n     */\\r\\n    modifier onlyInitializing() {\\r\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\r\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\r\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\r\\n     * through proxies.\\r\\n     *\\r\\n     * Emits an {Initialized} event the first time it is successfully executed.\\r\\n     */\\r\\n    function _disableInitializers() internal virtual {\\r\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\r\\n        if (_initialized < type(uint8).max) {\\r\\n            _initialized = type(uint8).max;\\r\\n            emit Initialized(type(uint8).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\r\\n     */\\r\\n    function _getInitializedVersion() internal view returns (uint8) {\\r\\n        return _initialized;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\r\\n     */\\r\\n    function _isInitializing() internal view returns (bool) {\\r\\n        return _initializing;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4603e2f1403e437820665af135e9675c80e81aa005e360318b8e640ca2624658\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\r\\n        __ReentrancyGuard_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0xd714b70818f7513fc0c34e4248742ac27f0cda15c44621de90872a2f1848c036\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721Upgradeable.sol\\\";\\r\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\r\\n    using AddressUpgradeable for address;\\r\\n    using StringsUpgradeable for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        __ERC721_init_unchained(name_, symbol_);\\r\\n    }\\r\\n\\r\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\r\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _ownerOf(tokenId);\\r\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        _requireMinted(tokenId);\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\r\\n     */\\r\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\r\\n        return _owners[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _ownerOf(tokenId) != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        unchecked {\\r\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\r\\n            // Given that tokens are minted one by one, it is impossible in practice that\\r\\n            // this ever happens. Might change if we allow batch minting.\\r\\n            // The ERC fails to describe this case.\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\r\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\r\\n            // out than the owner initially received through minting and transferring in.\\r\\n            _balances[owner] -= 1;\\r\\n        }\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n\\r\\n        _afterTokenTransfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\r\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        delete _tokenApprovals[tokenId];\\r\\n\\r\\n        unchecked {\\r\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\r\\n            // `from`'s balance is the number of token held, which is at least one before the current\\r\\n            // transfer.\\r\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\r\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\r\\n            _balances[from] -= 1;\\r\\n            _balances[to] += 1;\\r\\n        }\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(\\r\\n        address owner,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) internal virtual {\\r\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\r\\n     */\\r\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\r\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any (single) token transfer. This includes minting and burning.\\r\\n     * See {_beforeConsecutiveTokenTransfer}.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any (single) transfer of tokens. This includes minting and burning.\\r\\n     * See {_afterConsecutiveTokenTransfer}.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\r\\n     * {ERC721Consecutive}.\\r\\n     * Calling conditions are similar to {_beforeTokenTransfer}.\\r\\n     */\\r\\n    function _beforeConsecutiveTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256, /*first*/\\r\\n        uint96 size\\r\\n    ) internal virtual {\\r\\n        if (from != address(0)) {\\r\\n            _balances[from] -= size;\\r\\n        }\\r\\n        if (to != address(0)) {\\r\\n            _balances[to] += size;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after \\\"consecutive token transfers\\\" as defined in ERC2309 and implemented in\\r\\n     * {ERC721Consecutive}.\\r\\n     * Calling conditions are similar to {_afterTokenTransfer}.\\r\\n     */\\r\\n    function _afterConsecutiveTokenTransfer(\\r\\n        address, /*from*/\\r\\n        address, /*to*/\\r\\n        uint256, /*first*/\\r\\n        uint96 /*size*/\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[44] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x8fa55fe262246cd5c68823bda0e2f30503417458aed446c65bcefa347e6ed423\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721ReceiverUpgradeable {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xcad00cdc85bd1718e26dc693cf50fefe6c3bd2ca51c95f3ef13cc6d04be4928b\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\r\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\r\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6adefd9cd927dc57cd2da9550681d51dad15a91d4d254075588cf3e9503e6c99\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC721Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x8ba9a190699be6b3e5f965fe650bf0ac8bd01ed4d7b394411c6e50b98dcaaa90\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c08bea8e975fa8e5e635a7753a9442b3d58f501c3a9951df8eb45581054228d\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n    function __Context_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __Context_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./math/MathUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary StringsUpgradeable {\\r\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a607b1dc1f0ff724ad56ff94293ec5c374e27f35f26ae5e29210edaf046b4c6\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\r\\n    function __ERC165_init() internal onlyInitializing {\\r\\n    }\\r\\n\\r\\n    function __ERC165_init_unchained() internal onlyInitializing {\\r\\n    }\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x33686001615c14053a34d85fa60f5495c6461d457abfa93276feaf1ad4582039\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3a86fd8399ff01763901b64ed4603d979787747d7b83f70d6d3c7d4f6b79214\",\"license\":\"MIT\"},\"@openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary MathUpgradeable {\\r\\n    enum Rounding {\\r\\n        Down, // Toward negative infinity\\r\\n        Up, // Toward infinity\\r\\n        Zero // Toward zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\r\\n     * with further edits by Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod0 := mul(x, y)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n            // See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n            uint256 twos = denominator & (~denominator + 1);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n            // in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator,\\r\\n        Rounding rounding\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10**64) {\\r\\n                value /= 10**64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10**32) {\\r\\n                value /= 10**32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10**16) {\\r\\n                value /= 10**16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10**8) {\\r\\n                value /= 10**8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10**4) {\\r\\n                value /= 10**4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10**2) {\\r\\n                value /= 10**2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10**1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x75646aade069b63a3ebf8535f49dce3ac575d1e367f031cf1f7b3d8a748e0756\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x86bd9e04dbee51fb3a9370279a0177e9da874a858dfb2c25a405171aa5ae2030\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"../../../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c3c43ba6e81d44ca93d32e97e0d5b9d64eb7346b7a3921e6ce9648f4b70f815\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb7ed49cc8c6b941c4b0f07556eef72cedbce73d60c79d54cc82f6bbe7e061fb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\r\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n *\\r\\n * [WARNING]\\r\\n * ====\\r\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\r\\n * unusable.\\r\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\r\\n *\\r\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\r\\n * array of EnumerableSet.\\r\\n * ====\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastValue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastValue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        bytes32[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d88c669dab804dbc1aa5d683fd9ef598c9a820df114785571d1e2cbe54a7fc9\",\"license\":\"MIT\"},\"contracts/veION/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IVoter\\r\\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\\r\\n */\\r\\ninterface IVoter {\\r\\n  /// @notice Error thrown when a user has already voted or deposited.\\r\\n  error AlreadyVotedOrDeposited();\\r\\n\\r\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\r\\n  error DistributeWindow();\\r\\n\\r\\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\\r\\n  error RewardAccumulatorDoesNotExist(address _pool);\\r\\n\\r\\n  /// @notice Error thrown when a reward accumulator is not alive.\\r\\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\\r\\n\\r\\n  /// @notice Error thrown when a market already exists.\\r\\n  error MarketAlreadyExists();\\r\\n\\r\\n  /// @notice Error thrown when the maximum voting number is too low.\\r\\n  error MaximumVotingNumberTooLow();\\r\\n\\r\\n  /// @notice Error thrown when array lengths do not match.\\r\\n  error MismatchedArrayLengths();\\r\\n\\r\\n  /// @notice Error thrown when there are non-zero votes.\\r\\n  error NonZeroVotes();\\r\\n\\r\\n  /// @notice Error thrown when the caller is not the owner.\\r\\n  error NotOwner();\\r\\n\\r\\n  /// @notice Error thrown when an action is attempted outside the distribution window.\\r\\n  error NotDistributeWindow();\\r\\n\\r\\n  /// @notice Error thrown when the caller is not the governor.\\r\\n  error NotGovernor();\\r\\n\\r\\n  /// @notice Error thrown when an NFT is not whitelisted.\\r\\n  error NotWhitelistedNFT();\\r\\n\\r\\n  /// @notice Error thrown when the same value is provided.\\r\\n  error SameValue();\\r\\n\\r\\n  /// @notice Error thrown when there are too many pools.\\r\\n  error TooManyPools();\\r\\n\\r\\n  /// @notice Error thrown when array lengths are unequal.\\r\\n  error UnequalLengths();\\r\\n\\r\\n  /// @notice Error thrown when an address is zero.\\r\\n  error ZeroAddress();\\r\\n\\r\\n  /// @notice Error thrown when the tokens array is empty.\\r\\n  error TokensArrayEmpty();\\r\\n\\r\\n  /// @notice Error thrown when the weight is zero.\\r\\n  error ZeroWeight();\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store vote details.\\r\\n   * @param marketVotes Array of market addresses voted for.\\r\\n   * @param marketVoteSides Array of market sides voted for.\\r\\n   * @param votes Array of vote weights.\\r\\n   * @param usedWeight Total weight used in voting.\\r\\n   */\\r\\n  struct VoteDetails {\\r\\n    address[] marketVotes;\\r\\n    MarketSide[] marketVoteSides;\\r\\n    uint256[] votes;\\r\\n    uint256 usedWeight;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store market information.\\r\\n   * @param marketAddress Address of the market.\\r\\n   * @param side Side of the market (Supply or Borrow).\\r\\n   */\\r\\n  struct Market {\\r\\n    address marketAddress;\\r\\n    MarketSide side;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store variables used in voting.\\r\\n   * @param totalWeight Total weight available for voting.\\r\\n   * @param usedWeight Weight used in voting.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param rewardAccumulator Address of the reward accumulator.\\r\\n   * @param marketWeight Weight of the market.\\r\\n   * @param bribes Address of the bribes.\\r\\n   */\\r\\n  struct VoteVars {\\r\\n    uint256 totalWeight;\\r\\n    uint256 usedWeight;\\r\\n    address market;\\r\\n    MarketSide marketSide;\\r\\n    address rewardAccumulator;\\r\\n    uint256 marketWeight;\\r\\n    address bribes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Struct to store local variables used in voting.\\r\\n   * @param sender Address of the sender.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   * @param votingLPs Array of voting LP addresses.\\r\\n   * @param votingLPBalances Array of voting LP balances.\\r\\n   * @param boosts Array of boosts.\\r\\n   */\\r\\n  struct VoteLocalVars {\\r\\n    address sender;\\r\\n    uint256 timestamp;\\r\\n    address[] votingLPs;\\r\\n    uint256[] votingLPBalances;\\r\\n    uint256[] boosts;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum to represent the side of a market.\\r\\n   */\\r\\n  enum MarketSide {\\r\\n    Supply,\\r\\n    Borrow\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a vote is cast.\\r\\n   * @param voter Address of the voter.\\r\\n   * @param pool Address of the pool.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param weight Weight of the vote.\\r\\n   * @param totalWeight Total weight of the vote.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   */\\r\\n  event Voted(\\r\\n    address indexed voter,\\r\\n    address indexed pool,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 weight,\\r\\n    uint256 totalWeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a vote is abstained.\\r\\n   * @param voter Address of the voter.\\r\\n   * @param pool Address of the pool.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param weight Weight of the vote.\\r\\n   * @param totalWeight Total weight of the vote.\\r\\n   * @param timestamp Timestamp of the vote.\\r\\n   */\\r\\n  event Abstained(\\r\\n    address indexed voter,\\r\\n    address indexed pool,\\r\\n    uint256 indexed tokenId,\\r\\n    uint256 weight,\\r\\n    uint256 totalWeight,\\r\\n    uint256 timestamp\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a reward is notified.\\r\\n   * @param sender Address of the sender.\\r\\n   * @param reward Address of the reward.\\r\\n   * @param amount Amount of the reward.\\r\\n   */\\r\\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when a token is whitelisted.\\r\\n   * @param whitelister Address of the whitelister.\\r\\n   * @param token Address of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Event emitted when an NFT is whitelisted.\\r\\n   * @param whitelister Address of the whitelister.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\\r\\n\\r\\n  event LpTokensSet(address[] indexed lpTokens);\\r\\n  event MpoSet(address indexed mpo);\\r\\n  event GovernorSet(address indexed governor);\\r\\n  event MarketsAdded(Market[] markets);\\r\\n  event MarketRewardAccumulatorsSet(\\r\\n    address[] indexed markets,\\r\\n    MarketSide[] indexed marketSides,\\r\\n    address[] indexed rewardAccumulators\\r\\n  );\\r\\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\\r\\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\\r\\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\\r\\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the weight of a market.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The weight of the market.\\r\\n   */\\r\\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the votes for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param market Address of the market.\\r\\n   * @param marketSide Side of the market.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The votes for the token.\\r\\n   */\\r\\n  function votes(\\r\\n    uint256 tokenId,\\r\\n    address market,\\r\\n    MarketSide marketSide,\\r\\n    address lpToken\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the used weights for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @param lpToken Address of the LP token.\\r\\n   * @return The used weights for the token.\\r\\n   */\\r\\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the last voted timestamp for a token.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @return The last voted timestamp for the token.\\r\\n   */\\r\\n  function lastVoted(uint256 tokenId) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Check if a token is whitelisted.\\r\\n   * @param token Address of the token.\\r\\n   * @return True if the token is whitelisted, false otherwise.\\r\\n   */\\r\\n  function isWhitelistedToken(address token) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Check if an NFT is whitelisted.\\r\\n   * @param tokenId ID of the token.\\r\\n   * @return True if the NFT is whitelisted, false otherwise.\\r\\n   */\\r\\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the ve contract.\\r\\n   * @return The address of the ve contract.\\r\\n   */\\r\\n  function ve() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the governor.\\r\\n   * @return The address of the governor.\\r\\n   */\\r\\n  function governor() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Update voting balances in voting rewards contracts.\\r\\n   * @param _tokenId ID of veNFT whose balance you wish to update.\\r\\n   */\\r\\n  function poke(uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\\r\\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\\r\\n   *      Can only vote for gauges that have not been killed.\\r\\n   *      Throws if length of _poolVote and _weights do not match.\\r\\n   * @param _tokenId ID of veNFT you are voting with.\\r\\n   * @param _poolVote Array of pools you are voting for.\\r\\n   * @param _marketVoteSide Array of market vote sides you are voting for.\\r\\n   * @param _weights Weights of pools.\\r\\n   */\\r\\n  function vote(\\r\\n    uint256 _tokenId,\\r\\n    address[] calldata _poolVote,\\r\\n    MarketSide[] calldata _marketVoteSide,\\r\\n    uint256[] calldata _weights\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\\r\\n   * @dev Cannot reset in the same epoch that you voted in.\\r\\n   *      Can vote or deposit into a managed NFT again after reset.\\r\\n   * @param _tokenId ID of veNFT that you are resetting.\\r\\n   */\\r\\n  function reset(uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Distributes rewards to eligible markets.\\r\\n   */\\r\\n  function distributeRewards() external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claim bribes for a given NFT.\\r\\n   * @dev Utility to help batch bribe claims.\\r\\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\\r\\n   * @param _tokens Array of tokens that are used as bribes.\\r\\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\\r\\n   */\\r\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\\r\\n   * @dev Throws if not called by governor.\\r\\n   * @param _token Address of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  function whitelistToken(address _token, bool _bool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\r\\n   * @dev Throws if not called by governor.\\r\\n   *      Throws if already whitelisted.\\r\\n   * @param _tokenId ID of the token.\\r\\n   * @param _bool Boolean indicating whitelist status.\\r\\n   */\\r\\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the LP tokens.\\r\\n   * @param _lpTokens Array of LP token addresses.\\r\\n   */\\r\\n  function setLpTokens(address[] memory _lpTokens) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the Master Price Oracle (MPO) address.\\r\\n   * @param _mpo Address of the Master Price Oracle.\\r\\n   */\\r\\n  function setMpo(address _mpo) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set a new governor.\\r\\n   * @param _governor Address of the new governor.\\r\\n   */\\r\\n  function setGovernor(address _governor) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Add new markets.\\r\\n   * @param _markets Array of Market structs to be added.\\r\\n   */\\r\\n  function addMarkets(Market[] calldata _markets) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set reward accumulators for markets.\\r\\n   * @param _markets Array of market addresses.\\r\\n   * @param _marketSides Array of market sides.\\r\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\r\\n   */\\r\\n  function setMarketRewardAccumulators(\\r\\n    address[] calldata _markets,\\r\\n    MarketSide[] calldata _marketSides,\\r\\n    address[] calldata _rewardAccumulators\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set bribes for reward accumulators.\\r\\n   * @param _rewardAccumulators Array of reward accumulator addresses.\\r\\n   * @param _bribes Array of bribe addresses.\\r\\n   */\\r\\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the maximum number of votes.\\r\\n   * @param _maxVotingNum Maximum number of votes allowed.\\r\\n   */\\r\\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggle the alive status of a reward accumulator.\\r\\n   * @param _market Address of the market.\\r\\n   * @param _marketSide Side of the market.\\r\\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\\r\\n   */\\r\\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Get the start of the epoch for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the epoch start for.\\r\\n   * @return The start of the epoch.\\r\\n   */\\r\\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the next epoch for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the next epoch for.\\r\\n   * @return The next epoch.\\r\\n   */\\r\\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the start of the voting period for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the voting start for.\\r\\n   * @return The start of the voting period.\\r\\n   */\\r\\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the end of the voting period for a given timestamp.\\r\\n   * @param _timestamp The timestamp to calculate the voting end for.\\r\\n   * @return The end of the voting period.\\r\\n   */\\r\\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the number of markets.\\r\\n   * @return The number of markets.\\r\\n   */\\r\\n  function marketsLength() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get all LP reward tokens.\\r\\n   * @return An array of addresses representing all LP reward tokens.\\r\\n   */\\r\\n  function getAllLpRewardTokens() external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Get vote details for a specific token ID and LP asset.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpAsset The address of the LP asset.\\r\\n   * @return A struct containing vote details.\\r\\n   */\\r\\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xdc61ea567a04ef73efb279313e914aea054d643cf9e665706676d99b1fe8e448\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\r\\n\\r\\n/// @title IveION Interface\\r\\n/// @notice Interface for veION contract\\r\\ninterface IveIONCore {\\r\\n  /**\\r\\n   * @notice Creates a new lock for multiple tokens and assigns it to a specified address\\r\\n   * @param _tokenAddress Array of token addresses to lock\\r\\n   * @param _tokenAmount Array of token amounts to lock\\r\\n   * @param _duration Array of lock durations\\r\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\r\\n   * @param _to Address to assign the lock to\\r\\n   * @return The ID of the newly created veNFT\\r\\n   */\\r\\n  function createLockFor(\\r\\n    address[] memory _tokenAddress,\\r\\n    uint256[] memory _tokenAmount,\\r\\n    uint256[] memory _duration,\\r\\n    bool[] memory _stakeUnderlying,\\r\\n    address _to\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Creates a new lock for multiple tokens\\r\\n   * @param _tokenAddress Array of token addresses to lock\\r\\n   * @param _tokenAmount Array of token amounts to lock\\r\\n   * @param _duration Array of lock durations\\r\\n   * @param _stakeUnderlying Array of booleans indicating whether to stake underlying tokens\\r\\n   * @return The ID of the newly created veNFT\\r\\n   */\\r\\n  function createLock(\\r\\n    address[] calldata _tokenAddress,\\r\\n    uint256[] calldata _tokenAmount,\\r\\n    uint256[] calldata _duration,\\r\\n    bool[] memory _stakeUnderlying\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Increases the amount of tokens locked for a specific veNFT\\r\\n   * @param _tokenAddress Address of the token to increase lock amount for\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _tokenAmount Amount of tokens to add to the lock\\r\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\r\\n   */\\r\\n  function increaseAmount(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _tokenAmount,\\r\\n    bool _stakeUnderlying\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Locks additional asset type for an existing veNFT\\r\\n   * @param _tokenAddress Address of the new token to lock\\r\\n   * @param _tokenAmount Amount of tokens to lock\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _duration Duration of the lock\\r\\n   * @param _stakeUnderlying Whether to stake the underlying tokens\\r\\n   */\\r\\n  function lockAdditionalAsset(\\r\\n    address _tokenAddress,\\r\\n    uint256 _tokenAmount,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _duration,\\r\\n    bool _stakeUnderlying\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Increases the lock duration for a specific token in a veNFT\\r\\n   * @param _tokenAddress Address of the token\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _lockDuration New lock duration to extend to\\r\\n   */\\r\\n  function increaseUnlockTime(address _tokenAddress, uint256 _tokenId, uint256 _lockDuration) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Delegates voting power from one veNFT to another.\\r\\n   * @param fromTokenId The ID of the veNFT from which voting power is delegated.\\r\\n   * @param toTokenId The ID of the veNFT to which voting power is delegated.\\r\\n   * @param lpToken The address of the LP token associated with the delegation.\\r\\n   * @param amount The amount of voting power to delegate.\\r\\n   */\\r\\n  function delegate(uint256 fromTokenId, uint256 toTokenId, address lpToken, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes delegatees from a specific veNFT\\r\\n   * @param fromTokenId ID of the veNFT from which delegatees are removed\\r\\n   * @param toTokenIds Array of veNFT IDs that are delegatees to be removed\\r\\n   * @param lpToken Address of the LP token associated with the delegation\\r\\n   * @param amounts Array of amounts of voting power to remove from each delegatee\\r\\n   */\\r\\n  function removeDelegatees(\\r\\n    uint256 fromTokenId,\\r\\n    uint256[] memory toTokenIds,\\r\\n    address lpToken,\\r\\n    uint256[] memory amounts\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Removes delegators from a specific veNFT\\r\\n   * @param fromTokenIds Array of veNFT IDs that are delegators to be removed\\r\\n   * @param toTokenId ID of the veNFT from which delegators are removed\\r\\n   * @param lpToken Address of the LP token associated with the delegation\\r\\n   * @param amounts Array of amounts of voting power to remove from each delegator\\r\\n   */\\r\\n  function removeDelegators(\\r\\n    uint256[] memory fromTokenIds,\\r\\n    uint256 toTokenId,\\r\\n    address lpToken,\\r\\n    uint256[] memory amounts\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Locks a token permanently.\\r\\n   * @param _tokenAddress The address of the token to lock.\\r\\n   * @param _tokenId The ID of the token to lock.\\r\\n   */\\r\\n  function lockPermanent(address _tokenAddress, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Unlocks a permanently locked token.\\r\\n   * @param _tokenAddress The address of the token to unlock.\\r\\n   * @param _tokenId The ID of the token to unlock.\\r\\n   */\\r\\n  function unlockPermanent(address _tokenAddress, uint256 _tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Updates voting status for a veNFT\\r\\n   * @param _tokenId ID of the veNFT\\r\\n   * @param _voting Voting status\\r\\n   */\\r\\n  function voting(uint256 _tokenId, bool _voting) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the implementation addresses for the veION contract extensions.\\r\\n   * @dev This function can only be called by authorized entities.\\r\\n   * @param _veIONFirstExtension The address of the first extension contract.\\r\\n   * @param _veIONSecondExtension The address of the second extension contract.\\r\\n   */\\r\\n  function setExtensions(address _veIONFirstExtension, address _veIONSecondExtension) external;\\r\\n}\\r\\n\\r\\n/// @title IAeroVotingEscrow Interface\\r\\n/// @notice Interface for Aero Voting Escrow contract\\r\\ninterface IAeroVotingEscrow {\\r\\n  /**\\r\\n   * @notice Returns the balance of the specified owner.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @return The balance of the owner.\\r\\n   */\\r\\n  function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the token ID at a specific index for a given owner.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @param _index The index of the token ID in the owner's list.\\r\\n   * @return The token ID at the specified index.\\r\\n   */\\r\\n  function ownerToNFTokenIdList(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/// @title IAeroVoter Interface\\r\\n/// @notice Interface for Aero Voter contract\\r\\ninterface IAeroVoter {\\r\\n  /**\\r\\n   * @notice Returns the list of pools voted for by a specific token ID.\\r\\n   * @param tokenId The ID of the token.\\r\\n   * @return An array of addresses representing the pools voted for.\\r\\n   */\\r\\n  function poolVote(uint256 tokenId) external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the weight of a specific pool.\\r\\n   * @param pool The address of the pool.\\r\\n   * @return The weight of the pool.\\r\\n   */\\r\\n  function weights(address pool) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the number of votes a specific token ID has for a given pool.\\r\\n   * @param tokenId The ID of the token.\\r\\n   * @param pool The address of the pool.\\r\\n   * @return The number of votes for the pool.\\r\\n   */\\r\\n  function votes(uint256 tokenId, address pool) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n  function getAddress(string calldata id) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IMasterPriceOracle {\\r\\n  function price(address underlying) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x0804ccb0d3f9e8a9858447ac2677b62843fd62f1053df0331689388db19444ea\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONSecondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../stake/IStakeStrategy.sol\\\";\\r\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./IveIONStructsEnumsErrorsEvents.sol\\\";\\r\\n\\r\\n/// @title IveION Interface Second Extension\\r\\n/// @notice Interface for veION contract\\r\\ninterface IveIONSecondExtension is IveIONStructsEnumsErrorsEvents {\\r\\n  /**\\r\\n   * @notice Whitelists or removes tokens from the whitelist.\\r\\n   * @param _tokens An array of token addresses to be whitelisted or removed.\\r\\n   * @param _isWhitelisted An array of booleans indicating the whitelist status for each token.\\r\\n   */\\r\\n  function whitelistTokens(address[] memory _tokens, bool[] memory _isWhitelisted) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws protocol fees for a specific token to a recipient address.\\r\\n   * @param _tokenAddress The address of the token for which protocol fees are to be withdrawn.\\r\\n   * @param _recipient The address to which the protocol fees will be sent.\\r\\n   */\\r\\n  function withdrawProtocolFees(address _tokenAddress, address _recipient) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws distributed fees for a specific token to a recipient address.\\r\\n   * @param _tokenAddress The address of the token for which distributed fees are to be withdrawn.\\r\\n   * @param _recipient The address to which the distributed fees will be sent.\\r\\n   */\\r\\n  function withdrawDistributedFees(address _tokenAddress, address _recipient) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggles the ability to split tokens for a specific account.\\r\\n   * @param _account The address of the account.\\r\\n   * @param _isAllowed Boolean indicating if splitting is allowed.\\r\\n   */\\r\\n  function toggleSplit(address _account, bool _isAllowed) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Toggles the limited boost feature.\\r\\n   * @param _isBoosted Boolean indicating if the boost is active.\\r\\n   */\\r\\n  function toggleLimitedBoost(bool _isBoosted) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the amount for a limited time boost.\\r\\n   * @param _boostAmount The amount of the boost.\\r\\n   */\\r\\n  function setLimitedTimeBoost(uint256 _boostAmount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the voter.\\r\\n   * @param _voter The address of the voter.\\r\\n   */\\r\\n  function setVoter(address _voter) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the minimum lock amount for a specific token.\\r\\n   * @param _tokenAddress The address of the token.\\r\\n   * @param _minimumAmount The minimum amount to lock.\\r\\n   */\\r\\n  function setMinimumLockAmount(address _tokenAddress, uint256 _minimumAmount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the minimum lock duration.\\r\\n   * @param _minimumLockDuration The minimum duration for locking.\\r\\n   */\\r\\n  function setMinimumLockDuration(uint256 _minimumLockDuration) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the Ionic Pool.\\r\\n   * @param _ionicPool The address of the Ionic Pool.\\r\\n   */\\r\\n  function setIonicPool(address _ionicPool) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the Aero Voting contract.\\r\\n   * @param _aeroVoting The address of the Aero Voting contract.\\r\\n   */\\r\\n  function setAeroVoting(address _aeroVoting) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the boost amount for Aero Voter.\\r\\n   * @param _aeroVoterBoost The boost amount for Aero Voter.\\r\\n   */\\r\\n  function setAeroVoterBoost(uint256 _aeroVoterBoost) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the maximum early withdrawal fee.\\r\\n   * @param _maxEarlyWithdrawFee The maximum fee for early withdrawal.\\r\\n   */\\r\\n  function setMaxEarlyWithdrawFee(uint256 _maxEarlyWithdrawFee) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the LP token type for a specific token.\\r\\n   * @param _token The address of the token.\\r\\n   * @param _type The LP token type.\\r\\n   */\\r\\n  function setLpTokenType(address _token, LpTokenType _type) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the stake strategy for a specific LP token type.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @param _strategy The stake strategy.\\r\\n   */\\r\\n  function setStakeStrategy(LpTokenType _lpType, IStakeStrategy _strategy) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the veAERO contract.\\r\\n   * @param _veAERO The address of the veAERO contract.\\r\\n   */\\r\\n  function setVeAERO(address _veAERO) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the lock information for a specific user.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @return A LockedBalance struct containing lock details.\\r\\n   */\\r\\n  function getUserLock(uint256 _tokenId, LpTokenType _lpType) external view returns (LockedBalance memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the token IDs owned by a specific address.\\r\\n   * @param _owner The address of the owner.\\r\\n   * @return An array of token IDs owned by the address.\\r\\n   */\\r\\n  function getOwnedTokenIds(address _owner) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the assets locked for a specific token ID.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @return An array of addresses representing the locked assets.\\r\\n   */\\r\\n  function getAssetsLocked(uint256 _tokenId) external view returns (address[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the delegatees for a specific token ID and LP token type.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @return An array of delegatee IDs.\\r\\n   */\\r\\n  function getDelegatees(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the delegators for a specific token ID and LP token type.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @return An array of delegator IDs.\\r\\n   */\\r\\n  function getDelegators(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Retrieves the user point for a specific token ID, LP token type, and epoch.\\r\\n   * @param _tokenId The ID of the token.\\r\\n   * @param _lpType The LP token type.\\r\\n   * @param _epoch The epoch number.\\r\\n   * @return A UserPoint struct containing user point details.\\r\\n   */\\r\\n  function getUserPoint(uint256 _tokenId, LpTokenType _lpType, uint256 _epoch) external view returns (UserPoint memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x4fd32559214c78995ae66aea68708b43477ea3132f06e1749162aaa6cac2bb9e\",\"license\":\"UNLICENSED\"},\"contracts/veION/interfaces/IveIONStructsEnumsErrorsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\ninterface IveIONStructsEnumsErrorsEvents {\\r\\n  /**\\r\\n   * @notice Structure representing a locked balance\\r\\n   * @param tokenAddress Address of the token\\r\\n   * @param amount Amount of tokens locked\\r\\n   * @param delegateAmount Amount of tokens delegated\\r\\n   * @param start Start time of the lock\\r\\n   * @param end End time of the lock\\r\\n   * @param isPermanent Indicates if the lock is permanent\\r\\n   * @param boost Boost value for the lock\\r\\n   */\\r\\n  struct LockedBalance {\\r\\n    address tokenAddress;\\r\\n    uint256 amount;\\r\\n    uint256 delegateAmount;\\r\\n    uint256 start;\\r\\n    uint256 end;\\r\\n    bool isPermanent;\\r\\n    uint256 boost;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a delegation\\r\\n   * @param amount Amount of tokens delegated\\r\\n   * @param delegatee ID of the delegatee\\r\\n   */\\r\\n  struct Delegation {\\r\\n    uint256 amount;\\r\\n    uint256 delegatee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a user point\\r\\n   * @param bias Bias value\\r\\n   * @param slope Slope value, representing -dweight / dt\\r\\n   * @param ts Timestamp of the point\\r\\n   * @param blk Block number of the point\\r\\n   * @param permanent Permanent value\\r\\n   * @param permanentDelegate Permanent delegate value\\r\\n   */\\r\\n  struct UserPoint {\\r\\n    uint256 bias;\\r\\n    uint256 slope;\\r\\n    uint256 ts;\\r\\n    uint256 blk;\\r\\n    uint256 permanent;\\r\\n    uint256 permanentDelegate;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a global point\\r\\n   * @param bias Bias value\\r\\n   * @param slope Slope value, representing -dweight / dt\\r\\n   * @param ts Timestamp of the point\\r\\n   * @param blk Block number of the point\\r\\n   * @param permanentLockBalance Permanent lock balance\\r\\n   */\\r\\n  struct GlobalPoint {\\r\\n    int128 bias;\\r\\n    int128 slope;\\r\\n    uint256 ts;\\r\\n    uint256 blk;\\r\\n    uint256 permanentLockBalance;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Structure representing a checkpoint\\r\\n   * @param fromTimestamp Timestamp from which the checkpoint is valid\\r\\n   * @param owner Address of the owner\\r\\n   * @param delegatedBalance Balance that has been delegated\\r\\n   * @param delegatee ID of the delegatee\\r\\n   */\\r\\n  struct Checkpoint {\\r\\n    uint256 fromTimestamp;\\r\\n    address owner;\\r\\n    uint256 delegatedBalance;\\r\\n    uint256 delegatee;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum representing deposit types\\r\\n   */\\r\\n  enum DepositType {\\r\\n    DEPOSIT_FOR_TYPE,\\r\\n    CREATE_LOCK_TYPE,\\r\\n    INCREASE_LOCK_AMOUNT,\\r\\n    INCREASE_UNLOCK_TIME,\\r\\n    LOCK_ADDITIONAL\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Enum representing LP token types\\r\\n   */\\r\\n  enum LpTokenType {\\r\\n    Mode_Velodrome_5050_ION_MODE,\\r\\n    Mode_Balancer_8020_ION_ETH,\\r\\n    Base_Aerodrome_5050_ION_wstETH,\\r\\n    Base_Balancer_8020_ION_ETH,\\r\\n    Optimism_Velodrome_5050_ION_OP,\\r\\n    Optimism_Balancer_8020_ION_ETH\\r\\n  }\\r\\n\\r\\n  error LockDurationNotInFuture();\\r\\n  error ZeroAmount();\\r\\n  error LockDurationTooLong();\\r\\n  error TokenNotWhitelisted();\\r\\n  error NotOwner();\\r\\n  error AlreadyVoted();\\r\\n  error PermanentLock();\\r\\n  error NoLockFound();\\r\\n  error LockExpired();\\r\\n  error SameNFT();\\r\\n  error SplitNotAllowed();\\r\\n  error AmountTooBig();\\r\\n  error NotPermanentLock();\\r\\n  error TokenHasDelegatees();\\r\\n  error TokenHasDelegators();\\r\\n  error NotVoter();\\r\\n  error MinimumNotMet();\\r\\n  error ArrayMismatch();\\r\\n  error LockDurationTooShort();\\r\\n  error DuplicateAsset();\\r\\n  error SplitTooSmall();\\r\\n  error NotEnoughRemainingAfterSplit();\\r\\n  error NoDelegationBetweenTokens(uint256 _tokenId1, uint256 _tokenId2);\\r\\n  error NoUnderlyingStake();\\r\\n  error NotAcceptingDelegators();\\r\\n  error BoostAmountMustBeGreaterThanZero();\\r\\n  error InvalidAddress();\\r\\n  error MinimumAmountMustBeGreaterThanZero();\\r\\n  error MinimumLockDurationMustBeGreaterThanZero();\\r\\n  error AeroBoostAmountMustBeGreaterThanZero();\\r\\n  error MaxEarlyWithdrawFeeMustBeGreaterThanZero();\\r\\n  error InvalidTokenAddress();\\r\\n  error InvalidStrategyAddress();\\r\\n  error InvalidVeAEROAddress();\\r\\n\\r\\n  event Deposit(\\r\\n    address indexed provider,\\r\\n    uint256 indexed tokenId,\\r\\n    DepositType indexed depositType,\\r\\n    uint256 value,\\r\\n    uint256 locktime,\\r\\n    uint256 ts\\r\\n  );\\r\\n  event Withdraw(address indexed provider, uint256 indexed tokenId, uint256 value, uint256 ts);\\r\\n  event Supply(uint256 prevSupply, uint256 supply);\\r\\n  event Delegated(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\r\\n  event DelegationRemoved(uint256 indexed fromTokenId, uint256 indexed toTokenId, address lpToken, uint256 amount);\\r\\n  event ProtocolFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\r\\n  event DistributedFeesWithdrawn(address indexed tokenAddress, address indexed recipient, uint256 amount);\\r\\n  event SplitToggle(address indexed account, bool isAllowed);\\r\\n  event LimitedBoostToggled(bool isBoosted);\\r\\n  event LimitedTimeBoostSet(uint256 boostAmount);\\r\\n  event VoterSet(address indexed newVoter);\\r\\n  event AeroVotingSet(address indexed newAeroVoting);\\r\\n  event AeroVoterBoostSet(uint256 newAeroVoterBoost);\\r\\n  event TokensWhitelisted(address[] token, bool[] isWhitelisted);\\r\\n  event LpTokenTypeSet(address indexed token, LpTokenType lpTokenType);\\r\\n  event VeAEROSet(address indexed veAERO);\\r\\n  event StakeStrategySet(LpTokenType indexed lpTokenType, address indexed strategy);\\r\\n  event MinimumLockAmountSet(address indexed tokenAddress, uint256 minimumAmount);\\r\\n  event MinimumLockDurationSet(uint256 minimumDuration);\\r\\n  event IonicPoolSet(address indexed newIonicPool);\\r\\n  event SplitCompleted(\\r\\n    uint256 indexed fromTokenId,\\r\\n    uint256 indexed tokenId1,\\r\\n    uint256 indexed tokenId2,\\r\\n    uint256 splitAmount,\\r\\n    address tokenAddress\\r\\n  );\\r\\n  event MergeCompleted(\\r\\n    uint256 indexed fromTokenId,\\r\\n    uint256 indexed toTokenId,\\r\\n    address[] assetsLocked,\\r\\n    uint256 lengthOfAssets\\r\\n  );\\r\\n  event EmissionsClaimed(address indexed claimant, address indexed tokenAddress);\\r\\n  event MaxEarlyWithdrawFeeSet(uint256 maxEarlyWithdrawFee);\\r\\n  event PermanentLockCreated(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\r\\n  event PermanentLockRemoved(address indexed tokenAddress, uint256 indexed tokenId, uint256 amount);\\r\\n  event Voted(uint256 _tokenId, bool _voting);\\r\\n  event DelegatorsBlocked(uint256 indexed _tokenId, address indexed _lpToken, bool _blocked);\\r\\n  event Initialized(address indexed addressesProvider);\\r\\n  event ExtensionsSet(address indexed _firstExtension, address indexed _secondExtension);\\r\\n}\\r\\n\",\"keccak256\":\"0xf695c1f186cd94a5f131a6c1a1aa26f549e1ae483749be91146493fe81df80cf\",\"license\":\"UNLICENSED\"},\"contracts/veION/libraries/BalanceLogicLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport \\\"../interfaces/IveIONStructsEnumsErrorsEvents.sol\\\";\\r\\n\\r\\nlibrary BalanceLogicLibrary {\\r\\n  uint256 internal constant _WEEK = 1 weeks;\\r\\n\\r\\n  /// @notice Calculates the voting power for a given NFT at a specific time.\\r\\n  /// @dev This function is compatible with the ERC20 `balanceOf` interface for Aragon.\\r\\n  ///      It retrieves the last user point before a specified timestamp and computes the voting power at that time.\\r\\n  /// @param s_userPointEpoch Mapping of user point epochs for all tokens.\\r\\n  /// @param s_userPointHistory Mapping of user point history for all tokens.\\r\\n  /// @param _lpType The type of LP token associated with the NFT.\\r\\n  /// @param _tokenId The ID of the NFT for which to calculate voting power.\\r\\n  /// @param _t The epoch time at which to calculate the voting power.\\r\\n  /// @param _isPermanent A boolean indicating if the lock is permanent.\\r\\n  /// @return The calculated voting power of the user at the specified time.\\r\\n  function balanceOfNFTAt(\\r\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)) storage s_userPointEpoch,\\r\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))\\r\\n      storage s_userPointHistory,\\r\\n    IveIONStructsEnumsErrorsEvents.LpTokenType _lpType,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _t,\\r\\n    bool _isPermanent\\r\\n  ) internal view returns (uint256) {\\r\\n    uint256 _epoch = getPastUserPointIndex(s_userPointEpoch, s_userPointHistory, _lpType, _tokenId, _t);\\r\\n    // epoch 0 is an empty point\\r\\n    if (_epoch == 0) return 0;\\r\\n    IveIONStructsEnumsErrorsEvents.UserPoint memory lastPoint = s_userPointHistory[_tokenId][_lpType][_epoch];\\r\\n    if (_isPermanent) {\\r\\n      return lastPoint.permanent + lastPoint.permanentDelegate;\\r\\n    } else {\\r\\n      uint256 reduction = lastPoint.slope * (_t - lastPoint.ts);\\r\\n      if (reduction > lastPoint.bias) {\\r\\n        lastPoint.bias = 0;\\r\\n      } else {\\r\\n        lastPoint.bias -= reduction;\\r\\n      }\\r\\n      return lastPoint.bias;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Binary search to get the user point index for a token id at or prior to a given timestamp\\r\\n  /// @dev If a user point does not exist prior to the timestamp, this will return 0.\\r\\n  /// @param s_userPointEpoch State of all user point epochs\\r\\n  /// @param s_userPointHistory State of all user point history\\r\\n  /// @param _tokenId .\\r\\n  /// @param _timestamp .\\r\\n  /// @return User point index\\r\\n  function getPastUserPointIndex(\\r\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)) storage s_userPointEpoch,\\r\\n    mapping(uint256 => mapping(IveIONStructsEnumsErrorsEvents.LpTokenType => IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))\\r\\n      storage s_userPointHistory,\\r\\n    IveIONStructsEnumsErrorsEvents.LpTokenType _lpType,\\r\\n    uint256 _tokenId,\\r\\n    uint256 _timestamp\\r\\n  ) internal view returns (uint256) {\\r\\n    uint256 _userEpoch = s_userPointEpoch[_tokenId][_lpType];\\r\\n    if (_userEpoch == 0) return 0;\\r\\n    // First check most recent balance\\r\\n    if (s_userPointHistory[_tokenId][_lpType][_userEpoch].ts <= _timestamp) return (_userEpoch);\\r\\n    // Next check implicit zero balance\\r\\n    if (s_userPointHistory[_tokenId][_lpType][1].ts > _timestamp) return 0;\\r\\n    uint256 lower = 0;\\r\\n    uint256 upper = _userEpoch;\\r\\n    while (upper > lower) {\\r\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n      IveIONStructsEnumsErrorsEvents.UserPoint storage userPoint = s_userPointHistory[_tokenId][_lpType][center];\\r\\n      if (userPoint.ts == _timestamp) {\\r\\n        return center;\\r\\n      } else if (userPoint.ts < _timestamp) {\\r\\n        lower = center;\\r\\n      } else {\\r\\n        upper = center - 1;\\r\\n      }\\r\\n    }\\r\\n    return lower;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x3ccfc0c77db51f6cd688794aa329f32ee02db08a471700d8f5973268e6598f72\",\"license\":\"UNLICENSED\"},\"contracts/veION/stake/IStakeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\n/**\\r\\n * @title IStakeStrategy\\r\\n * @notice Interface for the VeloIonModeStakingModeReward contract.\\r\\n */\\r\\ninterface IStakeStrategy {\\r\\n  /// @notice Emitted when the contract is initialized\\r\\n  event Initialized(\\r\\n    address indexed escrow,\\r\\n    address indexed stakingToken,\\r\\n    address indexed stakingContract,\\r\\n    address stakingWalletImplementation\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when tokens are staked\\r\\n  event Staked(address indexed from, uint256 amount, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when rewards are claimed\\r\\n  event Claimed(address indexed from, address indexed veloWallet);\\r\\n\\r\\n  /// @notice Emitted when tokens are withdrawn\\r\\n  event Withdrawn(address indexed owner, address indexed withdrawTo, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when staking wallet is transferred\\r\\n  event StakingWalletTransferred(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when escrow is set\\r\\n  event EscrowSet(address indexed newEscrow);\\r\\n\\r\\n  /// @notice Emitted when staking token is set\\r\\n  event StakingTokenSet(address indexed newStakingToken);\\r\\n\\r\\n  /// @notice Emitted when staking contract is set\\r\\n  event StakingContractSet(address indexed newStakingContract);\\r\\n\\r\\n  /// @notice Emitted when upgradeable beacon is set\\r\\n  event UpgradeableBeaconSet(address indexed newBeacon);\\r\\n\\r\\n  /**\\r\\n   * @notice Stakes a specified amount of tokens from a given address.\\r\\n   * @param _from The address from which tokens will be staked.\\r\\n   * @param _amount The amount of tokens to stake.\\r\\n   * @param _data Additional data that might be needed for staking.\\r\\n   */\\r\\n  function stake(address _from, uint256 _amount, bytes memory _data) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Claims rewards for a given address.\\r\\n   * @param _from The address for which to claim rewards.\\r\\n   */\\r\\n  function claim(address _from) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Withdraws a specified amount of tokens for a given address.\\r\\n   * @param _owner The address from which tokens will be withdrawn.\\r\\n   * @param _amount The amount of tokens to withdraw.\\r\\n   */\\r\\n  function withdraw(address _owner, address _withdrawTo, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the current reward rate for the staking strategy.\\r\\n   * @return The reward rate as a uint256.\\r\\n   */\\r\\n  function rewardRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the period finish time for the staking strategy.\\r\\n   * @return The period finish time as a uint256.\\r\\n   */\\r\\n  function periodFinish() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the balance of a specific address.\\r\\n   * @param account The address to query the balance of.\\r\\n   * @return The balance as a uint256.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the total supply of staked tokens.\\r\\n   * @return The total supply as a uint256.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the reward token for the staking strategy.\\r\\n   * @return The address of the reward token.\\r\\n   */\\r\\n  function rewardToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking contract.\\r\\n   * @return The address of the staking contract.\\r\\n   */\\r\\n  function stakingContract() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the staking token.\\r\\n   * @return The address of the staking token.\\r\\n   */\\r\\n  function stakingToken() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the staking wallet address for a specific user.\\r\\n   * @param user The address of the user.\\r\\n   * @return The address of the user's staking wallet.\\r\\n   */\\r\\n  function userStakingWallet(address user) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers the staking wallet from one user to another.\\r\\n   * @param from The current owner of the staking wallet.\\r\\n   * @param to The new owner of the staking wallet.\\r\\n   */\\r\\n  function transferStakingWallet(address from, address to, uint256 _amount) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the escrow address.\\r\\n   * @param _escrow The address of the new escrow.\\r\\n   */\\r\\n  function setEscrow(address _escrow) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking token address.\\r\\n   * @param _stakingToken The address of the new staking token.\\r\\n   */\\r\\n  function setStakingToken(address _stakingToken) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the staking contract address.\\r\\n   * @param _stakingContract The address of the new staking contract.\\r\\n   */\\r\\n  function setStakingContract(address _stakingContract) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the address of the  beacon.\\r\\n   * @param _beacon The address of the new beacon contract.\\r\\n   */\\r\\n  function setUpgradeableBeacon(address _beacon) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x69d7a60ae3df2ead3b3afaa32ae9b6ea4df13ef65c7c375babe7be2e5457fc8b\",\"license\":\"UNLICENSED\"},\"contracts/veION/veIONSecondExtension.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport { ERC721Upgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\\\";\\r\\nimport { IMasterPriceOracle, IAeroVotingEscrow, IAeroVoter } from \\\"./interfaces/IveIONCore.sol\\\";\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { IVoter } from \\\"./interfaces/IVoter.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { veIONStorage } from \\\"./veIONStorage.sol\\\";\\r\\nimport { BalanceLogicLibrary } from \\\"./libraries/BalanceLogicLibrary.sol\\\";\\r\\nimport { IveIONSecondExtension } from \\\"./interfaces/IveIONSecondExtension.sol\\\";\\r\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport { IAddressesProvider } from \\\"./interfaces/IveIONCore.sol\\\";\\r\\nimport { IStakeStrategy } from \\\"./stake/IStakeStrategy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title veION Contract Second Extension\\r\\n * @notice This contract manages the veION framework, enabling the staking and management LP tokens for voting power.\\r\\n * @author Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)\\r\\n */\\r\\ncontract veIONSecondExtension is\\r\\n  Ownable2StepUpgradeable,\\r\\n  ERC721Upgradeable,\\r\\n  ReentrancyGuardUpgradeable,\\r\\n  veIONStorage,\\r\\n  IveIONSecondExtension\\r\\n{\\r\\n  using EnumerableSet for EnumerableSet.UintSet;\\r\\n  using EnumerableSet for EnumerableSet.AddressSet;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  constructor() {\\r\\n    _disableInitializers(); // Locks the implementation contract from being initialized\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function whitelistTokens(address[] memory _tokens, bool[] memory _isWhitelisted) external onlyOwner {\\r\\n    require(_tokens.length == _isWhitelisted.length, \\\"Unequal Arrays\\\");\\r\\n    for (uint256 i; i < _tokens.length; i++) s_whitelistedToken[_tokens[i]] = _isWhitelisted[i];\\r\\n    emit TokensWhitelisted(_tokens, _isWhitelisted);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function withdrawProtocolFees(address _tokenAddress, address _recipient) external onlyOwner {\\r\\n    LpTokenType lpType = s_lpType[_tokenAddress];\\r\\n    uint256 protocolFees = s_protocolFees[lpType];\\r\\n    require(protocolFees > 0, \\\"No protocol fees available\\\");\\r\\n    s_protocolFees[lpType] = 0;\\r\\n    IERC20(_tokenAddress).safeTransfer(_recipient, protocolFees);\\r\\n    emit ProtocolFeesWithdrawn(_tokenAddress, _recipient, protocolFees);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function withdrawDistributedFees(address _tokenAddress, address _recipient) external onlyOwner {\\r\\n    LpTokenType lpType = s_lpType[_tokenAddress];\\r\\n    uint256 distributedFees = s_distributedFees[lpType];\\r\\n    require(distributedFees > 0, \\\"No distributed fees available\\\");\\r\\n    s_distributedFees[lpType] = 0;\\r\\n    IERC20(_tokenAddress).safeTransfer(_recipient, distributedFees);\\r\\n    emit DistributedFeesWithdrawn(_tokenAddress, _recipient, distributedFees);\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           Setter Functions                                \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function toggleSplit(address _account, bool _isAllowed) external onlyOwner {\\r\\n    s_canSplit[_account] = _isAllowed;\\r\\n    emit SplitToggle(_account, _isAllowed);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function toggleLimitedBoost(bool _isBoosted) external onlyOwner {\\r\\n    s_limitedBoostActive = _isBoosted;\\r\\n    emit LimitedBoostToggled(_isBoosted);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setLimitedTimeBoost(uint256 _boostAmount) external onlyOwner {\\r\\n    if (_boostAmount <= 0) revert BoostAmountMustBeGreaterThanZero();\\r\\n    s_limitedBoost = _boostAmount;\\r\\n    emit LimitedTimeBoostSet(_boostAmount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setVoter(address _voter) external onlyOwner {\\r\\n    if (address(_voter) == address(0)) revert InvalidAddress();\\r\\n    s_voter = _voter;\\r\\n    emit VoterSet(_voter);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setMinimumLockAmount(address _tokenAddress, uint256 _minimumAmount) external onlyOwner {\\r\\n    if (_minimumAmount <= 0) revert MinimumAmountMustBeGreaterThanZero();\\r\\n    LpTokenType lpType = s_lpType[_tokenAddress];\\r\\n    s_minimumLockAmount[lpType] = _minimumAmount;\\r\\n    emit MinimumLockAmountSet(_tokenAddress, _minimumAmount);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setMinimumLockDuration(uint256 _minimumLockDuration) external onlyOwner {\\r\\n    if (_minimumLockDuration <= 0) revert MinimumLockDurationMustBeGreaterThanZero();\\r\\n    s_minimumLockDuration = _minimumLockDuration;\\r\\n    emit MinimumLockDurationSet(_minimumLockDuration);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setIonicPool(address _ionicPool) external onlyOwner {\\r\\n    if (address(_ionicPool) == address(0)) revert InvalidAddress();\\r\\n    s_ionicPool = _ionicPool;\\r\\n    emit IonicPoolSet(_ionicPool);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setAeroVoting(address _aeroVoting) external onlyOwner {\\r\\n    if (address(_aeroVoting) == address(0)) revert InvalidAddress();\\r\\n    s_aeroVoting = _aeroVoting;\\r\\n    emit AeroVotingSet(_aeroVoting);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setAeroVoterBoost(uint256 _aeroVoterBoost) external onlyOwner {\\r\\n    if (_aeroVoterBoost <= 0) revert AeroBoostAmountMustBeGreaterThanZero();\\r\\n    s_aeroVoterBoost = _aeroVoterBoost;\\r\\n    emit AeroVoterBoostSet(_aeroVoterBoost);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setMaxEarlyWithdrawFee(uint256 _maxEarlyWithdrawFee) external onlyOwner {\\r\\n    if (_maxEarlyWithdrawFee <= 0) revert MaxEarlyWithdrawFeeMustBeGreaterThanZero();\\r\\n    s_maxEarlyWithdrawFee = _maxEarlyWithdrawFee;\\r\\n    emit MaxEarlyWithdrawFeeSet(_maxEarlyWithdrawFee);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setLpTokenType(address _token, LpTokenType _type) external onlyOwner {\\r\\n    if (_token == address(0)) revert InvalidTokenAddress();\\r\\n    s_lpType[_token] = _type;\\r\\n    emit LpTokenTypeSet(_token, _type);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setStakeStrategy(LpTokenType _lpType, IStakeStrategy _strategy) external onlyOwner {\\r\\n    if (address(_strategy) == address(0)) revert InvalidStrategyAddress();\\r\\n    s_stakeStrategy[_lpType] = IStakeStrategy(_strategy);\\r\\n    emit StakeStrategySet(_lpType, address(_strategy));\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function setVeAERO(address _veAERO) external onlyOwner {\\r\\n    if (_veAERO == address(0)) revert InvalidVeAEROAddress();\\r\\n    s_veAERO = _veAERO;\\r\\n    emit VeAEROSet(_veAERO);\\r\\n  }\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                           View Functions                                  \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function getUserLock(uint256 _tokenId, LpTokenType _lpType) external view returns (LockedBalance memory) {\\r\\n    return s_locked[_tokenId][_lpType];\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function getOwnedTokenIds(address _owner) external view returns (uint256[] memory) {\\r\\n    return s_ownerToTokenIds[_owner].values();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function getAssetsLocked(uint256 _tokenId) external view returns (address[] memory) {\\r\\n    return s_assetsLocked[_tokenId].values();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function getDelegatees(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory) {\\r\\n    return s_delegatees[_tokenId][_lpType].values();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function getDelegators(uint256 _tokenId, LpTokenType _lpType) external view returns (uint256[] memory) {\\r\\n    return s_delegators[_tokenId][_lpType].values();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IveIONSecondExtension\\r\\n  function getUserPoint(\\r\\n    uint256 _tokenId,\\r\\n    LpTokenType _lpType,\\r\\n    uint256 _epoch\\r\\n  ) external view returns (UserPoint memory) {\\r\\n    return s_userPointHistory[_tokenId][_lpType][_epoch];\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7ff3fd8bd01350adef57426eeb57f2462140acaa638d8985720a5998b1fc644\",\"license\":\"UNLICENSED\"},\"contracts/veION/veIONStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.22;\\r\\n\\r\\nimport { IAddressesProvider } from \\\"./interfaces/IveIONCore.sol\\\";\\r\\nimport { IStakeStrategy } from \\\"./stake/IStakeStrategy.sol\\\";\\r\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport { IveIONStructsEnumsErrorsEvents } from \\\"./interfaces/IveIONStructsEnumsErrorsEvents.sol\\\";\\r\\n\\r\\nabstract contract veIONStorage is IveIONStructsEnumsErrorsEvents {\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                                Constants                                  \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /// @notice Represents the duration of one week in seconds.\\r\\n  uint256 internal constant _WEEK = 1 weeks;\\r\\n  /// @notice Represents the maximum lock time in seconds (2 years).\\r\\n  uint256 internal constant _MAXTIME = 2 * 365 * 86400;\\r\\n  /// @notice Precision used for calculations, set to 1e18.\\r\\n  uint256 public constant PRECISION = 1e18;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                             State Variables                               \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /// @notice The current token ID counter.\\r\\n  uint256 public s_tokenId;\\r\\n  /// @notice The amount of limited boost available.\\r\\n  uint256 public s_limitedBoost;\\r\\n  /// @notice Indicates whether the limited boost is active.\\r\\n  bool public s_limitedBoostActive;\\r\\n  /// @notice Address of the veAERO contract.\\r\\n  address public s_veAERO;\\r\\n  /// @notice Address of the AeroVoting contract.\\r\\n  address public s_aeroVoting;\\r\\n  /// @notice Address of the Ionic Pool.\\r\\n  address public s_ionicPool;\\r\\n  /// @notice Address of the voter contract.\\r\\n  address public s_voter;\\r\\n  /// @notice The boost amount for AeroVoter.\\r\\n  uint256 public s_aeroVoterBoost;\\r\\n  /// @notice The minimum duration for locking.\\r\\n  uint256 public s_minimumLockDuration;\\r\\n  /// @notice The maximum fee for early withdrawal.\\r\\n  uint256 public s_maxEarlyWithdrawFee;\\r\\n  /// @notice The AddressesProvider contract used for address management.\\r\\n  IAddressesProvider public ap;\\r\\n  /// @notice The address of the logic contract for the veION first extension.\\r\\n  address public veIONFirstExtension;\\r\\n  /// @notice The address of the logic contract for the veION second extension.\\r\\n  address public veIONSecondExtension;\\r\\n\\r\\n  // \\u2554\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557\\r\\n  // \\u2551                                Mappings                                   \\u2551\\r\\n  // \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\r\\n  /// @dev Maps LP token types to their minimum lock amounts.\\r\\n  mapping(LpTokenType => uint256) public s_minimumLockAmount;\\r\\n  /// @dev Maps token addresses to their whitelist status.\\r\\n  mapping(address => bool) public s_whitelistedToken;\\r\\n  /// @dev Maps token addresses to their corresponding LP token types.\\r\\n  mapping(address => LpTokenType) public s_lpType;\\r\\n  /// @dev Maps user addresses to their ability to split.\\r\\n  mapping(address => bool) public s_canSplit;\\r\\n  /// @dev Maps token IDs and LP token types to their locked balances.\\r\\n  mapping(uint256 => mapping(LpTokenType => LockedBalance)) public s_locked;\\r\\n  /// @dev Maps token IDs and LP token types to user epochs.\\r\\n  mapping(uint256 => mapping(LpTokenType => uint256)) public s_userPointEpoch;\\r\\n  /// @dev Maps token IDs and LP token types to user point history.\\r\\n  mapping(uint256 => mapping(LpTokenType => UserPoint[1000000000])) public s_userPointHistory;\\r\\n  /// @dev Maps token IDs to sets of locked asset addresses.\\r\\n  mapping(uint256 => EnumerableSet.AddressSet) internal s_assetsLocked;\\r\\n  /// @dev Maps token IDs to their voting status.\\r\\n  mapping(uint256 => bool) public s_voted;\\r\\n  /// @dev Maps LP token types to their total supply.\\r\\n  mapping(LpTokenType => uint256) public s_supply;\\r\\n  /// @dev Maps LP token types to their permanent lock balances.\\r\\n  mapping(LpTokenType => uint256) public s_permanentLockBalance;\\r\\n  /// @dev Maps LP token types to their underlying stake strategies.\\r\\n  mapping(LpTokenType => IStakeStrategy) public s_stakeStrategy;\\r\\n  /// @dev Maps token IDs and LP token addresses to their underlying stake amounts.\\r\\n  mapping(uint256 => mapping(address => uint256)) public s_underlyingStake;\\r\\n  /// @dev Maps LP token types to their protocol fees.\\r\\n  mapping(LpTokenType => uint256) public s_protocolFees;\\r\\n  /// @dev Maps LP token types to their distributed fees.\\r\\n  mapping(LpTokenType => uint256) public s_distributedFees;\\r\\n  /// @dev Maps delegators, delegatees, and LP token types to delegation amounts.\\r\\n  mapping(uint256 => mapping(uint256 => mapping(LpTokenType => uint256))) public s_delegations;\\r\\n  /// @dev Maps token IDs and LP token types to sets of delegatees.\\r\\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegatees;\\r\\n  /// @dev Maps token IDs and LP token types to sets of delegators.\\r\\n  mapping(uint256 => mapping(LpTokenType => EnumerableSet.UintSet)) internal s_delegators;\\r\\n  /// @dev Maps owner addresses to sets of token IDs they own.\\r\\n  mapping(address => EnumerableSet.UintSet) internal s_ownerToTokenIds;\\r\\n  /// @dev Maps user addresses and token addresses to cumulative asset values.\\r\\n  mapping(address => mapping(address => uint256)) public s_userCumulativeAssetValues;\\r\\n  /// @dev Maps token Id and lp onto delegator permissioning.\\r\\n  mapping(uint256 => mapping(address => bool)) public s_delegatorsBlocked;\\r\\n\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x321843ccfd620468aca3f64f93362a234871402a2a4a06d8197f950e9c72968a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61309080620000f46000396000f3fe608060405234801561001057600080fd5b506004361061041d5760003560e01c806392415b081161022b578063c155bcc011610130578063e10bbe53116100b8578063e985e9c511610087578063e985e9c514610ba5578063ec09409514610be1578063eec83d8714610c05578063f2fde38b14610c0f578063fab64d1c14610c2257600080fd5b8063e10bbe5314610b20578063e1d514bd14610b33578063e30c397814610b54578063e526789414610b6557600080fd5b8063cc8cb245116100ff578063cc8cb24514610ac5578063cf7b287f14610ae6578063d8a8261114610af9578063d9e3eee214610b03578063df25197414610b1657600080fd5b8063c155bcc014610a1c578063c682ee6814610a7b578063c87b56dd14610a9f578063c9ebe07414610ab257600080fd5b8063ab2d99db116101b3578063b88d4fde11610182578063b88d4fde14610995578063b92a20fa146109a8578063b9e77c5f146109bb578063ba99c4df146109cf578063bae1cb5e146109fb57600080fd5b8063ab2d99db14610930578063ad975d711461093a578063b1113baf14610953578063b5250df31461098257600080fd5b80639ac1cc9d116101fa5780639ac1cc9d146107e7578063a22cb4651461088c578063a285ab8f1461089f578063a7d1ea851461090e578063aaf5eb681461092157600080fd5b806392415b081461078857806395d89b41146107b957806397f819a3146107c157806398008116146107d457600080fd5b80633d2cdbd11161033157806370a08231116102b95780637f8f6768116102885780637f8f67681461071c57806380e13a571461072f57806384cf379c146107505780638da5cb5b14610764578063907aa86a1461077557600080fd5b806370a08231146106d5578063715018a6146106e857806372b4c276146106f057806379ba50971461071457600080fd5b80634fac7e41116103005780634fac7e4114610654578063535d9aaf146106745780636352211e146106a05780636b2fe4c7146106b35780636cbdce56146106c157600080fd5b80633d2cdbd11461060757806342787d2a1461061b57806342842e0e1461062e5780634bc2a6571461064157600080fd5b806312ba89ef116103b457806323b872dd1161038357806323b872dd14610590578063282bbb3d146105a35780632879e840146105b657806333230dc0146105e05780633c4f743c146105f357600080fd5b806312ba89ef1461051f57806314b3bdde14610551578063171314f1146105655780631df595c71461056f57600080fd5b806307b67fe8116103f057806307b67fe814610487578063081812fc146104c1578063095ea7b3146104ec57806311e7b0ee146104ff57600080fd5b806301ffc9a71461042257806303de63551461044a57806304f6c0ef1461045f57806306fdde0314610472575b600080fd5b6104356104303660046127cc565b610c35565b60405190151581526020015b60405180910390f35b61045d6104583660046128ef565b610c87565b005b61045d61046d3660046129b1565b610d8b565b61047a610df1565b6040516104419190612a1a565b6104b3610495366004612a41565b61013e60209081526000928352604080842090915290825290205481565b604051908152602001610441565b6104d46104cf3660046129b1565b610e83565b6040516001600160a01b039091168152602001610441565b61045d6104fa366004612a6d565b610eaa565b61051261050d3660046129b1565b610fbf565b6040516104419190612ade565b6104b361052d366004612af1565b61014860209081526000938452604080852082529284528284209052825290205481565b610137546104d4906001600160a01b031681565b6104b361012d5481565b6104b361057d366004612b26565b6101466020526000908152604090205481565b61045d61059e366004612b41565b610fda565b61045d6105b1366004612b82565b61100b565b6104d46105c4366004612b26565b610144602052600090815260409020546001600160a01b031681565b61045d6105ee366004612bbb565b61115b565b610136546104d4906001600160a01b031681565b610131546104d4906001600160a01b031681565b61045d6106293660046129b1565b6111c4565b61045d61063c366004612b41565b611223565b61045d61064f366004612be9565b61123e565b610667610662366004612be9565b6112b8565b6040516104419190612c06565b6104b3610682366004612c4a565b61014560209081526000928352604080842090915290825290205481565b6104d46106ae3660046129b1565b6112dd565b61012f546104359060ff1681565b610130546104d4906001600160a01b031681565b6104b36106e3366004612be9565b61133d565b61045d6113c3565b6104356106fe366004612be9565b61013a6020526000908152604090205460ff1681565b61045d6113d7565b61045d61072a366004612c6f565b611451565b6104b361073d366004612b26565b6101476020526000908152604090205481565b610138546104d4906001600160a01b031681565b6033546001600160a01b03166104d4565b61045d610783366004612be9565b611514565b6107ac610796366004612be9565b61013b6020526000908152604090205460ff1681565b6040516104419190612ca1565b61047a611596565b61045d6107cf366004612cc9565b6115a5565b61045d6107e23660046129b1565b6115ef565b61084b6107f5366004612a41565b61013d60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0390951695939492939192909160ff169087565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091526080840152151560a083015260c082015260e001610441565b61045d61089a366004612bbb565b61164e565b6108b26108ad366004612a41565b61165d565b604051610441919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a08281015115159082015260c0918201519181019190915260e00190565b61045d61091c366004612be9565b61174e565b6104b3670de0b6b3a764000081565b6104b36101345481565b61012f546104d49061010090046001600160a01b031681565b610435610961366004612c4a565b61014d60209081526000928352604080842090915290825290205460ff1681565b61045d610990366004612be9565b6117c8565b61045d6109a3366004612ce6565b611842565b6106676109b6366004612a41565b61187a565b610132546104d4906001600160a01b031681565b6104b36109dd366004612b82565b61014c60209081526000928352604080842090915290825290205481565b6104b3610a09366004612b26565b6101436020526000908152604090205481565b610a2f610a2a366004612daa565b6118ce565b6040516104419190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b610435610a89366004612be9565b61013c6020526000908152604090205460ff1681565b61047a610aad3660046129b1565b6119b0565b610667610ac0366004612a41565b611a23565b6104b3610ad3366004612b26565b6101396020526000908152604090205481565b61045d610af4366004612b82565b611a4c565b6104b36101335481565b61045d610b113660046129b1565b611b8e565b6104b361012e5481565b61045d610b2e366004612ddf565b611bed565b6104b3610b41366004612b26565b6101426020526000908152604090205481565b6065546001600160a01b03166104d4565b610b78610b73366004612daa565b611c90565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610441565b610435610bb3366004612b82565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b610435610bef3660046129b1565b6101416020526000908152604090205460ff1681565b6104b36101355481565b61045d610c1d366004612be9565b611ce9565b61045d610c30366004612a6d565b611d5a565b60006001600160e01b031982166380ac58cd60e01b1480610c6657506001600160e01b03198216635b5e139f60e01b145b80610c8157506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c8f611e24565b8051825114610cd65760405162461bcd60e51b815260206004820152600e60248201526d556e657175616c2041727261797360901b60448201526064015b60405180910390fd5b60005b8251811015610d4d57818181518110610cf457610cf4612e0b565b602002602001015161013a6000858481518110610d1357610d13612e0b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610cd9565b507fbf5096a6d1add2f85fe6ebea9648302d19fbbe070cd2addfd4feb0404e3c5ec78282604051610d7f929190612e21565b60405180910390a15050565b610d93611e24565b60008111610db45760405163f39f74b360e01b815260040160405180910390fd5b6101348190556040518181527f0be752d502ead9f7f68ae425a37976abee08f7d72a78e613d13a0c1ac153915f906020015b60405180910390a150565b606060c98054610e0090612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2c90612e7a565b8015610e795780601f10610e4e57610100808354040283529160200191610e79565b820191906000526020600020905b815481529060010190602001808311610e5c57829003601f168201915b5050505050905090565b6000610e8e82611e7e565b50600090815260cd60205260409020546001600160a01b031690565b6000610eb5826112dd565b9050806001600160a01b0316836001600160a01b031603610f225760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ccd565b336001600160a01b0382161480610f3e5750610f3e8133610bb3565b610fb05760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610ccd565b610fba8383611edd565b505050565b600081815261014060205260409020606090610c8190611f4b565b610fe43382611f58565b6110005760405162461bcd60e51b8152600401610ccd90612eb4565b610fba838383611fd7565b611013611e24565b6001600160a01b038216600090815261013b602052604081205460ff16906101478183600581111561104757611047612c8b565b600581111561105857611058612c8b565b8152602001908152602001600020549050600081116110b95760405162461bcd60e51b815260206004820152601d60248201527f4e6f206469737472696275746564206665657320617661696c61626c650000006044820152606401610ccd565b600061014760008460058111156110d2576110d2612c8b565b60058111156110e3576110e3612c8b565b81526020810191909152604001600020556111086001600160a01b038516848361213b565b826001600160a01b0316846001600160a01b03167fcbc4ab91c952e7e6ed4b369ec497a7aaf379137633bd4d355577a7c76419618b8360405161114d91815260200190565b60405180910390a350505050565b611163611e24565b6001600160a01b038216600081815261013c6020908152604091829020805460ff191685151590811790915591519182527f9db1cf179d0876ce4f974e3f64ddab5032746efc3c59432edf0e6b6e2bd2dfd091015b60405180910390a25050565b6111cc611e24565b600081116111ed576040516365fc48eb60e11b815260040160405180910390fd5b6101358190556040518181527f156aaac524effac794528a7ca0a1dbe7129a9b9d3f295b760d64bef536ca436090602001610de6565b610fba83838360405180602001604052806000815250611842565b611246611e24565b6001600160a01b03811661126d5760405163e6c4247b60e01b815260040160405180910390fd5b61013280546001600160a01b0319166001600160a01b0383169081179091556040517f5bb4a0f5a67f7c49cfc7820adfab4690a3752cf969544ddd8445b970d3643e8990600090a250565b6001600160a01b038116600090815261014b60205260409020606090610c8190611f4b565b600081815260cb60205260408120546001600160a01b031680610c815760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ccd565b60006001600160a01b0382166113a75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610ccd565b506001600160a01b0316600090815260cc602052604090205490565b6113cb611e24565b6113d5600061218d565b565b60655433906001600160a01b031681146114455760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610ccd565b61144e8161218d565b50565b611459611e24565b6001600160a01b03811661148057604051633408148f60e01b815260040160405180910390fd5b80610144600084600581111561149857611498612c8b565b60058111156114a9576114a9612c8b565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b0392831617905581168260058111156114e7576114e7612c8b565b6040517f69acf97fd12837c9357ae72cfdb1361a5bd84a74e37233e40a5f9110cbc9a75c90600090a35050565b61151c611e24565b6001600160a01b038116611543576040516334ae666d60e11b815260040160405180910390fd5b61012f8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040517f1beed9e24b9c447b27eb5862cdcacda05e4e55118ee98ef8083d0c83fb54c7bb90600090a250565b606060ca8054610e0090612e7a565b6115ad611e24565b61012f805460ff19168215159081179091556040519081527f4bd8979d750a61e726f6fd518e42571bc79eab2e9a5e89f2d8f3fb6d05ac576e90602001610de6565b6115f7611e24565b600081116116185760405163adce4e6160e01b815260040160405180910390fd5b6101338190556040518181527f71a72c53992c043705dbc76ba88418d35e5a069dce8a1aaadda0d798e142402f90602001610de6565b6116593383836121a6565b5050565b6116a86040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b600083815261013d60205260408120908360058111156116ca576116ca612c8b565b60058111156116db576116db612c8b565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c08201529392505050565b611756611e24565b6001600160a01b03811661177d5760405163e6c4247b60e01b815260040160405180910390fd5b61013180546001600160a01b0319166001600160a01b0383169081179091556040517f49c796b1e172f860133b87d22894b27200b2cbea8ffda486bf37e0cf803f53af90600090a250565b6117d0611e24565b6001600160a01b0381166117f75760405163e6c4247b60e01b815260040160405180910390fd5b61013080546001600160a01b0319166001600160a01b0383169081179091556040517fb91c20ae38c6bc22c2eb333490be8628525bc85a485bd9e20dce75a95de7a13290600090a250565b61184c3383611f58565b6118685760405162461bcd60e51b8152600401610ccd90612eb4565b61187484848484612274565b50505050565b600082815261014a602052604081206060916118c791908460058111156118a3576118a3612c8b565b60058111156118b4576118b4612c8b565b8152602001908152602001600020611f4b565b9392505050565b6119076040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600084815261013f602052604081209084600581111561192957611929612c8b565b600581111561193a5761193a612c8b565b815260200190815260200160002082633b9aca00811061195c5761195c612e0b565b600602016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505090509392505050565b60606119bb82611e7e565b60006119d260408051602081019091526000815290565b905060008151116119f257604051806020016040528060008152506118c7565b806119fc846122a7565b604051602001611a0d929190612f01565b6040516020818303038152906040529392505050565b6000828152610149602052604081206060916118c791908460058111156118a3576118a3612c8b565b611a54611e24565b6001600160a01b038216600090815261013b602052604081205460ff169061014681836005811115611a8857611a88612c8b565b6005811115611a9957611a99612c8b565b815260200190815260200160002054905060008111611afa5760405162461bcd60e51b815260206004820152601a60248201527f4e6f2070726f746f636f6c206665657320617661696c61626c650000000000006044820152606401610ccd565b60006101466000846005811115611b1357611b13612c8b565b6005811115611b2457611b24612c8b565b8152602081019190915260400160002055611b496001600160a01b038516848361213b565b826001600160a01b0316846001600160a01b03167f8fc241308ffc17817e6a8c6a52a8f7cd4931dfca0c539fd35a630311c7e4c57b8360405161114d91815260200190565b611b96611e24565b60008111611bb75760405163182ee11160e01b815260040160405180910390fd5b61012e8190556040518181527f066da2681c5121aabd66066271138cc311ba9ad71c54cdaeccc19cbe66c05b3090602001610de6565b611bf5611e24565b6001600160a01b038216611c1c57604051630f58058360e11b815260040160405180910390fd5b6001600160a01b038216600090815261013b60205260409020805482919060ff19166001836005811115611c5257611c52612c8b565b0217905550816001600160a01b03167f33a422346a4e32d03bc696513b91a0f308168216b86d2755c105915e98a84496826040516111b89190612ca1565b61013f60205282600052604060002060205281600052604060002081633b9aca008110611cbc57600080fd5b60060201805460018201546002830154600384015460048501546005909501549397509195509350919086565b611cf1611e24565b606580546001600160a01b0383166001600160a01b03199091168117909155611d226033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b611d62611e24565b60008111611d8357604051630deb46b560e01b815260040160405180910390fd5b6001600160a01b038216600090815261013b602052604081205460ff1690829061013990836005811115611db957611db9612c8b565b6005811115611dca57611dca612c8b565b815260200190815260200160002081905550826001600160a01b03167f981b29cb3dc7c129fa6efe203391595b7ab61b5e383bd381cef0ec1642ba68e783604051611e1791815260200190565b60405180910390a2505050565b6033546001600160a01b031633146113d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ccd565b600081815260cb60205260409020546001600160a01b031661144e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ccd565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f12826112dd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060006118c78361233a565b600080611f64836112dd565b9050806001600160a01b0316846001600160a01b03161480611fab57506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b80611fcf5750836001600160a01b0316611fc484610e83565b6001600160a01b0316145b949350505050565b826001600160a01b0316611fea826112dd565b6001600160a01b0316146120105760405162461bcd60e51b8152600401610ccd90612f30565b6001600160a01b0382166120725760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ccd565b826001600160a01b0316612085826112dd565b6001600160a01b0316146120ab5760405162461bcd60e51b8152600401610ccd90612f30565b600081815260cd6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260cc855283862080546000190190559087168086528386208054600101905586865260cb90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fba908490612396565b606580546001600160a01b031916905561144e81612468565b816001600160a01b0316836001600160a01b0316036122075760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ccd565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61227f848484611fd7565b61228b848484846124ba565b6118745760405162461bcd60e51b8152600401610ccd90612f75565b606060006122b4836125bb565b600101905060008167ffffffffffffffff8111156122d4576122d46127e9565b6040519080825280601f01601f1916602001820160405280156122fe576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461230857509392505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561238a57602002820191906000526020600020905b815481526020019060010190808311612376575b50505050509050919050565b60006123eb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126939092919063ffffffff16565b805190915015610fba57808060200190518101906124099190612fc7565b610fba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ccd565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156125b057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906124fe903390899088908890600401612fe4565b6020604051808303816000875af1925050508015612539575060408051601f3d908101601f1916820190925261253691810190613021565b60015b612596573d808015612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b50805160000361258e5760405162461bcd60e51b8152600401610ccd90612f75565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611fcf565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106125fa5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612626576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061264457662386f26fc10000830492506010015b6305f5e100831061265c576305f5e100830492506008015b612710831061267057612710830492506004015b60648310612682576064830492506002015b600a8310610c815760010192915050565b6060611fcf848460008585600080866001600160a01b031685876040516126ba919061303e565b60006040518083038185875af1925050503d80600081146126f7576040519150601f19603f3d011682016040523d82523d6000602084013e6126fc565b606091505b509150915061270d87838387612718565b979650505050505050565b60608315612787578251600003612780576001600160a01b0385163b6127805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ccd565b5081611fcf565b611fcf838381511561279c5781518083602001fd5b8060405162461bcd60e51b8152600401610ccd9190612a1a565b6001600160e01b03198116811461144e57600080fd5b6000602082840312156127de57600080fd5b81356118c7816127b6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612828576128286127e9565b604052919050565b600067ffffffffffffffff82111561284a5761284a6127e9565b5060051b60200190565b6001600160a01b038116811461144e57600080fd5b801515811461144e57600080fd5b600082601f83011261288857600080fd5b8135602061289d61289883612830565b6127ff565b8083825260208201915060208460051b8701019350868411156128bf57600080fd5b602086015b848110156128e45780356128d781612869565b83529183019183016128c4565b509695505050505050565b6000806040838503121561290257600080fd5b823567ffffffffffffffff8082111561291a57600080fd5b818501915085601f83011261292e57600080fd5b8135602061293e61289883612830565b82815260059290921b8401810191818101908984111561295d57600080fd5b948201945b8386101561298457853561297581612854565b82529482019490820190612962565b9650508601359250508082111561299a57600080fd5b506129a785828601612877565b9150509250929050565b6000602082840312156129c357600080fd5b5035919050565b60005b838110156129e55781810151838201526020016129cd565b50506000910152565b60008151808452612a068160208601602086016129ca565b601f01601f19169290920160200192915050565b6020815260006118c760208301846129ee565b803560068110612a3c57600080fd5b919050565b60008060408385031215612a5457600080fd5b82359150612a6460208401612a2d565b90509250929050565b60008060408385031215612a8057600080fd5b8235612a8b81612854565b946020939093013593505050565b60008151808452602080850194506020840160005b83811015612ad35781516001600160a01b031687529582019590820190600101612aae565b509495945050505050565b6020815260006118c76020830184612a99565b600080600060608486031215612b0657600080fd5b8335925060208401359150612b1d60408501612a2d565b90509250925092565b600060208284031215612b3857600080fd5b6118c782612a2d565b600080600060608486031215612b5657600080fd5b8335612b6181612854565b92506020840135612b7181612854565b929592945050506040919091013590565b60008060408385031215612b9557600080fd5b8235612ba081612854565b91506020830135612bb081612854565b809150509250929050565b60008060408385031215612bce57600080fd5b8235612bd981612854565b91506020830135612bb081612869565b600060208284031215612bfb57600080fd5b81356118c781612854565b6020808252825182820181905260009190848201906040850190845b81811015612c3e57835183529284019291840191600101612c22565b50909695505050505050565b60008060408385031215612c5d57600080fd5b823591506020830135612bb081612854565b60008060408385031215612c8257600080fd5b612ba083612a2d565b634e487b7160e01b600052602160045260246000fd5b6020810160068310612cc357634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215612cdb57600080fd5b81356118c781612869565b60008060008060808587031215612cfc57600080fd5b8435612d0781612854565b9350602085810135612d1881612854565b935060408601359250606086013567ffffffffffffffff80821115612d3c57600080fd5b818801915088601f830112612d5057600080fd5b813581811115612d6257612d626127e9565b612d74601f8201601f191685016127ff565b91508082528984828501011115612d8a57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080600060608486031215612dbf57600080fd5b83359250612dcf60208501612a2d565b9150604084013590509250925092565b60008060408385031215612df257600080fd5b8235612dfd81612854565b9150612a6460208401612a2d565b634e487b7160e01b600052603260045260246000fd5b604081526000612e346040830185612a99565b82810360208481019190915284518083528582019282019060005b81811015612e6d578451151583529383019391830191600101612e4f565b5090979650505050505050565b600181811c90821680612e8e57607f821691505b602082108103612eae57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008351612f138184602088016129ca565b835190830190612f278183602088016129ca565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060208284031215612fd957600080fd5b81516118c781612869565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613017908301846129ee565b9695505050505050565b60006020828403121561303357600080fd5b81516118c7816127b6565b600082516130508184602087016129ca565b919091019291505056fea2646970667358221220a75d4b9e729a2da33cacb86937012496f4a18093b6d20a08917be1dcda17d5c264736f6c63430008160033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061041d5760003560e01c806392415b081161022b578063c155bcc011610130578063e10bbe53116100b8578063e985e9c511610087578063e985e9c514610ba5578063ec09409514610be1578063eec83d8714610c05578063f2fde38b14610c0f578063fab64d1c14610c2257600080fd5b8063e10bbe5314610b20578063e1d514bd14610b33578063e30c397814610b54578063e526789414610b6557600080fd5b8063cc8cb245116100ff578063cc8cb24514610ac5578063cf7b287f14610ae6578063d8a8261114610af9578063d9e3eee214610b03578063df25197414610b1657600080fd5b8063c155bcc014610a1c578063c682ee6814610a7b578063c87b56dd14610a9f578063c9ebe07414610ab257600080fd5b8063ab2d99db116101b3578063b88d4fde11610182578063b88d4fde14610995578063b92a20fa146109a8578063b9e77c5f146109bb578063ba99c4df146109cf578063bae1cb5e146109fb57600080fd5b8063ab2d99db14610930578063ad975d711461093a578063b1113baf14610953578063b5250df31461098257600080fd5b80639ac1cc9d116101fa5780639ac1cc9d146107e7578063a22cb4651461088c578063a285ab8f1461089f578063a7d1ea851461090e578063aaf5eb681461092157600080fd5b806392415b081461078857806395d89b41146107b957806397f819a3146107c157806398008116146107d457600080fd5b80633d2cdbd11161033157806370a08231116102b95780637f8f6768116102885780637f8f67681461071c57806380e13a571461072f57806384cf379c146107505780638da5cb5b14610764578063907aa86a1461077557600080fd5b806370a08231146106d5578063715018a6146106e857806372b4c276146106f057806379ba50971461071457600080fd5b80634fac7e41116103005780634fac7e4114610654578063535d9aaf146106745780636352211e146106a05780636b2fe4c7146106b35780636cbdce56146106c157600080fd5b80633d2cdbd11461060757806342787d2a1461061b57806342842e0e1461062e5780634bc2a6571461064157600080fd5b806312ba89ef116103b457806323b872dd1161038357806323b872dd14610590578063282bbb3d146105a35780632879e840146105b657806333230dc0146105e05780633c4f743c146105f357600080fd5b806312ba89ef1461051f57806314b3bdde14610551578063171314f1146105655780631df595c71461056f57600080fd5b806307b67fe8116103f057806307b67fe814610487578063081812fc146104c1578063095ea7b3146104ec57806311e7b0ee146104ff57600080fd5b806301ffc9a71461042257806303de63551461044a57806304f6c0ef1461045f57806306fdde0314610472575b600080fd5b6104356104303660046127cc565b610c35565b60405190151581526020015b60405180910390f35b61045d6104583660046128ef565b610c87565b005b61045d61046d3660046129b1565b610d8b565b61047a610df1565b6040516104419190612a1a565b6104b3610495366004612a41565b61013e60209081526000928352604080842090915290825290205481565b604051908152602001610441565b6104d46104cf3660046129b1565b610e83565b6040516001600160a01b039091168152602001610441565b61045d6104fa366004612a6d565b610eaa565b61051261050d3660046129b1565b610fbf565b6040516104419190612ade565b6104b361052d366004612af1565b61014860209081526000938452604080852082529284528284209052825290205481565b610137546104d4906001600160a01b031681565b6104b361012d5481565b6104b361057d366004612b26565b6101466020526000908152604090205481565b61045d61059e366004612b41565b610fda565b61045d6105b1366004612b82565b61100b565b6104d46105c4366004612b26565b610144602052600090815260409020546001600160a01b031681565b61045d6105ee366004612bbb565b61115b565b610136546104d4906001600160a01b031681565b610131546104d4906001600160a01b031681565b61045d6106293660046129b1565b6111c4565b61045d61063c366004612b41565b611223565b61045d61064f366004612be9565b61123e565b610667610662366004612be9565b6112b8565b6040516104419190612c06565b6104b3610682366004612c4a565b61014560209081526000928352604080842090915290825290205481565b6104d46106ae3660046129b1565b6112dd565b61012f546104359060ff1681565b610130546104d4906001600160a01b031681565b6104b36106e3366004612be9565b61133d565b61045d6113c3565b6104356106fe366004612be9565b61013a6020526000908152604090205460ff1681565b61045d6113d7565b61045d61072a366004612c6f565b611451565b6104b361073d366004612b26565b6101476020526000908152604090205481565b610138546104d4906001600160a01b031681565b6033546001600160a01b03166104d4565b61045d610783366004612be9565b611514565b6107ac610796366004612be9565b61013b6020526000908152604090205460ff1681565b6040516104419190612ca1565b61047a611596565b61045d6107cf366004612cc9565b6115a5565b61045d6107e23660046129b1565b6115ef565b61084b6107f5366004612a41565b61013d60209081526000928352604080842090915290825290208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0390951695939492939192909160ff169087565b604080516001600160a01b03909816885260208801969096529486019390935260608501919091526080840152151560a083015260c082015260e001610441565b61045d61089a366004612bbb565b61164e565b6108b26108ad366004612a41565b61165d565b604051610441919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a08281015115159082015260c0918201519181019190915260e00190565b61045d61091c366004612be9565b61174e565b6104b3670de0b6b3a764000081565b6104b36101345481565b61012f546104d49061010090046001600160a01b031681565b610435610961366004612c4a565b61014d60209081526000928352604080842090915290825290205460ff1681565b61045d610990366004612be9565b6117c8565b61045d6109a3366004612ce6565b611842565b6106676109b6366004612a41565b61187a565b610132546104d4906001600160a01b031681565b6104b36109dd366004612b82565b61014c60209081526000928352604080842090915290825290205481565b6104b3610a09366004612b26565b6101436020526000908152604090205481565b610a2f610a2a366004612daa565b6118ce565b6040516104419190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b610435610a89366004612be9565b61013c6020526000908152604090205460ff1681565b61047a610aad3660046129b1565b6119b0565b610667610ac0366004612a41565b611a23565b6104b3610ad3366004612b26565b6101396020526000908152604090205481565b61045d610af4366004612b82565b611a4c565b6104b36101335481565b61045d610b113660046129b1565b611b8e565b6104b361012e5481565b61045d610b2e366004612ddf565b611bed565b6104b3610b41366004612b26565b6101426020526000908152604090205481565b6065546001600160a01b03166104d4565b610b78610b73366004612daa565b611c90565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610441565b610435610bb3366004612b82565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b610435610bef3660046129b1565b6101416020526000908152604090205460ff1681565b6104b36101355481565b61045d610c1d366004612be9565b611ce9565b61045d610c30366004612a6d565b611d5a565b60006001600160e01b031982166380ac58cd60e01b1480610c6657506001600160e01b03198216635b5e139f60e01b145b80610c8157506301ffc9a760e01b6001600160e01b03198316145b92915050565b610c8f611e24565b8051825114610cd65760405162461bcd60e51b815260206004820152600e60248201526d556e657175616c2041727261797360901b60448201526064015b60405180910390fd5b60005b8251811015610d4d57818181518110610cf457610cf4612e0b565b602002602001015161013a6000858481518110610d1357610d13612e0b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610cd9565b507fbf5096a6d1add2f85fe6ebea9648302d19fbbe070cd2addfd4feb0404e3c5ec78282604051610d7f929190612e21565b60405180910390a15050565b610d93611e24565b60008111610db45760405163f39f74b360e01b815260040160405180910390fd5b6101348190556040518181527f0be752d502ead9f7f68ae425a37976abee08f7d72a78e613d13a0c1ac153915f906020015b60405180910390a150565b606060c98054610e0090612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2c90612e7a565b8015610e795780601f10610e4e57610100808354040283529160200191610e79565b820191906000526020600020905b815481529060010190602001808311610e5c57829003601f168201915b5050505050905090565b6000610e8e82611e7e565b50600090815260cd60205260409020546001600160a01b031690565b6000610eb5826112dd565b9050806001600160a01b0316836001600160a01b031603610f225760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ccd565b336001600160a01b0382161480610f3e5750610f3e8133610bb3565b610fb05760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610ccd565b610fba8383611edd565b505050565b600081815261014060205260409020606090610c8190611f4b565b610fe43382611f58565b6110005760405162461bcd60e51b8152600401610ccd90612eb4565b610fba838383611fd7565b611013611e24565b6001600160a01b038216600090815261013b602052604081205460ff16906101478183600581111561104757611047612c8b565b600581111561105857611058612c8b565b8152602001908152602001600020549050600081116110b95760405162461bcd60e51b815260206004820152601d60248201527f4e6f206469737472696275746564206665657320617661696c61626c650000006044820152606401610ccd565b600061014760008460058111156110d2576110d2612c8b565b60058111156110e3576110e3612c8b565b81526020810191909152604001600020556111086001600160a01b038516848361213b565b826001600160a01b0316846001600160a01b03167fcbc4ab91c952e7e6ed4b369ec497a7aaf379137633bd4d355577a7c76419618b8360405161114d91815260200190565b60405180910390a350505050565b611163611e24565b6001600160a01b038216600081815261013c6020908152604091829020805460ff191685151590811790915591519182527f9db1cf179d0876ce4f974e3f64ddab5032746efc3c59432edf0e6b6e2bd2dfd091015b60405180910390a25050565b6111cc611e24565b600081116111ed576040516365fc48eb60e11b815260040160405180910390fd5b6101358190556040518181527f156aaac524effac794528a7ca0a1dbe7129a9b9d3f295b760d64bef536ca436090602001610de6565b610fba83838360405180602001604052806000815250611842565b611246611e24565b6001600160a01b03811661126d5760405163e6c4247b60e01b815260040160405180910390fd5b61013280546001600160a01b0319166001600160a01b0383169081179091556040517f5bb4a0f5a67f7c49cfc7820adfab4690a3752cf969544ddd8445b970d3643e8990600090a250565b6001600160a01b038116600090815261014b60205260409020606090610c8190611f4b565b600081815260cb60205260408120546001600160a01b031680610c815760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ccd565b60006001600160a01b0382166113a75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610ccd565b506001600160a01b0316600090815260cc602052604090205490565b6113cb611e24565b6113d5600061218d565b565b60655433906001600160a01b031681146114455760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610ccd565b61144e8161218d565b50565b611459611e24565b6001600160a01b03811661148057604051633408148f60e01b815260040160405180910390fd5b80610144600084600581111561149857611498612c8b565b60058111156114a9576114a9612c8b565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b0392831617905581168260058111156114e7576114e7612c8b565b6040517f69acf97fd12837c9357ae72cfdb1361a5bd84a74e37233e40a5f9110cbc9a75c90600090a35050565b61151c611e24565b6001600160a01b038116611543576040516334ae666d60e11b815260040160405180910390fd5b61012f8054610100600160a81b0319166101006001600160a01b038416908102919091179091556040517f1beed9e24b9c447b27eb5862cdcacda05e4e55118ee98ef8083d0c83fb54c7bb90600090a250565b606060ca8054610e0090612e7a565b6115ad611e24565b61012f805460ff19168215159081179091556040519081527f4bd8979d750a61e726f6fd518e42571bc79eab2e9a5e89f2d8f3fb6d05ac576e90602001610de6565b6115f7611e24565b600081116116185760405163adce4e6160e01b815260040160405180910390fd5b6101338190556040518181527f71a72c53992c043705dbc76ba88418d35e5a069dce8a1aaadda0d798e142402f90602001610de6565b6116593383836121a6565b5050565b6116a86040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081525090565b600083815261013d60205260408120908360058111156116ca576116ca612c8b565b60058111156116db576116db612c8b565b81526020808201929092526040908101600020815160e08101835281546001600160a01b031681526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460ff16151560a08301526006015460c08201529392505050565b611756611e24565b6001600160a01b03811661177d5760405163e6c4247b60e01b815260040160405180910390fd5b61013180546001600160a01b0319166001600160a01b0383169081179091556040517f49c796b1e172f860133b87d22894b27200b2cbea8ffda486bf37e0cf803f53af90600090a250565b6117d0611e24565b6001600160a01b0381166117f75760405163e6c4247b60e01b815260040160405180910390fd5b61013080546001600160a01b0319166001600160a01b0383169081179091556040517fb91c20ae38c6bc22c2eb333490be8628525bc85a485bd9e20dce75a95de7a13290600090a250565b61184c3383611f58565b6118685760405162461bcd60e51b8152600401610ccd90612eb4565b61187484848484612274565b50505050565b600082815261014a602052604081206060916118c791908460058111156118a3576118a3612c8b565b60058111156118b4576118b4612c8b565b8152602001908152602001600020611f4b565b9392505050565b6119076040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600084815261013f602052604081209084600581111561192957611929612c8b565b600581111561193a5761193a612c8b565b815260200190815260200160002082633b9aca00811061195c5761195c612e0b565b600602016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152505090509392505050565b60606119bb82611e7e565b60006119d260408051602081019091526000815290565b905060008151116119f257604051806020016040528060008152506118c7565b806119fc846122a7565b604051602001611a0d929190612f01565b6040516020818303038152906040529392505050565b6000828152610149602052604081206060916118c791908460058111156118a3576118a3612c8b565b611a54611e24565b6001600160a01b038216600090815261013b602052604081205460ff169061014681836005811115611a8857611a88612c8b565b6005811115611a9957611a99612c8b565b815260200190815260200160002054905060008111611afa5760405162461bcd60e51b815260206004820152601a60248201527f4e6f2070726f746f636f6c206665657320617661696c61626c650000000000006044820152606401610ccd565b60006101466000846005811115611b1357611b13612c8b565b6005811115611b2457611b24612c8b565b8152602081019190915260400160002055611b496001600160a01b038516848361213b565b826001600160a01b0316846001600160a01b03167f8fc241308ffc17817e6a8c6a52a8f7cd4931dfca0c539fd35a630311c7e4c57b8360405161114d91815260200190565b611b96611e24565b60008111611bb75760405163182ee11160e01b815260040160405180910390fd5b61012e8190556040518181527f066da2681c5121aabd66066271138cc311ba9ad71c54cdaeccc19cbe66c05b3090602001610de6565b611bf5611e24565b6001600160a01b038216611c1c57604051630f58058360e11b815260040160405180910390fd5b6001600160a01b038216600090815261013b60205260409020805482919060ff19166001836005811115611c5257611c52612c8b565b0217905550816001600160a01b03167f33a422346a4e32d03bc696513b91a0f308168216b86d2755c105915e98a84496826040516111b89190612ca1565b61013f60205282600052604060002060205281600052604060002081633b9aca008110611cbc57600080fd5b60060201805460018201546002830154600384015460048501546005909501549397509195509350919086565b611cf1611e24565b606580546001600160a01b0383166001600160a01b03199091168117909155611d226033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b611d62611e24565b60008111611d8357604051630deb46b560e01b815260040160405180910390fd5b6001600160a01b038216600090815261013b602052604081205460ff1690829061013990836005811115611db957611db9612c8b565b6005811115611dca57611dca612c8b565b815260200190815260200160002081905550826001600160a01b03167f981b29cb3dc7c129fa6efe203391595b7ab61b5e383bd381cef0ec1642ba68e783604051611e1791815260200190565b60405180910390a2505050565b6033546001600160a01b031633146113d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ccd565b600081815260cb60205260409020546001600160a01b031661144e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610ccd565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611f12826112dd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060006118c78361233a565b600080611f64836112dd565b9050806001600160a01b0316846001600160a01b03161480611fab57506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b80611fcf5750836001600160a01b0316611fc484610e83565b6001600160a01b0316145b949350505050565b826001600160a01b0316611fea826112dd565b6001600160a01b0316146120105760405162461bcd60e51b8152600401610ccd90612f30565b6001600160a01b0382166120725760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ccd565b826001600160a01b0316612085826112dd565b6001600160a01b0316146120ab5760405162461bcd60e51b8152600401610ccd90612f30565b600081815260cd6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260cc855283862080546000190190559087168086528386208054600101905586865260cb90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610fba908490612396565b606580546001600160a01b031916905561144e81612468565b816001600160a01b0316836001600160a01b0316036122075760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ccd565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61227f848484611fd7565b61228b848484846124ba565b6118745760405162461bcd60e51b8152600401610ccd90612f75565b606060006122b4836125bb565b600101905060008167ffffffffffffffff8111156122d4576122d46127e9565b6040519080825280601f01601f1916602001820160405280156122fe576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461230857509392505050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561238a57602002820191906000526020600020905b815481526020019060010190808311612376575b50505050509050919050565b60006123eb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126939092919063ffffffff16565b805190915015610fba57808060200190518101906124099190612fc7565b610fba5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ccd565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b156125b057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906124fe903390899088908890600401612fe4565b6020604051808303816000875af1925050508015612539575060408051601f3d908101601f1916820190925261253691810190613021565b60015b612596573d808015612567576040519150601f19603f3d011682016040523d82523d6000602084013e61256c565b606091505b50805160000361258e5760405162461bcd60e51b8152600401610ccd90612f75565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611fcf565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106125fa5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612626576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061264457662386f26fc10000830492506010015b6305f5e100831061265c576305f5e100830492506008015b612710831061267057612710830492506004015b60648310612682576064830492506002015b600a8310610c815760010192915050565b6060611fcf848460008585600080866001600160a01b031685876040516126ba919061303e565b60006040518083038185875af1925050503d80600081146126f7576040519150601f19603f3d011682016040523d82523d6000602084013e6126fc565b606091505b509150915061270d87838387612718565b979650505050505050565b60608315612787578251600003612780576001600160a01b0385163b6127805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ccd565b5081611fcf565b611fcf838381511561279c5781518083602001fd5b8060405162461bcd60e51b8152600401610ccd9190612a1a565b6001600160e01b03198116811461144e57600080fd5b6000602082840312156127de57600080fd5b81356118c7816127b6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612828576128286127e9565b604052919050565b600067ffffffffffffffff82111561284a5761284a6127e9565b5060051b60200190565b6001600160a01b038116811461144e57600080fd5b801515811461144e57600080fd5b600082601f83011261288857600080fd5b8135602061289d61289883612830565b6127ff565b8083825260208201915060208460051b8701019350868411156128bf57600080fd5b602086015b848110156128e45780356128d781612869565b83529183019183016128c4565b509695505050505050565b6000806040838503121561290257600080fd5b823567ffffffffffffffff8082111561291a57600080fd5b818501915085601f83011261292e57600080fd5b8135602061293e61289883612830565b82815260059290921b8401810191818101908984111561295d57600080fd5b948201945b8386101561298457853561297581612854565b82529482019490820190612962565b9650508601359250508082111561299a57600080fd5b506129a785828601612877565b9150509250929050565b6000602082840312156129c357600080fd5b5035919050565b60005b838110156129e55781810151838201526020016129cd565b50506000910152565b60008151808452612a068160208601602086016129ca565b601f01601f19169290920160200192915050565b6020815260006118c760208301846129ee565b803560068110612a3c57600080fd5b919050565b60008060408385031215612a5457600080fd5b82359150612a6460208401612a2d565b90509250929050565b60008060408385031215612a8057600080fd5b8235612a8b81612854565b946020939093013593505050565b60008151808452602080850194506020840160005b83811015612ad35781516001600160a01b031687529582019590820190600101612aae565b509495945050505050565b6020815260006118c76020830184612a99565b600080600060608486031215612b0657600080fd5b8335925060208401359150612b1d60408501612a2d565b90509250925092565b600060208284031215612b3857600080fd5b6118c782612a2d565b600080600060608486031215612b5657600080fd5b8335612b6181612854565b92506020840135612b7181612854565b929592945050506040919091013590565b60008060408385031215612b9557600080fd5b8235612ba081612854565b91506020830135612bb081612854565b809150509250929050565b60008060408385031215612bce57600080fd5b8235612bd981612854565b91506020830135612bb081612869565b600060208284031215612bfb57600080fd5b81356118c781612854565b6020808252825182820181905260009190848201906040850190845b81811015612c3e57835183529284019291840191600101612c22565b50909695505050505050565b60008060408385031215612c5d57600080fd5b823591506020830135612bb081612854565b60008060408385031215612c8257600080fd5b612ba083612a2d565b634e487b7160e01b600052602160045260246000fd5b6020810160068310612cc357634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215612cdb57600080fd5b81356118c781612869565b60008060008060808587031215612cfc57600080fd5b8435612d0781612854565b9350602085810135612d1881612854565b935060408601359250606086013567ffffffffffffffff80821115612d3c57600080fd5b818801915088601f830112612d5057600080fd5b813581811115612d6257612d626127e9565b612d74601f8201601f191685016127ff565b91508082528984828501011115612d8a57600080fd5b808484018584013760008482840101525080935050505092959194509250565b600080600060608486031215612dbf57600080fd5b83359250612dcf60208501612a2d565b9150604084013590509250925092565b60008060408385031215612df257600080fd5b8235612dfd81612854565b9150612a6460208401612a2d565b634e487b7160e01b600052603260045260246000fd5b604081526000612e346040830185612a99565b82810360208481019190915284518083528582019282019060005b81811015612e6d578451151583529383019391830191600101612e4f565b5090979650505050505050565b600181811c90821680612e8e57607f821691505b602082108103612eae57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60008351612f138184602088016129ca565b835190830190612f278183602088016129ca565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060208284031215612fd957600080fd5b81516118c781612869565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613017908301846129ee565b9695505050505050565b60006020828403121561303357600080fd5b81516118c7816127b6565b600082516130508184602087016129ca565b919091019291505056fea2646970667358221220a75d4b9e729a2da33cacb86937012496f4a18093b6d20a08917be1dcda17d5c264736f6c63430008160033",
  "devdoc": {
    "author": "Jourdan Dunkley <jourdan@ionic.money> (https://github.com/jourdanDunkley)",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getAssetsLocked(uint256)": {
        "params": {
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "An array of addresses representing the locked assets."
        }
      },
      "getDelegatees(uint256,uint8)": {
        "params": {
          "_lpType": "The LP token type.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "An array of delegatee IDs."
        }
      },
      "getDelegators(uint256,uint8)": {
        "params": {
          "_lpType": "The LP token type.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "An array of delegator IDs."
        }
      },
      "getOwnedTokenIds(address)": {
        "params": {
          "_owner": "The address of the owner."
        },
        "returns": {
          "_0": "An array of token IDs owned by the address."
        }
      },
      "getUserLock(uint256,uint8)": {
        "params": {
          "_lpType": "The LP token type.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "A LockedBalance struct containing lock details."
        }
      },
      "getUserPoint(uint256,uint8,uint256)": {
        "params": {
          "_epoch": "The epoch number.",
          "_lpType": "The LP token type.",
          "_tokenId": "The ID of the token."
        },
        "returns": {
          "_0": "A UserPoint struct containing user point details."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setAeroVoterBoost(uint256)": {
        "params": {
          "_aeroVoterBoost": "The boost amount for Aero Voter."
        }
      },
      "setAeroVoting(address)": {
        "params": {
          "_aeroVoting": "The address of the Aero Voting contract."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setIonicPool(address)": {
        "params": {
          "_ionicPool": "The address of the Ionic Pool."
        }
      },
      "setLimitedTimeBoost(uint256)": {
        "params": {
          "_boostAmount": "The amount of the boost."
        }
      },
      "setLpTokenType(address,uint8)": {
        "params": {
          "_token": "The address of the token.",
          "_type": "The LP token type."
        }
      },
      "setMaxEarlyWithdrawFee(uint256)": {
        "params": {
          "_maxEarlyWithdrawFee": "The maximum fee for early withdrawal."
        }
      },
      "setMinimumLockAmount(address,uint256)": {
        "params": {
          "_minimumAmount": "The minimum amount to lock.",
          "_tokenAddress": "The address of the token."
        }
      },
      "setMinimumLockDuration(uint256)": {
        "params": {
          "_minimumLockDuration": "The minimum duration for locking."
        }
      },
      "setStakeStrategy(uint8,address)": {
        "params": {
          "_lpType": "The LP token type.",
          "_strategy": "The stake strategy."
        }
      },
      "setVeAERO(address)": {
        "params": {
          "_veAERO": "The address of the veAERO contract."
        }
      },
      "setVoter(address)": {
        "params": {
          "_voter": "The address of the voter."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "toggleLimitedBoost(bool)": {
        "params": {
          "_isBoosted": "Boolean indicating if the boost is active."
        }
      },
      "toggleSplit(address,bool)": {
        "params": {
          "_account": "The address of the account.",
          "_isAllowed": "Boolean indicating if splitting is allowed."
        }
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "whitelistTokens(address[],bool[])": {
        "params": {
          "_isWhitelisted": "An array of booleans indicating the whitelist status for each token.",
          "_tokens": "An array of token addresses to be whitelisted or removed."
        }
      },
      "withdrawDistributedFees(address,address)": {
        "params": {
          "_recipient": "The address to which the distributed fees will be sent.",
          "_tokenAddress": "The address of the token for which distributed fees are to be withdrawn."
        }
      },
      "withdrawProtocolFees(address,address)": {
        "params": {
          "_recipient": "The address to which the protocol fees will be sent.",
          "_tokenAddress": "The address of the token for which protocol fees are to be withdrawn."
        }
      }
    },
    "title": "veION Contract Second Extension",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PRECISION()": {
        "notice": "Precision used for calculations, set to 1e18."
      },
      "ap()": {
        "notice": "The AddressesProvider contract used for address management."
      },
      "getAssetsLocked(uint256)": {
        "notice": "Retrieves the assets locked for a specific token ID."
      },
      "getDelegatees(uint256,uint8)": {
        "notice": "Retrieves the delegatees for a specific token ID and LP token type."
      },
      "getDelegators(uint256,uint8)": {
        "notice": "Retrieves the delegators for a specific token ID and LP token type."
      },
      "getOwnedTokenIds(address)": {
        "notice": "Retrieves the token IDs owned by a specific address."
      },
      "getUserLock(uint256,uint8)": {
        "notice": "Retrieves the lock information for a specific user."
      },
      "getUserPoint(uint256,uint8,uint256)": {
        "notice": "Retrieves the user point for a specific token ID, LP token type, and epoch."
      },
      "s_aeroVoterBoost()": {
        "notice": "The boost amount for AeroVoter."
      },
      "s_aeroVoting()": {
        "notice": "Address of the AeroVoting contract."
      },
      "s_ionicPool()": {
        "notice": "Address of the Ionic Pool."
      },
      "s_limitedBoost()": {
        "notice": "The amount of limited boost available."
      },
      "s_limitedBoostActive()": {
        "notice": "Indicates whether the limited boost is active."
      },
      "s_maxEarlyWithdrawFee()": {
        "notice": "The maximum fee for early withdrawal."
      },
      "s_minimumLockDuration()": {
        "notice": "The minimum duration for locking."
      },
      "s_tokenId()": {
        "notice": "The current token ID counter."
      },
      "s_veAERO()": {
        "notice": "Address of the veAERO contract."
      },
      "s_voter()": {
        "notice": "Address of the voter contract."
      },
      "setAeroVoterBoost(uint256)": {
        "notice": "Sets the boost amount for Aero Voter."
      },
      "setAeroVoting(address)": {
        "notice": "Sets the address of the Aero Voting contract."
      },
      "setIonicPool(address)": {
        "notice": "Sets the address of the Ionic Pool."
      },
      "setLimitedTimeBoost(uint256)": {
        "notice": "Sets the amount for a limited time boost."
      },
      "setLpTokenType(address,uint8)": {
        "notice": "Sets the LP token type for a specific token."
      },
      "setMaxEarlyWithdrawFee(uint256)": {
        "notice": "Sets the maximum early withdrawal fee."
      },
      "setMinimumLockAmount(address,uint256)": {
        "notice": "Sets the minimum lock amount for a specific token."
      },
      "setMinimumLockDuration(uint256)": {
        "notice": "Sets the minimum lock duration."
      },
      "setStakeStrategy(uint8,address)": {
        "notice": "Sets the stake strategy for a specific LP token type."
      },
      "setVeAERO(address)": {
        "notice": "Sets the address of the veAERO contract."
      },
      "setVoter(address)": {
        "notice": "Sets the address of the voter."
      },
      "toggleLimitedBoost(bool)": {
        "notice": "Toggles the limited boost feature."
      },
      "toggleSplit(address,bool)": {
        "notice": "Toggles the ability to split tokens for a specific account."
      },
      "veIONFirstExtension()": {
        "notice": "The address of the logic contract for the veION first extension."
      },
      "veIONSecondExtension()": {
        "notice": "The address of the logic contract for the veION second extension."
      },
      "whitelistTokens(address[],bool[])": {
        "notice": "Whitelists or removes tokens from the whitelist."
      },
      "withdrawDistributedFees(address,address)": {
        "notice": "Withdraws distributed fees for a specific token to a recipient address."
      },
      "withdrawProtocolFees(address,address)": {
        "notice": "Withdraws protocol fees for a specific token to a recipient address."
      }
    },
    "notice": "This contract manages the veION framework, enabling the staking and management LP tokens for voting power.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2341,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2560,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 903,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 905,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 909,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_owners",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 913,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_balances",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 917,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 923,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1854,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "_status",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 20426,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_tokenId",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 20429,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_limitedBoost",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 20432,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_limitedBoostActive",
        "offset": 0,
        "slot": "303",
        "type": "t_bool"
      },
      {
        "astId": 20435,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_veAERO",
        "offset": 1,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 20438,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_aeroVoting",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 20441,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_ionicPool",
        "offset": 0,
        "slot": "305",
        "type": "t_address"
      },
      {
        "astId": 20444,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_voter",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 20447,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_aeroVoterBoost",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 20450,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_minimumLockDuration",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 20453,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_maxEarlyWithdrawFee",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 20457,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "ap",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IAddressesProvider)15272"
      },
      {
        "astId": 20460,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "veIONFirstExtension",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      },
      {
        "astId": 20463,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "veIONSecondExtension",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 20469,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_minimumLockAmount",
        "offset": 0,
        "slot": "313",
        "type": "t_mapping(t_enum(LpTokenType)15625,t_uint256)"
      },
      {
        "astId": 20474,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_whitelistedToken",
        "offset": 0,
        "slot": "314",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20480,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_lpType",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_address,t_enum(LpTokenType)15625)"
      },
      {
        "astId": 20485,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_canSplit",
        "offset": 0,
        "slot": "316",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 20494,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_locked",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_struct(LockedBalance)15568_storage))"
      },
      {
        "astId": 20502,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_userPointEpoch",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_uint256))"
      },
      {
        "astId": 20513,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_userPointHistory",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_array(t_struct(UserPoint)15588_storage)1000000000_storage))"
      },
      {
        "astId": 20519,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_assetsLocked",
        "offset": 0,
        "slot": "320",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)6265_storage)"
      },
      {
        "astId": 20524,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_voted",
        "offset": 0,
        "slot": "321",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 20530,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_supply",
        "offset": 0,
        "slot": "322",
        "type": "t_mapping(t_enum(LpTokenType)15625,t_uint256)"
      },
      {
        "astId": 20536,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_permanentLockBalance",
        "offset": 0,
        "slot": "323",
        "type": "t_mapping(t_enum(LpTokenType)15625,t_uint256)"
      },
      {
        "astId": 20543,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_stakeStrategy",
        "offset": 0,
        "slot": "324",
        "type": "t_mapping(t_enum(LpTokenType)15625,t_contract(IStakeStrategy)16415)"
      },
      {
        "astId": 20550,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_underlyingStake",
        "offset": 0,
        "slot": "325",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 20556,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_protocolFees",
        "offset": 0,
        "slot": "326",
        "type": "t_mapping(t_enum(LpTokenType)15625,t_uint256)"
      },
      {
        "astId": 20562,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_distributedFees",
        "offset": 0,
        "slot": "327",
        "type": "t_mapping(t_enum(LpTokenType)15625,t_uint256)"
      },
      {
        "astId": 20572,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_delegations",
        "offset": 0,
        "slot": "328",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_uint256)))"
      },
      {
        "astId": 20581,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_delegatees",
        "offset": 0,
        "slot": "329",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_struct(UintSet)6422_storage))"
      },
      {
        "astId": 20590,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_delegators",
        "offset": 0,
        "slot": "330",
        "type": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_struct(UintSet)6422_storage))"
      },
      {
        "astId": 20596,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_ownerToTokenIds",
        "offset": 0,
        "slot": "331",
        "type": "t_mapping(t_address,t_struct(UintSet)6422_storage)"
      },
      {
        "astId": 20603,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_userCumulativeAssetValues",
        "offset": 0,
        "slot": "332",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 20610,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "s_delegatorsBlocked",
        "offset": 0,
        "slot": "333",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 20614,
        "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
        "label": "__gap",
        "offset": 0,
        "slot": "334",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserPoint)15588_storage)1000000000_storage": {
        "base": "t_struct(UserPoint)15588_storage",
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]",
        "numberOfBytes": "192000000000"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressesProvider)15272": {
        "encoding": "inplace",
        "label": "contract IAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IStakeStrategy)16415": {
        "encoding": "inplace",
        "label": "contract IStakeStrategy",
        "numberOfBytes": "20"
      },
      "t_enum(LpTokenType)15625": {
        "encoding": "inplace",
        "label": "enum IveIONStructsEnumsErrorsEvents.LpTokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(LpTokenType)15625)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IveIONStructsEnumsErrorsEvents.LpTokenType)",
        "numberOfBytes": "32",
        "value": "t_enum(LpTokenType)15625"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UintSet)6422_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)6422_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(LpTokenType)15625,t_array(t_struct(UserPoint)15588_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)15625",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserPoint)15588_storage)1000000000_storage"
      },
      "t_mapping(t_enum(LpTokenType)15625,t_contract(IStakeStrategy)16415)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)15625",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => contract IStakeStrategy)",
        "numberOfBytes": "32",
        "value": "t_contract(IStakeStrategy)16415"
      },
      "t_mapping(t_enum(LpTokenType)15625,t_struct(LockedBalance)15568_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)15625",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)15568_storage"
      },
      "t_mapping(t_enum(LpTokenType)15625,t_struct(UintSet)6422_storage)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)15625",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)6422_storage"
      },
      "t_mapping(t_enum(LpTokenType)15625,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(LpTokenType)15625",
        "label": "mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_array(t_struct(UserPoint)15588_storage)1000000000_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.UserPoint[1000000000]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)15625,t_array(t_struct(UserPoint)15588_storage)1000000000_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_struct(LockedBalance)15568_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct IveIONStructsEnumsErrorsEvents.LockedBalance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)15625,t_struct(LockedBalance)15568_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_struct(UintSet)6422_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => struct EnumerableSet.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)15625,t_struct(UintSet)6422_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LpTokenType)15625,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum IveIONStructsEnumsErrorsEvents.LpTokenType => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(LpTokenType)15625,t_uint256))"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)6265_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)6265_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)6265_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 6264,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5950_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockedBalance)15568_storage": {
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.LockedBalance",
        "members": [
          {
            "astId": 15555,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15557,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15559,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "delegateAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15561,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "start",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15563,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "end",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15565,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "isPermanent",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 15567,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "boost",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)5950_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5945,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5949,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)6422_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 6421,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5950_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserPoint)15588_storage": {
        "encoding": "inplace",
        "label": "struct IveIONStructsEnumsErrorsEvents.UserPoint",
        "members": [
          {
            "astId": 15577,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15579,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "slope",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15581,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "ts",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15583,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "blk",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15585,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "permanent",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15587,
            "contract": "contracts/veION/veIONSecondExtension.sol:veIONSecondExtension",
            "label": "permanentDelegate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}