{
  "language": "Solidity",
  "sources": {
    "@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/ContextUpgradeable.sol\";\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "@openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\r\n * `CREATE2` can be used to compute in advance the address where a smart\r\n * contract will be deployed, which allows for interesting new mechanisms known\r\n * as 'counterfactual interactions'.\r\n *\r\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\r\n * information.\r\n */\r\nlibrary Create2Upgradeable {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(\r\n        uint256 amount,\r\n        bytes32 salt,\r\n        bytes memory bytecode\r\n    ) internal returns (address addr) {\r\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(\r\n        bytes32 salt,\r\n        bytes32 bytecodeHash,\r\n        address deployer\r\n    ) internal pure returns (address addr) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40) // Get free memory pointer\r\n\r\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\r\n            // |-------------------|---------------------------------------------------------------------------|\r\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\r\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\r\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\r\n            // | 0xFF              |            FF                                                             |\r\n            // |-------------------|---------------------------------------------------------------------------|\r\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\r\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\r\n\r\n            mstore(add(ptr, 0x40), bytecodeHash)\r\n            mstore(add(ptr, 0x20), salt)\r\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\r\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\r\n            mstore8(start, 0xff)\r\n            addr := keccak256(start, 85)\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822Proxiable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeacon {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../Proxy.sol\";\r\nimport \"./ERC1967Upgrade.sol\";\r\n\r\n/**\r\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\r\n * implementation address that can be changed. This address is stored in storage in the location specified by\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\r\n * implementation behind the proxy.\r\n */\r\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\r\n    /**\r\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\r\n     *\r\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\r\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\r\n     */\r\n    constructor(address _logic, bytes memory _data) payable {\r\n        _upgradeToAndCall(_logic, _data, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view virtual override returns (address impl) {\r\n        return ERC1967Upgrade._getImplementation();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../beacon/IBeacon.sol\";\r\nimport \"../../interfaces/draft-IERC1822.sol\";\r\nimport \"../../utils/Address.sol\";\r\nimport \"../../utils/StorageSlot.sol\";\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n *\r\n * @custom:oz-upgrades-unsafe-allow delegatecall\r\n */\r\nabstract contract ERC1967Upgrade {\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\r\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\r\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is upgraded.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\r\n        require(\r\n            Address.isContract(IBeacon(newBeacon).implementation()),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length > 0 || forceCall) {\r\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal virtual {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overridden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ERC1967/ERC1967Proxy.sol\";\r\n\r\n/**\r\n * @dev This contract implements a proxy that is upgradeable by an admin.\r\n *\r\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\r\n * clashing], which can potentially be used in an attack, this contract uses the\r\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\r\n * things that go hand in hand:\r\n *\r\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\r\n * that call matches one of the admin functions exposed by the proxy itself.\r\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\r\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\r\n * \"admin cannot fallback to proxy target\".\r\n *\r\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\r\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\r\n * to sudden errors when trying to call a function from the proxy implementation.\r\n *\r\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\r\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\r\n */\r\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\r\n    /**\r\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\r\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\r\n     */\r\n    constructor(\r\n        address _logic,\r\n        address admin_,\r\n        bytes memory _data\r\n    ) payable ERC1967Proxy(_logic, _data) {\r\n        _changeAdmin(admin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _getAdmin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\r\n     */\r\n    function admin() external ifAdmin returns (address admin_) {\r\n        admin_ = _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\r\n     *\r\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\r\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\r\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\r\n     */\r\n    function implementation() external ifAdmin returns (address implementation_) {\r\n        implementation_ = _implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\r\n     */\r\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\r\n        _changeAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\r\n     */\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\r\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\r\n     * proxied contract.\r\n     *\r\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\r\n        _upgradeToAndCall(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _admin() internal view virtual returns (address) {\r\n        return _getAdmin();\r\n    }\r\n\r\n    /**\r\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\r\n     */\r\n    function _beforeFallback() internal virtual override {\r\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\r\n        super._beforeFallback();\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\r\n */\r\nlibrary StorageSlot {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "adrastia-periphery/rates/IHistoricalRates.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\nimport \"./RateLibrary.sol\";\n\n/**\n * @title IHistoricalRates\n * @notice An interface that defines a contract that stores historical rates.\n */\ninterface IHistoricalRates {\n    /// @notice Gets an rate for a token at a specific index.\n    /// @param token The address of the token to get the rates for.\n    /// @param index The index of the rate to get, where index 0 contains the latest rate, and the last\n    ///   index contains the oldest rate (uses reverse chronological ordering).\n    /// @return rate The rate for the token at the specified index.\n    function getRateAt(address token, uint256 index) external view returns (RateLibrary.Rate memory);\n\n    /// @notice Gets the latest rates for a token.\n    /// @param token The address of the token to get the rates for.\n    /// @param amount The number of rates to get.\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\n    function getRates(address token, uint256 amount) external view returns (RateLibrary.Rate[] memory);\n\n    /// @notice Gets the latest rates for a token.\n    /// @param token The address of the token to get the rates for.\n    /// @param amount The number of rates to get.\n    /// @param offset The index of the first rate to get (default: 0).\n    /// @param increment The increment between rates to get (default: 1).\n    /// @return rates The latest rates for the token, in reverse chronological order, from newest to oldest.\n    function getRates(\n        address token,\n        uint256 amount,\n        uint256 offset,\n        uint256 increment\n    ) external view returns (RateLibrary.Rate[] memory);\n\n    /// @notice Gets the number of rates for a token.\n    /// @param token The address of the token to get the number of rates for.\n    /// @return count The number of rates for the token.\n    function getRatesCount(address token) external view returns (uint256);\n\n    /// @notice Gets the capacity of rates for a token.\n    /// @param token The address of the token to get the capacity of rates for.\n    /// @return capacity The capacity of rates for the token.\n    function getRatesCapacity(address token) external view returns (uint256);\n\n    /// @notice Sets the capacity of rates for a token.\n    /// @param token The address of the token to set the capacity of rates for.\n    /// @param amount The new capacity of rates for the token.\n    function setRatesCapacity(address token, uint256 amount) external;\n}\n"
    },
    "adrastia-periphery/rates/RateLibrary.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nlibrary RateLibrary {\n    struct Rate {\n        uint64 target;\n        uint64 current;\n        uint32 timestamp;\n    }\n}\n"
    },
    "contracts/adrastia/PrudentiaLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nlibrary PrudentiaLib {\r\n  struct PrudentiaConfig {\r\n    address controller; // Adrastia Prudentia controller address\r\n    uint8 offset; // Offset for delayed rate activation\r\n    int8 decimalShift; // Positive values scale the rate up (in powers of 10), negative values scale the rate down\r\n  }\r\n}\r\n"
    },
    "contracts/compound/CarefulMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title Careful Math\r\n * @author Compound\r\n * @notice Derived from OpenZeppelin's SafeMath library\r\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\ncontract CarefulMath {\r\n  /**\r\n   * @dev Possible error codes that we can return\r\n   */\r\n  enum MathError {\r\n    NO_ERROR,\r\n    DIVISION_BY_ZERO,\r\n    INTEGER_OVERFLOW,\r\n    INTEGER_UNDERFLOW\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two numbers, returns an error on overflow.\r\n   */\r\n  function mulUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\r\n    if (a == 0) {\r\n      return (MathError.NO_ERROR, 0);\r\n    }\r\n\r\n    uint256 c;\r\n    unchecked {\r\n      c = a * b;\r\n    }\r\n\r\n    if (c / a != b) {\r\n      return (MathError.INTEGER_OVERFLOW, 0);\r\n    } else {\r\n      return (MathError.NO_ERROR, c);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Integer division of two numbers, truncating the quotient.\r\n   */\r\n  function divUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\r\n    if (b == 0) {\r\n      return (MathError.DIVISION_BY_ZERO, 0);\r\n    }\r\n\r\n    return (MathError.NO_ERROR, a / b);\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\r\n   */\r\n  function subUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\r\n    if (b <= a) {\r\n      return (MathError.NO_ERROR, a - b);\r\n    } else {\r\n      return (MathError.INTEGER_UNDERFLOW, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two numbers, returns an error on overflow.\r\n   */\r\n  function addUInt(uint256 a, uint256 b) internal pure returns (MathError, uint256) {\r\n    uint256 c;\r\n    unchecked {\r\n      c = a + b;\r\n    }\r\n\r\n    if (c >= a) {\r\n      return (MathError.NO_ERROR, c);\r\n    } else {\r\n      return (MathError.INTEGER_OVERFLOW, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev add a and b and then subtract c\r\n   */\r\n  function addThenSubUInt(\r\n    uint256 a,\r\n    uint256 b,\r\n    uint256 c\r\n  ) internal pure returns (MathError, uint256) {\r\n    (MathError err0, uint256 sum) = addUInt(a, b);\r\n\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, 0);\r\n    }\r\n\r\n    return subUInt(sum, c);\r\n  }\r\n}\r\n"
    },
    "contracts/compound/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\r\nimport { ComptrollerErrorReporter } from \"./ErrorReporter.sol\";\r\nimport { Exponential } from \"./Exponential.sol\";\r\nimport { BasePriceOracle } from \"../oracles/BasePriceOracle.sol\";\r\nimport { Unitroller } from \"./Unitroller.sol\";\r\nimport { IFeeDistributor } from \"./IFeeDistributor.sol\";\r\nimport { IIonicFlywheel } from \"../ionic/strategies/flywheel/IIonicFlywheel.sol\";\r\nimport { DiamondExtension, DiamondBase, LibDiamond } from \"../ionic/DiamondExtension.sol\";\r\nimport { ComptrollerExtensionInterface, ComptrollerBase, ComptrollerInterface } from \"./ComptrollerInterface.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\n/**\r\n * @title Compound's Comptroller Contract\r\n * @author Compound\r\n * @dev This contract should not to be deployed alone; instead, deploy `Unitroller` (proxy contract) on top of this `Comptroller` (logic/implementation contract).\r\n */\r\ncontract Comptroller is ComptrollerBase, ComptrollerInterface, ComptrollerErrorReporter, Exponential, DiamondExtension {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  /// @notice Emitted when an admin supports a market\r\n  event MarketListed(ICErc20 cToken);\r\n\r\n  /// @notice Emitted when an account enters a market\r\n  event MarketEntered(ICErc20 cToken, address account);\r\n\r\n  /// @notice Emitted when an account exits a market\r\n  event MarketExited(ICErc20 cToken, address account);\r\n\r\n  /// @notice Emitted when close factor is changed by admin\r\n  event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa);\r\n\r\n  /// @notice Emitted when a collateral factor is changed by admin\r\n  event NewCollateralFactor(ICErc20 cToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa);\r\n\r\n  /// @notice Emitted when liquidation incentive is changed by admin\r\n  event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa);\r\n\r\n  /// @notice Emitted when price oracle is changed\r\n  event NewPriceOracle(BasePriceOracle oldPriceOracle, BasePriceOracle newPriceOracle);\r\n\r\n  /// @notice Emitted when the whitelist enforcement is changed\r\n  event WhitelistEnforcementChanged(bool enforce);\r\n\r\n  /// @notice Emitted when a new RewardsDistributor contract is added to hooks\r\n  event AddedRewardsDistributor(address rewardsDistributor);\r\n\r\n  // closeFactorMantissa must be strictly greater than this value\r\n  uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\r\n\r\n  // closeFactorMantissa must not exceed this value\r\n  uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n  // No collateralFactorMantissa may exceed this value\r\n  uint256 internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\r\n\r\n  // liquidationIncentiveMantissa must be no less than this value\r\n  uint256 internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\r\n\r\n  // liquidationIncentiveMantissa must be no greater than this value\r\n  uint256 internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\r\n\r\n  modifier isAuthorized() {\r\n    require(IFeeDistributor(ionicAdmin).canCall(address(this), msg.sender, address(this), msg.sig), \"not authorized\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveSupplyCaps(\r\n    address cToken\r\n  ) public view override(ComptrollerBase, ComptrollerInterface) returns (uint256 supplyCap) {\r\n    return ComptrollerBase.effectiveSupplyCaps(cToken);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveBorrowCaps(\r\n    address cToken\r\n  ) public view override(ComptrollerBase, ComptrollerInterface) returns (uint256 borrowCap) {\r\n    return ComptrollerBase.effectiveBorrowCaps(cToken);\r\n  }\r\n\r\n  /*** Assets You Are In ***/\r\n\r\n  /**\r\n   * @notice Returns the assets an account has entered\r\n   * @param account The address of the account to pull assets for\r\n   * @return A dynamic list with the assets the account has entered\r\n   */\r\n  function getAssetsIn(address account) external view returns (ICErc20[] memory) {\r\n    ICErc20[] memory assetsIn = accountAssets[account];\r\n\r\n    return assetsIn;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns whether the given account is entered in the given asset\r\n   * @param account The address of the account to check\r\n   * @param cToken The cToken to check\r\n   * @return True if the account is in the asset, otherwise false.\r\n   */\r\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool) {\r\n    return markets[address(cToken)].accountMembership[account];\r\n  }\r\n\r\n  /**\r\n   * @notice Add assets to be included in account liquidity calculation\r\n   * @param cTokens The list of addresses of the cToken markets to be enabled\r\n   * @return Success indicator for whether each corresponding market was entered\r\n   */\r\n  function enterMarkets(address[] memory cTokens) public override isAuthorized returns (uint256[] memory) {\r\n    uint256 len = cTokens.length;\r\n\r\n    uint256[] memory results = new uint256[](len);\r\n    for (uint256 i = 0; i < len; i++) {\r\n      ICErc20 cToken = ICErc20(cTokens[i]);\r\n\r\n      results[i] = uint256(addToMarketInternal(cToken, msg.sender));\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\r\n   * @param cToken The market to enter\r\n   * @param borrower The address of the account to modify\r\n   * @return Success indicator for whether the market was entered\r\n   */\r\n  function addToMarketInternal(ICErc20 cToken, address borrower) internal returns (Error) {\r\n    Market storage marketToJoin = markets[address(cToken)];\r\n\r\n    if (!marketToJoin.isListed) {\r\n      // market is not listed, cannot join\r\n      return Error.MARKET_NOT_LISTED;\r\n    }\r\n\r\n    if (marketToJoin.accountMembership[borrower] == true) {\r\n      // already joined\r\n      return Error.NO_ERROR;\r\n    }\r\n\r\n    // survived the gauntlet, add to list\r\n    // NOTE: we store these somewhat redundantly as a significant optimization\r\n    //  this avoids having to iterate through the list for the most common use cases\r\n    //  that is, only when we need to perform liquidity checks\r\n    //  and not whenever we want to check if an account is in a particular market\r\n    marketToJoin.accountMembership[borrower] = true;\r\n    accountAssets[borrower].push(cToken);\r\n\r\n    // Add to allBorrowers\r\n    if (!borrowers[borrower]) {\r\n      allBorrowers.push(borrower);\r\n      borrowers[borrower] = true;\r\n      borrowerIndexes[borrower] = allBorrowers.length - 1;\r\n    }\r\n\r\n    emit MarketEntered(cToken, borrower);\r\n\r\n    return Error.NO_ERROR;\r\n  }\r\n\r\n  /**\r\n   * @notice Removes asset from sender's account liquidity calculation\r\n   * @dev Sender must not have an outstanding borrow balance in the asset,\r\n   *  or be providing necessary collateral for an outstanding borrow.\r\n   * @param cTokenAddress The address of the asset to be removed\r\n   * @return Whether or not the account successfully exited the market\r\n   */\r\n  function exitMarket(address cTokenAddress) external override isAuthorized returns (uint256) {\r\n    // TODO\r\n    require(markets[cTokenAddress].isListed, \"!Comptroller:exitMarket\");\r\n\r\n    ICErc20 cToken = ICErc20(cTokenAddress);\r\n    /* Get sender tokensHeld and amountOwed underlying from the cToken */\r\n    (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\r\n    require(oErr == 0, \"!exitMarket\"); // semi-opaque error code\r\n\r\n    /* Fail if the sender has a borrow balance */\r\n    if (amountOwed != 0) {\r\n      return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\r\n    }\r\n\r\n    /* Fail if the sender is not permitted to redeem all of their tokens */\r\n    uint256 allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\r\n    if (allowed != 0) {\r\n      return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\r\n    }\r\n\r\n    Market storage marketToExit = markets[cTokenAddress];\r\n\r\n    /* Return true if the sender is not already ‘in’ the market */\r\n    if (!marketToExit.accountMembership[msg.sender]) {\r\n      return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /* Set cToken account membership to false */\r\n    delete marketToExit.accountMembership[msg.sender];\r\n\r\n    /* Delete cToken from the account’s list of assets */\r\n    // load into memory for faster iteration\r\n    ICErc20[] memory userAssetList = accountAssets[msg.sender];\r\n    uint256 len = userAssetList.length;\r\n    uint256 assetIndex = len;\r\n    for (uint256 i = 0; i < len; i++) {\r\n      if (userAssetList[i] == ICErc20(cTokenAddress)) {\r\n        assetIndex = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // We *must* have found the asset in the list or our redundant data structure is broken\r\n    assert(assetIndex < len);\r\n\r\n    // copy last item in list to location of item to be removed, reduce length by 1\r\n    ICErc20[] storage storedList = accountAssets[msg.sender];\r\n    storedList[assetIndex] = storedList[storedList.length - 1];\r\n    storedList.pop();\r\n\r\n    // If the user has exited all markets, remove them from the `allBorrowers` array\r\n    if (storedList.length == 0) {\r\n      allBorrowers[borrowerIndexes[msg.sender]] = allBorrowers[allBorrowers.length - 1]; // Copy last item in list to location of item to be removed\r\n      allBorrowers.pop(); // Reduce length by 1\r\n      borrowerIndexes[allBorrowers[borrowerIndexes[msg.sender]]] = borrowerIndexes[msg.sender]; // Set borrower index of moved item to correct index\r\n      borrowerIndexes[msg.sender] = 0; // Reset sender borrower index to 0 for a gas refund\r\n      borrowers[msg.sender] = false; // Tell the contract that the sender is no longer a borrower (so it knows to add the borrower back if they enter a market in the future)\r\n    }\r\n\r\n    emit MarketExited(ICErc20(cTokenAddress), msg.sender);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /*** Policy Hooks ***/\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to mint tokens in the given market\r\n   * @param cTokenAddress The market to verify the mint against\r\n   * @param minter The account which would get the minted tokens\r\n   * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\r\n   * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function mintAllowed(address cTokenAddress, address minter, uint256 mintAmount) external override returns (uint256) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!mintGuardianPaused[cTokenAddress], \"!mint:paused\");\r\n\r\n    // Make sure market is listed\r\n    if (!markets[cTokenAddress].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Make sure minter is whitelisted\r\n    if (enforceWhitelist && !whitelist[minter]) {\r\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\r\n    }\r\n\r\n    uint256 supplyCap = effectiveSupplyCaps(cTokenAddress);\r\n\r\n    // Supply cap of 0 corresponds to unlimited supplying\r\n    if (supplyCap != 0 && !supplyCapWhitelist[cTokenAddress].contains(minter)) {\r\n      uint256 totalUnderlyingSupply = ICErc20(cTokenAddress).getTotalUnderlyingSupplied();\r\n      uint256 whitelistedSuppliersSupply = asComptrollerExtension().getWhitelistedSuppliersSupply(cTokenAddress);\r\n      uint256 nonWhitelistedTotalSupply;\r\n      if (whitelistedSuppliersSupply >= totalUnderlyingSupply) nonWhitelistedTotalSupply = 0;\r\n      else nonWhitelistedTotalSupply = totalUnderlyingSupply - whitelistedSuppliersSupply;\r\n\r\n      require(nonWhitelistedTotalSupply + mintAmount < supplyCap, \"!supply cap\");\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreSupplierAction(cTokenAddress, minter);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\r\n   * @param cToken The market to verify the redeem against\r\n   * @param redeemer The account which would redeem the tokens\r\n   * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\r\n   * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external override returns (uint256) {\r\n    uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\r\n    if (allowed != uint256(Error.NO_ERROR)) {\r\n      return allowed;\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreSupplierAction(cToken, redeemer);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  function redeemAllowedInternal(\r\n    address cToken,\r\n    address redeemer,\r\n    uint256 redeemTokens\r\n  ) internal view returns (uint256) {\r\n    if (!markets[cToken].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\r\n    if (!markets[cToken].accountMembership[redeemer]) {\r\n      return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\r\n    (Error err, , , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\r\n      redeemer,\r\n      ICErc20(cToken),\r\n      redeemTokens,\r\n      0,\r\n      0\r\n    );\r\n    if (err != Error.NO_ERROR) {\r\n      return uint256(err);\r\n    }\r\n    if (shortfall > 0) {\r\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\r\n    }\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates mint and reverts on rejection. May emit logs.\r\n   * @param cToken Asset being minted\r\n   * @param minter The address minting the tokens\r\n   * @param actualMintAmount The amount of the underlying asset being minted\r\n   * @param mintTokens The number of tokens being minted\r\n   */\r\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external {\r\n    // Add minter to suppliers mapping\r\n    suppliers[minter] = true;\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPostSupplierAction(cToken, minter);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates redeem and reverts on rejection. May emit logs.\r\n   * @param cToken Asset being redeemed\r\n   * @param redeemer The address redeeming the tokens\r\n   * @param redeemAmount The amount of the underlying asset being redeemed\r\n   * @param redeemTokens The number of tokens being redeemed\r\n   */\r\n  function redeemVerify(\r\n    address cToken,\r\n    address redeemer,\r\n    uint256 redeemAmount,\r\n    uint256 redeemTokens\r\n  ) external override {\r\n    require(markets[msg.sender].isListed, \"!market\");\r\n\r\n    // Require tokens is zero or amount is also zero\r\n    if (redeemTokens == 0 && redeemAmount > 0) {\r\n      revert(\"!zero\");\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPostSupplierAction(cToken, redeemer);\r\n  }\r\n\r\n  function getMaxRedeemOrBorrow(\r\n    address account,\r\n    ICErc20 cTokenModify,\r\n    bool isBorrow\r\n  ) external view override returns (uint256) {\r\n    address cToken = address(cTokenModify);\r\n    // Accrue interest\r\n    uint256 balanceOfUnderlying = cTokenModify.balanceOfUnderlying(account);\r\n\r\n    // Get account liquidity\r\n    (Error err, , uint256 liquidity, uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\r\n      account,\r\n      isBorrow ? cTokenModify : ICErc20(address(0)),\r\n      0,\r\n      0,\r\n      0\r\n    );\r\n    require(err == Error.NO_ERROR, \"!liquidity\");\r\n    if (shortfall > 0) return 0; // Shortfall, so no more borrow/redeem\r\n\r\n    // Get max borrow/redeem\r\n    uint256 maxBorrowOrRedeemAmount;\r\n\r\n    if (!isBorrow && !markets[cToken].accountMembership[account]) {\r\n      // Max redeem = balance of underlying if not used as collateral\r\n      maxBorrowOrRedeemAmount = balanceOfUnderlying;\r\n    } else {\r\n      // Avoid \"stack too deep\" error by separating this logic\r\n      maxBorrowOrRedeemAmount = _getMaxRedeemOrBorrow(liquidity, cTokenModify, isBorrow);\r\n\r\n      // Redeem only: max out at underlying balance\r\n      if (!isBorrow && balanceOfUnderlying < maxBorrowOrRedeemAmount) maxBorrowOrRedeemAmount = balanceOfUnderlying;\r\n    }\r\n\r\n    // Get max borrow or redeem considering cToken liquidity\r\n    uint256 cTokenLiquidity = cTokenModify.getCash();\r\n\r\n    // Return the minimum of the two maximums\r\n    return maxBorrowOrRedeemAmount <= cTokenLiquidity ? maxBorrowOrRedeemAmount : cTokenLiquidity;\r\n  }\r\n\r\n  /**\r\n   * @dev Portion of the logic in `getMaxRedeemOrBorrow` above separated to avoid \"stack too deep\" errors.\r\n   */\r\n  function _getMaxRedeemOrBorrow(\r\n    uint256 liquidity,\r\n    ICErc20 cTokenModify,\r\n    bool isBorrow\r\n  ) internal view returns (uint256) {\r\n    if (liquidity == 0) return 0; // No available account liquidity, so no more borrow/redeem\r\n\r\n    // Get the normalized price of the asset\r\n    uint256 conversionFactor = oracle.getUnderlyingPrice(cTokenModify);\r\n    require(conversionFactor > 0, \"!oracle\");\r\n\r\n    // Pre-compute a conversion factor from tokens -> ether (normalized price value)\r\n    if (!isBorrow) {\r\n      uint256 collateralFactorMantissa = markets[address(cTokenModify)].collateralFactorMantissa;\r\n      conversionFactor = (collateralFactorMantissa * conversionFactor) / 1e18;\r\n    }\r\n\r\n    // Get max borrow or redeem considering excess account liquidity\r\n    return (liquidity * 1e18) / conversionFactor;\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\r\n   * @param cToken The market to verify the borrow against\r\n   * @param borrower The account which would borrow the asset\r\n   * @param borrowAmount The amount of underlying the account would borrow\r\n   * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external override returns (uint256) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!borrowGuardianPaused[cToken], \"!borrow:paused\");\r\n\r\n    // Make sure market is listed\r\n    if (!markets[cToken].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    if (!markets[cToken].accountMembership[borrower]) {\r\n      // only cTokens may call borrowAllowed if borrower not in market\r\n      require(msg.sender == cToken, \"!ctoken\");\r\n\r\n      // attempt to add borrower to the market\r\n      Error err = addToMarketInternal(ICErc20(msg.sender), borrower);\r\n      if (err != Error.NO_ERROR) {\r\n        return uint256(err);\r\n      }\r\n\r\n      // it should be impossible to break the important invariant\r\n      assert(markets[cToken].accountMembership[borrower]);\r\n    }\r\n\r\n    // Make sure oracle price is available\r\n    if (oracle.getUnderlyingPrice(ICErc20(cToken)) == 0) {\r\n      return uint256(Error.PRICE_ERROR);\r\n    }\r\n\r\n    // Make sure borrower is whitelisted\r\n    if (enforceWhitelist && !whitelist[borrower]) {\r\n      return uint256(Error.SUPPLIER_NOT_WHITELISTED);\r\n    }\r\n\r\n    uint256 borrowCap = effectiveBorrowCaps(cToken);\r\n\r\n    // Borrow cap of 0 corresponds to unlimited borrowing\r\n    if (borrowCap != 0 && !borrowCapWhitelist[cToken].contains(borrower)) {\r\n      uint256 totalBorrows = ICErc20(cToken).totalBorrowsCurrent();\r\n      uint256 whitelistedBorrowersBorrows = asComptrollerExtension().getWhitelistedBorrowersBorrows(cToken);\r\n      uint256 nonWhitelistedTotalBorrows;\r\n      if (whitelistedBorrowersBorrows >= totalBorrows) nonWhitelistedTotalBorrows = 0;\r\n      else nonWhitelistedTotalBorrows = totalBorrows - whitelistedBorrowersBorrows;\r\n\r\n      require(nonWhitelistedTotalBorrows + borrowAmount < borrowCap, \"!borrow:cap\");\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreBorrowerAction(cToken, borrower);\r\n\r\n    // Perform a hypothetical liquidity check to guard against shortfall\r\n    (uint256 err, , , uint256 shortfall) = this.getHypotheticalAccountLiquidity(borrower, cToken, 0, borrowAmount, 0);\r\n    if (err != uint256(Error.NO_ERROR)) {\r\n      return err;\r\n    }\r\n    if (shortfall > 0) {\r\n      return uint256(Error.INSUFFICIENT_LIQUIDITY);\r\n    }\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates borrow the underlying asset of the given market\r\n   * @param cToken The market to verify the borrow against\r\n   * @param borrower The account which borrowed the asset\r\n   */\r\n  function borrowVerify(address cToken, address borrower) external override {\r\n    // Keep the flywheel moving\r\n    flywheelPostBorrowerAction(cToken, borrower);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\r\n   * @param cToken Asset whose underlying is being borrowed\r\n   * @param accountBorrowsNew The user's new borrow balance of the underlying asset\r\n   */\r\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view override returns (uint256) {\r\n    // Check if min borrow exists\r\n    uint256 minBorrowEth = IFeeDistributor(ionicAdmin).minBorrowEth();\r\n\r\n    if (minBorrowEth > 0) {\r\n      // Get new underlying borrow balance of account for this cToken\r\n      uint256 oraclePriceMantissa = oracle.getUnderlyingPrice(ICErc20(cToken));\r\n      if (oraclePriceMantissa == 0) return uint256(Error.PRICE_ERROR);\r\n      (MathError mathErr, uint256 borrowBalanceEth) = mulScalarTruncate(\r\n        Exp({ mantissa: oraclePriceMantissa }),\r\n        accountBorrowsNew\r\n      );\r\n      if (mathErr != MathError.NO_ERROR) return uint256(Error.MATH_ERROR);\r\n\r\n      // Check against min borrow\r\n      if (borrowBalanceEth < minBorrowEth) return uint256(Error.BORROW_BELOW_MIN);\r\n    }\r\n\r\n    // Return no error\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\r\n   * @param cToken The market to verify the repay against\r\n   * @param payer The account which would repay the asset\r\n   * @param borrower The account which would borrowed the asset\r\n   * @param repayAmount The amount of the underlying asset the account would repay\r\n   * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function repayBorrowAllowed(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external override returns (uint256) {\r\n    // Make sure market is listed\r\n    if (!markets[cToken].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreBorrowerAction(cToken, borrower);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates that blacklisted balances are updated after borrow repayment\r\n   * @param cToken The market to verify the repay against\r\n   * @param payer The account which repayed the asset\r\n   * @param borrower The account which borrowed the asset\r\n   * @param repayAmount The amount of the underlying asset the account repayed\r\n   */\r\n  function repayBorrowVerify(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external override {\r\n    // Keep the flywheel moving\r\n    flywheelPostBorrowerAction(cToken, borrower);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the liquidation should be allowed to occur\r\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n   * @param liquidator The address repaying the borrow and seizing the collateral\r\n   * @param borrower The address of the borrower\r\n   * @param repayAmount The amount of underlying being repaid\r\n   */\r\n  function liquidateBorrowAllowed(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external override returns (uint256) {\r\n    // Make sure markets are listed\r\n    if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Get borrowers' underlying borrow balance\r\n    uint256 borrowBalance = ICErc20(cTokenBorrowed).borrowBalanceCurrent(borrower);\r\n\r\n    /* allow accounts to be liquidated if the market is deprecated */\r\n    if (isDeprecated(ICErc20(cTokenBorrowed))) {\r\n      require(borrowBalance >= repayAmount, \"!borrow>repay\");\r\n    } else {\r\n      /* The borrower must have shortfall in order to be liquidateable */\r\n      (Error err, , , uint256 shortfall) = getHypotheticalAccountLiquidityInternal(\r\n        borrower,\r\n        ICErc20(address(0)),\r\n        0,\r\n        0,\r\n        0\r\n      );\r\n      if (err != Error.NO_ERROR) {\r\n        return uint256(err);\r\n      }\r\n\r\n      if (shortfall == 0) {\r\n        return uint256(Error.INSUFFICIENT_SHORTFALL);\r\n      }\r\n\r\n      /* The liquidator may not repay more than what is allowed by the closeFactor */\r\n      uint256 maxClose = mul_ScalarTruncate(Exp({ mantissa: closeFactorMantissa }), borrowBalance);\r\n      if (repayAmount > maxClose) {\r\n        return uint256(Error.TOO_MUCH_REPAY);\r\n      }\r\n    }\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the seizing of assets should be allowed to occur\r\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n   * @param liquidator The address repaying the borrow and seizing the collateral\r\n   * @param borrower The address of the borrower\r\n   * @param seizeTokens The number of collateral tokens to seize\r\n   */\r\n  function seizeAllowed(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external override returns (uint256) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!seizeGuardianPaused, \"!seize:paused\");\r\n\r\n    // Make sure markets are listed\r\n    if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\r\n      return uint256(Error.MARKET_NOT_LISTED);\r\n    }\r\n\r\n    // Make sure cToken Comptrollers are identical\r\n    if (ICErc20(cTokenCollateral).comptroller() != ICErc20(cTokenBorrowed).comptroller()) {\r\n      return uint256(Error.COMPTROLLER_MISMATCH);\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreTransferAction(cTokenCollateral, borrower, liquidator);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Validates that blacklisted balances are updated after seizing of assets\r\n   * @param cTokenCollateral Asset which was used as collateral and will be seized\r\n   * @param cTokenBorrowed Asset which was borrowed by the borrower\r\n   * @param liquidator The address repaying the borrow and seizing the collateral\r\n   * @param borrower The address of the borrower\r\n   * @param seizeTokens The number of collateral tokens to seize\r\n   */\r\n  function seizeVerify(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external override {\r\n    // Keep the flywheel moving\r\n    flywheelPostTransferAction(cTokenCollateral, borrower, liquidator);\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\r\n   * @param cToken The market to verify the transfer against\r\n   * @param src The account which sources the tokens\r\n   * @param dst The account which receives the tokens\r\n   * @param transferTokens The number of cTokens to transfer\r\n   * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\r\n   */\r\n  function transferAllowed(\r\n    address cToken,\r\n    address src,\r\n    address dst,\r\n    uint256 transferTokens\r\n  ) external override returns (uint256) {\r\n    // Pausing is a very serious situation - we revert to sound the alarms\r\n    require(!transferGuardianPaused, \"!transfer:paused\");\r\n\r\n    // Currently the only consideration is whether or not\r\n    //  the src is allowed to redeem this many tokens\r\n    uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\r\n    if (allowed != uint256(Error.NO_ERROR)) {\r\n      return allowed;\r\n    }\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPreTransferAction(cToken, src, dst);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Validates that blacklisted balances are updated after transfering assets\r\n   * @param cToken The market to verify the transfer against\r\n   * @param src The account which sources the tokens\r\n   * @param dst The account which receives the tokens\r\n   * @param transferTokens The number of cTokens to transfer\r\n   */\r\n  function transferVerify(\r\n    address cToken,\r\n    address src,\r\n    address dst,\r\n    uint256 transferTokens\r\n  ) external override {\r\n\r\n    // Keep the flywheel moving\r\n    flywheelPostTransferAction(cToken, src, dst);\r\n  }\r\n\r\n  /*** Flywheel Hooks ***/\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving pre-mint and pre-redeem\r\n   * @param cToken The relevant market\r\n   * @param supplier The minter/redeemer\r\n   */\r\n  function flywheelPreSupplierAction(address cToken, address supplier) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreSupplierAction(cToken, supplier);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving post-mint and post-redeem\r\n   * @param cToken The relevant market\r\n   * @param supplier The minter/redeemer\r\n   */\r\n  function flywheelPostSupplierAction(address cToken, address supplier) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPostSupplierAction(cToken, supplier);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving pre-borrow and pre-repay\r\n   * @param cToken The relevant market\r\n   * @param borrower The borrower\r\n   */\r\n  function flywheelPreBorrowerAction(address cToken, address borrower) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreBorrowerAction(cToken, borrower);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving post-borrow and post-repay\r\n   * @param cToken The relevant market\r\n   * @param borrower The borrower\r\n   */\r\n  function flywheelPostBorrowerAction(address cToken, address borrower) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPostBorrowerAction(cToken, borrower);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving pre-transfer and pre-seize\r\n   * @param cToken The relevant market\r\n   * @param src The account which sources the tokens\r\n   * @param dst The account which receives the tokens\r\n   */\r\n  function flywheelPreTransferAction(address cToken, address src, address dst) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPreTransferAction(cToken, src, dst);\r\n  }\r\n\r\n  /**\r\n   * @notice Keeps the flywheel moving post-transfer and post-seize\r\n   * @param cToken The relevant market\r\n   * @param src The account which sources the tokens\r\n   * @param dst The account which receives the tokens\r\n   */\r\n  function flywheelPostTransferAction(address cToken, address src, address dst) internal {\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++)\r\n      IIonicFlywheel(rewardsDistributors[i]).flywheelPostTransferAction(cToken, src, dst);\r\n  }\r\n\r\n  /*** Liquidity/Liquidation Calculations ***/\r\n\r\n  /**\r\n   * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\r\n   *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\r\n   *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\r\n   */\r\n  struct AccountLiquidityLocalVars {\r\n    ICErc20 asset;\r\n    uint256 sumCollateral;\r\n    uint256 sumBorrowPlusEffects;\r\n    uint256 cTokenBalance;\r\n    uint256 borrowBalance;\r\n    uint256 exchangeRateMantissa;\r\n    uint256 oraclePriceMantissa;\r\n    Exp collateralFactor;\r\n    Exp exchangeRate;\r\n    Exp oraclePrice;\r\n    Exp tokensToDenom;\r\n    uint256 borrowCapForCollateral;\r\n    uint256 borrowedAssetPrice;\r\n    uint256 assetAsCollateralValueCap;\r\n  }\r\n\r\n  function getAccountLiquidity(address account) public view override returns (uint256, uint256, uint256, uint256) {\r\n    (\r\n      Error err,\r\n      uint256 collateralValue,\r\n      uint256 liquidity,\r\n      uint256 shortfall\r\n    ) = getHypotheticalAccountLiquidityInternal(account, ICErc20(address(0)), 0, 0, 0);\r\n    return (uint256(err), collateralValue, liquidity, shortfall);\r\n  }\r\n\r\n  /**\r\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @return (possible error code (semi-opaque),\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n  function getHypotheticalAccountLiquidity(\r\n    address account,\r\n    address cTokenModify,\r\n    uint256 redeemTokens,\r\n    uint256 borrowAmount,\r\n    uint256 repayAmount\r\n  ) public view returns (uint256, uint256, uint256, uint256) {\r\n    (\r\n      Error err,\r\n      uint256 collateralValue,\r\n      uint256 liquidity,\r\n      uint256 shortfall\r\n    ) = getHypotheticalAccountLiquidityInternal(\r\n        account,\r\n        ICErc20(cTokenModify),\r\n        redeemTokens,\r\n        borrowAmount,\r\n        repayAmount\r\n      );\r\n    return (uint256(err), collateralValue, liquidity, shortfall);\r\n  }\r\n\r\n  /**\r\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\r\n     * @param cTokenModify The market to hypothetically redeem/borrow in\r\n     * @param account The account to determine liquidity for\r\n     * @param redeemTokens The number of tokens to hypothetically redeem\r\n     * @param borrowAmount The amount of underlying to hypothetically borrow\r\n     * @return (possible error code,\r\n                hypothetical account collateral value,\r\n                hypothetical account liquidity in excess of collateral requirements,\r\n     *          hypothetical account shortfall below collateral requirements)\r\n     */\r\n  function getHypotheticalAccountLiquidityInternal(\r\n    address account,\r\n    ICErc20 cTokenModify,\r\n    uint256 redeemTokens,\r\n    uint256 borrowAmount,\r\n    uint256 repayAmount\r\n  ) internal view returns (Error, uint256, uint256, uint256) {\r\n    AccountLiquidityLocalVars memory vars; // Holds all our calculation results\r\n\r\n    if (address(cTokenModify) != address(0)) {\r\n      vars.borrowedAssetPrice = oracle.getUnderlyingPrice(cTokenModify);\r\n    }\r\n\r\n    // For each asset the account is in\r\n    for (uint256 i = 0; i < accountAssets[account].length; i++) {\r\n      vars.asset = accountAssets[account][i];\r\n\r\n      {\r\n        // Read the balances and exchange rate from the cToken\r\n        uint256 oErr;\r\n        (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = vars.asset.getAccountSnapshot(\r\n          account\r\n        );\r\n        if (oErr != 0) {\r\n          // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\r\n          return (Error.SNAPSHOT_ERROR, 0, 0, 0);\r\n        }\r\n      }\r\n      {\r\n        vars.collateralFactor = Exp({ mantissa: markets[address(vars.asset)].collateralFactorMantissa });\r\n        vars.exchangeRate = Exp({ mantissa: vars.exchangeRateMantissa });\r\n\r\n        // Get the normalized price of the asset\r\n        vars.oraclePriceMantissa = oracle.getUnderlyingPrice(vars.asset);\r\n        if (vars.oraclePriceMantissa == 0) {\r\n          return (Error.PRICE_ERROR, 0, 0, 0);\r\n        }\r\n        vars.oraclePrice = Exp({ mantissa: vars.oraclePriceMantissa });\r\n\r\n        // Pre-compute a conversion factor from tokens -> ether (normalized price value)\r\n        vars.tokensToDenom = mul_(mul_(vars.collateralFactor, vars.exchangeRate), vars.oraclePrice);\r\n      }\r\n      {\r\n        // Exclude the asset-to-be-borrowed from the liquidity, except for when redeeming\r\n        vars.assetAsCollateralValueCap = asComptrollerExtension().getAssetAsCollateralValueCap(\r\n          vars.asset,\r\n          cTokenModify,\r\n          redeemTokens > 0,\r\n          account\r\n        );\r\n\r\n        // accumulate the collateral value to sumCollateral\r\n        uint256 assetCollateralValue = mul_ScalarTruncate(vars.tokensToDenom, vars.cTokenBalance);\r\n        if (assetCollateralValue > vars.assetAsCollateralValueCap)\r\n          assetCollateralValue = vars.assetAsCollateralValueCap;\r\n        vars.sumCollateral += assetCollateralValue;\r\n      }\r\n\r\n      // sumBorrowPlusEffects += oraclePrice * borrowBalance\r\n      vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n        vars.oraclePrice,\r\n        vars.borrowBalance,\r\n        vars.sumBorrowPlusEffects\r\n      );\r\n\r\n      // Calculate effects of interacting with cTokenModify\r\n      if (vars.asset == cTokenModify) {\r\n        // redeem effect\r\n        // sumBorrowPlusEffects += tokensToDenom * redeemTokens\r\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n          vars.tokensToDenom,\r\n          redeemTokens,\r\n          vars.sumBorrowPlusEffects\r\n        );\r\n\r\n        // borrow effect\r\n        // sumBorrowPlusEffects += oraclePrice * borrowAmount\r\n        vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\r\n          vars.oraclePrice,\r\n          borrowAmount,\r\n          vars.sumBorrowPlusEffects\r\n        );\r\n\r\n        uint256 repayEffect = mul_ScalarTruncate(vars.oraclePrice, repayAmount);\r\n        if (repayEffect >= vars.sumBorrowPlusEffects) {\r\n          vars.sumBorrowPlusEffects = 0;\r\n        } else {\r\n          vars.sumBorrowPlusEffects -= repayEffect;\r\n        }\r\n      }\r\n    }\r\n\r\n    // These are safe, as the underflow condition is checked first\r\n    if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\r\n      return (Error.NO_ERROR, vars.sumCollateral, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\r\n    } else {\r\n      return (Error.NO_ERROR, vars.sumCollateral, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\r\n   * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\r\n   * @param cTokenBorrowed The address of the borrowed cToken\r\n   * @param cTokenCollateral The address of the collateral cToken\r\n   * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\r\n   * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\r\n   */\r\n  function liquidateCalculateSeizeTokens(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    uint256 actualRepayAmount\r\n  ) external view override returns (uint256, uint256) {\r\n    /* Read oracle prices for borrowed and collateral markets */\r\n    uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(ICErc20(cTokenBorrowed));\r\n    uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(ICErc20(cTokenCollateral));\r\n    if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\r\n      return (uint256(Error.PRICE_ERROR), 0);\r\n    }\r\n\r\n    /*\r\n     * Get the exchange rate and calculate the number of collateral tokens to seize:\r\n     *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\r\n     *  seizeTokens = seizeAmount / exchangeRate\r\n     *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\r\n     */\r\n    ICErc20 collateralCToken = ICErc20(cTokenCollateral);\r\n    uint256 exchangeRateMantissa = collateralCToken.exchangeRateCurrent();\r\n    uint256 seizeTokens;\r\n    Exp memory numerator;\r\n    Exp memory denominator;\r\n    Exp memory ratio;\r\n\r\n    uint256 protocolSeizeShareMantissa = collateralCToken.protocolSeizeShareMantissa();\r\n    uint256 feeSeizeShareMantissa = collateralCToken.feeSeizeShareMantissa();\r\n\r\n    /*\r\n     * The liquidation penalty includes\r\n     * - the liquidator incentive\r\n     * - the protocol fees (Ionic admin fees)\r\n     * - the market fee\r\n     */\r\n    Exp memory totalPenaltyMantissa = add_(\r\n      add_(Exp({ mantissa: liquidationIncentiveMantissa }), Exp({ mantissa: protocolSeizeShareMantissa })),\r\n      Exp({ mantissa: feeSeizeShareMantissa })\r\n    );\r\n\r\n    numerator = mul_(totalPenaltyMantissa, Exp({ mantissa: priceBorrowedMantissa }));\r\n    denominator = mul_(Exp({ mantissa: priceCollateralMantissa }), Exp({ mantissa: exchangeRateMantissa }));\r\n    ratio = div_(numerator, denominator);\r\n\r\n    seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\r\n    return (uint256(Error.NO_ERROR), seizeTokens);\r\n  }\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n   * @notice Add a RewardsDistributor contracts.\r\n   * @dev Admin function to add a RewardsDistributor contract\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _addRewardsDistributor(address distributor) external returns (uint256) {\r\n    require(hasAdminRights(), \"!admin\");\r\n\r\n    // Check marker method\r\n    require(IIonicFlywheel(distributor).isRewardsDistributor(), \"!isRewardsDistributor\");\r\n\r\n    // Check for existing RewardsDistributor\r\n    for (uint256 i = 0; i < rewardsDistributors.length; i++) require(distributor != rewardsDistributors[i], \"!added\");\r\n\r\n    // Add RewardsDistributor to array\r\n    rewardsDistributors.push(distributor);\r\n    emit AddedRewardsDistributor(distributor);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the whitelist enforcement for the comptroller\r\n   * @dev Admin function to set a new whitelist enforcement boolean\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_ENFORCEMENT_OWNER_CHECK);\r\n    }\r\n\r\n    // Check if `enforceWhitelist` already equals `enforce`\r\n    if (enforceWhitelist == enforce) {\r\n      return uint256(Error.NO_ERROR);\r\n    }\r\n\r\n    // Set comptroller's `enforceWhitelist` to `enforce`\r\n    enforceWhitelist = enforce;\r\n\r\n    // Emit WhitelistEnforcementChanged(bool enforce);\r\n    emit WhitelistEnforcementChanged(enforce);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the whitelist `statuses` for `suppliers`\r\n   * @dev Admin function to set the whitelist `statuses` for `suppliers`\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _setWhitelistStatuses(address[] calldata suppliers, bool[] calldata statuses) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_WHITELIST_STATUS_OWNER_CHECK);\r\n    }\r\n\r\n    // Set whitelist statuses for suppliers\r\n    for (uint256 i = 0; i < suppliers.length; i++) {\r\n      address supplier = suppliers[i];\r\n\r\n      if (statuses[i]) {\r\n        // If not already whitelisted, add to whitelist\r\n        if (!whitelist[supplier]) {\r\n          whitelist[supplier] = true;\r\n          whitelistArray.push(supplier);\r\n          whitelistIndexes[supplier] = whitelistArray.length - 1;\r\n        }\r\n      } else {\r\n        // If whitelisted, remove from whitelist\r\n        if (whitelist[supplier]) {\r\n          whitelistArray[whitelistIndexes[supplier]] = whitelistArray[whitelistArray.length - 1]; // Copy last item in list to location of item to be removed\r\n          whitelistArray.pop(); // Reduce length by 1\r\n          whitelistIndexes[whitelistArray[whitelistIndexes[supplier]]] = whitelistIndexes[supplier]; // Set whitelist index of moved item to correct index\r\n          whitelistIndexes[supplier] = 0; // Reset supplier whitelist index to 0 for a gas refund\r\n          whitelist[supplier] = false; // Tell the contract that the supplier is no longer whitelisted\r\n        }\r\n      }\r\n    }\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets a new price oracle for the comptroller\r\n   * @dev Admin function to set a new price oracle\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _setPriceOracle(BasePriceOracle newOracle) public returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\r\n    }\r\n\r\n    // Track the old oracle for the comptroller\r\n    BasePriceOracle oldOracle = oracle;\r\n\r\n    // Set comptroller's oracle to newOracle\r\n    oracle = newOracle;\r\n\r\n    // Emit NewPriceOracle(oldOracle, newOracle)\r\n    emit NewPriceOracle(oldOracle, newOracle);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the closeFactor used when liquidating borrows\r\n   * @dev Admin function to set closeFactor\r\n   * @param newCloseFactorMantissa New close factor, scaled by 1e18\r\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n   */\r\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\r\n    }\r\n\r\n    // Check limits\r\n    Exp memory newCloseFactorExp = Exp({ mantissa: newCloseFactorMantissa });\r\n    Exp memory lowLimit = Exp({ mantissa: closeFactorMinMantissa });\r\n    if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\r\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\r\n    }\r\n\r\n    Exp memory highLimit = Exp({ mantissa: closeFactorMaxMantissa });\r\n    if (lessThanExp(highLimit, newCloseFactorExp)) {\r\n      return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\r\n    }\r\n\r\n    // Set pool close factor to new close factor, remember old value\r\n    uint256 oldCloseFactorMantissa = closeFactorMantissa;\r\n    closeFactorMantissa = newCloseFactorMantissa;\r\n\r\n    // Emit event\r\n    emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the collateralFactor for a market\r\n   * @dev Admin function to set per-market collateralFactor\r\n   * @param cToken The market to set the factor on\r\n   * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\r\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n   */\r\n  function _setCollateralFactor(ICErc20 cToken, uint256 newCollateralFactorMantissa) public returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\r\n    }\r\n\r\n    // Verify market is listed\r\n    Market storage market = markets[address(cToken)];\r\n    if (!market.isListed) {\r\n      return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\r\n    }\r\n\r\n    Exp memory newCollateralFactorExp = Exp({ mantissa: newCollateralFactorMantissa });\r\n\r\n    // Check collateral factor <= 0.9\r\n    Exp memory highLimit = Exp({ mantissa: collateralFactorMaxMantissa });\r\n    if (lessThanExp(highLimit, newCollateralFactorExp)) {\r\n      return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\r\n    }\r\n\r\n    // If collateral factor != 0, fail if price == 0\r\n    if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\r\n      return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\r\n    }\r\n\r\n    // Set market's collateral factor to new collateral factor, remember old value\r\n    uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\r\n    market.collateralFactorMantissa = newCollateralFactorMantissa;\r\n\r\n    // Emit event with asset, old collateral factor, and new collateral factor\r\n    emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets liquidationIncentive\r\n   * @dev Admin function to set liquidationIncentive\r\n   * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\r\n   * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\r\n   */\r\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\r\n    }\r\n\r\n    // Check de-scaled min <= newLiquidationIncentive <= max\r\n    Exp memory newLiquidationIncentive = Exp({ mantissa: newLiquidationIncentiveMantissa });\r\n    Exp memory minLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMinMantissa });\r\n    if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\r\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\r\n    }\r\n\r\n    Exp memory maxLiquidationIncentive = Exp({ mantissa: liquidationIncentiveMaxMantissa });\r\n    if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\r\n      return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\r\n    }\r\n\r\n    // Save current value for use in log\r\n    uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\r\n\r\n    // Set liquidation incentive to new incentive\r\n    liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\r\n\r\n    // Emit event with old incentive, new incentive\r\n    emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Add the market to the markets mapping and set it as listed\r\n   * @dev Admin function to set isListed and add support for the market\r\n   * @param cToken The address of the market (token) to list\r\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n   */\r\n  function _supportMarket(ICErc20 cToken) internal returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\r\n    }\r\n\r\n    // Is market already listed?\r\n    if (markets[address(cToken)].isListed) {\r\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\r\n    }\r\n\r\n    // Check cToken.comptroller == this\r\n    require(address(cToken.comptroller()) == address(this), \"!comptroller\");\r\n\r\n    // Make sure market is not already listed\r\n    address underlying = ICErc20(address(cToken)).underlying();\r\n\r\n    if (address(cTokensByUnderlying[underlying]) != address(0)) {\r\n      return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\r\n    }\r\n\r\n    // List market and emit event\r\n    Market storage market = markets[address(cToken)];\r\n    market.isListed = true;\r\n    market.collateralFactorMantissa = 0;\r\n    allMarkets.push(cToken);\r\n    cTokensByUnderlying[underlying] = cToken;\r\n    emit MarketListed(cToken);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Deploy cToken, add the market to the markets mapping, and set it as listed and set the collateral factor\r\n   * @dev Admin function to deploy cToken, set isListed, and add support for the market and set the collateral factor\r\n   * @return uint 0=success, otherwise a failure. (See enum Error for details)\r\n   */\r\n  function _deployMarket(\r\n    uint8 delegateType,\r\n    bytes calldata constructorData,\r\n    bytes calldata becomeImplData,\r\n    uint256 collateralFactorMantissa\r\n  ) external returns (uint256) {\r\n    // Check caller is admin\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\r\n    }\r\n\r\n    // Temporarily enable Ionic admin rights for asset deployment (storing the original value)\r\n    bool oldIonicAdminHasRights = ionicAdminHasRights;\r\n    ionicAdminHasRights = true;\r\n\r\n    // Deploy via Ionic admin\r\n    ICErc20 cToken = ICErc20(IFeeDistributor(ionicAdmin).deployCErc20(delegateType, constructorData, becomeImplData));\r\n    // Reset Ionic admin rights to the original value\r\n    ionicAdminHasRights = oldIonicAdminHasRights;\r\n    // Support market here in the Comptroller\r\n    uint256 err = _supportMarket(cToken);\r\n\r\n    IFeeDistributor(ionicAdmin).authoritiesRegistry().reconfigureAuthority(address(this));\r\n\r\n    // Set collateral factor\r\n    return err == uint256(Error.NO_ERROR) ? _setCollateralFactor(cToken, collateralFactorMantissa) : err;\r\n  }\r\n\r\n  function _becomeImplementation() external {\r\n    require(msg.sender == address(this), \"!self call\");\r\n\r\n    if (!_notEnteredInitialized) {\r\n      _notEntered = true;\r\n      _notEnteredInitialized = true;\r\n    }\r\n  }\r\n\r\n  /*** Helper Functions ***/\r\n\r\n  /**\r\n   * @notice Returns true if the given cToken market has been deprecated\r\n   * @dev All borrows in a deprecated cToken market can be immediately liquidated\r\n   * @param cToken The market to check if deprecated\r\n   */\r\n  function isDeprecated(ICErc20 cToken) public view returns (bool) {\r\n    return\r\n      markets[address(cToken)].collateralFactorMantissa == 0 &&\r\n      borrowGuardianPaused[address(cToken)] == true &&\r\n      add_(add_(cToken.reserveFactorMantissa(), cToken.adminFeeMantissa()), cToken.ionicFeeMantissa()) == 1e18;\r\n  }\r\n\r\n  function asComptrollerExtension() internal view returns (ComptrollerExtensionInterface) {\r\n    return ComptrollerExtensionInterface(address(this));\r\n  }\r\n\r\n  function _getExtensionFunctions() external pure virtual override returns (bytes4[] memory functionSelectors) {\r\n    uint8 fnsCount = 36;\r\n\r\n    functionSelectors = new bytes4[](fnsCount);\r\n\r\n    functionSelectors[--fnsCount] = this.isDeprecated.selector;\r\n    functionSelectors[--fnsCount] = this._deployMarket.selector;\r\n    functionSelectors[--fnsCount] = this.getAssetsIn.selector;\r\n    functionSelectors[--fnsCount] = this.checkMembership.selector;\r\n    functionSelectors[--fnsCount] = this._setPriceOracle.selector;\r\n    functionSelectors[--fnsCount] = this._setCloseFactor.selector;\r\n    functionSelectors[--fnsCount] = this._setCollateralFactor.selector;\r\n    functionSelectors[--fnsCount] = this._setLiquidationIncentive.selector;\r\n    functionSelectors[--fnsCount] = this._setWhitelistEnforcement.selector;\r\n    functionSelectors[--fnsCount] = this._setWhitelistStatuses.selector;\r\n    functionSelectors[--fnsCount] = this._addRewardsDistributor.selector;\r\n    functionSelectors[--fnsCount] = this.getHypotheticalAccountLiquidity.selector;\r\n    functionSelectors[--fnsCount] = this.getMaxRedeemOrBorrow.selector;\r\n    functionSelectors[--fnsCount] = this.enterMarkets.selector;\r\n    functionSelectors[--fnsCount] = this.exitMarket.selector;\r\n    functionSelectors[--fnsCount] = this.mintAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.redeemAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.redeemVerify.selector;\r\n    functionSelectors[--fnsCount] = this.borrowAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.borrowWithinLimits.selector;\r\n    functionSelectors[--fnsCount] = this.repayBorrowAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.liquidateBorrowAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.seizeAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.transferAllowed.selector;\r\n    functionSelectors[--fnsCount] = this.mintVerify.selector;\r\n    functionSelectors[--fnsCount] = this.getAccountLiquidity.selector;\r\n    functionSelectors[--fnsCount] = this.liquidateCalculateSeizeTokens.selector;\r\n    functionSelectors[--fnsCount] = this._beforeNonReentrant.selector;\r\n    functionSelectors[--fnsCount] = this._afterNonReentrant.selector;\r\n    functionSelectors[--fnsCount] = this._becomeImplementation.selector;\r\n    functionSelectors[--fnsCount] = this.effectiveSupplyCaps.selector;\r\n    functionSelectors[--fnsCount] = this.effectiveBorrowCaps.selector;\r\n    functionSelectors[--fnsCount] = this.borrowVerify.selector;\r\n    functionSelectors[--fnsCount] = this.repayBorrowVerify.selector;\r\n    functionSelectors[--fnsCount] = this.seizeVerify.selector;\r\n    functionSelectors[--fnsCount] = this.transferVerify.selector;\r\n\r\n    require(fnsCount == 0, \"use the correct array length\");\r\n  }\r\n\r\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\r\n\r\n  /**\r\n   * @dev Called by cTokens before a non-reentrant function for pool-wide reentrancy prevention.\r\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\r\n   */\r\n  function _beforeNonReentrant() external override {\r\n    require(markets[msg.sender].isListed, \"!Comptroller:_beforeNonReentrant\");\r\n    require(_notEntered, \"!reentered\");\r\n    _notEntered = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Called by cTokens after a non-reentrant function for pool-wide reentrancy prevention.\r\n   * Prevents pool-wide/cross-asset reentrancy exploits like AMP on Cream.\r\n   */\r\n  function _afterNonReentrant() external override {\r\n    require(markets[msg.sender].isListed, \"!Comptroller:_afterNonReentrant\");\r\n    _notEntered = true; // get a gas-refund post-Istanbul\r\n  }\r\n}\r\n"
    },
    "contracts/compound/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { BasePriceOracle } from \"../oracles/BasePriceOracle.sol\";\r\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\r\nimport { DiamondExtension } from \"../ionic/DiamondExtension.sol\";\r\nimport { ComptrollerV4Storage } from \"../compound/ComptrollerStorage.sol\";\r\nimport { PrudentiaLib } from \"../adrastia/PrudentiaLib.sol\";\r\nimport { IHistoricalRates } from \"adrastia-periphery/rates/IHistoricalRates.sol\";\r\n\r\ninterface ComptrollerInterface {\r\n  function isDeprecated(ICErc20 cToken) external view returns (bool);\r\n\r\n  function _becomeImplementation() external;\r\n\r\n  function _deployMarket(\r\n    uint8 delegateType,\r\n    bytes memory constructorData,\r\n    bytes calldata becomeImplData,\r\n    uint256 collateralFactorMantissa\r\n  ) external returns (uint256);\r\n\r\n  function getAssetsIn(address account) external view returns (ICErc20[] memory);\r\n\r\n  function checkMembership(address account, ICErc20 cToken) external view returns (bool);\r\n\r\n  function _setPriceOracle(BasePriceOracle newOracle) external returns (uint256);\r\n\r\n  function _setCloseFactor(uint256 newCloseFactorMantissa) external returns (uint256);\r\n\r\n  function _setCollateralFactor(ICErc20 market, uint256 newCollateralFactorMantissa) external returns (uint256);\r\n\r\n  function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external returns (uint256);\r\n\r\n  function _setWhitelistEnforcement(bool enforce) external returns (uint256);\r\n\r\n  function _setWhitelistStatuses(address[] calldata _suppliers, bool[] calldata statuses) external returns (uint256);\r\n\r\n  function _addRewardsDistributor(address distributor) external returns (uint256);\r\n\r\n  function getHypotheticalAccountLiquidity(\r\n    address account,\r\n    address cTokenModify,\r\n    uint256 redeemTokens,\r\n    uint256 borrowAmount,\r\n    uint256 repayAmount\r\n  ) external view returns (uint256, uint256, uint256, uint256);\r\n\r\n  function getMaxRedeemOrBorrow(address account, ICErc20 cToken, bool isBorrow) external view returns (uint256);\r\n\r\n  /*** Assets You Are In ***/\r\n\r\n  function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n  function exitMarket(address cToken) external returns (uint256);\r\n\r\n  /*** Policy Hooks ***/\r\n\r\n  function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\r\n\r\n  function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external returns (uint256);\r\n\r\n  function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external;\r\n\r\n  function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external returns (uint256);\r\n\r\n  function borrowVerify(address cToken, address borrower) external;\r\n\r\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external view returns (uint256);\r\n\r\n  function repayBorrowAllowed(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external returns (uint256);\r\n\r\n  function repayBorrowVerify(\r\n    address cToken,\r\n    address payer,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external;\r\n\r\n  function liquidateBorrowAllowed(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 repayAmount\r\n  ) external returns (uint256);\r\n\r\n  function seizeAllowed(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external returns (uint256);\r\n  \r\n  function seizeVerify(\r\n    address cTokenCollateral,\r\n    address cTokenBorrowed,\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external;\r\n\r\n  function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external returns (uint256);\r\n  \r\n  function transferVerify(address cToken, address src, address dst, uint256 transferTokens) external;\r\n\r\n  function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external;\r\n\r\n  /*** Liquidity/Liquidation Calculations ***/\r\n\r\n  function getAccountLiquidity(\r\n    address account\r\n  ) external view returns (uint256 error, uint256 collateralValue, uint256 liquidity, uint256 shortfall);\r\n\r\n  function liquidateCalculateSeizeTokens(\r\n    address cTokenBorrowed,\r\n    address cTokenCollateral,\r\n    uint256 repayAmount\r\n  ) external view returns (uint256, uint256);\r\n\r\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\r\n\r\n  function _beforeNonReentrant() external;\r\n\r\n  function _afterNonReentrant() external;\r\n\r\n  /*** New supply and borrow cap view functions ***/\r\n\r\n  /**\r\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveSupplyCaps(address cToken) external view returns (uint256 supplyCap);\r\n\r\n  /**\r\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveBorrowCaps(address cToken) external view returns (uint256 borrowCap);\r\n}\r\n\r\ninterface ComptrollerStorageInterface {\r\n  function admin() external view returns (address);\r\n\r\n  function adminHasRights() external view returns (bool);\r\n\r\n  function ionicAdmin() external view returns (address);\r\n\r\n  function ionicAdminHasRights() external view returns (bool);\r\n\r\n  function pendingAdmin() external view returns (address);\r\n\r\n  function oracle() external view returns (BasePriceOracle);\r\n\r\n  function pauseGuardian() external view returns (address);\r\n\r\n  function closeFactorMantissa() external view returns (uint256);\r\n\r\n  function liquidationIncentiveMantissa() external view returns (uint256);\r\n\r\n  function isUserOfPool(address user) external view returns (bool);\r\n\r\n  function whitelist(address account) external view returns (bool);\r\n\r\n  function enforceWhitelist() external view returns (bool);\r\n\r\n  function borrowCapForCollateral(address borrowed, address collateral) external view returns (uint256);\r\n\r\n  function borrowingAgainstCollateralBlacklist(address borrowed, address collateral) external view returns (bool);\r\n\r\n  function suppliers(address account) external view returns (bool);\r\n\r\n  function cTokensByUnderlying(address) external view returns (address);\r\n\r\n  /**\r\n   * Gets the supply cap of a cToken in the units of the underlying asset.\r\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the supply cap. Instead, use\r\n   * `effectiveSupplyCaps` to get the correct supply cap.\r\n   * @param cToken The address of the cToken.\r\n   * @return The supply cap in the units of the underlying asset.\r\n   */\r\n  function supplyCaps(address cToken) external view returns (uint256);\r\n\r\n  /**\r\n   * Gets the borrow cap of a cToken in the units of the underlying asset.\r\n   * @dev WARNING: This function is misleading if Adrastia Prudentia is being used for the borrow cap. Instead, use\r\n   * `effectiveBorrowCaps` to get the correct borrow cap.\r\n   * @param cToken The address of the cToken.\r\n   * @return The borrow cap in the units of the underlying asset.\r\n   */\r\n  function borrowCaps(address cToken) external view returns (uint256);\r\n\r\n  function markets(address cToken) external view returns (bool, uint256);\r\n\r\n  function accountAssets(address, uint256) external view returns (address);\r\n\r\n  function borrowGuardianPaused(address cToken) external view returns (bool);\r\n\r\n  function mintGuardianPaused(address cToken) external view returns (bool);\r\n\r\n  function rewardsDistributors(uint256) external view returns (address);\r\n}\r\n\r\ninterface SFSRegister {\r\n  function register(address _recipient) external returns (uint256 tokenId);\r\n}\r\n\r\ninterface ComptrollerExtensionInterface {\r\n  function getWhitelistedSuppliersSupply(address cToken) external view returns (uint256 supplied);\r\n\r\n  function getWhitelistedBorrowersBorrows(address cToken) external view returns (uint256 borrowed);\r\n\r\n  function getAllMarkets() external view returns (ICErc20[] memory);\r\n\r\n  function getAllBorrowers() external view returns (address[] memory);\r\n\r\n  function getAllBorrowersCount() external view returns (uint256);\r\n\r\n  function getPaginatedBorrowers(\r\n    uint256 page,\r\n    uint256 pageSize\r\n  ) external view returns (uint256 _totalPages, address[] memory _pageOfBorrowers);\r\n\r\n  function getRewardsDistributors() external view returns (address[] memory);\r\n\r\n  function getAccruingFlywheels() external view returns (address[] memory);\r\n\r\n  function _supplyCapWhitelist(address cToken, address account, bool whitelisted) external;\r\n\r\n  function _setBorrowCapForCollateral(address cTokenBorrow, address cTokenCollateral, uint256 borrowCap) external;\r\n\r\n  function _setBorrowCapForCollateralWhitelist(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    address account,\r\n    bool whitelisted\r\n  ) external;\r\n\r\n  function isBorrowCapForCollateralWhitelisted(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    address account\r\n  ) external view returns (bool);\r\n\r\n  function _blacklistBorrowingAgainstCollateral(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    bool blacklisted\r\n  ) external;\r\n\r\n  function _blacklistBorrowingAgainstCollateralWhitelist(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    address account,\r\n    bool whitelisted\r\n  ) external;\r\n\r\n  function isBlacklistBorrowingAgainstCollateralWhitelisted(\r\n    address cTokenBorrow,\r\n    address cTokenCollateral,\r\n    address account\r\n  ) external view returns (bool);\r\n\r\n  function isSupplyCapWhitelisted(address cToken, address account) external view returns (bool);\r\n\r\n  function _borrowCapWhitelist(address cToken, address account, bool whitelisted) external;\r\n\r\n  function isBorrowCapWhitelisted(address cToken, address account) external view returns (bool);\r\n\r\n  function _removeFlywheel(address flywheelAddress) external returns (bool);\r\n\r\n  function getWhitelist() external view returns (address[] memory);\r\n\r\n  function addNonAccruingFlywheel(address flywheelAddress) external returns (bool);\r\n\r\n  function _setMarketSupplyCaps(ICErc20[] calldata cTokens, uint256[] calldata newSupplyCaps) external;\r\n\r\n  function _setMarketBorrowCaps(ICErc20[] calldata cTokens, uint256[] calldata newBorrowCaps) external;\r\n\r\n  function _setBorrowCapGuardian(address newBorrowCapGuardian) external;\r\n\r\n  function _setPauseGuardian(address newPauseGuardian) external returns (uint256);\r\n\r\n  function _setMintPaused(ICErc20 cToken, bool state) external returns (bool);\r\n\r\n  function _setBorrowPaused(ICErc20 cToken, bool state) external returns (bool);\r\n\r\n  function _setTransferPaused(bool state) external returns (bool);\r\n\r\n  function _setSeizePaused(bool state) external returns (bool);\r\n\r\n  function _unsupportMarket(ICErc20 cToken) external returns (uint256);\r\n\r\n  function getAssetAsCollateralValueCap(\r\n    ICErc20 collateral,\r\n    ICErc20 cTokenModify,\r\n    bool redeeming,\r\n    address account\r\n  ) external view returns (uint256);\r\n\r\n  function registerInSFS() external returns (uint256);\r\n}\r\n\r\ninterface ComptrollerPrudentiaCapsExtInterface {\r\n  /**\r\n   * @notice Retrieves Adrastia Prudentia borrow cap config from storage.\r\n   * @return The config.\r\n   */\r\n  function getBorrowCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\r\n\r\n  /**\r\n   * @notice Retrieves Adrastia Prudentia supply cap config from storage.\r\n   * @return The config.\r\n   */\r\n  function getSupplyCapConfig() external view returns (PrudentiaLib.PrudentiaConfig memory);\r\n\r\n  /**\r\n   * @notice Sets the Adrastia Prudentia supply cap config.\r\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native supply caps.\r\n   * @param newConfig The new config.\r\n   */\r\n  function _setSupplyCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\r\n\r\n  /**\r\n   * @notice Sets the Adrastia Prudentia supply cap config.\r\n   * @dev Specifying a zero address for the `controller` parameter will make the Comptroller use the native borrow caps.\r\n   * @param newConfig The new config.\r\n   */\r\n  function _setBorrowCapConfig(PrudentiaLib.PrudentiaConfig calldata newConfig) external;\r\n}\r\n\r\ninterface UnitrollerInterface {\r\n  function comptrollerImplementation() external view returns (address);\r\n\r\n  function _upgrade() external;\r\n\r\n  function _acceptAdmin() external returns (uint256);\r\n\r\n  function _setPendingAdmin(address newPendingAdmin) external returns (uint256);\r\n\r\n  function _toggleAdminRights(bool hasRights) external returns (uint256);\r\n}\r\n\r\ninterface IComptrollerExtension is ComptrollerExtensionInterface, ComptrollerStorageInterface {}\r\n\r\n//interface IComptrollerBase is ComptrollerInterface, ComptrollerStorageInterface {}\r\n\r\ninterface IonicComptroller is\r\n  ComptrollerInterface,\r\n  ComptrollerExtensionInterface,\r\n  UnitrollerInterface,\r\n  ComptrollerStorageInterface\r\n{\r\n\r\n}\r\n\r\nabstract contract ComptrollerBase is ComptrollerV4Storage {\r\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\r\n  bool public constant isComptroller = true;\r\n\r\n  /**\r\n   * @notice Gets the supply cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveSupplyCaps(address cToken) public view virtual returns (uint256 supplyCap) {\r\n    PrudentiaLib.PrudentiaConfig memory capConfig = supplyCapConfig;\r\n\r\n    // Check if we're using Adrastia Prudentia for the supply cap\r\n    if (capConfig.controller != address(0)) {\r\n      // We have a controller, so we're using Adrastia Prudentia\r\n\r\n      address underlyingToken = ICErc20(cToken).underlying();\r\n\r\n      // Get the supply cap from Adrastia Prudentia\r\n      supplyCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\r\n\r\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\r\n      // must scale the supply cap to get the correct amount\r\n\r\n      int256 scaleByDecimals = 18;\r\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\r\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\"decimals()\"));\r\n      if (success && data.length == 32) {\r\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\r\n      }\r\n\r\n      scaleByDecimals += capConfig.decimalShift;\r\n\r\n      if (scaleByDecimals >= 0) {\r\n        // We're scaling up, so we need to multiply\r\n        supplyCap *= 10 ** uint256(scaleByDecimals);\r\n      } else {\r\n        // We're scaling down, so we need to divide\r\n        supplyCap /= 10 ** uint256(-scaleByDecimals);\r\n      }\r\n    } else {\r\n      // We don't have a controller, so we're using the local supply cap\r\n\r\n      // Get the supply cap from the local supply cap\r\n      supplyCap = supplyCaps[cToken];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the borrow cap of a cToken in the units of the underlying asset.\r\n   * @param cToken The address of the cToken.\r\n   */\r\n  function effectiveBorrowCaps(address cToken) public view virtual returns (uint256 borrowCap) {\r\n    PrudentiaLib.PrudentiaConfig memory capConfig = borrowCapConfig;\r\n\r\n    // Check if we're using Adrastia Prudentia for the borrow cap\r\n    if (capConfig.controller != address(0)) {\r\n      // We have a controller, so we're using Adrastia Prudentia\r\n\r\n      address underlyingToken = ICErc20(cToken).underlying();\r\n\r\n      // Get the borrow cap from Adrastia Prudentia\r\n      borrowCap = IHistoricalRates(capConfig.controller).getRateAt(underlyingToken, capConfig.offset).current;\r\n\r\n      // Prudentia trims decimal points from amounts while our code requires the mantissa amount, so we\r\n      // must scale the supply cap to get the correct amount\r\n\r\n      int256 scaleByDecimals = 18;\r\n      // Not all ERC20s implement decimals(), so we use a staticcall and check the return data\r\n      (bool success, bytes memory data) = underlyingToken.staticcall(abi.encodeWithSignature(\"decimals()\"));\r\n      if (success && data.length == 32) {\r\n        scaleByDecimals = int256(uint256(abi.decode(data, (uint8))));\r\n      }\r\n\r\n      scaleByDecimals += capConfig.decimalShift;\r\n\r\n      if (scaleByDecimals >= 0) {\r\n        // We're scaling up, so we need to multiply\r\n        borrowCap *= 10 ** uint256(scaleByDecimals);\r\n      } else {\r\n        // We're scaling down, so we need to divide\r\n        borrowCap /= 10 ** uint256(-scaleByDecimals);\r\n      }\r\n    } else {\r\n      // We don't have a controller, so we're using the local borrow cap\r\n      borrowCap = borrowCaps[cToken];\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/compound/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./IFeeDistributor.sol\";\r\nimport \"../oracles/BasePriceOracle.sol\";\r\nimport { ICErc20 } from \"./CTokenInterfaces.sol\";\r\nimport { PrudentiaLib } from \"../adrastia/PrudentiaLib.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\ncontract UnitrollerAdminStorage {\r\n  /*\r\n   * Administrator for Ionic\r\n   */\r\n  address payable public ionicAdmin;\r\n\r\n  /**\r\n   * @notice Administrator for this contract\r\n   */\r\n  address public admin;\r\n\r\n  /**\r\n   * @notice Pending administrator for this contract\r\n   */\r\n  address public pendingAdmin;\r\n\r\n  /**\r\n   * @notice Whether or not the Ionic admin has admin rights\r\n   */\r\n  bool public ionicAdminHasRights = true;\r\n\r\n  /**\r\n   * @notice Whether or not the admin has admin rights\r\n   */\r\n  bool public adminHasRights = true;\r\n\r\n  /**\r\n   * @notice Returns a boolean indicating if the sender has admin rights\r\n   */\r\n  function hasAdminRights() internal view returns (bool) {\r\n    return (msg.sender == admin && adminHasRights) || (msg.sender == address(ionicAdmin) && ionicAdminHasRights);\r\n  }\r\n}\r\n\r\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\r\n  /**\r\n   * @notice Oracle which gives the price of any given asset\r\n   */\r\n  BasePriceOracle public oracle;\r\n\r\n  /**\r\n   * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\r\n   */\r\n  uint256 public closeFactorMantissa;\r\n\r\n  /**\r\n   * @notice Multiplier representing the discount on collateral that a liquidator receives\r\n   */\r\n  uint256 public liquidationIncentiveMantissa;\r\n\r\n  /*\r\n   * UNUSED AFTER UPGRADE: Max number of assets a single account can participate in (borrow or use as collateral)\r\n   */\r\n  uint256 internal maxAssets;\r\n\r\n  /**\r\n   * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\r\n   */\r\n  mapping(address => ICErc20[]) public accountAssets;\r\n}\r\n\r\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\r\n  struct Market {\r\n    // Whether or not this market is listed\r\n    bool isListed;\r\n    // Multiplier representing the most one can borrow against their collateral in this market.\r\n    // For instance, 0.9 to allow borrowing 90% of collateral value.\r\n    // Must be between 0 and 1, and stored as a mantissa.\r\n    uint256 collateralFactorMantissa;\r\n    // Per-market mapping of \"accounts in this asset\"\r\n    mapping(address => bool) accountMembership;\r\n  }\r\n\r\n  /**\r\n   * @notice Official mapping of cTokens -> Market metadata\r\n   * @dev Used e.g. to determine if a market is supported\r\n   */\r\n  mapping(address => Market) public markets;\r\n\r\n  /// @notice A list of all markets\r\n  ICErc20[] public allMarkets;\r\n\r\n  /**\r\n   * @dev Maps borrowers to booleans indicating if they have entered any markets\r\n   */\r\n  mapping(address => bool) internal borrowers;\r\n\r\n  /// @notice A list of all borrowers who have entered markets\r\n  address[] public allBorrowers;\r\n\r\n  // Indexes of borrower account addresses in the `allBorrowers` array\r\n  mapping(address => uint256) internal borrowerIndexes;\r\n\r\n  /**\r\n   * @dev Maps suppliers to booleans indicating if they have ever supplied to any markets\r\n   */\r\n  mapping(address => bool) public suppliers;\r\n\r\n  /// @notice All cTokens addresses mapped by their underlying token addresses\r\n  mapping(address => ICErc20) public cTokensByUnderlying;\r\n\r\n  /// @notice Whether or not the supplier whitelist is enforced\r\n  bool public enforceWhitelist;\r\n\r\n  /// @notice Maps addresses to booleans indicating if they are allowed to supply assets (i.e., mint cTokens)\r\n  mapping(address => bool) public whitelist;\r\n\r\n  /// @notice An array of all whitelisted accounts\r\n  address[] public whitelistArray;\r\n\r\n  // Indexes of account addresses in the `whitelistArray` array\r\n  mapping(address => uint256) internal whitelistIndexes;\r\n\r\n  /**\r\n   * @notice The Pause Guardian can pause certain actions as a safety mechanism.\r\n   *  Actions which allow users to remove their own assets cannot be paused.\r\n   *  Liquidation / seizing / transfer can only be paused globally, not by market.\r\n   */\r\n  address public pauseGuardian;\r\n  bool public _mintGuardianPaused;\r\n  bool public _borrowGuardianPaused;\r\n  bool public transferGuardianPaused;\r\n  bool public seizeGuardianPaused;\r\n  mapping(address => bool) public mintGuardianPaused;\r\n  mapping(address => bool) public borrowGuardianPaused;\r\n}\r\n\r\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\r\n  /// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\r\n  /// @dev If Adrastia Prudentia is enabled, the values the borrow cap guardian sets are ignored.\r\n  address public borrowCapGuardian;\r\n\r\n  /// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\r\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveBorrowCaps` instead.\r\n  mapping(address => uint256) public borrowCaps;\r\n\r\n  /// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\r\n  /// @dev If Adrastia Prudentia is enabled, this value is ignored. Use `effectiveSupplyCaps` instead.\r\n  mapping(address => uint256) public supplyCaps;\r\n\r\n  /// @notice RewardsDistributor contracts to notify of flywheel changes.\r\n  address[] public rewardsDistributors;\r\n\r\n  /// @dev Guard variable for pool-wide/cross-asset re-entrancy checks\r\n  bool internal _notEntered;\r\n\r\n  /// @dev Whether or not _notEntered has been initialized\r\n  bool internal _notEnteredInitialized;\r\n\r\n  /// @notice RewardsDistributor to list for claiming, but not to notify of flywheel changes.\r\n  address[] public nonAccruingRewardsDistributors;\r\n\r\n  /// @dev cap for each user's borrows against specific assets - denominated in the borrowed asset\r\n  mapping(address => mapping(address => uint256)) public borrowCapForCollateral;\r\n\r\n  /// @dev blacklist to disallow the borrowing of an asset against specific collateral\r\n  mapping(address => mapping(address => bool)) public borrowingAgainstCollateralBlacklist;\r\n\r\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrowing against specific collateral cap\r\n  mapping(address => mapping(address => EnumerableSet.AddressSet)) internal borrowCapForCollateralWhitelist;\r\n\r\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\r\n  mapping(address => mapping(address => EnumerableSet.AddressSet))\r\n    internal borrowingAgainstCollateralBlacklistWhitelist;\r\n\r\n  /// @dev set of whitelisted accounts that are allowed to bypass the supply cap\r\n  mapping(address => EnumerableSet.AddressSet) internal supplyCapWhitelist;\r\n\r\n  /// @dev set of whitelisted accounts that are allowed to bypass the borrow cap\r\n  mapping(address => EnumerableSet.AddressSet) internal borrowCapWhitelist;\r\n}\r\n\r\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\r\n  /// @dev Adrastia Prudentia config for controlling borrow caps.\r\n  PrudentiaLib.PrudentiaConfig internal borrowCapConfig;\r\n\r\n  /// @dev Adrastia Prudentia config for controlling supply caps.\r\n  PrudentiaLib.PrudentiaConfig internal supplyCapConfig;\r\n}\r\n"
    },
    "contracts/compound/CTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { IonicComptroller } from \"./ComptrollerInterface.sol\";\r\nimport { InterestRateModel } from \"./InterestRateModel.sol\";\r\nimport { ComptrollerV3Storage } from \"./ComptrollerStorage.sol\";\r\nimport { AddressesProvider } from \"../ionic/AddressesProvider.sol\";\r\n\r\nabstract contract CTokenAdminStorage {\r\n  /*\r\n   * Administrator for Ionic\r\n   */\r\n  address payable public ionicAdmin;\r\n}\r\n\r\nabstract contract CErc20Storage is CTokenAdminStorage {\r\n  /**\r\n   * @dev Guard variable for re-entrancy checks\r\n   */\r\n  bool internal _notEntered;\r\n\r\n  /**\r\n   * @notice EIP-20 token name for this token\r\n   */\r\n  string public name;\r\n\r\n  /**\r\n   * @notice EIP-20 token symbol for this token\r\n   */\r\n  string public symbol;\r\n\r\n  /**\r\n   * @notice EIP-20 token decimals for this token\r\n   */\r\n  uint8 public decimals;\r\n\r\n  /*\r\n   * Maximum borrow rate that can ever be applied (.0005% / block)\r\n   */\r\n  uint256 internal constant borrowRateMaxMantissa = 0.0005e16;\r\n\r\n  /*\r\n   * Maximum fraction of interest that can be set aside for reserves + fees\r\n   */\r\n  uint256 internal constant reserveFactorPlusFeesMaxMantissa = 1e18;\r\n\r\n  /**\r\n   * @notice Contract which oversees inter-cToken operations\r\n   */\r\n  IonicComptroller public comptroller;\r\n\r\n  /**\r\n   * @notice Model which tells what the current interest rate should be\r\n   */\r\n  InterestRateModel public interestRateModel;\r\n\r\n  /*\r\n   * Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\r\n   */\r\n  uint256 internal initialExchangeRateMantissa;\r\n\r\n  /**\r\n   * @notice Fraction of interest currently set aside for admin fees\r\n   */\r\n  uint256 public adminFeeMantissa;\r\n\r\n  /**\r\n   * @notice Fraction of interest currently set aside for Ionic fees\r\n   */\r\n  uint256 public ionicFeeMantissa;\r\n\r\n  /**\r\n   * @notice Fraction of interest currently set aside for reserves\r\n   */\r\n  uint256 public reserveFactorMantissa;\r\n\r\n  /**\r\n   * @notice Block number that interest was last accrued at\r\n   */\r\n  uint256 public accrualBlockNumber;\r\n\r\n  /**\r\n   * @notice Accumulator of the total earned interest rate since the opening of the market\r\n   */\r\n  uint256 public borrowIndex;\r\n\r\n  /**\r\n   * @notice Total amount of outstanding borrows of the underlying in this market\r\n   */\r\n  uint256 public totalBorrows;\r\n\r\n  /**\r\n   * @notice Total amount of reserves of the underlying held in this market\r\n   */\r\n  uint256 public totalReserves;\r\n\r\n  /**\r\n   * @notice Total amount of admin fees of the underlying held in this market\r\n   */\r\n  uint256 public totalAdminFees;\r\n\r\n  /**\r\n   * @notice Total amount of Ionic fees of the underlying held in this market\r\n   */\r\n  uint256 public totalIonicFees;\r\n\r\n  /**\r\n   * @notice Total number of tokens in circulation\r\n   */\r\n  uint256 public totalSupply;\r\n\r\n  /*\r\n   * Official record of token balances for each account\r\n   */\r\n  mapping(address => uint256) internal accountTokens;\r\n\r\n  /*\r\n   * Approved token transfer amounts on behalf of others\r\n   */\r\n  mapping(address => mapping(address => uint256)) internal transferAllowances;\r\n\r\n  /**\r\n   * @notice Container for borrow balance information\r\n   * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\r\n   * @member interestIndex Global borrowIndex as of the most recent balance-changing action\r\n   */\r\n  struct BorrowSnapshot {\r\n    uint256 principal;\r\n    uint256 interestIndex;\r\n  }\r\n\r\n  /*\r\n   * Mapping of account addresses to outstanding borrow balances\r\n   */\r\n  mapping(address => BorrowSnapshot) internal accountBorrows;\r\n\r\n  /*\r\n   * Share of seized collateral that is added to reserves\r\n   */\r\n  uint256 public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\r\n\r\n  /*\r\n   * Share of seized collateral taken as fees\r\n   */\r\n  uint256 public constant feeSeizeShareMantissa = 1e17; //10%\r\n\r\n  /**\r\n   * @notice Underlying asset for this CToken\r\n   */\r\n  address public underlying;\r\n\r\n  /**\r\n   * @notice Addresses Provider\r\n   */\r\n  AddressesProvider public ap;\r\n}\r\n\r\nabstract contract CTokenBaseEvents {\r\n  /* ERC20 */\r\n\r\n  /**\r\n   * @notice EIP20 Transfer event\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n  /*** Admin Events ***/\r\n\r\n  /**\r\n   * @notice Event emitted when interestRateModel is changed\r\n   */\r\n  event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\r\n\r\n  /**\r\n   * @notice Event emitted when the reserve factor is changed\r\n   */\r\n  event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\r\n\r\n  /**\r\n   * @notice Event emitted when the admin fee is changed\r\n   */\r\n  event NewAdminFee(uint256 oldAdminFeeMantissa, uint256 newAdminFeeMantissa);\r\n\r\n  /**\r\n   * @notice Event emitted when the Ionic fee is changed\r\n   */\r\n  event NewIonicFee(uint256 oldIonicFeeMantissa, uint256 newIonicFeeMantissa);\r\n\r\n  /**\r\n   * @notice EIP20 Approval event\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n  /**\r\n   * @notice Event emitted when interest is accrued\r\n   */\r\n  event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\r\n}\r\n\r\nabstract contract CTokenFirstExtensionEvents is CTokenBaseEvents {\r\n  event Flash(address receiver, uint256 amount);\r\n}\r\n\r\nabstract contract CTokenSecondExtensionEvents is CTokenBaseEvents {\r\n  /*** Market Events ***/\r\n\r\n  /**\r\n   * @notice Event emitted when tokens are minted\r\n   */\r\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n\r\n  /**\r\n   * @notice Event emitted when tokens are redeemed\r\n   */\r\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n  /**\r\n   * @notice Event emitted when underlying is borrowed\r\n   */\r\n  event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\r\n\r\n  /**\r\n   * @notice Event emitted when a borrow is repaid\r\n   */\r\n  event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\r\n\r\n  /**\r\n   * @notice Event emitted when a borrow is liquidated\r\n   */\r\n  event LiquidateBorrow(\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 repayAmount,\r\n    address cTokenCollateral,\r\n    uint256 seizeTokens\r\n  );\r\n\r\n  /**\r\n   * @notice Event emitted when the reserves are added\r\n   */\r\n  event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\r\n\r\n  /**\r\n   * @notice Event emitted when the reserves are reduced\r\n   */\r\n  event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\r\n}\r\n\r\ninterface CTokenFirstExtensionInterface {\r\n  /*** User Interface ***/\r\n\r\n  function transfer(address dst, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address src,\r\n    address dst,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  function _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\r\n\r\n  function _setAdminFee(uint256 newAdminFeeMantissa) external returns (uint256);\r\n\r\n  function _setInterestRateModel(InterestRateModel newInterestRateModel) external returns (uint256);\r\n\r\n  function getAccountSnapshot(address account)\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function borrowRatePerBlock() external view returns (uint256);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256);\r\n\r\n  function exchangeRateCurrent() external view returns (uint256);\r\n\r\n  function accrueInterest() external returns (uint256);\r\n\r\n  function totalBorrowsCurrent() external view returns (uint256);\r\n\r\n  function borrowBalanceCurrent(address account) external view returns (uint256);\r\n\r\n  function getTotalUnderlyingSupplied() external view returns (uint256);\r\n\r\n  function balanceOfUnderlying(address owner) external view returns (uint256);\r\n\r\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\r\n\r\n  function flash(uint256 amount, bytes calldata data) external;\r\n\r\n  function supplyRatePerBlockAfterDeposit(uint256 mintAmount) external view returns (uint256);\r\n\r\n  function supplyRatePerBlockAfterWithdraw(uint256 withdrawAmount) external view returns (uint256);\r\n\r\n  function borrowRatePerBlockAfterBorrow(uint256 borrowAmount) external view returns (uint256);\r\n\r\n  function registerInSFS() external returns (uint256);\r\n}\r\n\r\ninterface CTokenSecondExtensionInterface {\r\n  function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n  function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n  function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n  function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n  function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n  function liquidateBorrow(\r\n    address borrower,\r\n    uint256 repayAmount,\r\n    address cTokenCollateral\r\n  ) external returns (uint256);\r\n\r\n  function getCash() external view returns (uint256);\r\n\r\n  function seize(\r\n    address liquidator,\r\n    address borrower,\r\n    uint256 seizeTokens\r\n  ) external returns (uint256);\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  function _withdrawAdminFees(uint256 withdrawAmount) external returns (uint256);\r\n\r\n  function _withdrawIonicFees(uint256 withdrawAmount) external returns (uint256);\r\n\r\n  function selfTransferOut(address to, uint256 amount) external;\r\n\r\n  function selfTransferIn(address from, uint256 amount) external returns (uint256);\r\n}\r\n\r\ninterface CDelegatorInterface {\r\n  function implementation() external view returns (address);\r\n\r\n  /**\r\n   * @notice Called by the admin to update the implementation of the delegator\r\n   * @param implementation_ The address of the new implementation for delegation\r\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\r\n   */\r\n  function _setImplementationSafe(address implementation_, bytes calldata becomeImplementationData) external;\r\n\r\n  /**\r\n   * @dev upgrades the implementation if necessary\r\n   */\r\n  function _upgrade() external;\r\n}\r\n\r\ninterface CDelegateInterface {\r\n  /**\r\n   * @notice Called by the delegator on a delegate to initialize it for duty\r\n   * @dev Should revert if any issues arise which make it unfit for delegation\r\n   * @param data The encoded bytes data for any initialization\r\n   */\r\n  function _becomeImplementation(bytes calldata data) external;\r\n\r\n  function delegateType() external pure returns (uint8);\r\n\r\n  function contractType() external pure returns (string memory);\r\n}\r\n\r\nabstract contract CErc20AdminBase is CErc20Storage {\r\n  /**\r\n   * @notice Returns a boolean indicating if the sender has admin rights\r\n   */\r\n  function hasAdminRights() internal view returns (bool) {\r\n    ComptrollerV3Storage comptrollerStorage = ComptrollerV3Storage(address(comptroller));\r\n    return\r\n      (msg.sender == comptrollerStorage.admin() && comptrollerStorage.adminHasRights()) ||\r\n      (msg.sender == address(ionicAdmin) && comptrollerStorage.ionicAdminHasRights());\r\n  }\r\n}\r\n\r\nabstract contract CErc20FirstExtensionBase is\r\n  CErc20AdminBase,\r\n  CTokenFirstExtensionEvents,\r\n  CTokenFirstExtensionInterface\r\n{}\r\n\r\nabstract contract CTokenSecondExtensionBase is\r\n  CErc20AdminBase,\r\n  CTokenSecondExtensionEvents,\r\n  CTokenSecondExtensionInterface,\r\n  CDelegateInterface\r\n{}\r\n\r\nabstract contract CErc20DelegatorBase is CErc20AdminBase, CTokenSecondExtensionEvents, CDelegatorInterface {}\r\n\r\ninterface CErc20StorageInterface {\r\n  function admin() external view returns (address);\r\n\r\n  function adminHasRights() external view returns (bool);\r\n\r\n  function ionicAdmin() external view returns (address);\r\n\r\n  function ionicAdminHasRights() external view returns (bool);\r\n\r\n  function comptroller() external view returns (IonicComptroller);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function adminFeeMantissa() external view returns (uint256);\r\n\r\n  function ionicFeeMantissa() external view returns (uint256);\r\n\r\n  function reserveFactorMantissa() external view returns (uint256);\r\n\r\n  function protocolSeizeShareMantissa() external view returns (uint256);\r\n\r\n  function feeSeizeShareMantissa() external view returns (uint256);\r\n\r\n  function totalReserves() external view returns (uint256);\r\n\r\n  function totalAdminFees() external view returns (uint256);\r\n\r\n  function totalIonicFees() external view returns (uint256);\r\n\r\n  function totalBorrows() external view returns (uint256);\r\n\r\n  function accrualBlockNumber() external view returns (uint256);\r\n\r\n  function underlying() external view returns (address);\r\n\r\n  function borrowIndex() external view returns (uint256);\r\n\r\n  function interestRateModel() external view returns (address);\r\n}\r\n\r\ninterface CErc20PluginStorageInterface is CErc20StorageInterface {\r\n  function plugin() external view returns (address);\r\n}\r\n\r\ninterface CErc20PluginRewardsInterface is CErc20PluginStorageInterface {\r\n  function approve(address, address) external;\r\n}\r\n\r\ninterface ICErc20 is\r\n  CErc20StorageInterface,\r\n  CTokenSecondExtensionInterface,\r\n  CTokenFirstExtensionInterface,\r\n  CDelegatorInterface,\r\n  CDelegateInterface\r\n{}\r\n\r\ninterface ICErc20Plugin is CErc20PluginStorageInterface, ICErc20 {\r\n  function _updatePlugin(address _plugin) external;\r\n}\r\n\r\ninterface ICErc20PluginRewards is CErc20PluginRewardsInterface, ICErc20 {}\r\n"
    },
    "contracts/compound/ErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\ncontract ComptrollerErrorReporter {\r\n  enum Error {\r\n    NO_ERROR,\r\n    UNAUTHORIZED,\r\n    COMPTROLLER_MISMATCH,\r\n    INSUFFICIENT_SHORTFALL,\r\n    INSUFFICIENT_LIQUIDITY,\r\n    INVALID_CLOSE_FACTOR,\r\n    INVALID_COLLATERAL_FACTOR,\r\n    INVALID_LIQUIDATION_INCENTIVE,\r\n    MARKET_NOT_LISTED,\r\n    MARKET_ALREADY_LISTED,\r\n    MATH_ERROR,\r\n    NONZERO_BORROW_BALANCE,\r\n    PRICE_ERROR,\r\n    REJECTION,\r\n    SNAPSHOT_ERROR,\r\n    TOO_MANY_ASSETS,\r\n    TOO_MUCH_REPAY,\r\n    SUPPLIER_NOT_WHITELISTED,\r\n    BORROW_BELOW_MIN,\r\n    SUPPLY_ABOVE_MAX,\r\n    NONZERO_TOTAL_SUPPLY\r\n  }\r\n\r\n  enum FailureInfo {\r\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n    ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\r\n    ADD_REWARDS_DISTRIBUTOR_OWNER_CHECK,\r\n    EXIT_MARKET_BALANCE_OWED,\r\n    EXIT_MARKET_REJECTION,\r\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\r\n    TOGGLE_AUTO_IMPLEMENTATIONS_ENABLED_OWNER_CHECK,\r\n    SET_CLOSE_FACTOR_OWNER_CHECK,\r\n    SET_CLOSE_FACTOR_VALIDATION,\r\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n    SET_COLLATERAL_FACTOR_NO_EXISTS,\r\n    SET_COLLATERAL_FACTOR_VALIDATION,\r\n    SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\r\n    SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\r\n    SET_LIQUIDATION_INCENTIVE_VALIDATION,\r\n    SET_PENDING_ADMIN_OWNER_CHECK,\r\n    SET_PENDING_IMPLEMENTATION_CONTRACT_CHECK,\r\n    SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\r\n    SET_PRICE_ORACLE_OWNER_CHECK,\r\n    SET_WHITELIST_ENFORCEMENT_OWNER_CHECK,\r\n    SET_WHITELIST_STATUS_OWNER_CHECK,\r\n    SUPPORT_MARKET_EXISTS,\r\n    SUPPORT_MARKET_OWNER_CHECK,\r\n    SET_PAUSE_GUARDIAN_OWNER_CHECK,\r\n    UNSUPPORT_MARKET_OWNER_CHECK,\r\n    UNSUPPORT_MARKET_DOES_NOT_EXIST,\r\n    UNSUPPORT_MARKET_IN_USE\r\n  }\r\n\r\n  /**\r\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n   **/\r\n  event Failure(uint256 error, uint256 info, uint256 detail);\r\n\r\n  /**\r\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n   */\r\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\r\n    emit Failure(uint256(err), uint256(info), 0);\r\n\r\n    return uint256(err);\r\n  }\r\n\r\n  /**\r\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n   */\r\n  function failOpaque(\r\n    Error err,\r\n    FailureInfo info,\r\n    uint256 opaqueError\r\n  ) internal returns (uint256) {\r\n    emit Failure(uint256(err), uint256(info), opaqueError);\r\n\r\n    return uint256(err);\r\n  }\r\n}\r\n\r\ncontract TokenErrorReporter {\r\n  enum Error {\r\n    NO_ERROR,\r\n    UNAUTHORIZED,\r\n    BAD_INPUT,\r\n    COMPTROLLER_REJECTION,\r\n    COMPTROLLER_CALCULATION_ERROR,\r\n    INTEREST_RATE_MODEL_ERROR,\r\n    INVALID_ACCOUNT_PAIR,\r\n    INVALID_CLOSE_AMOUNT_REQUESTED,\r\n    INVALID_COLLATERAL_FACTOR,\r\n    MATH_ERROR,\r\n    MARKET_NOT_FRESH,\r\n    MARKET_NOT_LISTED,\r\n    TOKEN_INSUFFICIENT_ALLOWANCE,\r\n    TOKEN_INSUFFICIENT_BALANCE,\r\n    TOKEN_INSUFFICIENT_CASH,\r\n    TOKEN_TRANSFER_IN_FAILED,\r\n    TOKEN_TRANSFER_OUT_FAILED,\r\n    UTILIZATION_ABOVE_MAX\r\n  }\r\n\r\n  /*\r\n   * Note: FailureInfo (but not Error) is kept in alphabetical order\r\n   *       This is because FailureInfo grows significantly faster, and\r\n   *       the order of Error has some meaning, while the order of FailureInfo\r\n   *       is entirely arbitrary.\r\n   */\r\n  enum FailureInfo {\r\n    ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\r\n    ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_TOTAL_IONIC_FEES_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_NEW_TOTAL_ADMIN_FEES_CALCULATION_FAILED,\r\n    ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\r\n    BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n    BORROW_ACCRUE_INTEREST_FAILED,\r\n    BORROW_CASH_NOT_AVAILABLE,\r\n    BORROW_FRESHNESS_CHECK,\r\n    BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n    BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\r\n    BORROW_MARKET_NOT_LISTED,\r\n    BORROW_COMPTROLLER_REJECTION,\r\n    LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\r\n    LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\r\n    LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\r\n    LIQUIDATE_COMPTROLLER_REJECTION,\r\n    LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\r\n    LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\r\n    LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\r\n    LIQUIDATE_FRESHNESS_CHECK,\r\n    LIQUIDATE_LIQUIDATOR_IS_BORROWER,\r\n    LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\r\n    LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\r\n    LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\r\n    LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\r\n    LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\r\n    LIQUIDATE_SEIZE_TOO_MUCH,\r\n    MINT_ACCRUE_INTEREST_FAILED,\r\n    MINT_COMPTROLLER_REJECTION,\r\n    MINT_EXCHANGE_CALCULATION_FAILED,\r\n    MINT_EXCHANGE_RATE_READ_FAILED,\r\n    MINT_FRESHNESS_CHECK,\r\n    MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\r\n    MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n    MINT_TRANSFER_IN_FAILED,\r\n    MINT_TRANSFER_IN_NOT_POSSIBLE,\r\n    NEW_UTILIZATION_RATE_ABOVE_MAX,\r\n    REDEEM_ACCRUE_INTEREST_FAILED,\r\n    REDEEM_COMPTROLLER_REJECTION,\r\n    REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\r\n    REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\r\n    REDEEM_EXCHANGE_RATE_READ_FAILED,\r\n    REDEEM_FRESHNESS_CHECK,\r\n    REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\r\n    REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\r\n    REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\r\n    WITHDRAW_IONIC_FEES_ACCRUE_INTEREST_FAILED,\r\n    WITHDRAW_IONIC_FEES_CASH_NOT_AVAILABLE,\r\n    WITHDRAW_IONIC_FEES_FRESH_CHECK,\r\n    WITHDRAW_IONIC_FEES_VALIDATION,\r\n    WITHDRAW_ADMIN_FEES_ACCRUE_INTEREST_FAILED,\r\n    WITHDRAW_ADMIN_FEES_CASH_NOT_AVAILABLE,\r\n    WITHDRAW_ADMIN_FEES_FRESH_CHECK,\r\n    WITHDRAW_ADMIN_FEES_VALIDATION,\r\n    REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\r\n    REDUCE_RESERVES_ADMIN_CHECK,\r\n    REDUCE_RESERVES_CASH_NOT_AVAILABLE,\r\n    REDUCE_RESERVES_FRESH_CHECK,\r\n    REDUCE_RESERVES_VALIDATION,\r\n    REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\r\n    REPAY_BORROW_ACCRUE_INTEREST_FAILED,\r\n    REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\r\n    REPAY_BORROW_COMPTROLLER_REJECTION,\r\n    REPAY_BORROW_FRESHNESS_CHECK,\r\n    REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\r\n    REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\r\n    REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\r\n    SET_COLLATERAL_FACTOR_OWNER_CHECK,\r\n    SET_COLLATERAL_FACTOR_VALIDATION,\r\n    SET_COMPTROLLER_OWNER_CHECK,\r\n    SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\r\n    SET_INTEREST_RATE_MODEL_FRESH_CHECK,\r\n    SET_INTEREST_RATE_MODEL_OWNER_CHECK,\r\n    TOGGLE_ADMIN_RIGHTS_OWNER_CHECK,\r\n    SET_PENDING_ADMIN_OWNER_CHECK,\r\n    SET_ADMIN_FEE_ACCRUE_INTEREST_FAILED,\r\n    SET_ADMIN_FEE_ADMIN_CHECK,\r\n    SET_ADMIN_FEE_FRESH_CHECK,\r\n    SET_ADMIN_FEE_BOUNDS_CHECK,\r\n    SET_IONIC_FEE_ACCRUE_INTEREST_FAILED,\r\n    SET_IONIC_FEE_FRESH_CHECK,\r\n    SET_IONIC_FEE_BOUNDS_CHECK,\r\n    SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\r\n    SET_RESERVE_FACTOR_ADMIN_CHECK,\r\n    SET_RESERVE_FACTOR_FRESH_CHECK,\r\n    SET_RESERVE_FACTOR_BOUNDS_CHECK,\r\n    TRANSFER_COMPTROLLER_REJECTION,\r\n    TRANSFER_NOT_ALLOWED,\r\n    TRANSFER_NOT_ENOUGH,\r\n    TRANSFER_TOO_MUCH,\r\n    ADD_RESERVES_ACCRUE_INTEREST_FAILED,\r\n    ADD_RESERVES_FRESH_CHECK,\r\n    ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\r\n  }\r\n\r\n  /**\r\n   * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\r\n   * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\r\n   **/\r\n  event Failure(uint256 error, uint256 info, uint256 detail);\r\n\r\n  /**\r\n   * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\r\n   */\r\n  function fail(Error err, FailureInfo info) internal returns (uint256) {\r\n    emit Failure(uint256(err), uint256(info), 0);\r\n\r\n    return uint256(err);\r\n  }\r\n\r\n  /**\r\n   * @dev use this when reporting an opaque error from an upgradeable collaborator contract\r\n   */\r\n  function failOpaque(\r\n    Error err,\r\n    FailureInfo info,\r\n    uint256 opaqueError\r\n  ) internal returns (uint256) {\r\n    emit Failure(uint256(err), uint256(info), opaqueError);\r\n\r\n    return err == Error.COMPTROLLER_REJECTION ? 1000 + opaqueError : uint256(err);\r\n  }\r\n}\r\n"
    },
    "contracts/compound/Exponential.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./CarefulMath.sol\";\r\nimport \"./ExponentialNoError.sol\";\r\n\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author Compound\r\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract Exponential is CarefulMath, ExponentialNoError {\r\n  /**\r\n   * @dev Creates an exponential from numerator and denominator values.\r\n   *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\r\n   *            or if `denom` is zero.\r\n   */\r\n  function getExp(uint256 num, uint256 denom) internal pure returns (MathError, Exp memory) {\r\n    (MathError err0, uint256 scaledNumerator) = mulUInt(num, expScale);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    (MathError err1, uint256 rational) = divUInt(scaledNumerator, denom);\r\n    if (err1 != MathError.NO_ERROR) {\r\n      return (err1, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    return (MathError.NO_ERROR, Exp({ mantissa: rational }));\r\n  }\r\n\r\n  /**\r\n   * @dev Adds two exponentials, returning a new exponential.\r\n   */\r\n  function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\r\n    (MathError error, uint256 result) = addUInt(a.mantissa, b.mantissa);\r\n\r\n    return (error, Exp({ mantissa: result }));\r\n  }\r\n\r\n  /**\r\n   * @dev Subtracts two exponentials, returning a new exponential.\r\n   */\r\n  function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\r\n    (MathError error, uint256 result) = subUInt(a.mantissa, b.mantissa);\r\n\r\n    return (error, Exp({ mantissa: result }));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n   */\r\n  function mulScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\r\n    (MathError err0, uint256 scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n   */\r\n  function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (MathError, uint256) {\r\n    (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n    if (err != MathError.NO_ERROR) {\r\n      return (err, 0);\r\n    }\r\n\r\n    return (MathError.NO_ERROR, truncate(product));\r\n  }\r\n\r\n  /**\r\n   * @dev Divide an Exp by a scalar, returning a new Exp.\r\n   */\r\n  function divScalar(Exp memory a, uint256 scalar) internal pure returns (MathError, Exp memory) {\r\n    (MathError err0, uint256 descaledMantissa) = divUInt(a.mantissa, scalar);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\r\n  }\r\n\r\n  /**\r\n   * @dev Divide a scalar by an Exp, returning a new Exp.\r\n   */\r\n  function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\r\n    /*\r\n          We are doing this as:\r\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\r\n\r\n          How it works:\r\n          Exp = a / b;\r\n          Scalar = s;\r\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\r\n        */\r\n    (MathError err0, uint256 numerator) = mulUInt(expScale, scalar);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n    return getExp(numerator, divisor.mantissa);\r\n  }\r\n\r\n  /**\r\n   * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\r\n   */\r\n  function divScalarByExpTruncate(uint256 scalar, Exp memory divisor) internal pure returns (MathError, uint256) {\r\n    (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\r\n    if (err != MathError.NO_ERROR) {\r\n      return (err, 0);\r\n    }\r\n\r\n    return (MathError.NO_ERROR, truncate(fraction));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two exponentials, returning a new exponential.\r\n   */\r\n  function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\r\n    (MathError err0, uint256 doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\r\n    if (err0 != MathError.NO_ERROR) {\r\n      return (err0, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    // We add half the scale before dividing so that we get rounding instead of truncation.\r\n    //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\r\n    // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\r\n    (MathError err1, uint256 doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\r\n    if (err1 != MathError.NO_ERROR) {\r\n      return (err1, Exp({ mantissa: 0 }));\r\n    }\r\n\r\n    (MathError err2, uint256 product) = divUInt(doubleScaledProductWithHalfScale, expScale);\r\n    // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\r\n    assert(err2 == MathError.NO_ERROR);\r\n\r\n    return (MathError.NO_ERROR, Exp({ mantissa: product }));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\r\n   */\r\n  function mulExp(uint256 a, uint256 b) internal pure returns (MathError, Exp memory) {\r\n    return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies three exponentials, returning a new exponential.\r\n   */\r\n  function mulExp3(\r\n    Exp memory a,\r\n    Exp memory b,\r\n    Exp memory c\r\n  ) internal pure returns (MathError, Exp memory) {\r\n    (MathError err, Exp memory ab) = mulExp(a, b);\r\n    if (err != MathError.NO_ERROR) {\r\n      return (err, ab);\r\n    }\r\n    return mulExp(ab, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two exponentials, returning a new exponential.\r\n   *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\r\n   *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\r\n   */\r\n  function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\r\n    return getExp(a.mantissa, b.mantissa);\r\n  }\r\n}\r\n"
    },
    "contracts/compound/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title Exponential module for storing fixed-precision decimals\r\n * @author Compound\r\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\r\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\r\n *         `Exp({mantissa: 5100000000000000000})`.\r\n */\r\ncontract ExponentialNoError {\r\n  uint256 constant expScale = 1e18;\r\n  uint256 constant doubleScale = 1e36;\r\n  uint256 constant halfExpScale = expScale / 2;\r\n  uint256 constant mantissaOne = expScale;\r\n\r\n  struct Exp {\r\n    uint256 mantissa;\r\n  }\r\n\r\n  struct Double {\r\n    uint256 mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Truncates the given exp to a whole number value.\r\n   *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n   */\r\n  function truncate(Exp memory exp) internal pure returns (uint256) {\r\n    // Note: We are not using careful math here as we're performing a division that cannot fail\r\n    return exp.mantissa / expScale;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n   */\r\n  function mul_ScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\r\n    Exp memory product = mul_(a, scalar);\r\n    return truncate(product);\r\n  }\r\n\r\n  /**\r\n   * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n   */\r\n  function mul_ScalarTruncateAddUInt(\r\n    Exp memory a,\r\n    uint256 scalar,\r\n    uint256 addend\r\n  ) internal pure returns (uint256) {\r\n    Exp memory product = mul_(a, scalar);\r\n    return add_(truncate(product), addend);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if first Exp is less than second Exp.\r\n   */\r\n  function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\r\n    return left.mantissa < right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if left Exp <= right Exp.\r\n   */\r\n  function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\r\n    return left.mantissa <= right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if left Exp > right Exp.\r\n   */\r\n  function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\r\n    return left.mantissa > right.mantissa;\r\n  }\r\n\r\n  /**\r\n   * @dev returns true if Exp is exactly zero\r\n   */\r\n  function isZeroExp(Exp memory value) internal pure returns (bool) {\r\n    return value.mantissa == 0;\r\n  }\r\n\r\n  function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\r\n    require(n < 2**224, errorMessage);\r\n    return uint224(n);\r\n  }\r\n\r\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\r\n    require(n < 2**32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n  function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\r\n  }\r\n\r\n  function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: add_(a.mantissa, b.mantissa) });\r\n  }\r\n\r\n  function add_(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return add_(a, b, \"addition overflow\");\r\n  }\r\n\r\n  function add_(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\r\n  }\r\n\r\n  function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\r\n  }\r\n\r\n  function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub_(a, b, \"subtraction underflow\");\r\n  }\r\n\r\n  function sub_(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\r\n  }\r\n\r\n  function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: mul_(a.mantissa, b) });\r\n  }\r\n\r\n  function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\r\n    return mul_(a, b.mantissa) / expScale;\r\n  }\r\n\r\n  function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\r\n  }\r\n\r\n  function mul_(Double memory a, uint256 b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: mul_(a.mantissa, b) });\r\n  }\r\n\r\n  function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\r\n    return mul_(a, b.mantissa) / doubleScale;\r\n  }\r\n\r\n  function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mul_(a, b, \"multiplication overflow\");\r\n  }\r\n\r\n  function mul_(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\r\n  }\r\n\r\n  function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\r\n    return Exp({ mantissa: div_(a.mantissa, b) });\r\n  }\r\n\r\n  function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\r\n    return div_(mul_(a, expScale), b.mantissa);\r\n  }\r\n\r\n  function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\r\n  }\r\n\r\n  function div_(Double memory a, uint256 b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: div_(a.mantissa, b) });\r\n  }\r\n\r\n  function div_(uint256 a, Double memory b) internal pure returns (uint256) {\r\n    return div_(mul_(a, doubleScale), b.mantissa);\r\n  }\r\n\r\n  function div_(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div_(a, b, \"divide by zero\");\r\n  }\r\n\r\n  function div_(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a / b;\r\n  }\r\n\r\n  function fraction(uint256 a, uint256 b) internal pure returns (Double memory) {\r\n    return Double({ mantissa: div_(mul_(a, doubleScale), b) });\r\n  }\r\n}\r\n"
    },
    "contracts/compound/IFeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../ionic/AuthoritiesRegistry.sol\";\r\n\r\ninterface IFeeDistributor {\r\n  function minBorrowEth() external view returns (uint256);\r\n\r\n  function maxUtilizationRate() external view returns (uint256);\r\n\r\n  function interestFeeRate() external view returns (uint256);\r\n\r\n  function latestComptrollerImplementation(address oldImplementation) external view returns (address);\r\n\r\n  function latestCErc20Delegate(uint8 delegateType)\r\n    external\r\n    view\r\n    returns (address cErc20Delegate, bytes memory becomeImplementationData);\r\n\r\n  function latestPluginImplementation(address oldImplementation) external view returns (address);\r\n\r\n  function getComptrollerExtensions(address comptroller) external view returns (address[] memory);\r\n\r\n  function getCErc20DelegateExtensions(address cErc20Delegate) external view returns (address[] memory);\r\n\r\n  function deployCErc20(\r\n    uint8 delegateType,\r\n    bytes calldata constructorData,\r\n    bytes calldata becomeImplData\r\n  ) external returns (address);\r\n\r\n  function canCall(\r\n    address pool,\r\n    address user,\r\n    address target,\r\n    bytes4 functionSig\r\n  ) external view returns (bool);\r\n\r\n  function authoritiesRegistry() external view returns (AuthoritiesRegistry);\r\n\r\n  fallback() external payable;\r\n\r\n  receive() external payable;\r\n}\r\n"
    },
    "contracts/compound/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title Compound's InterestRateModel Interface\r\n * @author Compound\r\n */\r\nabstract contract InterestRateModel {\r\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\r\n  bool public constant isInterestRateModel = true;\r\n\r\n  /**\r\n   * @notice Calculates the current borrow interest rate per block\r\n   * @param cash The total amount of cash the market has\r\n   * @param borrows The total amount of borrows the market has outstanding\r\n   * @param reserves The total amount of reserves the market has\r\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\r\n   */\r\n  function getBorrowRate(\r\n    uint256 cash,\r\n    uint256 borrows,\r\n    uint256 reserves\r\n  ) public view virtual returns (uint256);\r\n\r\n  /**\r\n   * @notice Calculates the current supply interest rate per block\r\n   * @param cash The total amount of cash the market has\r\n   * @param borrows The total amount of borrows the market has outstanding\r\n   * @param reserves The total amount of reserves the market has\r\n   * @param reserveFactorMantissa The current reserve factor the market has\r\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n   */\r\n  function getSupplyRate(\r\n    uint256 cash,\r\n    uint256 borrows,\r\n    uint256 reserves,\r\n    uint256 reserveFactorMantissa\r\n  ) public view virtual returns (uint256);\r\n}\r\n"
    },
    "contracts/compound/Unitroller.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./ErrorReporter.sol\";\r\nimport \"./ComptrollerStorage.sol\";\r\nimport \"./Comptroller.sol\";\r\nimport { DiamondExtension, DiamondBase, LibDiamond } from \"../ionic/DiamondExtension.sol\";\r\n\r\n/**\r\n * @title Unitroller\r\n * @dev Storage for the comptroller is at this address, while execution is delegated via the Diamond Extensions\r\n * CTokens should reference this contract as their comptroller.\r\n */\r\ncontract Unitroller is ComptrollerV3Storage, ComptrollerErrorReporter, DiamondBase {\r\n  /**\r\n   * @notice Event emitted when the admin rights are changed\r\n   */\r\n  event AdminRightsToggled(bool hasRights);\r\n\r\n  /**\r\n   * @notice Emitted when pendingAdmin is changed\r\n   */\r\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n  /**\r\n   * @notice Emitted when pendingAdmin is accepted, which means admin is updated\r\n   */\r\n  event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n  constructor(address payable _ionicAdmin) {\r\n    admin = msg.sender;\r\n    ionicAdmin = _ionicAdmin;\r\n  }\r\n\r\n  /*** Admin Functions ***/\r\n\r\n  /**\r\n   * @notice Toggles admin rights.\r\n   * @param hasRights Boolean indicating if the admin is to have rights.\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _toggleAdminRights(bool hasRights) external returns (uint256) {\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.TOGGLE_ADMIN_RIGHTS_OWNER_CHECK);\r\n    }\r\n\r\n    // Check that rights have not already been set to the desired value\r\n    if (adminHasRights == hasRights) return uint256(Error.NO_ERROR);\r\n\r\n    adminHasRights = hasRights;\r\n    emit AdminRightsToggled(hasRights);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n   * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\r\n   * @param newPendingAdmin New pending admin.\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _setPendingAdmin(address newPendingAdmin) public returns (uint256) {\r\n    if (!hasAdminRights()) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\r\n    }\r\n\r\n    address oldPendingAdmin = pendingAdmin;\r\n    pendingAdmin = newPendingAdmin;\r\n    emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  /**\r\n   * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\r\n   * @dev Admin function for pending admin to accept role and update admin\r\n   * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n   */\r\n  function _acceptAdmin() public returns (uint256) {\r\n    // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\r\n    if (msg.sender != pendingAdmin || msg.sender == address(0)) {\r\n      return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\r\n    }\r\n\r\n    // Save current values for inclusion in log\r\n    address oldAdmin = admin;\r\n    address oldPendingAdmin = pendingAdmin;\r\n\r\n    admin = pendingAdmin;\r\n    pendingAdmin = address(0);\r\n\r\n    emit NewAdmin(oldAdmin, admin);\r\n    emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\r\n\r\n    return uint256(Error.NO_ERROR);\r\n  }\r\n\r\n  function comptrollerImplementation() public view returns (address) {\r\n    return LibDiamond.getExtensionForFunction(bytes4(keccak256(bytes(\"_deployMarket(uint8,bytes,bytes,uint256)\"))));\r\n  }\r\n\r\n  /**\r\n   * @dev upgrades the implementation if necessary\r\n   */\r\n  function _upgrade() external {\r\n    require(msg.sender == address(this) || hasAdminRights(), \"!self || !admin\");\r\n\r\n    address currentImplementation = comptrollerImplementation();\r\n    address latestComptrollerImplementation = IFeeDistributor(ionicAdmin).latestComptrollerImplementation(\r\n      currentImplementation\r\n    );\r\n\r\n    _updateExtensions(latestComptrollerImplementation);\r\n\r\n    if (currentImplementation != latestComptrollerImplementation) {\r\n      // reinitialize\r\n      _functionCall(address(this), abi.encodeWithSignature(\"_becomeImplementation()\"), \"!become impl\");\r\n    }\r\n  }\r\n\r\n  function _functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    (bool success, bytes memory returndata) = target.call(data);\r\n\r\n    if (!success) {\r\n      // Look for revert reason and bubble it up if present\r\n      if (returndata.length > 0) {\r\n        // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n          let returndata_size := mload(returndata)\r\n          revert(add(32, returndata), returndata_size)\r\n        }\r\n      } else {\r\n        revert(errorMessage);\r\n      }\r\n    }\r\n\r\n    return returndata;\r\n  }\r\n\r\n  function _updateExtensions(address currentComptroller) internal {\r\n    address[] memory latestExtensions = IFeeDistributor(ionicAdmin).getComptrollerExtensions(currentComptroller);\r\n    address[] memory currentExtensions = LibDiamond.listExtensions();\r\n\r\n    // removed the current (old) extensions\r\n    for (uint256 i = 0; i < currentExtensions.length; i++) {\r\n      LibDiamond.removeExtension(DiamondExtension(currentExtensions[i]));\r\n    }\r\n    // add the new extensions\r\n    for (uint256 i = 0; i < latestExtensions.length; i++) {\r\n      LibDiamond.addExtension(DiamondExtension(latestExtensions[i]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev register a logic extension\r\n   * @param extensionToAdd the extension whose functions are to be added\r\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\r\n   */\r\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external override {\r\n    require(hasAdminRights(), \"!unauthorized\");\r\n    LibDiamond.registerExtension(extensionToAdd, extensionToReplace);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/AddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\nimport { SafeOwnableUpgradeable } from \"../ionic/SafeOwnableUpgradeable.sol\";\r\n\r\n/**\r\n * @title AddressesProvider\r\n * @notice The Addresses Provider serves as a central storage of system internal and external\r\n *         contract addresses that change between deploys and across chains\r\n * @author Veliko Minkov <veliko@midascapital.xyz>\r\n */\r\ncontract AddressesProvider is SafeOwnableUpgradeable {\r\n  mapping(string => address) private _addresses;\r\n  mapping(address => Contract) public plugins;\r\n  mapping(address => Contract) public flywheelRewards;\r\n  mapping(address => RedemptionStrategy) public redemptionStrategiesConfig;\r\n  mapping(address => FundingStrategy) public fundingStrategiesConfig;\r\n  JarvisPool[] public jarvisPoolsConfig;\r\n  CurveSwapPool[] public curveSwapPoolsConfig;\r\n  mapping(address => mapping(address => address)) public balancerPoolForTokens;\r\n\r\n  /// @dev Initializer to set the admin that can set and change contracts addresses\r\n  function initialize(address owner) public initializer {\r\n    __SafeOwnable_init(owner);\r\n  }\r\n\r\n  /**\r\n   * @dev The contract address and a string that uniquely identifies the contract's interface\r\n   */\r\n  struct Contract {\r\n    address addr;\r\n    string contractInterface;\r\n  }\r\n\r\n  struct RedemptionStrategy {\r\n    address addr;\r\n    string contractInterface;\r\n    address outputToken;\r\n  }\r\n\r\n  struct FundingStrategy {\r\n    address addr;\r\n    string contractInterface;\r\n    address inputToken;\r\n  }\r\n\r\n  struct JarvisPool {\r\n    address syntheticToken;\r\n    address collateralToken;\r\n    address liquidityPool;\r\n    uint256 expirationTime;\r\n  }\r\n\r\n  struct CurveSwapPool {\r\n    address poolAddress;\r\n    address[] coins;\r\n  }\r\n\r\n  /**\r\n   * @dev sets the address and contract interface ID of the flywheel for the reward token\r\n   * @param rewardToken the reward token address\r\n   * @param flywheelRewardsModule the flywheel rewards module address\r\n   * @param contractInterface a string that uniquely identifies the contract's interface\r\n   */\r\n  function setFlywheelRewards(\r\n    address rewardToken,\r\n    address flywheelRewardsModule,\r\n    string calldata contractInterface\r\n  ) public onlyOwner {\r\n    flywheelRewards[rewardToken] = Contract(flywheelRewardsModule, contractInterface);\r\n  }\r\n\r\n  /**\r\n   * @dev sets the address and contract interface ID of the ERC4626 plugin for the asset\r\n   * @param asset the asset address\r\n   * @param plugin the ERC4626 plugin address\r\n   * @param contractInterface a string that uniquely identifies the contract's interface\r\n   */\r\n  function setPlugin(\r\n    address asset,\r\n    address plugin,\r\n    string calldata contractInterface\r\n  ) public onlyOwner {\r\n    plugins[asset] = Contract(plugin, contractInterface);\r\n  }\r\n\r\n  /**\r\n   * @dev sets the address and contract interface ID of the redemption strategy for the asset\r\n   * @param asset the asset address\r\n   * @param strategy redemption strategy address\r\n   * @param contractInterface a string that uniquely identifies the contract's interface\r\n   */\r\n  function setRedemptionStrategy(\r\n    address asset,\r\n    address strategy,\r\n    string calldata contractInterface,\r\n    address outputToken\r\n  ) public onlyOwner {\r\n    redemptionStrategiesConfig[asset] = RedemptionStrategy(strategy, contractInterface, outputToken);\r\n  }\r\n\r\n  function getRedemptionStrategy(address asset) public view returns (RedemptionStrategy memory) {\r\n    return redemptionStrategiesConfig[asset];\r\n  }\r\n\r\n  /**\r\n   * @dev sets the address and contract interface ID of the funding strategy for the asset\r\n   * @param asset the asset address\r\n   * @param strategy funding strategy address\r\n   * @param contractInterface a string that uniquely identifies the contract's interface\r\n   */\r\n  function setFundingStrategy(\r\n    address asset,\r\n    address strategy,\r\n    string calldata contractInterface,\r\n    address inputToken\r\n  ) public onlyOwner {\r\n    fundingStrategiesConfig[asset] = FundingStrategy(strategy, contractInterface, inputToken);\r\n  }\r\n\r\n  function getFundingStrategy(address asset) public view returns (FundingStrategy memory) {\r\n    return fundingStrategiesConfig[asset];\r\n  }\r\n\r\n  /**\r\n   * @dev configures the Jarvis pool of a Jarvis synthetic token\r\n   * @param syntheticToken the synthetic token address\r\n   * @param collateralToken the collateral token address\r\n   * @param liquidityPool the liquidity pool address\r\n   * @param expirationTime the operation expiration time\r\n   */\r\n  function setJarvisPool(\r\n    address syntheticToken,\r\n    address collateralToken,\r\n    address liquidityPool,\r\n    uint256 expirationTime\r\n  ) public onlyOwner {\r\n    jarvisPoolsConfig.push(JarvisPool(syntheticToken, collateralToken, liquidityPool, expirationTime));\r\n  }\r\n\r\n  function setCurveSwapPool(address poolAddress, address[] calldata coins) public onlyOwner {\r\n    curveSwapPoolsConfig.push(CurveSwapPool(poolAddress, coins));\r\n  }\r\n\r\n  /**\r\n   * @dev Sets an address for an id replacing the address saved in the addresses map\r\n   * @param id The id\r\n   * @param newAddress The address to set\r\n   */\r\n  function setAddress(string calldata id, address newAddress) external onlyOwner {\r\n    _addresses[id] = newAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an address by id\r\n   * @return The address\r\n   */\r\n  function getAddress(string calldata id) public view returns (address) {\r\n    return _addresses[id];\r\n  }\r\n\r\n  function getCurveSwapPools() public view returns (CurveSwapPool[] memory) {\r\n    return curveSwapPoolsConfig;\r\n  }\r\n\r\n  function getJarvisPools() public view returns (JarvisPool[] memory) {\r\n    return jarvisPoolsConfig;\r\n  }\r\n\r\n  function setBalancerPoolForTokens(\r\n    address inputToken,\r\n    address outputToken,\r\n    address pool\r\n  ) external onlyOwner {\r\n    balancerPoolForTokens[inputToken][outputToken] = pool;\r\n  }\r\n\r\n  function getBalancerPoolForTokens(address inputToken, address outputToken) external view returns (address) {\r\n    return balancerPoolForTokens[inputToken][outputToken];\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/AuthoritiesRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { PoolRolesAuthority } from \"../ionic/PoolRolesAuthority.sol\";\r\nimport { SafeOwnableUpgradeable } from \"../ionic/SafeOwnableUpgradeable.sol\";\r\nimport { IonicComptroller } from \"../compound/ComptrollerInterface.sol\";\r\n\r\nimport { TransparentUpgradeableProxy } from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\r\n\r\ncontract AuthoritiesRegistry is SafeOwnableUpgradeable {\r\n  mapping(address => PoolRolesAuthority) public poolsAuthorities;\r\n  PoolRolesAuthority public poolAuthLogic;\r\n  address public leveredPositionsFactory;\r\n  bool public noAuthRequired;\r\n\r\n  function initialize(address _leveredPositionsFactory) public initializer {\r\n    __SafeOwnable_init(msg.sender);\r\n    leveredPositionsFactory = _leveredPositionsFactory;\r\n    poolAuthLogic = new PoolRolesAuthority();\r\n  }\r\n\r\n  function reinitialize(address _leveredPositionsFactory) public onlyOwnerOrAdmin {\r\n    leveredPositionsFactory = _leveredPositionsFactory;\r\n    poolAuthLogic = new PoolRolesAuthority();\r\n    // for Neon the auth is not required\r\n    noAuthRequired = block.chainid == 245022934;\r\n  }\r\n\r\n  function createPoolAuthority(address pool) public onlyOwner returns (PoolRolesAuthority auth) {\r\n    require(address(poolsAuthorities[pool]) == address(0), \"already created\");\r\n\r\n    TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(address(poolAuthLogic), _getProxyAdmin(), \"\");\r\n    auth = PoolRolesAuthority(address(proxy));\r\n    auth.initialize(address(this));\r\n    poolsAuthorities[pool] = auth;\r\n\r\n    auth.openPoolSupplierCapabilities(IonicComptroller(pool));\r\n    auth.setUserRole(address(this), auth.REGISTRY_ROLE(), true);\r\n    // sets the registry owner as the auth owner\r\n    reconfigureAuthority(pool);\r\n  }\r\n\r\n  function reconfigureAuthority(address poolAddress) public {\r\n    IonicComptroller pool = IonicComptroller(poolAddress);\r\n    PoolRolesAuthority auth = poolsAuthorities[address(pool)];\r\n\r\n    if (msg.sender != poolAddress || address(auth) != address(0)) {\r\n      require(address(auth) != address(0), \"no such authority\");\r\n      require(msg.sender == owner() || msg.sender == poolAddress, \"not owner or pool\");\r\n\r\n      auth.configureRegistryCapabilities();\r\n      auth.configurePoolSupplierCapabilities(pool);\r\n      auth.configurePoolBorrowerCapabilities(pool);\r\n      // everyone can be a liquidator\r\n      auth.configureOpenPoolLiquidatorCapabilities(pool);\r\n      auth.configureLeveredPositionCapabilities(pool);\r\n\r\n      if (auth.owner() != owner()) {\r\n        auth.setOwner(owner());\r\n      }\r\n    }\r\n  }\r\n\r\n  function canCall(\r\n    address pool,\r\n    address user,\r\n    address target,\r\n    bytes4 functionSig\r\n  ) external view returns (bool) {\r\n    PoolRolesAuthority authorityForPool = poolsAuthorities[pool];\r\n    if (address(authorityForPool) == address(0)) {\r\n      return noAuthRequired;\r\n    } else {\r\n      // allow only if an auth exists and it allows the action\r\n      return authorityForPool.canCall(user, target, functionSig);\r\n    }\r\n  }\r\n\r\n  function setUserRole(\r\n    address pool,\r\n    address user,\r\n    uint8 role,\r\n    bool enabled\r\n  ) external {\r\n    PoolRolesAuthority poolAuth = poolsAuthorities[pool];\r\n\r\n    require(address(poolAuth) != address(0), \"auth does not exist\");\r\n    require(msg.sender == owner() || msg.sender == leveredPositionsFactory, \"not owner or factory\");\r\n    require(msg.sender != leveredPositionsFactory || role == poolAuth.LEVERED_POSITION_ROLE(), \"only lev pos role\");\r\n\r\n    poolAuth.setUserRole(user, role, enabled);\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/DiamondExtension.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @notice a base contract for logic extensions that use the diamond pattern storage\r\n * to map the functions when looking up the extension contract to delegate to.\r\n */\r\nabstract contract DiamondExtension {\r\n  /**\r\n   * @return a list of all the function selectors that this logic extension exposes\r\n   */\r\n  function _getExtensionFunctions() external pure virtual returns (bytes4[] memory);\r\n}\r\n\r\n// When no function exists for function called\r\nerror FunctionNotFound(bytes4 _functionSelector);\r\n\r\n// When no extension exists for function called\r\nerror ExtensionNotFound(bytes4 _functionSelector);\r\n\r\n// When the function is already added\r\nerror FunctionAlreadyAdded(bytes4 _functionSelector, address _currentImpl);\r\n\r\nabstract contract DiamondBase {\r\n  /**\r\n   * @dev register a logic extension\r\n   * @param extensionToAdd the extension whose functions are to be added\r\n   * @param extensionToReplace the extension whose functions are to be removed/replaced\r\n   */\r\n  function _registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) external virtual;\r\n\r\n  function _listExtensions() public view returns (address[] memory) {\r\n    return LibDiamond.listExtensions();\r\n  }\r\n\r\n  fallback() external {\r\n    address extension = LibDiamond.getExtensionForFunction(msg.sig);\r\n    if (extension == address(0)) revert FunctionNotFound(msg.sig);\r\n    // Execute external function from extension using delegatecall and return any value.\r\n    assembly {\r\n      // copy function selector and any arguments\r\n      calldatacopy(0, 0, calldatasize())\r\n      // execute function call using the extension\r\n      let result := delegatecall(gas(), extension, 0, calldatasize(), 0, 0)\r\n      // get any return value\r\n      returndatacopy(0, 0, returndatasize())\r\n      // return any return value or error back to the caller\r\n      switch result\r\n      case 0 {\r\n        revert(0, returndatasize())\r\n      }\r\n      default {\r\n        return(0, returndatasize())\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @notice a library to use in a contract, whose logic is extended with diamond extension\r\n */\r\nlibrary LibDiamond {\r\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.extensions.diamond.storage\");\r\n\r\n  struct Function {\r\n    address extension;\r\n    bytes4 selector;\r\n  }\r\n\r\n  struct LogicStorage {\r\n    Function[] functions;\r\n    address[] extensions;\r\n  }\r\n\r\n  function getExtensionForFunction(bytes4 msgSig) internal view returns (address) {\r\n    return getExtensionForSelector(msgSig, diamondStorage());\r\n  }\r\n\r\n  function diamondStorage() internal pure returns (LogicStorage storage ds) {\r\n    bytes32 position = DIAMOND_STORAGE_POSITION;\r\n    assembly {\r\n      ds.slot := position\r\n    }\r\n  }\r\n\r\n  function listExtensions() internal view returns (address[] memory) {\r\n    return diamondStorage().extensions;\r\n  }\r\n\r\n  function registerExtension(DiamondExtension extensionToAdd, DiamondExtension extensionToReplace) internal {\r\n    if (address(extensionToReplace) != address(0)) {\r\n      removeExtension(extensionToReplace);\r\n    }\r\n    addExtension(extensionToAdd);\r\n  }\r\n\r\n  function removeExtension(DiamondExtension extension) internal {\r\n    LogicStorage storage ds = diamondStorage();\r\n    // remove all functions of the extension to replace\r\n    removeExtensionFunctions(extension);\r\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\r\n      if (ds.extensions[i] == address(extension)) {\r\n        ds.extensions[i] = ds.extensions[ds.extensions.length - 1];\r\n        ds.extensions.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  function addExtension(DiamondExtension extension) internal {\r\n    LogicStorage storage ds = diamondStorage();\r\n    for (uint8 i = 0; i < ds.extensions.length; i++) {\r\n      require(ds.extensions[i] != address(extension), \"extension already added\");\r\n    }\r\n    addExtensionFunctions(extension);\r\n    ds.extensions.push(address(extension));\r\n  }\r\n\r\n  function removeExtensionFunctions(DiamondExtension extension) internal {\r\n    bytes4[] memory fnsToRemove = extension._getExtensionFunctions();\r\n    LogicStorage storage ds = diamondStorage();\r\n    for (uint16 i = 0; i < fnsToRemove.length; i++) {\r\n      bytes4 selectorToRemove = fnsToRemove[i];\r\n      // must never fail\r\n      assert(address(extension) == getExtensionForSelector(selectorToRemove, ds));\r\n      // swap with the last element in the selectorAtIndex array and remove the last element\r\n      uint16 indexToKeep = getIndexForSelector(selectorToRemove, ds);\r\n      ds.functions[indexToKeep] = ds.functions[ds.functions.length - 1];\r\n      ds.functions.pop();\r\n    }\r\n  }\r\n\r\n  function addExtensionFunctions(DiamondExtension extension) internal {\r\n    bytes4[] memory fnsToAdd = extension._getExtensionFunctions();\r\n    LogicStorage storage ds = diamondStorage();\r\n    uint16 functionsCount = uint16(ds.functions.length);\r\n    for (uint256 functionsIndex = 0; functionsIndex < fnsToAdd.length; functionsIndex++) {\r\n      bytes4 selector = fnsToAdd[functionsIndex];\r\n      address oldImplementation = getExtensionForSelector(selector, ds);\r\n      if (oldImplementation != address(0)) revert FunctionAlreadyAdded(selector, oldImplementation);\r\n      ds.functions.push(Function(address(extension), selector));\r\n      functionsCount++;\r\n    }\r\n  }\r\n\r\n  function getExtensionForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (address) {\r\n    uint256 fnsLen = ds.functions.length;\r\n    for (uint256 i = 0; i < fnsLen; i++) {\r\n      if (ds.functions[i].selector == selector) return ds.functions[i].extension;\r\n    }\r\n\r\n    return address(0);\r\n  }\r\n\r\n  function getIndexForSelector(bytes4 selector, LogicStorage storage ds) internal view returns (uint16) {\r\n    uint16 fnsLen = uint16(ds.functions.length);\r\n    for (uint16 i = 0; i < fnsLen; i++) {\r\n      if (ds.functions[i].selector == selector) return i;\r\n    }\r\n\r\n    return type(uint16).max;\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/PoolRolesAuthority.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport { IonicComptroller, ComptrollerInterface } from \"../compound/ComptrollerInterface.sol\";\r\nimport { ICErc20, CTokenSecondExtensionInterface, CTokenFirstExtensionInterface } from \"../compound/CTokenInterfaces.sol\";\r\n\r\nimport { RolesAuthority, Authority } from \"solmate/auth/authorities/RolesAuthority.sol\";\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\r\n\r\ncontract PoolRolesAuthority is RolesAuthority, Initializable {\r\n  constructor() RolesAuthority(address(0), Authority(address(0))) {\r\n    _disableInitializers();\r\n  }\r\n\r\n  function initialize(address _owner) public initializer {\r\n    owner = _owner;\r\n    authority = this;\r\n  }\r\n\r\n  // up to 256 roles\r\n  uint8 public constant REGISTRY_ROLE = 0;\r\n  uint8 public constant SUPPLIER_ROLE = 1;\r\n  uint8 public constant BORROWER_ROLE = 2;\r\n  uint8 public constant LIQUIDATOR_ROLE = 3;\r\n  uint8 public constant LEVERED_POSITION_ROLE = 4;\r\n\r\n  function configureRegistryCapabilities() external requiresAuth {\r\n    setRoleCapability(REGISTRY_ROLE, address(this), PoolRolesAuthority.configureRegistryCapabilities.selector, true);\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configurePoolSupplierCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configurePoolBorrowerCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configureClosedPoolLiquidatorCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configureOpenPoolLiquidatorCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(\r\n      REGISTRY_ROLE,\r\n      address(this),\r\n      PoolRolesAuthority.configureLeveredPositionCapabilities.selector,\r\n      true\r\n    );\r\n    setRoleCapability(REGISTRY_ROLE, address(this), RolesAuthority.setUserRole.selector, true);\r\n  }\r\n\r\n  function openPoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _setPublicPoolSupplierCapabilities(pool, true);\r\n  }\r\n\r\n  function closePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _setPublicPoolSupplierCapabilities(pool, false);\r\n  }\r\n\r\n  function _setPublicPoolSupplierCapabilities(IonicComptroller pool, bool setPublic) internal {\r\n    setPublicCapability(address(pool), pool.enterMarkets.selector, setPublic);\r\n    setPublicCapability(address(pool), pool.exitMarket.selector, setPublic);\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      bytes4[] memory selectors = getSupplierMarketSelectors();\r\n      for (uint256 j = 0; j < selectors.length; j++) {\r\n        setPublicCapability(address(allMarkets[i]), selectors[j], setPublic);\r\n      }\r\n    }\r\n  }\r\n\r\n  function configurePoolSupplierCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _configurePoolSupplierCapabilities(pool, SUPPLIER_ROLE);\r\n  }\r\n\r\n  function getSupplierMarketSelectors() internal pure returns (bytes4[] memory selectors) {\r\n    uint8 fnsCount = 6;\r\n    selectors = new bytes4[](fnsCount);\r\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.mint.selector;\r\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeem.selector;\r\n    selectors[--fnsCount] = CTokenSecondExtensionInterface.redeemUnderlying.selector;\r\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transfer.selector;\r\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.transferFrom.selector;\r\n    selectors[--fnsCount] = CTokenFirstExtensionInterface.approve.selector;\r\n\r\n    require(fnsCount == 0, \"use the correct array length\");\r\n    return selectors;\r\n  }\r\n\r\n  function _configurePoolSupplierCapabilities(IonicComptroller pool, uint8 role) internal {\r\n    setRoleCapability(role, address(pool), pool.enterMarkets.selector, true);\r\n    setRoleCapability(role, address(pool), pool.exitMarket.selector, true);\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      bytes4[] memory selectors = getSupplierMarketSelectors();\r\n      for (uint256 j = 0; j < selectors.length; j++) {\r\n        setRoleCapability(role, address(allMarkets[i]), selectors[j], true);\r\n      }\r\n    }\r\n  }\r\n\r\n  function openPoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _setPublicPoolBorrowerCapabilities(pool, true);\r\n  }\r\n\r\n  function closePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\r\n    _setPublicPoolBorrowerCapabilities(pool, false);\r\n  }\r\n\r\n  function _setPublicPoolBorrowerCapabilities(IonicComptroller pool, bool setPublic) internal {\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].borrow.selector, setPublic);\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrow.selector, setPublic);\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, setPublic);\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].flash.selector, setPublic);\r\n    }\r\n  }\r\n\r\n  function configurePoolBorrowerCapabilities(IonicComptroller pool) external requiresAuth {\r\n    // borrowers have the SUPPLIER_ROLE capabilities by default\r\n    _configurePoolSupplierCapabilities(pool, BORROWER_ROLE);\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\r\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\r\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrowBehalf.selector, true);\r\n      setRoleCapability(BORROWER_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\r\n    }\r\n  }\r\n\r\n  function configureClosedPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, false);\r\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\r\n      setRoleCapability(LIQUIDATOR_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\r\n    }\r\n  }\r\n\r\n  function configureOpenPoolLiquidatorCapabilities(IonicComptroller pool) external requiresAuth {\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].liquidateBorrow.selector, true);\r\n      // TODO this leaves redeeming open for everyone\r\n      setPublicCapability(address(allMarkets[i]), allMarkets[i].redeem.selector, true);\r\n    }\r\n  }\r\n\r\n  function configureLeveredPositionCapabilities(IonicComptroller pool) external requiresAuth {\r\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.enterMarkets.selector, true);\r\n    setRoleCapability(LEVERED_POSITION_ROLE, address(pool), pool.exitMarket.selector, true);\r\n    ICErc20[] memory allMarkets = pool.getAllMarkets();\r\n    for (uint256 i = 0; i < allMarkets.length; i++) {\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].mint.selector, true);\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeem.selector, true);\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].redeemUnderlying.selector, true);\r\n\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].borrow.selector, true);\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].repayBorrow.selector, true);\r\n      setRoleCapability(LEVERED_POSITION_ROLE, address(allMarkets[i]), allMarkets[i].flash.selector, true);\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/SafeOwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\";\r\n\r\n/**\r\n * @dev Ownable extension that requires a two-step process of setting the pending owner and the owner accepting it.\r\n * @notice Existing OwnableUpgradeable contracts cannot be upgraded due to the extra storage variable\r\n * that will shift the other.\r\n */\r\nabstract contract SafeOwnableUpgradeable is OwnableUpgradeable {\r\n  /**\r\n   * @notice Pending owner of this contract\r\n   */\r\n  address public pendingOwner;\r\n\r\n  function __SafeOwnable_init(address owner_) internal onlyInitializing {\r\n    __Ownable_init();\r\n    _transferOwnership(owner_);\r\n  }\r\n\r\n  struct AddressSlot {\r\n    address value;\r\n  }\r\n\r\n  modifier onlyOwnerOrAdmin() {\r\n    bool isOwner = owner() == _msgSender();\r\n    if (!isOwner) {\r\n      address admin = _getProxyAdmin();\r\n      bool isAdmin = admin == _msgSender();\r\n      require(isAdmin, \"Ownable: caller is neither the owner nor the admin\");\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @notice Emitted when pendingOwner is changed\r\n   */\r\n  event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\r\n\r\n  /**\r\n   * @notice Emitted when pendingOwner is accepted, which means owner is updated\r\n   */\r\n  event NewOwner(address oldOwner, address newOwner);\r\n\r\n  /**\r\n   * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\r\n   * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\r\n   * @param newPendingOwner New pending owner.\r\n   */\r\n  function _setPendingOwner(address newPendingOwner) public onlyOwner {\r\n    // Save current value, if any, for inclusion in log\r\n    address oldPendingOwner = pendingOwner;\r\n\r\n    // Store pendingOwner with value newPendingOwner\r\n    pendingOwner = newPendingOwner;\r\n\r\n    // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\r\n    emit NewPendingOwner(oldPendingOwner, newPendingOwner);\r\n  }\r\n\r\n  /**\r\n   * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\r\n   * @dev Owner function for pending owner to accept role and update owner\r\n   */\r\n  function _acceptOwner() public {\r\n    // Check caller is pendingOwner and pendingOwner ≠ address(0)\r\n    require(msg.sender == pendingOwner, \"not the pending owner\");\r\n\r\n    // Save current values for inclusion in log\r\n    address oldOwner = owner();\r\n    address oldPendingOwner = pendingOwner;\r\n\r\n    // Store owner with value pendingOwner\r\n    _transferOwnership(pendingOwner);\r\n\r\n    // Clear the pending value\r\n    pendingOwner = address(0);\r\n\r\n    emit NewOwner(oldOwner, pendingOwner);\r\n    emit NewPendingOwner(oldPendingOwner, pendingOwner);\r\n  }\r\n\r\n  function renounceOwnership() public override onlyOwner {\r\n    // do not remove this overriding fn\r\n    revert(\"not used anymore\");\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public override onlyOwner {\r\n    emit NewPendingOwner(pendingOwner, newOwner);\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  function _getProxyAdmin() internal view returns (address admin) {\r\n    bytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n    AddressSlot storage adminSlot;\r\n    assembly {\r\n      adminSlot.slot := _ADMIN_SLOT\r\n    }\r\n    admin = adminSlot.value;\r\n  }\r\n}\r\n"
    },
    "contracts/ionic/strategies/flywheel/IIonicFlywheel.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.10;\r\n\r\nimport { ERC20 } from \"solmate/tokens/ERC20.sol\";\r\n\r\ninterface IIonicFlywheel {\r\n  function isRewardsDistributor() external returns (bool);\r\n\r\n  function isFlywheel() external returns (bool);\r\n\r\n  function flywheelPreSupplierAction(address market, address supplier) external;\r\n\r\n  function flywheelPostSupplierAction(address market, address supplier) external;\r\n\r\n  function flywheelPreBorrowerAction(address market, address borrower) external;\r\n\r\n  function flywheelPostBorrowerAction(address market, address borrower) external;\r\n\r\n  function flywheelPreTransferAction(address market, address src, address dst) external;\r\n\r\n  function flywheelPostTransferAction(address market, address src, address dst) external;\r\n\r\n  function compAccrued(address user) external view returns (uint256);\r\n\r\n  function addMarketForRewards(ERC20 strategy) external;\r\n\r\n  function marketState(ERC20 strategy) external view returns (uint224 index, uint32 lastUpdatedTimestamp);\r\n}\r\n"
    },
    "contracts/oracles/BasePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../compound/CTokenInterfaces.sol\";\r\n\r\n/**\r\n * @title BasePriceOracle\r\n * @notice Returns prices of underlying tokens directly without the caller having to specify a cToken address.\r\n * @dev Implements the `PriceOracle` interface.\r\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\r\n */\r\ninterface BasePriceOracle {\r\n  /**\r\n   * @notice Get the price of an underlying asset.\r\n   * @param underlying The underlying asset to get the price of.\r\n   * @return The underlying asset price in ETH as a mantissa (scaled by 1e18).\r\n   * Zero means the price is unavailable.\r\n   */\r\n  function price(address underlying) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the underlying price of a cToken asset\r\n   * @param cToken The cToken to get the underlying price of\r\n   * @return The underlying asset price mantissa (scaled by 1e18).\r\n   *  Zero means the price is unavailable.\r\n   */\r\n  function getUnderlyingPrice(ICErc20 cToken) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/PoolDirectory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/utils/Create2Upgradeable.sol\";\r\n\r\nimport { IonicComptroller } from \"./compound/ComptrollerInterface.sol\";\r\nimport { BasePriceOracle } from \"./oracles/BasePriceOracle.sol\";\r\nimport { Unitroller } from \"./compound/Unitroller.sol\";\r\nimport \"./ionic/SafeOwnableUpgradeable.sol\";\r\nimport \"./ionic/DiamondExtension.sol\";\r\n\r\n/**\r\n * @title PoolDirectory\r\n * @author David Lucid <david@rari.capital> (https://github.com/davidlucid)\r\n * @notice PoolDirectory is a directory for Ionic interest rate pools.\r\n */\r\ncontract PoolDirectory is SafeOwnableUpgradeable {\r\n  /**\r\n   * @dev Initializes a deployer whitelist if desired.\r\n   * @param _enforceDeployerWhitelist Boolean indicating if the deployer whitelist is to be enforced.\r\n   * @param _deployerWhitelist Array of Ethereum accounts to be whitelisted.\r\n   */\r\n  function initialize(bool _enforceDeployerWhitelist, address[] memory _deployerWhitelist) public initializer {\r\n    __SafeOwnable_init(msg.sender);\r\n    enforceDeployerWhitelist = _enforceDeployerWhitelist;\r\n    for (uint256 i = 0; i < _deployerWhitelist.length; i++) deployerWhitelist[_deployerWhitelist[i]] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Struct for a Ionic interest rate pool.\r\n   */\r\n  struct Pool {\r\n    string name;\r\n    address creator;\r\n    address comptroller;\r\n    uint256 blockPosted;\r\n    uint256 timestampPosted;\r\n  }\r\n\r\n  /**\r\n   * @dev Array of Ionic interest rate pools.\r\n   */\r\n  Pool[] public pools;\r\n\r\n  /**\r\n   * @dev Maps Ethereum accounts to arrays of Ionic pool indexes.\r\n   */\r\n  mapping(address => uint256[]) private _poolsByAccount;\r\n\r\n  /**\r\n   * @dev Maps Ionic pool Comptroller addresses to bools indicating if they have been registered via the directory.\r\n   */\r\n  mapping(address => bool) public poolExists;\r\n\r\n  /**\r\n   * @dev Emitted when a new Ionic pool is added to the directory.\r\n   */\r\n  event PoolRegistered(uint256 index, Pool pool);\r\n\r\n  /**\r\n   * @dev Booleans indicating if the deployer whitelist is enforced.\r\n   */\r\n  bool public enforceDeployerWhitelist;\r\n\r\n  /**\r\n   * @dev Maps Ethereum accounts to booleans indicating if they are allowed to deploy pools.\r\n   */\r\n  mapping(address => bool) public deployerWhitelist;\r\n\r\n  /**\r\n   * @dev Controls if the deployer whitelist is to be enforced.\r\n   * @param enforce Boolean indicating if the deployer whitelist is to be enforced.\r\n   */\r\n  function _setDeployerWhitelistEnforcement(bool enforce) external onlyOwner {\r\n    enforceDeployerWhitelist = enforce;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds/removes Ethereum accounts to the deployer whitelist.\r\n   * @param deployers Array of Ethereum accounts to be whitelisted.\r\n   * @param status Whether to add or remove the accounts.\r\n   */\r\n  function _editDeployerWhitelist(address[] calldata deployers, bool status) external onlyOwner {\r\n    require(deployers.length > 0, \"No deployers supplied.\");\r\n    for (uint256 i = 0; i < deployers.length; i++) deployerWhitelist[deployers[i]] = status;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds a new Ionic pool to the directory (without checking msg.sender).\r\n   * @param name The name of the pool.\r\n   * @param comptroller The pool's Comptroller proxy contract address.\r\n   * @return The index of the registered Ionic pool.\r\n   */\r\n  function _registerPool(string memory name, address comptroller) internal returns (uint256) {\r\n    require(!poolExists[comptroller], \"Pool already exists in the directory.\");\r\n    require(!enforceDeployerWhitelist || deployerWhitelist[msg.sender], \"Sender is not on deployer whitelist.\");\r\n    require(bytes(name).length <= 100, \"No pool name supplied.\");\r\n    Pool memory pool = Pool(name, msg.sender, comptroller, block.number, block.timestamp);\r\n    pools.push(pool);\r\n    _poolsByAccount[msg.sender].push(pools.length - 1);\r\n    poolExists[comptroller] = true;\r\n    emit PoolRegistered(pools.length - 1, pool);\r\n    return pools.length - 1;\r\n  }\r\n\r\n  function _deprecatePool(address comptroller) external onlyOwner {\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller == comptroller) {\r\n        _deprecatePool(i);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _deprecatePool(uint256 index) public onlyOwner {\r\n    Pool storage ionicPool = pools[index];\r\n\r\n    require(ionicPool.comptroller != address(0), \"pool already deprecated\");\r\n\r\n    // swap with the last pool of the creator and delete\r\n    uint256[] storage creatorPools = _poolsByAccount[ionicPool.creator];\r\n    for (uint256 i = 0; i < creatorPools.length; i++) {\r\n      if (creatorPools[i] == index) {\r\n        creatorPools[i] = creatorPools[creatorPools.length - 1];\r\n        creatorPools.pop();\r\n        break;\r\n      }\r\n    }\r\n\r\n    // leave it to true to deny the re-registering of the same pool\r\n    poolExists[ionicPool.comptroller] = true;\r\n\r\n    // nullify the storage\r\n    ionicPool.comptroller = address(0);\r\n    ionicPool.creator = address(0);\r\n    ionicPool.name = \"\";\r\n    ionicPool.blockPosted = 0;\r\n    ionicPool.timestampPosted = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Deploys a new Ionic pool and adds to the directory.\r\n   * @param name The name of the pool.\r\n   * @param implementation The Comptroller implementation contract address.\r\n   * @param constructorData Encoded construction data for `Unitroller constructor()`\r\n   * @param enforceWhitelist Boolean indicating if the pool's supplier/borrower whitelist is to be enforced.\r\n   * @param closeFactor The pool's close factor (scaled by 1e18).\r\n   * @param liquidationIncentive The pool's liquidation incentive (scaled by 1e18).\r\n   * @param priceOracle The pool's PriceOracle contract address.\r\n   * @return Index of the registered Ionic pool and the Unitroller proxy address.\r\n   */\r\n  function deployPool(\r\n    string memory name,\r\n    address implementation,\r\n    bytes calldata constructorData,\r\n    bool enforceWhitelist,\r\n    uint256 closeFactor,\r\n    uint256 liquidationIncentive,\r\n    address priceOracle\r\n  ) external returns (uint256, address) {\r\n    // Input validation\r\n    require(implementation != address(0), \"No Comptroller implementation contract address specified.\");\r\n    require(priceOracle != address(0), \"No PriceOracle contract address specified.\");\r\n\r\n    // Deploy Unitroller using msg.sender, name, and block.number as a salt\r\n    bytes memory unitrollerCreationCode = abi.encodePacked(type(Unitroller).creationCode, constructorData);\r\n    address proxy = Create2Upgradeable.deploy(\r\n      0,\r\n      keccak256(abi.encodePacked(msg.sender, name, ++poolsCounter)),\r\n      unitrollerCreationCode\r\n    );\r\n\r\n    // Setup the pool\r\n    IonicComptroller comptrollerProxy = IonicComptroller(proxy);\r\n    // Set up the extensions\r\n    comptrollerProxy._upgrade();\r\n\r\n    // Set pool parameters\r\n    require(comptrollerProxy._setCloseFactor(closeFactor) == 0, \"Failed to set pool close factor.\");\r\n    require(\r\n      comptrollerProxy._setLiquidationIncentive(liquidationIncentive) == 0,\r\n      \"Failed to set pool liquidation incentive.\"\r\n    );\r\n    require(comptrollerProxy._setPriceOracle(BasePriceOracle(priceOracle)) == 0, \"Failed to set pool price oracle.\");\r\n\r\n    // Whitelist\r\n    if (enforceWhitelist)\r\n      require(comptrollerProxy._setWhitelistEnforcement(true) == 0, \"Failed to enforce supplier/borrower whitelist.\");\r\n\r\n    // Make msg.sender the admin\r\n    require(comptrollerProxy._setPendingAdmin(msg.sender) == 0, \"Failed to set pending admin on Unitroller.\");\r\n\r\n    // Register the pool with this PoolDirectory\r\n    return (_registerPool(name, proxy), proxy);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns `ids` and directory information of all non-deprecated Ionic pools.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getActivePools() public view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 count = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller != address(0)) count++;\r\n    }\r\n\r\n    Pool[] memory activePools = new Pool[](count);\r\n    uint256[] memory poolIds = new uint256[](count);\r\n\r\n    uint256 index = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller != address(0)) {\r\n        poolIds[index] = i;\r\n        activePools[index] = pools[i];\r\n        index++;\r\n      }\r\n    }\r\n\r\n    return (poolIds, activePools);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all Ionic pools' data.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getAllPools() public view returns (Pool[] memory) {\r\n    uint256 count = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller != address(0)) count++;\r\n    }\r\n\r\n    Pool[] memory result = new Pool[](count);\r\n\r\n    uint256 index = 0;\r\n    for (uint256 i = 0; i < pools.length; i++) {\r\n      if (pools[i].comptroller != address(0)) {\r\n        result[index++] = pools[i];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all public Ionic pool indexes and data.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getPublicPools() external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 arrayLength = 0;\r\n\r\n    (, Pool[] memory activePools) = getActivePools();\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      try IonicComptroller(activePools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\r\n        if (enforceWhitelist) continue;\r\n      } catch {}\r\n\r\n      arrayLength++;\r\n    }\r\n\r\n    uint256[] memory indexes = new uint256[](arrayLength);\r\n    Pool[] memory publicPools = new Pool[](arrayLength);\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      try IonicComptroller(activePools[i].comptroller).enforceWhitelist() returns (bool enforceWhitelist) {\r\n        if (enforceWhitelist) continue;\r\n      } catch {}\r\n\r\n      indexes[index] = i;\r\n      publicPools[index] = activePools[i];\r\n      index++;\r\n    }\r\n\r\n    return (indexes, publicPools);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all public Ionic pool indexes and data.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getPoolsOfUser(address user) external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 arrayLength = 0;\r\n\r\n    (, Pool[] memory activePools) = getActivePools();\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      try IonicComptroller(activePools[i].comptroller).isUserOfPool(user) returns (bool isUsing) {\r\n        if (!isUsing) continue;\r\n      } catch {}\r\n\r\n      arrayLength++;\r\n    }\r\n\r\n    uint256[] memory indexes = new uint256[](arrayLength);\r\n    Pool[] memory poolsOfUser = new Pool[](arrayLength);\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      try IonicComptroller(activePools[i].comptroller).isUserOfPool(user) returns (bool isUsing) {\r\n        if (!isUsing) continue;\r\n      } catch {}\r\n\r\n      indexes[index] = i;\r\n      poolsOfUser[index] = activePools[i];\r\n      index++;\r\n    }\r\n\r\n    return (indexes, poolsOfUser);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of Ionic pool indexes and data created by `account`.\r\n   */\r\n  function getPoolsByAccount(address account) external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256[] memory indexes = new uint256[](_poolsByAccount[account].length);\r\n    Pool[] memory accountPools = new Pool[](_poolsByAccount[account].length);\r\n    (, Pool[] memory activePools) = getActivePools();\r\n\r\n    for (uint256 i = 0; i < _poolsByAccount[account].length; i++) {\r\n      indexes[i] = _poolsByAccount[account][i];\r\n      accountPools[i] = activePools[_poolsByAccount[account][i]];\r\n    }\r\n\r\n    return (indexes, accountPools);\r\n  }\r\n\r\n  /**\r\n   * @notice Modify existing Ionic pool name.\r\n   */\r\n  function setPoolName(uint256 index, string calldata name) external {\r\n    IonicComptroller _comptroller = IonicComptroller(pools[index].comptroller);\r\n    require(\r\n      (msg.sender == _comptroller.admin() && _comptroller.adminHasRights()) || msg.sender == owner(),\r\n      \"!permission\"\r\n    );\r\n    pools[index].name = name;\r\n  }\r\n\r\n  /**\r\n   * @dev Maps Ethereum accounts to booleans indicating if they are a whitelisted admin.\r\n   */\r\n  mapping(address => bool) public adminWhitelist;\r\n\r\n  /**\r\n   * @dev used as salt for the creation of new pools\r\n   */\r\n  uint256 public poolsCounter;\r\n\r\n  /**\r\n   * @dev Event emitted when the admin whitelist is updated.\r\n   */\r\n  event AdminWhitelistUpdated(address[] admins, bool status);\r\n\r\n  /**\r\n   * @dev Adds/removes Ethereum accounts to the admin whitelist.\r\n   * @param admins Array of Ethereum accounts to be whitelisted.\r\n   * @param status Whether to add or remove the accounts.\r\n   */\r\n  function _editAdminWhitelist(address[] calldata admins, bool status) external onlyOwner {\r\n    require(admins.length > 0, \"No admins supplied.\");\r\n    for (uint256 i = 0; i < admins.length; i++) adminWhitelist[admins[i]] = status;\r\n    emit AdminWhitelistUpdated(admins, status);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all Ionic pool indexes and data with whitelisted admins.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getPublicPoolsByVerification(bool whitelistedAdmin) external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 arrayLength = 0;\r\n\r\n    (, Pool[] memory activePools) = getActivePools();\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\r\n\r\n      try comptroller.admin() returns (address admin) {\r\n        if (whitelistedAdmin != adminWhitelist[admin]) continue;\r\n      } catch {}\r\n\r\n      arrayLength++;\r\n    }\r\n\r\n    uint256[] memory indexes = new uint256[](arrayLength);\r\n    Pool[] memory publicPools = new Pool[](arrayLength);\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\r\n\r\n      try comptroller.admin() returns (address admin) {\r\n        if (whitelistedAdmin != adminWhitelist[admin]) continue;\r\n      } catch {}\r\n\r\n      indexes[index] = i;\r\n      publicPools[index] = activePools[i];\r\n      index++;\r\n    }\r\n\r\n    return (indexes, publicPools);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns arrays of all verified Ionic pool indexes and data for which the account is whitelisted\r\n   * @param account who is whitelisted in the returned verified whitelist-enabled pools.\r\n   * @dev This function is not designed to be called in a transaction: it is too gas-intensive.\r\n   */\r\n  function getVerifiedPoolsOfWhitelistedAccount(\r\n    address account\r\n  ) external view returns (uint256[] memory, Pool[] memory) {\r\n    uint256 arrayLength = 0;\r\n    (, Pool[] memory activePools) = getActivePools();\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\r\n\r\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\r\n        if (!enforceWhitelist || !comptroller.whitelist(account)) continue;\r\n      } catch {}\r\n\r\n      arrayLength++;\r\n    }\r\n\r\n    uint256[] memory indexes = new uint256[](arrayLength);\r\n    Pool[] memory accountWhitelistedPools = new Pool[](arrayLength);\r\n    uint256 index = 0;\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      IonicComptroller comptroller = IonicComptroller(activePools[i].comptroller);\r\n      try comptroller.enforceWhitelist() returns (bool enforceWhitelist) {\r\n        if (!enforceWhitelist || !comptroller.whitelist(account)) continue;\r\n      } catch {}\r\n\r\n      indexes[index] = i;\r\n      accountWhitelistedPools[index] = activePools[i];\r\n      index++;\r\n    }\r\n\r\n    return (indexes, accountWhitelistedPools);\r\n  }\r\n}\r\n"
    },
    "contracts/veION/interfaces/IVoter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\n/**\r\n * @title IVoter\r\n * @notice Interface for the Voter contract, which manages voting and reward distribution.\r\n */\r\ninterface IVoter {\r\n  /// @notice Error thrown when a user has already voted or deposited.\r\n  error AlreadyVotedOrDeposited();\r\n\r\n  /// @notice Error thrown when an action is attempted outside the distribution window.\r\n  error DistributeWindow();\r\n\r\n  /// @notice Error thrown when a reward accumulator does not exist for a given pool.\r\n  error RewardAccumulatorDoesNotExist(address _pool);\r\n\r\n  /// @notice Error thrown when a reward accumulator is not alive.\r\n  error RewardAccumulatorNotAlive(address _rewardAccumulator);\r\n\r\n  /// @notice Error thrown when a market already exists.\r\n  error MarketAlreadyExists();\r\n\r\n  /// @notice Error thrown when the maximum voting number is too low.\r\n  error MaximumVotingNumberTooLow();\r\n\r\n  /// @notice Error thrown when array lengths do not match.\r\n  error MismatchedArrayLengths();\r\n\r\n  /// @notice Error thrown when there are non-zero votes.\r\n  error NonZeroVotes();\r\n\r\n  /// @notice Error thrown when the caller is not the owner.\r\n  error NotOwner();\r\n\r\n  /// @notice Error thrown when an action is attempted outside the distribution window.\r\n  error NotDistributeWindow();\r\n\r\n  /// @notice Error thrown when the caller is not the governor.\r\n  error NotGovernor();\r\n\r\n  /// @notice Error thrown when an NFT is not whitelisted.\r\n  error NotWhitelistedNFT();\r\n\r\n  /// @notice Error thrown when the same value is provided.\r\n  error SameValue();\r\n\r\n  /// @notice Error thrown when there are too many pools.\r\n  error TooManyPools();\r\n\r\n  /// @notice Error thrown when array lengths are unequal.\r\n  error UnequalLengths();\r\n\r\n  /// @notice Error thrown when an address is zero.\r\n  error ZeroAddress();\r\n\r\n  /// @notice Error thrown when the tokens array is empty.\r\n  error TokensArrayEmpty();\r\n\r\n  /// @notice Error thrown when the weight is zero.\r\n  error ZeroWeight();\r\n\r\n  /**\r\n   * @notice Struct to store vote details.\r\n   * @param marketVotes Array of market addresses voted for.\r\n   * @param marketVoteSides Array of market sides voted for.\r\n   * @param votes Array of vote weights.\r\n   * @param usedWeight Total weight used in voting.\r\n   */\r\n  struct VoteDetails {\r\n    address[] marketVotes;\r\n    MarketSide[] marketVoteSides;\r\n    uint256[] votes;\r\n    uint256 usedWeight;\r\n  }\r\n\r\n  /**\r\n   * @notice Struct to store market information.\r\n   * @param marketAddress Address of the market.\r\n   * @param side Side of the market (Supply or Borrow).\r\n   */\r\n  struct Market {\r\n    address marketAddress;\r\n    MarketSide side;\r\n  }\r\n\r\n  /**\r\n   * @notice Struct to store variables used in voting.\r\n   * @param totalWeight Total weight available for voting.\r\n   * @param usedWeight Weight used in voting.\r\n   * @param market Address of the market.\r\n   * @param marketSide Side of the market.\r\n   * @param rewardAccumulator Address of the reward accumulator.\r\n   * @param marketWeight Weight of the market.\r\n   * @param bribes Address of the bribes.\r\n   */\r\n  struct VoteVars {\r\n    uint256 totalWeight;\r\n    uint256 usedWeight;\r\n    address market;\r\n    MarketSide marketSide;\r\n    address rewardAccumulator;\r\n    uint256 marketWeight;\r\n    address bribes;\r\n  }\r\n\r\n  /**\r\n   * @notice Struct to store local variables used in voting.\r\n   * @param sender Address of the sender.\r\n   * @param timestamp Timestamp of the vote.\r\n   * @param votingLPs Array of voting LP addresses.\r\n   * @param votingLPBalances Array of voting LP balances.\r\n   * @param boosts Array of boosts.\r\n   */\r\n  struct VoteLocalVars {\r\n    address sender;\r\n    uint256 timestamp;\r\n    address[] votingLPs;\r\n    uint256[] votingLPBalances;\r\n    uint256[] boosts;\r\n  }\r\n\r\n  /**\r\n   * @notice Enum to represent the side of a market.\r\n   */\r\n  enum MarketSide {\r\n    Supply,\r\n    Borrow\r\n  }\r\n\r\n  /**\r\n   * @notice Event emitted when a vote is cast.\r\n   * @param voter Address of the voter.\r\n   * @param pool Address of the pool.\r\n   * @param tokenId ID of the token.\r\n   * @param weight Weight of the vote.\r\n   * @param totalWeight Total weight of the vote.\r\n   * @param timestamp Timestamp of the vote.\r\n   */\r\n  event Voted(\r\n    address indexed voter,\r\n    address indexed pool,\r\n    uint256 indexed tokenId,\r\n    uint256 weight,\r\n    uint256 totalWeight,\r\n    uint256 timestamp\r\n  );\r\n\r\n  /**\r\n   * @notice Event emitted when a vote is abstained.\r\n   * @param voter Address of the voter.\r\n   * @param pool Address of the pool.\r\n   * @param tokenId ID of the token.\r\n   * @param weight Weight of the vote.\r\n   * @param totalWeight Total weight of the vote.\r\n   * @param timestamp Timestamp of the vote.\r\n   */\r\n  event Abstained(\r\n    address indexed voter,\r\n    address indexed pool,\r\n    uint256 indexed tokenId,\r\n    uint256 weight,\r\n    uint256 totalWeight,\r\n    uint256 timestamp\r\n  );\r\n\r\n  /**\r\n   * @notice Event emitted when a reward is notified.\r\n   * @param sender Address of the sender.\r\n   * @param reward Address of the reward.\r\n   * @param amount Amount of the reward.\r\n   */\r\n  event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\r\n\r\n  /**\r\n   * @notice Event emitted when a token is whitelisted.\r\n   * @param whitelister Address of the whitelister.\r\n   * @param token Address of the token.\r\n   * @param _bool Boolean indicating whitelist status.\r\n   */\r\n  event WhitelistToken(address indexed whitelister, address indexed token, bool indexed _bool);\r\n\r\n  /**\r\n   * @notice Event emitted when an NFT is whitelisted.\r\n   * @param whitelister Address of the whitelister.\r\n   * @param tokenId ID of the token.\r\n   * @param _bool Boolean indicating whitelist status.\r\n   */\r\n  event WhitelistNFT(address indexed whitelister, uint256 indexed tokenId, bool indexed _bool);\r\n\r\n  event LpTokensSet(address[] indexed lpTokens);\r\n  event MpoSet(address indexed mpo);\r\n  event GovernorSet(address indexed governor);\r\n  event MarketsAdded(Market[] markets);\r\n  event MarketRewardAccumulatorsSet(\r\n    address[] indexed markets,\r\n    MarketSide[] indexed marketSides,\r\n    address[] indexed rewardAccumulators\r\n  );\r\n  event BribesSet(address[] indexed rewardAccumulators, address[] indexed bribes);\r\n  event MaxVotingNumSet(uint256 indexed maxVotingNum);\r\n  event RewardAccumulatorAliveToggled(address indexed market, MarketSide indexed marketSide, bool isAlive);\r\n  event Initialized(address[] tokens, address mpo, address rewardToken, address ve, address governor);\r\n\r\n  /**\r\n   * @notice Get the weight of a market.\r\n   * @param market Address of the market.\r\n   * @param marketSide Side of the market.\r\n   * @param lpToken Address of the LP token.\r\n   * @return The weight of the market.\r\n   */\r\n  function weights(address market, MarketSide marketSide, address lpToken) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the votes for a token.\r\n   * @param tokenId ID of the token.\r\n   * @param market Address of the market.\r\n   * @param marketSide Side of the market.\r\n   * @param lpToken Address of the LP token.\r\n   * @return The votes for the token.\r\n   */\r\n  function votes(\r\n    uint256 tokenId,\r\n    address market,\r\n    MarketSide marketSide,\r\n    address lpToken\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the used weights for a token.\r\n   * @param tokenId ID of the token.\r\n   * @param lpToken Address of the LP token.\r\n   * @return The used weights for the token.\r\n   */\r\n  function usedWeights(uint256 tokenId, address lpToken) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the last voted timestamp for a token.\r\n   * @param tokenId ID of the token.\r\n   * @return The last voted timestamp for the token.\r\n   */\r\n  function lastVoted(uint256 tokenId) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Check if a token is whitelisted.\r\n   * @param token Address of the token.\r\n   * @return True if the token is whitelisted, false otherwise.\r\n   */\r\n  function isWhitelistedToken(address token) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Check if an NFT is whitelisted.\r\n   * @param tokenId ID of the token.\r\n   * @return True if the NFT is whitelisted, false otherwise.\r\n   */\r\n  function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\r\n\r\n  /**\r\n   * @notice Get the address of the ve contract.\r\n   * @return The address of the ve contract.\r\n   */\r\n  function ve() external view returns (address);\r\n\r\n  /**\r\n   * @notice Get the address of the governor.\r\n   * @return The address of the governor.\r\n   */\r\n  function governor() external view returns (address);\r\n\r\n  /**\r\n   * @notice Update voting balances in voting rewards contracts.\r\n   * @param _tokenId ID of veNFT whose balance you wish to update.\r\n   */\r\n  function poke(uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Vote for pools. Votes distributed proportionally based on weights.\r\n   * @dev Can only vote or deposit into a managed NFT once per epoch.\r\n   *      Can only vote for gauges that have not been killed.\r\n   *      Throws if length of _poolVote and _weights do not match.\r\n   * @param _tokenId ID of veNFT you are voting with.\r\n   * @param _poolVote Array of pools you are voting for.\r\n   * @param _marketVoteSide Array of market vote sides you are voting for.\r\n   * @param _weights Weights of pools.\r\n   */\r\n  function vote(\r\n    uint256 _tokenId,\r\n    address[] calldata _poolVote,\r\n    MarketSide[] calldata _marketVoteSide,\r\n    uint256[] calldata _weights\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Reset voting state. Required if you wish to make changes to veNFT state.\r\n   * @dev Cannot reset in the same epoch that you voted in.\r\n   *      Can vote or deposit into a managed NFT again after reset.\r\n   * @param _tokenId ID of veNFT that you are resetting.\r\n   */\r\n  function reset(uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Distributes rewards to eligible markets.\r\n   */\r\n  function distributeRewards() external;\r\n\r\n  /**\r\n   * @notice Claim bribes for a given NFT.\r\n   * @dev Utility to help batch bribe claims.\r\n   * @param _bribes Array of BribeVotingReward contracts to collect from.\r\n   * @param _tokens Array of tokens that are used as bribes.\r\n   * @param _tokenId ID of veNFT that you wish to claim bribes for.\r\n   */\r\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint256 _tokenId) external;\r\n\r\n  /**\r\n   * @notice Whitelist (or unwhitelist) token for use in bribes.\r\n   * @dev Throws if not called by governor.\r\n   * @param _token Address of the token.\r\n   * @param _bool Boolean indicating whitelist status.\r\n   */\r\n  function whitelistToken(address _token, bool _bool) external;\r\n\r\n  /**\r\n   * @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\r\n   * @dev Throws if not called by governor.\r\n   *      Throws if already whitelisted.\r\n   * @param _tokenId ID of the token.\r\n   * @param _bool Boolean indicating whitelist status.\r\n   */\r\n  function whitelistNFT(uint256 _tokenId, bool _bool) external;\r\n\r\n  /**\r\n   * @notice Set the LP tokens.\r\n   * @param _lpTokens Array of LP token addresses.\r\n   */\r\n  function setLpTokens(address[] memory _lpTokens) external;\r\n\r\n  /**\r\n   * @notice Set the Master Price Oracle (MPO) address.\r\n   * @param _mpo Address of the Master Price Oracle.\r\n   */\r\n  function setMpo(address _mpo) external;\r\n\r\n  /**\r\n   * @notice Set a new governor.\r\n   * @param _governor Address of the new governor.\r\n   */\r\n  function setGovernor(address _governor) external;\r\n\r\n  /**\r\n   * @notice Add new markets.\r\n   * @param _markets Array of Market structs to be added.\r\n   */\r\n  function addMarkets(Market[] calldata _markets) external;\r\n\r\n  /**\r\n   * @notice Set reward accumulators for markets.\r\n   * @param _markets Array of market addresses.\r\n   * @param _marketSides Array of market sides.\r\n   * @param _rewardAccumulators Array of reward accumulator addresses.\r\n   */\r\n  function setMarketRewardAccumulators(\r\n    address[] calldata _markets,\r\n    MarketSide[] calldata _marketSides,\r\n    address[] calldata _rewardAccumulators\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Set bribes for reward accumulators.\r\n   * @param _rewardAccumulators Array of reward accumulator addresses.\r\n   * @param _bribes Array of bribe addresses.\r\n   */\r\n  function setBribes(address[] calldata _rewardAccumulators, address[] calldata _bribes) external;\r\n\r\n  /**\r\n   * @notice Set the maximum number of votes.\r\n   * @param _maxVotingNum Maximum number of votes allowed.\r\n   */\r\n  function setMaxVotingNum(uint256 _maxVotingNum) external;\r\n\r\n  /**\r\n   * @notice Toggle the alive status of a reward accumulator.\r\n   * @param _market Address of the market.\r\n   * @param _marketSide Side of the market.\r\n   * @param _isAlive Boolean indicating if the reward accumulator is alive.\r\n   */\r\n  function toggleRewardAccumulatorAlive(address _market, MarketSide _marketSide, bool _isAlive) external;\r\n\r\n  /**\r\n   * @notice Get the start of the epoch for a given timestamp.\r\n   * @param _timestamp The timestamp to calculate the epoch start for.\r\n   * @return The start of the epoch.\r\n   */\r\n  function epochStart(uint256 _timestamp) external pure returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the next epoch for a given timestamp.\r\n   * @param _timestamp The timestamp to calculate the next epoch for.\r\n   * @return The next epoch.\r\n   */\r\n  function epochNext(uint256 _timestamp) external pure returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the start of the voting period for a given timestamp.\r\n   * @param _timestamp The timestamp to calculate the voting start for.\r\n   * @return The start of the voting period.\r\n   */\r\n  function epochVoteStart(uint256 _timestamp) external pure returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the end of the voting period for a given timestamp.\r\n   * @param _timestamp The timestamp to calculate the voting end for.\r\n   * @return The end of the voting period.\r\n   */\r\n  function epochVoteEnd(uint256 _timestamp) external pure returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the number of markets.\r\n   * @return The number of markets.\r\n   */\r\n  function marketsLength() external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get all LP reward tokens.\r\n   * @return An array of addresses representing all LP reward tokens.\r\n   */\r\n  function getAllLpRewardTokens() external view returns (address[] memory);\r\n\r\n  /**\r\n   * @notice Get vote details for a specific token ID and LP asset.\r\n   * @param _tokenId The ID of the token.\r\n   * @param _lpAsset The address of the LP asset.\r\n   * @return A struct containing vote details.\r\n   */\r\n  function getVoteDetails(uint256 _tokenId, address _lpAsset) external view returns (VoteDetails memory);\r\n}\r\n"
    },
    "contracts/veION/VoterLens.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.22;\r\n\r\nimport \"@openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\";\r\nimport \"./interfaces/IVoter.sol\";\r\nimport \"../PoolDirectory.sol\";\r\nimport { ICErc20 } from \"../compound/CTokenInterfaces.sol\";\r\nimport { ComptrollerExtensionInterface } from \"../compound/ComptrollerInterface.sol\";\r\n\r\ncontract VoterLens is Initializable {\r\n  struct BribeInfo {\r\n    address market;\r\n    address bribeSupply;\r\n    address bribeBorrow;\r\n  }\r\n\r\n  struct IncentiveInfo {\r\n    address bribeSupply;\r\n    address[] rewardsSupply;\r\n    address bribeBorrow;\r\n    address[] rewardsBorrow;\r\n  }\r\n\r\n  address voter;\r\n  PoolDirectory poolDirectory;\r\n\r\n  function initialize(address _voter, PoolDirectory _poolDirectory) public initializer {\r\n    voter = _voter;\r\n    poolDirectory = _poolDirectory;\r\n  }\r\n\r\n  function getAllBribes() public view returns (BribeInfo[] memory _bribeInfo) {\r\n    uint256 count = 0;\r\n    uint256 totalMarketsLength = 0;\r\n    (, PoolDirectory.Pool[] memory activePools) = poolDirectory.getActivePools();\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      ComptrollerExtensionInterface comptroller = ComptrollerExtensionInterface(activePools[i].comptroller);\r\n      ICErc20[] memory markets = comptroller.getAllMarkets();\r\n      totalMarketsLength += markets.length;\r\n    }\r\n\r\n    _bribeInfo = new BribeInfo[](totalMarketsLength);\r\n\r\n    for (uint256 i = 0; i < activePools.length; i++) {\r\n      ComptrollerExtensionInterface comptroller = ComptrollerExtensionInterface(activePools[i].comptroller);\r\n      ICErc20[] memory markets = comptroller.getAllMarkets();\r\n\r\n      for (uint256 j = 0; j < markets.length; j++) {\r\n        address rewardAccumulatorSupply = IVoterView(voter).marketToRewardAccumulators(\r\n          address(markets[j]),\r\n          IVoter.MarketSide.Supply\r\n        );\r\n        address rewardAccumulatorBorrow = IVoterView(voter).marketToRewardAccumulators(\r\n          address(markets[j]),\r\n          IVoter.MarketSide.Borrow\r\n        );\r\n\r\n        address bribeSupply = IVoterView(voter).rewardAccumulatorToBribe(rewardAccumulatorSupply);\r\n        address bribeBorrow = IVoterView(voter).rewardAccumulatorToBribe(rewardAccumulatorBorrow);\r\n\r\n        _bribeInfo[count] = BribeInfo({\r\n          market: address(markets[j]),\r\n          bribeSupply: bribeSupply,\r\n          bribeBorrow: bribeBorrow\r\n        });\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n\r\n  function getAllIncentivesForBribes() external view returns (IncentiveInfo[] memory _incentiveInfo) {\r\n    BribeInfo[] memory _bribeInfo = getAllBribes();\r\n    _incentiveInfo = new IncentiveInfo[](_bribeInfo.length);\r\n    for (uint256 i; i < _bribeInfo.length; i++) {\r\n      _incentiveInfo[i].bribeSupply = _bribeInfo[i].bribeSupply;\r\n      _incentiveInfo[i].bribeBorrow = _bribeInfo[i].bribeBorrow;\r\n\r\n      uint256 supplyRewardsLength = IBribeRewardsView(_bribeInfo[i].bribeSupply).rewardsListLength();\r\n      _incentiveInfo[i].rewardsSupply = new address[](supplyRewardsLength);\r\n      for (uint256 j; j < supplyRewardsLength; j++) {\r\n        _incentiveInfo[i].rewardsSupply[j] = IBribeRewardsView(_bribeInfo[i].bribeSupply).rewards(j);\r\n      }\r\n\r\n      uint256 borrowRewardsLength = IBribeRewardsView(_bribeInfo[i].bribeBorrow).rewardsListLength();\r\n      _incentiveInfo[i].rewardsBorrow = new address[](borrowRewardsLength);\r\n      for (uint256 j; j < borrowRewardsLength; j++) {\r\n        _incentiveInfo[i].rewardsBorrow[j] = IBribeRewardsView(_bribeInfo[i].bribeBorrow).rewards(j);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ninterface IVoterView {\r\n  function rewardAccumulatorToBribe(address rewardAccumulator) external view returns (address);\r\n  function marketToRewardAccumulators(address market, IVoter.MarketSide marketSide) external view returns (address);\r\n}\r\n\r\ninterface IBribeRewardsView {\r\n  function rewards(uint256 index) external view returns (address);\r\n  function rewardsListLength() external view returns (uint256);\r\n}\r\n"
    },
    "solmate/auth/Auth.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\r\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\r\nabstract contract Auth {\r\n    event OwnerUpdated(address indexed user, address indexed newOwner);\r\n\r\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\r\n\r\n    address public owner;\r\n\r\n    Authority public authority;\r\n\r\n    constructor(address _owner, Authority _authority) {\r\n        owner = _owner;\r\n        authority = _authority;\r\n\r\n        emit OwnerUpdated(msg.sender, _owner);\r\n        emit AuthorityUpdated(msg.sender, _authority);\r\n    }\r\n\r\n    modifier requiresAuth() virtual {\r\n        require(isAuthorized(msg.sender, msg.sig), \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\r\n        Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\r\n\r\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\r\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\r\n        return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\r\n    }\r\n\r\n    function setAuthority(Authority newAuthority) public virtual {\r\n        // We check if the caller is the owner first because we want to ensure they can\r\n        // always swap out the authority even if it's reverting or using up a lot of gas.\r\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\r\n\r\n        authority = newAuthority;\r\n\r\n        emit AuthorityUpdated(msg.sender, newAuthority);\r\n    }\r\n\r\n    function setOwner(address newOwner) public virtual requiresAuth {\r\n        owner = newOwner;\r\n\r\n        emit OwnerUpdated(msg.sender, newOwner);\r\n    }\r\n}\r\n\r\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\r\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\r\ninterface Authority {\r\n    function canCall(\r\n        address user,\r\n        address target,\r\n        bytes4 functionSig\r\n    ) external view returns (bool);\r\n}\r\n"
    },
    "solmate/auth/authorities/RolesAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\nimport {Auth, Authority} from \"../Auth.sol\";\r\n\r\n/// @notice Role based Authority that supports up to 256 roles.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/authorities/RolesAuthority.sol)\r\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-roles/blob/master/src/roles.sol)\r\ncontract RolesAuthority is Auth, Authority {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event UserRoleUpdated(address indexed user, uint8 indexed role, bool enabled);\r\n\r\n    event PublicCapabilityUpdated(address indexed target, bytes4 indexed functionSig, bool enabled);\r\n\r\n    event RoleCapabilityUpdated(uint8 indexed role, address indexed target, bytes4 indexed functionSig, bool enabled);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(address _owner, Authority _authority) Auth(_owner, _authority) {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            ROLE/USER STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    mapping(address => bytes32) public getUserRoles;\r\n\r\n    mapping(address => mapping(bytes4 => bool)) public isCapabilityPublic;\r\n\r\n    mapping(address => mapping(bytes4 => bytes32)) public getRolesWithCapability;\r\n\r\n    function doesUserHaveRole(address user, uint8 role) public view virtual returns (bool) {\r\n        return (uint256(getUserRoles[user]) >> role) & 1 != 0;\r\n    }\r\n\r\n    function doesRoleHaveCapability(\r\n        uint8 role,\r\n        address target,\r\n        bytes4 functionSig\r\n    ) public view virtual returns (bool) {\r\n        return (uint256(getRolesWithCapability[target][functionSig]) >> role) & 1 != 0;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           AUTHORIZATION LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function canCall(\r\n        address user,\r\n        address target,\r\n        bytes4 functionSig\r\n    ) public view virtual override returns (bool) {\r\n        return\r\n            isCapabilityPublic[target][functionSig] ||\r\n            bytes32(0) != getUserRoles[user] & getRolesWithCapability[target][functionSig];\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                   ROLE CAPABILITY CONFIGURATION LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setPublicCapability(\r\n        address target,\r\n        bytes4 functionSig,\r\n        bool enabled\r\n    ) public virtual requiresAuth {\r\n        isCapabilityPublic[target][functionSig] = enabled;\r\n\r\n        emit PublicCapabilityUpdated(target, functionSig, enabled);\r\n    }\r\n\r\n    function setRoleCapability(\r\n        uint8 role,\r\n        address target,\r\n        bytes4 functionSig,\r\n        bool enabled\r\n    ) public virtual requiresAuth {\r\n        if (enabled) {\r\n            getRolesWithCapability[target][functionSig] |= bytes32(1 << role);\r\n        } else {\r\n            getRolesWithCapability[target][functionSig] &= ~bytes32(1 << role);\r\n        }\r\n\r\n        emit RoleCapabilityUpdated(role, target, functionSig, enabled);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                       USER ROLE ASSIGNMENT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setUserRole(\r\n        address user,\r\n        uint8 role,\r\n        bool enabled\r\n    ) public virtual requiresAuth {\r\n        if (enabled) {\r\n            getUserRoles[user] |= bytes32(1 << role);\r\n        } else {\r\n            getUserRoles[user] &= ~bytes32(1 << role);\r\n        }\r\n\r\n        emit UserRoleUpdated(user, role, enabled);\r\n    }\r\n}\r\n"
    },
    "solmate/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            address recoveredAddress = ecrecover(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        \"\\x19\\x01\",\r\n                        DOMAIN_SEPARATOR(),\r\n                        keccak256(\r\n                            abi.encode(\r\n                                keccak256(\r\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n                                ),\r\n                                owner,\r\n                                spender,\r\n                                value,\r\n                                nonces[owner]++,\r\n                                deadline\r\n                            )\r\n                        )\r\n                    )\r\n                ),\r\n                v,\r\n                r,\r\n                s\r\n            );\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}